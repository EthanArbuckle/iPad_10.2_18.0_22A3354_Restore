void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a2 = -994;
  v2 = (*(_DWORD *)(result + 16) - 1);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) <= v2)
  {
    __break(1u);
  }
  else
  {
    v4 = v3 + 24 * v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(v4 + 16) = 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  *(_DWORD *)a2 = -994;
  v2 = (*(_DWORD *)(result + 16) - 1);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) <= v2)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 24 * v2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFBC40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_18CCFBD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:fe180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:fe180100](v11);
  v15 = *(void **)(v9 + 64);
  if (v15)
  {
    *(_QWORD *)(v9 + 72) = v15;
    operator delete(v15);
  }
  v16 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v9 + 48) = v16;
    operator delete(v16);
  }
  std::locale::~locale(v10);
  v17 = *(_QWORD *)(v9 + 8);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char v52;
  char *v53;
  char v54;
  char *v55;
  char v56;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v5 = *(_BYTE **)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12)
        goto LABEL_22;
      v6 = *(_BYTE **)(a1 + 40);
      v13 = v5 - v6;
      v14 = v5 - v6 + 1;
      if (v14 >= 0)
      {
        v15 = v12 - (_QWORD)v6;
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v11 = operator new(v16);
        else
          v11 = 0;
        v18 = (char *)v11 + v13;
        v19 = (char *)v11 + v16;
        *((_BYTE *)v11 + v13) = v2;
        v17 = (uint64_t)v11 + v13 + 1;
        if (v5 == v6)
          goto LABEL_49;
        if (v13 >= 8 && (unint64_t)(v6 - (_BYTE *)v11) >= 0x20)
        {
          if (v13 >= 0x20)
          {
            v25 = v13 & 0xFFFFFFFFFFFFFFE0;
            v35 = (__int128 *)(v5 - 16);
            v36 = (char *)v11 + v5 - 16 - v6;
            v37 = v13 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v38 = *v35;
              *(v36 - 1) = *(v35 - 1);
              *v36 = v38;
              v36 -= 2;
              v35 -= 2;
              v37 -= 32;
            }
            while (v37);
            if (v13 == v25)
              goto LABEL_73;
            if ((v13 & 0x18) == 0)
            {
              v18 -= v25;
              v5 -= v25;
              goto LABEL_80;
            }
          }
          else
          {
            v25 = 0;
          }
          v39 = v25 - (v13 & 0xFFFFFFFFFFFFFFF8);
          v40 = &v5[-v25 - 8];
          v41 = (char *)(v40 - v6);
          do
          {
            v42 = *(_QWORD *)v40;
            v40 -= 8;
            *(_QWORD *)&v41[(_QWORD)v11] = v42;
            v41 -= 8;
            v39 += 8;
          }
          while (v39);
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_73;
          v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
          v5 -= v13 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_80:
        v53 = v18 - 1;
        do
        {
          v54 = *--v5;
          *v53-- = v54;
        }
        while (v5 != v6);
        goto LABEL_86;
      }
LABEL_90:
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    if ((unint64_t)v5 < v12)
      goto LABEL_22;
    v6 = *(_BYTE **)(a1 + 40);
    v21 = v5 - v6;
    v22 = v5 - v6 + 1;
    if (v22 < 0)
      goto LABEL_90;
    v23 = v12 - (_QWORD)v6;
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
      v11 = operator new(v24);
    else
      v11 = 0;
    v18 = (char *)v11 + v21;
    v19 = (char *)v11 + v24;
    *((_BYTE *)v11 + v21) = v2;
    v17 = (uint64_t)v11 + v21 + 1;
    if (v5 == v6)
      goto LABEL_49;
    if (v21 >= 8 && (unint64_t)(v6 - (_BYTE *)v11) >= 0x20)
    {
      if (v21 >= 0x20)
      {
        v26 = v21 & 0xFFFFFFFFFFFFFFE0;
        v43 = (__int128 *)(v5 - 16);
        v44 = (char *)v11 + v5 - 16 - v6;
        v45 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          *v44 = v46;
          v44 -= 2;
          v43 -= 2;
          v45 -= 32;
        }
        while (v45);
        if (v21 == v26)
          goto LABEL_73;
        if ((v21 & 0x18) == 0)
        {
          v18 -= v26;
          v5 -= v26;
          goto LABEL_84;
        }
      }
      else
      {
        v26 = 0;
      }
      v47 = v26 - (v21 & 0xFFFFFFFFFFFFFFF8);
      v48 = &v5[-v26 - 8];
      v49 = (char *)(v48 - v6);
      do
      {
        v50 = *(_QWORD *)v48;
        v48 -= 8;
        *(_QWORD *)&v49[(_QWORD)v11] = v50;
        v49 -= 8;
        v47 += 8;
      }
      while (v47);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_73;
      v18 -= v21 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v21 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_84:
    v55 = v18 - 1;
    do
    {
      v56 = *--v5;
      *v55-- = v56;
    }
    while (v5 != v6);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    *v5 = v2;
    v17 = (uint64_t)(v5 + 1);
    goto LABEL_89;
  }
  v6 = *(_BYTE **)(a1 + 40);
  v7 = v5 - v6;
  v8 = v5 - v6 + 1;
  if (v8 < 0)
    goto LABEL_90;
  v9 = v4 - (_QWORD)v6;
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
    v11 = operator new(v10);
  else
    v11 = 0;
  v18 = (char *)v11 + v7;
  v19 = (char *)v11 + v10;
  *((_BYTE *)v11 + v7) = v2;
  v17 = (uint64_t)v11 + v7 + 1;
  if (v5 == v6)
  {
LABEL_49:
    v11 = v18;
    goto LABEL_87;
  }
  if (v7 < 8 || (unint64_t)(v6 - (_BYTE *)v11) < 0x20)
    goto LABEL_75;
  if (v7 < 0x20)
  {
    v20 = 0;
    goto LABEL_54;
  }
  v20 = v7 & 0xFFFFFFFFFFFFFFE0;
  v27 = (__int128 *)(v5 - 16);
  v28 = (char *)v11 + v5 - 16 - v6;
  v29 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v30 = *v27;
    *(v28 - 1) = *(v27 - 1);
    *v28 = v30;
    v28 -= 2;
    v27 -= 2;
    v29 -= 32;
  }
  while (v29);
  if (v7 == v20)
    goto LABEL_73;
  if ((v7 & 0x18) != 0)
  {
LABEL_54:
    v31 = v20 - (v7 & 0xFFFFFFFFFFFFFFF8);
    v32 = &v5[-v20 - 8];
    v33 = (char *)(v32 - v6);
    do
    {
      v34 = *(_QWORD *)v32;
      v32 -= 8;
      *(_QWORD *)&v33[(_QWORD)v11] = v34;
      v33 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFF8))
    {
      v18 -= v7 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v7 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_75;
    }
LABEL_73:
    v5 = v6;
    goto LABEL_87;
  }
  v18 -= v20;
  v5 -= v20;
LABEL_75:
  v51 = v18 - 1;
  do
  {
    v52 = *--v5;
    *v51-- = v52;
  }
  while (v5 != v6);
LABEL_86:
  v5 = *(_BYTE **)(a1 + 40);
LABEL_87:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v19;
  if (v5)
    operator delete(v5);
LABEL_89:
  *(_QWORD *)(a1 + 48) = v17;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  unint64_t v13;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  for (i = a2; ; v6 = i)
  {
    v8 = *i++;
    if (v8 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    --v5;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v12;
  v9 = v13;
  *(_QWORD *)(a4 + 16) = v13;
  v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a4 + 8);
  if (v10 - 1 >= 2)
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  char v9;
  char v10;
  unint64_t v11;
  _BYTE *v12;
  int v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char v66;
  char *v67;
  char v68;
  char *v69;
  char v70;

  if (this == a3)
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)3>();
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case 'D':
      v7 = *(_DWORD *)(a5 + 164) | 0x400;
      goto LABEL_10;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, (uint64_t *)a4);
    case 'S':
      v7 = *(_DWORD *)(a5 + 164) | 0x4000;
LABEL_10:
      *(_DWORD *)(a5 + 164) = v7;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      if (!*(_BYTE *)(a5 + 169))
      {
        v15 = *(_BYTE **)(a5 + 72);
        v14 = *(_QWORD *)(a5 + 80);
        if (*(_BYTE *)(a5 + 170))
        {
          if ((unint64_t)v15 >= v14)
          {
            v16 = *(_BYTE **)(a5 + 64);
            v17 = v15 - v16;
            v18 = v15 - v16 + 1;
            if (v18 < 0)
              goto LABEL_117;
            v19 = v14 - (_QWORD)v16;
            if (2 * v19 > v18)
              v18 = 2 * v19;
            if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
              v20 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
              v21 = operator new(v20);
            else
              v21 = 0;
            v37 = (char *)v21 + v17;
            v38 = (char *)v21 + v20;
            *((_BYTE *)v21 + v17) = 95;
            v28 = (uint64_t)v21 + v17 + 1;
            if (v15 != v16)
            {
              if (v17 < 8 || (unint64_t)(v16 - (_BYTE *)v21) < 0x20)
                goto LABEL_105;
              if (v17 >= 0x20)
              {
                v39 = v17 & 0xFFFFFFFFFFFFFFE0;
                v49 = (__int128 *)(v15 - 16);
                v50 = (char *)v21 + v15 - 16 - v16;
                v51 = v17 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v52 = *v49;
                  *(v50 - 1) = *(v49 - 1);
                  *v50 = v52;
                  v50 -= 2;
                  v49 -= 2;
                  v51 -= 32;
                }
                while (v51);
                if (v17 == v39)
                  goto LABEL_95;
                if ((v17 & 0x18) == 0)
                {
                  v37 -= v39;
                  v15 -= v39;
LABEL_105:
                  v67 = v37 - 1;
                  do
                  {
                    v68 = *--v15;
                    *v67-- = v68;
                  }
                  while (v15 != v16);
LABEL_111:
                  v15 = *(_BYTE **)(a5 + 64);
LABEL_112:
                  *(_QWORD *)(a5 + 64) = v21;
                  *(_QWORD *)(a5 + 72) = v28;
                  *(_QWORD *)(a5 + 80) = v38;
                  if (v15)
                    operator delete(v15);
                  goto LABEL_114;
                }
              }
              else
              {
                v39 = 0;
              }
              v53 = v39 - (v17 & 0xFFFFFFFFFFFFFFF8);
              v54 = &v15[-v39 - 8];
              v55 = (char *)(v54 - v16);
              do
              {
                v56 = *(_QWORD *)v54;
                v54 -= 8;
                *(_QWORD *)&v55[(_QWORD)v21] = v56;
                v55 -= 8;
                v53 += 8;
              }
              while (v53);
              if (v17 != (v17 & 0xFFFFFFFFFFFFFFF8))
              {
                v37 -= v17 & 0xFFFFFFFFFFFFFFF8;
                v15 -= v17 & 0xFFFFFFFFFFFFFFF8;
                goto LABEL_105;
              }
LABEL_95:
              v15 = v16;
              goto LABEL_112;
            }
LABEL_70:
            v21 = v37;
            goto LABEL_112;
          }
LABEL_42:
          *v15 = 95;
          v28 = (uint64_t)(v15 + 1);
LABEL_114:
          *(_QWORD *)(a5 + 72) = v28;
          return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
        }
        if ((unint64_t)v15 < v14)
          goto LABEL_42;
        v16 = *(_BYTE **)(a5 + 64);
        v33 = v15 - v16;
        v34 = v15 - v16 + 1;
        if (v34 < 0)
          goto LABEL_117;
        v35 = v14 - (_QWORD)v16;
        if (2 * v35 > v34)
          v34 = 2 * v35;
        if (v35 >= 0x3FFFFFFFFFFFFFFFLL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
          v21 = operator new(v36);
        else
          v21 = 0;
        v37 = (char *)v21 + v33;
        v38 = (char *)v21 + v36;
        *((_BYTE *)v21 + v33) = 95;
        v28 = (uint64_t)v21 + v33 + 1;
        if (v15 == v16)
          goto LABEL_70;
        if (v33 >= 8 && (unint64_t)(v16 - (_BYTE *)v21) >= 0x20)
        {
          if (v33 >= 0x20)
          {
            v40 = v33 & 0xFFFFFFFFFFFFFFE0;
            v57 = (__int128 *)(v15 - 16);
            v58 = (char *)v21 + v15 - 16 - v16;
            v59 = v33 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v60 = *v57;
              *(v58 - 1) = *(v57 - 1);
              *v58 = v60;
              v58 -= 2;
              v57 -= 2;
              v59 -= 32;
            }
            while (v59);
            if (v33 == v40)
              goto LABEL_95;
            if ((v33 & 0x18) == 0)
            {
              v37 -= v40;
              v15 -= v40;
              goto LABEL_109;
            }
          }
          else
          {
            v40 = 0;
          }
          v61 = v40 - (v33 & 0xFFFFFFFFFFFFFFF8);
          v62 = &v15[-v40 - 8];
          v63 = (char *)(v62 - v16);
          do
          {
            v64 = *(_QWORD *)v62;
            v62 -= 8;
            *(_QWORD *)&v63[(_QWORD)v21] = v64;
            v63 -= 8;
            v61 += 8;
          }
          while (v61);
          if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_95;
          v37 -= v33 & 0xFFFFFFFFFFFFFFF8;
          v15 -= v33 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_109:
        v69 = v37 - 1;
        do
        {
          v70 = *--v15;
          *v69-- = v70;
        }
        while (v15 != v16);
        goto LABEL_111;
      }
      v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v10 = v9;
      v12 = *(_BYTE **)(a5 + 72);
      v11 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v12 >= v11)
      {
        v22 = *(_BYTE **)(a5 + 64);
        v23 = v12 - v22;
        v24 = v12 - v22 + 1;
        if (v24 >= 0)
        {
          v25 = v11 - (_QWORD)v22;
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
            v26 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
            v27 = operator new(v26);
          else
            v27 = 0;
          v29 = (char *)v27 + v23;
          v30 = (char *)v27 + v26;
          *((_BYTE *)v27 + v23) = v10;
          v31 = (uint64_t)v27 + v23 + 1;
          if (v12 == v22)
          {
            v27 = (char *)v27 + v23;
            goto LABEL_100;
          }
          if (v23 >= 8 && (unint64_t)(v22 - (_BYTE *)v27) >= 0x20)
          {
            if (v23 < 0x20)
            {
              v32 = 0;
              goto LABEL_75;
            }
            v32 = v23 & 0xFFFFFFFFFFFFFFE0;
            v41 = (__int128 *)(v12 - 16);
            v42 = (char *)v27 + v12 - 16 - v22;
            v43 = v23 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v44 = *v41;
              *(v42 - 1) = *(v41 - 1);
              *v42 = v44;
              v42 -= 2;
              v41 -= 2;
              v43 -= 32;
            }
            while (v43);
            if (v23 == v32)
              goto LABEL_78;
            if ((v23 & 0x18) != 0)
            {
LABEL_75:
              v45 = v32 - (v23 & 0xFFFFFFFFFFFFFFF8);
              v46 = &v12[-v32 - 8];
              v47 = (char *)(v46 - v22);
              do
              {
                v48 = *(_QWORD *)v46;
                v46 -= 8;
                *(_QWORD *)&v47[(_QWORD)v27] = v48;
                v47 -= 8;
                v45 += 8;
              }
              while (v45);
              if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_78:
                v12 = v22;
                goto LABEL_100;
              }
              v29 -= v23 & 0xFFFFFFFFFFFFFFF8;
              v12 -= v23 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_97;
            }
            v29 -= v32;
            v12 -= v32;
          }
LABEL_97:
          v65 = v29 - 1;
          do
          {
            v66 = *--v12;
            *v65-- = v66;
          }
          while (v12 != v22);
          v12 = *(_BYTE **)(a5 + 64);
LABEL_100:
          *(_QWORD *)(a5 + 64) = v27;
          *(_QWORD *)(a5 + 72) = v31;
          *(_QWORD *)(a5 + 80) = v30;
          if (v12)
            operator delete(v12);
          *(_QWORD *)(a5 + 72) = v31;
          return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
        }
LABEL_117:
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      *v12 = v9;
      *(_QWORD *)(a5 + 72) = v12 + 1;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    case 'd':
      v13 = *(_DWORD *)(a5 + 160) | 0x400;
      goto LABEL_18;
    case 's':
      v13 = *(_DWORD *)(a5 + 160) | 0x4000;
LABEL_18:
      *(_DWORD *)(a5 + 160) = v13;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](a5, 95);
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    default:
      if (LOBYTE(this->__traits_.__loc_.__locale_))
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, (uint64_t *)a4);
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 1) = 0;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;
  __int16 v12;

  if (a2 == a3)
LABEL_73:
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (!a4)
      {
        v6 = *a2;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return a2 + 1;
    case 'a':
      if (!a4)
      {
        v6 = 7;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 7;
      goto LABEL_67;
    case 'b':
      if (!a4)
      {
        v6 = 8;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 8;
      goto LABEL_67;
    case 'f':
      if (!a4)
      {
        v6 = 12;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 12;
      goto LABEL_67;
    case 'n':
      if (!a4)
      {
        v6 = 10;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 10;
      goto LABEL_67;
    case 'r':
      if (!a4)
      {
        v6 = 13;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 13;
      goto LABEL_67;
    case 't':
      if (!a4)
      {
        v6 = 9;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v12 = 9;
      goto LABEL_67;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v12 = 11;
LABEL_67:
        *(_WORD *)a4 = v12;
        return a2 + 1;
      }
      else
      {
        v6 = 11;
LABEL_52:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_73;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_17:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_17;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_17;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:fe180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  _WORD *v9;
  __int16 v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _WORD *v27;
  char *v28;
  _WORD *v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  unint64_t v34;
  __int128 v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _WORD *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  __int16 v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  char *v55;
  unint64_t v56;
  __int128 v57;
  __int16 v58;

  if (!*(_BYTE *)(a1 + 169))
  {
    v10 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v12 = *(char **)(a1 + 120);
    v11 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v12 >= v11)
      {
        v13 = *(char **)(a1 + 112);
        v14 = v12 - v13;
        if (v12 - v13 <= -3)
          goto LABEL_73;
        v15 = v14 >> 1;
        v16 = v11 - (_QWORD)v13;
        if (v16 <= (v14 >> 1) + 1)
          v17 = v15 + 1;
        else
          v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          if (v18 < 0)
            goto LABEL_74;
          v19 = operator new(2 * v18);
        }
        else
        {
          v19 = 0;
        }
        v43 = &v19[2 * v15];
        v44 = &v19[2 * v18];
        *v43 = v10;
        v9 = v43 + 1;
        if (v12 != v13)
        {
          v45 = v12 - v13 - 2;
          if (v45 < 0x1E)
            goto LABEL_77;
          if (v12 - v19 - (v14 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_77;
          v46 = (v45 >> 1) + 1;
          v47 = &v19[2 * v15 - 16];
          v48 = v12 - 16;
          v49 = v46 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 16;
          }
          while (v49);
          v43 -= v46 & 0xFFFFFFFFFFFFFFF0;
          v12 -= 2 * (v46 & 0xFFFFFFFFFFFFFFF0);
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_77:
            do
            {
              v51 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *--v43 = v51;
            }
            while (v12 != v13);
LABEL_68:
            v13 = *(char **)(a1 + 112);
            goto LABEL_70;
          }
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }
    else if ((unint64_t)v12 >= v11)
    {
      v13 = *(char **)(a1 + 112);
      v37 = v12 - v13;
      if (v12 - v13 <= -3)
        goto LABEL_73;
      v38 = v37 >> 1;
      v39 = v11 - (_QWORD)v13;
      if (v39 <= (v37 >> 1) + 1)
        v40 = v38 + 1;
      else
        v40 = v39;
      if (v39 >= 0x7FFFFFFFFFFFFFFELL)
        v41 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
      {
        if (v41 < 0)
          goto LABEL_74;
        v42 = operator new(2 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[2 * v38];
      v44 = &v42[2 * v41];
      *v43 = v10;
      v9 = v43 + 1;
      if (v12 != v13)
      {
        v52 = v12 - v13 - 2;
        if (v52 < 0x1E)
          goto LABEL_78;
        if (v12 - v42 - (v37 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          goto LABEL_78;
        v53 = (v52 >> 1) + 1;
        v54 = &v42[2 * v38 - 16];
        v55 = v12 - 16;
        v56 = v53 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 16;
        }
        while (v56);
        v43 -= v53 & 0xFFFFFFFFFFFFFFF0;
        v12 -= 2 * (v53 & 0xFFFFFFFFFFFFFFF0);
        if (v53 != (v53 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_78:
          do
          {
            v58 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *--v43 = v58;
          }
          while (v12 != v13);
          goto LABEL_68;
        }
LABEL_70:
        *(_QWORD *)(a1 + 112) = v43;
        *(_QWORD *)(a1 + 120) = v9;
        *(_QWORD *)(a1 + 128) = v44;
        if (v13)
          operator delete(v13);
        goto LABEL_72;
      }
LABEL_69:
      v13 = v12;
      goto LABEL_70;
    }
    *(_WORD *)v12 = v10;
    v9 = v12 + 2;
    goto LABEL_72;
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(char **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
    *(_WORD *)v8 = v6;
    v9 = v8 + 2;
LABEL_72:
    *(_QWORD *)(a1 + 120) = v9;
    return;
  }
  v20 = *(char **)(a1 + 112);
  v21 = v8 - v20;
  if (v8 - v20 <= -3)
LABEL_73:
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  v22 = v21 >> 1;
  v23 = v7 - (_QWORD)v20;
  if (v23 <= (v21 >> 1) + 1)
    v24 = v22 + 1;
  else
    v24 = v23;
  if (v23 >= 0x7FFFFFFFFFFFFFFELL)
    v25 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (!v25)
  {
    v26 = 0;
    goto LABEL_29;
  }
  if (v25 < 0)
LABEL_74:
    std::__throw_bad_array_new_length[abi:fe180100]();
  v26 = operator new(2 * v25);
LABEL_29:
  v27 = &v26[2 * v22];
  v28 = &v26[2 * v25];
  *v27 = v6;
  v29 = v27 + 1;
  if (v8 == v20)
  {
    v20 = v8;
  }
  else
  {
    v30 = v8 - v20 - 2;
    if (v30 < 0x1E)
      goto LABEL_79;
    if (v8 - v26 - (v21 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_79;
    v31 = (v30 >> 1) + 1;
    v32 = &v26[2 * v22 - 16];
    v33 = v8 - 16;
    v34 = v31 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 16;
    }
    while (v34);
    v27 -= v31 & 0xFFFFFFFFFFFFFFF0;
    v8 -= 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
    if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_79:
      do
      {
        v36 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v27 = v36;
      }
      while (v8 != v20);
      v20 = *(char **)(a1 + 112);
    }
  }
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v29;
  *(_QWORD *)(a1 + 128) = v28;
  if (v20)
    operator delete(v20);
  *(_QWORD *)(a1 + 120) = v29;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4;
  char *v6;
  _BYTE *p_p;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  char *v19;
  void *__p;
  unint64_t v21;
  int64_t v22;

  v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  v6 = a3;
  if (v4 <= 0x16)
  {
    HIBYTE(v22) = (_BYTE)a4 - (_BYTE)a3;
    p_p = &__p;
    if (a3 == a4)
      goto LABEL_18;
LABEL_8:
    if (v4 < 0x20 || (unint64_t)(p_p - v6) < 0x20)
    {
      v12 = p_p;
    }
    else
    {
      v11 = v4 & 0xFFFFFFFFFFFFFFE0;
      v12 = &p_p[v4 & 0xFFFFFFFFFFFFFFE0];
      v13 = (__int128 *)(v6 + 16);
      v14 = p_p + 16;
      v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v11)
      {
        p_p += v4 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_18;
      }
      v6 += v11;
    }
    p_p = v12;
    do
    {
      v17 = *v6++;
      *p_p++ = v17;
    }
    while (v6 != a4);
    goto LABEL_18;
  }
  v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v9 = v4 | 7;
  v10 = v9 + 1;
  p_p = operator new(v9 + 1);
  v21 = v4;
  v22 = v10 | 0x8000000000000000;
  __p = p_p;
  if (v6 != a4)
    goto LABEL_8;
LABEL_18:
  *p_p = 0;
  v18 = HIBYTE(v22);
  if (v22 >= 0)
    v19 = (char *)&__p;
  else
    v19 = (char *)__p;
  if (v22 < 0)
    v18 = v21;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v19, &v19[v18]);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
}

void sub_18CCFD040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v2];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFD22C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFD278(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E2522578;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E2522630;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E25223D0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_18CCFD3B4(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x18D789BDC](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522630;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522630;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522578;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522578;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, uint64_t *a4)
{
  std::basic_regex<char> *v4;
  uint64_t locale_low;
  std::basic_regex<char>::value_type v6;
  unsigned int v7;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  std::basic_regex<char>::value_type v16;

  v4 = this;
  if (this != a3)
  {
    locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
    v6 = locale_low;
    switch((char)locale_low)
    {
      case '0':
        if (!a4)
        {
          v6 = 0;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        break;
      case 'c':
        if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3
          || SBYTE1(v4->__traits_.__loc_.__locale_) < 65)
        {
          goto LABEL_86;
        }
        v7 = BYTE1(v4->__traits_.__loc_.__locale_);
        if (v7 >= 0x5B && (v7 - 97) > 0x19u)
          goto LABEL_86;
        v9 = v7 & 0x1F;
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v9;
          *((_BYTE *)a4 + 1) = 0;
          return (std::basic_regex<char> *)((char *)v4 + 2);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
          return (std::basic_regex<char> *)((char *)v4 + 2);
        }
      case 'f':
        if (!a4)
        {
          v6 = 12;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        break;
      case 'n':
        if (!a4)
        {
          v6 = 10;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        break;
      case 'r':
        if (!a4)
        {
          v6 = 13;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        break;
      case 't':
        if (!a4)
        {
          v6 = 9;
          goto LABEL_67;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        break;
      case 'u':
        if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) != a3)
        {
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
          {
            v4 = (std::basic_regex<char> *)((char *)v4 + 2);
            if (v4 != a3)
            {
              v11 = LOBYTE(v4->__traits_.__loc_.__locale_);
              if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
                goto LABEL_42;
            }
          }
        }
        goto LABEL_86;
      case 'v':
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_WORD *)a4 = 11;
        }
        else
        {
          v6 = 11;
LABEL_67:
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        }
        break;
      case 'x':
LABEL_42:
        if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_86;
        v12 = BYTE1(v4->__traits_.__loc_.__locale_);
        v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          goto LABEL_47;
        v12 |= 0x20u;
        if ((v12 - 97) >= 6u)
          goto LABEL_86;
        v13 = -87;
LABEL_47:
        if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
          goto LABEL_86;
        v14 = BYTE2(v4->__traits_.__loc_.__locale_);
        v15 = -48;
        if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        {
          v14 |= 0x20u;
          if ((v14 - 97) >= 6u)
LABEL_86:
            std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)3>();
          v15 = -87;
        }
        v16 = v15 + v14 + 16 * (v13 + v12);
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v16;
          *((_BYTE *)a4 + 1) = 0;
          return (std::basic_regex<char> *)((char *)v4 + 3);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        }
      default:
        if ((char)locale_low == 95
          || ((char)locale_low & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[locale_low] & 0x500) != 0)
        {
          goto LABEL_86;
        }
        if (!a4)
          goto LABEL_67;
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = locale_low;
        *((_BYTE *)a4 + 1) = 0;
        break;
    }
    return (std::basic_regex<char> *)((char *)v4 + 1);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4;
  char *v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  char v18;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char **v23;
  int v24;
  uint64_t v25;
  char **v26;
  size_t v27;
  std::string v28;
  char *__s[2];
  int64_t v30;

  v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  v6 = a3;
  if (v4 > 0x16)
  {
    v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v10 = v4 | 7;
    v11 = v10 + 1;
    v9 = (char *)operator new(v10 + 1);
    __s[1] = (char *)v4;
    v30 = v11 | 0x8000000000000000;
    __s[0] = v9;
    if (v6 == a4)
      goto LABEL_18;
  }
  else
  {
    HIBYTE(v30) = (_BYTE)a4 - (_BYTE)a3;
    v9 = (char *)__s;
    if (a3 == a4)
      goto LABEL_18;
  }
  if (v4 < 0x20 || (unint64_t)(v9 - v6) < 0x20)
  {
    v13 = v9;
  }
  else
  {
    v12 = v4 & 0xFFFFFFFFFFFFFFE0;
    v13 = &v9[v4 & 0xFFFFFFFFFFFFFFE0];
    v14 = (__int128 *)(v6 + 16);
    v15 = v9 + 16;
    v16 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v17 = *v14;
      *(v15 - 1) = *(v14 - 1);
      *v15 = v17;
      v14 += 2;
      v15 += 2;
      v16 -= 32;
    }
    while (v16);
    if (v4 == v12)
    {
      v9 += v4 & 0xFFFFFFFFFFFFFFE0;
      goto LABEL_18;
    }
    v6 += v12;
  }
  v9 = v13;
  do
  {
    v18 = *v6++;
    *v9++ = v18;
  }
  while (v6 != a4);
LABEL_18:
  *v9 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(v30) < 0)
  {
    if (!__s[1])
      goto LABEL_26;
    v19 = __s[0];
  }
  else
  {
    if (!HIBYTE(v30))
      return;
    v19 = (const char *)__s;
  }
  std::__get_collation_name(&v28, v19);
  *(_OWORD *)a1 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
  v20 = v28.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v28.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a1 + 8);
  if (v21)
    goto LABEL_26;
  if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    v22 = (char *)HIBYTE(v30);
    if (HIBYTE(v30) >= 3u)
      return;
    v23 = __s;
    goto LABEL_34;
  }
  v22 = __s[1];
  if (__s[1] < (char *)3)
  {
    v23 = (char **)__s[0];
LABEL_34:
    (*(void (**)(std::string *__return_ptr, _QWORD, char **, char *))(**(_QWORD **)(a2 + 16) + 32))(&v28, *(_QWORD *)(a2 + 16), v23, &v22[(_QWORD)v23]);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(std::string *)a1 = v28;
    if (*(char *)(a1 + 23) < 0)
    {
      v25 = *(_QWORD *)(a1 + 8);
      if (v25 == 1 || v25 == 12)
      {
        if (__s != (char **)a1)
        {
          if (v30 >= 0)
            v26 = __s;
          else
            v26 = (char **)__s[0];
          if (v30 >= 0)
            v27 = HIBYTE(v30);
          else
            v27 = (size_t)__s[1];
          std::string::__assign_no_alias<false>((void **)a1, v26, v27);
        }
      }
      else
      {
        **(_BYTE **)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
    else
    {
      v24 = *(unsigned __int8 *)(a1 + 23);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char **)a1)
        {
          if (SHIBYTE(v30) < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a1, __s[0], (size_t)__s[1]);
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)__s;
            *(_QWORD *)(a1 + 16) = v30;
          }
        }
      }
      else
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 23) = 0;
      }
    }
  }
LABEL_26:
  if (SHIBYTE(v30) < 0)
    operator delete(__s[0]);
}

void sub_18CCFDD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a17 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFDDD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFDE1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:fe180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::string::size_type size;
  int v9;
  uint64_t v10;
  _BOOL4 negate;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v19;
  char v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string *v24;
  char v25;
  std::string::size_type v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  std::string::size_type v30;
  unsigned __int8 v31;
  std::vector<char>::pointer v32;
  unint64_t v33;
  int v34;
  std::regex_traits<char>::char_class_type v35;
  int v36;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v38;
  char *v39;
  std::vector<std::pair<std::string, std::string>>::pointer v40;
  std::vector<std::pair<std::string, std::string>>::pointer v41;
  unsigned int v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  unsigned __int8 *v49;
  BOOL v50;
  int v51;
  char *v52;
  size_t v53;
  size_t v54;
  int v55;
  int v56;
  char *v57;
  size_t v58;
  size_t v59;
  int v60;
  int v61;
  char *v62;
  size_t v63;
  size_t v64;
  int v65;
  int v66;
  char *v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  std::vector<std::string>::pointer v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  std::string::size_type v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  std::string::size_type v82;
  int v83;
  std::string *v84;
  std::string *v85;
  uint64_t v86;
  std::string *v87;
  size_t v88;
  std::vector<std::string>::pointer v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  std::string::size_type v95;
  uint64_t v96;
  BOOL v97;
  std::string *v98;
  std::string::size_type v99;
  int v100;
  std::string *v101;
  std::string *v102;
  uint64_t v103;
  unsigned __int8 v104;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v107;
  std::regex_traits<char>::char_class_type neg_mask;
  std::regex_traits<char>::char_class_type v109;
  int v110;
  std::__node<char> *first;
  int v112;
  int v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v120;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v121;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v122;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v123;
  std::string __p;
  __int16 __src;
  std::string v126;
  std::string __s;

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v10 = 0;
    negate = this->__negate_;
    goto LABEL_251;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_42;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = __src;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v126, (const char *)&__s);
  __p = v126;
  size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v126.__r_.__value_.__r.__words[2]);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v126.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_9;
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_15;
    p_s = &__s;
    goto LABEL_166;
  }
  v12 = __s.__r_.__value_.__l.__size_;
  if (__s.__r_.__value_.__l.__size_ < 3)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
LABEL_166:
    (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v126, this->__traits_.__col_, p_s, (char *)p_s + v12);
    if (v9 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v126;
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
      {
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v87 = &__s;
        else
          v87 = (std::string *)__s.__r_.__value_.__r.__words[0];
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v88 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v88 = __s.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>((void **)&__p.__r_.__value_.__l.__data_, v87, v88);
      }
      else
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
      }
    }
    else if (HIBYTE(v126.__r_.__value_.__r.__words[2]) == 1 || HIBYTE(v126.__r_.__value_.__r.__words[2]) == 12)
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__assign_no_alias<true>(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        __p = __s;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    }
  }
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v30 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v30)
      goto LABEL_17;
LABEL_42:
    negate = 0;
    v10 = 1;
    goto LABEL_43;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_42;
LABEL_17:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_26;
    }
LABEL_264:
    negate = 1;
    v10 = 2;
    goto LABEL_251;
  }
LABEL_26:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_190;
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = __src;
  __s.__r_.__value_.__s.__data_[2] = 0;
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, std::string::value_type *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v126, this->__traits_.__col_, &__s, &__s.__r_.__value_.__s.__data_[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v19 = this->__ranges_.__begin_;
  v20 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  v21 = (char *)this->__ranges_.__end_ - (char *)v19;
  if (!v21)
  {
    v29 = 0;
    v71 = 0;
    negate = 0;
    goto LABEL_187;
  }
  v120 = v2;
  v22 = 0;
  v23 = v21 / 48;
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v126;
  else
    v24 = (std::string *)v126.__r_.__value_.__r.__words[0];
  v25 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  else
    v26 = v126.__r_.__value_.__l.__size_;
  if (v23 <= 1)
    v27 = 1;
  else
    v27 = v21 / 48;
  v28 = (unsigned __int8 *)&v19->second.__r_.__value_.__r.__words[2] + 7;
  v29 = 1;
  do
  {
    v61 = (char)*(v28 - 24);
    if (v61 >= 0)
      v62 = (char *)(v28 - 47);
    else
      v62 = *(char **)(v28 - 47);
    if (v61 >= 0)
      v63 = *(v28 - 24);
    else
      v63 = *(_QWORD *)(v28 - 39);
    if (v26 >= v63)
      v64 = v63;
    else
      v64 = v26;
    v65 = memcmp(v62, v24, v64);
    if (v65)
    {
      if ((v65 & 0x80000000) == 0)
        goto LABEL_104;
    }
    else if (v63 > v26)
    {
      goto LABEL_104;
    }
    v66 = (char)*v28;
    if (v66 >= 0)
      v67 = (char *)(v28 - 23);
    else
      v67 = *(char **)(v28 - 23);
    if (v66 >= 0)
      v68 = *v28;
    else
      v68 = *(_QWORD *)(v28 - 15);
    if (v68 >= v26)
      v69 = v26;
    else
      v69 = v68;
    v70 = memcmp(v24, v67, v69);
    if (v70)
    {
      if (v70 < 0)
      {
LABEL_129:
        negate = 1;
        v71 = 5;
        goto LABEL_176;
      }
    }
    else if (v26 <= v68)
    {
      goto LABEL_129;
    }
LABEL_104:
    v29 = ++v22 < v23;
    v28 += 48;
  }
  while (v27 != v22);
  v71 = 0;
  negate = 0;
LABEL_176:
  v2 = v120;
  v20 = v25;
LABEL_187:
  if (v20 < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (v29)
    goto LABEL_215;
LABEL_190:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_219;
  std::regex_traits<char>::__transform_primary<char *>(&__s, (uint64_t)&this->__traits_, &__src, &v126);
  v89 = this->__equivalences_.__begin_;
  v90 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_219;
  }
  v119 = negate;
  v123 = v2;
  v92 = 0;
  v93 = v91 / 24;
  v94 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v95 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v95 = __s.__r_.__value_.__l.__size_;
  if (v93 <= 1)
    v96 = 1;
  else
    v96 = v91 / 24;
  v97 = 1;
  while (2)
  {
    v98 = &v89[v92];
    v99 = HIBYTE(v98->__r_.__value_.__r.__words[2]);
    v100 = (char)v99;
    if ((v99 & 0x80u) != 0)
      v99 = v98->__r_.__value_.__l.__size_;
    if (v95 != v99)
    {
LABEL_200:
      v97 = ++v92 < v93;
      if (v92 == v96)
      {
        v71 = 0;
        v2 = v123;
        negate = v119;
        if ((v90 & 0x80) != 0)
          goto LABEL_213;
        goto LABEL_214;
      }
      continue;
    }
    break;
  }
  if (v100 >= 0)
    v101 = &v89[v92];
  else
    v101 = (std::string *)v98->__r_.__value_.__r.__words[0];
  if ((v90 & 0x80) != 0)
  {
    if (!memcmp((const void *)v94, v101, *((size_t *)&v94 + 1)))
    {
      v71 = 5;
      negate = 1;
      v2 = v123;
      goto LABEL_213;
    }
    goto LABEL_200;
  }
  if (!(_DWORD)v90)
  {
    negate = 1;
    if (v97)
    {
      v2 = v123;
      goto LABEL_216;
    }
    v2 = v123;
    v104 = __src;
    if (((char)__src & 0x80000000) == 0)
    {
LABEL_220:
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v107 = tab[v104];
      if (((v107 & mask) != 0 || v104 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_264;
      }
      neg_mask = this->__neg_mask_;
      if ((v107 & neg_mask) != 0 || v104 == 95 && (neg_mask & 0x80) != 0)
        goto LABEL_262;
      goto LABEL_258;
    }
LABEL_257:
    neg_mask = this->__neg_mask_;
LABEL_258:
    if (SHIBYTE(__src) < 0)
      goto LABEL_264;
    if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
    {
      v113 = 1;
      if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
      {
LABEL_263:
        negate = v113;
        v10 = 2;
        goto LABEL_251;
      }
    }
LABEL_262:
    v113 = negate;
    goto LABEL_263;
  }
  v102 = &__s;
  v103 = v90;
  do
  {
    if (v102->__r_.__value_.__s.__data_[0] != v101->__r_.__value_.__s.__data_[0])
      goto LABEL_200;
    v102 = (std::string *)((char *)v102 + 1);
    v101 = (std::string *)((char *)v101 + 1);
    --v103;
  }
  while (v103);
  negate = 1;
  v71 = 5;
  v2 = v123;
  if ((v90 & 0x80) != 0)
LABEL_213:
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_214:
  if (!v97)
  {
LABEL_219:
    v104 = __src;
    if (((char)__src & 0x80000000) == 0)
      goto LABEL_220;
    goto LABEL_257;
  }
LABEL_215:
  if (v71)
  {
LABEL_216:
    v10 = 2;
    goto LABEL_251;
  }
  v10 = 2;
LABEL_43:
  v31 = *v2->__current_;
  __p.__r_.__value_.__s.__data_[0] = v31;
  if (this->__icase_)
  {
    v31 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v31);
    __p.__r_.__value_.__s.__data_[0] = v31;
  }
  v32 = this->__chars_.__begin_;
  v33 = this->__chars_.__end_ - v32;
  if (v33)
  {
    if (v33 <= 1)
      v33 = 1;
    do
    {
      v34 = *v32++;
      if (v34 == v31)
        goto LABEL_250;
      --v33;
    }
    while (v33);
  }
  v35 = this->__neg_mask_;
  if (v35 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v31 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v31] & v35) == 0)
      v36 = (v31 == 95) & (v35 >> 7);
    else
      LOBYTE(v36) = 1;
    end = this->__neg_chars_.__end_;
    v38 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v31, end - this->__neg_chars_.__begin_);
    v39 = v38 ? v38 : end;
    if ((v36 & 1) == 0 && v39 == end)
    {
LABEL_250:
      negate = 1;
      goto LABEL_251;
    }
  }
  v40 = this->__ranges_.__begin_;
  v41 = this->__ranges_.__end_;
  if (v40 == v41)
    goto LABEL_135;
  if (!this->__collate_)
  {
    v42 = 1;
    *((_BYTE *)&v126.__r_.__value_.__s + 23) = 1;
    LOWORD(v126.__r_.__value_.__l.__data_) = v31;
    v43 = (char *)v41 - (char *)v40;
    if (v43)
      goto LABEL_66;
LABEL_162:
    v50 = 0;
    if ((v42 & 0x80) != 0)
      goto LABEL_133;
    goto LABEL_134;
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
  LOWORD(__s.__r_.__value_.__l.__data_) = v31;
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, std::string::value_type *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v126, this->__traits_.__col_, &__s, &__s.__r_.__value_.__s.__data_[1]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v40 = this->__ranges_.__begin_;
  v42 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  v43 = (char *)this->__ranges_.__end_ - (char *)v40;
  if (!v43)
    goto LABEL_162;
LABEL_66:
  v115 = v10;
  v117 = negate;
  v121 = v2;
  v44 = 0;
  v45 = v43 / 48;
  v114 = v42;
  if ((v42 & 0x80u) == 0)
    v46 = &v126;
  else
    v46 = (std::string *)v126.__r_.__value_.__r.__words[0];
  if ((v42 & 0x80u) == 0)
    v47 = v42;
  else
    v47 = v126.__r_.__value_.__l.__size_;
  if (v45 <= 1)
    v48 = 1;
  else
    v48 = v43 / 48;
  v49 = (unsigned __int8 *)&v40->second.__r_.__value_.__r.__words[2] + 7;
  v50 = 1;
  while (2)
  {
    v51 = (char)*(v49 - 24);
    if (v51 >= 0)
      v52 = (char *)(v49 - 47);
    else
      v52 = *(char **)(v49 - 47);
    if (v51 >= 0)
      v53 = *(v49 - 24);
    else
      v53 = *(_QWORD *)(v49 - 39);
    if (v47 >= v53)
      v54 = v53;
    else
      v54 = v47;
    v55 = memcmp(v52, v46, v54);
    if (v55)
    {
      if (v55 < 0)
        goto LABEL_91;
    }
    else if (v53 <= v47)
    {
LABEL_91:
      v56 = (char)*v49;
      if (v56 >= 0)
        v57 = (char *)(v49 - 23);
      else
        v57 = *(char **)(v49 - 23);
      if (v56 >= 0)
        v58 = *v49;
      else
        v58 = *(_QWORD *)(v49 - 15);
      if (v58 >= v47)
        v59 = v47;
      else
        v59 = v58;
      v60 = memcmp(v46, v57, v59);
      if (v60)
      {
        if (v60 < 0)
        {
LABEL_102:
          negate = 1;
          v2 = v121;
          goto LABEL_132;
        }
      }
      else if (v47 <= v58)
      {
        goto LABEL_102;
      }
    }
    v50 = ++v44 < v45;
    v49 += 48;
    if (v48 != v44)
      continue;
    break;
  }
  v2 = v121;
  negate = v117;
LABEL_132:
  v10 = v115;
  if (v114 < 0)
LABEL_133:
    operator delete(v126.__r_.__value_.__l.__data_);
LABEL_134:
  if (!v50)
  {
LABEL_135:
    if (this->__equivalences_.__begin_ != this->__equivalences_.__end_)
    {
      v118 = negate;
      std::regex_traits<char>::__transform_primary<char *>(&__s, (uint64_t)&this->__traits_, &__p, &__p.__r_.__value_.__s.__data_[1]);
      v72 = this->__equivalences_.__begin_;
      v73 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      v74 = (char *)this->__equivalences_.__end_ - (char *)v72;
      if (v74)
      {
        v116 = v10;
        v122 = v2;
        v75 = 0;
        v76 = v74 / 24;
        v77 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v78 = __s.__r_.__value_.__l.__size_;
        if (v76 <= 1)
          v79 = 1;
        else
          v79 = v74 / 24;
        v80 = 1;
        do
        {
          v81 = &v72[v75];
          v82 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
          v83 = (char)v82;
          if ((v82 & 0x80u) != 0)
            v82 = v81->__r_.__value_.__l.__size_;
          if (v78 == v82)
          {
            if (v83 >= 0)
              v84 = &v72[v75];
            else
              v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
            if ((v73 & 0x80) != 0)
            {
              if (!memcmp((const void *)v77, v84, *((size_t *)&v77 + 1)))
              {
                negate = 1;
                v2 = v122;
                v10 = v116;
                goto LABEL_243;
              }
            }
            else
            {
              if (!(_DWORD)v73)
              {
                negate = 1;
                v2 = v122;
                v10 = v116;
                if (!v80)
                  goto LABEL_244;
                goto LABEL_251;
              }
              v85 = &__s;
              v86 = v73;
              while (v85->__r_.__value_.__s.__data_[0] == v84->__r_.__value_.__s.__data_[0])
              {
                v85 = (std::string *)((char *)v85 + 1);
                v84 = (std::string *)((char *)v84 + 1);
                if (!--v86)
                {
                  negate = 1;
                  goto LABEL_158;
                }
              }
            }
          }
          v80 = ++v75 < v76;
        }
        while (v75 != v79);
        negate = v118;
LABEL_158:
        v2 = v122;
        v10 = v116;
        if ((v73 & 0x80) == 0)
        {
          if (!v80)
            goto LABEL_244;
          goto LABEL_251;
        }
LABEL_243:
        operator delete(__s.__r_.__value_.__l.__data_);
        if (v80)
          goto LABEL_251;
      }
      else
      {
        negate = v118;
        if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
          operator delete(__s.__r_.__value_.__l.__data_);
      }
LABEL_244:
      v31 = __p.__r_.__value_.__s.__data_[0];
    }
    if ((v31 & 0x80) == 0)
    {
      v109 = this->__mask_;
      if ((this->__traits_.__ct_->__tab_[v31] & v109) != 0)
        goto LABEL_250;
      v110 = (v109 >> 7) & 1;
      if (v31 != 95)
        v110 = 0;
      if (v110 == 1)
        goto LABEL_250;
    }
  }
LABEL_251:
  if (negate == this->__negate_)
  {
    first = 0;
    v112 = -993;
  }
  else
  {
    v2->__current_ += v10;
    first = this->__first_;
    v112 = -995;
  }
  v2->__do_ = v112;
  v2->__node_ = first;
}

void sub_18CCFE98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if (a28 < 0)
    {
LABEL_5:
      operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  size_t v4;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  unsigned int v14;
  uint64_t v15;
  void **__dst;
  size_t v17;
  int64_t v18;

  v4 = a4 - __src;
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8)
LABEL_34:
    std::string::__throw_length_error[abi:fe180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(v18) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a4)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v17 = v4;
  v18 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a4)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v18);
  if (v18 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v18 < 0)
    v12 = v17;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, (char *)v13 + v12);
  v14 = a1[23];
  if ((v14 & 0x80u) == 0)
    v15 = a1[23];
  else
    v15 = *((_QWORD *)a1 + 1);
  if (v15 == 1)
    goto LABEL_28;
  if (v15 == 12)
  {
    if ((v14 & 0x80) != 0)
    {
      if (*((_QWORD *)a1 + 1) <= 0xAuLL)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      a1 = *(_BYTE **)a1;
    }
    else if (v14 <= 0xA)
    {
      goto LABEL_33;
    }
    a1[11] = a1[3];
LABEL_28:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      return;
    goto LABEL_29;
  }
  if ((v14 & 0x80) == 0)
  {
    *a1 = 0;
    a1[23] = 0;
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      return;
    goto LABEL_29;
  }
  **(_BYTE **)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  if (SHIBYTE(v18) < 0)
LABEL_29:
    operator delete(__dst);
}

void sub_18CCFEB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFEE40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E2522460;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E2522548;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E2521470;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3);
  if (v4 < v2)
LABEL_10:
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)4>();
  v5 = (v2 - 1);
  if (v4 <= v5)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v7 = result,
        v8 = v3 + 24 * v5,
        result = *(unsigned int **)v8,
        v9 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8,
        v10 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v10 >= v9)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v9), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v10 + v9;
    v11 = *((_QWORD *)v7 + 1);
  }
  else
  {
    v11 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v11;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522548;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522548;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = (*(_DWORD *)(result + 40) - 1);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) <= v2)
  {
    __break(1u);
  }
  else
  {
    if (!*(_BYTE *)(v3 + 24 * v2 + 16)
      || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
          v5 = *v4,
          v6 = v4[1] - *v4,
          v7 = *(_QWORD *)(a2 + 16),
          *(_QWORD *)(a2 + 24) - v7 < v6))
    {
LABEL_4:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
    if (v6 >= 1)
    {
      v8 = v6;
      v9 = *(unsigned __int8 **)(a2 + 16);
      do
      {
        v11 = *v5++;
        v10 = v11;
        v12 = *v9++;
        if (v10 != v12)
          goto LABEL_4;
      }
      while (--v8);
    }
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v7 + v6;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522460;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522460;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = (*(_DWORD *)(result + 40) - 1);
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) > v2)
  {
    v5 = v3 + 24 * v2;
    if (*(_BYTE *)(v5 + 16))
    {
      v6 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5;
      v7 = *(_QWORD *)(a2 + 16);
      if (*(_QWORD *)(a2 + 24) - v7 >= v6)
      {
        v9 = result;
        if (v6 < 1)
        {
LABEL_10:
          *(_DWORD *)a2 = -994;
          *(_QWORD *)(a2 + 16) = v7 + v6;
          v8 = *(_QWORD *)(v9 + 8);
          goto LABEL_11;
        }
        v10 = 0;
        while (1)
        {
          v11 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), *(char *)(*(_QWORD *)v5 + v10));
          result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v10));
          if (v11 != (_DWORD)result)
            break;
          if (v6 == ++v10)
          {
            v7 = *(_QWORD *)(a2 + 16);
            goto LABEL_10;
          }
        }
      }
    }
    v8 = 0;
    *(_DWORD *)a2 = -993;
LABEL_11:
    *(_QWORD *)(a2 + 80) = v8;
    return result;
  }
  __break(1u);
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  int v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  std::__owns_one_state<char> *v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a2 == a3)
    goto LABEL_15;
  v7 = a2 + 1;
  v6 = *a2;
  if (a2 + 1 == a3 && v6 == 36)
    goto LABEL_15;
  if ((v6 - 46) <= 0x2E && ((1 << (v6 - 46)) & 0x600000000001) != 0)
  {
    if (v7 != a3 && v6 == 92)
    {
      v9 = *v7;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v9);
        v10 = a2 + 2;
        goto LABEL_16;
      }
    }
    if (*a2 == 46)
    {
      v11 = (_QWORD *)operator new();
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v11 = &off_1E25223A0;
      v11[1] = v13;
      *(_QWORD *)(v12 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_24;
    }
LABEL_15:
    std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    v10 = v14;
LABEL_16:
    if (a2 != v10)
      return v10;
    goto LABEL_17;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
LABEL_24:
  v10 = a2 + 1;
  if (a2 != v7)
    return v10;
LABEL_17:
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v15 = 2 * (a2[1] == 40);
    if (v15)
    {
      v16 = (unsigned __int8 *)&a2[v15];
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v17 = operator new();
        v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        v19 = *(_QWORD *)(a1 + 56);
        v20 = *(_QWORD *)(v19 + 8);
        *(_QWORD *)v17 = &off_1E2523C58;
        *(_QWORD *)(v17 + 8) = v20;
        *(_DWORD *)(v17 + 16) = v18;
        *(_QWORD *)(v19 + 8) = v17;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      do
      {
        if (v16 == (unsigned __int8 *)a3)
          goto LABEL_41;
        v22 = v16;
        v23 = *(std::__owns_one_state<char> **)(a1 + 56);
        v24 = *(_DWORD *)(a1 + 28);
        v25 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v22, a3);
        if (v22 == v25)
          break;
        v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v25, (unsigned __int8 *)a3, v23, (v24 + 1), (*(_DWORD *)(a1 + 28) + 1));
      }
      while (v22 != v16);
      if (v22 + 1 == (unsigned __int8 *)a3 || *v22 != 92 || v22[1] != 41)
LABEL_41:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)6>();
      v10 = (char *)&v22[2 * (v22[1] == 41)];
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v26 = operator new();
        v27 = *(_QWORD *)(a1 + 56);
        v28 = *(_QWORD *)(v27 + 8);
        *(_QWORD *)v26 = &off_1E2523C28;
        *(_QWORD *)(v26 + 8) = v28;
        *(_DWORD *)(v26 + 16) = v18;
        *(_QWORD *)(v27 + 8) = v26;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
    }
    else
    {
      v21 = a2[1];
      if (((v21 & 0xF8) == 0x30 || (v21 & 0xFE) == 0x38) && (v21 - 49) <= 8)
      {
        if ((v21 - 48) > *(_DWORD *)(a1 + 28))
          std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)4>();
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v21 - 48);
        return a2 + 2;
      }
    }
  }
  return v10;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  size_t v19;
  size_t v20;
  unsigned __int8 *v21;

  if (a2 == a3)
    return a2;
  v7 = *a2;
  if (v7 != 42)
  {
    v8 = a3;
    if (a2 + 1 != a3 && v7 == 92 && a2[1] == 123)
    {
      v9 = &a2[2 * (a2[1] == 123)];
      if (v9 == a3)
        goto LABEL_47;
      v10 = *v9;
      if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
        goto LABEL_47;
      v11 = v10 - 48;
      v12 = v9 + 1;
      if (v9 + 1 == a3)
      {
LABEL_15:
        v12 = a3;
      }
      else
      {
        while (1)
        {
          v13 = *v12;
          if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
            break;
          if (v11 >= 214748364)
            goto LABEL_47;
          v11 = v13 + 10 * v11 - 48;
          if (++v12 == a3)
            goto LABEL_15;
        }
      }
      if (v12 == v9)
        goto LABEL_47;
      if (v12 == a3)
LABEL_48:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)7>();
      v14 = v12 + 1;
      v15 = *v12;
      if (v15 != 44)
      {
        if (v14 != a3 && v15 == 92 && *v14 == 125)
        {
          v19 = v11;
          v8 = v12 + 2;
          __mexp_begin = __mexp_begin;
          __mexp_end = __mexp_end;
          v20 = v11;
LABEL_46:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v19, v20, a4, __mexp_begin, __mexp_end, 1);
          return v8;
        }
        goto LABEL_48;
      }
      if (v14 == a3)
        goto LABEL_48;
      v16 = *v14;
      if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
      {
        v17 = v16 - 48;
        v14 = v12 + 2;
        if (v12 + 2 == a3)
        {
LABEL_38:
          v14 = a3;
          goto LABEL_41;
        }
        while (1)
        {
          v16 = *v14;
          if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
            break;
          if (v17 >= 214748364)
            goto LABEL_47;
          v17 = v16 + 10 * v17 - 48;
          if (++v14 == a3)
            goto LABEL_38;
        }
      }
      else
      {
        v17 = -1;
      }
      if (v14 == a3)
      {
        v21 = v14;
        v14 = a3;
        v8 = v21;
      }
      else if (v14 + 1 == a3 || v16 != 92)
      {
        v8 = v14;
      }
      else
      {
        v8 = &v14[2 * (v14[1] == 125)];
      }
LABEL_41:
      if (v14 != v8)
      {
        if (v17 == -1)
        {
          v19 = v11;
          __mexp_begin = __mexp_begin;
          __mexp_end = __mexp_end;
          v20 = -1;
          goto LABEL_46;
        }
        if (v17 >= v11)
        {
          v19 = v11;
          v20 = v17;
          __mexp_begin = __mexp_begin;
          __mexp_end = __mexp_end;
          goto LABEL_46;
        }
LABEL_47:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)8>();
      }
      goto LABEL_48;
    }
    return a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int marked_count;
  std::basic_regex<char> v21;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        v7 = a2[2];
        if (v7 == 33)
        {
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:fe180100]((uint64_t)&v21);
          v21.__flags_ = *(_DWORD *)(a1 + 24);
          v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v21, v3 + 3, a3);
          marked_count = v21.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v21, 1, *(_DWORD *)(a1 + 28));
          *(_DWORD *)(a1 + 28) += marked_count;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)6>();
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:fe180100]((uint64_t)&v21);
          v21.__flags_ = *(_DWORD *)(a1 + 24);
          v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v21, v3 + 3, a3);
          v9 = v21.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v21, 0, *(_DWORD *)(a1 + 28));
          *(_DWORD *)(a1 + 28) += v9;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)6>();
LABEL_27:
          v3 = v8 + 1;
          std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v21.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = &off_1E2522660;
LABEL_17:
    *(_QWORD *)v10 = v14;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = &off_1E2522600;
    goto LABEL_17;
  }
  if (a2 + 1 != a3)
  {
    v16 = a2[1];
    if (v16 == 66)
    {
      v17 = operator new();
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)v17 = &off_1E2522430;
      *(_QWORD *)(v17 + 8) = v19;
      std::locale::locale((std::locale *)(v17 + 16), (const std::locale *)a1);
      *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
      *(_BYTE *)(v17 + 40) = 1;
    }
    else
    {
      if (v16 != 98)
        return v3;
      v17 = operator new();
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)v17 = &off_1E2522430;
      *(_QWORD *)(v17 + 8) = v18;
      std::locale::locale((std::locale *)(v17 + 16), (const std::locale *)a1);
      *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
      *(_BYTE *)(v17 + 40) = 0;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v17;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 += 2;
  }
  return v3;
}

void sub_18CCFFC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v5;
  std::basic_regex<char> *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  std::basic_regex<char> *v14;
  int locale_low;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::basic_regex<char> *v28;
  uint64_t v29;
  int v30;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v5 = *a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v3;
    case '(':
      if (a2 + 1 == a3)
        goto LABEL_53;
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        ++*(_DWORD *)(a1 + 36);
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
        if (v13 != a3 && *v13 == 41)
        {
          --*(_DWORD *)(a1 + 36);
          return v13 + 1;
        }
LABEL_53:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)6>();
      }
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v17 = operator new();
        v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        v19 = *(_QWORD *)(a1 + 56);
        v20 = *(_QWORD *)(v19 + 8);
        *(_QWORD *)v17 = &off_1E2523C58;
        *(_QWORD *)(v17 + 8) = v20;
        *(_DWORD *)(v17 + 16) = v18;
        *(_QWORD *)(v19 + 8) = v17;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, v3 + 1, a3);
      if (v21 == a3)
        goto LABEL_53;
      v22 = v21;
      if (*v21 != 41)
        goto LABEL_53;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v23 = operator new();
        v24 = *(_QWORD *)(a1 + 56);
        v25 = *(_QWORD *)(v24 + 8);
        *(_QWORD *)v23 = &off_1E2523C28;
        *(_QWORD *)(v23 + 8) = v25;
        *(_DWORD *)(v23 + 16) = v18;
        *(_QWORD *)(v24 + 8) = v23;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      return v22 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)11>();
    case '.':
      v9 = (_QWORD *)operator new();
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(v10 + 8);
      *v9 = &off_1E2523BF8;
      v9[1] = v11;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v3 + 1;
    case '[':
      std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
      return (char *)v12;
    case '\\':
      v7 = (std::basic_regex<char> *)a2;
      if (v5 != 92)
        return (char *)v7;
      v14 = (std::basic_regex<char> *)(a2 + 1);
      if (a2 + 1 == a3)
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)3>();
      locale_low = LOBYTE(v14->__traits_.__loc_.__locale_);
      v16 = locale_low - 48;
      if (locale_low == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v16);
        return v3 + 2;
      }
      if ((locale_low - 49) > 8)
        goto LABEL_38;
      v7 = (std::basic_regex<char> *)(v3 + 2);
      if (v3 + 2 == a3)
      {
        v7 = (std::basic_regex<char> *)a3;
      }
      else
      {
        while (1)
        {
          v26 = LOBYTE(v7->__traits_.__loc_.__locale_);
          if ((v26 - 48) > 9)
            break;
          if (v16 >= 0x19999999)
            goto LABEL_54;
          v7 = (std::basic_regex<char> *)((char *)v7 + 1);
          v16 = v26 + 10 * v16 - 48;
          if (v7 == (std::basic_regex<char> *)a3)
          {
            v7 = (std::basic_regex<char> *)a3;
            break;
          }
        }
        if (!v16)
LABEL_54:
          std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)4>();
      }
      if (v16 > *(_DWORD *)(a1 + 28))
        goto LABEL_54;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v16);
      if (v14 != v7)
        return (char *)v7;
LABEL_38:
      switch(LOBYTE(v14->__traits_.__loc_.__locale_))
      {
        case 'D':
          v27 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](v27, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
          goto LABEL_46;
        case 'S':
          v27 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](v27, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
          goto LABEL_50;
        case 'W':
          v29 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](v29, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
          goto LABEL_48;
        case 'd':
          v27 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](v27, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_46:
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
          *(_QWORD *)(a1 + 56) = v27;
          v30 = *(_DWORD *)(v27 + 160) | 0x400;
          goto LABEL_51;
        case 's':
          v27 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](v27, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_50:
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
          *(_QWORD *)(a1 + 56) = v27;
          v30 = *(_DWORD *)(v27 + 160) | 0x4000;
LABEL_51:
          *(_DWORD *)(v27 + 160) = v30;
          v7 = (std::basic_regex<char> *)(v3 + 2);
          break;
        case 'w':
          v29 = operator new();
          std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](v29, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_48:
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v29;
          *(_QWORD *)(a1 + 56) = v29;
          *(_DWORD *)(v29 + 160) |= 0x500u;
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](v29, 95);
          v7 = (std::basic_regex<char> *)(v3 + 2);
          break;
        default:
          v28 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v3 + 1), (std::basic_regex<char> *)a3, 0);
          if (v14 == v28)
            v7 = (std::basic_regex<char> *)v3;
          else
            v7 = v28;
          break;
      }
      break;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return ++v3;
  }
  return (char *)v7;
}

void sub_18CD00144(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D789BDC](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CD001B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:fe180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x18D789AEC]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_18CD002B0(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_1E2522370;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E2522370;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E2522370;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  JUMPOUT(0x18D789BDCLL);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  int v9;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  std::sub_match<const char *> *v18;
  uint64_t v19;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::csub_match>::value_type v25;
  char v26;
  uint64_t v27;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  memset(&v25, 0, 17);
  v26 = 0;
  v27 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v21.first = *(const char **)(a2 + 24);
  v21.second = v21.first;
  v21.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v21);
  v22 = v5;
  v23 = v5;
  v24 = 0;
  v25 = v21;
  v27 = v5;
  v26 = 1;
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(_QWORD *)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40, v8);
  if (*(unsigned __int8 *)(a1 + 84) == v9)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_14;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_14:
    if (begin)
LABEL_15:
      operator delete(begin);
    return;
  }
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v13) >> 3);
  v15 = 2;
  v16 = 1;
  while (1)
  {
    v17 = v12 + v15 - 2;
    if (v14 <= v17)
      break;
    v18 = &begin[v16];
    v19 = v13 + 24 * v17;
    *(std::pair<const char *, const char *> *)v19 = v18->std::pair<const char *, const char *>;
    *(_BYTE *)(v19 + 16) = v18->matched;
    v16 = v15++;
    if (v11 <= v16)
      goto LABEL_15;
  }
  __break(1u);
}

void sub_18CD00658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522430;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E2522430;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_18;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      if (v6 != 95)
      {
LABEL_15:
        if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
          goto LABEL_17;
        goto LABEL_18;
      }
LABEL_17:
      v10 = 1;
      goto LABEL_25;
    }
LABEL_18:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
        if (v6 != 95)
          goto LABEL_15;
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  if (v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
  {
    v9 = 1;
    if ((_DWORD)v8 == 95)
      goto LABEL_22;
  }
  else
  {
    v9 = 0;
    if ((_DWORD)v8 == 95)
      goto LABEL_22;
  }
  if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
  {
    v11 = 0;
    goto LABEL_24;
  }
LABEL_22:
  v11 = 1;
LABEL_24:
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018CF5AE7BLL
    || ((v3 & 0x800000018CF5AE7BLL & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x800000018CF5AE7BLL)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018CF5AE7BLL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x18D789BDCLL);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_emplace<AMSCore::EncodeHTTPRequestTask::Options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::EncodeHTTPRequestTask::Options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::EncodeHTTPRequestTask::Options>::__on_zero_shared(uint64_t a1)
{
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 24));
}

void std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::Options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::Options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::Options>::__on_zero_shared(uint64_t a1)
{
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 24));
}

void AMSCore::ExecuteHTTPRequestTask::IHandler::encodeRetryRequest(uint64_t a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  char *v6;
  __int128 *v7;
  AMSCore::HTTPResponseAction *v8;
  std::runtime_error *v9;
  __int128 *v10;
  unsigned int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  const std::runtime_error *v37;
  char v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;

  v6 = (char *)operator new(0x758uLL);
  v7 = (__int128 *)(v6 + 1800);
  *(_QWORD *)v6 = AMSCore::ExecuteHTTPRequestTask::IHandler::encodeRetryRequest;
  *((_QWORD *)v6 + 1) = AMSCore::ExecuteHTTPRequestTask::IHandler::encodeRetryRequest;
  v8 = (AMSCore::HTTPResponseAction *)(v6 + 936);
  v9 = (std::runtime_error *)(v6 + 1400);
  v10 = (__int128 *)(v6 + 1816);
  v62 = (uint64_t)(v6 + 16);
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v6 + 472), a1);
  v61 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  do
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v11 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v6[424] = 0;
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 58) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v63, v62);
  *a3 = v63;
  if (v6[920])
  {
    v12 = *((_QWORD *)v6 + 111);
    v13 = (std::__shared_weak_count *)*((_QWORD *)v6 + 112);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)v6 + 114);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *((_QWORD *)v6 + 227) = v12;
    *((_QWORD *)v6 + 228) = v13;
    if (v13)
    {
      v19 = (unint64_t *)&v13->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *v10;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v6 + 228) = 0;
    v22 = *(std::__shared_weak_count **)(v61 + 8);
    *(_OWORD *)v61 = v21;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)v6 + 228);
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v16)
    {
      v28 = (unint64_t *)&v16->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v13)
    {
      v30 = (unint64_t *)&v13->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v8, (uint64_t)(v6 + 472));
  *(_OWORD *)(v6 + 1832) = v61;
  AMSCore::ExecuteHTTPRequestTask::IHandlerBase::encodeRetryRequest((uint64_t)v8, (uint64_t *)v6 + 229, v7);
  v32 = *v7;
  *(_OWORD *)(v6 + 1848) = *(_OWORD *)(v6 + 1800);
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v6 + 226) = 0;
  if (atomic_load((unint64_t *)(v32 + 416)))
    goto LABEL_37;
  v6[1872] = 0;
  v34 = (unint64_t *)(*((_QWORD *)v6 + 231) + 416);
  do
    v35 = __ldaxr(v34);
  while (__stlxr((unint64_t)v6, v34));
  if (v35)
  {
LABEL_37:
    v36 = *((_QWORD *)v6 + 231);
    if (!*(_BYTE *)(v36 + 408))
    {
      __break(1u);
      return;
    }
    v37 = (const std::runtime_error *)(v36 + 8);
    v38 = *(_BYTE *)(v36 + 400);
    if (v38)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v9, (uint64_t)v37);
      v39 = (_QWORD *)(v36 + 384);
      *((_QWORD *)v6 + 222) = *(_QWORD *)(v36 + 384);
      v40 = v6 + 1784;
      v41 = (_QWORD *)(v36 + 392);
    }
    else
    {
      std::runtime_error::runtime_error(v9, v37);
      *(_OWORD *)(v6 + 1416) = *(_OWORD *)(v36 + 24);
      *((_QWORD *)v6 + 175) = off_1E2521330;
      v42 = (_QWORD *)(v36 + 48);
      v43 = *(_QWORD *)(v36 + 48);
      *((_QWORD *)v6 + 179) = *(_QWORD *)(v36 + 40);
      v44 = v6 + 1440;
      *((_QWORD *)v6 + 180) = v43;
      v45 = *(_QWORD *)(v36 + 56);
      *((_QWORD *)v6 + 181) = v45;
      if (v45)
      {
        *(_QWORD *)(v43 + 16) = v44;
        *(_QWORD *)(v36 + 40) = v42;
        *v42 = 0;
        *(_QWORD *)(v36 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v6 + 179) = v44;
      }
      v46 = *((_QWORD *)v6 + 231);
      v47 = *(_QWORD *)(v46 + 64);
      v39 = (_QWORD *)(v46 + 64);
      *((_QWORD *)v6 + 182) = v47;
      v40 = v6 + 1464;
      v41 = v39 + 1;
    }
    *v40 = *v41;
    *v39 = 0;
    v39[1] = 0;
    v6[1792] = v38;
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(v6 + 24), v9);
    if (v6[1792])
    {
      v48 = (std::__shared_weak_count *)*((_QWORD *)v6 + 223);
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v9->__vftable);
      v51 = *((_QWORD *)v6 + 232);
      if (!v51)
        goto LABEL_57;
    }
    else
    {
      ((void (*)(std::runtime_error *))v9->~runtime_error)(v9);
      v51 = *((_QWORD *)v6 + 232);
      if (!v51)
      {
LABEL_57:
        v55 = (std::__shared_weak_count *)*((_QWORD *)v6 + 226);
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v58 = (std::__shared_weak_count *)*((_QWORD *)v6 + 230);
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v8);
        *((_QWORD *)v6 + 233) = 0;
        *((_QWORD *)v6 + 175) = v62;
        *(_QWORD *)v6 = 0;
        AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v9);
        return;
      }
    }
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      v54 = (std::__shared_weak_count *)*((_QWORD *)v6 + 232);
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    goto LABEL_57;
  }
}

std::string *AMSCore::ExecuteHTTPRequestTask::IHandlerBase::handleDialog@<X0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  unsigned int v6;
  unint64_t *v7;
  _QWORD *v8;
  __int128 v9;
  unsigned int *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *result;
  void (**v15)(_QWORD);
  uint64_t v16;
  _QWORD *v17;
  std::string *v18;
  uint64_t v19;
  const std::runtime_error *v20;
  char v21;
  std::__libcpp_refstring *p_imp;
  const char **v23;
  _QWORD *v24;
  uint64_t v25;
  const std::runtime_error *v26;
  uint64_t v27;
  std::__shared_weak_count *imp;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::system_error v32;
  unsigned int **v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  std::runtime_error v37;
  std::error_code ec;
  unsigned int **v39;
  unsigned int *v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  std::string __what_arg;
  std::string *p_what_arg;
  uint64_t v46;
  std::error_code v47;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x1D0uLL);
  *(_QWORD *)v4 = AMSCore::ExecuteHTTPRequestTask::IHandlerBase::handleDialog;
  *((_QWORD *)v4 + 1) = AMSCore::ExecuteHTTPRequestTask::IHandlerBase::handleDialog;
  AMSCore::DialogRequest::DialogRequest((uint64_t)(v4 + 152), a1);
  v5 = v4 + 16;
  do
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v6 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v4 + 14) = 0;
  v7 = (unint64_t *)(v4 + 112);
  v4[24] = 0;
  v4[104] = 0;
  *((_QWORD *)v4 + 18) = 0;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E25233E8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v5;
  *(_QWORD *)&v9 = v4 + 16;
  *((_QWORD *)&v9 + 1) = v8;
  *a2 = v9;
  AMSCore::StringUtils::join<char [37]>(&__what_arg, "The handler doesn't support dialogs.");
  v47.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v47.__val_ = 8;
  std::system_error::system_error(&v32, v47, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v34 = 0;
  v35 = 0;
  v32.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v33 = (unsigned int **)&v34;
  v36 = 0uLL;
  std::runtime_error::runtime_error(&v37, &v32);
  ec = v32.__ec_;
  v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v10 = (unsigned int *)v34;
  v39 = v33;
  v40 = (unsigned int *)v34;
  v41 = v35;
  if (v35)
  {
    *(_QWORD *)(v34 + 16) = &v40;
    v10 = 0;
    v33 = (unsigned int **)&v34;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    v39 = &v40;
  }
  v42 = v36;
  v36 = 0uLL;
  v32.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v33, v10);
  MEMORY[0x18D7898AC](&v32);
  std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v4 + 24), &v37);
  v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
  result = (std::string *)MEMORY[0x18D7898AC](&v37);
  *((_QWORD *)v4 + 56) = v5;
  *(_QWORD *)v4 = 0;
  v4[456] = 0;
  do
    v15 = (void (**)(_QWORD))__ldaxr(v7);
  while (__stlxr(1uLL, v7));
  if (v15)
  {
    if (v15 == (void (**)(_QWORD))2)
      return (std::string *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)v4 + 56) - 8))(*((_QWORD *)v4 + 56) - 16);
    v16 = *((_QWORD *)v4 + 56);
    v18 = *(std::string **)(v16 + 128);
    v17 = (_QWORD *)(v16 + 128);
    result = v18;
    if (v18)
    {
      if (result == (std::string *)(*((_QWORD *)v4 + 56) + 104))
      {
        p_what_arg = &__what_arg;
        result = (std::string *)(*(uint64_t (**)(std::string *, std::string *))(result->__r_.__value_.__r.__words[0]
                                                                                        + 24))(result, &__what_arg);
      }
      else
      {
        p_what_arg = result;
        *v17 = 0;
      }
    }
    else
    {
      p_what_arg = 0;
    }
    if (p_what_arg)
    {
      v19 = *((_QWORD *)v4 + 56);
      if (!*(_BYTE *)(v19 + 88))
      {
        __break(1u);
        return result;
      }
      v20 = (const std::runtime_error *)(v19 + 8);
      v21 = *(_BYTE *)(v19 + 80);
      if (v21)
      {
        v37.__vftable = *(std::runtime_error_vtbl **)(v19 + 8);
        p_imp = &v37.__imp_;
        v23 = (const char **)(v19 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v37, v20);
        v24 = (_QWORD *)(v19 + 48);
        v25 = *(_QWORD *)(v19 + 48);
        ec = *(std::error_code *)(v19 + 24);
        v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v39 = *(unsigned int ***)(v19 + 40);
        v40 = (unsigned int *)v25;
        v41 = *(_QWORD *)(v19 + 56);
        if (v41)
        {
          *(_QWORD *)(v25 + 16) = &v40;
          *(_QWORD *)(v19 + 40) = v24;
          *v24 = 0;
          *(_QWORD *)(v19 + 56) = 0;
        }
        else
        {
          v39 = &v40;
        }
        v27 = *(_QWORD *)(v19 + 64);
        v26 = (const std::runtime_error *)(v19 + 64);
        *(_QWORD *)&v42 = v27;
        p_imp = (std::__libcpp_refstring *)&v42 + 1;
        v23 = &v26->__imp_.__imp_;
        v20 = v26;
      }
      p_imp->__imp_ = *v23;
      v20->__vftable = 0;
      v20->__imp_.__imp_ = 0;
      v43 = v21;
      if (!p_what_arg)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(std::string *, std::runtime_error *))(p_what_arg->__r_.__value_.__r.__words[0] + 48))(p_what_arg, &v37);
      if (v43)
      {
        imp = (std::__shared_weak_count *)v37.__imp_.__imp_;
        if (v37.__imp_.__imp_)
        {
          v29 = (unint64_t *)(v37.__imp_.__imp_ + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
      }
    }
    else
    {
      (*v15)(v15);
    }
    result = p_what_arg;
    if (p_what_arg == &__what_arg)
    {
      v31 = 4;
      result = &__what_arg;
    }
    else
    {
      if (!p_what_arg)
        return result;
      v31 = 5;
    }
    return (std::string *)(*(uint64_t (**)(void))(result->__r_.__value_.__r.__words[0] + 8 * v31))();
  }
  return result;
}

void sub_18CD013A8(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18CD0131CLL);
  }
  JUMPOUT(0x18CD013C8);
}

_BYTE *AMSCore::ExecuteHTTPRequestTask::IHandler::handleResponse(_OWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  const AMSCore::HTTPResponse *v11;
  unsigned int v12;
  _OWORD v14[29];

  v8 = operator new(0x240uLL);
  v9 = v8;
  *v8 = AMSCore::ExecuteHTTPRequestTask::IHandler::handleResponse;
  v8[1] = AMSCore::ExecuteHTTPRequestTask::IHandler::handleResponse;
  v10 = (uint64_t)(v8 + 2);
  v11 = *(const AMSCore::HTTPResponse **)a2;
  v8[68] = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8[69] = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v8[70] = a4[1];
  *a4 = 0;
  a4[1] = 0;
  do
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v12 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_BYTE *)v8 + 24) = 0;
  *((_BYTE *)v8 + 488) = 0;
  v8[62] = 0;
  v8[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v14, v10);
  *a1 = v14[0];
  if (*((_BYTE *)v9 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v9 + 3));
    *((_BYTE *)v9 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v9 + 3), (uint64_t)v14);
  *((_BYTE *)v9 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v14);
  v9[67] = v10;
  *v9 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((_BYTE *)v9 + 536);
}

void sub_18CD014F0(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::ExecuteHTTPRequestTask::IHandler::handleResponse(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;

  v2 = (char *)(__p + 63);
  v3 = (char *)__p[66];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v5 = __p[70];
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v5)
  {
    v8 = (unint64_t *)(__p[70] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      v10 = (std::__shared_weak_count *)__p[70];
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v11 = __p[69];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      v14 = (std::__shared_weak_count *)__p[69];
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v15 = __p[68];
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      v18 = (std::__shared_weak_count *)__p[68];
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(__p);
}

void AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleRedirect(AMSCore::ExecuteHTTPRequestTask::_anonymous_namespace_ *this, const AMSCore::HTTPResponse *a2)
{
  std::string *v3;
  std::string::size_type size;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  std::ios_base *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  int v38;
  _QWORD v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  char v44;
  _BYTE v45[24];
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  char v53;
  std::system_error v54;
  unsigned int **v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  std::string v60;
  char v61;
  std::string __what_arg;
  void *__p[2];
  uint64_t v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  _BYTE v69[24];
  __int128 v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  std::error_code v77;
  std::error_code v78;

  if (*((unsigned __int16 *)a2 + 76) - 300 >= 0x64)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 32) = 0;
    *((_BYTE *)this + 48) = 0;
    *((_BYTE *)this + 56) = 0;
    *((_BYTE *)this + 128) = 0;
    *((_BYTE *)this + 136) = 0;
    *((_BYTE *)this + 288) = 0;
    *((_BYTE *)this + 296) = 0;
    *((_BYTE *)this + 300) = 0;
    *((_BYTE *)this + 304) = 0;
    *((_BYTE *)this + 336) = 0;
    *((_BYTE *)this + 344) = 0;
    *((_BYTE *)this + 348) = 0;
    *((_BYTE *)this + 352) = 0;
    *((_BYTE *)this + 376) = 0;
    *((_BYTE *)this + 384) = 0;
    *((_BYTE *)this + 408) = 0;
    *((_BYTE *)this + 416) = 0;
    *((_BYTE *)this + 448) = 0;
    *((_DWORD *)this + 114) = 1;
    return;
  }
  HIBYTE(v64) = 8;
  strcpy((char *)__p, "Location");
  AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v60, (_QWORD *)a2 + 20, (char *)__p);
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
  if (v61)
  {
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = &v60;
    else
      v3 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      size = v60.__r_.__value_.__l.__size_;
    AMSCore::URL::parse((uint64_t)v3, size, (uint64_t)__p);
    if (v76)
    {
      LOBYTE(v29) = 0;
      v31 = 0;
      if (v65)
      {
        v29 = *(_OWORD *)__p;
        v30 = v64;
        __p[1] = 0;
        v64 = 0;
        __p[0] = 0;
        v31 = 1;
      }
      LOBYTE(v32) = 0;
      v34 = 0;
      if (v68)
      {
        v32 = v66;
        v33 = v67;
        v67 = 0;
        v66 = 0uLL;
        v34 = 1;
      }
      LOBYTE(v35) = 0;
      v37 = 0;
      if ((_BYTE)v70)
      {
        v35 = *(_OWORD *)v69;
        v36 = *(_QWORD *)&v69[16];
        memset(v69, 0, sizeof(v69));
        v37 = 1;
      }
      v38 = DWORD2(v70);
      v39[0] = v39;
      v39[1] = v39;
      v40 = 0;
      v5 = v73;
      if (v73)
      {
        v7 = v71;
        v6 = v72;
        v8 = *v72;
        *(_QWORD *)(v8 + 8) = *(_QWORD *)(v71 + 8);
        **(_QWORD **)(v7 + 8) = v8;
        v9 = v39[0];
        *(_QWORD *)(v39[0] + 8) = v6;
        *v6 = v9;
        v39[0] = v7;
        *(_QWORD *)(v7 + 8) = v39;
        v40 = v5;
        v73 = 0;
      }
      v41 = v74;
      v42 = v75;
      v75 = 0;
      v74 = 0uLL;
      v43 = 0;
      v44 = 0;
      v45[0] = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v53 = 0;
      AMSCore::HTTPResponseAction::createRedirectAction((uint64_t)this, (uint64_t)&v29);
      if (v53)
      {
        v10 = v52;
        if (v52)
        {
          p_shared_owners = (unint64_t *)&v52->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v13 = v51;
        if (v51)
        {
          v14 = (unint64_t *)&v51->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      if (v47)
      {
        if (v46 != -1)
          ((void (*)(std::system_error *, _BYTE *))off_1E253D240[v46])(&v54, v45);
        v46 = -1;
      }
      AMSCore::URL::~URL((AMSCore::URL *)&v29);
      if (v76)
        goto LABEL_36;
    }
    else
    {
      AMSCore::StringUtils::join<char [43]>("The redirect location could not be parsed.", &__what_arg);
      v78.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
      *(_QWORD *)&v78.__val_ = 311;
      std::system_error::system_error(&v54, v78, &__what_arg);
      if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__what_arg.__r_.__value_.__l.__data_);
      v56 = 0;
      v57 = 0;
      v54.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v55 = &v56;
      v58 = 0;
      v59 = 0;
      AMSCore::HTTPResponseAction::createCancelAction(this, &v54);
      v54.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v26 = v59;
      if (v59)
      {
        v27 = (unint64_t *)&v59->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v55, v56);
      MEMORY[0x18D7898AC](&v54);
      if (v76)
      {
LABEL_36:
        AMSCore::URL::~URL((AMSCore::URL *)__p);
        if (!v61)
          return;
        goto LABEL_59;
      }
    }
    (*(void (**)(void **))__p[0])(__p);
    if (!v61)
      return;
LABEL_59:
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    return;
  }
  v16 = MEMORY[0x1E0DE4FE0];
  v17 = MEMORY[0x1E0DE4FE0] + 64;
  v18 = MEMORY[0x1E0DE4F60];
  v19 = *(void **)(MEMORY[0x1E0DE4F60] + 8);
  v20 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
  v72 = (_QWORD *)(MEMORY[0x1E0DE4FE0] + 64);
  __p[0] = v19;
  *(void **)((char *)__p + *((_QWORD *)v19 - 3)) = v20;
  v21 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
  std::ios_base::init(v21, &__p[1]);
  v21[1].__vftable = 0;
  v21[1].__fmtflags_ = -1;
  __p[0] = (void *)(v16 + 24);
  v72 = (_QWORD *)v17;
  std::streambuf::basic_streambuf();
  v22 = MEMORY[0x1E0DE4FB8];
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)&v69[8] = 0u;
  v70 = 0u;
  LODWORD(v71) = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(__p, (uint64_t)"The response did not include a redirect location.", 49);
  std::stringbuf::str[abi:fe180100]((uint64_t)&__p[1], &__what_arg);
  __p[0] = *(void **)v18;
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v18 + 24);
  __p[1] = (void *)(v22 + 16);
  if (SBYTE7(v70) < 0)
    operator delete(*(void **)&v69[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](&v72);
  v77.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  *(_QWORD *)&v77.__val_ = 314;
  std::system_error::system_error(&v54, v77, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v56 = 0;
  v57 = 0;
  v54.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v55 = &v56;
  v58 = 0;
  v59 = 0;
  AMSCore::HTTPResponseAction::createCancelAction(this, &v54);
  v54.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v23 = v59;
  if (v59)
  {
    v24 = (unint64_t *)&v59->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v55, v56);
  MEMORY[0x18D7898AC](&v54);
  if (v61)
    goto LABEL_59;
}

void sub_18CD01C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a40);
}

void sub_18CD01C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  _Unwind_Exception *v59;

  if (LOBYTE(STACK[0x210]))
    AMSCore::URL::~URL((AMSCore::URL *)&a59);
  else
    (*(void (**)(uint64_t *))a59)(&a59);
  if (a55)
  {
    if (a54 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(v59);
}

void AMSCore::ExecuteHTTPRequestTask::IHandlerBase::handleDialog(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = (_QWORD *)(a1 + 120);
  v3 = *(_QWORD **)(a1 + 144);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    }
  }
  do
  {
    v8 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v9)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(a1 + 152));
  operator delete((void *)a1);
}

void AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
    }
  }
  do
  {
    v8 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v9)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DialogResult,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_12DialogResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_12DialogResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_12DialogResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_12DialogResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *AMSCore::ExecuteHTTPRequestTask::IHandler::encodeRetryRequest(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  v1 = result[231];
  if (!*(_BYTE *)(v1 + 408))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = (std::runtime_error *)(result + 175);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 400);
  if (v5)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(result + 175), (uint64_t)v4);
    v6 = (_QWORD *)(v1 + 384);
    v2[222] = *(_QWORD *)(v1 + 384);
    v7 = v2 + 223;
    v8 = (_QWORD *)(v1 + 392);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 175), v4);
    *(_OWORD *)(v2 + 177) = *(_OWORD *)(v1 + 24);
    v2[175] = (uint64_t)off_1E2521330;
    v9 = (_QWORD *)(v1 + 48);
    v10 = *(_QWORD *)(v1 + 48);
    v2[179] = *(_QWORD *)(v1 + 40);
    v11 = v2 + 180;
    v2[180] = v10;
    v12 = *(_QWORD *)(v1 + 56);
    v2[181] = v12;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v1 + 40) = v9;
      *v9 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      v2[179] = (uint64_t)v11;
    }
    v13 = v2[231];
    v14 = *(_QWORD *)(v13 + 64);
    v6 = (_QWORD *)(v13 + 64);
    v2[182] = v14;
    v7 = v2 + 183;
    v8 = v6 + 1;
  }
  *v7 = *v8;
  *v6 = 0;
  v6[1] = 0;
  *((_BYTE *)v2 + 1792) = v5;
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(v2 + 3), v3);
  if (*((_BYTE *)v2 + 1792))
  {
    v15 = (std::__shared_weak_count *)v2[223];
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
    v18 = v2[232];
    if (!v18)
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  v18 = v2[232];
  if (v18)
  {
LABEL_17:
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      v21 = (std::__shared_weak_count *)v2[232];
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_21:
  v22 = (std::__shared_weak_count *)v2[226];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)v2[230];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 117));
  v2[233] = 0;
  v2[175] = (uint64_t)(v2 + 2);
  *v2 = 0;
  return AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v3);
}

void AMSCore::ExecuteHTTPRequestTask::IHandler::encodeRetryRequest(char *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;

  if (*(_QWORD *)a1)
  {
    v2 = *((_QWORD *)a1 + 232);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 232);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 226);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 230);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 936));
    v12 = 0;
  }
  else
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 233);
  }
  v13 = (char *)*((_QWORD *)a1 + 58);
  if (v13 == a1 + 440)
  {
    v14 = 4;
    v13 = a1 + 440;
  }
  else
  {
    if (!v13)
      goto LABEL_24;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_24:
  if (a1[424])
  {
    if (a1[416])
    {
      v15 = (std::__shared_weak_count *)*((_QWORD *)a1 + 51);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 3);
    }
    else
    {
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    }
  }
  do
  {
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v19)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v12)
  {
    v20 = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 472));
  operator delete(a1);
}

void AMSCore::ExecuteHTTPRequestTask::IHandlerBase::encodeRetryRequest(uint64_t a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  char *v6;
  __int128 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  const std::runtime_error *v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BYTE v41[24];
  int v42;
  char v43;
  std::string v44;
  char v45;
  char v46;
  _BYTE v47[9];

  v6 = (char *)operator new(0x798uLL);
  v7 = (__int128 *)(v6 + 1896);
  *(_QWORD *)v6 = AMSCore::ExecuteHTTPRequestTask::IHandlerBase::encodeRetryRequest;
  *((_QWORD *)v6 + 1) = AMSCore::ExecuteHTTPRequestTask::IHandlerBase::encodeRetryRequest;
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v6 + 472), a1);
  v8 = *a2;
  *((_QWORD *)v6 + 239) = a2[1];
  *a2 = 0;
  a2[1] = 0;
  do
    v9 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v9 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v6[424] = 0;
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 58) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v44, (uint64_t)(v6 + 16));
  *a3 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
  if (*((_DWORD *)v6 + 232) != 2)
    goto LABEL_23;
  v44.__r_.__value_.__s.__data_[0] = 0;
  v45 = 0;
  if (!v6[760])
    goto LABEL_54;
  AMSCore::URL::URL(&v44, (const AMSCore::URL *)(v6 + 608));
  v45 = 1;
  AMSCore::URL::URL((std::string *)(v6 + 1712), (const AMSCore::URL *)&v44);
  AMSCore::URL::operator=(v8 + 184, (__int128 *)v6 + 107);
  AMSCore::URL::~URL((AMSCore::URL *)(v6 + 1712));
  v10 = *((_QWORD *)v6 + 96);
  if ((v10 & 0xFF00000000) != 0)
    *(_DWORD *)(v8 + 176) = v10;
  v43 = 0;
  if (v6[808])
  {
    v41[0] = 0;
    v11 = -1;
    v42 = -1;
    v12 = *((unsigned int *)v6 + 200);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *, _BYTE *, char *))off_1E253D1E0[v12])(&v46, v41, v6 + 776);
      v42 = v12;
      v11 = v12;
    }
    v43 = 1;
    v13 = *((_QWORD *)v6 + 102);
    if ((v13 & 0xFF00000000) == 0)
    {
LABEL_19:
      if (v42 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E253D240[v42])(v47, v41);
      goto LABEL_21;
    }
    v6[1864] = 0;
    *((_DWORD *)v6 + 472) = -1;
    if (v11 != -1)
    {
      ((void (*)(_BYTE *, char *, _BYTE *))off_1E253CAE8[v11])(v47, v6 + 1864, v41);
      *((_DWORD *)v6 + 472) = v11;
      if (v42 != -1)
      {
        if (!v42)
          goto LABEL_16;
        ((void (*)(_BYTE *, _BYTE *))off_1E253D240[v42])(v47, v41);
      }
    }
    v42 = 0;
LABEL_16:
    AMSCore::Any::operator=(v8 + 56, (uint64_t)(v6 + 1864));
    *(_DWORD *)(v8 + 88) = v13;
    v14 = *((unsigned int *)v6 + 472);
    if ((_DWORD)v14 != -1)
      ((void (*)(_BYTE *, char *))off_1E253D240[v14])(v47, v6 + 1864);
    *((_DWORD *)v6 + 472) = -1;
    if (!v43)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_21:
  if (v45)
    AMSCore::URL::~URL((AMSCore::URL *)&v44);
LABEL_23:
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v6 + 1336), v8);
  AMSCore::EncodeHTTPRequestTask::perform(v7, (uint64_t)(v6 + 1336));
  v15 = *v7;
  *((_OWORD *)v6 + 120) = *v7;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v6 + 238) = 0;
  if (!atomic_load((unint64_t *)(v15 + 416)))
  {
    v6[1936] = 0;
    v17 = (unint64_t *)(*((_QWORD *)v6 + 240) + 416);
    do
      v18 = __ldaxr(v17);
    while (__stlxr((unint64_t)v6, v17));
    if (!v18)
      return;
  }
  v19 = *((_QWORD *)v6 + 240);
  if (!*(_BYTE *)(v19 + 408))
  {
LABEL_54:
    __break(1u);
    return;
  }
  v20 = (const std::runtime_error *)(v19 + 8);
  v21 = *(_BYTE *)(v19 + 400);
  if (v21)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v6 + 936), (uint64_t)v20);
    v22 = (_QWORD *)(v19 + 384);
    *((_QWORD *)v6 + 164) = *(_QWORD *)(v19 + 384);
    v23 = v6 + 1320;
    v24 = (_QWORD *)(v19 + 392);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(v6 + 936), v20);
    *(_OWORD *)(v6 + 952) = *(_OWORD *)(v19 + 24);
    *((_QWORD *)v6 + 117) = off_1E2521330;
    v25 = (_QWORD *)(v19 + 48);
    v26 = *(_QWORD *)(v19 + 48);
    *((_QWORD *)v6 + 121) = *(_QWORD *)(v19 + 40);
    v27 = v6 + 976;
    *((_QWORD *)v6 + 122) = v26;
    v28 = *(_QWORD *)(v19 + 56);
    *((_QWORD *)v6 + 123) = v28;
    if (v28)
    {
      *(_QWORD *)(v26 + 16) = v27;
      *(_QWORD *)(v19 + 40) = v25;
      *v25 = 0;
      *(_QWORD *)(v19 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v6 + 121) = v27;
    }
    v29 = *((_QWORD *)v6 + 240);
    v30 = *(_QWORD *)(v29 + 64);
    v22 = (_QWORD *)(v29 + 64);
    *((_QWORD *)v6 + 124) = v30;
    v23 = v6 + 1000;
    v24 = v22 + 1;
  }
  *v23 = *v24;
  *v22 = 0;
  v22[1] = 0;
  v6[1328] = v21;
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(v6 + 24), (std::runtime_error *)(v6 + 936));
  if (v6[1328])
  {
    v31 = (std::__shared_weak_count *)*((_QWORD *)v6 + 165);
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v6 + 117);
    v34 = *((_QWORD *)v6 + 241);
    if (!v34)
      goto LABEL_47;
    goto LABEL_43;
  }
  (**((void (***)(uint64_t))v6 + 117))((uint64_t)(v6 + 936));
  v34 = *((_QWORD *)v6 + 241);
  if (v34)
  {
LABEL_43:
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      v37 = (std::__shared_weak_count *)*((_QWORD *)v6 + 241);
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_47:
  v38 = (std::__shared_weak_count *)*((_QWORD *)v6 + 238);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v6 + 167);
  *((_QWORD *)v6 + 117) = v6 + 16;
  *(_QWORD *)v6 = 0;
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v6 + 117);
}

void sub_18CD029DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E253D240[a13])(v34 - 89, &a10);
  if (a34)
    AMSCore::URL::~URL((AMSCore::URL *)&a15);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CD02A34()
{
  __cxa_end_catch();
  JUMPOUT(0x18CD02998);
}

uint64_t *AMSCore::ExecuteHTTPRequestTask::IHandlerBase::encodeRetryRequest(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v1 = result[240];
  if (!*(_BYTE *)(v1 + 408))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = (std::runtime_error *)(result + 117);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 400);
  if (v5)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(result + 117), (uint64_t)v4);
    v6 = (_QWORD *)(v1 + 384);
    v2[164] = *(_QWORD *)(v1 + 384);
    v7 = v2 + 165;
    v8 = (_QWORD *)(v1 + 392);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 117), v4);
    *(_OWORD *)(v2 + 119) = *(_OWORD *)(v1 + 24);
    v2[117] = (uint64_t)off_1E2521330;
    v9 = (_QWORD *)(v1 + 48);
    v10 = *(_QWORD *)(v1 + 48);
    v2[121] = *(_QWORD *)(v1 + 40);
    v11 = v2 + 122;
    v2[122] = v10;
    v12 = *(_QWORD *)(v1 + 56);
    v2[123] = v12;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v1 + 40) = v9;
      *v9 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      v2[121] = (uint64_t)v11;
    }
    v13 = v2[240];
    v14 = *(_QWORD *)(v13 + 64);
    v6 = (_QWORD *)(v13 + 64);
    v2[124] = v14;
    v7 = v2 + 125;
    v8 = v6 + 1;
  }
  *v7 = *v8;
  *v6 = 0;
  v6[1] = 0;
  *((_BYTE *)v2 + 1328) = v5;
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(v2 + 3), v3);
  if (*((_BYTE *)v2 + 1328))
  {
    v15 = (std::__shared_weak_count *)v2[165];
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
    v18 = v2[241];
    if (!v18)
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  v18 = v2[241];
  if (v18)
  {
LABEL_17:
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      v21 = (std::__shared_weak_count *)v2[241];
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_21:
  v22 = (std::__shared_weak_count *)v2[238];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2 + 167);
  v2[117] = (uint64_t)(v2 + 2);
  *v2 = 0;
  return AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v3);
}

void AMSCore::ExecuteHTTPRequestTask::IHandlerBase::encodeRetryRequest(char *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;

  if (*(_QWORD *)a1)
  {
    v2 = *((_QWORD *)a1 + 241);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 241);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 238);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 167);
  }
  v9 = (char *)*((_QWORD *)a1 + 58);
  if (v9 == a1 + 440)
  {
    v10 = 4;
    v9 = a1 + 440;
  }
  else
  {
    if (!v9)
      goto LABEL_18;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_18:
  if (a1[424])
  {
    if (a1[416])
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 51);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 3);
    }
    else
    {
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    }
  }
  v14 = *((_QWORD *)a1 + 239);
  do
  {
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v16)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v14)
  {
    v17 = (unint64_t *)(*((_QWORD *)a1 + 239) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)a1 + 239);
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 472));
  operator delete(a1);
}

void AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::~AnonymousHandler(AMSCore::ExecuteHTTPRequestTask::AnonymousHandler *this)
{
  JUMPOUT(0x18D789BDCLL);
}

_BYTE *AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleCompletion@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  int v31;

  v6 = operator new(0x238uLL);
  v7 = v6;
  *v6 = AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleCompletion;
  v6[1] = AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleCompletion;
  v8 = (uint64_t)(v6 + 2);
  v6[68] = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v6[69] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  do
    v9 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v9 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_BYTE *)v6 + 24) = 0;
  *((_BYTE *)v6 + 488) = 0;
  v6[62] = 0;
  v6[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v11, v8);
  *a3 = v11;
  LOBYTE(v11) = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 1;
  if (*((_BYTE *)v7 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v7 + 3));
    *((_BYTE *)v7 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v7 + 3), (uint64_t)&v11);
  *((_BYTE *)v7 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v11);
  v7[67] = v8;
  *v7 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((_BYTE *)v7 + 536);
}

_BYTE *AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleResponse@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const AMSCore::HTTPResponse *v9;
  unsigned int v10;
  _OWORD v12[29];

  v6 = operator new(0x238uLL);
  v7 = v6;
  *v6 = AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleResponse;
  v6[1] = AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleResponse;
  v8 = (uint64_t)(v6 + 2);
  v9 = *(const AMSCore::HTTPResponse **)a1;
  v6[68] = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6[69] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  do
    v10 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v10 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_BYTE *)v6 + 24) = 0;
  *((_BYTE *)v6 + 488) = 0;
  v6[62] = 0;
  v6[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v12, v8);
  *a3 = v12[0];
  if (*((_BYTE *)v7 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v7 + 3));
    *((_BYTE *)v7 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v7 + 3), (uint64_t)v12);
  *((_BYTE *)v7 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v12);
  v7[67] = v8;
  *v7 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((_BYTE *)v7 + 536);
}

void sub_18CD0305C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleResponse(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (char *)(__p + 63);
  v3 = (char *)__p[66];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v5 = __p[69];
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v5)
  {
    v8 = (unint64_t *)(__p[69] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      v10 = (std::__shared_weak_count *)__p[69];
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v11 = __p[68];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      v14 = (std::__shared_weak_count *)__p[68];
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(__p);
}

void AMSCore::ExecuteHTTPRequestTask::AnonymousHandler::handleCompletion(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (char *)(__p + 63);
  v3 = (char *)__p[66];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_BYTE *)__p + 488))
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  v5 = __p[69];
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v5)
  {
    v8 = (unint64_t *)(__p[69] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      v10 = (std::__shared_weak_count *)__p[69];
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v11 = __p[68];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      v14 = (std::__shared_weak_count *)__p[68];
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(__p);
}

void AMSCore::ExecuteHTTPRequestTask::Options::getDefaultLoadURLMetricsEventConfig(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::system_error_vtbl *v4;
  unsigned int *v5;
  std::system_error_vtbl *v6;
  std::system_error_vtbl *v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::system_error v31;
  unsigned int **v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unsigned __int8 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  std::runtime_error v40;
  __int128 v41;
  unsigned int **v42;
  unsigned int *v43;
  uint64_t v44;
  __int128 v45;
  void *__p[2];
  uint64_t v47;
  _BYTE __what_arg[32];
  unsigned int **v49;
  unsigned int *v50;
  uint64_t v51;
  __int128 v52;
  unsigned __int8 v53;
  char *v54;
  _BYTE v55[24];
  unsigned int **v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  std::error_code v60;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
  {
    AMSCore::StringUtils::join<char [61]>((std::string *)__what_arg, "No bag provided for default LoadURL metrics option creation.");
    v60.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v60.__val_ = 5;
    std::system_error::system_error(&v31, v60, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    v33 = 0;
    v34 = 0;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v32 = (unsigned int **)&v33;
    v35 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v31);
    *(std::error_code *)&__what_arg[16] = v31.__ec_;
    v5 = (unsigned int *)v33;
    *(_QWORD *)__what_arg = off_1E2521330;
    v49 = v32;
    v50 = (unsigned int *)v33;
    v51 = v34;
    if (v34)
    {
      *(_QWORD *)(v33 + 16) = &v50;
      v5 = 0;
      v32 = (unsigned int **)&v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v49 = &v50;
    }
    v52 = v35;
    v35 = 0uLL;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v5);
    MEMORY[0x18D7898AC](&v31);
    std::runtime_error::runtime_error((std::runtime_error *)a2, (const std::runtime_error *)__what_arg);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)&__what_arg[16];
    *(_QWORD *)a2 = off_1E2521330;
    v13 = v50;
    *(_QWORD *)(a2 + 32) = v49;
    *(_QWORD *)(a2 + 40) = v13;
    v14 = a2 + 40;
    v15 = v51;
    *(_QWORD *)(a2 + 48) = v51;
    if (v15)
    {
      *((_QWORD *)v13 + 2) = v14;
      v13 = 0;
      v49 = &v50;
      v50 = 0;
      v51 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v14;
    }
    *(_OWORD *)(a2 + 56) = v52;
    v52 = 0uLL;
    *(_BYTE *)(a2 + 120) = 0;
    *(_QWORD *)__what_arg = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, v13);
    MEMORY[0x18D7898AC](__what_arg);
    return;
  }
  v47 = 0;
  *(_QWORD *)__what_arg = 0;
  v53 = 1;
  __p[0] = 0;
  __p[1] = 0;
  v54 = (char *)operator new(0x38uLL);
  *(_OWORD *)v55 = xmmword_18CF51C20;
  strcpy(v54, "metrics/performance/samplingPercentageCachedResponses");
  (*(void (**)(std::system_error *__return_ptr, uint64_t, char **))(*(_QWORD *)v3 + 32))(&v31, v3, &v54);
  if ((v55[15] & 0x80000000) == 0)
  {
    if (v36)
      goto LABEL_4;
LABEL_11:
    std::runtime_error::runtime_error((std::runtime_error *)&v54, &v31);
    *(std::error_code *)&v55[8] = v31.__ec_;
    v54 = (char *)off_1E2521330;
    v56 = v32;
    v57 = v33;
    v58 = v34;
    if (v34)
    {
      *(_QWORD *)(v33 + 16) = &v57;
      v32 = (unsigned int **)&v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v56 = (unsigned int **)&v57;
    }
    v59 = v35;
    v35 = 0uLL;
    std::runtime_error::runtime_error(&v40, (const std::runtime_error *)&v54);
    v41 = *(_OWORD *)&v55[8];
    v17 = (unsigned int *)v57;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v42 = v56;
    v43 = (unsigned int *)v57;
    v44 = v58;
    if (v58)
    {
      *(_QWORD *)(v57 + 16) = &v43;
      v17 = 0;
      v56 = (unsigned int **)&v57;
      v57 = 0;
      v58 = 0;
    }
    else
    {
      v42 = &v43;
    }
    v45 = v59;
    v59 = 0uLL;
    v54 = (char *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, v17);
    MEMORY[0x18D7898AC](&v54);
    if (v53)
    {
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v40);
      *(_OWORD *)&__what_arg[16] = v41;
      *(_QWORD *)__what_arg = off_1E2521330;
      v49 = v42;
      v50 = v43;
      v51 = v44;
      if (v44)
      {
        *((_QWORD *)v43 + 2) = &v50;
        v42 = &v43;
        v43 = 0;
        v44 = 0;
      }
      else
      {
        v49 = &v50;
      }
      v52 = v45;
      v45 = 0uLL;
      v53 = 0;
    }
    else
    {
      std::runtime_error::operator=((std::runtime_error *)__what_arg, &v40);
      *(_OWORD *)&__what_arg[16] = v41;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, v50);
      v49 = v42;
      v50 = v43;
      v51 = v44;
      if (v44)
      {
        *((_QWORD *)v43 + 2) = &v50;
        v42 = &v43;
        v43 = 0;
        v44 = 0;
      }
      else
      {
        v49 = &v50;
      }
      v27 = v45;
      v45 = 0uLL;
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      v52 = v27;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v43);
    MEMORY[0x18D7898AC](&v40);
    if (!v36)
      goto LABEL_15;
    goto LABEL_16;
  }
  operator delete(v54);
  if (!v36)
    goto LABEL_11;
LABEL_4:
  if (v53)
  {
    v4 = v31.__vftable;
  }
  else
  {
    (**(void (***)(_BYTE *))__what_arg)(__what_arg);
    v4 = v31.__vftable;
    v53 = 1;
  }
  *(_QWORD *)__what_arg = v4;
  if (!v36)
LABEL_15:
    ((void (*)(std::system_error *))v31.~system_error)(&v31);
LABEL_16:
  v54 = (char *)operator new(0x30uLL);
  *(_OWORD *)v55 = xmmword_18CF51C30;
  strcpy(v54, "metrics/performance/samplingPercentageUsers");
  (*(void (**)(std::system_error *__return_ptr, uint64_t, char **))(*(_QWORD *)v3 + 32))(&v31, v3, &v54);
  if ((v55[15] & 0x80000000) != 0)
  {
    operator delete(v54);
    if (!v36)
      goto LABEL_32;
  }
  else if (!v36)
  {
LABEL_32:
    std::runtime_error::runtime_error((std::runtime_error *)&v54, &v31);
    *(std::error_code *)&v55[8] = v31.__ec_;
    v54 = (char *)off_1E2521330;
    v56 = v32;
    v57 = v33;
    v58 = v34;
    if (v34)
    {
      *(_QWORD *)(v33 + 16) = &v57;
      v32 = (unsigned int **)&v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v56 = (unsigned int **)&v57;
    }
    v59 = v35;
    v35 = 0uLL;
    std::runtime_error::runtime_error(&v40, (const std::runtime_error *)&v54);
    v41 = *(_OWORD *)&v55[8];
    v9 = (unsigned int *)v57;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v42 = v56;
    v43 = (unsigned int *)v57;
    v44 = v58;
    if (v58)
    {
      *(_QWORD *)(v57 + 16) = &v43;
      v9 = 0;
      v56 = (unsigned int **)&v57;
      v57 = 0;
      v58 = 0;
    }
    else
    {
      v42 = &v43;
    }
    v45 = v59;
    v59 = 0uLL;
    v54 = (char *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, v9);
    MEMORY[0x18D7898AC](&v54);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v40);
    *(_OWORD *)(a2 + 16) = v41;
    *(_QWORD *)a2 = off_1E2521330;
    v10 = v43;
    *(_QWORD *)(a2 + 32) = v42;
    *(_QWORD *)(a2 + 40) = v10;
    v11 = a2 + 40;
    v12 = v44;
    *(_QWORD *)(a2 + 48) = v44;
    if (v12)
    {
      *((_QWORD *)v10 + 2) = v11;
      v10 = 0;
      v42 = &v43;
      v43 = 0;
      v44 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v11;
    }
    *(_OWORD *)(a2 + 56) = v45;
    v45 = 0uLL;
    *(_BYTE *)(a2 + 120) = 0;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v10);
    MEMORY[0x18D7898AC](&v40);
    if (v36)
      goto LABEL_80;
    goto LABEL_42;
  }
  v6 = v31.__vftable;
  v54 = (char *)operator new(0x28uLL);
  *(_OWORD *)v55 = xmmword_18CF51BC0;
  strcpy(v54, "metrics/performance/sessionDuration");
  (*(void (**)(std::system_error *__return_ptr, uint64_t, char **))(*(_QWORD *)v3 + 40))(&v31, v3, &v54);
  if ((v55[15] & 0x80000000) != 0)
  {
    operator delete(v54);
    if (!v36)
      goto LABEL_32;
  }
  else if (!v36)
  {
    goto LABEL_32;
  }
  v7 = v31.__vftable;
  v54 = (char *)operator new(0x28uLL);
  *(_OWORD *)v55 = xmmword_18CF51AA0;
  strcpy(v54, "metrics/performance/loadUrlTopic");
  (*(void (**)(std::system_error *__return_ptr, uint64_t, char **))(*(_QWORD *)v3 + 56))(&v31, v3, &v54);
  if ((v55[15] & 0x80000000) != 0)
    operator delete(v54);
  if (!v36)
  {
    if (SHIBYTE(v47) < 0)
    {
      __p[1] = (void *)17;
      v16 = (char *)__p[0];
    }
    else
    {
      HIBYTE(v47) = 17;
      v16 = (char *)__p;
    }
    strcpy(v16, "xp_amp_clientperf");
    if (v36)
      goto LABEL_28;
LABEL_72:
    ((void (*)(std::system_error *))v31.~system_error)(&v31);
    v8 = v53;
    if (v53)
      goto LABEL_30;
    goto LABEL_73;
  }
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  *(std::runtime_error *)__p = v31.std::runtime_error;
  v47 = *(_QWORD *)&v31.__ec_.__val_;
  *((_BYTE *)&v31.__ec_.__val_ + 7) = 0;
  LOBYTE(v31.__vftable) = 0;
  if (!v36)
    goto LABEL_72;
LABEL_28:
  if (*((char *)&v31.__ec_.__val_ + 7) < 0)
  {
    operator delete(v31.__vftable);
    v8 = v53;
    if (v53)
      goto LABEL_30;
LABEL_73:
    AMSCore::Error::Error(&v31, (const std::runtime_error *)__what_arg);
    goto LABEL_74;
  }
  v8 = v53;
  if (!v53)
    goto LABEL_73;
LABEL_30:
  v31.__vftable = *(std::system_error_vtbl **)__what_arg;
LABEL_74:
  v36 = v8;
  *(_QWORD *)&v37 = v6;
  *((_QWORD *)&v37 + 1) = v7;
  v38 = *(_OWORD *)__p;
  v39 = v47;
  __p[0] = 0;
  __p[1] = 0;
  v47 = 0;
  if (v8)
  {
    *(_QWORD *)a2 = v31.__vftable;
    *(_BYTE *)(a2 + 72) = v8;
    v21 = v38;
    *(_OWORD *)(a2 + 80) = v37;
    *(_OWORD *)(a2 + 96) = v21;
    *(_QWORD *)(a2 + 112) = v39;
    v38 = 0uLL;
    v39 = 0;
    *(_BYTE *)(a2 + 120) = 1;
    goto LABEL_80;
  }
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v31);
  *(std::error_code *)(a2 + 16) = v31.__ec_;
  *(_QWORD *)a2 = off_1E2521330;
  v22 = v33;
  *(_QWORD *)(a2 + 32) = v32;
  *(_QWORD *)(a2 + 40) = v22;
  v23 = a2 + 40;
  v24 = v34;
  *(_QWORD *)(a2 + 48) = v34;
  if (v24)
  {
    *(_QWORD *)(v22 + 16) = v23;
    v32 = (unsigned int **)&v33;
    v33 = 0;
    v34 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v23;
  }
  *(_OWORD *)(a2 + 56) = v35;
  v35 = 0uLL;
  v25 = v36;
  *(_BYTE *)(a2 + 72) = 0;
  v26 = v38;
  *(_OWORD *)(a2 + 80) = v37;
  *(_OWORD *)(a2 + 96) = v26;
  *(_QWORD *)(a2 + 112) = v39;
  v38 = 0uLL;
  v39 = 0;
  *(_BYTE *)(a2 + 120) = 1;
  if (v25)
    goto LABEL_80;
LABEL_42:
  ((void (*)(std::system_error *))v31.~system_error)(&v31);
LABEL_80:
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    if (v53)
      return;
LABEL_84:
    (**(void (***)(_BYTE *))__what_arg)(__what_arg);
    return;
  }
  operator delete(__p[0]);
  if (!v53)
    goto LABEL_84;
}

void sub_18CD03BE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void (**a39)(_QWORD),uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a38 < 0)
    operator delete(__p);
  if (!a51)
    (*a39)(&a39);
  __clang_call_terminate(a1);
}

void _ZNSt3__110__function6__funcIPDoFNS_8expectedIN7AMSCore25LoadURLMetricsEventConfigENS3_5ErrorEEERKNS3_22ExecuteHTTPRequestTask7OptionsERKNS2_INS3_12HTTPResponseENS3_9HTTPErrorEEEENS_9allocatorISH_EEFS6_SA_SF_EED0Ev()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIPDoFNS_8expectedIN7AMSCore25LoadURLMetricsEventConfigENS3_5ErrorEEERKNS3_22ExecuteHTTPRequestTask7OptionsERKNS2_INS3_12HTTPResponseENS3_9HTTPErrorEEEENS_9allocatorISH_EEFS6_SA_SF_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2521658;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFNS_8expectedIN7AMSCore25LoadURLMetricsEventConfigENS3_5ErrorEEERKNS3_22ExecuteHTTPRequestTask7OptionsERKNS2_INS3_12HTTPResponseENS3_9HTTPErrorEEEENS_9allocatorISH_EEFS6_SA_SF_EE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2521658;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPDoFNS_8expectedIN7AMSCore25LoadURLMetricsEventConfigENS3_5ErrorEEERKNS3_22ExecuteHTTPRequestTask7OptionsERKNS2_INS3_12HTTPResponseENS3_9HTTPErrorEEEENS_9allocatorISH_EEFS6_SA_SF_EEclESA_SF_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIPDoFNS_8expectedIN7AMSCore25LoadURLMetricsEventConfigENS3_5ErrorEEERKNS3_22ExecuteHTTPRequestTask7OptionsERKNS2_INS3_12HTTPResponseENS3_9HTTPErrorEEEENS_9allocatorISH_EEFS6_SA_SF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PDoFNSt3__18expectedIN7AMSCore25LoadURLMetricsEventConfigENS1_5ErrorEEERKNS1_22ExecuteHTTPRequestTa"
                     "sk7OptionsERKNS0_INS1_12HTTPResponseENS1_9HTTPErrorEEEE"
    || ((v3 & (unint64_t)"PDoFNSt3__18expectedIN7AMSCore25LoadURLMetricsEventConfigENS1_5ErrorEEERKNS1_22ExecuteHT"
                                "TPRequestTask7OptionsERKNS0_INS1_12HTTPResponseENS1_9HTTPErrorEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFNSt3__18expectedIN7AMSCore25LoadURLMetricsEventConfigENS1_5ErrorEEERKNS1_22ExecuteHTTPRequestTask7OptionsERKNS0_INS1_12HTTPResponseENS1_9HTTPErrorEEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFNSt3__18expectedIN7AMSCore25LoadURLMetricsEventConfigENS1_5ErrorEEERKNS1_22ExecuteHTTPRequestTask7OptionsERKNS0_INS1_12HTTPResponseENS1_9HTTPErrorEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIPDoFNS_8expectedIN7AMSCore25LoadURLMetricsEventConfigENS3_5ErrorEEERKNS3_22ExecuteHTTPRequestTask7OptionsERKNS2_INS3_12HTTPResponseENS3_9HTTPErrorEEEENS_9allocatorISH_EEFS6_SA_SF_EE11target_typeEv()
{
  return &_ZTIPDoFNSt3__18expectedIN7AMSCore25LoadURLMetricsEventConfigENS1_5ErrorEEERKNS1_22ExecuteHTTPRequestTask7OptionsERKNS0_INS1_12HTTPResponseENS1_9HTTPErrorEEEE;
}

void std::__shared_ptr_emplace<AMSCore::FinanceRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::FinanceRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::FinanceRequestHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v8;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v8 = v4;
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2522CB0;
  v6[3] = &off_1E2520EF8;
  v6[4] = 0;
  *(_QWORD *)(a1 + 136) = &off_1E2521658;
  *(_QWORD *)(a1 + 88) = v6 + 3;
  *(_QWORD *)(a1 + 96) = v6;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 60000;
  *(_BYTE *)(a1 + 120) = 1;
  *(_DWORD *)(a1 + 128) = 65795;
  *(_QWORD *)(a1 + 144) = AMSCore::ExecuteHTTPRequestTask::Options::getDefaultLoadURLMetricsEventConfig;
  *(_QWORD *)(a1 + 160) = a1 + 136;
  if (!v8)
    std::terminate();
  return a1;
}

void sub_18CD03E50(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = v2;
  if (v3)
  {
    v5 = v3;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(v1 + 32);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v1, *(unsigned int **)(v1 + 8));
  _Unwind_Resume(a1);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, __n128 *))off_1E253D230[v5])(&v10, v4);
LABEL_9:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[1].n128_u32[0] = 0;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, __n128 *))off_1E253D230[v5])(&v10, v4);
LABEL_9:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[1].n128_u32[0] = 1;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return result;
}

void AMSCore::ExecuteHTTPRequestTask::internal::makeOptionsBuilder(AMSCore::ExecuteHTTPRequestTask::Options *a1, __int128 *a2)
{
  __int128 v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];
  __int128 v7;
  char v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = v6;
  memset(v6, 0, sizeof(v6));
  v7 = v3;
  v8 = 0;
  v9 = 0;
  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2522CB0;
  v4[4] = 0;
  v4[3] = &off_1E2520EF8;
  v10 = v4 + 3;
  v11 = v4;
  v12 = 0;
  v13 = 60000;
  v14 = 1;
  v15 = 65795;
  v16[0] = &off_1E2521658;
  v16[1] = AMSCore::ExecuteHTTPRequestTask::Options::getDefaultLoadURLMetricsEventConfig;
  v16[3] = v16;
  AMSCore::ExecuteHTTPRequestTask::Options::Options(a1, (const AMSCore::ExecuteHTTPRequestTask::Options *)&v5);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v5);
}

void sub_18CD04154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::ExecuteHTTPRequestTask::Result::Result(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a3;
  v7 = (_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = a1 + 24;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 32) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)a3 = v7;
    *v7 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (*(_BYTE *)(a3 + 80))
  {
    v11 = *(_OWORD *)(a3 + 56);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 72);
    *(_OWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  v12 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *))off_1E253CA98[v12])(&v18);
    *(_DWORD *)(a1 + 120) = v12;
  }
  v13 = *(_OWORD *)(a3 + 112);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 128) = v13;
  v14 = (_QWORD *)(a3 + 160);
  v15 = *(_QWORD *)(a3 + 160);
  if (v15)
  {
    if (v15 == a3 + 136)
    {
      *(_QWORD *)(a1 + 176) = a1 + 152;
      (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 24))(*v14);
      goto LABEL_14;
    }
    *(_QWORD *)(a1 + 176) = v15;
  }
  else
  {
    v14 = (_QWORD *)(a1 + 176);
  }
  *v14 = 0;
LABEL_14:
  v16 = operator new(0x2A8uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E25227E0;
  *(_QWORD *)(a1 + 184) = AMSCore::HTTPResponse::HTTPResponse((uint64_t)(v16 + 3), a4);
  *(_QWORD *)(a1 + 192) = v16;
  return a1;
}

void sub_18CD04324(_Unwind_Exception *a1)
{
  uint64_t v1;
  AMSCore::ExecuteHTTPRequestTask::Options *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::performInternal(std::runtime_error *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char *v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  std::runtime_error *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _BOOL4 v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error_vtbl *v33;
  std::system_error_vtbl *v34;
  uint64_t v35;
  uint64_t v36;
  std::system_error_vtbl *v37;
  std::system_error_vtbl *v38;
  std::ios_base *v39;
  uint64_t v40;
  void (__cdecl *v41)(std::system_error *__hidden);
  unsigned __int8 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::ios_base *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t v57;
  const std::locale *v58;
  const std::locale::facet *v59;
  const std::locale::facet *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int *v65;
  _BOOL4 v66;
  std::error_code ec;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  int v85;
  char *v86;
  std::string::size_type v87;
  std::system_error_vtbl *v88;
  const char *i;
  std::system_error_vtbl *v90;
  uint64_t v91;
  uint64_t v92;
  std::system_error_vtbl *v93;
  std::system_error_vtbl *v94;
  std::ios_base *v95;
  uint64_t v96;
  unsigned int *v97;
  std::__shared_weak_count *imp;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::system_error_vtbl *v107;
  uint64_t v108;
  std::system_error_vtbl *v109;
  std::system_error_vtbl *v110;
  std::ios_base *v111;
  void (__cdecl *v112)(std::system_error *__hidden);
  unsigned __int8 v113;
  uint64_t v114;
  _QWORD *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::error_code v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  std::system_error_vtbl *v135;
  int v136;
  int v137;
  std::system_error_vtbl *v138;
  unint64_t what_high;
  std::system_error_vtbl *v140;
  const char *v141;
  std::string::size_type size;
  std::string *v143;
  uint64_t v144;
  int v145;
  int v146;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int *v150;
  unsigned int *v151;
  std::system_error_vtbl *v152;
  const char *v153;
  std::system_error_vtbl *v154;
  std::system_error_vtbl *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *p_size;
  unint64_t v162;
  std::__shared_weak_count *v163;
  int v164;
  unint64_t *v165;
  unint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  std::runtime_error *v170;
  unsigned int v171;
  unsigned __int8 v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t *result;
  __int128 v181;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  __int128 *v186;
  char v187;
  char *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::runtime_error v232;
  unint64_t *v234;
  unint64_t v235;
  std::runtime_error *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::system_error_vtbl *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  __int128 v265;
  unint64_t *v267;
  unint64_t v268;
  std::error_code v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  BOOL v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  std::runtime_error v305;
  unint64_t *v307;
  unint64_t v308;
  char *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  BOOL v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  std::runtime_error v336;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::runtime_error_vtbl *v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  int v373;
  uint64_t v374;
  unint64_t v375;
  void **v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  std::error_code v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  char *v393;
  std::runtime_error v394;
  unint64_t *v396;
  unint64_t v397;
  uint64_t v398;
  const std::runtime_error *v399;
  char v400;
  char *v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  __int128 v410;
  uint64_t v411;
  __int128 v412;
  _QWORD *v413;
  uint64_t v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  void *v428;
  AMSCore::HTTPResponseAction *v429;
  std::runtime_error v430;
  unint64_t *v432;
  unint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  uint64_t v437;
  uint64_t v438;
  AMSCore::ExecuteHTTPRequestTask::Options *v439;
  _OWORD *v440;
  __int128 v441;
  uint64_t v442;
  __int128 v443;
  char *v444;
  _QWORD *v445;
  uint64_t v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  char v460;
  uint64_t v461;
  char *v462;
  void (***v463)(_QWORD);
  uint64_t v464;
  std::runtime_error *v465;
  uint64_t v466;
  char *v467;
  uint64_t v468;
  __int128 v469;
  __int128 v470;
  uint64_t v471;
  char *v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  _QWORD *v492;
  uint64_t v493;
  void **v494;
  void *v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  void **v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  __int128 *v512;
  __int128 *v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  __int128 v517;
  __int128 v518;
  uint64_t v519;
  char *v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  void **v530;
  void *v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  void **v538;
  char *v539;
  uint64_t v540;
  uint64_t v541;
  std::string *v542;
  _OWORD *v543;
  uint64_t v544;
  _QWORD *v545;
  __int128 *v546;
  std::runtime_error *v547;
  _QWORD *v548;
  _QWORD *v549;
  void **v550;
  AMSCore::HTTPResponseAction *v551;
  std::runtime_error *v552;
  uint64_t v553;
  uint64_t *v554;
  char *v555;
  char *v556;
  unsigned int *v557;
  std::runtime_error *v558;
  std::runtime_error *v559[2];
  std::runtime_error *v560;
  std::__shared_weak_count *v561;
  uint64_t v562;
  uint64_t v563;
  AMSCore::HTTPResponseAction *v564;
  uint64_t v565;
  uint64_t *v566;
  _BOOL4 v567;
  void **v568;
  std::runtime_error v569;
  std::error_code v570;
  __int128 v571;
  _BYTE v572[32];
  __int128 v573;
  _BYTE v574[25];
  __int128 v575;
  unsigned int *v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  _BYTE v585[26];
  void *v586;
  char v587;
  char v588;
  std::string v589;
  __int128 __p;
  __int128 v591;
  int v592;
  uint64_t v593[20];
  std::string *v594;
  std::string *v595;
  std::string **v596;
  std::string __what_arg;
  std::system_error v598;
  __int128 v599;
  uint64_t v600;
  __int128 v601;
  std::runtime_error v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  __int128 v607;
  _BYTE v608[25];
  __int128 v609;
  unsigned int *v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  _OWORD v619[2];
  __int128 v620;
  uint64_t v621;
  char v622;
  std::runtime_error v623;
  std::error_code v624;
  __int128 v625;
  _BYTE v626[32];
  __int128 v627;
  _BYTE v628[25];
  __int128 v629;
  unsigned int *v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  _OWORD v639[2];
  void *v640;
  char v641;
  std::system_error v642;
  __int128 v643;
  uint64_t v644;
  __int128 v645;
  std::runtime_error v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  _OWORD v652[2];
  __int128 v653;
  unsigned int *v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  _OWORD v663[2];
  __int128 v664;
  uint64_t v665;
  char v666;
  uint64_t v667;
  std::error_code v668;
  std::error_code v669;
  std::error_code v670;

  v667 = *MEMORY[0x1E0C80C00];
  v8 = (char *)operator new(0x13A0uLL);
  v9 = v8 + 5016;
  v550 = (void **)(v8 + 4032);
  v551 = (AMSCore::HTTPResponseAction *)(v8 + 2752);
  v546 = (__int128 *)(v8 + 1160);
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v8 + 3640), a2);
  v10 = *(_OWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  *(_OWORD *)(v8 + 4488) = *(_OWORD *)a3;
  v566 = (uint64_t *)(v8 + 4488);
  v549 = v8 + 4616;
  v555 = v8 + 4648;
  *((_OWORD *)v8 + 251) = v10;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v544 = (uint64_t)(v8 + 4840);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 24);
  v547 = (std::runtime_error *)(v8 + 4872);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *((_QWORD *)v8 + 563) = v11;
  *((_QWORD *)v8 + 564) = v12;
  v13 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v8 + 565) = v13;
  v556 = v8 + 4936;
  v14 = *(_QWORD *)(a3 + 40);
  *((_DWORD *)v8 + 1134) = *(_DWORD *)(a3 + 48);
  v15 = (uint64_t)(v8 + 16);
  *((_QWORD *)v8 + 566) = v14;
  if (v14)
  {
    v16 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v16 >= v12)
        v16 %= v12;
    }
    else
    {
      v16 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v16) = v8 + 4520;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  v545 = v8 + 4520;
  v548 = v8 + 3416;
  v17 = (uint64_t *)(v8 + 496);
  v560 = (std::runtime_error *)(v8 + 1816);
  v562 = (uint64_t)(v8 + 4696);
  v564 = (AMSCore::HTTPResponseAction *)(v8 + 2288);
  v558 = (std::runtime_error *)(v8 + 3216);
  v554 = (uint64_t *)(v8 + 4016);
  *((_WORD *)v8 + 2272) = *(_WORD *)(a3 + 56);
  v18 = a4 + 3;
  v19 = (_QWORD *)a4[3];
  v543 = v8 + 4552;
  if (!v19)
  {
    v18 = v8 + 4672;
    goto LABEL_11;
  }
  if (v19 != a4)
  {
    *((_QWORD *)v8 + 584) = v19;
LABEL_11:
    *v18 = 0;
    goto LABEL_13;
  }
  *((_QWORD *)v8 + 584) = v555;
  (*(void (**)(_QWORD *))(*a4 + 24))(a4);
  v15 = (uint64_t)(v8 + 16);
  do
LABEL_13:
    v20 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v20 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v8[24] = 0;
  v21 = (std::runtime_error *)(v8 + 24);
  v8[448] = 0;
  *((_QWORD *)v8 + 57) = 0;
  *((_QWORD *)v8 + 61) = 0;
  v565 = v15;
  std::shared_ptr<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::get_return_object(void)::DetachPromise,void>(&v642, v15);
  *a1 = v642.std::runtime_error;
  v22 = *((_QWORD *)v8 + 455);
  v23 = (std::__shared_weak_count *)*((_QWORD *)v8 + 456);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    v26 = v22 == 0;
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    v26 = v22 == 0;
  }
  v29 = *v566;
  if (v26 != (*(_DWORD *)(*v566 + 104) == 1))
  {
    LOBYTE(v569.__vftable) = 0;
    LOBYTE(v570.__cat_) = 0;
    LOBYTE(v571) = 0;
    BYTE8(v571) = 0;
    v572[0] = 0;
    v572[8] = 0;
    v572[16] = 0;
    v572[24] = 0;
    LOBYTE(v573) = 0;
    BYTE8(v573) = 0;
    v574[0] = 0;
    v574[8] = 0;
    v574[16] = 0;
    v574[24] = 0;
    BYTE8(v577) = 0;
    LOBYTE(v578) = 0;
    BYTE8(v578) = 0;
    LOBYTE(v579) = 0;
    BYTE8(v579) = 0;
    LOBYTE(v580) = 0;
    BYTE8(v580) = 0;
    LOBYTE(v581) = 0;
    BYTE8(v581) = 0;
    LOBYTE(v582) = 0;
    BYTE8(v582) = 0;
    LOBYTE(v583) = 0;
    BYTE8(v583) = 0;
    LOBYTE(v584) = 0;
    BYTE8(v584) = 0;
    v575 = 0uLL;
    LOBYTE(v577) = 0;
    v576 = 0;
    *(_DWORD *)v585 = 0;
    *(_QWORD *)&v585[8] = v8[4545];
    v585[16] = 1;
    *(_WORD *)&v585[24] = 0;
    LOBYTE(v586) = 0;
    v588 = 0;
    v30 = (std::__shared_weak_count *)*((_QWORD *)v8 + 456);
    v561 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v563 = v29 + 88;
      LOBYTE(v623.__vftable) = 0;
      LOBYTE(v624.__cat_) = 0;
      v567 = LOBYTE(v570.__cat_) != 0;
    }
    else
    {
      v567 = 0;
      v563 = v29 + 88;
      LOBYTE(v623.__vftable) = 0;
      LOBYTE(v624.__cat_) = 0;
    }
    v552 = (std::runtime_error *)(v8 + 24);
    *(_OWORD *)&v626[16] = *(_OWORD *)&v572[16];
    v627 = v573;
    *(_OWORD *)v628 = *(_OWORD *)v574;
    *(_OWORD *)&v628[9] = *(_OWORD *)&v574[9];
    v625 = v571;
    *(_OWORD *)v626 = *(_OWORD *)v572;
    *(_OWORD *)v559 = v575;
    v629 = v575;
    v557 = v576;
    v630 = v576;
    v576 = 0;
    v575 = 0uLL;
    v638 = v584;
    v639[0] = *(_OWORD *)v585;
    *(_OWORD *)((char *)v639 + 10) = *(_OWORD *)&v585[10];
    v637 = v583;
    v633 = v579;
    v634 = v580;
    v635 = v581;
    v636 = v582;
    v631 = v577;
    v632 = v578;
    LOBYTE(v640) = 0;
    v641 = 0;
    v46 = MEMORY[0x1E0DE4FE0];
    v47 = MEMORY[0x1E0DE4FE0] + 64;
    v48 = (std::string::size_type *)MEMORY[0x1E0DE4F60];
    v49 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v50 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v593[0] = MEMORY[0x1E0DE4FE0] + 64;
    v589.__r_.__value_.__r.__words[0] = v49;
    *(std::string::size_type *)((char *)v589.__r_.__value_.__r.__words + *(_QWORD *)(v49 - 24)) = v50;
    v51 = (std::ios_base *)((char *)&v589 + *(_QWORD *)(v589.__r_.__value_.__r.__words[0] - 24));
    std::ios_base::init(v51, &v589.__r_.__value_.__r.__words[1]);
    v51[1].__vftable = 0;
    v51[1].__fmtflags_ = -1;
    v589.__r_.__value_.__r.__words[0] = v46 + 24;
    v593[0] = v47;
    std::streambuf::basic_streambuf();
    v52 = MEMORY[0x1E0DE4FB8];
    v589.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v591 = 0u;
    v592 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v589, (uint64_t)"The handler does not match the account type. handler = ", 55);
    v594 = &v589;
    v595 = &v589;
    v53 = *(unsigned int *)(v29 + 104);
    if ((_DWORD)v53 == -1)
      std::__throw_bad_variant_access[abi:fe180100]();
    v596 = &v594;
    ((void (*)(std::string ***, uint64_t))off_1E253D2C0[v53])(&v596, v563);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v589, (uint64_t)" | account = ", 13);
    std::ostream::operator<<();
    std::stringbuf::str[abi:fe180100]((uint64_t)&v589.__r_.__value_.__l.__size_, &__what_arg);
    v589.__r_.__value_.__r.__words[0] = *v48;
    *(std::string::size_type *)((char *)v589.__r_.__value_.__r.__words
                              + *(_QWORD *)(v589.__r_.__value_.__r.__words[0] - 24)) = v48[3];
    v589.__r_.__value_.__l.__size_ = v52 + 16;
    if (SBYTE7(v591) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v593);
    v668.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v668.__val_ = 3;
    std::system_error::system_error(&v642, v668, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v644 = 0;
    *((_QWORD *)&v643 + 1) = 0;
    v645 = 0uLL;
    *(_QWORD *)&v643 = (char *)&v643 + 8;
    v642.__vftable = (std::system_error_vtbl *)&off_1E2521420;
    LOBYTE(v646.__vftable) = 0;
    BYTE8(v647) = 0;
    if (v567)
    {
      v646 = v623;
      *(_QWORD *)&v647 = *(_QWORD *)&v624.__val_;
      *(_QWORD *)&v624.__val_ = 0;
      v623.__vftable = 0;
      v623.__imp_.__imp_ = 0;
      BYTE8(v647) = 1;
    }
    v650 = *(_OWORD *)&v626[16];
    v651 = v627;
    v652[0] = *(_OWORD *)v628;
    *(_OWORD *)((char *)v652 + 9) = *(_OWORD *)&v628[9];
    v648 = v625;
    v649 = *(_OWORD *)v626;
    v653 = *(_OWORD *)v559;
    v654 = v557;
    v630 = 0;
    v629 = 0uLL;
    *(_OWORD *)((char *)v663 + 10) = *(_OWORD *)((char *)v639 + 10);
    v661 = v637;
    v662 = v638;
    v663[0] = v639[0];
    v657 = v633;
    v658 = v634;
    v659 = v635;
    v660 = v636;
    v655 = v631;
    v656 = v632;
    LOBYTE(v664) = 0;
    v666 = 0;
    std::runtime_error::runtime_error(&v598, &v642);
    v598.__ec_ = v642.__ec_;
    v599 = v643;
    v600 = v644;
    if (v644)
    {
      *(_QWORD *)(*((_QWORD *)&v643 + 1) + 16) = (char *)&v599 + 8;
      *(_QWORD *)&v643 = (char *)&v643 + 8;
      *((_QWORD *)&v643 + 1) = 0;
      v644 = 0;
    }
    else
    {
      *(_QWORD *)&v599 = (char *)&v599 + 8;
    }
    v601 = v645;
    v645 = 0uLL;
    v598.__vftable = (std::system_error_vtbl *)&off_1E2521420;
    LOBYTE(v602.__vftable) = 0;
    BYTE8(v603) = 0;
    if (BYTE8(v647))
    {
      v602 = v646;
      *(_QWORD *)&v603 = v647;
      *(_QWORD *)&v647 = 0;
      v646 = (std::runtime_error)0;
      BYTE8(v603) = 1;
    }
    v606 = v650;
    v607 = v651;
    *(_OWORD *)v608 = v652[0];
    *(_OWORD *)&v608[9] = *(_OWORD *)((char *)v652 + 9);
    v604 = v648;
    v605 = v649;
    v609 = v653;
    v610 = v654;
    v654 = 0;
    v653 = 0uLL;
    *(_OWORD *)((char *)v619 + 10) = *(_OWORD *)((char *)v663 + 10);
    v617 = v661;
    v618 = v662;
    v619[0] = v663[0];
    v613 = v657;
    v614 = v658;
    v615 = v659;
    v616 = v660;
    v611 = v655;
    v612 = v656;
    LOBYTE(v620) = 0;
    v622 = 0;
    if (v666)
    {
      v620 = v664;
      v621 = v665;
      v665 = 0;
      v664 = 0uLL;
      v622 = 1;
    }
    AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v642);
    v66 = v567;
    if (*((char *)&v624.__val_ + 7) >= 0)
      v66 = 0;
    if (v66)
      operator delete(v623.__vftable);
    std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)v552);
    std::runtime_error::runtime_error(v552, &v598);
    ec = v598.__ec_;
    v68 = *((_QWORD *)&v599 + 1);
    v69 = v599;
    *((_QWORD *)v8 + 8) = *((_QWORD *)&v599 + 1);
    v70 = v8 + 64;
    *(std::error_code *)(v8 + 40) = ec;
    *((_QWORD *)v8 + 3) = off_1E2521330;
    *((_QWORD *)v8 + 7) = v69;
    v71 = v600;
    *((_QWORD *)v8 + 9) = v600;
    if (v71)
    {
      *(_QWORD *)(v68 + 16) = v70;
      *(_QWORD *)&v599 = (char *)&v599 + 8;
      *((_QWORD *)&v599 + 1) = 0;
      v600 = 0;
    }
    else
    {
      *((_QWORD *)v8 + 7) = v70;
    }
    v17 = (uint64_t *)(v8 + 496);
    v72 = v601;
    v8[96] = 0;
    *((_OWORD *)v8 + 5) = v72;
    v601 = 0uLL;
    *((_QWORD *)v8 + 3) = &off_1E2521420;
    v8[120] = 0;
    if (BYTE8(v603))
    {
      *((std::runtime_error *)v8 + 6) = v602;
      *((_QWORD *)v8 + 14) = v603;
      *(_QWORD *)&v603 = 0;
      v602 = (std::runtime_error)0;
      v8[120] = 1;
    }
    v73 = v607;
    *((_OWORD *)v8 + 10) = v606;
    *((_OWORD *)v8 + 11) = v73;
    *((_OWORD *)v8 + 12) = *(_OWORD *)v608;
    *(_OWORD *)(v8 + 201) = *(_OWORD *)&v608[9];
    v74 = v605;
    *((_OWORD *)v8 + 8) = v604;
    *((_OWORD *)v8 + 9) = v74;
    *((_OWORD *)v8 + 14) = v609;
    v75 = v617;
    v76 = v619[0];
    *(_OWORD *)(v8 + 360) = v618;
    *(_OWORD *)(v8 + 376) = v76;
    *(_OWORD *)(v8 + 386) = *(_OWORD *)((char *)v619 + 10);
    v77 = v614;
    *(_OWORD *)(v8 + 280) = v613;
    *(_OWORD *)(v8 + 296) = v77;
    v78 = v616;
    *(_OWORD *)(v8 + 312) = v615;
    *(_OWORD *)(v8 + 328) = v78;
    *(_OWORD *)(v8 + 344) = v75;
    v79 = v612;
    *(_OWORD *)(v8 + 248) = v611;
    *((_QWORD *)v8 + 30) = v610;
    v610 = 0;
    v609 = 0uLL;
    *(_OWORD *)(v8 + 264) = v79;
    v8[408] = 0;
    v8[432] = 0;
    v9 = v8 + 5016;
    if (v622)
    {
      *(_OWORD *)(v8 + 408) = v620;
      *((_QWORD *)v8 + 53) = v621;
      v621 = 0;
      v620 = 0uLL;
      v8[432] = 1;
    }
    v8[440] = 0;
    v8[448] = 1;
    AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v598);
    if (v561)
    {
      v80 = (unint64_t *)&v561->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
        std::__shared_weak_count::__release_weak(v561);
      }
    }
    if (v588 && v587 < 0)
      operator delete(v586);
    if ((_QWORD)v575)
    {
      v82 = *((_QWORD *)&v575 + 1);
      v83 = (void *)v575;
      if (*((_QWORD *)&v575 + 1) != (_QWORD)v575)
      {
        do
        {
          if (*(char *)(v82 - 1) < 0)
            operator delete(*(void **)(v82 - 24));
          v82 -= 24;
        }
        while (v82 != (_QWORD)v575);
        v83 = (void *)v575;
      }
      *((_QWORD *)&v575 + 1) = v575;
      operator delete(v83);
    }
    if (LOBYTE(v570.__cat_))
    {
      if (*((char *)&v570.__val_ + 7) < 0)
        operator delete(v569.__vftable);
    }
LABEL_736:
    *((_QWORD *)v8 + 62) = v565;
    *(_QWORD *)v8 = 0;
    *v9 = 7;
    return AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::Awaiter::await_suspend(v17);
  }
  if (*(_BYTE *)(v29 + 131))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v569);
    v33 = v569.__vftable;
    if (SLODWORD(v569.~runtime_error_0) <= 2)
    {
      v34 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v35 = MEMORY[0x1E0DE4FE0] + 64;
      v36 = MEMORY[0x1E0DE4F60];
      v37 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v38 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      *((_QWORD *)&v648 + 1) = MEMORY[0x1E0DE4FE0] + 64;
      v642.__vftable = v37;
      *(std::system_error_vtbl **)((char *)&v642.__vftable + (unint64_t)v37[-1].~system_error) = v38;
      v39 = (std::ios_base *)((char *)&v642 + (unint64_t)v642.__vftable[-1].~system_error);
      std::ios_base::init(v39, &v642.__imp_);
      v39[1].__vftable = 0;
      v39[1].__fmtflags_ = -1;
      v642.__vftable = v34 + 1;
      *((_QWORD *)&v648 + 1) = v35;
      std::streambuf::basic_streambuf();
      v40 = MEMORY[0x1E0DE4FB8];
      v642.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v646 = (std::runtime_error)0;
      v647 = 0u;
      LODWORD(v648) = 16;
      v41 = v642.__vftable[-1].~system_error;
      if ((v42 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v642, (uint64_t)"Client set URLKnownToBeTrusted to true.", 39);
      v43 = v644;
      v44 = (char *)&v642 + (unint64_t)v642.__vftable[-1].~system_error;
      if ((v44[32] & 5) != 0)
      {
        v45 = -1;
      }
      else
      {
        (*(void (**)(std::system_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v44 + 5)
                                                                                                  + 32))(&v598, *((_QWORD *)v44 + 5), 0, 1, 16);
        v45 = *((_QWORD *)&v605 + 1);
      }
      v598.__vftable = (std::system_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v598.__imp_.__imp_) = 2;
      *(_QWORD *)&v598.__ec_.__val_ = v43;
      v598.__ec_.__cat_ = (const std::error_category *)v45;
      (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden), const char *, uint64_t, std::system_error *))(*(_QWORD *)v33->what + 16))(v33->what, "networking", 10, &v598);
      v642.__vftable = *(std::system_error_vtbl **)v36;
      *(std::system_error_vtbl **)((char *)&v642.__vftable + (unint64_t)v642.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v36 + 24);
      v642.__imp_.__imp_ = (const char *)(v40 + 16);
      if (SBYTE7(v647) < 0)
        operator delete(v646.__vftable);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58]((char *)&v648 + 8);
      v9 = v8 + 5016;
      v17 = (uint64_t *)(v8 + 496);
      v21 = (std::runtime_error *)(v8 + 24);
    }
    imp = (std::__shared_weak_count *)v569.__imp_.__imp_;
    if (v569.__imp_.__imp_)
    {
      v99 = (unint64_t *)(v569.__imp_.__imp_ + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    v626[24] = 1;
    goto LABEL_121;
  }
  v54 = *v554;
  v55 = *(char *)(*v554 + 151);
  if (v55 >= 0)
    v56 = (char *)(*v554 + 128);
  else
    v56 = *(char **)(*v554 + 128);
  if (v55 >= 0)
    v57 = *(unsigned __int8 *)(*v554 + 151);
  else
    v57 = *(_QWORD *)(*v554 + 136);
  v58 = std::locale::classic();
  v59 = std::locale::use_facet(v58, MEMORY[0x1E0DE4A90]);
  if (v57 == 4)
  {
    v60 = v59;
    v61 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v59->__vftable[1].__on_zero_shared)(v59, *v56);
    if (v61 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v60->__vftable[1].__on_zero_shared)(v60, 102))
    {
      v62 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v60->__vftable[1].__on_zero_shared)(v60, v56[1]);
      if (v62 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v60->__vftable[1].__on_zero_shared)(v60, 105))
      {
        v63 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v60->__vftable[1].__on_zero_shared)(v60, v56[2]);
        if (v63 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v60->__vftable[1].__on_zero_shared)(v60, 108))
        {
          v64 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v60->__vftable[1].__on_zero_shared)(v60, v56[3]);
          if (v64 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v60->__vftable[1].__on_zero_shared)(v60, 101))
          {
            AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode>((uint64_t)&v642, 0x135u);
            std::runtime_error::runtime_error(&v623, &v642);
            v624 = v642.__ec_;
            v65 = (unsigned int *)*((_QWORD *)&v643 + 1);
            v623.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v625 = v643;
            *(_QWORD *)v626 = v644;
            if (v644)
            {
              *(_QWORD *)(*((_QWORD *)&v643 + 1) + 16) = (char *)&v625 + 8;
              *(_QWORD *)&v643 = (char *)&v643 + 8;
              *((_QWORD *)&v643 + 1) = 0;
              v644 = 0;
              v65 = 0;
            }
            else
            {
              *(_QWORD *)&v625 = (char *)&v625 + 8;
            }
            v17 = (uint64_t *)(v8 + 496);
            *(_OWORD *)&v626[8] = v645;
            v626[24] = 0;
            v645 = 0uLL;
            v642.__vftable = (std::system_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v643, v65);
            MEMORY[0x18D7898AC](&v642);
            goto LABEL_121;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(v54 + 56))
  {
    v84 = *(_QWORD *)(v29 + 24);
    if (!v84)
    {
      v626[24] = 1;
      v17 = (uint64_t *)(v8 + 496);
      goto LABEL_121;
    }
    *((_BYTE *)&v598.__ec_.__val_ + 7) = 14;
    strcpy((char *)&v598, "trustedDomains");
    (*(void (**)(std::system_error *__return_ptr, uint64_t, std::system_error *))(*(_QWORD *)v84 + 72))(&v642, v84, &v598);
    if (*((char *)&v598.__ec_.__val_ + 7) < 0)
      operator delete(v598.__vftable);
    if (!LOBYTE(v646.__vftable))
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[33]>((uint64_t)&v598, 0xCCu);
      std::runtime_error::runtime_error(&v623, &v598);
      v624 = v598.__ec_;
      v149 = (unsigned int *)*((_QWORD *)&v599 + 1);
      v623.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v625 = v599;
      *(_QWORD *)v626 = v600;
      if (v600)
      {
        *(_QWORD *)(*((_QWORD *)&v599 + 1) + 16) = (char *)&v625 + 8;
        *(_QWORD *)&v599 = (char *)&v599 + 8;
        *((_QWORD *)&v599 + 1) = 0;
        v600 = 0;
        v149 = 0;
      }
      else
      {
        *(_QWORD *)&v625 = (char *)&v625 + 8;
      }
      v17 = (uint64_t *)(v8 + 496);
      *(_OWORD *)&v626[8] = v601;
      v626[24] = 0;
      v601 = 0uLL;
      v598.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v599, v149);
      MEMORY[0x18D7898AC](&v598);
      goto LABEL_218;
    }
    if (!*(_BYTE *)(v54 + 56))
      goto LABEL_798;
    v85 = *(char *)(v54 + 55);
    v86 = v85 >= 0 ? (char *)(v54 + 32) : *(char **)(v54 + 32);
    v87 = v85 >= 0 ? *(unsigned __int8 *)(v54 + 55) : *(_QWORD *)(v54 + 40);
    AMSCore::StringUtils::lowercase((uint64_t)&v589, v86, v87);
    if (!LOBYTE(v646.__vftable))
      goto LABEL_798;
    v88 = v642.__vftable;
    for (i = v642.__imp_.__imp_; v88 != (std::system_error_vtbl *)i; v88 = (std::system_error_vtbl *)((char *)v88 + 32))
    {
      v137 = (int)v88[1].~system_error;
      if (v137 == 5)
        v138 = v88;
      else
        v138 = 0;
      if (v137 != 5)
        continue;
      if (SHIBYTE(v138->what) < 0)
      {
        v140 = v138;
        v138 = (std::system_error_vtbl *)v138->~system_error;
        what_high = (unint64_t)v140->~system_error_0;
        if (!what_high)
          goto LABEL_176;
      }
      else
      {
        what_high = HIBYTE(v138->what);
        if (!HIBYTE(v138->what))
          goto LABEL_176;
      }
      if (LOBYTE(v138->~system_error) == 46)
      {
        if (AMSCore::URL::isInDomain(v54, (char *)v138, what_high))
          goto LABEL_228;
        continue;
      }
LABEL_176:
      AMSCore::StringUtils::lowercase((uint64_t)&v598, (char *)v138, what_high);
      if (*((char *)&v598.__ec_.__val_ + 7) >= 0)
        v141 = (const char *)*((unsigned __int8 *)&v598.__ec_.__val_ + 7);
      else
        v141 = v598.__imp_.__imp_;
      size = HIBYTE(v589.__r_.__value_.__r.__words[2]);
      if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v589.__r_.__value_.__l.__size_;
      if (v141 == (const char *)size)
      {
        if ((v589.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v143 = &v589;
        else
          v143 = (std::string *)v589.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v598.__ec_.__val_ + 7) & 0x80) != 0)
        {
          v135 = v598.__vftable;
          v136 = memcmp(v598.__vftable, v143, (size_t)v598.__imp_.__imp_);
          operator delete(v135);
          if (!v136)
            goto LABEL_228;
        }
        else
        {
          if (!*((_BYTE *)&v598.__ec_.__val_ + 7))
            goto LABEL_228;
          v144 = 0;
          do
          {
            v145 = *((unsigned __int8 *)&v598.__vftable + v144);
            v146 = v143->__r_.__value_.__s.__data_[v144];
          }
          while (v145 == v146 && *((unsigned __int8 *)&v598.__ec_.__val_ + 7) - 1 != v144++);
          if (v145 == v146)
          {
LABEL_228:
            v626[24] = 1;
            v17 = (uint64_t *)(v8 + 496);
            v21 = (std::runtime_error *)(v8 + 24);
            if (SHIBYTE(v589.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_215;
            goto LABEL_218;
          }
        }
      }
      else if ((*((_BYTE *)&v598.__ec_.__val_ + 7) & 0x80) != 0)
      {
        operator delete(v598.__vftable);
      }
    }
    AMSCore::URL::getStringRepresentation((AMSCore::URL *)v54, &__what_arg);
    AMSCore::StringUtils::join<char [31],std::string>((std::string *)&v569, "The URL is not trusted. url = ", (uint64_t)&__what_arg);
    v670.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
    *(_QWORD *)&v670.__val_ = 309;
    std::system_error::system_error(&v598, v670, (const std::string *)&v569);
    if (*((char *)&v570.__val_ + 7) < 0)
      operator delete(v569.__vftable);
    v600 = 0;
    v598.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v599 = (unint64_t)&v599 + 8;
    v601 = 0uLL;
    std::runtime_error::runtime_error(&v569, &v598);
    v570 = v598.__ec_;
    v569.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v148 = (unsigned int *)*((_QWORD *)&v599 + 1);
    v571 = v599;
    *(_QWORD *)v572 = v600;
    if (v600)
    {
      *(_QWORD *)(*((_QWORD *)&v599 + 1) + 16) = (char *)&v571 + 8;
      v148 = 0;
      *(_QWORD *)&v599 = (char *)&v599 + 8;
      *((_QWORD *)&v599 + 1) = 0;
      v600 = 0;
    }
    else
    {
      *(_QWORD *)&v571 = (char *)&v571 + 8;
    }
    *(_OWORD *)&v572[8] = v601;
    v601 = 0uLL;
    v598.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v599, v148);
    MEMORY[0x18D7898AC](&v598);
    std::runtime_error::runtime_error(&v623, &v569);
    v624 = v570;
    v151 = (unsigned int *)*((_QWORD *)&v571 + 1);
    v623.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v625 = v571;
    *(_QWORD *)v626 = *(_QWORD *)v572;
    if (*(_QWORD *)v572)
    {
      *(_QWORD *)(*((_QWORD *)&v571 + 1) + 16) = (char *)&v625 + 8;
      v151 = 0;
      *(_QWORD *)&v571 = (char *)&v571 + 8;
      *((_QWORD *)&v571 + 1) = 0;
      *(_QWORD *)v572 = 0;
    }
    else
    {
      *(_QWORD *)&v625 = (char *)&v625 + 8;
    }
    v17 = (uint64_t *)(v8 + 496);
    v21 = (std::runtime_error *)(v8 + 24);
    *(_OWORD *)&v626[8] = *(_OWORD *)&v572[8];
    *(_QWORD *)&v572[8] = 0;
    *(_QWORD *)&v572[16] = 0;
    v626[24] = 0;
    v569.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v571, v151);
    MEMORY[0x18D7898AC](&v569);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    if (SHIBYTE(v589.__r_.__value_.__r.__words[2]) < 0)
LABEL_215:
      operator delete(v589.__r_.__value_.__l.__data_);
LABEL_218:
    v152 = v642.__vftable;
    if (LOBYTE(v646.__vftable))
    {
      if (v642.__vftable)
      {
        v153 = v642.__imp_.__imp_;
        v154 = v642.__vftable;
        if (v642.__imp_.__imp_ != (const char *)v642.__vftable)
        {
          do
          {
            v155 = (std::system_error_vtbl *)(v153 - 32);
            v156 = *((unsigned int *)v153 - 2);
            if ((_DWORD)v156 != -1)
              ((void (*)(std::system_error *, const char *))off_1E253D240[v156])(&v598, v153 - 32);
            *((_DWORD *)v153 - 2) = -1;
            v153 -= 32;
          }
          while (v155 != v152);
          v154 = v642.__vftable;
          v17 = (uint64_t *)(v8 + 496);
        }
        v642.__imp_.__imp_ = (const char *)v152;
        operator delete(v154);
      }
    }
    else
    {
      ((void (*)(std::system_error *))v642.~system_error)(&v642);
    }
  }
  else
  {
    v90 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v91 = MEMORY[0x1E0DE4FE0] + 64;
    v92 = MEMORY[0x1E0DE4F60];
    v93 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v94 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    *((_QWORD *)&v648 + 1) = MEMORY[0x1E0DE4FE0] + 64;
    v642.__vftable = v93;
    *(std::system_error_vtbl **)((char *)&v642.__vftable + (unint64_t)v93[-1].~system_error) = v94;
    v95 = (std::ios_base *)((char *)&v642 + (unint64_t)v642.__vftable[-1].~system_error);
    std::ios_base::init(v95, &v642.__imp_);
    v95[1].__vftable = 0;
    v95[1].__fmtflags_ = -1;
    v642.__vftable = v90 + 1;
    *((_QWORD *)&v648 + 1) = v91;
    std::streambuf::basic_streambuf();
    v96 = MEMORY[0x1E0DE4FB8];
    v642.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    v646 = (std::runtime_error)0;
    v647 = 0u;
    LODWORD(v648) = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v642, (uint64_t)"Unable to determine if a URL is trusted. The URL has no host.", 61);
    std::stringbuf::str[abi:fe180100]((uint64_t)&v642.__imp_, (std::string *)&v598);
    v642.__vftable = *(std::system_error_vtbl **)v92;
    *(std::system_error_vtbl **)((char *)&v642.__vftable + (unint64_t)v642.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v92 + 24);
    v642.__imp_.__imp_ = (const char *)(v96 + 16);
    if (SBYTE7(v647) < 0)
      operator delete(v646.__vftable);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58]((char *)&v648 + 8);
    v669.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
    *(_QWORD *)&v669.__val_ = 309;
    std::system_error::system_error(&v642, v669, (const std::string *)&v598);
    if (*((char *)&v598.__ec_.__val_ + 7) < 0)
      operator delete(v598.__vftable);
    v644 = 0;
    v642.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v643 = (unint64_t)&v643 + 8;
    v645 = 0uLL;
    std::runtime_error::runtime_error(&v598, &v642);
    v598.__ec_ = v642.__ec_;
    v97 = (unsigned int *)*((_QWORD *)&v643 + 1);
    v598.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v599 = v643;
    v600 = v644;
    if (v644)
    {
      *(_QWORD *)(*((_QWORD *)&v643 + 1) + 16) = (char *)&v599 + 8;
      v97 = 0;
      *(_QWORD *)&v643 = (char *)&v643 + 8;
      *((_QWORD *)&v643 + 1) = 0;
      v644 = 0;
    }
    else
    {
      *(_QWORD *)&v599 = (char *)&v599 + 8;
    }
    v601 = v645;
    v645 = 0uLL;
    v642.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v643, v97);
    MEMORY[0x18D7898AC](&v642);
    std::runtime_error::runtime_error(&v623, &v598);
    v624 = v598.__ec_;
    v150 = (unsigned int *)*((_QWORD *)&v599 + 1);
    v623.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v625 = v599;
    *(_QWORD *)v626 = v600;
    if (v600)
    {
      *(_QWORD *)(*((_QWORD *)&v599 + 1) + 16) = (char *)&v625 + 8;
      v150 = 0;
      *(_QWORD *)&v599 = (char *)&v599 + 8;
      *((_QWORD *)&v599 + 1) = 0;
      v600 = 0;
    }
    else
    {
      *(_QWORD *)&v625 = (char *)&v625 + 8;
    }
    v17 = (uint64_t *)(v8 + 496);
    v21 = (std::runtime_error *)(v8 + 24);
    *(_OWORD *)&v626[8] = v601;
    v601 = 0uLL;
    v626[24] = 0;
    v598.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v599, v150);
    MEMORY[0x18D7898AC](&v598);
    v9 = v8 + 5016;
  }
LABEL_121:
  if (!v626[24])
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v642);
    AMSCore::Logger::log<AMSCore::Error>((uint64_t)v642.__vftable, (uint64_t)"networking", 10, (uint64_t)&v623);
    v116 = (std::__shared_weak_count *)v642.__imp_.__imp_;
    if (v642.__imp_.__imp_)
    {
      v117 = (unint64_t *)(v642.__imp_.__imp_ + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    LOBYTE(v598.__vftable) = 0;
    LOBYTE(v598.__ec_.__cat_) = 0;
    LOBYTE(v599) = 0;
    BYTE8(v599) = 0;
    LOBYTE(v600) = 0;
    LOBYTE(v601) = 0;
    BYTE8(v601) = 0;
    LOBYTE(v602.__vftable) = 0;
    LOBYTE(v602.__imp_.__imp_) = 0;
    LOBYTE(v603) = 0;
    BYTE8(v603) = 0;
    LOBYTE(v604) = 0;
    BYTE8(v604) = 0;
    LOBYTE(v605) = 0;
    BYTE8(v607) = 0;
    v608[0] = 0;
    v608[8] = 0;
    v608[16] = 0;
    v608[24] = 0;
    LOBYTE(v609) = 0;
    BYTE8(v609) = 0;
    LOBYTE(v610) = 0;
    LOBYTE(v611) = 0;
    BYTE8(v611) = 0;
    LOBYTE(v612) = 0;
    BYTE8(v612) = 0;
    LOBYTE(v613) = 0;
    BYTE8(v613) = 0;
    LOBYTE(v614) = 0;
    v606 = 0uLL;
    *((_QWORD *)&v605 + 1) = 0;
    LOBYTE(v607) = 0;
    DWORD2(v614) = 0;
    *(_QWORD *)&v615 = v8[4545];
    BYTE8(v615) = 1;
    LOWORD(v616) = 0;
    BYTE8(v616) = 0;
    LOBYTE(v618) = 0;
    if (!v626[24])
    {
      AMSCore::Unexpected<AMSCore::HTTPError,AMSCore::HTTPTransactionMetrics,AMSCore::Error>(&v623, (uint64_t)&v598, &v642);
      std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)v21);
      std::runtime_error::runtime_error(v21, &v642);
      v119 = v642.__ec_;
      v120 = *((_QWORD *)&v643 + 1);
      v121 = v643;
      *((_QWORD *)v8 + 8) = *((_QWORD *)&v643 + 1);
      v122 = v8 + 64;
      *(std::error_code *)(v8 + 40) = v119;
      *((_QWORD *)v8 + 3) = off_1E2521330;
      *((_QWORD *)v8 + 7) = v121;
      v123 = v644;
      *((_QWORD *)v8 + 9) = v644;
      if (v123)
      {
        *(_QWORD *)(v120 + 16) = v122;
        *(_QWORD *)&v643 = (char *)&v643 + 8;
        *((_QWORD *)&v643 + 1) = 0;
        v644 = 0;
      }
      else
      {
        *((_QWORD *)v8 + 7) = v122;
      }
      v124 = v645;
      v8[96] = 0;
      *((_OWORD *)v8 + 5) = v124;
      v645 = 0uLL;
      *((_QWORD *)v8 + 3) = &off_1E2521420;
      v8[120] = 0;
      if (BYTE8(v647))
      {
        *((std::runtime_error *)v8 + 6) = v646;
        *((_QWORD *)v8 + 14) = v647;
        *(_QWORD *)&v647 = 0;
        v646 = (std::runtime_error)0;
        v8[120] = 1;
      }
      v125 = v651;
      *((_OWORD *)v8 + 10) = v650;
      *((_OWORD *)v8 + 11) = v125;
      *((_OWORD *)v8 + 12) = v652[0];
      *(_OWORD *)(v8 + 201) = *(_OWORD *)((char *)v652 + 9);
      v126 = v649;
      *((_OWORD *)v8 + 8) = v648;
      *((_OWORD *)v8 + 9) = v126;
      *((_OWORD *)v8 + 14) = v653;
      v127 = v661;
      v128 = v663[0];
      *(_OWORD *)(v8 + 360) = v662;
      *(_OWORD *)(v8 + 376) = v128;
      *(_OWORD *)(v8 + 386) = *(_OWORD *)((char *)v663 + 10);
      v129 = v658;
      *(_OWORD *)(v8 + 280) = v657;
      *(_OWORD *)(v8 + 296) = v129;
      v130 = v660;
      *(_OWORD *)(v8 + 312) = v659;
      *(_OWORD *)(v8 + 328) = v130;
      *(_OWORD *)(v8 + 344) = v127;
      v131 = v656;
      *(_OWORD *)(v8 + 248) = v655;
      *((_QWORD *)v8 + 30) = v654;
      v653 = 0uLL;
      v654 = 0;
      *(_OWORD *)(v8 + 264) = v131;
      v8[408] = 0;
      v8[432] = 0;
      if (v666)
      {
        *(_OWORD *)(v8 + 408) = v664;
        *((_QWORD *)v8 + 53) = v665;
        v665 = 0;
        v664 = 0uLL;
        v8[432] = 1;
      }
      v8[440] = 0;
      v8[448] = 1;
      AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v642);
      if ((_BYTE)v618 && SHIBYTE(v617) < 0)
        operator delete(*((void **)&v616 + 1));
      v132 = *((_QWORD *)&v605 + 1);
      if (*((_QWORD *)&v605 + 1))
      {
        v133 = v606;
        v134 = (void *)*((_QWORD *)&v605 + 1);
        if ((_QWORD)v606 != *((_QWORD *)&v605 + 1))
        {
          do
          {
            if (*(char *)(v133 - 1) < 0)
              operator delete(*(void **)(v133 - 24));
            v133 -= 24;
          }
          while (v133 != v132);
          v134 = (void *)*((_QWORD *)&v605 + 1);
        }
        *(_QWORD *)&v606 = v132;
        operator delete(v134);
      }
      if (LOBYTE(v598.__ec_.__cat_) && *((char *)&v598.__ec_.__val_ + 7) < 0)
        operator delete(v598.__vftable);
      if (!v626[24])
        ((void (*)(std::runtime_error *))v623.~runtime_error)(&v623);
      goto LABEL_736;
    }
    goto LABEL_798;
  }
  *((_QWORD *)v8 + 621) = *((_QWORD *)v8 + 455);
  v101 = *((_QWORD *)v8 + 456);
  *((_QWORD *)v8 + 622) = v101;
  if (v101)
  {
    v102 = (unint64_t *)(v101 + 8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  *((_QWORD *)v8 + 617) = *((_QWORD *)v8 + 502);
  v104 = *((_QWORD *)v8 + 503);
  *((_QWORD *)v8 + 618) = v104;
  if (v104)
  {
    v105 = (unint64_t *)(v104 + 8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v594);
  if (SLODWORD(v594->__r_.__value_.__r.__words[1]) <= 2)
  {
    v542 = v594;
    v107 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v108 = MEMORY[0x1E0DE4FE0] + 64;
    v109 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v110 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    *((_QWORD *)&v604 + 1) = MEMORY[0x1E0DE4FE0] + 64;
    v598.__vftable = v109;
    *(std::system_error_vtbl **)((char *)&v598.__vftable + (unint64_t)v109[-1].~system_error) = v110;
    v111 = (std::ios_base *)((char *)&v598 + (unint64_t)v598.__vftable[-1].~system_error);
    std::ios_base::init(v111, &v598.__imp_);
    v111[1].__vftable = 0;
    v111[1].__fmtflags_ = -1;
    v598.__vftable = v107 + 1;
    *((_QWORD *)&v604 + 1) = v108;
    std::streambuf::basic_streambuf();
    v598.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    v602 = (std::runtime_error)0;
    v603 = 0u;
    LODWORD(v604) = 16;
    v112 = v598.__vftable[-1].~system_error;
    if ((v113 & 1) == 0
    {
      v9 = v8 + 5016;
      v17 = (uint64_t *)(v8 + 496);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v598, (uint64_t)"Submitting the HTTP request. request = ", 39);
    v114 = *(_QWORD *)v556;
    if (*(_QWORD *)v556)
    {
      LOBYTE(v642.__vftable) = 123;
      v115 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v598, (uint64_t)&v642, 1);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v115, (uint64_t)"\"method\":\"", 10);
      __asm { BR              X10 }
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v598, (uint64_t)"null", 4);
    v157 = v600;
    v158 = (char *)&v598 + (unint64_t)v598.__vftable[-1].~system_error;
    if ((v158[32] & 5) != 0)
    {
      v159 = -1;
    }
    else
    {
      (*(void (**)(std::system_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v158 + 5)
                                                                                                + 32))(&v642, *((_QWORD *)v158 + 5), 0, 1, 16);
      v159 = *((_QWORD *)&v649 + 1);
    }
    v642.__vftable = (std::system_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v642.__imp_.__imp_) = 2;
    *(_QWORD *)&v642.__ec_.__val_ = v157;
    v642.__ec_.__cat_ = (const std::error_category *)v159;
    (*(void (**)(std::string::size_type, const char *, uint64_t, std::system_error *))(*(_QWORD *)v542->__r_.__value_.__r.__words[2]
                                                                                               + 16))(v542->__r_.__value_.__r.__words[2], "networking", 10, &v642);
    v598.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E0DE4F60];
    *(std::system_error_vtbl **)((char *)&v598.__vftable + (unint64_t)v598.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
    v598.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    if (SBYTE7(v603) < 0)
      operator delete(v602.__vftable);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58]((char *)&v604 + 8);
  }
  v160 = (std::__shared_weak_count *)v595;
  if (v595)
  {
    p_size = &v595->__r_.__value_.__l.__size_;
    do
      v162 = __ldaxr(p_size);
    while (__stlxr(v162 - 1, p_size));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v642);
  v163 = (std::__shared_weak_count *)v642.__imp_.__imp_;
  v164 = (int)v642.~system_error_0;
  if (v642.__imp_.__imp_)
  {
    v165 = (unint64_t *)(v642.__imp_.__imp_ + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v167 = v8 + 2288;
  if (v164 <= 1)
  {
    v168 = *(_QWORD *)v556;
    v169 = *(unsigned __int8 *)(*(_QWORD *)v556 + 223);
    if (*(char *)(*(_QWORD *)v556 + 223) < 0)
    {
      if (!*(_QWORD *)(v168 + 208))
        goto LABEL_263;
    }
    else if (!*(_BYTE *)(*(_QWORD *)v556 + 223))
    {
      goto LABEL_263;
    }
    v170 = (std::runtime_error *)(v168 + 200);
    v171 = *((_DWORD *)v8 + 932);
    if (v171 <= 5 && ((0x36u >> v171) & 1) != 0)
    {
      if ((v169 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v642, *(const std::string::value_type **)(v168 + 200), *(_QWORD *)(v168 + 208));
      }
      else
      {
        v642.std::runtime_error = *v170;
        *(_QWORD *)&v642.__ec_.__val_ = *(_QWORD *)(v168 + 216);
      }
    }
    else
    {
      if ((v169 & 0x80) != 0)
      {
        v170 = *(std::runtime_error **)(v168 + 200);
        v169 = *(_QWORD *)(v168 + 208);
      }
      AMSCore::Base64::encode((uint64_t)v170, v169, &v642);
    }
    if (*((char *)&v642.__ec_.__val_ + 7) < 0)
      operator delete(v642.__vftable);
  }
LABEL_263:
  v172 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  if ((v172 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
    xmmword_1ECEABBC8 = 0uLL;
    byte_1ECEABBD8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
    v9 = v8 + 5016;
    v17 = (uint64_t *)(v8 + 496);
    v167 = v8 + 2288;
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  if (!byte_1ECEABBD8)
    goto LABEL_785;
  v173 = *((_QWORD *)&xmmword_1ECEABBC8 + 1);
  *((_QWORD *)v8 + 227) = xmmword_1ECEABBC8;
  *((_QWORD *)v8 + 228) = v173;
  if (v173)
  {
    v174 = (unint64_t *)(v173 + 8);
    do
      v175 = __ldxr(v174);
    while (__stxr(v175 + 1, v174));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  v176 = *((_QWORD *)v8 + 227);
  *((_QWORD *)v8 + 615) = *((_QWORD *)v8 + 617);
  v177 = *((_QWORD *)v8 + 618);
  *((_QWORD *)v8 + 616) = v177;
  if (v177)
  {
    v178 = (unint64_t *)(v177 + 8);
    do
      v179 = __ldxr(v178);
    while (__stxr(v179 + 1, v178));
  }
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, char *, _QWORD, _QWORD))(*(_QWORD *)v176 + 24))(v176, v8 + 4920, *(_QWORD *)(*((_QWORD *)v8 + 561) + 112), *(_QWORD *)(*((_QWORD *)v8 + 561) + 120));
  v181 = *((_OWORD *)v8 + 143);
  *(_OWORD *)(v8 + 4984) = v181;
  *v167 = 0;
  v167[1] = 0;
  if (!atomic_load((unint64_t *)(v181 + 680)))
  {
    *v9 = 0;
    v183 = (unint64_t *)(*((_QWORD *)v8 + 623) + 680);
    do
      v184 = __ldaxr(v183);
    while (__stlxr((unint64_t)v8, v183));
    if (!v184)
      return result;
  }
  v185 = *((_QWORD *)v8 + 623);
  if (!*(_BYTE *)(v185 + 672))
    goto LABEL_798;
  v186 = (__int128 *)(v185 + 8);
  v187 = *(_BYTE *)(v185 + 664);
  if (v187)
  {
    AMSCore::HTTPResponse::HTTPResponse((uint64_t)v17, v186);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)v17, (const std::runtime_error *)v186);
    *((_QWORD *)v8 + 62) = MEMORY[0x1E0DE4F90] + 16;
    *((_OWORD *)v8 + 32) = *(_OWORD *)(v185 + 24);
    *((_QWORD *)v8 + 62) = off_1E2521330;
    *((_QWORD *)v8 + 66) = *(_QWORD *)(v185 + 40);
    v188 = v8 + 536;
    v189 = (_QWORD *)(v185 + 48);
    v190 = *(_QWORD *)(v185 + 48);
    *((_QWORD *)v8 + 67) = v190;
    v191 = *(_QWORD *)(v185 + 56);
    *((_QWORD *)v8 + 68) = v191;
    if (v191)
    {
      *(_QWORD *)(v190 + 16) = v188;
      *(_QWORD *)(v185 + 40) = v189;
      *v189 = 0;
      *(_QWORD *)(v185 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v8 + 66) = v188;
    }
    *(_OWORD *)(v8 + 552) = *(_OWORD *)(v185 + 64);
    *(_QWORD *)(v185 + 64) = 0;
    *(_QWORD *)(v185 + 72) = 0;
    *((_QWORD *)v8 + 62) = &off_1E2521420;
    v8[568] = 0;
    v8[592] = 0;
    if (*(_BYTE *)(v185 + 104))
    {
      v192 = *(_OWORD *)(v185 + 80);
      *((_QWORD *)v8 + 73) = *(_QWORD *)(v185 + 96);
      *(_OWORD *)(v8 + 568) = v192;
      *(_QWORD *)(v185 + 88) = 0;
      *(_QWORD *)(v185 + 96) = 0;
      *(_QWORD *)(v185 + 80) = 0;
      v8[592] = 1;
    }
    v193 = *(_OWORD *)(v185 + 112);
    *(_OWORD *)(v8 + 616) = *(_OWORD *)(v185 + 128);
    *(_OWORD *)(v8 + 600) = v193;
    v194 = *(_OWORD *)(v185 + 144);
    v195 = *(_OWORD *)(v185 + 160);
    v196 = *(_OWORD *)(v185 + 176);
    *(_OWORD *)(v8 + 673) = *(_OWORD *)(v185 + 185);
    *(_OWORD *)(v8 + 664) = v196;
    *(_OWORD *)(v8 + 648) = v195;
    *(_OWORD *)(v8 + 632) = v194;
    *((_QWORD *)v8 + 88) = 0;
    *((_QWORD *)v8 + 89) = 0;
    *((_QWORD *)v8 + 87) = 0;
    *(_OWORD *)(v8 + 696) = *(_OWORD *)(v185 + 208);
    *((_QWORD *)v8 + 89) = *(_QWORD *)(v185 + 224);
    *(_QWORD *)(v185 + 216) = 0;
    *(_QWORD *)(v185 + 224) = 0;
    *(_QWORD *)(v185 + 208) = 0;
    v197 = *(_OWORD *)(v185 + 248);
    *((_OWORD *)v8 + 45) = *(_OWORD *)(v185 + 232);
    *((_OWORD *)v8 + 46) = v197;
    v198 = *(_OWORD *)(v185 + 264);
    v199 = *(_OWORD *)(v185 + 280);
    v200 = *(_OWORD *)(v185 + 312);
    *((_OWORD *)v8 + 49) = *(_OWORD *)(v185 + 296);
    *((_OWORD *)v8 + 50) = v200;
    *((_OWORD *)v8 + 47) = v198;
    *((_OWORD *)v8 + 48) = v199;
    v201 = *(_OWORD *)(v185 + 328);
    v202 = *(_OWORD *)(v185 + 344);
    v203 = *(_OWORD *)(v185 + 360);
    *(_OWORD *)(v8 + 858) = *(_OWORD *)(v185 + 370);
    *((_OWORD *)v8 + 52) = v202;
    *((_OWORD *)v8 + 53) = v203;
    *((_OWORD *)v8 + 51) = v201;
    v8[880] = 0;
    v8[904] = 0;
    if (*(_BYTE *)(v185 + 416))
    {
      v204 = *(_OWORD *)(v185 + 392);
      *((_QWORD *)v8 + 112) = *(_QWORD *)(v185 + 408);
      *((_OWORD *)v8 + 55) = v204;
      *(_QWORD *)(v185 + 400) = 0;
      *(_QWORD *)(v185 + 408) = 0;
      *(_QWORD *)(v185 + 392) = 0;
      v8[904] = 1;
    }
  }
  v8[1152] = v187;
  v205 = *((_QWORD *)v8 + 624);
  if (v205)
  {
    v206 = (unint64_t *)(v205 + 8);
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      v208 = (std::__shared_weak_count *)*((_QWORD *)v8 + 624);
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v209 = (std::__shared_weak_count *)*((_QWORD *)v8 + 287);
  if (v209)
  {
    v210 = (unint64_t *)&v209->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = (std::__shared_weak_count *)*((_QWORD *)v8 + 616);
  if (!v212)
    goto LABEL_299;
  v213 = (unint64_t *)&v212->__shared_owners_;
  do
    v214 = __ldaxr(v213);
  while (__stlxr(v214 - 1, v213));
  if (!v214)
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
    v215 = (std::__shared_weak_count *)*((_QWORD *)v8 + 228);
    if (!v215)
      goto LABEL_303;
  }
  else
  {
LABEL_299:
    v215 = (std::__shared_weak_count *)*((_QWORD *)v8 + 228);
    if (!v215)
      goto LABEL_303;
  }
  v216 = (unint64_t *)&v215->__shared_owners_;
  do
    v217 = __ldaxr(v216);
  while (__stlxr(v217 - 1, v216));
  if (v217)
  {
LABEL_303:
    if (v8[1152])
      goto LABEL_304;
LABEL_331:
    v237 = v8[4545];
    if (!v8[864])
      v8[864] = 1;
    *((_QWORD *)v8 + 107) = v237;
    AMSCore::LoadURLMetricsHandler::OptionsBuilder::make((uint64_t)&v623, *((_QWORD *)v8 + 561));
    *((_QWORD *)v8 + 613) = *((_QWORD *)v8 + 621);
    v238 = *((_QWORD *)v8 + 622);
    *((_QWORD *)v8 + 614) = v238;
    if (v238)
    {
      v239 = (unint64_t *)(v238 + 8);
      do
        v240 = __ldxr(v239);
      while (__stxr(v240 + 1, v239));
    }
    v241 = *((_QWORD *)v8 + 584);
    if (!v241)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(std::system_error *__return_ptr))(*(_QWORD *)v241 + 48))(&v598);
    AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(&v642, (uint64_t *)&v598);
    v242 = (std::__shared_weak_count *)v642.__imp_.__imp_;
    v642.__imp_.__imp_ = 0;
    v642.__vftable = 0;
    if (v242)
    {
      v243 = (unint64_t *)&v242->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
      }
    }
    v245 = (std::__shared_weak_count *)v642.__imp_.__imp_;
    if (v642.__imp_.__imp_)
    {
      v246 = (unint64_t *)(v642.__imp_.__imp_ + 8);
      do
        v247 = __ldaxr(v246);
      while (__stlxr(v247 - 1, v246));
      if (!v247)
      {
        ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
        std::__shared_weak_count::__release_weak(v245);
      }
    }
    v248 = v598.__vftable;
    v598.__vftable = 0;
    if (v248)
      (*((void (**)(std::system_error_vtbl *))v248->~system_error + 1))(v248);
    v249 = (std::__shared_weak_count *)*((_QWORD *)v8 + 614);
    if (v249)
    {
      v250 = (unint64_t *)&v249->__shared_owners_;
      do
        v251 = __ldaxr(v250);
      while (__stlxr(v251 - 1, v250));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
        std::__shared_weak_count::__release_weak(v249);
      }
    }
    if (!v8[1152])
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v642);
      AMSCore::Logger::log<char [34],AMSCore::HTTPError>((uint64_t)v642.__vftable, (uint64_t)v17);
      v252 = (std::__shared_weak_count *)v642.__imp_.__imp_;
      if (v642.__imp_.__imp_)
      {
        v253 = (unint64_t *)(v642.__imp_.__imp_ + 8);
        do
          v254 = __ldaxr(v253);
        while (__stlxr(v254 - 1, v253));
        if (!v254)
        {
          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
          std::__shared_weak_count::__release_weak(v252);
        }
      }
      if (!v8[1152])
      {
        AMSCore::Error::Error(&v642, (const std::runtime_error *)v17);
        v642.__vftable = (std::system_error_vtbl *)&off_1E2521420;
        AMSCore::HTTPTransactionMetrics::HTTPTransactionMetrics((std::string *)&v646, (const AMSCore::HTTPTransactionMetrics *)(v8 + 568));
        std::runtime_error::runtime_error(&v598, &v642);
        v598.__ec_ = v642.__ec_;
        v599 = v643;
        v600 = v644;
        if (v644)
        {
          *(_QWORD *)(*((_QWORD *)&v643 + 1) + 16) = (char *)&v599 + 8;
          *(_QWORD *)&v643 = (char *)&v643 + 8;
          *((_QWORD *)&v643 + 1) = 0;
          v644 = 0;
        }
        else
        {
          *(_QWORD *)&v599 = (char *)&v599 + 8;
        }
        v601 = v645;
        v645 = 0uLL;
        v598.__vftable = (std::system_error_vtbl *)&off_1E2521420;
        LOBYTE(v602.__vftable) = 0;
        BYTE8(v603) = 0;
        if (BYTE8(v647))
        {
          v602 = v646;
          *(_QWORD *)&v603 = v647;
          *(_QWORD *)&v647 = 0;
          v646 = (std::runtime_error)0;
          BYTE8(v603) = 1;
        }
        v606 = v650;
        v607 = v651;
        *(_OWORD *)v608 = v652[0];
        *(_OWORD *)&v608[9] = *(_OWORD *)((char *)v652 + 9);
        v604 = v648;
        v605 = v649;
        v609 = v653;
        v610 = v654;
        v653 = 0uLL;
        v654 = 0;
        *(_OWORD *)((char *)v619 + 10) = *(_OWORD *)((char *)v663 + 10);
        v617 = v661;
        v618 = v662;
        v619[0] = v663[0];
        v613 = v657;
        v614 = v658;
        v615 = v659;
        v616 = v660;
        v611 = v655;
        v612 = v656;
        LOBYTE(v620) = 0;
        v622 = 0;
        if (v666)
        {
          v620 = v664;
          v621 = v665;
          v665 = 0;
          v664 = 0uLL;
          v622 = 1;
        }
        AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v642);
        std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)v21);
        std::runtime_error::runtime_error(v21, &v598);
        v269 = v598.__ec_;
        v270 = *((_QWORD *)&v599 + 1);
        v271 = v599;
        *((_QWORD *)v8 + 8) = *((_QWORD *)&v599 + 1);
        v272 = v8 + 64;
        *(std::error_code *)(v8 + 40) = v269;
        *((_QWORD *)v8 + 3) = off_1E2521330;
        *((_QWORD *)v8 + 7) = v271;
        v273 = v600;
        *((_QWORD *)v8 + 9) = v600;
        if (v273)
        {
          *(_QWORD *)(v270 + 16) = v272;
          *(_QWORD *)&v599 = (char *)&v599 + 8;
          *((_QWORD *)&v599 + 1) = 0;
          v600 = 0;
        }
        else
        {
          *((_QWORD *)v8 + 7) = v272;
        }
        v17 = (uint64_t *)(v8 + 496);
        v274 = v601;
        v8[96] = 0;
        *((_OWORD *)v8 + 5) = v274;
        v601 = 0uLL;
        *((_QWORD *)v8 + 3) = &off_1E2521420;
        v8[120] = 0;
        if (BYTE8(v603))
        {
          *((std::runtime_error *)v8 + 6) = v602;
          *((_QWORD *)v8 + 14) = v603;
          *(_QWORD *)&v603 = 0;
          v602 = (std::runtime_error)0;
          v8[120] = 1;
        }
        v275 = v607;
        *((_OWORD *)v8 + 10) = v606;
        *((_OWORD *)v8 + 11) = v275;
        *((_OWORD *)v8 + 12) = *(_OWORD *)v608;
        *(_OWORD *)(v8 + 201) = *(_OWORD *)&v608[9];
        v276 = v605;
        *((_OWORD *)v8 + 8) = v604;
        *((_OWORD *)v8 + 9) = v276;
        *((_OWORD *)v8 + 14) = v609;
        v277 = v617;
        v278 = v619[0];
        *(_OWORD *)(v8 + 360) = v618;
        *(_OWORD *)(v8 + 376) = v278;
        *(_OWORD *)(v8 + 386) = *(_OWORD *)((char *)v619 + 10);
        v279 = v614;
        *(_OWORD *)(v8 + 280) = v613;
        *(_OWORD *)(v8 + 296) = v279;
        v280 = v616;
        *(_OWORD *)(v8 + 312) = v615;
        *(_OWORD *)(v8 + 328) = v280;
        *(_OWORD *)(v8 + 344) = v277;
        v281 = v612;
        *(_OWORD *)(v8 + 248) = v611;
        *((_QWORD *)v8 + 30) = v610;
        v610 = 0;
        v609 = 0uLL;
        *(_OWORD *)(v8 + 264) = v281;
        v8[408] = 0;
        v8[432] = 0;
        v9 = v8 + 5016;
        if (v622)
        {
          *(_OWORD *)(v8 + 408) = v620;
          *((_QWORD *)v8 + 53) = v621;
          v621 = 0;
          v620 = 0uLL;
          v8[432] = 1;
        }
        v8[440] = 0;
        v8[448] = 1;
        AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v598);
        v282 = (std::__shared_weak_count *)v632;
        if ((_QWORD)v632)
        {
          v283 = (unint64_t *)(v632 + 8);
          do
            v284 = __ldaxr(v283);
          while (__stlxr(v284 - 1, v283));
          if (!v284)
          {
            ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
            std::__shared_weak_count::__release_weak(v282);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v629 + 8, v630);
        if (!v628[24])
          goto LABEL_401;
        if ((v628[23] & 0x80000000) != 0)
          operator delete(*(void **)v628);
        if (!v626[24])
LABEL_401:
          ((void (*)(std::runtime_error *))v623.~runtime_error)(&v623);
LABEL_723:
        if (v8[1152])
        {
          AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)v17);
          v506 = (std::__shared_weak_count *)*((_QWORD *)v8 + 618);
          if (!v506)
            goto LABEL_731;
        }
        else
        {
          (*(void (**)(uint64_t *))*v17)(v17);
          v506 = (std::__shared_weak_count *)*((_QWORD *)v8 + 618);
          if (!v506)
          {
LABEL_731:
            v509 = (std::__shared_weak_count *)*((_QWORD *)v8 + 622);
            if (v509)
            {
              v510 = (unint64_t *)&v509->__shared_owners_;
              do
                v511 = __ldaxr(v510);
              while (__stlxr(v511 - 1, v510));
              if (!v511)
              {
                ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
                std::__shared_weak_count::__release_weak(v509);
              }
            }
            goto LABEL_736;
          }
        }
        v507 = (unint64_t *)&v506->__shared_owners_;
        do
          v508 = __ldaxr(v507);
        while (__stlxr(v508 - 1, v507));
        if (!v508)
        {
          ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
          std::__shared_weak_count::__release_weak(v506);
        }
        goto LABEL_731;
      }
    }
    goto LABEL_798;
  }
  ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
  std::__shared_weak_count::__release_weak(v215);
  if (!v8[1152])
    goto LABEL_331;
LABEL_304:
  v218 = operator new(0x2A8uLL);
  v218[1] = 0;
  v218[2] = 0;
  *v218 = &off_1E25227E0;
  AMSCore::HTTPResponse::HTTPResponse((uint64_t)(v218 + 3), (__int128 *)v17);
  *((_QWORD *)v8 + 611) = v218 + 3;
  *((_QWORD *)v8 + 612) = v218;
  v219 = v8[4545];
  if (!*((_BYTE *)v218 + 544))
    *((_BYTE *)v218 + 544) = 1;
  v218[67] = v219;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v642);
  AMSCore::Logger::log<char [39],AMSCore::HTTPResponse>((uint64_t)v642.__vftable, (uint64_t)(v218 + 3));
  v220 = (std::__shared_weak_count *)v642.__imp_.__imp_;
  if (v642.__imp_.__imp_)
  {
    v221 = (unint64_t *)(v642.__imp_.__imp_ + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v8[1816] = 0;
  v8[2280] = 0;
  v223 = *((_QWORD *)v8 + 561);
  v224 = (uint64_t *)(v223 + 88);
  *((_QWORD *)v8 + 625) = v223 + 88;
  if (*(_DWORD *)(v223 + 104))
  {
    *((_QWORD *)v8 + 626) = v224;
    if (*(_DWORD *)(v223 + 104) == 1)
    {
      v225 = *v224;
      *((_QWORD *)v8 + 597) = *((_QWORD *)v8 + 611);
      v226 = *((_QWORD *)v8 + 612);
      *((_QWORD *)v8 + 598) = v226;
      if (v226)
      {
        v227 = (unint64_t *)(v226 + 8);
        do
          v228 = __ldxr(v227);
        while (__stxr(v228 + 1, v227));
        v223 = *v566;
      }
      *((_QWORD *)v8 + 599) = v223;
      v229 = *((_QWORD *)v8 + 562);
      *((_QWORD *)v8 + 600) = v229;
      if (v229)
      {
        v230 = (unint64_t *)(v229 + 8);
        do
          v231 = __ldxr(v230);
        while (__stxr(v231 + 1, v230));
      }
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, char *, char *))(*(_QWORD *)v225 + 40))(v225, v8 + 4776, v8 + 4792);
      v232 = *(std::runtime_error *)v562;
      *(_QWORD *)v562 = 0;
      *((_QWORD *)v8 + 588) = 0;
      *((std::runtime_error *)v8 + 201) = v232;
      if (!atomic_load((unint64_t *)&v232.__vftable[20]))
      {
        *v9 = 3;
        v234 = (unint64_t *)(*((_QWORD *)v8 + 402) + 480);
        do
          v235 = __ldaxr(v234);
        while (__stlxr((unint64_t)v8, v234));
        if (!v235)
          return result;
      }
      if (!LOBYTE(v558->__vftable[19].what))
        goto LABEL_798;
      v236 = (std::runtime_error *)(v8 + 2288);
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v564, (uint64_t)&v558->~runtime_error_0);
      if (v8[2280])
      {
        if (v8[2276])
        {
          AMSCore::HTTPResponseAction::operator=((uint64_t)v560, (uint64_t)v564);
        }
        else
        {
          (**((void (***)(std::runtime_error *))v8 + 227))(v560);
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v560, (uint64_t)v564);
          v8[2276] = 1;
        }
      }
      else
      {
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v560, (uint64_t)v564);
        v8[2276] = 1;
        v8[2280] = 1;
      }
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v564);
      v285 = (std::__shared_weak_count *)*((_QWORD *)v8 + 403);
      if (v285)
      {
        v286 = (unint64_t *)&v285->__shared_owners_;
        do
          v287 = __ldaxr(v286);
        while (__stlxr(v287 - 1, v286));
        if (!v287)
        {
          ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
          std::__shared_weak_count::__release_weak(v285);
        }
      }
      v288 = (std::__shared_weak_count *)*((_QWORD *)v8 + 588);
      if (v288)
      {
        v289 = (unint64_t *)&v288->__shared_owners_;
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
      }
      v291 = (std::__shared_weak_count *)*((_QWORD *)v8 + 600);
      if (v291)
      {
        v292 = (unint64_t *)&v291->__shared_owners_;
        do
          v293 = __ldaxr(v292);
        while (__stlxr(v293 - 1, v292));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
          std::__shared_weak_count::__release_weak(v291);
        }
      }
      v294 = (std::__shared_weak_count *)*((_QWORD *)v8 + 598);
      if (v294)
      {
        v295 = (unint64_t *)&v294->__shared_owners_;
        do
          v296 = __ldaxr(v295);
        while (__stlxr(v296 - 1, v295));
        if (!v296)
        {
          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
          std::__shared_weak_count::__release_weak(v294);
        }
      }
      if (v8[2280])
        v297 = v8[2276] == 0;
      else
        v297 = 1;
      if (!v297 && *((_DWORD *)v8 + 568) == 1)
      {
        v298 = **((_QWORD **)v8 + 626);
        *((_QWORD *)v8 + 603) = *((_QWORD *)v8 + 611);
        v299 = *((_QWORD *)v8 + 612);
        *((_QWORD *)v8 + 604) = v299;
        if (v299)
        {
          v300 = (unint64_t *)(v299 + 8);
          do
            v301 = __ldxr(v300);
          while (__stxr(v301 + 1, v300));
        }
        *((_QWORD *)v8 + 605) = *((_QWORD *)v8 + 561);
        v302 = *((_QWORD *)v8 + 562);
        *((_QWORD *)v8 + 606) = v302;
        if (v302)
        {
          v303 = (unint64_t *)(v302 + 8);
          do
            v304 = __ldxr(v303);
          while (__stxr(v304 + 1, v303));
        }
        result = (uint64_t *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v298 + 32))(v298, v8 + 4824, v544);
        v305 = *(std::runtime_error *)v562;
        *(_QWORD *)v562 = 0;
        *((_QWORD *)v8 + 588) = 0;
        *v558 = v305;
        if (!atomic_load((unint64_t *)&v305.__vftable[20]))
        {
          *v9 = 4;
          v307 = (unint64_t *)(*((_QWORD *)v8 + 402) + 480);
          do
            v308 = __ldaxr(v307);
          while (__stlxr((unint64_t)v8, v307));
          if (!v308)
            return result;
        }
        if (!LOBYTE(v558->__vftable[19].what))
          goto LABEL_798;
        v236 = (std::runtime_error *)(v8 + 2288);
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v564, (uint64_t)&v558->~runtime_error_0);
        std::optional<std::expected<AMSCore::HTTPResponseAction,AMSCore::Error>>::operator=[abi:fe180100]<AMSCore::HTTPResponseAction,void>((uint64_t)v560, (uint64_t)v564);
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v564);
        std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)v558);
        std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v562);
        std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v544);
        v309 = v8 + 4824;
LABEL_513:
        v352 = (std::__shared_weak_count *)*((_QWORD *)v309 + 1);
        if (v352)
        {
          v353 = (unint64_t *)&v352->__shared_owners_;
          do
            v354 = __ldaxr(v353);
          while (__stlxr(v354 - 1, v353));
          if (!v354)
          {
            ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
            std::__shared_weak_count::__release_weak(v352);
          }
        }
        goto LABEL_518;
      }
      goto LABEL_518;
    }
LABEL_785:
    std::terminate();
  }
  v255 = *v224;
  *((_QWORD *)v8 + 601) = *((_QWORD *)v8 + 611);
  v256 = *((_QWORD *)v8 + 612);
  *((_QWORD *)v8 + 602) = v256;
  if (v256)
  {
    v257 = (unint64_t *)(v256 + 8);
    do
      v258 = __ldxr(v257);
    while (__stxr(v258 + 1, v257));
  }
  *((_QWORD *)v8 + 595) = *((_QWORD *)v8 + 621);
  v259 = *((_QWORD *)v8 + 622);
  *((_QWORD *)v8 + 596) = v259;
  if (v259)
  {
    v260 = (unint64_t *)(v259 + 8);
    do
      v261 = __ldxr(v260);
    while (__stxr(v261 + 1, v260));
  }
  *((_QWORD *)v8 + 585) = *((_QWORD *)v8 + 561);
  v262 = *((_QWORD *)v8 + 562);
  *((_QWORD *)v8 + 586) = v262;
  if (v262)
  {
    v263 = (unint64_t *)(v262 + 8);
    do
      v264 = __ldxr(v263);
    while (__stxr(v264 + 1, v263));
  }
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, char *, char *, char *))(*(_QWORD *)v255 + 40))(v255, v8 + 4808, v8 + 4760, v8 + 4680);
  v265 = *((_OWORD *)v8 + 201);
  v558->__vftable = 0;
  *((_QWORD *)v8 + 403) = 0;
  *(_OWORD *)v562 = v265;
  if (!atomic_load((unint64_t *)(v265 + 480)))
  {
    *v9 = 1;
    v267 = (unint64_t *)(*((_QWORD *)v8 + 587) + 480);
    do
      v268 = __ldaxr(v267);
    while (__stlxr((unint64_t)v8, v267));
    if (!v268)
      return result;
  }
  if (!*(_BYTE *)(*(_QWORD *)v562 + 472))
    goto LABEL_798;
  v236 = (std::runtime_error *)(v8 + 2288);
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v564, *(_QWORD *)v562 + 8);
  if (v8[2280])
  {
    if (v8[2276])
    {
      AMSCore::HTTPResponseAction::operator=((uint64_t)v560, (uint64_t)v564);
    }
    else
    {
      (**((void (***)(std::runtime_error *))v8 + 227))(v560);
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v560, (uint64_t)v564);
      v8[2276] = 1;
    }
  }
  else
  {
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v560, (uint64_t)v564);
    v8[2276] = 1;
    v8[2280] = 1;
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v564);
  v310 = (std::__shared_weak_count *)*((_QWORD *)v8 + 588);
  if (v310)
  {
    v311 = (unint64_t *)&v310->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  v313 = (std::__shared_weak_count *)*((_QWORD *)v8 + 403);
  if (v313)
  {
    v314 = (unint64_t *)&v313->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
      std::__shared_weak_count::__release_weak(v313);
    }
  }
  v316 = (std::__shared_weak_count *)*((_QWORD *)v8 + 586);
  if (v316)
  {
    v317 = (unint64_t *)&v316->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  v319 = (std::__shared_weak_count *)*((_QWORD *)v8 + 596);
  if (v319)
  {
    v320 = (unint64_t *)&v319->__shared_owners_;
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  v322 = (std::__shared_weak_count *)*((_QWORD *)v8 + 602);
  if (v322)
  {
    v323 = (unint64_t *)&v322->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  if (v8[2280])
    v325 = v8[2276] == 0;
  else
    v325 = 1;
  if (!v325 && *((_DWORD *)v8 + 568) == 1)
  {
    v326 = **((_QWORD **)v8 + 625);
    *((_QWORD *)v8 + 589) = *((_QWORD *)v8 + 611);
    v327 = *((_QWORD *)v8 + 612);
    *((_QWORD *)v8 + 590) = v327;
    if (v327)
    {
      v328 = (unint64_t *)(v327 + 8);
      do
        v329 = __ldxr(v328);
      while (__stxr(v329 + 1, v328));
    }
    *((_QWORD *)v8 + 591) = *((_QWORD *)v8 + 621);
    v330 = *((_QWORD *)v8 + 622);
    *((_QWORD *)v8 + 592) = v330;
    if (v330)
    {
      v331 = (unint64_t *)(v330 + 8);
      do
        v332 = __ldxr(v331);
      while (__stxr(v332 + 1, v331));
    }
    *((_QWORD *)v8 + 593) = *((_QWORD *)v8 + 561);
    v333 = *((_QWORD *)v8 + 562);
    *((_QWORD *)v8 + 594) = v333;
    if (v333)
    {
      v334 = (unint64_t *)(v333 + 8);
      do
        v335 = __ldxr(v334);
      while (__stxr(v335 + 1, v334));
    }
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, char *, char *, char *))(*(_QWORD *)v326 + 32))(v326, v8 + 4712, v8 + 4728, v8 + 4744);
    v336 = *(std::runtime_error *)v562;
    *(_QWORD *)v562 = 0;
    *((_QWORD *)v8 + 588) = 0;
    *v558 = v336;
    if (!atomic_load((unint64_t *)&v336.__vftable[20]))
    {
      *v9 = 2;
      v338 = (unint64_t *)(*((_QWORD *)v8 + 402) + 480);
      do
        v339 = __ldaxr(v338);
      while (__stlxr((unint64_t)v8, v338));
      if (!v339)
        return result;
    }
    if (!LOBYTE(v558->__vftable[19].what))
      goto LABEL_798;
    v236 = (std::runtime_error *)(v8 + 2288);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v564, (uint64_t)&v558->~runtime_error_0);
    if (v8[2280])
    {
      if (v8[2276])
      {
        AMSCore::HTTPResponseAction::operator=((uint64_t)v560, (uint64_t)v564);
      }
      else
      {
        (**((void (***)(std::runtime_error *))v8 + 227))(v560);
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v560, (uint64_t)v564);
        v8[2276] = 1;
      }
    }
    else
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v560, (uint64_t)v564);
      v8[2276] = 1;
      v8[2280] = 1;
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v564);
    v340 = (std::__shared_weak_count *)*((_QWORD *)v8 + 403);
    if (v340)
    {
      v341 = (unint64_t *)&v340->__shared_owners_;
      do
        v342 = __ldaxr(v341);
      while (__stlxr(v342 - 1, v341));
      if (!v342)
      {
        ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
        std::__shared_weak_count::__release_weak(v340);
      }
    }
    v343 = (std::__shared_weak_count *)*((_QWORD *)v8 + 588);
    if (v343)
    {
      v344 = (unint64_t *)&v343->__shared_owners_;
      do
        v345 = __ldaxr(v344);
      while (__stlxr(v345 - 1, v344));
      if (!v345)
      {
        ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
        std::__shared_weak_count::__release_weak(v343);
      }
    }
    v346 = (std::__shared_weak_count *)*((_QWORD *)v8 + 594);
    if (v346)
    {
      v347 = (unint64_t *)&v346->__shared_owners_;
      do
        v348 = __ldaxr(v347);
      while (__stlxr(v348 - 1, v347));
      if (!v348)
      {
        ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
        std::__shared_weak_count::__release_weak(v346);
      }
    }
    v349 = (std::__shared_weak_count *)*((_QWORD *)v8 + 592);
    if (!v349)
      goto LABEL_511;
    v350 = (unint64_t *)&v349->__shared_owners_;
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
      v309 = v8 + 4712;
    }
    else
    {
LABEL_511:
      v309 = v8 + 4712;
    }
    goto LABEL_513;
  }
LABEL_518:
  if (!v8[1152])
    goto LABEL_798;
  AMSCore::HTTPResponse::operator=((uint64_t)v17, *((_QWORD *)v8 + 611));
  v355 = *((_QWORD *)v8 + 617);
  *((_QWORD *)v8 + 607) = *((_QWORD *)v8 + 621);
  v356 = *((_QWORD *)v8 + 622);
  *((_QWORD *)v8 + 608) = v356;
  if (v356)
  {
    v357 = (unint64_t *)(v356 + 8);
    do
      v358 = __ldxr(v357);
    while (__stxr(v358 + 1, v357));
  }
  AMSCore::LoadURLMetricsHandler::OptionsBuilder::make((uint64_t)&v642, *v566);
  v359 = *((_QWORD *)v8 + 584);
  if (!v359)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t, uint64_t *, char *, std::system_error *))(*(_QWORD *)v359 + 48))(&v623, v359, v355, v17, v8 + 4856, &v642);
  AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(&v598, (uint64_t *)&v623);
  v360 = (std::__shared_weak_count *)v598.__imp_.__imp_;
  v598.__imp_.__imp_ = 0;
  v598.__vftable = 0;
  if (v360)
  {
    v361 = (unint64_t *)&v360->__shared_owners_;
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
      std::__shared_weak_count::__release_weak(v360);
    }
  }
  v363 = (std::__shared_weak_count *)v598.__imp_.__imp_;
  if (v598.__imp_.__imp_)
  {
    v364 = (unint64_t *)(v598.__imp_.__imp_ + 8);
    do
      v365 = __ldaxr(v364);
    while (__stlxr(v365 - 1, v364));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  v366 = v623.__vftable;
  v623.__vftable = 0;
  if (v366)
    (*((void (**)(std::runtime_error_vtbl *))v366->~runtime_error + 1))(v366);
  v367 = *(std::__shared_weak_count **)&v652[0];
  if (*(_QWORD *)&v652[0])
  {
    v368 = (unint64_t *)(*(_QWORD *)&v652[0] + 8);
    do
      v369 = __ldaxr(v368);
    while (__stlxr(v369 - 1, v368));
    if (!v369)
    {
      ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
      std::__shared_weak_count::__release_weak(v367);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v650, *((unsigned int **)&v650 + 1));
  if ((_BYTE)v649)
  {
    if (SHIBYTE(v648) < 0)
    {
      operator delete(*((void **)&v647 + 1));
      if (LOBYTE(v646.__vftable))
      {
LABEL_543:
        v370 = (std::__shared_weak_count *)*((_QWORD *)v8 + 608);
        if (!v370)
          goto LABEL_551;
        goto LABEL_547;
      }
    }
    else if (LOBYTE(v646.__vftable))
    {
      goto LABEL_543;
    }
  }
  ((void (*)(std::system_error *))v642.~system_error)(&v642);
  v370 = (std::__shared_weak_count *)*((_QWORD *)v8 + 608);
  if (!v370)
    goto LABEL_551;
LABEL_547:
  v371 = (unint64_t *)&v370->__shared_owners_;
  do
    v372 = __ldaxr(v371);
  while (__stlxr(v372 - 1, v371));
  if (!v372)
  {
    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
    std::__shared_weak_count::__release_weak(v370);
  }
LABEL_551:
  if (!v8[2280])
    goto LABEL_798;
  if (!v8[2276])
  {
    std::runtime_error::runtime_error(v236, v560);
    *((_OWORD *)v8 + 144) = *(_OWORD *)(v8 + 1832);
    *((_QWORD *)v8 + 286) = off_1E2521330;
    *((_QWORD *)v8 + 290) = *((_QWORD *)v8 + 231);
    v539 = v8 + 2328;
    v540 = *((_QWORD *)v8 + 232);
    *((_QWORD *)v8 + 291) = v540;
    v541 = *((_QWORD *)v8 + 233);
    *((_QWORD *)v8 + 292) = v541;
    if (v541)
    {
      *(_QWORD *)(v540 + 16) = v539;
      *((_QWORD *)v8 + 231) = v8 + 1856;
      *((_QWORD *)v8 + 232) = 0;
      *((_QWORD *)v8 + 233) = 0;
    }
    else
    {
      *((_QWORD *)v8 + 290) = v539;
    }
    *(_OWORD *)(v8 + 2344) = *((_OWORD *)v8 + 117);
    *((_QWORD *)v8 + 235) = 0;
    *((_QWORD *)v8 + 234) = 0;
    v8[2748] = 0;
    __break(1u);
    JUMPOUT(0x18CD093D0);
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v236, (uint64_t)v560);
  v8[2748] = 1;
  v373 = *((_DWORD *)v8 + 686);
  if ((v373 - 2) >= 2)
  {
    if (v373)
    {
      if (!v8[1152])
        goto LABEL_798;
      AMSCore::HTTPResponse::HTTPResponse((uint64_t)v546, (__int128 *)v17);
      *((_QWORD *)v8 + 619) = *((_QWORD *)v8 + 621);
      v385 = *((_QWORD *)v8 + 622);
      *((_QWORD *)v8 + 620) = v385;
      if (v385)
      {
        v386 = (unint64_t *)(v385 + 8);
        do
          v387 = __ldxr(v386);
        while (__stxr(v387 + 1, v386));
      }
      *v543 = *(_OWORD *)v566;
      *(_OWORD *)v566 = 0u;
      v388 = *((_QWORD *)v8 + 563);
      v389 = *((_QWORD *)v8 + 564);
      *(_OWORD *)(v8 + 4504) = 0u;
      *((_QWORD *)v8 + 571) = v388;
      *((_QWORD *)v8 + 572) = v389;
      v390 = *((_QWORD *)v8 + 565);
      *((_QWORD *)v8 + 573) = v390;
      v391 = *((_QWORD *)v8 + 566);
      *((_QWORD *)v8 + 574) = v391;
      *((_DWORD *)v8 + 1150) = *((_DWORD *)v8 + 1134);
      if (v391)
      {
        v392 = *(_QWORD *)(v390 + 8);
        if ((v389 & (v389 - 1)) != 0)
        {
          if (v392 >= v389)
            v392 %= v389;
        }
        else
        {
          v392 &= v389 - 1;
        }
        *(_QWORD *)(v388 + 8 * v392) = v8 + 4584;
        *v545 = 0;
        *((_QWORD *)v8 + 566) = 0;
      }
      *((_WORD *)v8 + 2304) = *((_WORD *)v8 + 2272);
      v430 = *v547;
      v547->__vftable = 0;
      *((_QWORD *)v8 + 610) = 0;
      *(std::runtime_error *)v562 = v430;
      if (!atomic_load((unint64_t *)&v430.__vftable[9]))
      {
        *v9 = 6;
        v432 = (unint64_t *)(*((_QWORD *)v8 + 587) + 216);
        do
          v433 = __ldaxr(v432);
        while (__stlxr((unint64_t)v8, v432));
        if (!v433)
          return result;
      }
      v553 = (uint64_t)v21;
      v434 = *(_QWORD *)v562;
      if (!*(_BYTE *)(*(_QWORD *)v562 + 208))
        goto LABEL_798;
      *((_OWORD *)v8 + 201) = *(_OWORD *)(v434 + 8);
      *(_QWORD *)(v434 + 8) = 0;
      *(_QWORD *)(v434 + 16) = 0;
      *((_QWORD *)v8 + 404) = *(_QWORD *)(v434 + 24);
      v435 = v8 + 3240;
      v436 = (_QWORD *)(v434 + 32);
      v437 = *(_QWORD *)(v434 + 32);
      *((_QWORD *)v8 + 405) = v437;
      v438 = *(_QWORD *)(v434 + 40);
      *((_QWORD *)v8 + 406) = v438;
      v439 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v8 + 3232);
      if (v438)
      {
        *(_QWORD *)(v437 + 16) = v435;
        *(_QWORD *)(v434 + 24) = v436;
        *v436 = 0;
        *(_QWORD *)(v434 + 40) = 0;
      }
      else
      {
        *((_QWORD *)v8 + 404) = v435;
      }
      *(_OWORD *)(v8 + 3256) = *(_OWORD *)(v434 + 48);
      *(_QWORD *)(v434 + 48) = 0;
      *(_QWORD *)(v434 + 56) = 0;
      *(_OWORD *)(v8 + 3272) = *(_OWORD *)(v434 + 64);
      *(_QWORD *)(v434 + 64) = 0;
      *(_QWORD *)(v434 + 72) = 0;
      v440 = v8 + 3288;
      v8[3288] = 0;
      v8[3312] = 0;
      if (*(_BYTE *)(v434 + 104))
      {
        v441 = *(_OWORD *)(v434 + 80);
        *((_QWORD *)v8 + 413) = *(_QWORD *)(v434 + 96);
        *v440 = v441;
        *(_QWORD *)(v434 + 88) = 0;
        *(_QWORD *)(v434 + 96) = 0;
        *(_QWORD *)(v434 + 80) = 0;
        v8[3312] = 1;
      }
      v8[3320] = 0;
      *((_DWORD *)v8 + 834) = -1;
      v442 = *(unsigned int *)(v434 + 128);
      if ((_DWORD)v442 != -1)
      {
        ((void (*)(std::system_error *, char *, uint64_t))off_1E253CA98[v442])(&v642, v8 + 3320, v434 + 112);
        *((_DWORD *)v8 + 834) = v442;
      }
      v443 = *(_OWORD *)(v434 + 136);
      *((_DWORD *)v8 + 840) = *(_DWORD *)(v434 + 152);
      *((_OWORD *)v8 + 209) = v443;
      v444 = v8 + 3368;
      v445 = (_QWORD *)(v434 + 184);
      v446 = *(_QWORD *)(v434 + 184);
      v568 = (void **)(v8 + 4584);
      if (v446)
      {
        if (v446 == v434 + 160)
        {
          *((_QWORD *)v8 + 424) = v444;
          (*(void (**)(_QWORD, char *))(*(_QWORD *)*v445 + 24))(*v445, v8 + 3368);
        }
        else
        {
          *((_QWORD *)v8 + 424) = v446;
          *v445 = 0;
        }
      }
      else
      {
        *((_QWORD *)v8 + 424) = 0;
      }
      v512 = (__int128 *)(v8 + 3256);
      v513 = (__int128 *)(v8 + 3272);
      *(_OWORD *)(v8 + 3400) = *(_OWORD *)(v434 + 192);
      *(_QWORD *)(v434 + 192) = 0;
      *(_QWORD *)(v434 + 200) = 0;
      std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](v553);
      v514 = *((_QWORD *)v8 + 405);
      *((_QWORD *)v8 + 6) = v514;
      v515 = v8 + 48;
      *(_OWORD *)(v8 + 24) = *((_OWORD *)v8 + 201);
      v558->__vftable = 0;
      *((_QWORD *)v8 + 403) = 0;
      *((_QWORD *)v8 + 5) = *((_QWORD *)v8 + 404);
      v516 = *((_QWORD *)v8 + 406);
      *((_QWORD *)v8 + 7) = v516;
      if (v516)
      {
        *(_QWORD *)(v514 + 16) = v515;
        *(_QWORD *)v439 = v435;
        *v435 = 0;
        *((_QWORD *)v8 + 406) = 0;
      }
      else
      {
        *((_QWORD *)v8 + 5) = v515;
      }
      v517 = *v512;
      v8[96] = 0;
      *(_QWORD *)v512 = 0;
      *((_QWORD *)v8 + 408) = 0;
      v518 = *v513;
      *((_OWORD *)v8 + 4) = v517;
      *((_OWORD *)v8 + 5) = v518;
      *(_QWORD *)v513 = 0;
      *((_QWORD *)v8 + 410) = 0;
      v8[120] = 0;
      if (v8[3312])
      {
        *((_OWORD *)v8 + 6) = *v440;
        *((_QWORD *)v8 + 14) = *((_QWORD *)v8 + 413);
        *((_QWORD *)v8 + 412) = 0;
        *((_QWORD *)v8 + 413) = 0;
        *(_QWORD *)v440 = 0;
        v8[120] = 1;
      }
      v8[128] = 0;
      *((_DWORD *)v8 + 36) = -1;
      v519 = *((unsigned int *)v8 + 834);
      v9 = v8 + 5016;
      if ((_DWORD)v519 != -1)
      {
        ((void (*)(std::system_error *))off_1E253CA98[v519])(&v642);
        *((_DWORD *)v8 + 36) = v519;
      }
      *(_OWORD *)(v8 + 152) = *((_OWORD *)v8 + 209);
      *((_DWORD *)v8 + 42) = *((_DWORD *)v8 + 840);
      v520 = (char *)*((_QWORD *)v8 + 424);
      if (v520)
      {
        v17 = (uint64_t *)(v8 + 496);
        if (v520 == v444)
        {
          *((_QWORD *)v8 + 25) = v8 + 176;
          (*(void (**)(char *))(*((_QWORD *)v8 + 421) + 24))(v8 + 3368);
        }
        else
        {
          *((_QWORD *)v8 + 25) = v520;
          *((_QWORD *)v8 + 424) = 0;
        }
      }
      else
      {
        v17 = (uint64_t *)(v8 + 496);
        *((_QWORD *)v8 + 25) = 0;
      }
      *((_OWORD *)v8 + 13) = *(_OWORD *)(v8 + 3400);
      *((_QWORD *)v8 + 425) = 0;
      *((_QWORD *)v8 + 426) = 0;
      v8[440] = 1;
      v8[448] = 1;
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v439);
      v521 = (std::__shared_weak_count *)*((_QWORD *)v8 + 403);
      if (v521)
      {
        v522 = (unint64_t *)&v521->__shared_owners_;
        do
          v523 = __ldaxr(v522);
        while (__stlxr(v523 - 1, v522));
        if (!v523)
        {
          ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
          std::__shared_weak_count::__release_weak(v521);
        }
      }
      v524 = (std::__shared_weak_count *)*((_QWORD *)v8 + 588);
      if (v524)
      {
        v525 = (unint64_t *)&v524->__shared_owners_;
        do
          v526 = __ldaxr(v525);
        while (__stlxr(v526 - 1, v525));
        if (!v526)
        {
          ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
          std::__shared_weak_count::__release_weak(v524);
        }
      }
      v527 = (std::__shared_weak_count *)*((_QWORD *)v8 + 610);
      if (v527)
      {
        v528 = (unint64_t *)&v527->__shared_owners_;
        do
          v529 = __ldaxr(v528);
        while (__stlxr(v529 - 1, v528));
        if (!v529)
        {
          ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
          std::__shared_weak_count::__release_weak(v527);
        }
      }
      v530 = (void **)*v568;
      if (*v568)
      {
        do
        {
          v538 = (void **)*v530;
          if (*((char *)v530 + 39) < 0)
            operator delete(v530[2]);
          operator delete(v530);
          v530 = v538;
        }
        while (v538);
      }
      v531 = (void *)*((_QWORD *)v8 + 571);
      *((_QWORD *)v8 + 571) = 0;
      if (v531)
        operator delete(v531);
      v532 = (std::__shared_weak_count *)*((_QWORD *)v8 + 570);
      v429 = (AMSCore::HTTPResponseAction *)(v8 + 2288);
      if (v532)
      {
        v533 = (unint64_t *)&v532->__shared_owners_;
        do
          v534 = __ldaxr(v533);
        while (__stlxr(v534 - 1, v533));
        if (!v534)
        {
          ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
          std::__shared_weak_count::__release_weak(v532);
        }
      }
      v535 = (std::__shared_weak_count *)*((_QWORD *)v8 + 620);
      if (v535)
      {
        v536 = (unint64_t *)&v535->__shared_owners_;
        do
          v537 = __ldaxr(v536);
        while (__stlxr(v537 - 1, v536));
        if (!v537)
        {
          ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
          std::__shared_weak_count::__release_weak(v535);
        }
      }
      AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)v546);
      if (!v8[2748])
        goto LABEL_621;
    }
    else
    {
      if (!v8[1152])
        goto LABEL_798;
      AMSCore::HTTPTransactionMetrics::HTTPTransactionMetrics((std::string *)&v598, (const AMSCore::HTTPTransactionMetrics *)(v8 + 720));
      if (!v8[2748])
        goto LABEL_798;
      AMSCore::Unexpected<AMSCore::HTTPError,AMSCore::HTTPTransactionMetrics,AMSCore::Error>(&v623, (uint64_t)&v598, &v642);
      std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)v21);
      std::runtime_error::runtime_error(v21, &v642);
      v380 = v642.__ec_;
      v381 = *((_QWORD *)&v643 + 1);
      v382 = v643;
      *((_QWORD *)v8 + 8) = *((_QWORD *)&v643 + 1);
      v383 = v8 + 64;
      *(std::error_code *)(v8 + 40) = v380;
      *((_QWORD *)v8 + 3) = off_1E2521330;
      *((_QWORD *)v8 + 7) = v382;
      v384 = v644;
      *((_QWORD *)v8 + 9) = v644;
      if (v384)
      {
        *(_QWORD *)(v381 + 16) = v383;
        *(_QWORD *)&v643 = (char *)&v643 + 8;
        *((_QWORD *)&v643 + 1) = 0;
        v644 = 0;
      }
      else
      {
        *((_QWORD *)v8 + 7) = v383;
      }
      v415 = v645;
      v8[96] = 0;
      *((_OWORD *)v8 + 5) = v415;
      v645 = 0uLL;
      *((_QWORD *)v8 + 3) = &off_1E2521420;
      v8[120] = 0;
      if (BYTE8(v647))
      {
        *((std::runtime_error *)v8 + 6) = v646;
        *((_QWORD *)v8 + 14) = v647;
        *(_QWORD *)&v647 = 0;
        v646 = (std::runtime_error)0;
        v8[120] = 1;
      }
      v416 = v651;
      *((_OWORD *)v8 + 10) = v650;
      *((_OWORD *)v8 + 11) = v416;
      *((_OWORD *)v8 + 12) = v652[0];
      *(_OWORD *)(v8 + 201) = *(_OWORD *)((char *)v652 + 9);
      v417 = v649;
      *((_OWORD *)v8 + 8) = v648;
      *((_OWORD *)v8 + 9) = v417;
      *((_OWORD *)v8 + 14) = v653;
      v418 = v661;
      v419 = v663[0];
      *(_OWORD *)(v8 + 360) = v662;
      *(_OWORD *)(v8 + 376) = v419;
      *(_OWORD *)(v8 + 386) = *(_OWORD *)((char *)v663 + 10);
      v420 = v658;
      *(_OWORD *)(v8 + 280) = v657;
      *(_OWORD *)(v8 + 296) = v420;
      v421 = v660;
      *(_OWORD *)(v8 + 312) = v659;
      *(_OWORD *)(v8 + 328) = v421;
      *(_OWORD *)(v8 + 344) = v418;
      v422 = v656;
      *(_OWORD *)(v8 + 248) = v655;
      *((_QWORD *)v8 + 30) = v654;
      v653 = 0uLL;
      v654 = 0;
      *(_OWORD *)(v8 + 264) = v422;
      v8[408] = 0;
      v8[432] = 0;
      if (v666)
      {
        *(_OWORD *)(v8 + 408) = v664;
        *((_QWORD *)v8 + 53) = v665;
        v665 = 0;
        v664 = 0uLL;
        v8[432] = 1;
      }
      v8[440] = 0;
      v8[448] = 1;
      AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v642);
      v623.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v423 = *(std::__shared_weak_count **)&v626[16];
      if (*(_QWORD *)&v626[16])
      {
        v424 = (unint64_t *)(*(_QWORD *)&v626[16] + 8);
        do
          v425 = __ldaxr(v424);
        while (__stlxr(v425 - 1, v424));
        if (!v425)
        {
          ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
          std::__shared_weak_count::__release_weak(v423);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v625, *((unsigned int **)&v625 + 1));
      MEMORY[0x18D7898AC](&v623);
      if ((_BYTE)v618 && SHIBYTE(v617) < 0)
        operator delete(*((void **)&v616 + 1));
      v426 = *((_QWORD *)&v605 + 1);
      if (*((_QWORD *)&v605 + 1))
      {
        v427 = v606;
        v428 = (void *)*((_QWORD *)&v605 + 1);
        if ((_QWORD)v606 != *((_QWORD *)&v605 + 1))
        {
          do
          {
            if (*(char *)(v427 - 1) < 0)
              operator delete(*(void **)(v427 - 24));
            v427 -= 24;
          }
          while (v427 != v426);
          v428 = (void *)*((_QWORD *)&v605 + 1);
        }
        *(_QWORD *)&v606 = v426;
        operator delete(v428);
      }
      if (LOBYTE(v598.__ec_.__cat_) && *((char *)&v598.__ec_.__val_ + 7) < 0)
        operator delete(v598.__vftable);
      v429 = (AMSCore::HTTPResponseAction *)(v8 + 2288);
      if (!v8[2748])
        goto LABEL_621;
    }
LABEL_711:
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v429);
    if (!v8[2280])
      goto LABEL_714;
LABEL_712:
    if (!v8[2276])
    {
      ((void (*)(std::runtime_error *))v560->~runtime_error)(v560);
      v502 = (std::__shared_weak_count *)*((_QWORD *)v8 + 612);
      if (!v502)
        goto LABEL_723;
      goto LABEL_715;
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v560);
LABEL_714:
    v502 = (std::__shared_weak_count *)*((_QWORD *)v8 + 612);
    if (!v502)
      goto LABEL_723;
LABEL_715:
    v503 = (unint64_t *)&v502->__shared_owners_;
    do
      v504 = __ldaxr(v503);
    while (__stlxr(v504 - 1, v503));
    if (!v504)
    {
      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
      std::__shared_weak_count::__release_weak(v502);
    }
    goto LABEL_723;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v551, (uint64_t)v236);
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v550, (uint64_t)(v8 + 3640));
  *(_OWORD *)(v8 + 4408) = *((_OWORD *)v8 + 251);
  *(_OWORD *)v554 = 0u;
  *(_OWORD *)(v8 + 4424) = *(_OWORD *)(v8 + 4488);
  *(_OWORD *)v566 = 0u;
  v374 = *((_QWORD *)v8 + 563);
  v375 = *((_QWORD *)v8 + 564);
  *(_OWORD *)(v8 + 4504) = 0u;
  *((_QWORD *)v8 + 555) = v374;
  *((_QWORD *)v8 + 556) = v375;
  v376 = (void **)(v8 + 4456);
  v377 = *((_QWORD *)v8 + 565);
  *((_QWORD *)v8 + 557) = v377;
  v378 = *((_QWORD *)v8 + 566);
  *((_QWORD *)v8 + 558) = v378;
  *((_DWORD *)v8 + 1118) = *((_DWORD *)v8 + 1134);
  if (v378)
  {
    v379 = *(_QWORD *)(v377 + 8);
    if ((v375 & (v375 - 1)) != 0)
    {
      if (v379 >= v375)
        v379 %= v375;
    }
    else
    {
      v379 &= v375 - 1;
    }
    *(_QWORD *)(v374 + 8 * v379) = v376;
    *v545 = 0;
    *((_QWORD *)v8 + 566) = 0;
  }
  *((_WORD *)v8 + 2240) = *((_WORD *)v8 + 2272);
  v393 = (char *)*((_QWORD *)v8 + 584);
  if (v393)
  {
    if (v393 == v555)
    {
      *((_QWORD *)v8 + 580) = v549;
      (*(void (**)(void))(*((_QWORD *)v8 + 581) + 24))();
    }
    else
    {
      *((_QWORD *)v8 + 580) = v393;
      *((_QWORD *)v8 + 584) = 0;
    }
  }
  else
  {
    *((_QWORD *)v8 + 580) = 0;
  }
  v394 = *v547;
  v547->__vftable = 0;
  *((_QWORD *)v8 + 610) = 0;
  *(std::runtime_error *)v562 = v394;
  if (atomic_load((unint64_t *)&v394.__vftable[18].~runtime_error_0))
    goto LABEL_581;
  *v9 = 5;
  v396 = (unint64_t *)(*((_QWORD *)v8 + 587) + 440);
  do
    v397 = __ldaxr(v396);
  while (__stlxr((unint64_t)v8, v396));
  if (v397)
  {
LABEL_581:
    v398 = *(_QWORD *)v562;
    if (*(_BYTE *)(*(_QWORD *)v562 + 432))
    {
      v399 = (const std::runtime_error *)(v398 + 8);
      v400 = *(_BYTE *)(v398 + 424);
      if (v400)
      {
        *((_OWORD *)v8 + 201) = *(_OWORD *)(v398 + 8);
        v399->__vftable = 0;
        *(_QWORD *)(v398 + 16) = 0;
        *((_QWORD *)v8 + 404) = *(_QWORD *)(v398 + 24);
        v401 = v8 + 3240;
        v402 = (_QWORD *)(v398 + 32);
        v403 = *(_QWORD *)(v398 + 32);
        *((_QWORD *)v8 + 405) = v403;
        v404 = *(_QWORD *)(v398 + 40);
        *((_QWORD *)v8 + 406) = v404;
        if (v404)
        {
          *(_QWORD *)(v403 + 16) = v401;
          *(_QWORD *)(v398 + 24) = v402;
          *v402 = 0;
          *(_QWORD *)(v398 + 40) = 0;
        }
        else
        {
          *((_QWORD *)v8 + 404) = v401;
        }
        v409 = v8 + 4616;
        *(_OWORD *)(v8 + 3256) = *(_OWORD *)(v398 + 48);
        *(_QWORD *)(v398 + 48) = 0;
        *(_QWORD *)(v398 + 56) = 0;
        *(_OWORD *)(v8 + 3272) = *(_OWORD *)(v398 + 64);
        *(_QWORD *)(v398 + 64) = 0;
        *(_QWORD *)(v398 + 72) = 0;
        v8[3288] = 0;
        v8[3312] = 0;
        if (*(_BYTE *)(v398 + 104))
        {
          v410 = *(_OWORD *)(v398 + 80);
          *((_QWORD *)v8 + 413) = *(_QWORD *)(v398 + 96);
          *(_OWORD *)(v8 + 3288) = v410;
          *(_QWORD *)(v398 + 88) = 0;
          *(_QWORD *)(v398 + 96) = 0;
          *(_QWORD *)(v398 + 80) = 0;
          v8[3312] = 1;
        }
        v8[3320] = 0;
        *((_DWORD *)v8 + 834) = -1;
        v411 = *(unsigned int *)(v398 + 128);
        if ((_DWORD)v411 != -1)
        {
          ((void (*)(std::system_error *, char *, uint64_t))off_1E253CA98[v411])(&v642, v8 + 3320, v398 + 112);
          *((_DWORD *)v8 + 834) = v411;
        }
        v412 = *(_OWORD *)(v398 + 136);
        *((_DWORD *)v8 + 840) = *(_DWORD *)(v398 + 152);
        *((_OWORD *)v8 + 209) = v412;
        v413 = (_QWORD *)(v398 + 184);
        v414 = *(_QWORD *)(v398 + 184);
        if (v414)
        {
          v17 = (uint64_t *)(v8 + 496);
          if (v414 == v398 + 160)
          {
            *((_QWORD *)v8 + 424) = v8 + 3368;
            (*(void (**)(_QWORD))(*(_QWORD *)*v413 + 24))(*v413);
          }
          else
          {
            *((_QWORD *)v8 + 424) = v414;
            *v413 = 0;
          }
        }
        else
        {
          v17 = (uint64_t *)(v8 + 496);
          *((_QWORD *)v8 + 424) = 0;
        }
        *(_OWORD *)(v8 + 3400) = *(_OWORD *)(v398 + 192);
        *(_QWORD *)(v398 + 192) = 0;
        *(_QWORD *)(v398 + 200) = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v558, v399);
        *((_QWORD *)v8 + 402) = MEMORY[0x1E0DE4F90] + 16;
        *((_OWORD *)v8 + 202) = *(_OWORD *)(v398 + 24);
        *((_QWORD *)v8 + 402) = off_1E2521330;
        *((_QWORD *)v8 + 406) = *(_QWORD *)(v398 + 40);
        v405 = v8 + 3256;
        v406 = (_QWORD *)(v398 + 48);
        v407 = *(_QWORD *)(v398 + 48);
        *((_QWORD *)v8 + 407) = v407;
        v408 = *(_QWORD *)(v398 + 56);
        *((_QWORD *)v8 + 408) = v408;
        if (v408)
        {
          *(_QWORD *)(v407 + 16) = v405;
          *(_QWORD *)(v398 + 40) = v406;
          *v406 = 0;
          *(_QWORD *)(v398 + 56) = 0;
        }
        else
        {
          *((_QWORD *)v8 + 406) = v405;
        }
        v409 = v8 + 4616;
        *(_OWORD *)(v8 + 3272) = *(_OWORD *)(v398 + 64);
        *(_QWORD *)(v398 + 64) = 0;
        *(_QWORD *)(v398 + 72) = 0;
        *((_QWORD *)v8 + 402) = &off_1E2521420;
        v8[3288] = 0;
        v8[3312] = 0;
        if (*(_BYTE *)(v398 + 104))
        {
          v447 = *(_OWORD *)(v398 + 80);
          *((_QWORD *)v8 + 413) = *(_QWORD *)(v398 + 96);
          *(_OWORD *)(v8 + 3288) = v447;
          *(_QWORD *)(v398 + 88) = 0;
          *(_QWORD *)(v398 + 96) = 0;
          *(_QWORD *)(v398 + 80) = 0;
          v8[3312] = 1;
        }
        v448 = *(_OWORD *)(v398 + 112);
        *(_OWORD *)(v8 + 3336) = *(_OWORD *)(v398 + 128);
        *(_OWORD *)(v8 + 3320) = v448;
        v449 = *(_OWORD *)(v398 + 144);
        v450 = *(_OWORD *)(v398 + 160);
        v451 = *(_OWORD *)(v398 + 176);
        *(_OWORD *)(v8 + 3393) = *(_OWORD *)(v398 + 185);
        *(_OWORD *)(v8 + 3384) = v451;
        *(_OWORD *)(v8 + 3368) = v450;
        *(_OWORD *)(v8 + 3352) = v449;
        *((_QWORD *)v8 + 428) = 0;
        *((_QWORD *)v8 + 429) = 0;
        *v548 = 0;
        *(_OWORD *)v548 = *(_OWORD *)(v398 + 208);
        *((_QWORD *)v8 + 429) = *(_QWORD *)(v398 + 224);
        *(_QWORD *)(v398 + 216) = 0;
        *(_QWORD *)(v398 + 224) = 0;
        *(_QWORD *)(v398 + 208) = 0;
        v452 = *(_OWORD *)(v398 + 232);
        *((_OWORD *)v8 + 216) = *(_OWORD *)(v398 + 248);
        *((_OWORD *)v8 + 215) = v452;
        v453 = *(_OWORD *)(v398 + 264);
        v454 = *(_OWORD *)(v398 + 280);
        v455 = *(_OWORD *)(v398 + 296);
        *((_OWORD *)v8 + 220) = *(_OWORD *)(v398 + 312);
        *((_OWORD *)v8 + 219) = v455;
        *((_OWORD *)v8 + 218) = v454;
        *((_OWORD *)v8 + 217) = v453;
        v456 = *(_OWORD *)(v398 + 328);
        v457 = *(_OWORD *)(v398 + 344);
        v458 = *(_OWORD *)(v398 + 360);
        *(_OWORD *)(v8 + 3578) = *(_OWORD *)(v398 + 370);
        *((_OWORD *)v8 + 223) = v458;
        *((_OWORD *)v8 + 222) = v457;
        *((_OWORD *)v8 + 221) = v456;
        v8[3600] = 0;
        v8[3624] = 0;
        if (*(_BYTE *)(v398 + 416))
        {
          v459 = *(_OWORD *)(v398 + 392);
          *((_QWORD *)v8 + 452) = *(_QWORD *)(v398 + 408);
          *((_OWORD *)v8 + 225) = v459;
          *(_QWORD *)(v398 + 400) = 0;
          *(_QWORD *)(v398 + 408) = 0;
          *(_QWORD *)(v398 + 392) = 0;
          v8[3624] = 1;
        }
      }
      v8[3632] = v400;
      std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)v21);
      v460 = v8[3632];
      if (v460)
      {
        v461 = *((_QWORD *)v8 + 405);
        *((_QWORD *)v8 + 6) = v461;
        v462 = v8 + 48;
        *(_OWORD *)(v8 + 24) = *((_OWORD *)v8 + 201);
        v463 = (void (***)(_QWORD))(v8 + 3216);
        v558->__vftable = 0;
        *((_QWORD *)v8 + 403) = 0;
        *((_QWORD *)v8 + 5) = *((_QWORD *)v8 + 404);
        v464 = *((_QWORD *)v8 + 406);
        *((_QWORD *)v8 + 7) = v464;
        if (v464)
        {
          *(_QWORD *)(v461 + 16) = v462;
          *((_QWORD *)v8 + 404) = v8 + 3240;
          *((_QWORD *)v8 + 405) = 0;
          *((_QWORD *)v8 + 406) = 0;
        }
        else
        {
          *((_QWORD *)v8 + 5) = v462;
        }
        v469 = *(_OWORD *)(v8 + 3256);
        v8[96] = 0;
        *(_OWORD *)(v8 + 3256) = 0u;
        v470 = *(_OWORD *)(v8 + 3272);
        *((_OWORD *)v8 + 4) = v469;
        *((_OWORD *)v8 + 5) = v470;
        *(_OWORD *)(v8 + 3272) = 0u;
        v8[120] = 0;
        if (v8[3312])
        {
          *((_QWORD *)v8 + 14) = *((_QWORD *)v8 + 413);
          *((_OWORD *)v8 + 6) = *(_OWORD *)(v8 + 3288);
          *((_QWORD *)v8 + 413) = 0;
          *((_QWORD *)v8 + 411) = 0;
          *((_QWORD *)v8 + 412) = 0;
          v8[120] = 1;
        }
        v8[128] = 0;
        *((_DWORD *)v8 + 36) = -1;
        v471 = *((unsigned int *)v8 + 834);
        if ((_DWORD)v471 != -1)
        {
          ((void (*)(std::system_error *))off_1E253CA98[v471])(&v642);
          *((_DWORD *)v8 + 36) = v471;
        }
        *(_OWORD *)(v8 + 152) = *((_OWORD *)v8 + 209);
        *((_DWORD *)v8 + 42) = *((_DWORD *)v8 + 840);
        v472 = (char *)*((_QWORD *)v8 + 424);
        if (v472)
        {
          if (v472 == v8 + 3368)
          {
            *((_QWORD *)v8 + 25) = v8 + 176;
            (*(void (**)(char *))(*((_QWORD *)v8 + 421) + 24))(v8 + 3368);
          }
          else
          {
            *((_QWORD *)v8 + 25) = v472;
            *((_QWORD *)v8 + 424) = 0;
          }
        }
        else
        {
          *((_QWORD *)v8 + 25) = 0;
        }
        *((_OWORD *)v8 + 13) = *(_OWORD *)(v8 + 3400);
        *(_OWORD *)(v8 + 3400) = 0u;
      }
      else
      {
        v465 = v21;
        v463 = (void (***)(_QWORD))(v8 + 3216);
        std::runtime_error::runtime_error(v465, v558);
        v466 = *((_QWORD *)v8 + 407);
        *((_QWORD *)v8 + 8) = v466;
        v467 = v8 + 64;
        *(_OWORD *)(v8 + 40) = *((_OWORD *)v8 + 202);
        *((_QWORD *)v8 + 3) = off_1E2521330;
        *((_QWORD *)v8 + 7) = *((_QWORD *)v8 + 406);
        v468 = *((_QWORD *)v8 + 408);
        *((_QWORD *)v8 + 9) = v468;
        if (v468)
        {
          *(_QWORD *)(v466 + 16) = v467;
          *((_QWORD *)v8 + 406) = v8 + 3256;
          *((_QWORD *)v8 + 407) = 0;
          *((_QWORD *)v8 + 408) = 0;
        }
        else
        {
          *((_QWORD *)v8 + 7) = v467;
        }
        v473 = *(_OWORD *)(v8 + 3272);
        v8[96] = 0;
        *((_OWORD *)v8 + 5) = v473;
        *(_OWORD *)(v8 + 3272) = 0u;
        *((_QWORD *)v8 + 3) = &off_1E2521420;
        v8[120] = 0;
        if (v8[3312])
        {
          *((_QWORD *)v8 + 14) = *((_QWORD *)v8 + 413);
          *((_OWORD *)v8 + 6) = *(_OWORD *)(v8 + 3288);
          *((_QWORD *)v8 + 413) = 0;
          *((_QWORD *)v8 + 411) = 0;
          *((_QWORD *)v8 + 412) = 0;
          v8[120] = 1;
        }
        v474 = *(_OWORD *)(v8 + 3368);
        *((_OWORD *)v8 + 10) = *(_OWORD *)(v8 + 3352);
        *((_OWORD *)v8 + 11) = v474;
        *((_OWORD *)v8 + 12) = *(_OWORD *)(v8 + 3384);
        *(_OWORD *)(v8 + 201) = *(_OWORD *)(v8 + 3393);
        v475 = *(_OWORD *)(v8 + 3336);
        *((_OWORD *)v8 + 8) = *(_OWORD *)(v8 + 3320);
        *((_OWORD *)v8 + 9) = v475;
        *((_OWORD *)v8 + 14) = *(_OWORD *)v548;
        *((_QWORD *)v8 + 30) = *((_QWORD *)v8 + 429);
        *v548 = 0;
        *((_QWORD *)v8 + 428) = 0;
        *((_QWORD *)v8 + 429) = 0;
        v476 = *((_OWORD *)v8 + 221);
        v477 = *((_OWORD *)v8 + 223);
        *(_OWORD *)(v8 + 360) = *((_OWORD *)v8 + 222);
        *(_OWORD *)(v8 + 376) = v477;
        *(_OWORD *)(v8 + 386) = *(_OWORD *)(v8 + 3578);
        v478 = *((_OWORD *)v8 + 218);
        *(_OWORD *)(v8 + 280) = *((_OWORD *)v8 + 217);
        *(_OWORD *)(v8 + 296) = v478;
        v479 = *((_OWORD *)v8 + 220);
        *(_OWORD *)(v8 + 312) = *((_OWORD *)v8 + 219);
        *(_OWORD *)(v8 + 328) = v479;
        *(_OWORD *)(v8 + 344) = v476;
        *(_OWORD *)(v8 + 248) = *((_OWORD *)v8 + 215);
        *(_OWORD *)(v8 + 264) = *((_OWORD *)v8 + 216);
        v8[408] = 0;
        v8[432] = 0;
        if (v8[3624])
        {
          *(_OWORD *)(v8 + 408) = *((_OWORD *)v8 + 225);
          *((_QWORD *)v8 + 53) = *((_QWORD *)v8 + 452);
          *((_QWORD *)v8 + 450) = 0;
          *((_QWORD *)v8 + 452) = 0;
          *((_QWORD *)v8 + 451) = 0;
          v8[432] = 1;
        }
      }
      v8[440] = v460;
      v8[448] = 1;
      if (v8[3632])
      {
        v480 = (std::__shared_weak_count *)*((_QWORD *)v8 + 426);
        if (v480)
        {
          v481 = (unint64_t *)&v480->__shared_owners_;
          do
            v482 = __ldaxr(v481);
          while (__stlxr(v482 - 1, v481));
          if (!v482)
          {
            ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
            std::__shared_weak_count::__release_weak(v480);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v8 + 3232));
        v483 = (std::__shared_weak_count *)*((_QWORD *)v8 + 403);
        if (v483)
        {
          v484 = (unint64_t *)&v483->__shared_owners_;
          do
            v485 = __ldaxr(v484);
          while (__stlxr(v485 - 1, v484));
          if (!v485)
          {
            ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
            std::__shared_weak_count::__release_weak(v483);
          }
        }
      }
      else
      {
        (**v463)(v463);
      }
      v486 = (std::__shared_weak_count *)*((_QWORD *)v8 + 588);
      if (v486)
      {
        v487 = (unint64_t *)&v486->__shared_owners_;
        do
          v488 = __ldaxr(v487);
        while (__stlxr(v488 - 1, v487));
        if (!v488)
        {
          ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
          std::__shared_weak_count::__release_weak(v486);
        }
      }
      v489 = (std::__shared_weak_count *)*((_QWORD *)v8 + 610);
      if (v489)
      {
        v490 = (unint64_t *)&v489->__shared_owners_;
        do
          v491 = __ldaxr(v490);
        while (__stlxr(v491 - 1, v490));
        if (!v491)
        {
          ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
          std::__shared_weak_count::__release_weak(v489);
        }
      }
      v492 = (_QWORD *)*((_QWORD *)v8 + 580);
      if (v492 == v409)
      {
        v493 = 4;
      }
      else
      {
        if (!v492)
          goto LABEL_697;
        v493 = 5;
        v409 = (_QWORD *)*((_QWORD *)v8 + 580);
      }
      (*(void (**)(_QWORD *))(*v409 + 8 * v493))(v409);
LABEL_697:
      v494 = (void **)*v376;
      if (*v376)
      {
        do
        {
          v505 = (void **)*v494;
          if (*((char *)v494 + 39) < 0)
            operator delete(v494[2]);
          operator delete(v494);
          v494 = v505;
        }
        while (v505);
      }
      v495 = (void *)*((_QWORD *)v8 + 555);
      *((_QWORD *)v8 + 555) = 0;
      if (v495)
        operator delete(v495);
      v496 = (std::__shared_weak_count *)*((_QWORD *)v8 + 554);
      v429 = (AMSCore::HTTPResponseAction *)(v8 + 2288);
      if (v496)
      {
        v497 = (unint64_t *)&v496->__shared_owners_;
        do
          v498 = __ldaxr(v497);
        while (__stlxr(v498 - 1, v497));
        if (!v498)
        {
          ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
          std::__shared_weak_count::__release_weak(v496);
        }
      }
      v499 = (std::__shared_weak_count *)*((_QWORD *)v8 + 552);
      if (v499)
      {
        v500 = (unint64_t *)&v499->__shared_owners_;
        do
          v501 = __ldaxr(v500);
        while (__stlxr(v501 - 1, v500));
        if (!v501)
        {
          ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
          std::__shared_weak_count::__release_weak(v499);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v550);
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v551);
      if (v8[2748])
        goto LABEL_711;
LABEL_621:
      (**(void (***)(AMSCore::HTTPResponseAction *))v429)(v429);
      if (!v8[2280])
        goto LABEL_714;
      goto LABEL_712;
    }
LABEL_798:
    __break(1u);
    JUMPOUT(0x18CD093D8);
  }
  return result;
}

void sub_18CD09414(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::ExecuteHTTPRequestTask::Context::~Context(AMSCore::ExecuteHTTPRequestTask::Context *this)
{
  void **v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;

  v2 = (void **)*((_QWORD *)this + 4);
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::performInternal(uint64_t a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

void sub_18CD09C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::runtime_error *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  char v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  _BYTE *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::runtime_error v62;
  unint64_t *v64;
  unint64_t v65;
  std::runtime_error *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *imp;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::runtime_error_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::runtime_error v107;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::runtime_error v133;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  BOOL v152;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::runtime_error v164;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::runtime_error_vtbl *v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  int v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  const std::runtime_error *v227;
  char v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _OWORD *v233;
  const std::runtime_error *v234;
  unint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  _QWORD *v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  char v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  void **v306;
  void *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  void **v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t *v318;
  unint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  _OWORD *v326;
  __int128 v327;
  uint64_t v328;
  __int128 v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  __int128 *v333;
  __int128 *v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  void **v352;
  void *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  void **v363;
  __int128 v364;
  uint64_t v365;
  uint64_t *v366;
  unint64_t v367;
  uint64_t v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  _BYTE *v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  std::runtime_error *v401;
  __int128 *v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  void **v408;
  AMSCore::HTTPResponseAction *v409;
  uint64_t v410;
  AMSCore::HTTPResponseAction *v411;
  std::runtime_error *v412;
  std::runtime_error *v413;
  std::runtime_error v414;
  __int128 v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  __int128 v419;
  std::string v420;
  char v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  _BYTE v426[25];
  __int128 v427;
  uint64_t v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  _BYTE v437[26];
  __int128 v438;
  uint64_t v439;
  char v440;
  std::runtime_error v441[2];
  unsigned int *v442[4];
  std::__shared_weak_count *v443;
  char v444;
  void *v445;
  char v446;
  char v447;
  unsigned int *v448[4];
  std::__shared_weak_count *v449;
  std::runtime_error v450;
  __int128 v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  __int128 v455;
  std::string v456;
  void *v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  _BYTE v462[25];
  __int128 v463;
  uint64_t v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  _BYTE v473[26];
  __int128 v474;
  uint64_t v475;
  char v476;

  v394 = v6;
  v395 = v10;
  v14 = *(_QWORD *)(v5 + 4984);
  if (!*(_BYTE *)(v14 + 672))
    goto LABEL_550;
  v392 = v4;
  v393 = v3;
  v389 = v2;
  v390 = v1;
  v391 = v0;
  v15 = (__int128 *)(v14 + 8);
  v16 = *(_BYTE *)(v14 + 664);
  if (v16)
  {
    AMSCore::HTTPResponse::HTTPResponse((uint64_t)v8, v15);
  }
  else
  {
    std::runtime_error::runtime_error(v8, (const std::runtime_error *)v15);
    *(_QWORD *)(v5 + 496) = MEMORY[0x1E0DE4F90] + 16;
    *(_OWORD *)(v5 + 512) = *(_OWORD *)(v14 + 24);
    *(_QWORD *)(v5 + 496) = off_1E2521330;
    *(_QWORD *)(v5 + 528) = *(_QWORD *)(v14 + 40);
    v17 = v5 + 536;
    v18 = (_QWORD *)(v14 + 48);
    v19 = *(_QWORD *)(v14 + 48);
    *(_QWORD *)(v5 + 536) = v19;
    v20 = *(_QWORD *)(v14 + 56);
    *(_QWORD *)(v5 + 544) = v20;
    if (v20)
    {
      *(_QWORD *)(v19 + 16) = v17;
      *(_QWORD *)(v14 + 40) = v18;
      *v18 = 0;
      *(_QWORD *)(v14 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v5 + 528) = v17;
    }
    *(_OWORD *)v410 = *(_OWORD *)(v14 + 64);
    *(_QWORD *)(v14 + 64) = 0;
    *(_QWORD *)(v14 + 72) = 0;
    *(_QWORD *)(v5 + 496) = &off_1E2521420;
    *(_BYTE *)(v5 + 568) = 0;
    *(_BYTE *)(v5 + 592) = 0;
    if (*(_BYTE *)(v14 + 104))
    {
      v21 = *(_OWORD *)(v14 + 80);
      *(_QWORD *)(v5 + 584) = *(_QWORD *)(v14 + 96);
      *(_OWORD *)(v5 + 568) = v21;
      *(_QWORD *)(v14 + 88) = 0;
      *(_QWORD *)(v14 + 96) = 0;
      *(_QWORD *)(v14 + 80) = 0;
      *(_BYTE *)(v5 + 592) = 1;
    }
    v22 = *(_OWORD *)(v14 + 112);
    *(_OWORD *)(v5 + 616) = *(_OWORD *)(v14 + 128);
    *(_OWORD *)(v5 + 600) = v22;
    v23 = *(_OWORD *)(v14 + 144);
    v24 = *(_OWORD *)(v14 + 160);
    v25 = *(_OWORD *)(v14 + 176);
    *(_OWORD *)(v5 + 673) = *(_OWORD *)(v14 + 185);
    *(_OWORD *)(v5 + 664) = v25;
    *(_OWORD *)(v5 + 648) = v24;
    *(_OWORD *)(v5 + 632) = v23;
    *(_QWORD *)(v410 + 152) = 0;
    *(_QWORD *)(v410 + 160) = 0;
    *(_QWORD *)(v410 + 144) = 0;
    *(_OWORD *)(v410 + 144) = *(_OWORD *)(v14 + 208);
    *(_QWORD *)(v5 + 712) = *(_QWORD *)(v14 + 224);
    *(_QWORD *)(v14 + 216) = 0;
    *(_QWORD *)(v14 + 224) = 0;
    *(_QWORD *)(v14 + 208) = 0;
    v26 = *(_OWORD *)(v14 + 248);
    *(_OWORD *)(v5 + 720) = *(_OWORD *)(v14 + 232);
    *(_OWORD *)(v5 + 736) = v26;
    v27 = *(_OWORD *)(v14 + 264);
    v28 = *(_OWORD *)(v14 + 280);
    v29 = *(_OWORD *)(v14 + 312);
    *(_OWORD *)(v5 + 784) = *(_OWORD *)(v14 + 296);
    *(_OWORD *)(v5 + 800) = v29;
    *(_OWORD *)(v5 + 752) = v27;
    *(_OWORD *)(v5 + 768) = v28;
    v30 = *(_OWORD *)(v14 + 328);
    v31 = *(_OWORD *)(v14 + 344);
    v32 = *(_OWORD *)(v14 + 360);
    *(_OWORD *)(v5 + 858) = *(_OWORD *)(v14 + 370);
    *(_OWORD *)(v5 + 832) = v31;
    *(_OWORD *)(v5 + 848) = v32;
    *(_OWORD *)(v5 + 816) = v30;
    *(_BYTE *)(v5 + 880) = 0;
    *(_BYTE *)(v5 + 904) = 0;
    if (*(_BYTE *)(v14 + 416))
    {
      v33 = *(_OWORD *)(v14 + 392);
      *(_QWORD *)(v5 + 896) = *(_QWORD *)(v14 + 408);
      *(_OWORD *)(v5 + 880) = v33;
      *(_QWORD *)(v14 + 400) = 0;
      *(_QWORD *)(v14 + 408) = 0;
      *(_QWORD *)(v14 + 392) = 0;
      *(_BYTE *)(v5 + 904) = 1;
    }
  }
  *(_BYTE *)(v5 + 1152) = v16;
  v34 = *(_QWORD *)(v5 + 4992);
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      v37 = *(std::__shared_weak_count **)(v5 + 4992);
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v38 = *(std::__shared_weak_count **)(v5 + 2296);
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *(std::__shared_weak_count **)(v5 + 4928);
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *(std::__shared_weak_count **)(v5 + 1824);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (!*(_BYTE *)(v5 + 1152))
  {
    v67 = *(unsigned __int8 *)(v405 + 1129);
    if (!*(_BYTE *)(v5 + 864))
      *(_BYTE *)(v5 + 864) = 1;
    *(_QWORD *)(v5 + 856) = v67;
    AMSCore::LoadURLMetricsHandler::OptionsBuilder::make((uint64_t)v441, *(_QWORD *)(v5 + 4488));
    *(_QWORD *)(v5 + 4904) = *(_QWORD *)(v5 + 4968);
    v68 = *(_QWORD *)(v5 + 4976);
    *(_QWORD *)(v5 + 4912) = v68;
    if (v68)
    {
      v69 = (unint64_t *)(v68 + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = *(_QWORD *)(v5 + 4672);
    if (!v71)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(std::runtime_error *__return_ptr))(*(_QWORD *)v71 + 48))(&v414);
    AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(&v450, (uint64_t *)&v414);
    imp = (std::__shared_weak_count *)v450.__imp_.__imp_;
    v450.__imp_.__imp_ = 0;
    v450.__vftable = 0;
    if (imp)
    {
      v73 = (unint64_t *)&imp->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    v75 = (std::__shared_weak_count *)v450.__imp_.__imp_;
    if (v450.__imp_.__imp_)
    {
      v76 = (unint64_t *)(v450.__imp_.__imp_ + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = v414.__vftable;
    v414.__vftable = 0;
    if (v78)
      (*((void (**)(std::runtime_error_vtbl *))v78->~runtime_error + 1))(v78);
    v79 = *(std::__shared_weak_count **)(v5 + 4912);
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (!*(_BYTE *)(v5 + 1152))
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v450);
      AMSCore::Logger::log<char [34],AMSCore::HTTPError>((uint64_t)v450.__vftable, (uint64_t)v8);
      v82 = (std::__shared_weak_count *)v450.__imp_.__imp_;
      if (v450.__imp_.__imp_)
      {
        v83 = (unint64_t *)(v450.__imp_.__imp_ + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if (!*(_BYTE *)(v5 + 1152))
      {
        AMSCore::Error::Error(&v414, v8);
        v414.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
        AMSCore::HTTPTransactionMetrics::HTTPTransactionMetrics(&v420, (const AMSCore::HTTPTransactionMetrics *)(v5 + 568));
        std::runtime_error::runtime_error(&v450, &v414);
        v451 = v415;
        v452 = v416;
        v453 = v417;
        v454 = v418;
        if (v418)
        {
          *(_QWORD *)(v417 + 16) = &v453;
          v416 = &v417;
          v417 = 0;
          v418 = 0;
        }
        else
        {
          v452 = &v453;
        }
        v455 = v419;
        v419 = 0uLL;
        v450.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
        v456.__r_.__value_.__s.__data_[0] = 0;
        LOBYTE(v457) = 0;
        if (v421)
        {
          v456 = v420;
          memset(&v420, 0, sizeof(v420));
          LOBYTE(v457) = 1;
        }
        v460 = v424;
        v461 = v425;
        *(_OWORD *)v462 = *(_OWORD *)v426;
        *(_OWORD *)&v462[9] = *(_OWORD *)&v426[9];
        v458 = v422;
        v459 = v423;
        v463 = v427;
        v464 = v428;
        v427 = 0uLL;
        v428 = 0;
        *(_OWORD *)&v473[10] = *(_OWORD *)&v437[10];
        v471 = v435;
        v472 = v436;
        *(_OWORD *)v473 = *(_OWORD *)v437;
        v467 = v431;
        v468 = v432;
        v469 = v433;
        v470 = v434;
        v465 = v429;
        v466 = v430;
        LOBYTE(v474) = 0;
        v476 = 0;
        if (v440)
        {
          v474 = v438;
          v475 = v439;
          v439 = 0;
          v438 = 0uLL;
          v476 = 1;
        }
        AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v414);
        std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](v5 + 24);
        std::runtime_error::runtime_error((std::runtime_error *)(v5 + 24), &v450);
        v364 = v451;
        v365 = v453;
        v366 = v452;
        *(_QWORD *)(v5 + 64) = v453;
        v367 = v5 + 64;
        *(_OWORD *)(v5 + 40) = v364;
        *(_QWORD *)(v5 + 24) = off_1E2521330;
        *(_QWORD *)(v5 + 56) = v366;
        v368 = v454;
        *(_QWORD *)(v5 + 72) = v454;
        if (v368)
        {
          *(_QWORD *)(v365 + 16) = v367;
          v452 = &v453;
          v453 = 0;
          v454 = 0;
        }
        else
        {
          *(_QWORD *)(v5 + 56) = v367;
        }
        v369 = v455;
        *(_BYTE *)(v5 + 96) = 0;
        *(_OWORD *)(v5 + 80) = v369;
        v455 = 0uLL;
        *(_QWORD *)(v5 + 24) = &off_1E2521420;
        *(_BYTE *)(v5 + 120) = 0;
        if ((_BYTE)v457)
        {
          *(std::string *)(v5 + 96) = v456;
          memset(&v456, 0, sizeof(v456));
          *(_BYTE *)(v5 + 120) = 1;
        }
        v370 = v461;
        *(_OWORD *)(v5 + 160) = v460;
        *(_OWORD *)(v5 + 176) = v370;
        *(_OWORD *)(v5 + 192) = *(_OWORD *)v462;
        *(_OWORD *)(v5 + 201) = *(_OWORD *)&v462[9];
        v371 = v459;
        *(_OWORD *)(v5 + 128) = v458;
        *(_OWORD *)(v5 + 144) = v371;
        *(_OWORD *)(v5 + 224) = v463;
        v372 = v471;
        v373 = *(_OWORD *)v473;
        *(_OWORD *)(v5 + 360) = v472;
        *(_OWORD *)(v5 + 376) = v373;
        *(_OWORD *)(v5 + 386) = *(_OWORD *)&v473[10];
        v374 = v468;
        *(_OWORD *)(v5 + 280) = v467;
        *(_OWORD *)(v5 + 296) = v374;
        v375 = v470;
        *(_OWORD *)(v5 + 312) = v469;
        *(_OWORD *)(v5 + 328) = v375;
        *(_OWORD *)(v5 + 344) = v372;
        v376 = v466;
        *(_OWORD *)(v5 + 248) = v465;
        *(_QWORD *)(v5 + 240) = v464;
        v464 = 0;
        v463 = 0uLL;
        *(_OWORD *)(v5 + 264) = v376;
        *(_BYTE *)(v5 + 408) = 0;
        *(_BYTE *)(v5 + 432) = 0;
        if (v476)
        {
          *(_OWORD *)(v5 + 408) = v474;
          *(_QWORD *)(v5 + 424) = v475;
          v475 = 0;
          v474 = 0uLL;
          *(_BYTE *)(v5 + 432) = 1;
        }
        *(_BYTE *)(v5 + 440) = 0;
        *(_BYTE *)(v5 + 448) = 1;
        AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v450);
        v377 = v449;
        v50 = v395;
        v258 = v407;
        if (v449)
        {
          v378 = (unint64_t *)&v449->__shared_owners_;
          do
            v379 = __ldaxr(v378);
          while (__stlxr(v379 - 1, v378));
          if (!v379)
          {
            ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
            std::__shared_weak_count::__release_weak(v377);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v448, v448[1]);
        if (!v447)
          goto LABEL_527;
        if (v446 < 0)
          operator delete(v445);
        if (!v444)
LABEL_527:
          ((void (*)(std::runtime_error *))v441[0].~runtime_error)(v441);
LABEL_528:
        if (*(_BYTE *)(v5 + 1152))
        {
          AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)v8);
          v380 = *(std::__shared_weak_count **)(v5 + 4944);
          if (!v380)
            goto LABEL_536;
        }
        else
        {
          ((void (*)(std::runtime_error *))v8->~runtime_error)(v8);
          v380 = *(std::__shared_weak_count **)(v5 + 4944);
          if (!v380)
          {
LABEL_536:
            v383 = *(std::__shared_weak_count **)(v5 + 4976);
            if (v383)
            {
              v384 = (unint64_t *)&v383->__shared_owners_;
              do
                v385 = __ldaxr(v384);
              while (__stlxr(v385 - 1, v384));
              if (!v385)
              {
                ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                std::__shared_weak_count::__release_weak(v383);
              }
            }
            *(_QWORD *)(v5 + 496) = v258;
            *(_QWORD *)v5 = 0;
            *v50 = 7;
            AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::Awaiter::await_suspend((uint64_t *)v8);
            return;
          }
        }
        v381 = (unint64_t *)&v380->__shared_owners_;
        do
          v382 = __ldaxr(v381);
        while (__stlxr(v382 - 1, v381));
        if (!v382)
        {
          ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
          std::__shared_weak_count::__release_weak(v380);
        }
        goto LABEL_536;
      }
    }
    goto LABEL_550;
  }
  v47 = operator new(0x2A8uLL);
  v47[1] = 0;
  v47[2] = 0;
  *v47 = &off_1E25227E0;
  AMSCore::HTTPResponse::HTTPResponse((uint64_t)(v47 + 3), (__int128 *)v8);
  *(_QWORD *)(v5 + 4888) = v47 + 3;
  *(_QWORD *)(v5 + 4896) = v47;
  v48 = *(unsigned __int8 *)(v405 + 1129);
  if (!*((_BYTE *)v47 + 544))
    *((_BYTE *)v47 + 544) = 1;
  v47[67] = v48;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v450);
  AMSCore::Logger::log<char [39],AMSCore::HTTPResponse>((uint64_t)v450.__vftable, (uint64_t)(v47 + 3));
  v49 = (std::__shared_weak_count *)v450.__imp_.__imp_;
  v50 = v395;
  if (v450.__imp_.__imp_)
  {
    v51 = (unint64_t *)(v450.__imp_.__imp_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *(_BYTE *)(v5 + 1816) = 0;
  *(_BYTE *)(v5 + 2280) = 0;
  v53 = *(_QWORD *)(v5 + 4488);
  v54 = (uint64_t *)(v53 + 88);
  *(_QWORD *)(v5 + 5000) = v53 + 88;
  if (*(_DWORD *)(v53 + 104))
  {
    *(_QWORD *)(v5 + 5008) = v54;
    if (*(_DWORD *)(v53 + 104) != 1)
      goto LABEL_548;
    v55 = *v54;
    *(_QWORD *)(v5 + 4776) = *(_QWORD *)(v5 + 4888);
    v56 = *(_QWORD *)(v5 + 4896);
    *(_QWORD *)(v5 + 4784) = v56;
    if (v56)
    {
      v57 = (unint64_t *)(v56 + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      v53 = *v404;
    }
    *(_QWORD *)(v5 + 4792) = v53;
    v59 = *(_QWORD *)(v5 + 4496);
    *(_QWORD *)(v5 + 4800) = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 40))(v55, v12, v11);
    v62 = *(std::runtime_error *)v394;
    *v394 = 0;
    v394[1] = 0;
    *v412 = v62;
    if (!atomic_load((unint64_t *)&v62.__vftable[20]))
    {
      *v395 = 3;
      v64 = (unint64_t *)&v412->__vftable[20];
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v5, v64));
      if (!v65)
        return;
    }
    if (!LOBYTE(v412->__vftable[19].what))
      goto LABEL_550;
    v66 = (std::runtime_error *)v411;
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v411, (uint64_t)&v412->~runtime_error_0);
    if (*(_BYTE *)(v5 + 2280))
    {
      if (*(_BYTE *)(v5 + 2276))
      {
        AMSCore::HTTPResponseAction::operator=((uint64_t)v413, (uint64_t)v411);
      }
      else
      {
        (**(void (***)())(v5 + 1816))();
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v413, (uint64_t)v411);
        *(_BYTE *)(v5 + 2276) = 1;
      }
    }
    else
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v413, (uint64_t)v411);
      *(_BYTE *)(v5 + 2276) = 1;
      *(_BYTE *)(v5 + 2280) = 1;
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v411);
    v85 = *(std::__shared_weak_count **)(v5 + 3224);
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = *(std::__shared_weak_count **)(v5 + 4704);
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = v394;
    v92 = *(std::__shared_weak_count **)(v5 + 4800);
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = *(std::__shared_weak_count **)(v5 + 4784);
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (*(_BYTE *)(v5 + 2280))
      v98 = *(_BYTE *)(v5 + 2276) == 0;
    else
      v98 = 1;
    if (!v98 && *(_DWORD *)(v5 + 2272) == 1)
    {
      v100 = **(_QWORD **)(v5 + 5008);
      *(_QWORD *)(v5 + 4824) = *(_QWORD *)(v5 + 4888);
      v101 = *(_QWORD *)(v5 + 4896);
      *(_QWORD *)(v5 + 4832) = v101;
      if (v101)
      {
        v102 = (unint64_t *)(v101 + 8);
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      *(_QWORD *)(v5 + 4840) = *(_QWORD *)(v5 + 4488);
      v104 = *(_QWORD *)(v5 + 4496);
      *(_QWORD *)(v5 + 4848) = v104;
      if (v104)
      {
        v105 = (unint64_t *)(v104 + 8);
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v100 + 32))(v100, v393, v392);
      v107 = *(std::runtime_error *)v394;
      *v394 = 0;
      v394[1] = 0;
      *v412 = v107;
      if (!atomic_load((unint64_t *)&v107.__vftable[20]))
      {
        *v395 = 4;
        v109 = (unint64_t *)&v412->__vftable[20];
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v5, v109));
        if (!v110)
          return;
      }
      if (!LOBYTE(v412->__vftable[19].what))
        goto LABEL_550;
      v66 = (std::runtime_error *)v411;
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v411, (uint64_t)&v412->~runtime_error_0);
      if (*(_BYTE *)(v5 + 2280))
      {
        if (*(_BYTE *)(v5 + 2276))
        {
          AMSCore::HTTPResponseAction::operator=((uint64_t)v413, (uint64_t)v411);
        }
        else
        {
          (**(void (***)())(v5 + 1816))();
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v413, (uint64_t)v411);
          *(_BYTE *)(v5 + 2276) = 1;
        }
      }
      else
      {
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v413, (uint64_t)v411);
        *(_BYTE *)(v5 + 2276) = 1;
        *(_BYTE *)(v5 + 2280) = 1;
      }
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v411);
      v111 = *(std::__shared_weak_count **)(v5 + 3224);
      if (v111)
      {
        v112 = (unint64_t *)&v111->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      v114 = *(std::__shared_weak_count **)(v5 + 4704);
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = *(std::__shared_weak_count **)(v5 + 4848);
      if (v117)
      {
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      v120 = *(std::__shared_weak_count **)(v5 + 4832);
      if (v120)
      {
        v121 = (unint64_t *)&v120->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        goto LABEL_247;
      }
    }
  }
  else
  {
    v123 = *v54;
    *(_QWORD *)(v5 + 4808) = *(_QWORD *)(v5 + 4888);
    v124 = *(_QWORD *)(v5 + 4896);
    *(_QWORD *)(v5 + 4816) = v124;
    if (v124)
    {
      v125 = (unint64_t *)(v124 + 8);
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
    }
    *(_QWORD *)(v5 + 4760) = *(_QWORD *)(v5 + 4968);
    v127 = *(_QWORD *)(v5 + 4976);
    *(_QWORD *)(v5 + 4768) = v127;
    if (v127)
    {
      v128 = (unint64_t *)(v127 + 8);
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
    }
    *(_QWORD *)(v5 + 4680) = *(_QWORD *)(v5 + 4488);
    v130 = *(_QWORD *)(v5 + 4496);
    *(_QWORD *)(v5 + 4688) = v130;
    if (v130)
    {
      v131 = (unint64_t *)(v130 + 8);
      do
        v132 = __ldxr(v131);
      while (__stxr(v132 + 1, v131));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v123 + 40))(v123, v7, v9, v13);
    v133 = *v412;
    v412->__vftable = 0;
    v412->__imp_.__imp_ = 0;
    *(std::runtime_error *)v394 = v133;
    if (!atomic_load((unint64_t *)&v133.__vftable[20]))
    {
      *v395 = 1;
      v135 = (unint64_t *)(*v394 + 480);
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v5, v135));
      if (!v136)
        return;
    }
    if (!*(_BYTE *)(*v394 + 472))
      goto LABEL_550;
    v66 = (std::runtime_error *)v411;
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v411, *v394 + 8);
    if (*(_BYTE *)(v5 + 2280))
    {
      v91 = v394;
      if (*(_BYTE *)(v5 + 2276))
      {
        AMSCore::HTTPResponseAction::operator=((uint64_t)v413, (uint64_t)v411);
      }
      else
      {
        (**(void (***)())(v5 + 1816))();
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v413, (uint64_t)v411);
        *(_BYTE *)(v5 + 2276) = 1;
      }
    }
    else
    {
      v91 = v394;
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v413, (uint64_t)v411);
      *(_BYTE *)(v5 + 2276) = 1;
      *(_BYTE *)(v5 + 2280) = 1;
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v411);
    v137 = *(std::__shared_weak_count **)(v5 + 4704);
    if (v137)
    {
      v138 = (unint64_t *)&v137->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v140 = *(std::__shared_weak_count **)(v5 + 3224);
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = *(std::__shared_weak_count **)(v5 + 4688);
    if (v143)
    {
      v144 = (unint64_t *)&v143->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v146 = *(std::__shared_weak_count **)(v5 + 4768);
    if (v146)
    {
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v149 = *(std::__shared_weak_count **)(v5 + 4816);
    if (v149)
    {
      v150 = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    if (*(_BYTE *)(v5 + 2280))
      v152 = *(_BYTE *)(v5 + 2276) == 0;
    else
      v152 = 1;
    if (!v152 && *(_DWORD *)(v5 + 2272) == 1)
    {
      v154 = **(_QWORD **)(v5 + 5000);
      *(_QWORD *)(v5 + 4712) = *(_QWORD *)(v5 + 4888);
      v155 = *(_QWORD *)(v5 + 4896);
      *(_QWORD *)(v5 + 4720) = v155;
      if (v155)
      {
        v156 = (unint64_t *)(v155 + 8);
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      *(_QWORD *)(v5 + 4728) = *(_QWORD *)(v5 + 4968);
      v158 = *(_QWORD *)(v5 + 4976);
      *(_QWORD *)(v5 + 4736) = v158;
      if (v158)
      {
        v159 = (unint64_t *)(v158 + 8);
        do
          v160 = __ldxr(v159);
        while (__stxr(v160 + 1, v159));
      }
      *(_QWORD *)(v5 + 4744) = *(_QWORD *)(v5 + 4488);
      v161 = *(_QWORD *)(v5 + 4496);
      *(_QWORD *)(v5 + 4752) = v161;
      if (v161)
      {
        v162 = (unint64_t *)(v161 + 8);
        do
          v163 = __ldxr(v162);
        while (__stxr(v163 + 1, v162));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v154 + 32))(v154, v391, v390, v389);
      v164 = *(std::runtime_error *)v91;
      *v91 = 0;
      v91[1] = 0;
      *v412 = v164;
      if (!atomic_load((unint64_t *)&v164.__vftable[20]))
      {
        *v395 = 2;
        v166 = (unint64_t *)&v412->__vftable[20];
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v5, v166));
        if (!v167)
          return;
      }
      if (!LOBYTE(v412->__vftable[19].what))
        goto LABEL_550;
      v66 = (std::runtime_error *)v411;
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v411, (uint64_t)&v412->~runtime_error_0);
      if (*(_BYTE *)(v5 + 2280))
      {
        if (*(_BYTE *)(v5 + 2276))
        {
          AMSCore::HTTPResponseAction::operator=((uint64_t)v413, (uint64_t)v411);
        }
        else
        {
          (**(void (***)())(v5 + 1816))();
          AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v413, (uint64_t)v411);
          *(_BYTE *)(v5 + 2276) = 1;
        }
      }
      else
      {
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v413, (uint64_t)v411);
        *(_BYTE *)(v5 + 2276) = 1;
        *(_BYTE *)(v5 + 2280) = 1;
      }
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v411);
      v168 = *(std::__shared_weak_count **)(v5 + 3224);
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v171 = *(std::__shared_weak_count **)(v5 + 4704);
      if (v171)
      {
        v172 = (unint64_t *)&v171->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v174 = *(std::__shared_weak_count **)(v5 + 4752);
      if (v174)
      {
        v175 = (unint64_t *)&v174->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v177 = *(std::__shared_weak_count **)(v5 + 4736);
      if (v177)
      {
        v178 = (unint64_t *)&v177->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      v120 = *(std::__shared_weak_count **)(v5 + 4720);
      if (v120)
      {
        v180 = (unint64_t *)&v120->__shared_owners_;
        do
          v122 = __ldaxr(v180);
        while (__stlxr(v122 - 1, v180));
LABEL_247:
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
    }
  }
  if (!*(_BYTE *)(v5 + 1152))
    goto LABEL_550;
  AMSCore::HTTPResponse::operator=((uint64_t)v8, *(_QWORD *)(v5 + 4888));
  v181 = *(_QWORD *)(v5 + 4936);
  *(_QWORD *)(v5 + 4856) = *(_QWORD *)(v5 + 4968);
  v182 = *(_QWORD *)(v5 + 4976);
  *(_QWORD *)(v5 + 4864) = v182;
  if (v182)
  {
    v183 = (unint64_t *)(v182 + 8);
    do
      v184 = __ldxr(v183);
    while (__stxr(v184 + 1, v183));
  }
  AMSCore::LoadURLMetricsHandler::OptionsBuilder::make((uint64_t)&v450, *v404);
  v185 = *(_QWORD *)(v5 + 4672);
  if (!v185)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t, std::runtime_error *, uint64_t, std::runtime_error *))(*(_QWORD *)v185 + 48))(v441, v185, v181, v8, v403, &v450);
  AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(&v414, (uint64_t *)v441);
  v186 = (std::__shared_weak_count *)v414.__imp_.__imp_;
  v414.__vftable = 0;
  v414.__imp_.__imp_ = 0;
  if (v186)
  {
    v187 = (unint64_t *)&v186->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = (std::__shared_weak_count *)v414.__imp_.__imp_;
  if (v414.__imp_.__imp_)
  {
    v190 = (unint64_t *)(v414.__imp_.__imp_ + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = v441[0].__vftable;
  v441[0].__vftable = 0;
  if (v192)
    (*((void (**)(std::runtime_error_vtbl *))v192->~runtime_error + 1))(v192);
  v193 = *(std::__shared_weak_count **)v462;
  if (*(_QWORD *)v462)
  {
    v194 = (unint64_t *)(*(_QWORD *)v462 + 8);
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v460, *((unsigned int **)&v460 + 1));
  if ((_BYTE)v459)
  {
    if (SHIBYTE(v458) < 0)
    {
      operator delete(v457);
      if (v456.__r_.__value_.__s.__data_[0])
      {
LABEL_274:
        v196 = *(std::__shared_weak_count **)(v5 + 4864);
        if (!v196)
          goto LABEL_282;
        goto LABEL_278;
      }
    }
    else if (v456.__r_.__value_.__s.__data_[0])
    {
      goto LABEL_274;
    }
  }
  ((void (*)(std::runtime_error *))v450.~runtime_error)(&v450);
  v196 = *(std::__shared_weak_count **)(v5 + 4864);
  if (!v196)
    goto LABEL_282;
LABEL_278:
  v197 = (unint64_t *)&v196->__shared_owners_;
  do
    v198 = __ldaxr(v197);
  while (__stlxr(v198 - 1, v197));
  if (!v198)
  {
    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
    std::__shared_weak_count::__release_weak(v196);
  }
LABEL_282:
  if (!*(_BYTE *)(v5 + 2280))
    goto LABEL_550;
  if (!*(_BYTE *)(v5 + 2276))
  {
    std::runtime_error::runtime_error(v66, v413);
    *(_OWORD *)(v5 + 2304) = *(_OWORD *)(v5 + 1832);
    *(_QWORD *)(v5 + 2288) = off_1E2521330;
    *(_QWORD *)(v5 + 2320) = *(_QWORD *)(v5 + 1848);
    v386 = v5 + 2328;
    v387 = *(_QWORD *)(v5 + 1856);
    *(_QWORD *)(v5 + 2328) = v387;
    v388 = *(_QWORD *)(v5 + 1864);
    *(_QWORD *)(v5 + 2336) = v388;
    if (v388)
    {
      *(_QWORD *)(v387 + 16) = v386;
      *(_QWORD *)(v5 + 1848) = v5 + 1856;
      *(_QWORD *)(v5 + 1856) = 0;
      *(_QWORD *)(v5 + 1864) = 0;
    }
    else
    {
      *(_QWORD *)(v5 + 2320) = v386;
    }
    *(_OWORD *)(v410 + 1792) = *(_OWORD *)(v5 + 1872);
    *(_QWORD *)(v5 + 1880) = 0;
    *(_QWORD *)(v5 + 1872) = 0;
    *(_BYTE *)(v5 + 2748) = 0;
    __break(1u);
LABEL_548:
    std::terminate();
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v66, (uint64_t)v413);
  *(_BYTE *)(v5 + 2748) = 1;
  v199 = *(_DWORD *)(v5 + 2744);
  if ((v199 - 2) < 2)
  {
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v409, (uint64_t)v66);
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v408, v399);
    *(_OWORD *)(v405 + 992) = *(_OWORD *)(v5 + 4016);
    *(_QWORD *)(v5 + 4024) = 0;
    *(_QWORD *)(v5 + 4016) = 0;
    *(_QWORD *)(v5 + 4424) = *(_QWORD *)(v5 + 4488);
    *(_QWORD *)(v5 + 4432) = *(_QWORD *)(v5 + 4496);
    *v404 = 0;
    v404[1] = 0;
    v200 = *(_QWORD *)(v5 + 4504);
    v201 = *(_QWORD *)(v5 + 4512);
    *(_QWORD *)(v5 + 4512) = 0;
    *(_QWORD *)(v5 + 4504) = 0;
    *(_QWORD *)(v5 + 4440) = v200;
    *(_QWORD *)(v5 + 4448) = v201;
    v202 = *(_QWORD *)(v5 + 4520);
    *(_QWORD *)(v5 + 4456) = v202;
    v203 = *(_QWORD *)(v5 + 4528);
    *(_QWORD *)(v5 + 4464) = v203;
    *(_DWORD *)(v5 + 4472) = *(_DWORD *)(v5 + 4536);
    if (v203)
    {
      v204 = *(_QWORD *)(v202 + 8);
      if ((v201 & (v201 - 1)) != 0)
      {
        if (v204 >= v201)
          v204 %= v201;
      }
      else
      {
        v204 &= v201 - 1;
      }
      *(_QWORD *)(v200 + 8 * v204) = v5 + 4456;
      *(_QWORD *)(v5 + 4520) = 0;
      *(_QWORD *)(v5 + 4528) = 0;
    }
    *(_WORD *)(v5 + 4480) = *(_WORD *)(v5 + 4544);
    v218 = *(_QWORD *)(v5 + 4672);
    if (v218)
    {
      v219 = v406;
      if (v218 == v398)
      {
        *(_QWORD *)(v5 + 4640) = v406;
        (*(void (**)(void))(*(_QWORD *)(v5 + 4648) + 24))();
        v219 = v406;
        goto LABEL_309;
      }
      v220 = (_QWORD *)(v5 + 4672);
      *(_QWORD *)(v5 + 4640) = v218;
    }
    else
    {
      v220 = (_QWORD *)(v5 + 4640);
      v219 = v406;
    }
    *v220 = 0;
LABEL_309:
    v221 = *(_QWORD *)(v5 + 4872);
    v222 = *(_QWORD *)(v5 + 4880);
    v401->__vftable = 0;
    v401->__imp_.__imp_ = 0;
    *(_QWORD *)(v5 + 4696) = v221;
    *(_QWORD *)(v5 + 4704) = v222;
    if (!atomic_load((unint64_t *)(v221 + 440)))
    {
      *v395 = 5;
      v224 = (unint64_t *)(*v91 + 440);
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v5, v224));
      if (!v225)
        return;
    }
    v226 = *v91;
    if (*(_BYTE *)(*v91 + 432))
    {
      v227 = (const std::runtime_error *)(v226 + 8);
      v228 = *(_BYTE *)(v226 + 424);
      if (!v228)
      {
        v234 = v412;
        std::runtime_error::runtime_error(v412, v227);
        *(_QWORD *)(v5 + 3216) = MEMORY[0x1E0DE4F90] + 16;
        *(_OWORD *)(v5 + 3232) = *(_OWORD *)(v226 + 24);
        *(_QWORD *)(v5 + 3216) = off_1E2521330;
        *(_QWORD *)(v5 + 3248) = *(_QWORD *)(v226 + 40);
        v235 = v5 + 3256;
        v236 = (_QWORD *)(v226 + 48);
        v237 = *(_QWORD *)(v226 + 48);
        *(_QWORD *)(v5 + 3256) = v237;
        v238 = *(_QWORD *)(v226 + 56);
        *(_QWORD *)(v5 + 3264) = v238;
        v233 = (_OWORD *)v410;
        if (v238)
        {
          *(_QWORD *)(v237 + 16) = v235;
          *(_QWORD *)(v226 + 40) = v236;
          *v236 = 0;
          *(_QWORD *)(v226 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v5 + 3248) = v235;
        }
        v66 = (std::runtime_error *)v411;
        *(_OWORD *)(v410 + 2720) = *(_OWORD *)(v226 + 64);
        *(_QWORD *)(v226 + 64) = 0;
        *(_QWORD *)(v226 + 72) = 0;
        *(_QWORD *)(v5 + 3216) = &off_1E2521420;
        *(_BYTE *)(v5 + 3288) = 0;
        *(_BYTE *)(v5 + 3312) = 0;
        if (*(_BYTE *)(v226 + 104))
        {
          v259 = *(_OWORD *)(v226 + 80);
          *(_QWORD *)(v5 + 3304) = *(_QWORD *)(v226 + 96);
          *(_OWORD *)(v5 + 3288) = v259;
          *(_QWORD *)(v226 + 88) = 0;
          *(_QWORD *)(v226 + 96) = 0;
          *(_QWORD *)(v226 + 80) = 0;
          *(_BYTE *)(v5 + 3312) = 1;
        }
        v260 = *(_OWORD *)(v226 + 112);
        *(_OWORD *)(v5 + 3336) = *(_OWORD *)(v226 + 128);
        *(_OWORD *)(v5 + 3320) = v260;
        v261 = *(_OWORD *)(v226 + 144);
        v262 = *(_OWORD *)(v226 + 160);
        v263 = *(_OWORD *)(v226 + 176);
        *(_OWORD *)(v5 + 3393) = *(_OWORD *)(v226 + 185);
        *(_OWORD *)(v5 + 3384) = v263;
        *(_OWORD *)(v5 + 3368) = v262;
        *(_OWORD *)(v5 + 3352) = v261;
        *(_QWORD *)(v405 + 8) = 0;
        *(_QWORD *)(v405 + 16) = 0;
        *(_QWORD *)v405 = 0;
        *(_OWORD *)v405 = *(_OWORD *)(v226 + 208);
        *(_QWORD *)(v5 + 3432) = *(_QWORD *)(v226 + 224);
        *(_QWORD *)(v226 + 216) = 0;
        *(_QWORD *)(v226 + 224) = 0;
        *(_QWORD *)(v226 + 208) = 0;
        v264 = *(_OWORD *)(v226 + 232);
        *(_OWORD *)(v5 + 3456) = *(_OWORD *)(v226 + 248);
        *(_OWORD *)(v5 + 3440) = v264;
        v265 = *(_OWORD *)(v226 + 264);
        v266 = *(_OWORD *)(v226 + 280);
        v267 = *(_OWORD *)(v226 + 296);
        *(_OWORD *)(v5 + 3520) = *(_OWORD *)(v226 + 312);
        *(_OWORD *)(v5 + 3504) = v267;
        *(_OWORD *)(v5 + 3488) = v266;
        *(_OWORD *)(v5 + 3472) = v265;
        v268 = *(_OWORD *)(v226 + 328);
        v269 = *(_OWORD *)(v226 + 344);
        v270 = *(_OWORD *)(v226 + 360);
        *(_OWORD *)(v5 + 3578) = *(_OWORD *)(v226 + 370);
        *(_OWORD *)(v5 + 3568) = v270;
        *(_OWORD *)(v5 + 3552) = v269;
        *(_OWORD *)(v5 + 3536) = v268;
        *(_BYTE *)(v5 + 3600) = 0;
        *(_BYTE *)(v5 + 3624) = 0;
        if (*(_BYTE *)(v226 + 416))
        {
          v271 = *(_OWORD *)(v226 + 392);
          *(_QWORD *)(v5 + 3616) = *(_QWORD *)(v226 + 408);
          *(_OWORD *)(v5 + 3600) = v271;
          *(_QWORD *)(v226 + 400) = 0;
          *(_QWORD *)(v226 + 408) = 0;
          *(_QWORD *)(v226 + 392) = 0;
          *(_BYTE *)(v5 + 3624) = 1;
        }
LABEL_362:
        *(_BYTE *)(v5 + 3632) = v228;
        std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](v5 + 24);
        v272 = *(_BYTE *)(v5 + 3632);
        if (!v272)
        {
          std::runtime_error::runtime_error((std::runtime_error *)(v5 + 24), v234);
          v276 = *(_QWORD *)(v5 + 3256);
          *(_QWORD *)(v5 + 64) = v276;
          v277 = v5 + 64;
          *(_OWORD *)(v5 + 40) = *(_OWORD *)(v5 + 3232);
          *(_QWORD *)(v5 + 24) = off_1E2521330;
          *(_QWORD *)(v5 + 56) = *(_QWORD *)(v5 + 3248);
          v278 = *(_QWORD *)(v5 + 3264);
          *(_QWORD *)(v5 + 72) = v278;
          if (v278)
          {
            *(_QWORD *)(v276 + 16) = v277;
            *(_QWORD *)(v5 + 3248) = v5 + 3256;
            *(_QWORD *)(v5 + 3256) = 0;
            *(_QWORD *)(v5 + 3264) = 0;
          }
          else
          {
            *(_QWORD *)(v5 + 56) = v277;
          }
          v284 = v233[170];
          *(_BYTE *)(v5 + 96) = 0;
          *(_OWORD *)(v5 + 80) = v284;
          v233[170] = 0u;
          *(_QWORD *)(v5 + 24) = &off_1E2521420;
          *(_BYTE *)(v5 + 120) = 0;
          if (*(_BYTE *)(v5 + 3312))
          {
            *(_QWORD *)(v5 + 112) = *(_QWORD *)(v5 + 3304);
            *(_OWORD *)(v5 + 96) = *(_OWORD *)(v5 + 3288);
            *(_QWORD *)(v5 + 3304) = 0;
            *(_QWORD *)(v5 + 3288) = 0;
            *(_QWORD *)(v5 + 3296) = 0;
            *(_BYTE *)(v5 + 120) = 1;
          }
          v285 = *(_OWORD *)(v5 + 3368);
          *(_OWORD *)(v5 + 160) = *(_OWORD *)(v5 + 3352);
          *(_OWORD *)(v5 + 176) = v285;
          *(_OWORD *)(v5 + 192) = *(_OWORD *)(v5 + 3384);
          *(_OWORD *)(v5 + 201) = *(_OWORD *)(v5 + 3393);
          v286 = *(_OWORD *)(v5 + 3336);
          *(_OWORD *)(v5 + 128) = *(_OWORD *)(v5 + 3320);
          *(_OWORD *)(v5 + 144) = v286;
          *(_OWORD *)(v5 + 224) = *(_OWORD *)v405;
          *(_QWORD *)(v5 + 240) = *(_QWORD *)(v5 + 3432);
          *(_QWORD *)v405 = 0;
          *(_QWORD *)(v405 + 8) = 0;
          *(_QWORD *)(v405 + 16) = 0;
          v287 = *(_OWORD *)(v5 + 3536);
          v288 = *(_OWORD *)(v5 + 3568);
          *(_OWORD *)(v5 + 360) = *(_OWORD *)(v5 + 3552);
          *(_OWORD *)(v5 + 376) = v288;
          *(_OWORD *)(v5 + 386) = *(_OWORD *)(v5 + 3578);
          v289 = *(_OWORD *)(v5 + 3488);
          *(_OWORD *)(v5 + 280) = *(_OWORD *)(v5 + 3472);
          *(_OWORD *)(v5 + 296) = v289;
          v290 = *(_OWORD *)(v5 + 3520);
          *(_OWORD *)(v5 + 312) = *(_OWORD *)(v5 + 3504);
          *(_OWORD *)(v5 + 328) = v290;
          *(_OWORD *)(v5 + 344) = v287;
          *(_OWORD *)(v5 + 248) = *(_OWORD *)(v5 + 3440);
          *(_OWORD *)(v5 + 264) = *(_OWORD *)(v5 + 3456);
          *(_BYTE *)(v5 + 408) = 0;
          *(_BYTE *)(v5 + 432) = 0;
          if (*(_BYTE *)(v5 + 3624))
          {
            *(_OWORD *)(v5 + 408) = *(_OWORD *)(v5 + 3600);
            *(_QWORD *)(v5 + 424) = *(_QWORD *)(v5 + 3616);
            *(_QWORD *)(v5 + 3600) = 0;
            *(_QWORD *)(v5 + 3616) = 0;
            *(_QWORD *)(v5 + 3608) = 0;
            *(_BYTE *)(v5 + 432) = 1;
          }
LABEL_384:
          *(_BYTE *)(v5 + 440) = v272;
          *(_BYTE *)(v5 + 448) = 1;
          if (*(_BYTE *)(v5 + 3632))
          {
            v291 = *(std::__shared_weak_count **)(v5 + 3408);
            if (v291)
            {
              v292 = (unint64_t *)&v291->__shared_owners_;
              do
                v293 = __ldaxr(v292);
              while (__stlxr(v293 - 1, v292));
              if (!v293)
              {
                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                std::__shared_weak_count::__release_weak(v291);
              }
            }
            AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v5 + 3232));
            v294 = *(std::__shared_weak_count **)(v5 + 3224);
            if (v294)
            {
              v295 = (unint64_t *)&v294->__shared_owners_;
              do
                v296 = __ldaxr(v295);
              while (__stlxr(v296 - 1, v295));
              if (!v296)
              {
                ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                std::__shared_weak_count::__release_weak(v294);
              }
            }
          }
          else
          {
            ((void (*)(const std::runtime_error *))v234->~runtime_error)(v234);
          }
          v297 = *(std::__shared_weak_count **)(v5 + 4704);
          if (v297)
          {
            v298 = (unint64_t *)&v297->__shared_owners_;
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
              std::__shared_weak_count::__release_weak(v297);
            }
          }
          v300 = *(std::__shared_weak_count **)(v5 + 4880);
          if (v300)
          {
            v301 = (unint64_t *)&v300->__shared_owners_;
            do
              v302 = __ldaxr(v301);
            while (__stlxr(v302 - 1, v301));
            if (!v302)
            {
              ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
              std::__shared_weak_count::__release_weak(v300);
            }
          }
          v303 = *(_QWORD **)(v5 + 4640);
          v304 = v406;
          if (v303 == v406)
          {
            v305 = 4;
          }
          else
          {
            if (!v303)
              goto LABEL_411;
            v305 = 5;
            v304 = *(_QWORD **)(v5 + 4640);
          }
          (*(void (**)(void))(*v304 + 8 * v305))();
LABEL_411:
          v306 = *(void ***)(v5 + 4456);
          if (v306)
          {
            do
            {
              v314 = (void **)*v306;
              if (*((char *)v306 + 39) < 0)
                operator delete(v306[2]);
              operator delete(v306);
              v306 = v314;
            }
            while (v314);
          }
          v307 = *(void **)(v5 + 4440);
          *(_QWORD *)(v5 + 4440) = 0;
          if (v307)
            operator delete(v307);
          v308 = *(std::__shared_weak_count **)(v5 + 4432);
          v258 = v407;
          if (v308)
          {
            v309 = (unint64_t *)&v308->__shared_owners_;
            do
              v310 = __ldaxr(v309);
            while (__stlxr(v310 - 1, v309));
            if (!v310)
            {
              ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
              std::__shared_weak_count::__release_weak(v308);
            }
          }
          v311 = *(std::__shared_weak_count **)(v5 + 4416);
          if (v311)
          {
            v312 = (unint64_t *)&v311->__shared_owners_;
            do
              v313 = __ldaxr(v312);
            while (__stlxr(v313 - 1, v312));
            if (!v313)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v408);
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v409);
          if (*(_BYTE *)(v5 + 2748))
            goto LABEL_425;
LABEL_493:
          ((void (*)(std::runtime_error *))v66->~runtime_error)(v66);
          if (!*(_BYTE *)(v5 + 2280))
            goto LABEL_496;
LABEL_494:
          if (!*(_BYTE *)(v5 + 2276))
          {
            ((void (*)())v413->~runtime_error)();
            v360 = *(std::__shared_weak_count **)(v5 + 4896);
            if (!v360)
              goto LABEL_528;
            goto LABEL_497;
          }
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v413);
LABEL_496:
          v360 = *(std::__shared_weak_count **)(v5 + 4896);
          if (!v360)
            goto LABEL_528;
LABEL_497:
          v361 = (unint64_t *)&v360->__shared_owners_;
          do
            v362 = __ldaxr(v361);
          while (__stlxr(v362 - 1, v361));
          if (!v362)
          {
            ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
            std::__shared_weak_count::__release_weak(v360);
          }
          goto LABEL_528;
        }
        v273 = *(_QWORD *)(v5 + 3240);
        *(_QWORD *)(v5 + 48) = v273;
        v274 = v5 + 48;
        *(_OWORD *)(v5 + 24) = *(_OWORD *)(v5 + 3216);
        v234->__vftable = 0;
        v234->__imp_.__imp_ = 0;
        *(_QWORD *)(v5 + 40) = *(_QWORD *)(v5 + 3232);
        v275 = *(_QWORD *)(v5 + 3248);
        *(_QWORD *)(v5 + 56) = v275;
        if (v275)
        {
          *(_QWORD *)(v273 + 16) = v274;
          *(_QWORD *)(v5 + 3232) = v5 + 3240;
          *(_QWORD *)(v5 + 3240) = 0;
          *(_QWORD *)(v5 + 3248) = 0;
        }
        else
        {
          *(_QWORD *)(v5 + 40) = v274;
        }
        v279 = v233[169];
        *(_BYTE *)(v5 + 96) = 0;
        v233[169] = 0u;
        v280 = v233[170];
        *(_OWORD *)(v5 + 64) = v279;
        *(_OWORD *)(v5 + 80) = v280;
        v233[170] = 0u;
        *(_BYTE *)(v5 + 120) = 0;
        if (*(_BYTE *)(v5 + 3312))
        {
          *(_QWORD *)(v5 + 112) = *(_QWORD *)(v5 + 3304);
          *(_OWORD *)(v5 + 96) = *(_OWORD *)(v5 + 3288);
          *(_QWORD *)(v5 + 3304) = 0;
          *(_QWORD *)(v5 + 3288) = 0;
          *(_QWORD *)(v5 + 3296) = 0;
          *(_BYTE *)(v5 + 120) = 1;
        }
        *(_BYTE *)(v5 + 128) = 0;
        *(_DWORD *)(v5 + 144) = -1;
        v281 = *(unsigned int *)(v5 + 3336);
        if ((_DWORD)v281 != -1)
        {
          ((void (*)(std::runtime_error *))off_1E253CA98[v281])(&v450);
          *(_DWORD *)(v5 + 144) = v281;
        }
        *(_OWORD *)(v5 + 152) = *(_OWORD *)(v5 + 3344);
        *(_DWORD *)(v5 + 168) = *(_DWORD *)(v5 + 3360);
        v282 = *(_QWORD *)(v5 + 3392);
        if (v282)
        {
          if (v282 == v5 + 3368)
          {
            *(_QWORD *)(v5 + 200) = v5 + 176;
            (*(void (**)(unint64_t))(*(_QWORD *)(v5 + 3368) + 24))(v5 + 3368);
            goto LABEL_378;
          }
          v283 = (_QWORD *)(v5 + 3392);
          *(_QWORD *)(v5 + 200) = v282;
        }
        else
        {
          v283 = (_QWORD *)(v5 + 200);
        }
        *v283 = 0;
LABEL_378:
        *(_OWORD *)(v5 + 208) = v233[178];
        v233[178] = 0u;
        goto LABEL_384;
      }
      *(_OWORD *)(v5 + 3216) = *(_OWORD *)(v226 + 8);
      v227->__vftable = 0;
      *(_QWORD *)(v226 + 16) = 0;
      *(_QWORD *)(v5 + 3232) = *(_QWORD *)(v226 + 24);
      v229 = v5 + 3240;
      v230 = (_QWORD *)(v226 + 32);
      v231 = *(_QWORD *)(v226 + 32);
      *(_QWORD *)(v5 + 3240) = v231;
      v232 = *(_QWORD *)(v226 + 40);
      *(_QWORD *)(v5 + 3248) = v232;
      v233 = (_OWORD *)v410;
      v234 = v412;
      if (v232)
      {
        *(_QWORD *)(v231 + 16) = v229;
        *(_QWORD *)(v226 + 24) = v230;
        *v230 = 0;
        *(_QWORD *)(v226 + 40) = 0;
      }
      else
      {
        *(_QWORD *)(v5 + 3232) = v229;
      }
      *(_OWORD *)(v410 + 2704) = *(_OWORD *)(v226 + 48);
      *(_QWORD *)(v226 + 48) = 0;
      *(_QWORD *)(v226 + 56) = 0;
      *(_OWORD *)(v410 + 2720) = *(_OWORD *)(v226 + 64);
      *(_QWORD *)(v226 + 64) = 0;
      *(_QWORD *)(v226 + 72) = 0;
      *(_BYTE *)(v5 + 3288) = 0;
      *(_BYTE *)(v5 + 3312) = 0;
      if (*(_BYTE *)(v226 + 104))
      {
        v239 = *(_OWORD *)(v226 + 80);
        *(_QWORD *)(v5 + 3304) = *(_QWORD *)(v226 + 96);
        *(_OWORD *)(v5 + 3288) = v239;
        *(_QWORD *)(v226 + 88) = 0;
        *(_QWORD *)(v226 + 96) = 0;
        *(_QWORD *)(v226 + 80) = 0;
        *(_BYTE *)(v5 + 3312) = 1;
      }
      *(_BYTE *)(v5 + 3320) = 0;
      *(_DWORD *)(v5 + 3336) = -1;
      v240 = *(unsigned int *)(v226 + 128);
      if ((_DWORD)v240 != -1)
      {
        ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v240])(&v450, v5 + 3320, v226 + 112);
        *(_DWORD *)(v5 + 3336) = v240;
      }
      v241 = *(_OWORD *)(v226 + 136);
      *(_DWORD *)(v5 + 3360) = *(_DWORD *)(v226 + 152);
      *(_OWORD *)(v5 + 3344) = v241;
      v242 = (_QWORD *)(v226 + 184);
      v243 = *(_QWORD *)(v226 + 184);
      if (v243)
      {
        v66 = (std::runtime_error *)v411;
        if (v243 == v226 + 160)
        {
          *(_QWORD *)(v5 + 3392) = v5 + 3368;
          (*(void (**)(_QWORD))(*(_QWORD *)*v242 + 24))(*v242);
          goto LABEL_330;
        }
        *(_QWORD *)(v5 + 3392) = v243;
      }
      else
      {
        v242 = (_QWORD *)(v5 + 3392);
        v66 = (std::runtime_error *)v411;
      }
      *v242 = 0;
LABEL_330:
      *(_OWORD *)(v410 + 2848) = *(_OWORD *)(v226 + 192);
      *(_QWORD *)(v226 + 192) = 0;
      *(_QWORD *)(v226 + 200) = 0;
      goto LABEL_362;
    }
LABEL_550:
    __break(1u);
    return;
  }
  if (!v199)
  {
    if (!*(_BYTE *)(v5 + 1152))
      goto LABEL_550;
    AMSCore::HTTPTransactionMetrics::HTTPTransactionMetrics((std::string *)&v414, (const AMSCore::HTTPTransactionMetrics *)(v5 + 720));
    if (!*(_BYTE *)(v5 + 2748))
      goto LABEL_550;
    AMSCore::Unexpected<AMSCore::HTTPError,AMSCore::HTTPTransactionMetrics,AMSCore::Error>(v441, (uint64_t)&v414, &v450);
    std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](v5 + 24);
    std::runtime_error::runtime_error((std::runtime_error *)(v5 + 24), &v450);
    v205 = v451;
    v206 = v453;
    v207 = v452;
    *(_QWORD *)(v5 + 64) = v453;
    v208 = v5 + 64;
    *(_OWORD *)(v5 + 40) = v205;
    *(_QWORD *)(v5 + 24) = off_1E2521330;
    *(_QWORD *)(v5 + 56) = v207;
    v209 = v454;
    *(_QWORD *)(v5 + 72) = v454;
    if (v209)
    {
      *(_QWORD *)(v206 + 16) = v208;
      v452 = &v453;
      v453 = 0;
      v454 = 0;
    }
    else
    {
      *(_QWORD *)(v5 + 56) = v208;
    }
    v244 = v455;
    *(_BYTE *)(v5 + 96) = 0;
    *(_OWORD *)(v5 + 80) = v244;
    v455 = 0uLL;
    *(_QWORD *)(v5 + 24) = &off_1E2521420;
    *(_BYTE *)(v5 + 120) = 0;
    if ((_BYTE)v457)
    {
      *(std::string *)(v5 + 96) = v456;
      memset(&v456, 0, sizeof(v456));
      *(_BYTE *)(v5 + 120) = 1;
    }
    v245 = v461;
    *(_OWORD *)(v5 + 160) = v460;
    *(_OWORD *)(v5 + 176) = v245;
    *(_OWORD *)(v5 + 192) = *(_OWORD *)v462;
    *(_OWORD *)(v5 + 201) = *(_OWORD *)&v462[9];
    v246 = v459;
    *(_OWORD *)(v5 + 128) = v458;
    *(_OWORD *)(v5 + 144) = v246;
    *(_OWORD *)(v5 + 224) = v463;
    v247 = v471;
    v248 = *(_OWORD *)v473;
    *(_OWORD *)(v5 + 360) = v472;
    *(_OWORD *)(v5 + 376) = v248;
    *(_OWORD *)(v5 + 386) = *(_OWORD *)&v473[10];
    v249 = v468;
    *(_OWORD *)(v5 + 280) = v467;
    *(_OWORD *)(v5 + 296) = v249;
    v250 = v470;
    *(_OWORD *)(v5 + 312) = v469;
    *(_OWORD *)(v5 + 328) = v250;
    *(_OWORD *)(v5 + 344) = v247;
    v251 = v466;
    *(_OWORD *)(v5 + 248) = v465;
    *(_QWORD *)(v5 + 240) = v464;
    v463 = 0uLL;
    v464 = 0;
    *(_OWORD *)(v5 + 264) = v251;
    *(_BYTE *)(v5 + 408) = 0;
    *(_BYTE *)(v5 + 432) = 0;
    if (v476)
    {
      *(_OWORD *)(v5 + 408) = v474;
      *(_QWORD *)(v5 + 424) = v475;
      v475 = 0;
      v474 = 0uLL;
      *(_BYTE *)(v5 + 432) = 1;
    }
    *(_BYTE *)(v5 + 440) = 0;
    *(_BYTE *)(v5 + 448) = 1;
    AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v450);
    v441[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v252 = v443;
    if (v443)
    {
      v253 = (unint64_t *)&v443->__shared_owners_;
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v442, v442[1]);
    MEMORY[0x18D7898AC](v441);
    if ((_BYTE)v436 && SHIBYTE(v435) < 0)
      operator delete(*((void **)&v434 + 1));
    v255 = *((_QWORD *)&v423 + 1);
    if (*((_QWORD *)&v423 + 1))
    {
      v256 = v424;
      v257 = (void *)*((_QWORD *)&v423 + 1);
      if ((_QWORD)v424 != *((_QWORD *)&v423 + 1))
      {
        do
        {
          if (*(char *)(v256 - 1) < 0)
            operator delete(*(void **)(v256 - 24));
          v256 -= 24;
        }
        while (v256 != v255);
        v257 = (void *)*((_QWORD *)&v423 + 1);
      }
      *(_QWORD *)&v424 = v255;
      operator delete(v257);
    }
    if (BYTE8(v415) && SBYTE7(v415) < 0)
      operator delete(v414.__vftable);
    v258 = v407;
    if (!*(_BYTE *)(v5 + 2748))
      goto LABEL_493;
LABEL_425:
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v66);
    if (!*(_BYTE *)(v5 + 2280))
      goto LABEL_496;
    goto LABEL_494;
  }
  if (!*(_BYTE *)(v5 + 1152))
    goto LABEL_550;
  AMSCore::HTTPResponse::HTTPResponse((uint64_t)v402, (__int128 *)v8);
  *(_QWORD *)(v5 + 4952) = *(_QWORD *)(v5 + 4968);
  v210 = *(_QWORD *)(v5 + 4976);
  *(_QWORD *)(v5 + 4960) = v210;
  if (v210)
  {
    v211 = (unint64_t *)(v210 + 8);
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
  }
  *(_QWORD *)(v5 + 4552) = *(_QWORD *)(v5 + 4488);
  *(_QWORD *)(v5 + 4560) = *(_QWORD *)(v5 + 4496);
  *v404 = 0;
  v404[1] = 0;
  v213 = *(_QWORD *)(v5 + 4504);
  v214 = *(_QWORD *)(v5 + 4512);
  *(_QWORD *)(v5 + 4512) = 0;
  *(_QWORD *)(v5 + 4504) = 0;
  *(_QWORD *)(v5 + 4568) = v213;
  *(_QWORD *)(v5 + 4576) = v214;
  v215 = *(_QWORD *)(v5 + 4520);
  *(_QWORD *)(v5 + 4584) = v215;
  v216 = *(_QWORD *)(v5 + 4528);
  *(_QWORD *)(v5 + 4592) = v216;
  *(_DWORD *)(v5 + 4600) = *(_DWORD *)(v5 + 4536);
  if (v216)
  {
    v217 = *(_QWORD *)(v215 + 8);
    if ((v214 & (v214 - 1)) != 0)
    {
      if (v217 >= v214)
        v217 %= v214;
    }
    else
    {
      v217 &= v214 - 1;
    }
    *(_QWORD *)(v213 + 8 * v217) = v5 + 4584;
    *(_QWORD *)(v5 + 4520) = 0;
    *(_QWORD *)(v5 + 4528) = 0;
  }
  *(_WORD *)(v5 + 4608) = *(_WORD *)(v5 + 4544);
  v315 = *(_QWORD *)(v5 + 4872);
  v316 = *(_QWORD *)(v5 + 4880);
  v401->__vftable = 0;
  v401->__imp_.__imp_ = 0;
  *(_QWORD *)(v5 + 4696) = v315;
  *(_QWORD *)(v5 + 4704) = v316;
  if (atomic_load((unint64_t *)(v315 + 216)))
    goto LABEL_437;
  *v395 = 6;
  v318 = (unint64_t *)(*v91 + 216);
  do
    v319 = __ldaxr(v318);
  while (__stlxr(v5, v318));
  if (v319)
  {
LABEL_437:
    v320 = *v91;
    if (!*(_BYTE *)(*v91 + 208))
      goto LABEL_550;
    *(_OWORD *)(v5 + 3216) = *(_OWORD *)(v320 + 8);
    *(_QWORD *)(v320 + 8) = 0;
    *(_QWORD *)(v320 + 16) = 0;
    v321 = (_QWORD *)(v5 + 3232);
    *(_QWORD *)(v5 + 3232) = *(_QWORD *)(v320 + 24);
    v322 = (_QWORD *)(v5 + 3240);
    v323 = (_QWORD *)(v320 + 32);
    v324 = *(_QWORD *)(v320 + 32);
    *(_QWORD *)(v5 + 3240) = v324;
    v325 = *(_QWORD *)(v320 + 40);
    *(_QWORD *)(v5 + 3248) = v325;
    if (v325)
    {
      *(_QWORD *)(v324 + 16) = v322;
      *(_QWORD *)(v320 + 24) = v323;
      *v323 = 0;
      *(_QWORD *)(v320 + 40) = 0;
    }
    else
    {
      *v321 = v322;
    }
    *(_OWORD *)(v410 + 2704) = *(_OWORD *)(v320 + 48);
    *(_QWORD *)(v320 + 48) = 0;
    *(_QWORD *)(v320 + 56) = 0;
    *(_OWORD *)(v410 + 2720) = *(_OWORD *)(v320 + 64);
    *(_QWORD *)(v320 + 64) = 0;
    *(_QWORD *)(v320 + 72) = 0;
    v326 = (_OWORD *)(v5 + 3288);
    *(_BYTE *)(v5 + 3288) = 0;
    *(_BYTE *)(v5 + 3312) = 0;
    if (*(_BYTE *)(v320 + 104))
    {
      v327 = *(_OWORD *)(v320 + 80);
      *(_QWORD *)(v5 + 3304) = *(_QWORD *)(v320 + 96);
      *v326 = v327;
      *(_QWORD *)(v320 + 88) = 0;
      *(_QWORD *)(v320 + 96) = 0;
      *(_QWORD *)(v320 + 80) = 0;
      *(_BYTE *)(v5 + 3312) = 1;
    }
    *(_BYTE *)(v5 + 3320) = 0;
    *(_DWORD *)(v5 + 3336) = -1;
    v328 = *(unsigned int *)(v320 + 128);
    if ((_DWORD)v328 != -1)
    {
      ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v328])(&v450, v5 + 3320, v320 + 112);
      *(_DWORD *)(v5 + 3336) = v328;
    }
    v329 = *(_OWORD *)(v320 + 136);
    *(_DWORD *)(v5 + 3360) = *(_DWORD *)(v320 + 152);
    *(_OWORD *)(v5 + 3344) = v329;
    v330 = v5 + 3368;
    v331 = (_QWORD *)(v320 + 184);
    v332 = *(_QWORD *)(v320 + 184);
    if (v332)
    {
      if (v332 == v320 + 160)
      {
        *(_QWORD *)(v5 + 3392) = v330;
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v331 + 24))(*v331, v5 + 3368);
LABEL_451:
        v333 = (__int128 *)(v410 + 2704);
        v334 = (__int128 *)(v410 + 2720);
        *(_OWORD *)(v410 + 2848) = *(_OWORD *)(v320 + 192);
        *(_QWORD *)(v320 + 192) = 0;
        *(_QWORD *)(v320 + 200) = 0;
        std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](v5 + 24);
        v335 = *(_QWORD *)(v5 + 3240);
        *(_QWORD *)(v5 + 48) = v335;
        v336 = v5 + 48;
        *(_OWORD *)(v5 + 24) = *(_OWORD *)(v5 + 3216);
        v412->__vftable = 0;
        v412->__imp_.__imp_ = 0;
        *(_QWORD *)(v5 + 40) = *(_QWORD *)(v5 + 3232);
        v337 = *(_QWORD *)(v5 + 3248);
        *(_QWORD *)(v5 + 56) = v337;
        if (v337)
        {
          *(_QWORD *)(v335 + 16) = v336;
          *v321 = v322;
          *v322 = 0;
          *(_QWORD *)(v5 + 3248) = 0;
        }
        else
        {
          *(_QWORD *)(v5 + 40) = v336;
        }
        v338 = *v333;
        *(_BYTE *)(v5 + 96) = 0;
        *(_QWORD *)v333 = 0;
        *(_QWORD *)(v410 + 2712) = 0;
        v339 = *v334;
        *(_OWORD *)(v5 + 64) = v338;
        *(_OWORD *)(v5 + 80) = v339;
        *(_QWORD *)v334 = 0;
        *(_QWORD *)(v410 + 2728) = 0;
        *(_BYTE *)(v5 + 120) = 0;
        if (*(_BYTE *)(v5 + 3312))
        {
          *(_OWORD *)(v5 + 96) = *v326;
          *(_QWORD *)(v5 + 112) = *(_QWORD *)(v5 + 3304);
          *(_QWORD *)(v5 + 3296) = 0;
          *(_QWORD *)(v5 + 3304) = 0;
          *(_QWORD *)v326 = 0;
          *(_BYTE *)(v5 + 120) = 1;
        }
        *(_BYTE *)(v5 + 128) = 0;
        *(_DWORD *)(v5 + 144) = -1;
        v340 = *(unsigned int *)(v5 + 3336);
        v50 = v395;
        if ((_DWORD)v340 != -1)
        {
          ((void (*)(std::runtime_error *))off_1E253CA98[v340])(&v450);
          *(_DWORD *)(v5 + 144) = v340;
        }
        *(_OWORD *)(v5 + 152) = *(_OWORD *)(v5 + 3344);
        *(_DWORD *)(v5 + 168) = *(_DWORD *)(v5 + 3360);
        v341 = *(_QWORD *)(v5 + 3392);
        if (v341)
        {
          if (v341 == v330)
          {
            *(_QWORD *)(v5 + 200) = v5 + 176;
            (*(void (**)(unint64_t))(*(_QWORD *)(v5 + 3368) + 24))(v5 + 3368);
            v66 = (std::runtime_error *)v411;
            goto LABEL_464;
          }
          v342 = (_QWORD *)(v5 + 3392);
          *(_QWORD *)(v5 + 200) = v341;
        }
        else
        {
          v342 = (_QWORD *)(v5 + 200);
        }
        *v342 = 0;
        v66 = (std::runtime_error *)v411;
LABEL_464:
        *(_OWORD *)(v5 + 208) = *(_OWORD *)(v410 + 2848);
        *(_QWORD *)(v410 + 2848) = 0;
        *(_QWORD *)(v410 + 2856) = 0;
        *(_BYTE *)(v5 + 440) = 1;
        *(_BYTE *)(v5 + 448) = 1;
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v5 + 3232));
        v343 = *(std::__shared_weak_count **)(v5 + 3224);
        if (v343)
        {
          v344 = (unint64_t *)&v343->__shared_owners_;
          do
            v345 = __ldaxr(v344);
          while (__stlxr(v345 - 1, v344));
          if (!v345)
          {
            ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
            std::__shared_weak_count::__release_weak(v343);
          }
        }
        v346 = *(std::__shared_weak_count **)(v5 + 4704);
        if (v346)
        {
          v347 = (unint64_t *)&v346->__shared_owners_;
          do
            v348 = __ldaxr(v347);
          while (__stlxr(v348 - 1, v347));
          if (!v348)
          {
            ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
            std::__shared_weak_count::__release_weak(v346);
          }
        }
        v349 = *(std::__shared_weak_count **)(v5 + 4880);
        if (v349)
        {
          v350 = (unint64_t *)&v349->__shared_owners_;
          do
            v351 = __ldaxr(v350);
          while (__stlxr(v351 - 1, v350));
          if (!v351)
          {
            ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
            std::__shared_weak_count::__release_weak(v349);
          }
        }
        v352 = *(void ***)(v5 + 4584);
        if (v352)
        {
          do
          {
            v363 = (void **)*v352;
            if (*((char *)v352 + 39) < 0)
              operator delete(v352[2]);
            operator delete(v352);
            v352 = v363;
          }
          while (v363);
        }
        v353 = *(void **)(v5 + 4568);
        *(_QWORD *)(v5 + 4568) = 0;
        if (v353)
          operator delete(v353);
        v354 = *(std::__shared_weak_count **)(v5 + 4560);
        v258 = v407;
        if (v354)
        {
          v355 = (unint64_t *)&v354->__shared_owners_;
          do
            v356 = __ldaxr(v355);
          while (__stlxr(v356 - 1, v355));
          if (!v356)
          {
            ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
            std::__shared_weak_count::__release_weak(v354);
          }
        }
        v357 = *(std::__shared_weak_count **)(v5 + 4960);
        if (v357)
        {
          v358 = (unint64_t *)&v357->__shared_owners_;
          do
            v359 = __ldaxr(v358);
          while (__stlxr(v359 - 1, v358));
          if (!v359)
          {
            ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
            std::__shared_weak_count::__release_weak(v357);
          }
        }
        AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)v402);
        if (!*(_BYTE *)(v5 + 2748))
          goto LABEL_493;
        goto LABEL_425;
      }
      *(_QWORD *)(v5 + 3392) = v332;
    }
    else
    {
      v331 = (_QWORD *)(v5 + 3392);
    }
    *v331 = 0;
    goto LABEL_451;
  }
}

void sub_18CD0C468(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,AMSCore::ExecuteHTTPRequestTask::Context *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,AMSCore::HTTPError *a31,AMSCore::EncodeHTTPRequestTask::Result *a32,AMSCore::HTTPResponseAction *a33,uint64_t a34,AMSCore::HTTPResponseAction *a35,uint64_t a36,AMSCore::HTTPResponseAction *a37)
{
  uint64_t v37;
  uint64_t v38;
  AMSCore::HTTPResponse *v39;
  uint64_t v40;
  uint64_t v41;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v41);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v40);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v38);
  std::optional<std::expected<AMSCore::HTTPResponseAction,AMSCore::Error>>::~optional(a37);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a17);
  if (*(_BYTE *)(v37 + 1152))
    AMSCore::HTTPResponse::~HTTPResponse(v39);
  else
    (**(void (***)(AMSCore::HTTPResponse *))v39)(v39);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a18);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::unhandled_exception(a31);
}

void sub_18CD0C6FC()
{
  __cxa_end_catch();
  JUMPOUT(0x18CD0C3A4);
}

void sub_18CD0C708(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _BYTE *v2;

  *v1 = 0;
  *v2 = 7;
  _Unwind_Resume(a1);
}

void sub_18CD0C784()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void **v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;

  v3 = *(_QWORD *)(v0 + 4992);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      v6 = *(std::__shared_weak_count **)(v0 + 4992);
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v7 = *(std::__shared_weak_count **)(v0 + 2296);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)(v0 + 4928);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__shared_weak_count **)(v0 + 1824);
  if (!v13)
    goto LABEL_22;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_22:
    v16 = *(std::__shared_weak_count **)(v0 + 4944);
    if (!v16)
      goto LABEL_27;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = *(std::__shared_weak_count **)(v0 + 4944);
    if (!v16)
      goto LABEL_27;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_27:
  v19 = *(std::__shared_weak_count **)(v0 + 4976);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::~Promise(v2);
  v22 = *(_QWORD **)(v0 + 4672);
  if (v22 == v1)
  {
    v23 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_37;
    v23 = 5;
    v1 = *(_QWORD **)(v0 + 4672);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v23))(v1);
LABEL_37:
  v24 = *(void ***)(v0 + 4520);
  if (v24)
  {
    do
    {
      v32 = (void **)*v24;
      if (*((char *)v24 + 39) < 0)
        operator delete(v24[2]);
      operator delete(v24);
      v24 = v32;
    }
    while (v32);
  }
  v25 = *(void **)(v0 + 4504);
  *(_QWORD *)(v0 + 4504) = 0;
  if (v25)
    operator delete(v25);
  v26 = *(std::__shared_weak_count **)(v0 + 4496);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(std::__shared_weak_count **)(v0 + 4024);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(v0 + 3640));
  operator delete((void *)v0);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E25236C0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CD0D150(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 440);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CD0D184(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 424))
  {
    if (*(_BYTE *)(a1 + 416))
    {
      v2 = *(std::__shared_weak_count **)(a1 + 192);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 16));
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        v6 = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))a1)(a1);
    }
    *(_BYTE *)(a1 + 424) = 0;
  }
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[33]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string __what_arg;
  std::error_code v14;

  v3 = a2;
  AMSCore::StringUtils::join<char [33]>(&__what_arg, "Trusted domains were not loaded.");
  *(_QWORD *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v9 = &v10;
  v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v4 = v10;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = a1 + 40;
  v6 = v11;
  *(_QWORD *)(a1 + 48) = v11;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    v4 = 0;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x18D7898AC](&v8);
}

void sub_18CD0D35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [34],AMSCore::HTTPError>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"The HTTP request failed. error = ", 33);
    AMSCore::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 4;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "networking", 10, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CD0D5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [39],AMSCore::HTTPResponse>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  std::string::size_type size;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string::size_type v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[8];
  void *v47[2];
  __int128 v48;
  int v49;
  uint64_t v50[19];
  void *__p[2];
  char v52;
  std::string v53;
  char v54;
  _BYTE v55[24];
  int v56;
  char v57;
  std::string v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v50[0] = MEMORY[0x1E0DE4FE0] + 64;
    v45 = v7;
    *(_QWORD *)((char *)&v46[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v46[-1] + *(_QWORD *)(v45 - 24));
    std::ios_base::init(v9, v46);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v45 = v4 + 24;
    v50[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v46[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)v47 = 0u;
    v48 = 0u;
    v49 = 16;
    v11 = *(_QWORD *)(v45 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Received an HTTP response. response = ", 38);
    v58.__r_.__value_.__s.__data_[0] = 123;
    v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v45, (uint64_t)&v58, 1);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"\"status\": ", 10);
    v14 = (_QWORD *)std::ostream::operator<<();
    v58.__r_.__value_.__s.__data_[0] = 44;
    v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)&v58, 1);
    v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"statusText\": \"\",", 17);
    v17 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"headersSize\": -1,", 18);
    v18 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"bodySize\": -1,", 15);
    v19 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v18, (uint64_t)"\"headers\": ", 11);
    AMSCore::operator<<(v19, a2 + 160);
    v20 = *(_QWORD *)(v45 - 24);
    if ((v21 & 1) == 0
    {
    }
    {
      v22 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v45, (uint64_t)",\"content\":{", 12);
      v23 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v22, (uint64_t)"\"size\": -1,", 11);
      v24 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)"\"mimeType\": \"\",", 15);
      v25 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"comment\": \"Response body redacted.\"", 36);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)"}", 1);
    }
    else
    {
      v52 = 12;
      strcpy((char *)__p, "Content-Type");
      AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v53, (_QWORD *)(a2 + 160), (char *)__p);
      v56 = 0;
      if (v54)
      {
        v58 = v53;
        memset(&v53, 0, sizeof(v53));
        LODWORD(v59) = 5;
        AMSCore::Any::operator=((uint64_t)v55, (uint64_t)&v58);
        if ((_DWORD)v59 != -1)
          ((void (*)(char *, std::string *))off_1E253D240[v59])(&v57, &v58);
      }
      if (v52 < 0)
        operator delete(__p[0]);
      v26 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v45, (uint64_t)",\"content\":{", 12);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v26, (uint64_t)"\"size\":", 7);
      v27 = (_QWORD *)std::ostream::operator<<();
      v58.__r_.__value_.__s.__data_[0] = 44;
      v28 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v27, (uint64_t)&v58, 1);
      v29 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v28, (uint64_t)"\"mimeType\":", 11);
      v58.__r_.__value_.__s.__data_[0] = 44;
      v31 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v30, (uint64_t)&v58, 1);
      v32 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v31, (uint64_t)"\"text\":\"", 8);
      v33 = *(char *)(a2 + 223);
      if (v33 >= 0)
        v34 = a2 + 200;
      else
        v34 = *(_QWORD *)(a2 + 200);
      if (v33 >= 0)
        v35 = *(unsigned __int8 *)(a2 + 223);
      else
        v35 = *(_QWORD *)(a2 + 208);
      AMSCore::Base64::encode(v34, v35, &v58);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v58;
      else
        v36 = (std::string *)v58.__r_.__value_.__r.__words[0];
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
      else
        size = v58.__r_.__value_.__l.__size_;
      v38 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v32, (uint64_t)v36, size);
      LOBYTE(__p[0]) = 34;
      v39 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v38, (uint64_t)__p, 1);
      LOBYTE(__p[0]) = 44;
      v40 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v39, (uint64_t)__p, 1);
      v41 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v40, (uint64_t)"\"encoding\": \"base64\"", 20);
      LOBYTE(__p[0]) = 125;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v41, (uint64_t)__p, 1);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (v56 != -1)
        ((void (*)(std::string *, _BYTE *))off_1E253D240[v56])(&v58, v55);
    }
    v58.__r_.__value_.__s.__data_[0] = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v45, (uint64_t)&v58, 1);
    v42 = v46[5];
    v43 = (char *)&v46[-1] + *(_QWORD *)(v45 - 24);
    if ((v43[32] & 5) != 0)
    {
      v44 = -1;
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v43 + 5) + 32))(&v58, *((_QWORD *)v43 + 5), 0, 1, 16);
      v44 = v60;
    }
    v58.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v58.__r_.__value_.__r.__words[1]) = 2;
    v58.__r_.__value_.__r.__words[2] = v42;
    v59 = v44;
    (*(void (**)(_QWORD, const char *, uint64_t, std::string *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "networking", 10, &v58);
    v45 = *v6;
    *(_QWORD *)((char *)&v46[-1] + *(_QWORD *)(v45 - 24)) = v6[3];
    v46[0] = v10 + 16;
    if (SBYTE7(v48) < 0)
      operator delete(v47[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v50);
  }
  return result;
}

void sub_18CD0DBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::optional<std::expected<AMSCore::HTTPResponseAction,AMSCore::Error>>::operator=[abi:fe180100]<AMSCore::HTTPResponseAction,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 464))
  {
    if (*(_BYTE *)(a1 + 460))
    {
      AMSCore::HTTPResponseAction::operator=(a1, a2);
    }
    else
    {
      (**(void (***)(uint64_t))a1)(a1);
      AMSCore::HTTPResponseAction::HTTPResponseAction(a1, a2);
      *(_BYTE *)(a1 + 460) = 1;
    }
  }
  else
  {
    AMSCore::HTTPResponseAction::HTTPResponseAction(a1, a2);
    *(_BYTE *)(a1 + 460) = 1;
    *(_BYTE *)(a1 + 464) = 1;
  }
  return a1;
}

uint64_t *AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleRetryAction(std::runtime_error *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char **v16;
  void **v17;
  _QWORD *v18;
  unsigned int v19;
  std::runtime_error *v20;
  uint64_t v21;
  BOOL v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::ios_base *v29;
  uint64_t v30;
  std::error_code v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t *v44;
  char *v45;
  void (__cdecl *v46)(std::system_error *__hidden);
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  int8x8_t v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void **v61;
  uint64_t *v62;
  int v63;
  unsigned __int8 v64;
  unsigned int v65;
  char *v66;
  std::system_error_vtbl *v67;
  uint64_t v68;
  std::system_error_vtbl *v69;
  std::system_error_vtbl *v70;
  std::ios_base *v71;
  char *v72;
  unsigned __int8 v73;
  char *imp;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t *result;
  __int128 v99;
  unint64_t *v101;
  unint64_t v102;
  const std::runtime_error *v103;
  char v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  std::error_code v131;
  uint64_t v132;
  uint64_t *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  __int128 v138;
  unint64_t *v140;
  unint64_t v141;
  const std::runtime_error *v142;
  char v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  void **v160;
  void **i;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  _QWORD *v169;
  char *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  char v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  char *v215;
  _QWORD *v216;
  uint64_t v217;
  void **v218;
  void *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  void **v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::error_code v235;
  uint64_t v236;
  uint64_t *v237;
  char *v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  unint64_t v249;
  const char *v250;
  std::system_error_vtbl *v251;
  uint64_t *__s2;
  int v253;
  std::runtime_error *v254;
  _QWORD *v255;
  void **v256;
  char *v257;
  char *v258;
  char *v259;
  AMSCore::HTTPResponseAction *v260;
  __int128 *v261;
  std::runtime_error *v262;
  _BYTE *v263;
  char *v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  _BYTE v269[25];
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _BYTE v278[26];
  std::string __what_arg;
  std::string v280;
  __int128 __p;
  __int128 v282;
  int v283;
  uint64_t v284[19];
  char *v285;
  std::__shared_weak_count *v286;
  char v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _OWORD v292[2];
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  _OWORD v304[2];
  char v305;
  char v306;
  std::system_error v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  _OWORD v318[2];
  __int128 v319;
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  _OWORD v329[2];
  __int128 v330;
  uint64_t v331;
  char v332;
  std::runtime_error v333;
  std::error_code ec;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  char v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  _BYTE v346[25];
  __int128 v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  _OWORD v357[2];
  __int128 v358;
  uint64_t v359;
  char v360;
  uint64_t v361;
  std::error_code v362;
  std::error_code v363;

  v361 = *MEMORY[0x1E0C80C00];
  v10 = (char *)operator new(0xD18uLL);
  v260 = (AMSCore::HTTPResponseAction *)(v10 + 960);
  v258 = v10 + 3160;
  v257 = v10 + 3192;
  v256 = (void **)(v10 + 2640);
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)(v10 + 496), a2);
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v10 + 2248), a3);
  *((_OWORD *)v10 + 164) = *(_OWORD *)(a3 + 376);
  *(_QWORD *)(a3 + 376) = 0;
  *(_QWORD *)(a3 + 384) = 0;
  v259 = v10 + 3032;
  *(_OWORD *)(v10 + 3032) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v11 = *(_QWORD *)(a4 + 16);
  v12 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *((_QWORD *)v10 + 381) = v11;
  *((_QWORD *)v10 + 382) = v12;
  v13 = *(_QWORD *)(a4 + 32);
  *((_QWORD *)v10 + 383) = v13;
  v14 = *(_QWORD *)(a4 + 40);
  *((_QWORD *)v10 + 384) = v14;
  *((_DWORD *)v10 + 770) = *(_DWORD *)(a4 + 48);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v10 + 3064;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
  }
  v16 = &v285;
  v261 = (__int128 *)(v10 + 1464);
  v262 = (std::runtime_error *)(v10 + 1424);
  v263 = v10 + 3344;
  v17 = (void **)(v10 + 3224);
  v255 = v10 + 3264;
  *((_WORD *)v10 + 1544) = *(_WORD *)(a4 + 56);
  v18 = (_QWORD *)a5[3];
  if (v18)
  {
    if (v18 == a5)
    {
      *((_QWORD *)v10 + 398) = v258;
      (*(void (**)(_QWORD *))(*a5 + 24))(a5);
    }
    else
    {
      *((_QWORD *)v10 + 398) = v18;
      a5[3] = 0;
    }
  }
  else
  {
    *((_QWORD *)v10 + 398) = 0;
  }
  do
    v19 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v19 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v10[24] = 0;
  v20 = (std::runtime_error *)(v10 + 24);
  v10[448] = 0;
  *((_QWORD *)v10 + 57) = 0;
  *((_QWORD *)v10 + 61) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::get_return_object(void)::DetachPromise,void>(&v307, (uint64_t)(v10 + 16));
  *a1 = v307.std::runtime_error;
  v21 = *((int *)v10 + 238);
  if ((_DWORD)v21 != 2)
  {
    v23 = 0;
    v22 = (_DWORD)v21 == 3 && v10[872] != 0;
    v264 = v10 + 16;
LABEL_20:
    if (!v22)
    {
      LOBYTE(v265) = 0;
      BYTE8(v265) = 0;
      LOBYTE(v266) = 0;
      BYTE8(v266) = 0;
      LOBYTE(v267) = 0;
      BYTE8(v267) = 0;
      LOBYTE(v268) = 0;
      BYTE8(v268) = 0;
      v269[0] = 0;
      v269[8] = 0;
      v269[16] = 0;
      v269[24] = 0;
      BYTE8(v270) = 0;
      LOBYTE(v271) = 0;
      BYTE8(v271) = 0;
      LOBYTE(v272) = 0;
      BYTE8(v272) = 0;
      LOBYTE(v273) = 0;
      BYTE8(v273) = 0;
      LOBYTE(v274) = 0;
      BYTE8(v274) = 0;
      LOBYTE(v275) = 0;
      BYTE8(v275) = 0;
      LOBYTE(v276) = 0;
      BYTE8(v276) = 0;
      LOBYTE(v277) = 0;
      BYTE8(v277) = 0;
      v278[8] = 0;
      v278[16] = 0;
      *(_WORD *)&v278[24] = 0;
      LOBYTE(v270) = 0;
      *(_DWORD *)v278 = 0;
      LOBYTE(v285) = 0;
      v287 = 0;
      v290 = v267;
      v291 = v268;
      v292[0] = *(_OWORD *)v269;
      *(_OWORD *)((char *)v292 + 9) = *(_OWORD *)&v269[9];
      v288 = v265;
      v289 = v266;
      v295 = 0;
      v293 = 0;
      v294 = 0;
      *(_OWORD *)((char *)v304 + 10) = *(_OWORD *)&v278[10];
      v303 = v277;
      v304[0] = *(_OWORD *)v278;
      v302 = v276;
      v301 = v275;
      v300 = v274;
      v299 = v273;
      v298 = v272;
      v297 = v271;
      v296 = v270;
      v305 = 0;
      v306 = 0;
      v24 = MEMORY[0x1E0DE4FE0];
      v25 = MEMORY[0x1E0DE4FE0] + 64;
      v26 = (std::string::size_type *)MEMORY[0x1E0DE4F60];
      v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v28 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v284[0] = MEMORY[0x1E0DE4FE0] + 64;
      v280.__r_.__value_.__r.__words[0] = v27;
      *(std::string::size_type *)((char *)v280.__r_.__value_.__r.__words + *(_QWORD *)(v27 - 24)) = v28;
      v29 = (std::ios_base *)((char *)&v280 + *(_QWORD *)(v280.__r_.__value_.__r.__words[0] - 24));
      std::ios_base::init(v29, &v280.__r_.__value_.__r.__words[1]);
      v29[1].__vftable = 0;
      v29[1].__fmtflags_ = -1;
      v280.__r_.__value_.__r.__words[0] = v24 + 24;
      v284[0] = v25;
      std::streambuf::basic_streambuf();
      v30 = MEMORY[0x1E0DE4FB8];
      v280.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
      __p = 0u;
      v282 = 0u;
      v283 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v280, (uint64_t)"handleRetryAction", 17);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v280, (uint64_t)" called with an invalid action. action = ", 41);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v280, (uint64_t)off_1E253D2A0[v21], qword_18CF5C2D8[v21]);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v280.__r_.__value_.__l.__size_, &__what_arg);
      v280.__r_.__value_.__r.__words[0] = *v26;
      *(std::string::size_type *)((char *)v280.__r_.__value_.__r.__words
                                + *(_QWORD *)(v280.__r_.__value_.__r.__words[0] - 24)) = v26[3];
      v280.__r_.__value_.__l.__size_ = v30 + 16;
      if (SBYTE7(v282) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v284);
      v362.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v362.__val_ = 3;
      std::system_error::system_error(&v307, v362, &__what_arg);
      if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__what_arg.__r_.__value_.__l.__data_);
      v310 = 0;
      v309 = 0;
      v311 = 0uLL;
      v308 = &v309;
      v307.__vftable = (std::system_error_vtbl *)&off_1E2521420;
      LOBYTE(v312) = 0;
      BYTE8(v313) = 0;
      v316 = v290;
      v317 = v291;
      v318[0] = v292[0];
      *(_OWORD *)((char *)v318 + 9) = *(_OWORD *)((char *)v292 + 9);
      v314 = v288;
      v315 = v289;
      v319 = 0uLL;
      v320 = 0;
      v294 = 0;
      v295 = 0;
      v293 = 0;
      *(_OWORD *)((char *)v329 + 10) = *(_OWORD *)((char *)v304 + 10);
      v327 = v302;
      v328 = v303;
      v329[0] = v304[0];
      v323 = v298;
      v324 = v299;
      v325 = v300;
      v326 = v301;
      v321 = v296;
      v322 = v297;
      LOBYTE(v330) = 0;
      v332 = 0;
      std::runtime_error::runtime_error(&v333, &v307);
      ec = v307.__ec_;
      v335 = v308;
      v336 = v309;
      v337 = v310;
      if (v310)
      {
        *(_QWORD *)(v309 + 16) = &v336;
        v308 = &v309;
        v309 = 0;
        v310 = 0;
      }
      else
      {
        v335 = &v336;
      }
      v338 = v311;
      v311 = 0uLL;
      v333.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
      LOBYTE(v339) = 0;
      v341 = 0;
      if (BYTE8(v313))
      {
        v339 = v312;
        v340 = v313;
        *(_QWORD *)&v313 = 0;
        v312 = 0uLL;
        v341 = 1;
      }
      v344 = v316;
      v345 = v317;
      *(_OWORD *)v346 = v318[0];
      *(_OWORD *)&v346[9] = *(_OWORD *)((char *)v318 + 9);
      v342 = v314;
      v343 = v315;
      v347 = v319;
      v348 = v320;
      v320 = 0;
      v319 = 0uLL;
      *(_OWORD *)((char *)v357 + 10) = *(_OWORD *)((char *)v329 + 10);
      v355 = v327;
      v356 = v328;
      v357[0] = v329[0];
      v351 = v323;
      v352 = v324;
      v353 = v325;
      v354 = v326;
      v349 = v321;
      v350 = v322;
      LOBYTE(v358) = 0;
      v360 = 0;
      if (v332)
      {
        v358 = v330;
        v359 = v331;
        v331 = 0;
        v330 = 0uLL;
        v360 = 1;
      }
      AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v307);
      std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)(v10 + 24));
      std::runtime_error::runtime_error((std::runtime_error *)(v10 + 24), &v333);
      v31 = ec;
      v32 = v336;
      v33 = v335;
      *((_QWORD *)v10 + 8) = v336;
      v34 = v10 + 64;
      *(std::error_code *)(v10 + 40) = v31;
      *((_QWORD *)v10 + 3) = off_1E2521330;
      *((_QWORD *)v10 + 7) = v33;
      v35 = v337;
      *((_QWORD *)v10 + 9) = v337;
      if (v35)
      {
        *(_QWORD *)(v32 + 16) = v34;
        v335 = &v336;
        v336 = 0;
        v337 = 0;
      }
      else
      {
        *((_QWORD *)v10 + 7) = v34;
      }
      v36 = v338;
      v10[96] = 0;
      *((_OWORD *)v10 + 5) = v36;
      v338 = 0uLL;
      *((_QWORD *)v10 + 3) = &off_1E2521420;
      v10[120] = 0;
      if (v341)
      {
        *((_OWORD *)v10 + 6) = v339;
        *((_QWORD *)v10 + 14) = v340;
        v340 = 0;
        v339 = 0uLL;
        v10[120] = 1;
      }
      v37 = v345;
      *((_OWORD *)v10 + 10) = v344;
      *((_OWORD *)v10 + 11) = v37;
      *((_OWORD *)v10 + 12) = *(_OWORD *)v346;
      *(_OWORD *)(v10 + 201) = *(_OWORD *)&v346[9];
      v38 = v343;
      *((_OWORD *)v10 + 8) = v342;
      *((_OWORD *)v10 + 9) = v38;
      *((_OWORD *)v10 + 14) = v347;
      v39 = v355;
      v40 = v357[0];
      *(_OWORD *)(v10 + 360) = v356;
      *(_OWORD *)(v10 + 376) = v40;
      *(_OWORD *)(v10 + 386) = *(_OWORD *)((char *)v357 + 10);
      v41 = v352;
      *(_OWORD *)(v10 + 280) = v351;
      *(_OWORD *)(v10 + 296) = v41;
      v42 = v354;
      *(_OWORD *)(v10 + 312) = v353;
      *(_OWORD *)(v10 + 328) = v42;
      *(_OWORD *)(v10 + 344) = v39;
      v43 = v350;
      *(_OWORD *)(v10 + 248) = v349;
      *((_QWORD *)v10 + 30) = v348;
      v348 = 0;
      v347 = 0uLL;
      *(_OWORD *)(v10 + 264) = v43;
      v10[408] = 0;
      v10[432] = 0;
      if (v360)
      {
        *(_OWORD *)(v10 + 408) = v358;
        *((_QWORD *)v10 + 53) = v359;
        v359 = 0;
        v358 = 0uLL;
        v10[432] = 1;
      }
      v10[440] = 0;
      v10[448] = 1;
      AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v333);
      v44 = (uint64_t *)(v10 + 1424);
      v46 = (void (__cdecl *)(std::system_error *__hidden))(v10 + 3344);
      v45 = v264;
      goto LABEL_321;
    }
    goto LABEL_27;
  }
  v22 = 0;
  v23 = v10[784] != 0;
  v264 = v10 + 16;
  if (!v10[784])
    goto LABEL_20;
LABEL_27:
  v254 = (std::runtime_error *)(v10 + 1848);
  if (v23)
  {
    v10[3088] = 0;
    ++v10[3089];
LABEL_97:
    v78 = operator new(0x190uLL);
    v79 = v78;
    v78[1] = 0;
    v78[2] = 0;
    *v78 = &off_1E2522BD0;
    v78[3] = *((_QWORD *)v10 + 281);
    v80 = (char *)(v78 + 3);
    v81 = *((_QWORD *)v10 + 282);
    v78[4] = v81;
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v84 = *((_QWORD *)v10 + 284);
    v78[5] = *((_QWORD *)v10 + 283);
    v78[6] = v84;
    v85 = *((_QWORD *)v10 + 285);
    v78[7] = v85;
    if (v85)
    {
      v86 = (unint64_t *)(v85 + 8);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v88 = *((_QWORD *)v10 + 287);
    v78[8] = *((_QWORD *)v10 + 286);
    v78[9] = v88;
    if (v88)
    {
      v89 = (unint64_t *)(v88 + 8);
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    *((_BYTE *)v78 + 80) = 0;
    *((_DWORD *)v78 + 26) = -1;
    v91 = *((unsigned int *)v10 + 582);
    if ((_DWORD)v91 != -1)
    {
      ((void (*)(std::runtime_error *, _QWORD *, char *))off_1E253D1E0[v91])(&v333, v78 + 10, v10 + 2304);
      *((_DWORD *)v79 + 26) = v91;
    }
    v92 = *((_DWORD *)v10 + 584);
    *((_BYTE *)v79 + 120) = 0;
    *((_DWORD *)v79 + 28) = v92;
    *((_BYTE *)v79 + 144) = 0;
    if (v10[2368])
    {
      if (v10[2367] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v79 + 5, *((const std::string::value_type **)v10 + 293), *((_QWORD *)v10 + 294));
      }
      else
      {
        *(_OWORD *)(v79 + 15) = *(_OWORD *)(v10 + 2344);
        v79[17] = *((_QWORD *)v10 + 295);
      }
      *((_BYTE *)v79 + 144) = 1;
    }
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::unordered_multimap((uint64_t)(v79 + 19), (uint64_t)(v10 + 2376));
    v79[24] = *((_QWORD *)v10 + 302);
    *((_DWORD *)v79 + 50) = *((_DWORD *)v10 + 606);
    AMSCore::URL::URL((std::string *)(v79 + 26), (const AMSCore::URL *)(v10 + 2432));
    *((_BYTE *)v79 + 360) = v10[2584];
    *((_BYTE *)v79 + 368) = 0;
    *((_BYTE *)v79 + 392) = 0;
    if (v10[2616])
    {
      if (v10[2615] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v79 + 46), *((const std::string::value_type **)v10 + 324), *((_QWORD *)v10 + 325));
      }
      else
      {
        *((_OWORD *)v79 + 23) = *((_OWORD *)v10 + 162);
        v79[48] = *((_QWORD *)v10 + 326);
      }
      *((_BYTE *)v79 + 392) = 1;
      v20 = (std::runtime_error *)(v10 + 24);
    }
    *((_QWORD *)v10 + 412) = v80;
    *((_QWORD *)v10 + 413) = v79;
    v93 = *((_QWORD *)v10 + 379);
    v94 = *(unsigned int *)(v93 + 104);
    if ((_DWORD)v94 == -1)
      std::__throw_bad_variant_access[abi:fe180100]();
    v307.__vftable = (std::system_error_vtbl *)&v333;
    v44 = (uint64_t *)(v10 + 1424);
    v46 = (void (__cdecl *)(std::system_error *__hidden))(v10 + 3344);
    v45 = v264;
    ((void (*)(std::system_error *, uint64_t))off_1E253D290[v94])(&v307, v93 + 88);
    v66 = v10 + 1848;
    v72 = v10 + 3264;
    LOBYTE(v65) = (_BYTE)v10 + 80;
    imp = (char *)*((_QWORD *)v10 + 410);
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v260, (uint64_t)(v10 + 496));
    *((_QWORD *)v10 + 406) = *((_QWORD *)v10 + 412);
    v95 = *((_QWORD *)v10 + 413);
    *((_QWORD *)v10 + 407) = v95;
    if (v95)
    {
      v96 = (unint64_t *)(v95 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    result = (uint64_t *)(*(uint64_t (**)(char *, AMSCore::HTTPResponseAction *, char *))(*(_QWORD *)imp + 16))(imp, v260, v10 + 3248);
    v99 = *((_OWORD *)v10 + 89);
    *((_OWORD *)v10 + 207) = v99;
    v262->__vftable = 0;
    *((_QWORD *)v10 + 179) = 0;
    if (!atomic_load((unint64_t *)(v99 + 416)))
    {
      *v263 = 0;
      v101 = (unint64_t *)(*((_QWORD *)v10 + 414) + 416);
      do
        v102 = __ldaxr(v101);
      while (__stlxr((unint64_t)v10, v101));
      if (!v102)
        return result;
    }
    v16 = (char **)*((_QWORD *)v10 + 414);
    if (!*((_BYTE *)v16 + 408))
      goto LABEL_324;
    v103 = (const std::runtime_error *)(v16 + 1);
    v104 = *((_BYTE *)v16 + 400);
    if (v104)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v254, (uint64_t)v103);
      v105 = v16 + 48;
      *((_QWORD *)v10 + 278) = v16[48];
      v106 = v10 + 2232;
      v107 = v16 + 49;
      v16 = (char **)(v10 + 960);
    }
    else
    {
      std::runtime_error::runtime_error(v254, v103);
      *(_OWORD *)(v10 + 1864) = *(_OWORD *)(v16 + 3);
      *((_QWORD *)v10 + 231) = off_1E2521330;
      v108 = (char *)(v16 + 6);
      v109 = v16[6];
      *((_QWORD *)v10 + 235) = v16[5];
      v110 = v10 + 1888;
      *((_QWORD *)v10 + 236) = v109;
      v111 = v16[7];
      *((_QWORD *)v10 + 237) = v111;
      if (v111)
      {
        *((_QWORD *)v109 + 2) = v110;
        v16[5] = v108;
        *(_QWORD *)v108 = 0;
        v16[7] = 0;
      }
      else
      {
        *((_QWORD *)v10 + 235) = v110;
      }
      v16 = (char **)(v10 + 960);
      v112 = *((_QWORD *)v10 + 414);
      v113 = *(_QWORD *)(v112 + 64);
      v105 = (_QWORD *)(v112 + 64);
      *((_QWORD *)v10 + 238) = v113;
      v106 = v10 + 1912;
      v107 = v105 + 1;
    }
    *v106 = *v107;
    *v105 = 0;
    v105[1] = 0;
    v10[2240] = v104;
    v114 = *((_QWORD *)v10 + 415);
    if (v114)
    {
      v115 = (unint64_t *)(v114 + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        v117 = (std::__shared_weak_count *)*((_QWORD *)v10 + 415);
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v118 = (std::__shared_weak_count *)*((_QWORD *)v10 + 179);
    if (v118)
    {
      p_shared_owners = (unint64_t *)&v118->__shared_owners_;
      do
        v120 = __ldaxr(p_shared_owners);
      while (__stlxr(v120 - 1, p_shared_owners));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v121 = (std::__shared_weak_count *)*((_QWORD *)v10 + 407);
    if (v121)
    {
      v122 = (unint64_t *)&v121->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v16);
    if (!v10[2240])
    {
      LOBYTE(v333.__vftable) = 0;
      LOBYTE(ec.__cat_) = 0;
      LOBYTE(v335) = 0;
      LOBYTE(v336) = 0;
      LOBYTE(v337) = 0;
      LOBYTE(v338) = 0;
      BYTE8(v338) = 0;
      LOBYTE(v339) = 0;
      BYTE8(v339) = 0;
      LOBYTE(v340) = 0;
      v341 = 0;
      LOBYTE(v342) = 0;
      BYTE8(v342) = 0;
      LOBYTE(v343) = 0;
      BYTE8(v345) = 0;
      v346[0] = 0;
      v346[8] = 0;
      v346[16] = 0;
      v346[24] = 0;
      LOBYTE(v347) = 0;
      BYTE8(v347) = 0;
      LOBYTE(v348) = 0;
      LOBYTE(v349) = 0;
      BYTE8(v349) = 0;
      LOBYTE(v350) = 0;
      BYTE8(v350) = 0;
      LOBYTE(v351) = 0;
      BYTE8(v351) = 0;
      LOBYTE(v352) = 0;
      LOBYTE(v353) = 0;
      BYTE8(v353) = 0;
      LOWORD(v354) = 0;
      BYTE8(v354) = 0;
      LOBYTE(v356) = 0;
      v344 = 0uLL;
      *((_QWORD *)&v343 + 1) = 0;
      LOBYTE(v345) = 0;
      DWORD2(v352) = 0;
      AMSCore::Unexpected<AMSCore::HTTPError,AMSCore::HTTPTransactionMetrics,AMSCore::Error &>((uint64_t)&v307, (uint64_t)&v333, v254);
      std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)v20);
      std::runtime_error::runtime_error(v20, &v307);
      v131 = v307.__ec_;
      v132 = v309;
      v133 = v308;
      *((_QWORD *)v10 + 8) = v309;
      v134 = v10 + 64;
      *(std::error_code *)(v10 + 40) = v131;
      *((_QWORD *)v10 + 3) = off_1E2521330;
      *((_QWORD *)v10 + 7) = v133;
      v135 = v310;
      *((_QWORD *)v10 + 9) = v310;
      if (v135)
      {
        *(_QWORD *)(v132 + 16) = v134;
        v308 = &v309;
        v309 = 0;
        v310 = 0;
      }
      else
      {
        *((_QWORD *)v10 + 7) = v134;
      }
      v152 = v311;
      v10[96] = 0;
      *((_OWORD *)v10 + 5) = v152;
      v311 = 0uLL;
      *((_QWORD *)v10 + 3) = &off_1E2521420;
      v10[120] = 0;
      if (BYTE8(v313))
      {
        *((_OWORD *)v10 + 6) = v312;
        *((_QWORD *)v10 + 14) = v313;
        *(_QWORD *)&v313 = 0;
        v312 = 0uLL;
        v10[120] = 1;
      }
      v153 = v317;
      *((_OWORD *)v10 + 10) = v316;
      *((_OWORD *)v10 + 11) = v153;
      *((_OWORD *)v10 + 12) = v318[0];
      *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v318 + 9);
      v154 = v315;
      *((_OWORD *)v10 + 8) = v314;
      *((_OWORD *)v10 + 9) = v154;
      *((_OWORD *)v10 + 14) = v319;
      v155 = v327;
      v156 = v329[0];
      *(_OWORD *)(v10 + 360) = v328;
      *(_OWORD *)(v10 + 376) = v156;
      *(_OWORD *)(v10 + 386) = *(_OWORD *)((char *)v329 + 10);
      v157 = v324;
      *(_OWORD *)(v10 + 280) = v323;
      *(_OWORD *)(v10 + 296) = v157;
      v158 = v326;
      *(_OWORD *)(v10 + 312) = v325;
      *(_OWORD *)(v10 + 328) = v158;
      *(_OWORD *)(v10 + 344) = v155;
      v159 = v322;
      *(_OWORD *)(v10 + 248) = v321;
      *((_QWORD *)v10 + 30) = v320;
      v319 = 0uLL;
      v320 = 0;
      *(_OWORD *)(v10 + 264) = v159;
      v10[408] = 0;
      v10[432] = 0;
      if (v332)
      {
        *(_OWORD *)(v10 + 408) = v330;
        *((_QWORD *)v10 + 53) = v331;
        v331 = 0;
        v330 = 0uLL;
        v10[432] = 1;
      }
      v10[440] = 0;
      v10[448] = 1;
      AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v307);
      if ((_BYTE)v356 && SHIBYTE(v355) < 0)
        operator delete(*((void **)&v354 + 1));
      v160 = (void **)*((_QWORD *)&v343 + 1);
      if (*((_QWORD *)&v343 + 1))
      {
        for (i = (void **)v344; i != v160; i -= 3)
        {
          if (*((char *)i - 1) < 0)
            operator delete(*(i - 3));
        }
        operator delete(v160);
      }
      if (LOBYTE(ec.__cat_) && *((char *)&ec.__val_ + 7) < 0)
        operator delete(v333.__vftable);
      if (!v10[2240])
      {
LABEL_282:
        ((void (*)(std::runtime_error *))v254->~runtime_error)(v254);
        v165 = (std::__shared_weak_count *)*((_QWORD *)v10 + 411);
        if (!v165)
        {
LABEL_287:
          v228 = (std::__shared_weak_count *)*((_QWORD *)v10 + 413);
          if (v228)
          {
            v229 = (unint64_t *)&v228->__shared_owners_;
            do
              v230 = __ldaxr(v229);
            while (__stlxr(v230 - 1, v229));
            if (!v230)
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
            }
          }
          goto LABEL_321;
        }
LABEL_283:
        v226 = (unint64_t *)&v165->__shared_owners_;
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
        goto LABEL_287;
      }
LABEL_197:
      v162 = (std::__shared_weak_count *)*((_QWORD *)v10 + 279);
      if (v162)
      {
        v163 = (unint64_t *)&v162->__shared_owners_;
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v254->__vftable);
      v165 = (std::__shared_weak_count *)*((_QWORD *)v10 + 411);
      if (!v165)
        goto LABEL_287;
      goto LABEL_283;
    }
    LOBYTE(v333.__vftable) = v10[3088];
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v307);
    AMSCore::Logger::log<char [36],unsigned char>((uint64_t)v307.__vftable, &v333);
    imp = (char *)v307.__imp_.__imp_;
    if (v307.__imp_.__imp_)
    {
      v124 = (unint64_t *)(v307.__imp_.__imp_ + 8);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        (*(void (**)(char *))(*(_QWORD *)imp + 16))(imp);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)imp);
      }
    }
    if (!v10[2240])
      goto LABEL_324;
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v256, (uint64_t)v254);
    *(_OWORD *)(v10 + 3016) = *((_OWORD *)v10 + 139);
    *((_OWORD *)v10 + 139) = 0u;
    *(_OWORD *)(v10 + 3096) = *(_OWORD *)(v10 + 3032);
    *(_OWORD *)v259 = 0u;
    v126 = *((_QWORD *)v10 + 381);
    v127 = *((_QWORD *)v10 + 382);
    *(_OWORD *)(v10 + 3048) = 0u;
    *((_QWORD *)v10 + 389) = v126;
    *((_QWORD *)v10 + 390) = v127;
    v16 = (char **)(v10 + 3128);
    v128 = *((_QWORD *)v10 + 383);
    *((_QWORD *)v10 + 391) = v128;
    v129 = *((_QWORD *)v10 + 384);
    *((_QWORD *)v10 + 392) = v129;
    *((_DWORD *)v10 + 786) = *((_DWORD *)v10 + 770);
    if (v129)
    {
      v130 = *(_QWORD *)(v128 + 8);
      if ((v127 & (v127 - 1)) != 0)
      {
        if (v130 >= v127)
          v130 %= v127;
      }
      else
      {
        v130 &= v127 - 1;
      }
      *(_QWORD *)(v126 + 8 * v130) = v16;
      *((_QWORD *)v10 + 383) = 0;
      *((_QWORD *)v10 + 384) = 0;
    }
    *((_WORD *)v10 + 1576) = *((_WORD *)v10 + 1544);
    v136 = (char *)*((_QWORD *)v10 + 398);
    if (v136)
    {
      v137 = v10 + 3192;
      if (v136 == v258)
      {
        *((_QWORD *)v10 + 402) = v257;
        (*(void (**)(void))(*((_QWORD *)v10 + 395) + 24))();
        v137 = v10 + 3192;
      }
      else
      {
        *((_QWORD *)v10 + 402) = v136;
        *((_QWORD *)v10 + 398) = 0;
      }
    }
    else
    {
      v137 = v10 + 3192;
      *((_QWORD *)v10 + 402) = 0;
    }
    v138 = *((_OWORD *)v10 + 204);
    *((_OWORD *)v10 + 208) = v138;
    *v255 = 0;
    *((_QWORD *)v10 + 409) = 0;
    if (!atomic_load((unint64_t *)(v138 + 440)))
    {
      *v263 = 1;
      v140 = (unint64_t *)(*((_QWORD *)v10 + 416) + 440);
      do
        v141 = __ldaxr(v140);
      while (__stlxr((unint64_t)v10, v140));
      if (!v141)
        return result;
    }
    imp = (char *)*((_QWORD *)v10 + 416);
    if (!imp[432])
    {
LABEL_324:
      __break(1u);
LABEL_325:
      {
        *((_DWORD *)imp + 436) = std::ios_base::xalloc();
        v20 = (std::runtime_error *)v44;
      }
LABEL_95:
      *std::ios_base::iword((std::ios_base *)((char *)&v307 + (_QWORD)v46), *((_DWORD *)imp + 436)) = 1;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v307, (uint64_t)"Exceeded the maximum retry count. maxRetryCount = ", 50);
      LOBYTE(v333.__vftable) = v65;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v307, (uint64_t)&v333, 1);
      v75 = v310;
      v76 = (char *)&v307 + (unint64_t)v307.__vftable[-1].~system_error;
      if ((v76[32] & 5) != 0)
      {
        v77 = -1;
      }
      else
      {
        (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v76 + 5) + 32))(&v333, *((_QWORD *)v76 + 5), 0, 1, 16);
        v77 = *((_QWORD *)&v343 + 1);
      }
      v333.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v333.__imp_.__imp_) = 4;
      *(_QWORD *)&ec.__val_ = v75;
      ec.__cat_ = (const std::error_category *)v77;
      (*(void (**)(_QWORD, const char *, uint64_t, std::runtime_error *))(**((_QWORD **)v66 + 2) + 16))(*((_QWORD *)v66 + 2), "networking", 10, &v333);
      v307.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E0DE4F60];
      *(std::system_error_vtbl **)((char *)&v307.__vftable + (unint64_t)v307.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
      v307.__imp_.__imp_ = v72 + 16;
      if (SBYTE7(v313) < 0)
        operator delete((void *)v312);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v261);
      goto LABEL_299;
    }
    v142 = (const std::runtime_error *)(imp + 8);
    v143 = imp[424];
    if (v143)
    {
      *((_OWORD *)v10 + 89) = *(_OWORD *)(imp + 8);
      v142->__vftable = 0;
      *((_QWORD *)imp + 2) = 0;
      *((_QWORD *)v10 + 180) = *((_QWORD *)imp + 3);
      v144 = v10 + 1448;
      v145 = imp + 32;
      v146 = *((_QWORD *)imp + 4);
      *((_QWORD *)v10 + 181) = v146;
      v147 = *((_QWORD *)imp + 5);
      *((_QWORD *)v10 + 182) = v147;
      if (v147)
      {
        *(_QWORD *)(v146 + 16) = v144;
        *((_QWORD *)imp + 3) = v145;
        *v145 = 0;
        *((_QWORD *)imp + 5) = 0;
      }
      else
      {
        *((_QWORD *)v10 + 180) = v144;
      }
      *v261 = *((_OWORD *)imp + 3);
      *((_QWORD *)imp + 6) = 0;
      *((_QWORD *)imp + 7) = 0;
      *(_OWORD *)(v10 + 1480) = *((_OWORD *)imp + 4);
      *((_QWORD *)imp + 8) = 0;
      *((_QWORD *)imp + 9) = 0;
      v10[1496] = 0;
      v10[1520] = 0;
      if (imp[104])
      {
        v166 = *((_OWORD *)imp + 5);
        *((_QWORD *)v10 + 189) = *((_QWORD *)imp + 12);
        *(_OWORD *)(v10 + 1496) = v166;
        *((_QWORD *)imp + 11) = 0;
        *((_QWORD *)imp + 12) = 0;
        *((_QWORD *)imp + 10) = 0;
        v10[1520] = 1;
      }
      v10[1528] = 0;
      *((_DWORD *)v10 + 386) = -1;
      v167 = *((unsigned int *)imp + 32);
      if ((_DWORD)v167 != -1)
      {
        ((void (*)(std::system_error *, char *, char *))off_1E253CA98[v167])(&v307, v10 + 1528, imp + 112);
        *((_DWORD *)v10 + 386) = v167;
      }
      v168 = *(_OWORD *)(imp + 136);
      *((_DWORD *)v10 + 392) = *((_DWORD *)imp + 38);
      *((_OWORD *)v10 + 97) = v168;
      v169 = imp + 184;
      v170 = (char *)*((_QWORD *)imp + 23);
      if (v170)
      {
        v45 = v264;
        if (v170 == imp + 160)
        {
          *((_QWORD *)v10 + 200) = v10 + 1576;
          (*(void (**)(_QWORD))(*(_QWORD *)*v169 + 24))(*v169);
        }
        else
        {
          *((_QWORD *)v10 + 200) = v170;
          *v169 = 0;
        }
      }
      else
      {
        v45 = v264;
        *((_QWORD *)v10 + 200) = 0;
      }
      *(_OWORD *)(v10 + 1608) = *((_OWORD *)imp + 12);
      *((_QWORD *)imp + 24) = 0;
      *((_QWORD *)imp + 25) = 0;
    }
    else
    {
      std::runtime_error::runtime_error(v262, v142);
      *((_QWORD *)v10 + 178) = MEMORY[0x1E0DE4F90] + 16;
      *((_OWORD *)v10 + 90) = *(_OWORD *)(imp + 24);
      *((_QWORD *)v10 + 178) = off_1E2521330;
      *((_QWORD *)v10 + 182) = *((_QWORD *)imp + 5);
      v148 = v10 + 1464;
      v149 = imp + 48;
      v150 = *((_QWORD *)imp + 6);
      *((_QWORD *)v10 + 183) = v150;
      v151 = *((_QWORD *)imp + 7);
      *((_QWORD *)v10 + 184) = v151;
      if (v151)
      {
        *(_QWORD *)(v150 + 16) = v148;
        *((_QWORD *)imp + 5) = v149;
        *v149 = 0;
        *((_QWORD *)imp + 7) = 0;
      }
      else
      {
        *((_QWORD *)v10 + 182) = v148;
      }
      *(_OWORD *)(v10 + 1480) = *((_OWORD *)imp + 4);
      *((_QWORD *)imp + 8) = 0;
      *((_QWORD *)imp + 9) = 0;
      *((_QWORD *)v10 + 178) = &off_1E2521420;
      v10[1496] = 0;
      v10[1520] = 0;
      if (imp[104])
      {
        v171 = *((_OWORD *)imp + 5);
        *((_QWORD *)v10 + 189) = *((_QWORD *)imp + 12);
        *(_OWORD *)(v10 + 1496) = v171;
        *((_QWORD *)imp + 11) = 0;
        *((_QWORD *)imp + 12) = 0;
        *((_QWORD *)imp + 10) = 0;
        v10[1520] = 1;
      }
      v172 = *((_OWORD *)imp + 7);
      *(_OWORD *)(v10 + 1544) = *((_OWORD *)imp + 8);
      *(_OWORD *)(v10 + 1528) = v172;
      v173 = *((_OWORD *)imp + 9);
      v174 = *((_OWORD *)imp + 10);
      v175 = *((_OWORD *)imp + 11);
      *(_OWORD *)(v10 + 1601) = *(_OWORD *)(imp + 185);
      *(_OWORD *)(v10 + 1592) = v175;
      *(_OWORD *)(v10 + 1576) = v174;
      *(_OWORD *)(v10 + 1560) = v173;
      *((_QWORD *)v10 + 204) = 0;
      *((_QWORD *)v10 + 205) = 0;
      *((_QWORD *)v10 + 203) = 0;
      *(_OWORD *)(v10 + 1624) = *((_OWORD *)imp + 13);
      *((_QWORD *)v10 + 205) = *((_QWORD *)imp + 28);
      *((_QWORD *)imp + 27) = 0;
      *((_QWORD *)imp + 28) = 0;
      *((_QWORD *)imp + 26) = 0;
      v176 = *(_OWORD *)(imp + 232);
      *((_OWORD *)v10 + 104) = *(_OWORD *)(imp + 248);
      *((_OWORD *)v10 + 103) = v176;
      v177 = *(_OWORD *)(imp + 264);
      v178 = *(_OWORD *)(imp + 280);
      v179 = *(_OWORD *)(imp + 296);
      *((_OWORD *)v10 + 108) = *(_OWORD *)(imp + 312);
      *((_OWORD *)v10 + 107) = v179;
      *((_OWORD *)v10 + 106) = v178;
      *((_OWORD *)v10 + 105) = v177;
      v180 = *(_OWORD *)(imp + 328);
      v181 = *(_OWORD *)(imp + 344);
      v182 = *(_OWORD *)(imp + 360);
      *(_OWORD *)(v10 + 1786) = *(_OWORD *)(imp + 370);
      *((_OWORD *)v10 + 111) = v182;
      *((_OWORD *)v10 + 110) = v181;
      *((_OWORD *)v10 + 109) = v180;
      v10[1808] = 0;
      v10[1832] = 0;
      if (imp[416])
      {
        v183 = *(_OWORD *)(imp + 392);
        *((_QWORD *)v10 + 228) = *((_QWORD *)imp + 51);
        *((_OWORD *)v10 + 113) = v183;
        *((_QWORD *)imp + 50) = 0;
        *((_QWORD *)imp + 51) = 0;
        *((_QWORD *)imp + 49) = 0;
        v10[1832] = 1;
      }
    }
    v10[1840] = v143;
    std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)v20);
    v184 = v10[1840];
    if (v184)
    {
      v185 = *((_QWORD *)v10 + 181);
      *((_QWORD *)v10 + 6) = v185;
      v186 = v10 + 48;
      *(_OWORD *)(v10 + 24) = *((_OWORD *)v10 + 89);
      v262->__vftable = 0;
      *((_QWORD *)v10 + 179) = 0;
      *((_QWORD *)v10 + 5) = *((_QWORD *)v10 + 180);
      v187 = *((_QWORD *)v10 + 182);
      *((_QWORD *)v10 + 7) = v187;
      if (v187)
      {
        *(_QWORD *)(v185 + 16) = v186;
        *((_QWORD *)v10 + 180) = v10 + 1448;
        *((_QWORD *)v10 + 181) = 0;
        *((_QWORD *)v10 + 182) = 0;
      }
      else
      {
        *((_QWORD *)v10 + 5) = v186;
      }
      v10[96] = 0;
      v191 = *v261;
      v192 = *(_OWORD *)(v10 + 1480);
      *(_QWORD *)v261 = 0;
      *((_QWORD *)v10 + 184) = 0;
      *((_OWORD *)v10 + 4) = v191;
      *((_OWORD *)v10 + 5) = v192;
      *((_QWORD *)v10 + 185) = 0;
      *((_QWORD *)v10 + 186) = 0;
      v10[120] = 0;
      if (v10[1520])
      {
        *((_QWORD *)v10 + 14) = *((_QWORD *)v10 + 189);
        *((_OWORD *)v10 + 6) = *(_OWORD *)(v10 + 1496);
        *((_QWORD *)v10 + 189) = 0;
        *((_QWORD *)v10 + 187) = 0;
        *((_QWORD *)v10 + 188) = 0;
        v10[120] = 1;
      }
      v10[128] = 0;
      *((_DWORD *)v10 + 36) = -1;
      v193 = *((unsigned int *)v10 + 386);
      if ((_DWORD)v193 != -1)
      {
        ((void (*)(std::system_error *))off_1E253CA98[v193])(&v307);
        *((_DWORD *)v10 + 36) = v193;
      }
      *(_OWORD *)(v10 + 152) = *((_OWORD *)v10 + 97);
      *((_DWORD *)v10 + 42) = *((_DWORD *)v10 + 392);
      v194 = (char *)*((_QWORD *)v10 + 200);
      if (v194)
      {
        if (v194 == v10 + 1576)
        {
          *((_QWORD *)v10 + 25) = v10 + 176;
          (*(void (**)(char *))(*((_QWORD *)v10 + 197) + 24))(v10 + 1576);
        }
        else
        {
          *((_QWORD *)v10 + 25) = v194;
          *((_QWORD *)v10 + 200) = 0;
        }
      }
      else
      {
        *((_QWORD *)v10 + 25) = 0;
      }
      *((_OWORD *)v10 + 13) = *(_OWORD *)(v10 + 1608);
      *((_QWORD *)v10 + 201) = 0;
      *((_QWORD *)v10 + 202) = 0;
    }
    else
    {
      std::runtime_error::runtime_error(v20, v262);
      v188 = *((_QWORD *)v10 + 183);
      *((_QWORD *)v10 + 8) = v188;
      v189 = v10 + 64;
      *(_OWORD *)(v10 + 40) = *((_OWORD *)v10 + 90);
      *((_QWORD *)v10 + 3) = off_1E2521330;
      *((_QWORD *)v10 + 7) = *((_QWORD *)v10 + 182);
      v190 = *((_QWORD *)v10 + 184);
      *((_QWORD *)v10 + 9) = v190;
      if (v190)
      {
        *(_QWORD *)(v188 + 16) = v189;
        *((_QWORD *)v10 + 182) = v10 + 1464;
        *((_QWORD *)v10 + 183) = 0;
        *((_QWORD *)v10 + 184) = 0;
      }
      else
      {
        *((_QWORD *)v10 + 7) = v189;
      }
      v195 = *(_OWORD *)(v10 + 1480);
      v10[96] = 0;
      *((_OWORD *)v10 + 5) = v195;
      *((_QWORD *)v10 + 185) = 0;
      *((_QWORD *)v10 + 186) = 0;
      *((_QWORD *)v10 + 3) = &off_1E2521420;
      v10[120] = 0;
      if (v10[1520])
      {
        *((_QWORD *)v10 + 14) = *((_QWORD *)v10 + 189);
        *((_OWORD *)v10 + 6) = *(_OWORD *)(v10 + 1496);
        *((_QWORD *)v10 + 189) = 0;
        *((_QWORD *)v10 + 187) = 0;
        *((_QWORD *)v10 + 188) = 0;
        v10[120] = 1;
      }
      v196 = *(_OWORD *)(v10 + 1576);
      *((_OWORD *)v10 + 10) = *(_OWORD *)(v10 + 1560);
      *((_OWORD *)v10 + 11) = v196;
      *((_OWORD *)v10 + 12) = *(_OWORD *)(v10 + 1592);
      *(_OWORD *)(v10 + 201) = *(_OWORD *)(v10 + 1601);
      v197 = *(_OWORD *)(v10 + 1544);
      *((_OWORD *)v10 + 8) = *(_OWORD *)(v10 + 1528);
      *((_OWORD *)v10 + 9) = v197;
      *((_OWORD *)v10 + 14) = *(_OWORD *)(v10 + 1624);
      *((_QWORD *)v10 + 30) = *((_QWORD *)v10 + 205);
      *((_QWORD *)v10 + 203) = 0;
      *((_QWORD *)v10 + 204) = 0;
      *((_QWORD *)v10 + 205) = 0;
      v198 = *((_OWORD *)v10 + 109);
      v199 = *((_OWORD *)v10 + 111);
      *(_OWORD *)(v10 + 360) = *((_OWORD *)v10 + 110);
      *(_OWORD *)(v10 + 376) = v199;
      *(_OWORD *)(v10 + 386) = *(_OWORD *)(v10 + 1786);
      v200 = *((_OWORD *)v10 + 106);
      *(_OWORD *)(v10 + 280) = *((_OWORD *)v10 + 105);
      *(_OWORD *)(v10 + 296) = v200;
      v201 = *((_OWORD *)v10 + 108);
      *(_OWORD *)(v10 + 312) = *((_OWORD *)v10 + 107);
      *(_OWORD *)(v10 + 328) = v201;
      *(_OWORD *)(v10 + 344) = v198;
      *(_OWORD *)(v10 + 248) = *((_OWORD *)v10 + 103);
      *(_OWORD *)(v10 + 264) = *((_OWORD *)v10 + 104);
      v10[408] = 0;
      v10[432] = 0;
      if (v10[1832])
      {
        *(_OWORD *)(v10 + 408) = *((_OWORD *)v10 + 113);
        *((_QWORD *)v10 + 53) = *((_QWORD *)v10 + 228);
        *((_QWORD *)v10 + 226) = 0;
        *((_QWORD *)v10 + 228) = 0;
        *((_QWORD *)v10 + 227) = 0;
        v10[432] = 1;
      }
    }
    v10[440] = v184;
    v10[448] = 1;
    if (v10[1840])
    {
      v202 = (std::__shared_weak_count *)*((_QWORD *)v10 + 202);
      if (v202)
      {
        v203 = (unint64_t *)&v202->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v10 + 1440));
      v205 = (std::__shared_weak_count *)*((_QWORD *)v10 + 179);
      if (v205)
      {
        v206 = (unint64_t *)&v205->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v262->~runtime_error)(v262);
    }
    v208 = *((_QWORD *)v10 + 417);
    if (v208)
    {
      v209 = (unint64_t *)(v208 + 8);
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        v211 = (std::__shared_weak_count *)*((_QWORD *)v10 + 417);
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
    }
    v212 = (std::__shared_weak_count *)*((_QWORD *)v10 + 409);
    if (v212)
    {
      v213 = (unint64_t *)&v212->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    v215 = (char *)*((_QWORD *)v10 + 402);
    v216 = v10 + 3192;
    if (v215 == v257)
    {
      v217 = 4;
    }
    else
    {
      if (!v215)
        goto LABEL_268;
      v217 = 5;
      v216 = (_QWORD *)*((_QWORD *)v10 + 402);
    }
    (*(void (**)(void))(*v216 + 8 * v217))();
LABEL_268:
    v218 = (void **)*v16;
    if (*v16)
    {
      do
      {
        v231 = (void **)*v218;
        if (*((char *)v218 + 39) < 0)
          operator delete(v218[2]);
        operator delete(v218);
        v218 = v231;
      }
      while (v231);
    }
    v219 = (void *)*((_QWORD *)v10 + 389);
    *((_QWORD *)v10 + 389) = 0;
    if (v219)
      operator delete(v219);
    v220 = (std::__shared_weak_count *)*((_QWORD *)v10 + 388);
    if (v220)
    {
      v221 = (unint64_t *)&v220->__shared_owners_;
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    v223 = (std::__shared_weak_count *)*((_QWORD *)v10 + 378);
    if (v223)
    {
      v224 = (unint64_t *)&v223->__shared_owners_;
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v256);
    if (!v10[2240])
      goto LABEL_282;
    goto LABEL_197;
  }
  LOBYTE(v307.__vftable) = 0;
  LOBYTE(v307.__ec_.__cat_) = 0;
  if (!v10[872])
    goto LABEL_82;
  if (v10[871] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v307, *((const std::string::value_type **)v10 + 106), *((_QWORD *)v10 + 107));
  }
  else
  {
    v307.std::runtime_error = (std::runtime_error)*((_OWORD *)v10 + 53);
    *(_QWORD *)&v307.__ec_.__val_ = *((_QWORD *)v10 + 108);
  }
  LOBYTE(v307.__ec_.__cat_) = 1;
  v253 = *((char *)&v307.__ec_.__val_ + 7);
  v250 = v307.__imp_.__imp_;
  v251 = v307.__vftable;
  if (*((char *)&v307.__ec_.__val_ + 7) >= 0)
    v47 = (uint64_t *)&v307;
  else
    v47 = (uint64_t *)v307.__vftable;
  if (*((char *)&v307.__ec_.__val_ + 7) >= 0)
    v48 = *((unsigned __int8 *)&v307.__ec_.__val_ + 7);
  else
    v48 = (unint64_t)v307.__imp_.__imp_;
  __s2 = v47;
  v49 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v47, v48);
  v50 = *(int8x8_t *)(v10 + 3056);
  if (!*(_QWORD *)&v50)
    goto LABEL_83;
  v51 = v49;
  v52 = (uint8x8_t)vcnt_s8(v50);
  v52.i16[0] = vaddlv_u8(v52);
  v53 = v52.u32[0];
  if (v52.u32[0] > 1uLL)
  {
    v54 = v49;
    if (v49 >= *(_QWORD *)&v50)
      v54 = v49 % *(_QWORD *)&v50;
  }
  else
  {
    v54 = (*(_QWORD *)&v50 - 1) & v49;
  }
  v55 = *(uint64_t ***)(*((_QWORD *)v10 + 381) + 8 * v54);
  if (!v55 || (v56 = *v55) == 0)
  {
LABEL_83:
    if (v253 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v10 + 3224), (const std::string::value_type *)v251, (std::string::size_type)v250);
    }
    else
    {
      *(std::runtime_error *)v17 = v307.std::runtime_error;
      *((_QWORD *)v10 + 405) = *(_QWORD *)&v307.__ec_.__val_;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)(v10 + 3048), (uint64_t)(v10 + 3224), (uint64_t)(v10 + 3224));
    if (v10[3247] < 0)
      operator delete(*v17);
    if (LOBYTE(v307.__ec_.__cat_) && *((char *)&v307.__ec_.__val_ + 7) < 0)
      operator delete(v307.__vftable);
    v64 = v10[3088];
    goto LABEL_92;
  }
  v57 = *(_QWORD *)&v50 - 1;
  while (1)
  {
    v58 = v56[1];
    if (v58 != v51)
    {
      if (v53 <= 1)
      {
        v58 &= v57;
      }
      else if (v58 >= *(_QWORD *)&v50)
      {
        v58 %= *(_QWORD *)&v50;
      }
      if (v58 != v54)
        goto LABEL_83;
      goto LABEL_62;
    }
    v59 = *((unsigned __int8 *)v56 + 39);
    if ((v59 & 0x80u) == 0)
      v60 = *((unsigned __int8 *)v56 + 39);
    else
      v60 = v56[3];
    if (v60 != v48)
      goto LABEL_62;
    v61 = (const void **)(v56 + 2);
    if ((v59 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v56 + 39))
      goto LABEL_80;
    v62 = __s2;
    while (*(unsigned __int8 *)v61 == *(unsigned __int8 *)v62)
    {
      v61 = (const void **)((char *)v61 + 1);
      v62 = (uint64_t *)((char *)v62 + 1);
      if (!--v59)
      {
        if (!v56)
          goto LABEL_83;
        goto LABEL_80;
      }
    }
LABEL_62:
    v56 = (uint64_t *)*v56;
    if (!v56)
      goto LABEL_83;
  }
  v248 = v57;
  v249 = v53;
  v63 = memcmp(*v61, __s2, v56[3]);
  v57 = v248;
  v53 = v249;
  if (v63)
    goto LABEL_62;
LABEL_80:
  if (v253 < 0)
    operator delete(v251);
LABEL_82:
  v64 = v10[3088] + 1;
  v10[3088] = v64;
LABEL_92:
  v65 = *(unsigned __int8 *)(*(_QWORD *)v259 + 128);
  if (v65 >= v64)
    goto LABEL_97;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v285);
  v66 = v285;
  if (*((int *)v285 + 2) <= 4)
  {
    v44 = (uint64_t *)(v10 + 24);
    v67 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v68 = MEMORY[0x1E0DE4FE0] + 64;
    v69 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v70 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    *((_QWORD *)&v314 + 1) = MEMORY[0x1E0DE4FE0] + 64;
    v307.__vftable = v69;
    *(std::system_error_vtbl **)((char *)&v307.__vftable + (unint64_t)v69[-1].~system_error) = v70;
    v71 = (std::ios_base *)((char *)&v307 + (unint64_t)v307.__vftable[-1].~system_error);
    v261 = (__int128 *)((char *)&v314 + 8);
    std::ios_base::init(v71, &v307.__imp_);
    v71[1].__vftable = 0;
    v71[1].__fmtflags_ = -1;
    v307.__vftable = v67 + 1;
    *((_QWORD *)&v314 + 1) = v68;
    std::streambuf::basic_streambuf();
    v72 = (char *)MEMORY[0x1E0DE4FB8];
    v307.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    v312 = 0u;
    v313 = 0u;
    LODWORD(v314) = 16;
    v46 = v307.__vftable[-1].~system_error;
    imp = (char *)&unk_1EE059000;
    v20 = (std::runtime_error *)(v10 + 24);
    if ((v73 & 1) != 0)
      goto LABEL_95;
    goto LABEL_325;
  }
LABEL_299:
  v232 = v286;
  if (v286)
  {
    v233 = (unint64_t *)&v286->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  LOBYTE(v265) = 0;
  BYTE8(v265) = 0;
  LOBYTE(v266) = 0;
  BYTE8(v266) = 0;
  LOBYTE(v267) = 0;
  BYTE8(v267) = 0;
  LOBYTE(v268) = 0;
  BYTE8(v268) = 0;
  v269[0] = 0;
  v269[8] = 0;
  v269[16] = 0;
  v269[24] = 0;
  BYTE8(v270) = 0;
  LOBYTE(v271) = 0;
  BYTE8(v271) = 0;
  LOBYTE(v272) = 0;
  BYTE8(v272) = 0;
  LOBYTE(v273) = 0;
  BYTE8(v273) = 0;
  LOBYTE(v274) = 0;
  BYTE8(v274) = 0;
  LOBYTE(v275) = 0;
  BYTE8(v275) = 0;
  LOBYTE(v276) = 0;
  BYTE8(v276) = 0;
  LOBYTE(v277) = 0;
  BYTE8(v277) = 0;
  v278[8] = 0;
  v278[16] = 0;
  *(_WORD *)&v278[24] = 0;
  LOBYTE(v270) = 0;
  *(_DWORD *)v278 = 0;
  LOBYTE(v285) = 0;
  v287 = 0;
  *((_OWORD *)v16 + 4) = v267;
  *((_OWORD *)v16 + 5) = v268;
  *((_OWORD *)v16 + 6) = *(_OWORD *)v269;
  *(_OWORD *)((char *)v16 + 105) = *(_OWORD *)&v269[9];
  *((_OWORD *)v16 + 2) = v265;
  *((_OWORD *)v16 + 3) = v266;
  v295 = 0;
  v293 = 0;
  v294 = 0;
  *(_OWORD *)((char *)v304 + 10) = *(_OWORD *)&v278[10];
  v303 = v277;
  v304[0] = *(_OWORD *)v278;
  *(_OWORD *)(v16 + 31) = v276;
  *(_OWORD *)(v16 + 29) = v275;
  *(_OWORD *)(v16 + 27) = v274;
  *(_OWORD *)(v16 + 25) = v273;
  *(_OWORD *)(v16 + 23) = v272;
  *(_OWORD *)(v16 + 21) = v271;
  *(_OWORD *)(v16 + 19) = v270;
  v305 = 0;
  v306 = 0;
  AMSCore::StringUtils::join<char [34]>(&v280, "Exceeded the maximum retry count.");
  v363.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  *(_QWORD *)&v363.__val_ = 306;
  std::system_error::system_error(&v307, v363, &v280);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  v310 = 0;
  v309 = 0;
  v311 = 0uLL;
  v308 = &v309;
  v307.__vftable = (std::system_error_vtbl *)&off_1E2521420;
  LOBYTE(v312) = 0;
  BYTE8(v313) = 0;
  v316 = v290;
  v317 = v291;
  v318[0] = v292[0];
  *(_OWORD *)((char *)v318 + 9) = *(_OWORD *)((char *)v292 + 9);
  v314 = v288;
  v315 = v289;
  v319 = 0uLL;
  v320 = 0;
  v294 = 0;
  v295 = 0;
  v293 = 0;
  *(_OWORD *)((char *)v329 + 10) = *(_OWORD *)((char *)v304 + 10);
  v327 = v302;
  v328 = v303;
  v329[0] = v304[0];
  v323 = v298;
  v324 = v299;
  v325 = v300;
  v326 = v301;
  v321 = v296;
  v322 = v297;
  LOBYTE(v330) = 0;
  v332 = 0;
  std::runtime_error::runtime_error(&v333, &v307);
  ec = v307.__ec_;
  v335 = v308;
  v336 = v309;
  v337 = v310;
  if (v310)
  {
    *(_QWORD *)(v309 + 16) = &v336;
    v308 = &v309;
    v309 = 0;
    v310 = 0;
  }
  else
  {
    v335 = &v336;
  }
  v338 = v311;
  v311 = 0uLL;
  v333.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
  LOBYTE(v339) = 0;
  v341 = 0;
  if (BYTE8(v313))
  {
    v339 = v312;
    v340 = v313;
    *(_QWORD *)&v313 = 0;
    v312 = 0uLL;
    v341 = 1;
  }
  v344 = v316;
  v345 = v317;
  *(_OWORD *)v346 = v318[0];
  *(_OWORD *)&v346[9] = *(_OWORD *)((char *)v318 + 9);
  v342 = v314;
  v343 = v315;
  v347 = v319;
  v348 = v320;
  v320 = 0;
  v319 = 0uLL;
  *(_OWORD *)((char *)v357 + 10) = *(_OWORD *)((char *)v329 + 10);
  v355 = v327;
  v356 = v328;
  v357[0] = v329[0];
  v351 = v323;
  v352 = v324;
  v353 = v325;
  v354 = v326;
  v349 = v321;
  v350 = v322;
  LOBYTE(v358) = 0;
  v360 = 0;
  if (v332)
  {
    v358 = v330;
    v359 = v331;
    v331 = 0;
    v330 = 0uLL;
    v360 = 1;
  }
  AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v307);
  std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)v20);
  std::runtime_error::runtime_error(v20, &v333);
  v235 = ec;
  v236 = v336;
  v237 = v335;
  *((_QWORD *)v10 + 8) = v336;
  v238 = v10 + 64;
  *(std::error_code *)(v10 + 40) = v235;
  *((_QWORD *)v10 + 3) = off_1E2521330;
  *((_QWORD *)v10 + 7) = v237;
  v239 = v337;
  *((_QWORD *)v10 + 9) = v337;
  if (v239)
  {
    *(_QWORD *)(v236 + 16) = v238;
    v335 = &v336;
    v336 = 0;
    v337 = 0;
  }
  else
  {
    *((_QWORD *)v10 + 7) = v238;
  }
  v240 = v338;
  v10[96] = 0;
  *((_OWORD *)v10 + 5) = v240;
  v338 = 0uLL;
  *((_QWORD *)v10 + 3) = &off_1E2521420;
  v10[120] = 0;
  if (v341)
  {
    *((_OWORD *)v10 + 6) = v339;
    *((_QWORD *)v10 + 14) = v340;
    v340 = 0;
    v339 = 0uLL;
    v10[120] = 1;
  }
  v241 = v345;
  *((_OWORD *)v10 + 10) = v344;
  *((_OWORD *)v10 + 11) = v241;
  *((_OWORD *)v10 + 12) = *(_OWORD *)v346;
  *(_OWORD *)(v10 + 201) = *(_OWORD *)&v346[9];
  v242 = v343;
  *((_OWORD *)v10 + 8) = v342;
  *((_OWORD *)v10 + 9) = v242;
  *((_OWORD *)v10 + 14) = v347;
  v243 = v355;
  v244 = v357[0];
  *(_OWORD *)(v10 + 360) = v356;
  *(_OWORD *)(v10 + 376) = v244;
  *(_OWORD *)(v10 + 386) = *(_OWORD *)((char *)v357 + 10);
  v245 = v352;
  *(_OWORD *)(v10 + 280) = v351;
  *(_OWORD *)(v10 + 296) = v245;
  v246 = v354;
  *(_OWORD *)(v10 + 312) = v353;
  *(_OWORD *)(v10 + 328) = v246;
  *(_OWORD *)(v10 + 344) = v243;
  v247 = v350;
  *(_OWORD *)(v10 + 248) = v349;
  *((_QWORD *)v10 + 30) = v348;
  v348 = 0;
  v347 = 0uLL;
  *(_OWORD *)(v10 + 264) = v247;
  v10[408] = 0;
  v10[432] = 0;
  if (v360)
  {
    *(_OWORD *)(v10 + 408) = v358;
    *((_QWORD *)v10 + 53) = v359;
    v359 = 0;
    v358 = 0uLL;
    v10[432] = 1;
  }
  v10[440] = 0;
  v10[448] = 1;
  AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v333);
  v44 = (uint64_t *)(v10 + 1424);
  v46 = (void (__cdecl *)(std::system_error *__hidden))(v10 + 3344);
  v45 = v264;
LABEL_321:
  *((_QWORD *)v10 + 178) = v45;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)v46 = 2;
  return AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::Awaiter::await_suspend(v44);
}

void sub_18CD1010C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleCancelAction(AMSCore::ExecuteHTTPRequestTask::_anonymous_namespace_ *this, const AMSCore::HTTPResponseAction *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int *v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count *imp;
  unint64_t *v11;
  unint64_t v12;
  std::system_error v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  __int128 v17;
  std::string __what_arg;
  std::error_code v19;

  AMSCore::StringUtils::join<char [42]>(&__what_arg, "A request was cancelled without an error.");
  v19.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v19.__val_ = 1;
  std::system_error::system_error(&v13, v19, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v15 = 0;
  v16 = 0;
  v13.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v14 = &v15;
  v17 = 0uLL;
  if (*((_BYTE *)a2 + 128))
  {
    AMSCore::Error::Error((std::runtime_error *)this, (const std::runtime_error *)((char *)a2 + 56));
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    v13.__vftable = (std::system_error_vtbl *)off_1E2521330;
    if (*((_QWORD *)&v17 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)this, &v13);
    *((_OWORD *)this + 1) = v13.__ec_;
    *(_QWORD *)this = off_1E2521330;
    v7 = v15;
    *((_QWORD *)this + 4) = v14;
    *((_QWORD *)this + 5) = v7;
    v8 = (char *)this + 40;
    v9 = v16;
    *((_QWORD *)this + 6) = v16;
    if (v9)
    {
      *((_QWORD *)v7 + 2) = v8;
      v14 = &v15;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      *((_QWORD *)this + 4) = v8;
    }
    *(_OWORD *)((char *)this + 56) = v17;
    v17 = 0uLL;
    v13.__vftable = (std::system_error_vtbl *)off_1E2521330;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v15);
  MEMORY[0x18D7898AC](&v13);
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v13);
  AMSCore::Logger::log<char [31],AMSCore::Error>((uint64_t)v13.__vftable, 2, (uint64_t)"networking", 10, "Cancelling a request. error = ", (uint64_t)this);
  imp = (std::__shared_weak_count *)v13.__imp_.__imp_;
  if (v13.__imp_.__imp_)
  {
    v11 = (unint64_t *)(v13.__imp_.__imp_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
}

void sub_18CD106E4(void *a1)
{
  __clang_call_terminate(a1);
}

void sub_18CD106F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  __clang_call_terminate(a1);
}

void sub_18CD10704(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

_BYTE *AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleProceedAction(_OWORD *a1, __int128 *a2, uint64_t *a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE *result;
  __int128 v24;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  std::ios_base *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::runtime_error *v80;
  char *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t *rep;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  char v91;
  char v92[16];
  int v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[7];
  __int128 __p;
  __int128 v102;
  int v103;
  uint64_t v104[10];
  std::__shared_weak_count *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v8 = (char *)operator new(0x488uLL);
  v81 = v8 + 16;
  AMSCore::HTTPResponse::HTTPResponse((uint64_t)(v8 + 272), a2);
  v10 = *a3;
  v9 = a3[1];
  *((_QWORD *)v8 + 134) = *a3;
  *((_QWORD *)v8 + 135) = v9;
  *a3 = 0;
  a3[1] = 0;
  *((_OWORD *)v8 + 63) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v11 = *(_QWORD *)(a4 + 16);
  v12 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *((_QWORD *)v8 + 128) = v11;
  v13 = *(_QWORD *)(a4 + 32);
  *((_QWORD *)v8 + 129) = v12;
  *((_QWORD *)v8 + 130) = v13;
  v14 = *(_QWORD *)(a4 + 40);
  *((_QWORD *)v8 + 131) = v14;
  *((_DWORD *)v8 + 264) = *(_DWORD *)(a4 + 48);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v8 + 1040;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
  }
  v80 = (std::runtime_error *)(v8 + 928);
  *((_WORD *)v8 + 532) = *(_WORD *)(a4 + 56);
  do
    v16 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v16 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v8 + 29) = 0;
  v8[24] = 0;
  v8[224] = 0;
  *((_QWORD *)v8 + 33) = 0;
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E25236F8;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = v81;
  *(_QWORD *)&v18 = v8 + 16;
  *((_QWORD *)&v18 + 1) = v17;
  *a1 = v18;
  if (!v10 || !*(_BYTE *)(*((_QWORD *)v8 + 126) + 129))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v82);
    v34 = v82;
    if (*(int *)(v82 + 8) <= 2)
    {
      v35 = MEMORY[0x1E0DE4FE0];
      v36 = MEMORY[0x1E0DE4FE0] + 64;
      v37 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v38 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v39 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v104[0] = MEMORY[0x1E0DE4FE0] + 64;
      v98 = v38;
      *(uint64_t *)((char *)&v98 + *(_QWORD *)(v38 - 24)) = v39;
      v40 = (std::ios_base *)((char *)&v98 + *(_QWORD *)(v98 - 24));
      std::ios_base::init(v40, &v99);
      v40[1].__vftable = 0;
      v40[1].__fmtflags_ = -1;
      v98 = v35 + 24;
      v104[0] = v36;
      std::streambuf::basic_streambuf();
      v41 = MEMORY[0x1E0DE4FB8];
      v99 = MEMORY[0x1E0DE4FB8] + 16;
      __p = 0u;
      v102 = 0u;
      v103 = 16;
      v42 = *(_QWORD *)(v98 - 24);
      if ((v43 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v98, (uint64_t)"ExecuteHTTPRequestTask::Options::getCanPersistAccountHeaders is false.", 70);
      v44 = v100[4];
      v45 = (char *)&v98 + *(_QWORD *)(v98 - 24);
      if ((v45[32] & 5) != 0)
      {
        v46 = -1;
      }
      else
      {
        (*(void (**)(uint64_t **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v45 + 5) + 32))(&rep, *((_QWORD *)v45 + 5), 0, 1, 16);
        v46 = v95;
      }
      rep = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v85) = 2;
      v86 = v44;
      *(_QWORD *)&v87 = v46;
      (*(void (**)(_QWORD, const char *, uint64_t, uint64_t **))(**(_QWORD **)(v34 + 16) + 16))(*(_QWORD *)(v34 + 16), "networking", 10, &rep);
      v98 = *v37;
      *(uint64_t *)((char *)&v98 + *(_QWORD *)(v98 - 24)) = v37[3];
      v99 = v41 + 16;
      if (SBYTE7(v102) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v104);
    }
    v47 = v83;
    v20 = v8 + 928;
    if (v83)
    {
      p_shared_owners = (unint64_t *)&v83->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    goto LABEL_65;
  }
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault((_QWORD *)v8 + 138);
  v19 = *((_QWORD *)v8 + 138);
  *((_QWORD *)v8 + 140) = v10;
  *((_QWORD *)v8 + 141) = v9;
  v20 = v8 + 928;
  if (v9)
  {
    v21 = (unint64_t *)(v9 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v19 + 88))(v19, v8 + 1120);
  v24 = *((_OWORD *)v8 + 68);
  *((_OWORD *)v8 + 71) = v24;
  *((_QWORD *)v8 + 136) = 0;
  *((_QWORD *)v8 + 137) = 0;
  if (atomic_load((unint64_t *)(v24 + 96)))
    goto LABEL_18;
  v8[1152] = 0;
  v26 = (unint64_t *)(*((_QWORD *)v8 + 142) + 96);
  do
    v27 = __ldaxr(v26);
  while (__stlxr((unint64_t)v8, v26));
  if (v27)
  {
LABEL_18:
    v28 = *((_QWORD *)v8 + 142);
    if (!*(_BYTE *)(v28 + 88))
    {
      __break(1u);
      return result;
    }
    v29 = *(_BYTE *)(v28 + 80);
    if (!v29)
    {
      std::runtime_error::runtime_error(v80, (const std::runtime_error *)(v28 + 8));
      *((_OWORD *)v8 + 59) = *(_OWORD *)(v28 + 24);
      *((_QWORD *)v8 + 116) = off_1E2521330;
      v30 = (_QWORD *)(v28 + 48);
      v31 = *(_QWORD *)(v28 + 48);
      *((_QWORD *)v8 + 120) = *(_QWORD *)(v28 + 40);
      v32 = v8 + 968;
      *((_QWORD *)v8 + 121) = v31;
      v33 = *(_QWORD *)(v28 + 56);
      *((_QWORD *)v8 + 122) = v33;
      if (v33)
      {
        *(_QWORD *)(v31 + 16) = v32;
        *(_QWORD *)(v28 + 40) = v30;
        *v30 = 0;
        *(_QWORD *)(v28 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v8 + 120) = v32;
      }
      v50 = *((_QWORD *)v8 + 142);
      *(_OWORD *)(v8 + 984) = *(_OWORD *)(v50 + 64);
      *(_QWORD *)(v50 + 64) = 0;
      *(_QWORD *)(v50 + 72) = 0;
    }
    v8[1000] = v29;
    v51 = *((_QWORD *)v8 + 143);
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        v54 = (std::__shared_weak_count *)*((_QWORD *)v8 + 143);
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v55 = (std::__shared_weak_count *)*((_QWORD *)v8 + 137);
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)v8 + 141);
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = (std::__shared_weak_count *)*((_QWORD *)v8 + 139);
    if (!v61)
      goto LABEL_94;
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      if (!v8[1000])
      {
LABEL_57:
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v98);
        AMSCore::Logger::log<char [37],AMSCore::Error>(v98, (uint64_t)"networking", 10, "Failed to save the account. error = ", (uint64_t)v80);
        v64 = (std::__shared_weak_count *)v99;
        if (v99)
        {
          v65 = (unint64_t *)(v99 + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        if (!v8[1000])
          ((void (*)(std::runtime_error *))v80->~runtime_error)(v80);
      }
    }
    else
    {
LABEL_94:
      if (!v8[1000])
        goto LABEL_57;
    }
LABEL_65:
    v67 = *((_QWORD *)v8 + 126);
    v68 = (_QWORD *)(v67 + 8);
    v69 = *(_QWORD *)(v67 + 8);
    rep = *(uint64_t **)v67;
    v85 = v69;
    v86 = *(_QWORD *)(v67 + 16);
    if (v86)
    {
      *(_QWORD *)(v69 + 16) = &v85;
      *(_QWORD *)v67 = v68;
      *v68 = 0;
      *(_QWORD *)(v67 + 16) = 0;
    }
    else
    {
      rep = &v85;
    }
    v87 = *(_OWORD *)(v67 + 24);
    *(_QWORD *)(v67 + 24) = 0;
    *(_QWORD *)(v67 + 32) = 0;
    v88 = *(_OWORD *)(v67 + 40);
    *(_QWORD *)(v67 + 40) = 0;
    *(_QWORD *)(v67 + 48) = 0;
    LOBYTE(v89) = 0;
    v91 = 0;
    if (*(_BYTE *)(v67 + 80))
    {
      v70 = *(_OWORD *)(v67 + 56);
      v90 = *(_QWORD *)(v67 + 72);
      v89 = v70;
      *(_QWORD *)(v67 + 64) = 0;
      *(_QWORD *)(v67 + 72) = 0;
      *(_QWORD *)(v67 + 56) = 0;
      v91 = 1;
    }
    v92[0] = 0;
    v93 = -1;
    v71 = *(unsigned int *)(v67 + 104);
    if ((_DWORD)v71 != -1)
    {
      ((void (*)(uint64_t *, char *, uint64_t))off_1E253CA98[v71])(&v82, v92, v67 + 88);
      v93 = v71;
    }
    v72 = *(uint64_t **)(v67 + 160);
    v73 = *(_OWORD *)(v67 + 112);
    LODWORD(v95) = *(_DWORD *)(v67 + 128);
    v94 = v73;
    if (v72)
    {
      if (v72 == (uint64_t *)(v67 + 136))
      {
        v97 = &v96;
        (*(void (**)(uint64_t *))(*v72 + 24))(v72);
      }
      else
      {
        v97 = v72;
        *(_QWORD *)(v67 + 160) = 0;
      }
    }
    else
    {
      v97 = 0;
    }
    AMSCore::ExecuteHTTPRequestTask::Result::Result((uint64_t)&v98, (uint64_t)(v8 + 1072), (uint64_t)&rep, (__int128 *)v8 + 17);
    std::optional<AMSCore::ExecuteHTTPRequestTask::Result>::emplace[abi:fe180100]<AMSCore::ExecuteHTTPRequestTask::Result,void>((uint64_t)(v8 + 24), (uint64_t)&v98);
    v74 = v105;
    if (v105)
    {
      v75 = (unint64_t *)&v105->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)v100);
    v77 = (std::__shared_weak_count *)v99;
    if (v99)
    {
      v78 = (unint64_t *)(v99 + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&rep);
    *((_QWORD *)v8 + 116) = v81;
    *(_QWORD *)v8 = 0;
    return AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise::Awaiter::await_suspend(v20);
  }
  return result;
}

void sub_18CD11040(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18CD11064);
  }
  JUMPOUT(0x18CD1105CLL);
}

void sub_18CD11054(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

AMSCore::HTTPResponseAction *std::optional<std::expected<AMSCore::HTTPResponseAction,AMSCore::Error>>::~optional(AMSCore::HTTPResponseAction *this)
{
  if (*((_BYTE *)this + 464))
  {
    if (*((_BYTE *)this + 460))
      AMSCore::HTTPResponseAction::~HTTPResponseAction(this);
    else
      (**(void (***)(AMSCore::HTTPResponseAction *))this)(this);
  }
  return this;
}

void AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::unhandled_exception(AMSCore::HTTPError *a1)
{
  AMSCore::HTTPError::makeFromCurrentException(a1);
}

void sub_18CD110EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::runtime_error v17[2];
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[26];
  __int128 v39;
  uint64_t v40;
  char v41;
  std::runtime_error v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[25];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[26];
  __int128 v67;
  uint64_t v68;
  char v69;
  std::runtime_error v70[2];
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[25];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[26];
  __int128 v96;
  uint64_t v97;
  char v98;

  std::runtime_error::runtime_error(v70, v17);
  v70[1] = v17[1];
  v3 = (_QWORD *)(v2 + 40);
  v71 = v18;
  v72 = v19;
  v73 = v20;
  if (v20)
  {
    *(_QWORD *)(v19 + 16) = v3;
    v18 = (uint64_t *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
  }
  else
  {
    v71 = (uint64_t *)(v2 + 40);
  }
  *(_OWORD *)(v2 + 56) = v21;
  v21 = 0uLL;
  v70[0].__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
  LOBYTE(v76) = 0;
  v78 = 0;
  if (v24)
  {
    v76 = v22;
    v77 = v23;
    v23 = 0;
    v22 = 0uLL;
    v78 = 1;
  }
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(v1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(v1 + 152);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(v2 + 177) = *(_OWORD *)(v1 + 177);
  *(_OWORD *)(v2 + 104) = v25;
  *(_OWORD *)(v2 + 120) = v26;
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(v1 + 200);
  v86 = v29;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  *(_OWORD *)&v95[10] = *(_OWORD *)&v38[10];
  v93 = v36;
  v94 = v37;
  *(_OWORD *)v95 = *(_OWORD *)v38;
  v89 = v32;
  v90 = v33;
  v91 = v34;
  v92 = v35;
  v87 = v30;
  v88 = v31;
  LOBYTE(v96) = 0;
  v98 = 0;
  if (v41)
  {
    v96 = v39;
    v97 = v40;
    v40 = 0;
    v39 = 0uLL;
    v98 = 1;
  }
  std::runtime_error::runtime_error(&v42, v70);
  v43 = *(_OWORD *)(v2 + 16);
  v44 = v71;
  v45 = v72;
  v46 = v73;
  if (v73)
  {
    *(_QWORD *)(v72 + 16) = &v45;
    v71 = (uint64_t *)(v2 + 40);
    *v3 = 0;
    *(_QWORD *)(v2 + 48) = 0;
  }
  else
  {
    v44 = &v45;
  }
  v47 = *(_OWORD *)(v2 + 56);
  v74 = 0;
  v75 = 0;
  v42.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
  LOBYTE(v48) = 0;
  v50 = 0;
  if (v78)
  {
    v48 = v76;
    v49 = v77;
    v77 = 0;
    v76 = 0uLL;
    v50 = 1;
  }
  v53 = v81;
  v54 = v82;
  *(_OWORD *)v55 = *(_OWORD *)v83;
  *(_OWORD *)&v55[9] = *(_OWORD *)&v83[9];
  v51 = v79;
  v52 = v80;
  v56 = *(_OWORD *)(v2 + 200);
  v57 = v86;
  v85 = 0;
  v86 = 0;
  v84 = 0;
  *(_OWORD *)&v66[10] = *(_OWORD *)&v95[10];
  v64 = v93;
  v65 = v94;
  *(_OWORD *)v66 = *(_OWORD *)v95;
  v60 = v89;
  v61 = v90;
  v62 = v91;
  v63 = v92;
  v58 = v87;
  v59 = v88;
  LOBYTE(v67) = 0;
  v69 = 0;
  if (v98)
  {
    v67 = v96;
    v68 = v97;
    v97 = 0;
    v96 = 0uLL;
    v69 = 1;
  }
  AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)v70);
  std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](v0 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(v0 + 8), &v42);
  v4 = v43;
  v6 = v44;
  v5 = v45;
  *(_QWORD *)(v0 + 48) = v45;
  v7 = v0 + 48;
  *(_OWORD *)(v0 + 24) = v4;
  *(_QWORD *)(v0 + 40) = v6;
  v8 = v46;
  *(_QWORD *)(v0 + 56) = v46;
  if (v8)
  {
    *(_QWORD *)(v5 + 16) = v7;
    v44 = &v45;
    v45 = 0;
    v46 = 0;
  }
  else
  {
    *(_QWORD *)(v0 + 40) = v7;
  }
  v9 = v47;
  *(_BYTE *)(v0 + 80) = 0;
  *(_OWORD *)(v0 + 64) = v9;
  v47 = 0uLL;
  *(_QWORD *)(v0 + 8) = &off_1E2521420;
  *(_BYTE *)(v0 + 104) = 0;
  if (v50)
  {
    *(_OWORD *)(v0 + 80) = v48;
    *(_QWORD *)(v0 + 96) = v49;
    v49 = 0;
    v48 = 0uLL;
    *(_BYTE *)(v0 + 104) = 1;
  }
  v10 = v54;
  *(_OWORD *)(v0 + 144) = v53;
  *(_OWORD *)(v0 + 160) = v10;
  *(_OWORD *)(v0 + 176) = *(_OWORD *)v55;
  *(_OWORD *)(v0 + 185) = *(_OWORD *)&v55[9];
  v11 = v52;
  *(_OWORD *)(v0 + 112) = v51;
  *(_OWORD *)(v0 + 128) = v11;
  *(_OWORD *)(v0 + 208) = v56;
  v12 = v64;
  v13 = *(_OWORD *)v66;
  *(_OWORD *)(v0 + 344) = v65;
  *(_OWORD *)(v0 + 360) = v13;
  *(_OWORD *)(v0 + 370) = *(_OWORD *)&v66[10];
  v14 = v61;
  *(_OWORD *)(v0 + 264) = v60;
  *(_OWORD *)(v0 + 280) = v14;
  v15 = v63;
  *(_OWORD *)(v0 + 296) = v62;
  *(_OWORD *)(v0 + 312) = v15;
  *(_OWORD *)(v0 + 328) = v12;
  v16 = v59;
  *(_OWORD *)(v0 + 232) = v58;
  *(_QWORD *)(v0 + 224) = v57;
  v57 = 0;
  v56 = 0uLL;
  *(_OWORD *)(v0 + 248) = v16;
  *(_BYTE *)(v0 + 392) = 0;
  *(_BYTE *)(v0 + 416) = 0;
  if (v69)
  {
    *(_OWORD *)(v0 + 392) = v67;
    *(_QWORD *)(v0 + 408) = v68;
    v68 = 0;
    v67 = 0uLL;
    *(_BYTE *)(v0 + 416) = 1;
  }
  *(_BYTE *)(v0 + 424) = 0;
  *(_BYTE *)(v0 + 432) = 1;
  AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v42);
  AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)v17);
}

uint64_t *AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::Awaiter::await_suspend(uint64_t *result)
{
  uint64_t *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *imp;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::runtime_error v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  _BYTE v46[32];
  __int128 v47;
  _BYTE v48[32];
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD v59[2];
  __int128 v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  _BYTE v65[24];
  uint64_t *v66;
  uint64_t v67;

  v1 = result;
  v67 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*result + 440);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*result - 8))(*result - 16);
    v4 = *result;
    result = *(uint64_t **)(*result + 472);
    if (result)
    {
      if (result == (uint64_t *)(v4 + 448))
      {
        v66 = (uint64_t *)v65;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _BYTE *))(*result + 24))(result, v65);
      }
      else
      {
        v66 = result;
        *(_QWORD *)(v4 + 472) = 0;
      }
    }
    else
    {
      v66 = 0;
    }
    if (v66)
    {
      v5 = *v1;
      if (!*(_BYTE *)(v5 + 432))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 424);
      if (v7)
      {
        v8 = (_QWORD *)(v5 + 32);
        v9 = *(_QWORD *)(v5 + 32);
        v37 = *(std::runtime_error *)(v5 + 8);
        v6->__vftable = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)&v38 = *(_QWORD *)(v5 + 24);
        *((_QWORD *)&v38 + 1) = v9;
        v39 = *(__int128 **)(v5 + 40);
        if (v39)
        {
          *(_QWORD *)(v9 + 16) = (char *)&v38 + 8;
          *(_QWORD *)(v5 + 24) = v8;
          *v8 = 0;
          *(_QWORD *)(v5 + 40) = 0;
        }
        else
        {
          *(_QWORD *)&v38 = (char *)&v38 + 8;
        }
        v12 = *(_OWORD *)(v5 + 64);
        v40 = *(_OWORD *)(v5 + 48);
        *(_QWORD *)(v5 + 48) = 0;
        *(_QWORD *)(v5 + 56) = 0;
        v41 = v12;
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        LOBYTE(v42) = 0;
        v44 = 0;
        if (*(_BYTE *)(v5 + 104))
        {
          v13 = *(_OWORD *)(v5 + 80);
          v43 = *(_QWORD *)(v5 + 96);
          v42 = v13;
          *(_QWORD *)(v5 + 80) = 0;
          *(_QWORD *)(v5 + 88) = 0;
          *(_QWORD *)(v5 + 96) = 0;
          v44 = 1;
        }
        LOBYTE(v45) = 0;
        *(_DWORD *)v46 = -1;
        v14 = *(unsigned int *)(v5 + 128);
        if ((_DWORD)v14 != -1)
        {
          ((void (*)(char *, __int128 *, uint64_t))off_1E253CA98[v14])(&v64, &v45, v5 + 112);
          *(_DWORD *)v46 = v14;
        }
        v15 = *(_QWORD *)(v5 + 184);
        v16 = *(_OWORD *)(v5 + 136);
        *(_DWORD *)&v46[24] = *(_DWORD *)(v5 + 152);
        *(_OWORD *)&v46[8] = v16;
        if (v15)
        {
          if (v15 == v5 + 160)
          {
            *(_QWORD *)&v48[8] = &v47;
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
          }
          else
          {
            *(_QWORD *)&v48[8] = v15;
            *(_QWORD *)(v5 + 184) = 0;
          }
        }
        else
        {
          *(_QWORD *)&v48[8] = 0;
        }
        *(_OWORD *)&v48[16] = *(_OWORD *)(v5 + 192);
        *(_QWORD *)(v5 + 192) = 0;
        *(_QWORD *)(v5 + 200) = 0;
      }
      else
      {
        std::runtime_error::runtime_error(&v37, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v38 = *(_OWORD *)(v5 + 24);
        v39 = *(__int128 **)(v5 + 40);
        *(_QWORD *)&v40 = v11;
        *((_QWORD *)&v40 + 1) = *(_QWORD *)(v5 + 56);
        if (*((_QWORD *)&v40 + 1))
        {
          *(_QWORD *)(v11 + 16) = &v40;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v39 = &v40;
        }
        v41 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        v37.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
        LOBYTE(v42) = 0;
        v44 = 0;
        if (*(_BYTE *)(v5 + 104))
        {
          v17 = *(_OWORD *)(v5 + 80);
          v43 = *(_QWORD *)(v5 + 96);
          v42 = v17;
          *(_QWORD *)(v5 + 80) = 0;
          *(_QWORD *)(v5 + 88) = 0;
          *(_QWORD *)(v5 + 96) = 0;
          v44 = 1;
        }
        v18 = *(_OWORD *)(v5 + 112);
        *(_OWORD *)v46 = *(_OWORD *)(v5 + 128);
        v45 = v18;
        v19 = *(_OWORD *)(v5 + 144);
        v20 = *(_OWORD *)(v5 + 160);
        v21 = *(_OWORD *)(v5 + 176);
        *(_OWORD *)&v48[9] = *(_OWORD *)(v5 + 185);
        *(_OWORD *)v48 = v21;
        v47 = v20;
        *(_OWORD *)&v46[16] = v19;
        v50 = 0;
        v49 = 0uLL;
        v49 = *(_OWORD *)(v5 + 208);
        v50 = *(_QWORD *)(v5 + 224);
        *(_QWORD *)(v5 + 208) = 0;
        *(_QWORD *)(v5 + 216) = 0;
        *(_QWORD *)(v5 + 224) = 0;
        v22 = *(_OWORD *)(v5 + 328);
        v23 = *(_OWORD *)(v5 + 344);
        v24 = *(_OWORD *)(v5 + 360);
        *(_OWORD *)((char *)v59 + 10) = *(_OWORD *)(v5 + 370);
        v25 = *(_OWORD *)(v5 + 248);
        v51 = *(_OWORD *)(v5 + 232);
        v52 = v25;
        v26 = *(_OWORD *)(v5 + 264);
        v27 = *(_OWORD *)(v5 + 280);
        v28 = *(_OWORD *)(v5 + 312);
        v55 = *(_OWORD *)(v5 + 296);
        v56 = v28;
        v53 = v26;
        v54 = v27;
        v58 = v23;
        v59[0] = v24;
        v57 = v22;
        LOBYTE(v60) = 0;
        v62 = 0;
        if (*(_BYTE *)(v5 + 416))
        {
          v29 = *(_OWORD *)(v5 + 392);
          v61 = *(_QWORD *)(v5 + 408);
          v60 = v29;
          *(_QWORD *)(v5 + 392) = 0;
          *(_QWORD *)(v5 + 400) = 0;
          *(_QWORD *)(v5 + 408) = 0;
          v62 = 1;
        }
      }
      v63 = v7;
      if (!v66)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t *, std::runtime_error *))(*v66 + 48))(v66, &v37);
      if (v63)
      {
        v30 = *(std::__shared_weak_count **)&v48[24];
        if (*(_QWORD *)&v48[24])
        {
          v31 = (unint64_t *)(*(_QWORD *)&v48[24] + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v38);
        imp = (std::__shared_weak_count *)v37.__imp_.__imp_;
        if (v37.__imp_.__imp_)
        {
          v34 = (unint64_t *)(v37.__imp_.__imp_ + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v66;
    if (v66 == (uint64_t *)v65)
    {
      v36 = 4;
      result = (uint64_t *)v65;
    }
    else
    {
      if (!v66)
        return result;
      v36 = 5;
    }
    return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v36))();
  }
  return result;
}

void sub_18CD11A54(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::~Promise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v2 = (_QWORD *)(a1 + 448);
  v3 = *(_QWORD **)(a1 + 472);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 432))
  {
    if (*(_BYTE *)(a1 + 424))
    {
      v5 = *(std::__shared_weak_count **)(a1 + 200);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 24));
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
    }
  }
  do
  {
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v12)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

_BYTE *AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleProceedAction(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  char v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  _BYTE v53[16];
  int v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 1136);
  if (!*(_BYTE *)(v1 + 88))
    __break(1u);
  v3 = (_BYTE *)(a1 + 928);
  v4 = *(_BYTE *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 928), (const std::runtime_error *)(v1 + 8));
    *(_OWORD *)(a1 + 944) = *(_OWORD *)(v1 + 24);
    *(_QWORD *)(a1 + 928) = off_1E2521330;
    v5 = (_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(a1 + 960) = *(_QWORD *)(v1 + 40);
    v7 = a1 + 968;
    *(_QWORD *)(a1 + 968) = v6;
    v8 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(a1 + 976) = v8;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v1 + 40) = v5;
      *v5 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 960) = v7;
    }
    v9 = *(_QWORD *)(a1 + 1136);
    *(_OWORD *)(a1 + 984) = *(_OWORD *)(v9 + 64);
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = 0;
  }
  *(_BYTE *)(a1 + 1000) = v4;
  v10 = *(_QWORD *)(a1 + 1144);
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v13 = *(std::__shared_weak_count **)(a1 + 1144);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 1096);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 1128);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 1112);
  if (!v20)
    goto LABEL_62;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (*(_BYTE *)(a1 + 1000))
      goto LABEL_36;
  }
  else
  {
LABEL_62:
    if (*(_BYTE *)(a1 + 1000))
      goto LABEL_36;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v41);
  AMSCore::Logger::log<char [37],AMSCore::Error>(v41, (uint64_t)"networking", 10, "Failed to save the account. error = ", (uint64_t)v3);
  v23 = v42;
  if (!v42)
    goto LABEL_63;
  v24 = (unint64_t *)&v42->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_63:
    if (*(_BYTE *)(a1 + 1000))
      goto LABEL_36;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (!*(_BYTE *)(a1 + 1000))
LABEL_32:
    (**(void (***)(_BYTE *))v3)(v3);
LABEL_36:
  v26 = *(_QWORD *)(a1 + 1008);
  v27 = (_QWORD *)(v26 + 8);
  v28 = *(_QWORD *)(v26 + 8);
  v45 = *(uint64_t **)v26;
  v46 = v28;
  if (*(_QWORD *)(v26 + 16))
  {
    *(_QWORD *)(v28 + 16) = &v46;
    *(_QWORD *)v26 = v27;
    *v27 = 0;
    *(_QWORD *)(v26 + 16) = 0;
  }
  else
  {
    v45 = &v46;
  }
  v48 = *(_OWORD *)(v26 + 24);
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v49 = *(_OWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 48) = 0;
  LOBYTE(v50) = 0;
  v52 = 0;
  if (*(_BYTE *)(v26 + 80))
  {
    v29 = *(_OWORD *)(v26 + 56);
    v51 = *(_QWORD *)(v26 + 72);
    v50 = v29;
    *(_QWORD *)(v26 + 64) = 0;
    *(_QWORD *)(v26 + 72) = 0;
    *(_QWORD *)(v26 + 56) = 0;
    v52 = 1;
  }
  v53[0] = 0;
  v54 = -1;
  v30 = *(unsigned int *)(v26 + 104);
  if ((_DWORD)v30 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E253CA98[v30])(&v40, v53, v26 + 88);
    v54 = v30;
  }
  v31 = *(uint64_t **)(v26 + 160);
  v32 = *(_OWORD *)(v26 + 112);
  v56 = *(_DWORD *)(v26 + 128);
  v55 = v32;
  if (v31)
  {
    if (v31 == (uint64_t *)(v26 + 136))
    {
      v58 = &v57;
      (*(void (**)(uint64_t *))(*v31 + 24))(v31);
    }
    else
    {
      v58 = v31;
      *(_QWORD *)(v26 + 160) = 0;
    }
  }
  else
  {
    v58 = 0;
  }
  AMSCore::ExecuteHTTPRequestTask::Result::Result((uint64_t)&v41, a1 + 1072, (uint64_t)&v45, (__int128 *)(a1 + 272));
  std::optional<AMSCore::ExecuteHTTPRequestTask::Result>::emplace[abi:fe180100]<AMSCore::ExecuteHTTPRequestTask::Result,void>(a1 + 24, (uint64_t)&v41);
  v33 = v44;
  if (v44)
  {
    v34 = (unint64_t *)&v44->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v43);
  v36 = v42;
  if (v42)
  {
    v37 = (unint64_t *)&v42->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v45);
  *(_QWORD *)(a1 + 928) = a1 + 16;
  *(_QWORD *)a1 = 0;
  return AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CD11FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleProceedAction(char *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  void **v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;

  if (*(_QWORD *)a1)
  {
    v2 = *((_QWORD *)a1 + 143);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 143);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 137);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 141);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 139);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = (char *)*((_QWORD *)a1 + 33);
  if (v15 == a1 + 240)
  {
    v16 = 4;
    v15 = a1 + 240;
  }
  else
  {
    if (!v15)
      goto LABEL_27;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_27:
  if (a1[224])
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 40));
    v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  do
  {
    v23 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v24)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v25 = (void **)*((_QWORD *)a1 + 130);
  if (v25)
  {
    do
    {
      v33 = (void **)*v25;
      if (*((char *)v25 + 39) < 0)
        operator delete(v25[2]);
      operator delete(v25);
      v25 = v33;
    }
    while (v33);
  }
  v26 = (void *)*((_QWORD *)a1 + 128);
  *((_QWORD *)a1 + 128) = 0;
  if (v26)
    operator delete(v26);
  v27 = (std::__shared_weak_count *)*((_QWORD *)a1 + 127);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)a1 + 135);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)(a1 + 272));
  operator delete(a1);
}

uint64_t std::optional<AMSCore::ExecuteHTTPRequestTask::Result>::emplace[abi:fe180100]<AMSCore::ExecuteHTTPRequestTask::Result,void>(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  char v20;

  if (*(_BYTE *)(a1 + 200))
  {
    v4 = *(std::__shared_weak_count **)(a1 + 192);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 16));
    v7 = *(std::__shared_weak_count **)(a1 + 8);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    *(_BYTE *)(a1 + 200) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v10 = (_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  v12 = a1 + 24;
  v13 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(a2 + 16) = v10;
    *v10 = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v12;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    v14 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  v15 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(char *))off_1E253CA98[v15])(&v20);
    *(_DWORD *)(a1 + 120) = v15;
  }
  v16 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v16;
  v17 = (_QWORD *)(a2 + 176);
  v18 = *(_QWORD *)(a2 + 176);
  if (v18)
  {
    if (v18 == a2 + 152)
    {
      *(_QWORD *)(a1 + 176) = a1 + 152;
      (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 24))(*v17);
      goto LABEL_26;
    }
    *(_QWORD *)(a1 + 176) = v18;
  }
  else
  {
    v17 = (_QWORD *)(a1 + 176);
  }
  *v17 = 0;
LABEL_26:
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 1;
  return a1;
}

_BYTE *AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  _BYTE v30[16];
  int v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v1 = result;
  v39 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 216);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 248);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 224))
      {
        v38 = v37;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v37);
      }
      else
      {
        v38 = *(_BYTE **)(*(_QWORD *)v1 + 248);
        *v4 = 0;
      }
    }
    else
    {
      v38 = 0;
    }
    if (v38)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 208))
      {
        __break(1u);
        return result;
      }
      v6 = (_QWORD *)(v5 + 32);
      v7 = *(_QWORD *)(v5 + 32);
      v21 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      v22 = *(uint64_t **)(v5 + 24);
      v23 = v7;
      if (*(_QWORD *)(v5 + 40))
      {
        *(_QWORD *)(v7 + 16) = &v23;
        *(_QWORD *)(v5 + 24) = v6;
        *v6 = 0;
        *(_QWORD *)(v5 + 40) = 0;
      }
      else
      {
        v22 = &v23;
      }
      v8 = *(_OWORD *)(v5 + 64);
      v25 = *(_OWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 56) = 0;
      v26 = v8;
      *(_QWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      LOBYTE(v27) = 0;
      v29 = 0;
      if (*(_BYTE *)(v5 + 104))
      {
        v9 = *(_OWORD *)(v5 + 80);
        v28 = *(_QWORD *)(v5 + 96);
        v27 = v9;
        *(_QWORD *)(v5 + 80) = 0;
        *(_QWORD *)(v5 + 88) = 0;
        *(_QWORD *)(v5 + 96) = 0;
        v29 = 1;
      }
      v30[0] = 0;
      v31 = -1;
      v10 = *(unsigned int *)(v5 + 128);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E253CA98[v10])(&v20, v30, v5 + 112);
        v31 = v10;
      }
      v11 = *(uint64_t **)(v5 + 184);
      v12 = *(_OWORD *)(v5 + 136);
      v33 = *(_DWORD *)(v5 + 152);
      v32 = v12;
      if (v11)
      {
        if (v11 == (uint64_t *)(v5 + 160))
        {
          v35 = &v34;
          (*(void (**)(uint64_t *))(*v11 + 24))(v11);
        }
        else
        {
          v35 = v11;
          *(_QWORD *)(v5 + 184) = 0;
        }
      }
      else
      {
        v35 = 0;
      }
      v36 = *(_OWORD *)(v5 + 192);
      *(_QWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 200) = 0;
      if (!v38)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v38 + 48))(v38, &v21);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v22);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v38;
    if (v38 == v37)
    {
      v19 = 4;
      result = v37;
    }
    else
    {
      if (!v38)
        return result;
      v19 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
  }
  return result;
}

void sub_18CD127DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 216);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultEvE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleRetryAction(unint64_t a1)
{
  unint64_t v2;
  std::runtime_error *v3;
  std::runtime_error *v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  const std::runtime_error *v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const std::runtime_error *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void **v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  void **v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *imp;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  __int128 v126;
  unint64_t *v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  void **v138;
  void **i;
  _BYTE *v140;
  std::runtime_error v141;
  __int128 v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _OWORD v154[2];
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[2];
  __int128 v166;
  uint64_t v167;
  char v168;
  void *v169[2];
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  void *v184;
  void **v185;
  uint64_t v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  int v203;
  char v204;
  char v205;
  __int16 v206;
  void *__p;
  char v208;
  char v209;

  v140 = (_BYTE *)(a1 + 3344);
  v2 = a1 + 1464;
  v3 = (std::runtime_error *)(a1 + 1424);
  v4 = (std::runtime_error *)(a1 + 1848);
  v5 = (void **)(a1 + 2640);
  v6 = (_QWORD *)(a1 + 3192);
  v7 = a1 + 16;
  if (*(_BYTE *)(a1 + 3344))
    goto LABEL_2;
  v15 = *(_QWORD *)(a1 + 3312);
  if (!*(_BYTE *)(v15 + 408))
    goto LABEL_176;
  v16 = (const std::runtime_error *)(v15 + 8);
  v17 = *(_BYTE *)(v15 + 400);
  if (v17)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 1848, (uint64_t)v16);
    v18 = (_QWORD *)(v15 + 384);
    *(_QWORD *)(a1 + 2224) = *(_QWORD *)(v15 + 384);
    v19 = (_QWORD *)(a1 + 2232);
    v20 = (_QWORD *)(v15 + 392);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 1848), v16);
    *(_OWORD *)(a1 + 1864) = *(_OWORD *)(v15 + 24);
    *(_QWORD *)(a1 + 1848) = off_1E2521330;
    v30 = (_QWORD *)(v15 + 48);
    v31 = *(_QWORD *)(v15 + 48);
    *(_QWORD *)(a1 + 1880) = *(_QWORD *)(v15 + 40);
    v32 = a1 + 1888;
    *(_QWORD *)(a1 + 1888) = v31;
    v33 = *(_QWORD *)(v15 + 56);
    *(_QWORD *)(a1 + 1896) = v33;
    if (v33)
    {
      *(_QWORD *)(v31 + 16) = v32;
      *(_QWORD *)(v15 + 40) = v30;
      *v30 = 0;
      *(_QWORD *)(v15 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 1880) = v32;
    }
    v99 = *(_QWORD *)(a1 + 3312);
    v100 = *(_QWORD *)(v99 + 64);
    v18 = (_QWORD *)(v99 + 64);
    *(_QWORD *)(a1 + 1904) = v100;
    v19 = (_QWORD *)(a1 + 1912);
    v20 = v18 + 1;
  }
  *v19 = *v20;
  *v18 = 0;
  v18[1] = 0;
  *(_BYTE *)(a1 + 2240) = v17;
  v101 = *(_QWORD *)(a1 + 3320);
  if (v101)
  {
    v102 = (unint64_t *)(v101 + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      v104 = *(std::__shared_weak_count **)(a1 + 3320);
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v105 = *(std::__shared_weak_count **)(a1 + 1432);
  if (v105)
  {
    p_shared_owners = (unint64_t *)&v105->__shared_owners_;
    do
      v107 = __ldaxr(p_shared_owners);
    while (__stlxr(v107 - 1, p_shared_owners));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = *(std::__shared_weak_count **)(a1 + 3256);
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 960));
  if (*(_BYTE *)(a1 + 2240))
  {
    LOBYTE(v169[0]) = *(_BYTE *)(a1 + 3088);
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v141);
    AMSCore::Logger::log<char [36],unsigned char>((uint64_t)v141.__vftable, v169);
    imp = (std::__shared_weak_count *)v141.__imp_.__imp_;
    if (v141.__imp_.__imp_)
    {
      v112 = (unint64_t *)(v141.__imp_.__imp_ + 8);
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    if (!*(_BYTE *)(a1 + 2240))
      goto LABEL_176;
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v5, (uint64_t)v4);
    *(_OWORD *)(v2 + 1552) = *(_OWORD *)(a1 + 2224);
    *(_QWORD *)(a1 + 2232) = 0;
    *(_QWORD *)(a1 + 2224) = 0;
    *(_QWORD *)(a1 + 3096) = *(_QWORD *)(a1 + 3032);
    *(_QWORD *)(a1 + 3104) = *(_QWORD *)(a1 + 3040);
    *(_QWORD *)(a1 + 3032) = 0;
    *(_QWORD *)(a1 + 3040) = 0;
    v114 = *(_QWORD *)(a1 + 3048);
    v115 = *(_QWORD *)(a1 + 3056);
    *(_QWORD *)(a1 + 3056) = 0;
    *(_QWORD *)(a1 + 3048) = 0;
    *(_QWORD *)(a1 + 3112) = v114;
    *(_QWORD *)(a1 + 3120) = v115;
    v116 = *(_QWORD *)(a1 + 3064);
    *(_QWORD *)(a1 + 3128) = v116;
    v117 = *(_QWORD *)(a1 + 3072);
    *(_QWORD *)(a1 + 3136) = v117;
    *(_DWORD *)(a1 + 3144) = *(_DWORD *)(a1 + 3080);
    if (v117)
    {
      v118 = *(_QWORD *)(v116 + 8);
      if ((v115 & (v115 - 1)) != 0)
      {
        if (v118 >= v115)
          v118 %= v115;
      }
      else
      {
        v118 &= v115 - 1;
      }
      *(_QWORD *)(v114 + 8 * v118) = a1 + 3128;
      *(_QWORD *)(a1 + 3064) = 0;
      *(_QWORD *)(a1 + 3072) = 0;
    }
    *(_WORD *)(a1 + 3152) = *(_WORD *)(a1 + 3088);
    v124 = *(_QWORD *)(a1 + 3184);
    if (v124)
    {
      if (v124 == a1 + 3160)
      {
        *(_QWORD *)(a1 + 3216) = v6;
        (*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)(a1 + 3160) + 24))(a1 + 3160, v6);
        goto LABEL_153;
      }
      v125 = (_QWORD *)(a1 + 3184);
      *(_QWORD *)(a1 + 3216) = v124;
    }
    else
    {
      v125 = (_QWORD *)(a1 + 3216);
    }
    *v125 = 0;
LABEL_153:
    v126 = *(_OWORD *)(a1 + 3264);
    *(_OWORD *)(a1 + 3328) = v126;
    *(_QWORD *)(a1 + 3264) = 0;
    *(_QWORD *)(a1 + 3272) = 0;
    if (!atomic_load((unint64_t *)(v126 + 440)))
    {
      *v140 = 1;
      v128 = (unint64_t *)(*(_QWORD *)(a1 + 3328) + 440);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(a1, v128));
      if (!v129)
        return;
    }
LABEL_2:
    v8 = *(_QWORD *)(a1 + 3328);
    if (*(_BYTE *)(v8 + 432))
    {
      v9 = (const std::runtime_error *)(v8 + 8);
      v10 = *(_BYTE *)(v8 + 424);
      if (!v10)
      {
        std::runtime_error::runtime_error(v3, v9);
        *(_QWORD *)(a1 + 1424) = MEMORY[0x1E0DE4F90] + 16;
        *(_OWORD *)(a1 + 1440) = *(_OWORD *)(v8 + 24);
        *(_QWORD *)(a1 + 1424) = off_1E2521330;
        *(_QWORD *)(a1 + 1456) = *(_QWORD *)(v8 + 40);
        v21 = a1 + 1464;
        v22 = (_QWORD *)(v8 + 48);
        v23 = *(_QWORD *)(v8 + 48);
        *(_QWORD *)(a1 + 1464) = v23;
        v24 = *(_QWORD *)(v8 + 56);
        *(_QWORD *)(a1 + 1472) = v24;
        if (v24)
        {
          *(_QWORD *)(v23 + 16) = v21;
          *(_QWORD *)(v8 + 40) = v22;
          *v22 = 0;
          *(_QWORD *)(v8 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 1456) = v21;
        }
        *(_OWORD *)(v2 + 16) = *(_OWORD *)(v8 + 64);
        *(_QWORD *)(v8 + 64) = 0;
        *(_QWORD *)(v8 + 72) = 0;
        *(_QWORD *)(a1 + 1424) = &off_1E2521420;
        *(_BYTE *)(a1 + 1496) = 0;
        *(_BYTE *)(a1 + 1520) = 0;
        if (*(_BYTE *)(v8 + 104))
        {
          v34 = *(_OWORD *)(v8 + 80);
          *(_QWORD *)(a1 + 1512) = *(_QWORD *)(v8 + 96);
          *(_OWORD *)(a1 + 1496) = v34;
          *(_QWORD *)(v8 + 88) = 0;
          *(_QWORD *)(v8 + 96) = 0;
          *(_QWORD *)(v8 + 80) = 0;
          *(_BYTE *)(a1 + 1520) = 1;
        }
        v35 = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(a1 + 1544) = *(_OWORD *)(v8 + 128);
        *(_OWORD *)(a1 + 1528) = v35;
        v36 = *(_OWORD *)(v8 + 144);
        v37 = *(_OWORD *)(v8 + 160);
        v38 = *(_OWORD *)(v8 + 176);
        *(_OWORD *)(a1 + 1601) = *(_OWORD *)(v8 + 185);
        *(_OWORD *)(a1 + 1592) = v38;
        *(_OWORD *)(a1 + 1576) = v37;
        *(_OWORD *)(a1 + 1560) = v36;
        *(_QWORD *)(v2 + 168) = 0;
        *(_QWORD *)(v2 + 176) = 0;
        *(_QWORD *)(v2 + 160) = 0;
        *(_OWORD *)(v2 + 160) = *(_OWORD *)(v8 + 208);
        *(_QWORD *)(a1 + 1640) = *(_QWORD *)(v8 + 224);
        *(_QWORD *)(v8 + 216) = 0;
        *(_QWORD *)(v8 + 224) = 0;
        *(_QWORD *)(v8 + 208) = 0;
        v39 = *(_OWORD *)(v8 + 232);
        *(_OWORD *)(a1 + 1664) = *(_OWORD *)(v8 + 248);
        *(_OWORD *)(a1 + 1648) = v39;
        v40 = *(_OWORD *)(v8 + 264);
        v41 = *(_OWORD *)(v8 + 280);
        v42 = *(_OWORD *)(v8 + 296);
        *(_OWORD *)(a1 + 1728) = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(a1 + 1712) = v42;
        *(_OWORD *)(a1 + 1696) = v41;
        *(_OWORD *)(a1 + 1680) = v40;
        v43 = *(_OWORD *)(v8 + 328);
        v44 = *(_OWORD *)(v8 + 344);
        v45 = *(_OWORD *)(v8 + 360);
        *(_OWORD *)(a1 + 1786) = *(_OWORD *)(v8 + 370);
        *(_OWORD *)(a1 + 1776) = v45;
        *(_OWORD *)(a1 + 1760) = v44;
        *(_OWORD *)(a1 + 1744) = v43;
        *(_BYTE *)(a1 + 1808) = 0;
        *(_BYTE *)(a1 + 1832) = 0;
        if (*(_BYTE *)(v8 + 416))
        {
          v46 = *(_OWORD *)(v8 + 392);
          *(_QWORD *)(a1 + 1824) = *(_QWORD *)(v8 + 408);
          *(_OWORD *)(a1 + 1808) = v46;
          *(_QWORD *)(v8 + 400) = 0;
          *(_QWORD *)(v8 + 408) = 0;
          *(_QWORD *)(v8 + 392) = 0;
          *(_BYTE *)(a1 + 1832) = 1;
        }
LABEL_30:
        *(_BYTE *)(a1 + 1840) = v10;
        std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](a1 + 24);
        v47 = *(_BYTE *)(a1 + 1840);
        if (!v47)
        {
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v3);
          v51 = *(_QWORD *)(a1 + 1464);
          *(_QWORD *)(a1 + 64) = v51;
          v52 = a1 + 64;
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 1440);
          *(_QWORD *)(a1 + 24) = off_1E2521330;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 1456);
          v53 = *(_QWORD *)(a1 + 1472);
          *(_QWORD *)(a1 + 72) = v53;
          if (v53)
          {
            *(_QWORD *)(v51 + 16) = v52;
            *(_QWORD *)(a1 + 1456) = a1 + 1464;
            *(_QWORD *)(a1 + 1464) = 0;
            *(_QWORD *)(a1 + 1472) = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 56) = v52;
          }
          v59 = *(_OWORD *)(v2 + 16);
          *(_BYTE *)(a1 + 96) = 0;
          *(_OWORD *)(a1 + 80) = v59;
          *(_QWORD *)(v2 + 16) = 0;
          *(_QWORD *)(v2 + 24) = 0;
          *(_QWORD *)(a1 + 24) = &off_1E2521420;
          *(_BYTE *)(a1 + 120) = 0;
          if (*(_BYTE *)(a1 + 1520))
          {
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 1512);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 1496);
            *(_QWORD *)(a1 + 1512) = 0;
            *(_QWORD *)(a1 + 1496) = 0;
            *(_QWORD *)(a1 + 1504) = 0;
            *(_BYTE *)(a1 + 120) = 1;
          }
          v60 = *(_OWORD *)(a1 + 1576);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 1560);
          *(_OWORD *)(a1 + 176) = v60;
          *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 1592);
          *(_OWORD *)(a1 + 201) = *(_OWORD *)(a1 + 1601);
          v61 = *(_OWORD *)(a1 + 1544);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 1528);
          *(_OWORD *)(a1 + 144) = v61;
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(v2 + 160);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 1640);
          *(_QWORD *)(v2 + 160) = 0;
          *(_QWORD *)(v2 + 168) = 0;
          *(_QWORD *)(v2 + 176) = 0;
          v62 = *(_OWORD *)(a1 + 1744);
          v63 = *(_OWORD *)(a1 + 1776);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a1 + 1760);
          *(_OWORD *)(a1 + 376) = v63;
          *(_OWORD *)(a1 + 386) = *(_OWORD *)(a1 + 1786);
          v64 = *(_OWORD *)(a1 + 1696);
          *(_OWORD *)(a1 + 280) = *(_OWORD *)(a1 + 1680);
          *(_OWORD *)(a1 + 296) = v64;
          v65 = *(_OWORD *)(a1 + 1728);
          *(_OWORD *)(a1 + 312) = *(_OWORD *)(a1 + 1712);
          *(_OWORD *)(a1 + 328) = v65;
          *(_OWORD *)(a1 + 344) = v62;
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 1648);
          *(_OWORD *)(a1 + 264) = *(_OWORD *)(a1 + 1664);
          *(_BYTE *)(a1 + 408) = 0;
          *(_BYTE *)(a1 + 432) = 0;
          if (*(_BYTE *)(a1 + 1832))
          {
            *(_OWORD *)(a1 + 408) = *(_OWORD *)(a1 + 1808);
            *(_QWORD *)(a1 + 424) = *(_QWORD *)(a1 + 1824);
            *(_QWORD *)(a1 + 1808) = 0;
            *(_QWORD *)(a1 + 1824) = 0;
            *(_QWORD *)(a1 + 1816) = 0;
            *(_BYTE *)(a1 + 432) = 1;
          }
LABEL_52:
          *(_BYTE *)(a1 + 440) = v47;
          *(_BYTE *)(a1 + 448) = 1;
          if (*(_BYTE *)(a1 + 1840))
          {
            v66 = *(std::__shared_weak_count **)(a1 + 1616);
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1440));
            v69 = *(std::__shared_weak_count **)(a1 + 1432);
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
          }
          else
          {
            ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
          }
          v72 = *(_QWORD *)(a1 + 3336);
          if (v72)
          {
            v73 = (unint64_t *)(v72 + 8);
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              v75 = *(std::__shared_weak_count **)(a1 + 3336);
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          v76 = *(std::__shared_weak_count **)(a1 + 3272);
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v79 = *(_QWORD **)(a1 + 3216);
          if (v79 == v6)
          {
            v80 = 4;
          }
          else
          {
            if (!v79)
            {
LABEL_79:
              v81 = *(void ***)(a1 + 3128);
              if (v81)
              {
                do
                {
                  v93 = (void **)*v81;
                  if (*((char *)v81 + 39) < 0)
                    operator delete(v81[2]);
                  operator delete(v81);
                  v81 = v93;
                }
                while (v93);
              }
              v82 = *(void **)(a1 + 3112);
              *(_QWORD *)(a1 + 3112) = 0;
              if (v82)
                operator delete(v82);
              v83 = *(std::__shared_weak_count **)(a1 + 3104);
              if (v83)
              {
                v84 = (unint64_t *)&v83->__shared_owners_;
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 - 1, v84));
                if (!v85)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              v86 = *(std::__shared_weak_count **)(a1 + 3024);
              if (v86)
              {
                v87 = (unint64_t *)&v86->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
              AMSCore::EncodeHTTPRequestTask::Options::~Options(v5);
              goto LABEL_93;
            }
            v80 = 5;
            v6 = *(_QWORD **)(a1 + 3216);
          }
          (*(void (**)(_QWORD *))(*v6 + 8 * v80))(v6);
          goto LABEL_79;
        }
        v48 = *(_QWORD *)(a1 + 1448);
        *(_QWORD *)(a1 + 48) = v48;
        v49 = a1 + 48;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 1424);
        v3->__vftable = 0;
        v3->__imp_.__imp_ = 0;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 1440);
        v50 = *(_QWORD *)(a1 + 1456);
        *(_QWORD *)(a1 + 56) = v50;
        if (v50)
        {
          *(_QWORD *)(v48 + 16) = v49;
          *(_QWORD *)(a1 + 1440) = a1 + 1448;
          *(_QWORD *)(a1 + 1448) = 0;
          *(_QWORD *)(a1 + 1456) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 40) = v49;
        }
        *(_BYTE *)(a1 + 96) = 0;
        v54 = *(_OWORD *)v2;
        v55 = *(_OWORD *)(v2 + 16);
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        *(_OWORD *)(a1 + 64) = v54;
        *(_OWORD *)(a1 + 80) = v55;
        *(_QWORD *)(v2 + 16) = 0;
        *(_QWORD *)(v2 + 24) = 0;
        *(_BYTE *)(a1 + 120) = 0;
        if (*(_BYTE *)(a1 + 1520))
        {
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 1512);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 1496);
          *(_QWORD *)(a1 + 1512) = 0;
          *(_QWORD *)(a1 + 1496) = 0;
          *(_QWORD *)(a1 + 1504) = 0;
          *(_BYTE *)(a1 + 120) = 1;
        }
        *(_BYTE *)(a1 + 128) = 0;
        *(_DWORD *)(a1 + 144) = -1;
        v56 = *(unsigned int *)(a1 + 1544);
        if ((_DWORD)v56 != -1)
        {
          ((void (*)(std::runtime_error *))off_1E253CA98[v56])(&v141);
          *(_DWORD *)(a1 + 144) = v56;
        }
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 1552);
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(a1 + 1568);
        v57 = *(_QWORD *)(a1 + 1600);
        if (v57)
        {
          if (v57 == a1 + 1576)
          {
            *(_QWORD *)(a1 + 200) = a1 + 176;
            (*(void (**)(unint64_t))(*(_QWORD *)(a1 + 1576) + 24))(a1 + 1576);
            goto LABEL_46;
          }
          v58 = (_QWORD *)(a1 + 1600);
          *(_QWORD *)(a1 + 200) = v57;
        }
        else
        {
          v58 = (_QWORD *)(a1 + 200);
        }
        *v58 = 0;
LABEL_46:
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v2 + 144);
        *(_QWORD *)(v2 + 144) = 0;
        *(_QWORD *)(v2 + 152) = 0;
        goto LABEL_52;
      }
      *(_OWORD *)(a1 + 1424) = *(_OWORD *)(v8 + 8);
      v9->__vftable = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(a1 + 1440) = *(_QWORD *)(v8 + 24);
      v11 = a1 + 1448;
      v12 = (_QWORD *)(v8 + 32);
      v13 = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(a1 + 1448) = v13;
      v14 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(a1 + 1456) = v14;
      if (v14)
      {
        *(_QWORD *)(v13 + 16) = v11;
        *(_QWORD *)(v8 + 24) = v12;
        *v12 = 0;
        *(_QWORD *)(v8 + 40) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 1440) = v11;
      }
      *(_OWORD *)v2 = *(_OWORD *)(v8 + 48);
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_OWORD *)(v2 + 16) = *(_OWORD *)(v8 + 64);
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      *(_BYTE *)(a1 + 1496) = 0;
      *(_BYTE *)(a1 + 1520) = 0;
      if (*(_BYTE *)(v8 + 104))
      {
        v25 = *(_OWORD *)(v8 + 80);
        *(_QWORD *)(a1 + 1512) = *(_QWORD *)(v8 + 96);
        *(_OWORD *)(a1 + 1496) = v25;
        *(_QWORD *)(v8 + 88) = 0;
        *(_QWORD *)(v8 + 96) = 0;
        *(_QWORD *)(v8 + 80) = 0;
        *(_BYTE *)(a1 + 1520) = 1;
      }
      *(_BYTE *)(a1 + 1528) = 0;
      *(_DWORD *)(a1 + 1544) = -1;
      v26 = *(unsigned int *)(v8 + 128);
      if ((_DWORD)v26 != -1)
      {
        ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v26])(&v141, a1 + 1528, v8 + 112);
        *(_DWORD *)(a1 + 1544) = v26;
      }
      v27 = *(_OWORD *)(v8 + 136);
      *(_DWORD *)(a1 + 1568) = *(_DWORD *)(v8 + 152);
      *(_OWORD *)(a1 + 1552) = v27;
      v28 = (_QWORD *)(v8 + 184);
      v29 = *(_QWORD *)(v8 + 184);
      if (v29)
      {
        if (v29 == v8 + 160)
        {
          *(_QWORD *)(a1 + 1600) = a1 + 1576;
          (*(void (**)(_QWORD))(*(_QWORD *)*v28 + 24))(*v28);
          goto LABEL_24;
        }
        *(_QWORD *)(a1 + 1600) = v29;
      }
      else
      {
        v28 = (_QWORD *)(a1 + 1600);
      }
      *v28 = 0;
LABEL_24:
      *(_OWORD *)(v2 + 144) = *(_OWORD *)(v8 + 192);
      *(_QWORD *)(v8 + 192) = 0;
      *(_QWORD *)(v8 + 200) = 0;
      goto LABEL_30;
    }
LABEL_176:
    __break(1u);
    return;
  }
  LOBYTE(v169[0]) = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  LOBYTE(__p) = 0;
  v209 = 0;
  v185 = 0;
  v184 = 0;
  v187 = 0;
  v186 = 0;
  v203 = 0;
  AMSCore::Unexpected<AMSCore::HTTPError,AMSCore::HTTPTransactionMetrics,AMSCore::Error &>((uint64_t)&v141, (uint64_t)v169, v4);
  std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](a1 + 24);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v141);
  v119 = v142;
  v121 = v143;
  v120 = v144;
  *(_QWORD *)(a1 + 64) = v144;
  v122 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v119;
  *(_QWORD *)(a1 + 24) = off_1E2521330;
  *(_QWORD *)(a1 + 56) = v121;
  v123 = v145;
  *(_QWORD *)(a1 + 72) = v145;
  if (v123)
  {
    *(_QWORD *)(v120 + 16) = v122;
    v143 = &v144;
    v144 = 0;
    v145 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v122;
  }
  v130 = v146;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = v130;
  v146 = 0uLL;
  *(_QWORD *)(a1 + 24) = &off_1E2521420;
  *(_BYTE *)(a1 + 120) = 0;
  if (v149)
  {
    *(_OWORD *)(a1 + 96) = v147;
    *(_QWORD *)(a1 + 112) = v148;
    v148 = 0;
    v147 = 0uLL;
    *(_BYTE *)(a1 + 120) = 1;
  }
  v131 = v153;
  *(_OWORD *)(a1 + 160) = v152;
  *(_OWORD *)(a1 + 176) = v131;
  *(_OWORD *)(a1 + 192) = v154[0];
  *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)v154 + 9);
  v132 = v151;
  *(_OWORD *)(a1 + 128) = v150;
  *(_OWORD *)(a1 + 144) = v132;
  *(_OWORD *)(a1 + 224) = v155;
  v133 = v163;
  v134 = v165[0];
  *(_OWORD *)(a1 + 360) = v164;
  *(_OWORD *)(a1 + 376) = v134;
  *(_OWORD *)(a1 + 386) = *(_OWORD *)((char *)v165 + 10);
  v135 = v160;
  *(_OWORD *)(a1 + 280) = v159;
  *(_OWORD *)(a1 + 296) = v135;
  v136 = v162;
  *(_OWORD *)(a1 + 312) = v161;
  *(_OWORD *)(a1 + 328) = v136;
  *(_OWORD *)(a1 + 344) = v133;
  v137 = v158;
  *(_OWORD *)(a1 + 248) = v157;
  *(_QWORD *)(a1 + 240) = v156;
  v155 = 0uLL;
  v156 = 0;
  *(_OWORD *)(a1 + 264) = v137;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  if (v168)
  {
    *(_OWORD *)(a1 + 408) = v166;
    *(_QWORD *)(a1 + 424) = v167;
    v167 = 0;
    v166 = 0uLL;
    *(_BYTE *)(a1 + 432) = 1;
  }
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 1;
  AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v141);
  if (v209 && v208 < 0)
    operator delete(__p);
  v138 = (void **)v184;
  if (v184)
  {
    for (i = v185; i != v138; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v138);
  }
  if (v171 && v170 < 0)
    operator delete(v169[0]);
LABEL_93:
  if (*(_BYTE *)(a1 + 2240))
  {
    v89 = *(std::__shared_weak_count **)(a1 + 2232);
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v4->__vftable);
    v92 = *(std::__shared_weak_count **)(a1 + 3288);
    if (!v92)
      goto LABEL_109;
    goto LABEL_105;
  }
  ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
  v92 = *(std::__shared_weak_count **)(a1 + 3288);
  if (v92)
  {
LABEL_105:
    v94 = (unint64_t *)&v92->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_109:
  v96 = *(std::__shared_weak_count **)(a1 + 3304);
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  *(_QWORD *)(a1 + 1424) = v7;
  *(_QWORD *)a1 = 0;
  *v140 = 2;
  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::Awaiter::await_suspend((uint64_t *)v3);
}

void sub_18CD13760(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v63;
  AMSCore::EncodeHTTPRequestTask::Options *v64;
  AMSCore::HTTPError *v65;

  AMSCore::HTTPTransactionMetrics::~HTTPTransactionMetrics(&a63);
  std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v64);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v63 + 3280);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v63 + 3296);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::unhandled_exception(v65);
}

void sub_18CD137F4()
{
  __cxa_end_catch();
  JUMPOUT(0x18CD131ECLL);
}

void sub_18CD137FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  _QWORD *v10;

  *v10 = 0;
  *a10 = 2;
  _Unwind_Resume(a1);
}

void AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleRetryAction(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  void **v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void **v52;

  v2 = (_QWORD *)(a1 + 3160);
  v3 = a1 + 16;
  v4 = *(unsigned __int8 *)(a1 + 3344);
  if (v4 == 2)
    goto LABEL_69;
  if (v4 != 1)
  {
    v14 = *(_QWORD *)(a1 + 3320);
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        v17 = *(std::__shared_weak_count **)(a1 + 3320);
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v18 = *(std::__shared_weak_count **)(a1 + 1432);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(std::__shared_weak_count **)(a1 + 3256);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 960));
    v24 = *(std::__shared_weak_count **)(a1 + 3288);
    if (!v24)
      goto LABEL_64;
    goto LABEL_60;
  }
  v5 = *(_QWORD *)(a1 + 3336);
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      v8 = *(std::__shared_weak_count **)(a1 + 3336);
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 3272);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD **)(a1 + 3216);
  if (v12 == (_QWORD *)(a1 + 3192))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 3192);
  }
  else
  {
    if (!v12)
      goto LABEL_35;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_35:
  v25 = *(void ***)(a1 + 3128);
  if (v25)
  {
    do
    {
      v36 = (void **)*v25;
      if (*((char *)v25 + 39) < 0)
        operator delete(v25[2]);
      operator delete(v25);
      v25 = v36;
    }
    while (v36);
  }
  v26 = *(void **)(a1 + 3112);
  *(_QWORD *)(a1 + 3112) = 0;
  if (v26)
    operator delete(v26);
  v27 = *(std::__shared_weak_count **)(a1 + 3104);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(std::__shared_weak_count **)(a1 + 3024);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 2640));
  if (*(_BYTE *)(a1 + 2240))
  {
    v33 = *(std::__shared_weak_count **)(a1 + 2232);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1848));
    v24 = *(std::__shared_weak_count **)(a1 + 3288);
    if (!v24)
      goto LABEL_64;
    goto LABEL_60;
  }
  (**(void (***)(uint64_t))(a1 + 1848))(a1 + 1848);
  v24 = *(std::__shared_weak_count **)(a1 + 3288);
  if (v24)
  {
LABEL_60:
    v37 = (unint64_t *)&v24->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_64:
  v39 = *(std::__shared_weak_count **)(a1 + 3304);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_69:
  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::~Promise(v3);
  v42 = *(_QWORD **)(a1 + 3184);
  if (v42 == v2)
  {
    v43 = 4;
    v42 = v2;
  }
  else
  {
    if (!v42)
      goto LABEL_74;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_74:
  v44 = *(void ***)(a1 + 3064);
  if (v44)
  {
    do
    {
      v52 = (void **)*v44;
      if (*((char *)v44 + 39) < 0)
        operator delete(v44[2]);
      operator delete(v44);
      v44 = v52;
    }
    while (v52);
  }
  v45 = *(void **)(a1 + 3048);
  *(_QWORD *)(a1 + 3048) = 0;
  if (v45)
    operator delete(v45);
  v46 = *(std::__shared_weak_count **)(a1 + 3040);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = *(std::__shared_weak_count **)(a1 + 2632);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 2248));
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 496));
  operator delete((void *)a1);
}

void AMSCore::Unexpected<AMSCore::HTTPError,AMSCore::HTTPTransactionMetrics,AMSCore::Error &>(uint64_t a1, uint64_t a2, const std::runtime_error *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[25];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[26];
  __int128 v34;
  uint64_t v35;
  std::runtime_error v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  __int128 v61;
  uint64_t v62;
  char v63;

  LOBYTE(__p[0]) = 0;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v19 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
  v22 = *(_OWORD *)(a2 + 64);
  v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v24 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v24[9] = *(_OWORD *)(a2 + 105);
  v20 = *(_OWORD *)(a2 + 32);
  v21 = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v32 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)v33 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)&v33[10] = *(_OWORD *)(a2 + 290);
  v31 = *(_OWORD *)(a2 + 248);
  v27 = *(_OWORD *)(a2 + 184);
  v28 = *(_OWORD *)(a2 + 200);
  v29 = *(_OWORD *)(a2 + 216);
  v30 = *(_OWORD *)(a2 + 232);
  v25 = *(_OWORD *)(a2 + 152);
  v26 = *(_OWORD *)(a2 + 168);
  LOBYTE(v34) = 0;
  v7 = *(unsigned __int8 *)(a2 + 336);
  if (*(_BYTE *)(a2 + 336))
  {
    v35 = *(_QWORD *)(a2 + 328);
    v34 = *(_OWORD *)(a2 + 312);
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 312) = 0;
  }
  AMSCore::Error::Error(&v36, a3);
  v36.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
  LOBYTE(v42) = 0;
  v44 = 0;
  if (v4)
  {
    v42 = *(_OWORD *)__p;
    v43 = v19;
    HIBYTE(v19) = 0;
    __p[0] = 0;
    v44 = 1;
  }
  v47 = v22;
  v48 = v23;
  v49[0] = *(_OWORD *)v24;
  *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)&v24[9];
  v45 = v20;
  v46 = v21;
  *(_QWORD *)&v50 = v17;
  *((_QWORD *)&v50 + 1) = v5;
  v51 = v6;
  *(_OWORD *)((char *)v60 + 10) = *(_OWORD *)&v33[10];
  v52 = v25;
  v53 = v26;
  v56 = v29;
  v57 = v30;
  v54 = v27;
  v55 = v28;
  v59 = v32;
  v60[0] = *(_OWORD *)v33;
  v58 = v31;
  LOBYTE(v61) = 0;
  v63 = 0;
  if (v7)
  {
    v61 = v34;
    v62 = v35;
    v63 = 1;
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v36);
  *(_OWORD *)(a1 + 16) = v37;
  *(_QWORD *)a1 = off_1E2521330;
  v8 = v39;
  *(_QWORD *)(a1 + 32) = v38;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a1 + 40;
  v10 = v40;
  *(_QWORD *)(a1 + 48) = v40;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    v38 = &v39;
    v39 = 0;
    v40 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_OWORD *)(a1 + 56) = v41;
  v41 = 0uLL;
  *(_QWORD *)a1 = &off_1E2521420;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (v44)
  {
    *(_OWORD *)(a1 + 72) = v42;
    *(_QWORD *)(a1 + 88) = v43;
    v43 = 0;
    v42 = 0uLL;
    *(_BYTE *)(a1 + 96) = 1;
  }
  v11 = v48;
  *(_OWORD *)(a1 + 136) = v47;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 168) = v49[0];
  *(_OWORD *)(a1 + 177) = *(_OWORD *)((char *)v49 + 9);
  v12 = v46;
  *(_OWORD *)(a1 + 104) = v45;
  *(_OWORD *)(a1 + 120) = v12;
  *(_OWORD *)(a1 + 200) = v50;
  *(_QWORD *)(a1 + 216) = v51;
  v51 = 0;
  v50 = 0uLL;
  v13 = v59;
  *(_OWORD *)(a1 + 320) = v58;
  *(_OWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 352) = v60[0];
  *(_OWORD *)(a1 + 362) = *(_OWORD *)((char *)v60 + 10);
  v14 = v55;
  *(_OWORD *)(a1 + 256) = v54;
  *(_OWORD *)(a1 + 272) = v14;
  v15 = v57;
  *(_OWORD *)(a1 + 288) = v56;
  *(_OWORD *)(a1 + 304) = v15;
  v16 = v53;
  *(_OWORD *)(a1 + 224) = v52;
  *(_OWORD *)(a1 + 240) = v16;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  if (v63)
  {
    *(_OWORD *)(a1 + 384) = v61;
    *(_QWORD *)(a1 + 400) = v62;
    v62 = 0;
    v61 = 0uLL;
    *(_BYTE *)(a1 + 408) = 1;
  }
  AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v36);
  if (v4)
  {
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
}

void sub_18CD13FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AMSCore::HTTPTransactionMetrics::~HTTPTransactionMetrics((void **)va);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Logger::log<char [36],unsigned char>(uint64_t result, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Retrying the request. retryCount = ", 35);
    LOBYTE(rep) = *a2;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)&rep, 1);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 2;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "networking", 10, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CD1426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleRetryAction(AMSCore::HTTPResponseAction,AMSCore::EncodeHTTPRequestTask::Result,AMSCore::ExecuteHTTPRequestTask::Context,std::function<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::LoadURLMetricsHandler::Options &&)>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<AMSCore::ExecuteHTTPRequestTask::IHandler>,std::shared_ptr<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>> const&>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *a2 = v3;
  a2[1] = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::ExecuteHTTPRequestTask::`anonymous namespace'::handleRetryAction(AMSCore::HTTPResponseAction,AMSCore::EncodeHTTPRequestTask::Result,AMSCore::ExecuteHTTPRequestTask::Context,std::function<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::LoadURLMetricsHandler::Options &&)>)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<AMSCore::ExecuteHTTPRequestTask::IHandler>,std::shared_ptr<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>> const&>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *a2 = v3;
  a2[1] = v2;
}

void std::__shared_ptr_emplace<AMSCore::EncodeHTTPRequestTask::OptionsBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::EncodeHTTPRequestTask::OptionsBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::EncodeHTTPRequestTask::OptionsBuilder>::__on_zero_shared(uint64_t a1)
{
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 24));
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 440);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultENS_9HTTPErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultENS_9HTTPErrorEE7Promise17get_return_o"
                                "bjectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultENS_9HTTPErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultENS_9HTTPErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::ExecuteHTTPRequestTask::perform(std::runtime_error *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  int v11;
  std::runtime_error *v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void **v40;
  void **v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45[47];
  __int128 v46;
  __int128 v47;
  void *__p;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  void *v54[44];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int16 v60;
  _QWORD v61[3];
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  _BYTE v71[16];
  int v72;
  __int128 v73;
  int v74;
  _QWORD v75[3];
  _QWORD *v76;
  _QWORD v77[3];
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char v86;
  char v87[16];
  int v88;
  __int128 v89;
  int v90;
  _QWORD v91[3];
  _QWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v45, a2);
  v46 = *(_OWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  v6 = (_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a3 + 8);
  v63 = *(uint64_t **)a3;
  v64 = v7;
  v65 = *(_QWORD *)(a3 + 16);
  if (v65)
  {
    *(_QWORD *)(v7 + 16) = &v64;
    *(_QWORD *)a3 = v6;
    *v6 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v63 = &v64;
  }
  v66 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v67 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  LOBYTE(v68) = 0;
  v70 = 0;
  if (*(_BYTE *)(a3 + 80))
  {
    v68 = *(_OWORD *)(a3 + 56);
    v69 = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    v70 = 1;
  }
  v71[0] = 0;
  v72 = -1;
  v8 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(void **, _BYTE *, uint64_t))off_1E253CA98[v8])(v54, v71, a3 + 88);
    v72 = v8;
  }
  v9 = *(_QWORD **)(a3 + 160);
  v73 = *(_OWORD *)(a3 + 112);
  v74 = *(_DWORD *)(a3 + 128);
  if (v9)
  {
    if (v9 == (_QWORD *)(a3 + 136))
    {
      v76 = v75;
      (*(void (**)(_QWORD *, _QWORD *))(*v9 + 24))(v9, v75);
    }
    else
    {
      v76 = v9;
      *(_QWORD *)(a3 + 160) = 0;
    }
  }
  else
  {
    v76 = 0;
  }
  v61[0] = &off_1E2521708;
  v61[1] = AMSCore::LoadURLMetricsHandler::handleURLMetrics;
  v62 = v61;
  v79 = v63;
  v80 = v64;
  v81 = v65;
  if (v65)
  {
    *(_QWORD *)(v64 + 16) = &v80;
    v63 = &v64;
    v64 = 0;
    v65 = 0;
  }
  else
  {
    v79 = &v80;
  }
  v10 = v66;
  v66 = 0uLL;
  v82 = v10;
  v83 = v67;
  v67 = 0uLL;
  LOBYTE(v84) = 0;
  v86 = 0;
  if (v70)
  {
    v84 = v68;
    v85 = v69;
    v69 = 0;
    v68 = 0uLL;
    v86 = 1;
  }
  v87[0] = 0;
  v88 = -1;
  v11 = v72;
  if (v72 != -1)
  {
    ((void (*)(void **, char *, _BYTE *))off_1E253CA98[v72])(v54, v87, v71);
    v88 = v11;
  }
  v12 = a1;
  v13 = &v79;
  v89 = v73;
  v90 = v74;
  if (!v76)
    goto LABEL_23;
  if (v76 != v75)
  {
    v13 = &v63;
    v92 = v76;
LABEL_23:
    v13[20] = 0;
    goto LABEL_25;
  }
  v92 = v91;
  (*(void (**)(_QWORD *, _QWORD *))(v75[0] + 24))(v75, v91);
LABEL_25:
  v14 = operator new(0xC0uLL);
  v15 = v14;
  v14[1] = 0;
  v14[2] = 0;
  v16 = v80;
  v14[3] = v79;
  v17 = v14 + 3;
  *v14 = &off_1E2522D20;
  v14[4] = v16;
  v18 = (char *)(v14 + 4);
  v19 = v81;
  v14[5] = v81;
  if (v19)
  {
    *(_QWORD *)(v16 + 16) = v18;
    v79 = &v80;
    v80 = 0;
    v81 = 0;
  }
  else
  {
    *v17 = v18;
  }
  v20 = v82;
  *((_BYTE *)v14 + 80) = 0;
  v82 = 0uLL;
  v21 = v83;
  *((_OWORD *)v14 + 3) = v20;
  *((_OWORD *)v14 + 4) = v21;
  v83 = 0uLL;
  *((_BYTE *)v14 + 104) = 0;
  if (v86)
  {
    *((_OWORD *)v14 + 5) = v84;
    v14[12] = v85;
    v85 = 0;
    v84 = 0uLL;
    *((_BYTE *)v14 + 104) = 1;
  }
  *((_BYTE *)v14 + 112) = 0;
  *((_DWORD *)v14 + 32) = -1;
  v22 = v88;
  if (v88 != -1)
  {
    ((void (*)(void **))off_1E253CA98[v88])(v54);
    *((_DWORD *)v15 + 32) = v22;
  }
  *(_OWORD *)(v15 + 17) = v89;
  *((_DWORD *)v15 + 38) = v90;
  if (v92)
  {
    if (v92 == v91)
    {
      v15[23] = v15 + 20;
      (*(void (**)(_QWORD *))(v91[0] + 24))(v91);
    }
    else
    {
      v15[23] = v92;
      v92 = 0;
    }
  }
  else
  {
    v15[23] = 0;
  }
  *(_QWORD *)&v56 = v17;
  *((_QWORD *)&v56 + 1) = v15;
  v57 = 0u;
  v58 = 0u;
  v59 = 1065353216;
  v60 = 0;
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v79);
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v54, (uint64_t)v45);
  v55 = v46;
  v46 = 0uLL;
  v47 = v56;
  v57 = 0uLL;
  v56 = 0uLL;
  __p = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 1065353216;
  v53 = v60;
  if (v62)
  {
    if (v62 == v61)
    {
      v78 = v77;
      (*(void (**)(uint64_t, _QWORD *))(v61[0] + 24))((uint64_t)v61, v77);
    }
    else
    {
      v78 = v62;
      v62 = 0;
    }
  }
  else
  {
    v78 = 0;
  }
  v23 = v78;
  if (v78 == v77)
  {
    v24 = 4;
    v23 = v77;
  }
  else
  {
    if (!v78)
      goto LABEL_47;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_47:
  v25 = (void **)v50;
  if (v50)
  {
    do
    {
      v40 = (void **)*v25;
      if (*((char *)v25 + 39) < 0)
        operator delete(v25[2]);
      operator delete(v25);
      v25 = v40;
    }
    while (v40);
  }
  v26 = __p;
  __p = 0;
  if (v26)
    operator delete(v26);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v54);
  v33 = (void **)v58;
  if ((_QWORD)v58)
  {
    do
    {
      v41 = (void **)*v33;
      if (*((char *)v33 + 39) < 0)
        operator delete(v33[2]);
      operator delete(v33);
      v33 = v41;
    }
    while (v41);
  }
  v34 = (void *)v57;
  *(_QWORD *)&v57 = 0;
  if (v34)
    operator delete(v34);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v62;
  if (v62 == v61)
  {
    v39 = 4;
    v38 = v61;
    goto LABEL_78;
  }
  if (v62)
  {
    v39 = 5;
LABEL_78:
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v63);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v45);
}

{
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  AMSCore::ExecuteHTTPRequestTask::Options *v44;
  std::runtime_error *v45;
  _QWORD *v46;
  __int128 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  const std::runtime_error *v52;
  char v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  void **v70;
  void **v71;
  void *v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  std::runtime_error *v129;
  std::runtime_error *v130;
  void **v131;
  void *v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  void *v147;
  void **v148;
  uint64_t v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  char v159;
  char v160;
  char v161;
  char v162;
  char v163;
  char v164;
  char v165;
  int v166;
  char v167;
  char v168;
  __int16 v169;
  void *__p;
  char v171;
  char v172;
  std::runtime_error v173;
  __int128 v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  char v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _OWORD v186[2];
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  _OWORD v197[2];
  __int128 v198;
  uint64_t v199;
  char v200;

  v6 = (char *)operator new(0x828uLL);
  v7 = (unint64_t)v6;
  v8 = v6 + 536;
  *(_QWORD *)v6 = AMSCore::ExecuteHTTPRequestTask::perform;
  *((_QWORD *)v6 + 1) = AMSCore::ExecuteHTTPRequestTask::perform;
  v9 = v6 + 920;
  v10 = *(_BYTE *)(a2 + 392);
  if (v10)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v6 + 920), a2);
    v11 = *(_QWORD *)(a2 + 376);
    v12 = (_QWORD *)(a2 + 384);
    v13 = (_QWORD *)(a2 + 376);
    *(_QWORD *)(v7 + 1296) = v11;
    v14 = (_QWORD *)(v7 + 1304);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(v6 + 920), (const std::runtime_error *)a2);
    v15 = (_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 40);
    *((_OWORD *)v9 + 1) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v7 + 920) = off_1E2521330;
    *(_QWORD *)(v7 + 952) = *(_QWORD *)(a2 + 32);
    v17 = v7 + 960;
    *(_QWORD *)(v7 + 960) = v16;
    v18 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(v7 + 968) = v18;
    if (v18)
    {
      *(_QWORD *)(v16 + 16) = v17;
      *(_QWORD *)(a2 + 32) = v15;
      *v15 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      *(_QWORD *)(v7 + 952) = v17;
    }
    v19 = *(_QWORD *)(a2 + 56);
    v13 = (_QWORD *)(a2 + 56);
    *(_QWORD *)(v7 + 976) = v19;
    v14 = (_QWORD *)(v7 + 984);
    v12 = v13 + 1;
  }
  *v14 = *v12;
  *v13 = 0;
  v13[1] = 0;
  *(_BYTE *)(v7 + 1312) = v10;
  *(_QWORD *)(v7 + 1712) = *(_QWORD *)a3;
  v20 = (_QWORD *)(v7 + 1720);
  v21 = (_QWORD *)(a3 + 8);
  v22 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v7 + 1720) = v22;
  v23 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(v7 + 1728) = v23;
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)a3 = v21;
    *v21 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(v7 + 1712) = v20;
  }
  *((_OWORD *)v8 + 75) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *((_OWORD *)v8 + 76) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v24 = (_OWORD *)(v7 + 1768);
  *(_BYTE *)(v7 + 1768) = 0;
  *(_BYTE *)(v7 + 1792) = 0;
  if (*(_BYTE *)(a3 + 80))
  {
    *v24 = *(_OWORD *)(a3 + 56);
    *(_QWORD *)(v7 + 1784) = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(v7 + 1792) = 1;
  }
  *(_BYTE *)(v7 + 1800) = 0;
  *(_DWORD *)(v7 + 1816) = -1;
  v25 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v25 != -1)
  {
    ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v25])(&v173, v7 + 1800, a3 + 88);
    *(_DWORD *)(v7 + 1816) = v25;
  }
  v130 = (std::runtime_error *)v9;
  v131 = (void **)(v7 + 1320);
  v26 = v7 + 16;
  v129 = (std::runtime_error *)(v7 + 496);
  v27 = v8 + 1200;
  v28 = v8 + 1216;
  v30 = (_QWORD *)(a3 + 160);
  v29 = *(_QWORD *)(a3 + 160);
  *(_OWORD *)(v7 + 1824) = *(_OWORD *)(a3 + 112);
  *(_DWORD *)(v7 + 1840) = *(_DWORD *)(a3 + 128);
  if (!v29)
  {
    v30 = (_QWORD *)(v7 + 1872);
    goto LABEL_18;
  }
  if (v29 != a3 + 136)
  {
    *(_QWORD *)(v7 + 1872) = v29;
LABEL_18:
    *v30 = 0;
    goto LABEL_20;
  }
  *(_QWORD *)(v7 + 1872) = v7 + 1848;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 24))(v29, v7 + 1848);
  v26 = v7 + 16;
  do
LABEL_20:
    v31 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v31 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_BYTE *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 448) = 0;
  *(_QWORD *)(v7 + 456) = 0;
  *(_QWORD *)(v7 + 488) = 0;
  v128 = v26;
  std::shared_ptr<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::get_return_object(void)::DetachPromise,void>(&v173, v26);
  *a1 = v173;
  if (!*(_BYTE *)(v7 + 1312))
  {
    LOBYTE(v132) = 0;
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v151 = 0;
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v165 = 0;
    v167 = 0;
    v168 = 0;
    v169 = 0;
    LOBYTE(__p) = 0;
    v172 = 0;
    v147 = 0;
    v148 = 0;
    v150 = 0;
    v149 = 0;
    v166 = 0;
    AMSCore::Unexpected<AMSCore::HTTPError,AMSCore::HTTPTransactionMetrics,AMSCore::Error>(v130, (uint64_t)&v132, &v173);
    std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](v7 + 24);
    std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), &v173);
    v35 = v174;
    v37 = v175;
    v36 = v176;
    *(_QWORD *)(v7 + 64) = v176;
    v38 = v7 + 64;
    *(_OWORD *)(v7 + 40) = v35;
    *(_QWORD *)(v7 + 24) = off_1E2521330;
    *(_QWORD *)(v7 + 56) = v37;
    v39 = v177;
    *(_QWORD *)(v7 + 72) = v177;
    v41 = (_BYTE *)(v7 + 2080);
    v40 = (uint64_t *)(v7 + 496);
    if (v39)
    {
      *(_QWORD *)(v36 + 16) = v38;
      v175 = &v176;
      v176 = 0;
      v177 = 0;
    }
    else
    {
      *(_QWORD *)(v7 + 56) = v38;
    }
    v62 = v178;
    *(_BYTE *)(v7 + 96) = 0;
    *(_OWORD *)(v7 + 80) = v62;
    v178 = 0uLL;
    *(_QWORD *)(v7 + 24) = &off_1E2521420;
    *(_BYTE *)(v7 + 120) = 0;
    if (v181)
    {
      *(_OWORD *)(v7 + 96) = v179;
      *(_QWORD *)(v7 + 112) = v180;
      v180 = 0;
      v179 = 0uLL;
      *(_BYTE *)(v7 + 120) = 1;
    }
    v63 = v185;
    *(_OWORD *)(v7 + 160) = v184;
    *(_OWORD *)(v7 + 176) = v63;
    *(_OWORD *)(v7 + 192) = v186[0];
    *(_OWORD *)(v7 + 201) = *(_OWORD *)((char *)v186 + 9);
    v64 = v183;
    *(_OWORD *)(v7 + 128) = v182;
    *(_OWORD *)(v7 + 144) = v64;
    *(_OWORD *)(v7 + 224) = v187;
    v65 = v195;
    v66 = v197[0];
    *(_OWORD *)(v7 + 360) = v196;
    *(_OWORD *)(v7 + 376) = v66;
    *(_OWORD *)(v7 + 386) = *(_OWORD *)((char *)v197 + 10);
    v67 = v192;
    *(_OWORD *)(v7 + 280) = v191;
    *(_OWORD *)(v7 + 296) = v67;
    v68 = v194;
    *(_OWORD *)(v7 + 312) = v193;
    *(_OWORD *)(v7 + 328) = v68;
    *(_OWORD *)(v7 + 344) = v65;
    v69 = v190;
    *(_OWORD *)(v7 + 248) = v189;
    *(_QWORD *)(v7 + 240) = v188;
    v187 = 0uLL;
    v188 = 0;
    *(_OWORD *)(v7 + 264) = v69;
    *(_BYTE *)(v7 + 408) = 0;
    *(_BYTE *)(v7 + 432) = 0;
    if (v200)
    {
      *(_OWORD *)(v7 + 408) = v198;
      *(_QWORD *)(v7 + 424) = v199;
      v199 = 0;
      v198 = 0uLL;
      *(_BYTE *)(v7 + 432) = 1;
    }
    *(_BYTE *)(v7 + 440) = 0;
    *(_BYTE *)(v7 + 448) = 1;
    AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v173);
    if (v172 && v171 < 0)
      operator delete(__p);
    v70 = (void **)v147;
    if (v147)
    {
      v71 = v148;
      v72 = v147;
      if (v148 != v147)
      {
        do
        {
          if (*((char *)v71 - 1) < 0)
            operator delete(*(v71 - 3));
          v71 -= 3;
        }
        while (v71 != v70);
        v72 = v147;
      }
      v148 = v70;
      operator delete(v72);
    }
    if (v134 && v133 < 0)
      operator delete(v132);
    goto LABEL_133;
  }
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v131, (uint64_t)v130);
  *(_OWORD *)(v7 + 1696) = *(_OWORD *)(v7 + 1296);
  *(_QWORD *)(v7 + 1304) = 0;
  *(_QWORD *)(v7 + 1296) = 0;
  *(_QWORD *)(v7 + 1880) = *(_QWORD *)(v7 + 1712);
  v32 = v7 + 1888;
  v33 = *(_QWORD *)(v7 + 1720);
  *(_QWORD *)(v7 + 1888) = v33;
  v34 = *(_QWORD *)(v7 + 1728);
  *(_QWORD *)(v7 + 1896) = v34;
  if (v34)
  {
    *(_QWORD *)(v33 + 16) = v32;
    *(_QWORD *)(v7 + 1712) = v20;
    *v20 = 0;
    *(_QWORD *)(v7 + 1728) = 0;
  }
  else
  {
    *(_QWORD *)(v7 + 1880) = v32;
  }
  *(_OWORD *)(v7 + 1904) = *v27;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v8 + 151) = 0;
  *(_OWORD *)(v7 + 1920) = *v28;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v8 + 153) = 0;
  *(_BYTE *)(v7 + 1936) = 0;
  *(_BYTE *)(v7 + 1960) = 0;
  if (*(_BYTE *)(v7 + 1792))
  {
    *(_OWORD *)(v7 + 1936) = *v24;
    *(_QWORD *)(v7 + 1952) = *(_QWORD *)(v7 + 1784);
    *(_QWORD *)(v7 + 1776) = 0;
    *(_QWORD *)(v7 + 1784) = 0;
    *(_QWORD *)v24 = 0;
    *(_BYTE *)(v7 + 1960) = 1;
  }
  *(_BYTE *)(v7 + 1968) = 0;
  *(_DWORD *)(v7 + 1984) = -1;
  v42 = *(unsigned int *)(v7 + 1816);
  if ((_DWORD)v42 != -1)
  {
    ((void (*)(std::runtime_error *, unint64_t, unint64_t))off_1E253CA98[v42])(&v173, v7 + 1968, v7 + 1800);
    *(_DWORD *)(v7 + 1984) = v42;
  }
  *(_OWORD *)(v7 + 1992) = *(_OWORD *)(v7 + 1824);
  *(_DWORD *)(v7 + 2008) = *(_DWORD *)(v7 + 1840);
  v43 = *(_QWORD *)(v7 + 1872);
  if (v43)
  {
    v44 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v7 + 1880);
    v45 = (std::runtime_error *)(v7 + 2048);
    if (v43 == v7 + 1848)
    {
      *(_QWORD *)(v7 + 2040) = v7 + 2016;
      (*(void (**)(void))(*(_QWORD *)(v7 + 1848) + 24))();
      goto LABEL_37;
    }
    v46 = (_QWORD *)(v7 + 1872);
    *(_QWORD *)(v7 + 2040) = v43;
  }
  else
  {
    v46 = (_QWORD *)(v7 + 2040);
    v44 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v7 + 1880);
    v45 = (std::runtime_error *)(v7 + 2048);
  }
  *v46 = 0;
LABEL_37:
  AMSCore::ExecuteHTTPRequestTask::perform(v45, (uint64_t)v131, (uint64_t)v44);
  v47 = *(_OWORD *)(v7 + 2048);
  *(_OWORD *)(v7 + 2064) = v47;
  v45->__vftable = 0;
  v45->__imp_.__imp_ = 0;
  v48 = atomic_load((unint64_t *)(v47 + 440));
  v41 = (_BYTE *)(v7 + 2080);
  v40 = (uint64_t *)(v7 + 496);
  if (v48)
    goto LABEL_41;
  *(_BYTE *)(v7 + 2080) = 0;
  v49 = (unint64_t *)(*(_QWORD *)(v7 + 2064) + 440);
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v7, v49));
  if (v50)
  {
LABEL_41:
    v51 = *(_QWORD *)(v7 + 2064);
    if (!*(_BYTE *)(v51 + 432))
    {
      __break(1u);
      return;
    }
    v52 = (const std::runtime_error *)(v51 + 8);
    v53 = *(_BYTE *)(v51 + 424);
    if (!v53)
    {
      std::runtime_error::runtime_error(v129, v52);
      *(_QWORD *)(v7 + 496) = MEMORY[0x1E0DE4F90] + 16;
      *(_OWORD *)(v7 + 512) = *(_OWORD *)(v51 + 24);
      *(_QWORD *)(v7 + 496) = off_1E2521330;
      *(_QWORD *)(v7 + 528) = *(_QWORD *)(v51 + 40);
      v58 = v7 + 536;
      v59 = (_QWORD *)(v51 + 48);
      v60 = *(_QWORD *)(v51 + 48);
      *(_QWORD *)(v7 + 536) = v60;
      v61 = *(_QWORD *)(v51 + 56);
      *(_QWORD *)(v7 + 544) = v61;
      if (v61)
      {
        *(_QWORD *)(v60 + 16) = v58;
        *(_QWORD *)(v51 + 40) = v59;
        *v59 = 0;
        *(_QWORD *)(v51 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 528) = v58;
      }
      *((_OWORD *)v8 + 1) = *(_OWORD *)(v51 + 64);
      *(_QWORD *)(v51 + 64) = 0;
      *(_QWORD *)(v51 + 72) = 0;
      *(_QWORD *)(v7 + 496) = &off_1E2521420;
      *(_BYTE *)(v7 + 568) = 0;
      *(_BYTE *)(v7 + 592) = 0;
      if (*(_BYTE *)(v51 + 104))
      {
        v78 = *(_OWORD *)(v51 + 80);
        *(_QWORD *)(v7 + 584) = *(_QWORD *)(v51 + 96);
        *(_OWORD *)(v7 + 568) = v78;
        *(_QWORD *)(v51 + 88) = 0;
        *(_QWORD *)(v51 + 96) = 0;
        *(_QWORD *)(v51 + 80) = 0;
        *(_BYTE *)(v7 + 592) = 1;
      }
      v79 = *(_OWORD *)(v51 + 112);
      *(_OWORD *)(v7 + 616) = *(_OWORD *)(v51 + 128);
      *(_OWORD *)(v7 + 600) = v79;
      v80 = *(_OWORD *)(v51 + 144);
      v81 = *(_OWORD *)(v51 + 160);
      v82 = *(_OWORD *)(v51 + 176);
      *(_OWORD *)(v7 + 673) = *(_OWORD *)(v51 + 185);
      *(_OWORD *)(v7 + 664) = v82;
      *(_OWORD *)(v7 + 648) = v81;
      *(_OWORD *)(v7 + 632) = v80;
      *((_QWORD *)v8 + 21) = 0;
      *((_QWORD *)v8 + 22) = 0;
      *((_QWORD *)v8 + 20) = 0;
      *((_OWORD *)v8 + 10) = *(_OWORD *)(v51 + 208);
      *(_QWORD *)(v7 + 712) = *(_QWORD *)(v51 + 224);
      *(_QWORD *)(v51 + 216) = 0;
      *(_QWORD *)(v51 + 224) = 0;
      *(_QWORD *)(v51 + 208) = 0;
      v83 = *(_OWORD *)(v51 + 248);
      *(_OWORD *)(v7 + 720) = *(_OWORD *)(v51 + 232);
      *(_OWORD *)(v7 + 736) = v83;
      v84 = *(_OWORD *)(v51 + 264);
      v85 = *(_OWORD *)(v51 + 280);
      v86 = *(_OWORD *)(v51 + 312);
      *(_OWORD *)(v7 + 784) = *(_OWORD *)(v51 + 296);
      *(_OWORD *)(v7 + 800) = v86;
      *(_OWORD *)(v7 + 752) = v84;
      *(_OWORD *)(v7 + 768) = v85;
      v87 = *(_OWORD *)(v51 + 328);
      v88 = *(_OWORD *)(v51 + 344);
      v89 = *(_OWORD *)(v51 + 360);
      *(_OWORD *)(v7 + 858) = *(_OWORD *)(v51 + 370);
      *(_OWORD *)(v7 + 832) = v88;
      *(_OWORD *)(v7 + 848) = v89;
      *(_OWORD *)(v7 + 816) = v87;
      *(_BYTE *)(v7 + 880) = 0;
      *(_BYTE *)(v7 + 904) = 0;
      if (*(_BYTE *)(v51 + 416))
      {
        v90 = *(_OWORD *)(v51 + 392);
        *(_QWORD *)(v7 + 896) = *(_QWORD *)(v51 + 408);
        *(_OWORD *)(v7 + 880) = v90;
        *(_QWORD *)(v51 + 400) = 0;
        *(_QWORD *)(v51 + 408) = 0;
        *(_QWORD *)(v51 + 392) = 0;
        *(_BYTE *)(v7 + 904) = 1;
      }
LABEL_83:
      *(_BYTE *)(v7 + 912) = v53;
      std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100](v7 + 24);
      v91 = *(_BYTE *)(v7 + 912);
      if (!v91)
      {
        std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), v129);
        v95 = *(_QWORD *)(v7 + 536);
        *(_QWORD *)(v7 + 64) = v95;
        v96 = v7 + 64;
        *(_OWORD *)(v7 + 40) = *(_OWORD *)(v7 + 512);
        *(_QWORD *)(v7 + 24) = off_1E2521330;
        *(_QWORD *)(v7 + 56) = *(_QWORD *)(v7 + 528);
        v97 = *(_QWORD *)(v7 + 544);
        *(_QWORD *)(v7 + 72) = v97;
        if (v97)
        {
          *(_QWORD *)(v95 + 16) = v96;
          *(_QWORD *)(v7 + 528) = v7 + 536;
          *(_QWORD *)(v7 + 536) = 0;
          *(_QWORD *)(v7 + 544) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 56) = v96;
        }
        v103 = *((_OWORD *)v8 + 1);
        *(_BYTE *)(v7 + 96) = 0;
        *(_OWORD *)(v7 + 80) = v103;
        *((_QWORD *)v8 + 2) = 0;
        *((_QWORD *)v8 + 3) = 0;
        *(_QWORD *)(v7 + 24) = &off_1E2521420;
        *(_BYTE *)(v7 + 120) = 0;
        if (*(_BYTE *)(v7 + 592))
        {
          *(_QWORD *)(v7 + 112) = *(_QWORD *)(v7 + 584);
          *(_OWORD *)(v7 + 96) = *(_OWORD *)(v7 + 568);
          *(_QWORD *)(v7 + 584) = 0;
          *(_QWORD *)(v7 + 568) = 0;
          *(_QWORD *)(v7 + 576) = 0;
          *(_BYTE *)(v7 + 120) = 1;
        }
        v104 = *(_OWORD *)(v7 + 648);
        *(_OWORD *)(v7 + 160) = *(_OWORD *)(v7 + 632);
        *(_OWORD *)(v7 + 176) = v104;
        *(_OWORD *)(v7 + 192) = *(_OWORD *)(v7 + 664);
        *(_OWORD *)(v7 + 201) = *(_OWORD *)(v7 + 673);
        v105 = *(_OWORD *)(v7 + 616);
        *(_OWORD *)(v7 + 128) = *(_OWORD *)(v7 + 600);
        *(_OWORD *)(v7 + 144) = v105;
        *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 10);
        v106 = *(_OWORD *)(v7 + 858);
        v107 = *(_OWORD *)(v7 + 816);
        v108 = *(_OWORD *)(v7 + 848);
        *(_OWORD *)(v7 + 360) = *(_OWORD *)(v7 + 832);
        *(_OWORD *)(v7 + 376) = v108;
        *(_OWORD *)(v7 + 386) = v106;
        v109 = *(_OWORD *)(v7 + 768);
        *(_OWORD *)(v7 + 280) = *(_OWORD *)(v7 + 752);
        *(_OWORD *)(v7 + 296) = v109;
        v110 = *(_OWORD *)(v7 + 800);
        *(_OWORD *)(v7 + 312) = *(_OWORD *)(v7 + 784);
        *(_OWORD *)(v7 + 328) = v110;
        *(_OWORD *)(v7 + 344) = v107;
        v111 = *(_OWORD *)(v7 + 736);
        *(_OWORD *)(v7 + 248) = *(_OWORD *)(v7 + 720);
        *(_QWORD *)(v7 + 240) = *(_QWORD *)(v7 + 712);
        *((_QWORD *)v8 + 20) = 0;
        *((_QWORD *)v8 + 21) = 0;
        *((_QWORD *)v8 + 22) = 0;
        *(_OWORD *)(v7 + 264) = v111;
        *(_BYTE *)(v7 + 408) = 0;
        *(_BYTE *)(v7 + 432) = 0;
        if (*(_BYTE *)(v7 + 904))
        {
          *(_OWORD *)(v7 + 408) = *(_OWORD *)(v7 + 880);
          *(_QWORD *)(v7 + 424) = *(_QWORD *)(v7 + 896);
          *(_QWORD *)(v7 + 880) = 0;
          *(_QWORD *)(v7 + 896) = 0;
          *(_QWORD *)(v7 + 888) = 0;
          *(_BYTE *)(v7 + 432) = 1;
        }
        goto LABEL_105;
      }
      v92 = *(_QWORD *)(v7 + 520);
      *(_QWORD *)(v7 + 48) = v92;
      v93 = v7 + 48;
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v7 + 496);
      v129->__vftable = 0;
      *(_QWORD *)(v7 + 504) = 0;
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 512);
      v94 = *(_QWORD *)(v7 + 528);
      *(_QWORD *)(v7 + 56) = v94;
      if (v94)
      {
        *(_QWORD *)(v92 + 16) = v93;
        *(_QWORD *)(v7 + 512) = v7 + 520;
        *(_QWORD *)(v7 + 520) = 0;
        *(_QWORD *)(v7 + 528) = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 40) = v93;
      }
      *(_BYTE *)(v7 + 96) = 0;
      v98 = *(_OWORD *)v8;
      v99 = *((_OWORD *)v8 + 1);
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *(_OWORD *)(v7 + 64) = v98;
      *(_OWORD *)(v7 + 80) = v99;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      *(_BYTE *)(v7 + 120) = 0;
      if (*(_BYTE *)(v7 + 592))
      {
        *(_QWORD *)(v7 + 112) = *(_QWORD *)(v7 + 584);
        *(_OWORD *)(v7 + 96) = *(_OWORD *)(v7 + 568);
        *(_QWORD *)(v7 + 584) = 0;
        *(_QWORD *)(v7 + 568) = 0;
        *(_QWORD *)(v7 + 576) = 0;
        *(_BYTE *)(v7 + 120) = 1;
      }
      *(_BYTE *)(v7 + 128) = 0;
      *(_DWORD *)(v7 + 144) = -1;
      v100 = *(unsigned int *)(v7 + 616);
      if ((_DWORD)v100 != -1)
      {
        ((void (*)(std::runtime_error *))off_1E253CA98[v100])(&v173);
        *(_DWORD *)(v7 + 144) = v100;
      }
      *(_OWORD *)(v7 + 152) = *(_OWORD *)(v7 + 624);
      *(_DWORD *)(v7 + 168) = *(_DWORD *)(v7 + 640);
      v101 = *(_QWORD *)(v7 + 672);
      if (v101)
      {
        if (v101 == v7 + 648)
        {
          *(_QWORD *)(v7 + 200) = v7 + 176;
          (*(void (**)(unint64_t))(*(_QWORD *)(v7 + 648) + 24))(v7 + 648);
          goto LABEL_99;
        }
        v102 = (_QWORD *)(v7 + 672);
        *(_QWORD *)(v7 + 200) = v101;
      }
      else
      {
        v102 = (_QWORD *)(v7 + 200);
      }
      *v102 = 0;
LABEL_99:
      *(_OWORD *)(v7 + 208) = *((_OWORD *)v8 + 9);
      *((_QWORD *)v8 + 18) = 0;
      *((_QWORD *)v8 + 19) = 0;
LABEL_105:
      *(_BYTE *)(v7 + 440) = v91;
      *(_BYTE *)(v7 + 448) = 1;
      if (*(_BYTE *)(v7 + 912))
      {
        v112 = *(std::__shared_weak_count **)(v7 + 688);
        if (v112)
        {
          p_shared_owners = (unint64_t *)&v112->__shared_owners_;
          do
            v114 = __ldaxr(p_shared_owners);
          while (__stlxr(v114 - 1, p_shared_owners));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v7 + 512));
        v115 = *(std::__shared_weak_count **)(v7 + 504);
        if (v115)
        {
          v116 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v129->~runtime_error)(v129);
      }
      v118 = *(_QWORD *)(v7 + 2072);
      if (v118)
      {
        v119 = (unint64_t *)(v118 + 8);
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          v121 = *(std::__shared_weak_count **)(v7 + 2072);
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v122 = *(std::__shared_weak_count **)(v7 + 2056);
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v44);
      v125 = *(std::__shared_weak_count **)(v7 + 1704);
      if (v125)
      {
        v126 = (unint64_t *)&v125->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v131);
LABEL_133:
      *(_QWORD *)(v7 + 496) = v128;
      *(_QWORD *)v7 = 0;
      *v41 = 1;
      AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::Awaiter::await_suspend(v40);
      return;
    }
    *(_OWORD *)(v7 + 496) = *(_OWORD *)(v51 + 8);
    v52->__vftable = 0;
    *(_QWORD *)(v51 + 16) = 0;
    *(_QWORD *)(v7 + 512) = *(_QWORD *)(v51 + 24);
    v54 = v7 + 520;
    v55 = (_QWORD *)(v51 + 32);
    v56 = *(_QWORD *)(v51 + 32);
    *(_QWORD *)(v7 + 520) = v56;
    v57 = *(_QWORD *)(v51 + 40);
    *(_QWORD *)(v7 + 528) = v57;
    if (v57)
    {
      *(_QWORD *)(v56 + 16) = v54;
      *(_QWORD *)(v51 + 24) = v55;
      *v55 = 0;
      *(_QWORD *)(v51 + 40) = 0;
    }
    else
    {
      *(_QWORD *)(v7 + 512) = v54;
    }
    *(_OWORD *)v8 = *(_OWORD *)(v51 + 48);
    *(_QWORD *)(v51 + 48) = 0;
    *(_QWORD *)(v51 + 56) = 0;
    *((_OWORD *)v8 + 1) = *(_OWORD *)(v51 + 64);
    *(_QWORD *)(v51 + 64) = 0;
    *(_QWORD *)(v51 + 72) = 0;
    *(_BYTE *)(v7 + 568) = 0;
    *(_BYTE *)(v7 + 592) = 0;
    if (*(_BYTE *)(v51 + 104))
    {
      v73 = *(_OWORD *)(v51 + 80);
      *(_QWORD *)(v7 + 584) = *(_QWORD *)(v51 + 96);
      *(_OWORD *)(v7 + 568) = v73;
      *(_QWORD *)(v51 + 88) = 0;
      *(_QWORD *)(v51 + 96) = 0;
      *(_QWORD *)(v51 + 80) = 0;
      *(_BYTE *)(v7 + 592) = 1;
    }
    *(_BYTE *)(v7 + 600) = 0;
    *(_DWORD *)(v7 + 616) = -1;
    v74 = *(unsigned int *)(v51 + 128);
    if ((_DWORD)v74 != -1)
    {
      ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v74])(&v173, v7 + 600, v51 + 112);
      *(_DWORD *)(v7 + 616) = v74;
    }
    v75 = *(_OWORD *)(v51 + 136);
    *(_DWORD *)(v7 + 640) = *(_DWORD *)(v51 + 152);
    *(_OWORD *)(v7 + 624) = v75;
    v76 = (_QWORD *)(v51 + 184);
    v77 = *(_QWORD *)(v51 + 184);
    if (v77)
    {
      if (v77 == v51 + 160)
      {
        *(_QWORD *)(v7 + 672) = v7 + 648;
        (*(void (**)(_QWORD))(*(_QWORD *)*v76 + 24))(*v76);
        goto LABEL_77;
      }
      *(_QWORD *)(v7 + 672) = v77;
    }
    else
    {
      v76 = (_QWORD *)(v7 + 672);
    }
    *v76 = 0;
LABEL_77:
    *((_OWORD *)v8 + 9) = *(_OWORD *)(v51 + 192);
    *(_QWORD *)(v51 + 192) = 0;
    *(_QWORD *)(v51 + 200) = 0;
    goto LABEL_83;
  }
}

void sub_18CD14AF4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask (*)(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&),std::allocator<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&)>,AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::LoadURLMetricsHandler::Options &)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask (*)(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&),std::allocator<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&)>,AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::LoadURLMetricsHandler::Options &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2521708;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask (*)(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&),std::allocator<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&)>,AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::LoadURLMetricsHandler::Options &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2521708;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask (*)(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&),std::allocator<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&)>,AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::LoadURLMetricsHandler::Options &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  void (*v5)(uint64_t, uint64_t, __int128 *, uint64_t);
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v5 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t))(a1 + 8);
  v9 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v5(a2, a3, &v9, a5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_18CD14CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask (*)(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&),std::allocator<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&)>,AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::LoadURLMetricsHandler::Options &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN7AMSCore21LoadURLMetricsHandler25LoadURLMetricsHandlerTaskERKNS_11HTTPRequestERKNSt3__18expected"
                     "INS_12HTTPResponseENS_9HTTPErrorEEERKNS5_10shared_ptrIKNS_13IMediaAccountEEEONS0_7OptionsEE"
    || ((v3 & (unint64_t)"PFN7AMSCore21LoadURLMetricsHandler25LoadURLMetricsHandlerTaskERKNS_11HTTPRequestERKNSt3_"
                                "_18expectedINS_12HTTPResponseENS_9HTTPErrorEEERKNS5_10shared_ptrIKNS_13IMediaAccountEEEONS0_7OptionsEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN7AMSCore21LoadURLMetricsHandler25LoadURLMetricsHandlerTaskERKNS_11HTTPRequestERKNSt3__18expectedINS_12HTTPResponseENS_9HTTPErrorEEERKNS5_10shared_ptrIKNS_13IMediaAccountEEEONS0_7OptionsEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN7AMSCore21LoadURLMetricsHandler25LoadURLMetricsHandlerTaskERKNS_11HTTPRequestERKNSt3__18expectedINS_12HTTPResponseENS_9HTTPErrorEEERKNS5_10shared_ptrIKNS_13IMediaAccountEEEONS0_7OptionsEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask (*)(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&),std::allocator<AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount const> const&,AMSCore::LoadURLMetricsHandler::Options &&)>,AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask ()(AMSCore::HTTPRequest const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&,std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::LoadURLMetricsHandler::Options &)>::target_type()
{
}

void sub_18CD15B24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, AMSCore::HTTPError *a15, uint64_t a16, uint64_t a17, uint64_t a18, AMSCore::EncodeHTTPRequestTask::Result *a19, void *a20)
{
  AMSCore::HTTPTransactionMetrics::~HTTPTransactionMetrics(&a20);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::unhandled_exception(a15);
}

void sub_18CD15B5C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CD15ACCLL);
}

void sub_18CD15B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, AMSCore::ExecuteHTTPRequestTask::Options *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, AMSCore::EncodeHTTPRequestTask::Options *a18)
{
  void *v18;

  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::~Promise(a15);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(a11);
  std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](a18);
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t *AMSCore::ExecuteHTTPRequestTask::perform(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  std::runtime_error *v4;
  const std::runtime_error *v5;
  char v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char v70;
  char v71;

  v1 = result[258];
  if (!*(_BYTE *)(v1 + 432))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = result + 67;
  v4 = (std::runtime_error *)(result + 62);
  v5 = (const std::runtime_error *)(v1 + 8);
  v6 = *(_BYTE *)(v1 + 424);
  if (v6)
  {
    *((_OWORD *)result + 31) = *(_OWORD *)(v1 + 8);
    v5->__vftable = 0;
    *(_QWORD *)(v1 + 16) = 0;
    result[64] = *(_QWORD *)(v1 + 24);
    v7 = result + 65;
    v8 = (_QWORD *)(v1 + 32);
    v9 = *(_QWORD *)(v1 + 32);
    result[65] = v9;
    v10 = *(_QWORD *)(v1 + 40);
    result[66] = v10;
    if (v10)
    {
      *(_QWORD *)(v9 + 16) = v7;
      *(_QWORD *)(v1 + 24) = v8;
      *v8 = 0;
      *(_QWORD *)(v1 + 40) = 0;
    }
    else
    {
      result[64] = (uint64_t)v7;
    }
    *(_OWORD *)v3 = *(_OWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *(_OWORD *)(result + 69) = *(_OWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    *((_BYTE *)result + 568) = 0;
    *((_BYTE *)result + 592) = 0;
    if (*(_BYTE *)(v1 + 104))
    {
      v15 = *(_OWORD *)(v1 + 80);
      result[73] = *(_QWORD *)(v1 + 96);
      *(_OWORD *)(result + 71) = v15;
      *(_QWORD *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 96) = 0;
      *(_QWORD *)(v1 + 80) = 0;
      *((_BYTE *)result + 592) = 1;
    }
    *((_BYTE *)result + 600) = 0;
    *((_DWORD *)result + 154) = -1;
    v16 = *(unsigned int *)(v1 + 128);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, uint64_t *, uint64_t))off_1E253CA98[v16])(&v70, result + 75, v1 + 112);
      *((_DWORD *)v2 + 154) = v16;
    }
    v17 = *(_OWORD *)(v1 + 136);
    *((_DWORD *)v2 + 160) = *(_DWORD *)(v1 + 152);
    *((_OWORD *)v2 + 39) = v17;
    v18 = (_QWORD *)(v1 + 184);
    v19 = *(_QWORD *)(v1 + 184);
    if (v19)
    {
      if (v19 == v1 + 160)
      {
        v2[84] = (uint64_t)(v2 + 81);
        (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 24))(*v18);
        goto LABEL_18;
      }
      v2[84] = v19;
    }
    else
    {
      v18 = v2 + 84;
    }
    *v18 = 0;
LABEL_18:
    *((_OWORD *)v3 + 9) = *(_OWORD *)(v1 + 192);
    *(_QWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 200) = 0;
    goto LABEL_24;
  }
  std::runtime_error::runtime_error((std::runtime_error *)result + 31, v5);
  v2[62] = MEMORY[0x1E0DE4F90] + 16;
  *((_OWORD *)v2 + 32) = *(_OWORD *)(v1 + 24);
  v2[62] = (uint64_t)off_1E2521330;
  v2[66] = *(_QWORD *)(v1 + 40);
  v11 = v2 + 67;
  v12 = (_QWORD *)(v1 + 48);
  v13 = *(_QWORD *)(v1 + 48);
  v2[67] = v13;
  v14 = *(_QWORD *)(v1 + 56);
  v2[68] = v14;
  if (v14)
  {
    *(_QWORD *)(v13 + 16) = v11;
    *(_QWORD *)(v1 + 40) = v12;
    *v12 = 0;
    *(_QWORD *)(v1 + 56) = 0;
  }
  else
  {
    v2[66] = (uint64_t)v11;
  }
  *((_OWORD *)v3 + 1) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  v2[62] = (uint64_t)&off_1E2521420;
  *((_BYTE *)v2 + 568) = 0;
  *((_BYTE *)v2 + 592) = 0;
  if (*(_BYTE *)(v1 + 104))
  {
    v20 = *(_OWORD *)(v1 + 80);
    v2[73] = *(_QWORD *)(v1 + 96);
    *(_OWORD *)(v2 + 71) = v20;
    *(_QWORD *)(v1 + 88) = 0;
    *(_QWORD *)(v1 + 96) = 0;
    *(_QWORD *)(v1 + 80) = 0;
    *((_BYTE *)v2 + 592) = 1;
  }
  v21 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v2 + 77) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v2 + 75) = v21;
  v22 = *(_OWORD *)(v1 + 144);
  v23 = *(_OWORD *)(v1 + 160);
  v24 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)((char *)v2 + 673) = *(_OWORD *)(v1 + 185);
  *(_OWORD *)(v2 + 83) = v24;
  *(_OWORD *)(v2 + 81) = v23;
  *(_OWORD *)(v2 + 79) = v22;
  v3[21] = 0;
  v3[22] = 0;
  v3[20] = 0;
  *((_OWORD *)v3 + 10) = *(_OWORD *)(v1 + 208);
  v2[89] = *(_QWORD *)(v1 + 224);
  *(_QWORD *)(v1 + 216) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  v25 = *(_OWORD *)(v1 + 248);
  *((_OWORD *)v2 + 45) = *(_OWORD *)(v1 + 232);
  *((_OWORD *)v2 + 46) = v25;
  v26 = *(_OWORD *)(v1 + 264);
  v27 = *(_OWORD *)(v1 + 280);
  v28 = *(_OWORD *)(v1 + 312);
  *((_OWORD *)v2 + 49) = *(_OWORD *)(v1 + 296);
  *((_OWORD *)v2 + 50) = v28;
  *((_OWORD *)v2 + 47) = v26;
  *((_OWORD *)v2 + 48) = v27;
  v29 = *(_OWORD *)(v1 + 328);
  v30 = *(_OWORD *)(v1 + 344);
  v31 = *(_OWORD *)(v1 + 360);
  *(_OWORD *)((char *)v2 + 858) = *(_OWORD *)(v1 + 370);
  *((_OWORD *)v2 + 52) = v30;
  *((_OWORD *)v2 + 53) = v31;
  *((_OWORD *)v2 + 51) = v29;
  *((_BYTE *)v2 + 880) = 0;
  *((_BYTE *)v2 + 904) = 0;
  if (*(_BYTE *)(v1 + 416))
  {
    v32 = *(_OWORD *)(v1 + 392);
    v2[112] = *(_QWORD *)(v1 + 408);
    *((_OWORD *)v2 + 55) = v32;
    *(_QWORD *)(v1 + 400) = 0;
    *(_QWORD *)(v1 + 408) = 0;
    *(_QWORD *)(v1 + 392) = 0;
    *((_BYTE *)v2 + 904) = 1;
  }
LABEL_24:
  *((_BYTE *)v2 + 912) = v6;
  std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>,false>::reset[abi:fe180100]((uint64_t)(v2 + 3));
  v33 = *((_BYTE *)v2 + 912);
  if (!v33)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(v2 + 3), v4);
    v37 = v2[67];
    v2[8] = v37;
    v38 = v2 + 8;
    *(_OWORD *)(v2 + 5) = *((_OWORD *)v2 + 32);
    v2[7] = v2[66];
    v39 = v2[68];
    v2[9] = v39;
    if (v39)
    {
      *(_QWORD *)(v37 + 16) = v38;
      v2[66] = (uint64_t)(v2 + 67);
      v2[67] = 0;
      v2[68] = 0;
    }
    else
    {
      v2[7] = (uint64_t)v38;
    }
    v45 = *((_OWORD *)v3 + 1);
    *((_BYTE *)v2 + 96) = 0;
    *((_OWORD *)v2 + 5) = v45;
    v3[2] = 0;
    v3[3] = 0;
    v2[3] = (uint64_t)&off_1E2521420;
    *((_BYTE *)v2 + 120) = 0;
    if (*((_BYTE *)v2 + 592))
    {
      v2[14] = v2[73];
      *((_OWORD *)v2 + 6) = *(_OWORD *)(v2 + 71);
      v2[73] = 0;
      v2[71] = 0;
      v2[72] = 0;
      *((_BYTE *)v2 + 120) = 1;
    }
    v46 = *(_OWORD *)(v2 + 81);
    *((_OWORD *)v2 + 10) = *(_OWORD *)(v2 + 79);
    *((_OWORD *)v2 + 11) = v46;
    *((_OWORD *)v2 + 12) = *(_OWORD *)(v2 + 83);
    *(_OWORD *)((char *)v2 + 201) = *(_OWORD *)((char *)v2 + 673);
    v47 = *(_OWORD *)(v2 + 77);
    *((_OWORD *)v2 + 8) = *(_OWORD *)(v2 + 75);
    *((_OWORD *)v2 + 9) = v47;
    *((_OWORD *)v2 + 14) = *((_OWORD *)v3 + 10);
    v48 = *(_OWORD *)((char *)v2 + 858);
    v49 = *((_OWORD *)v2 + 51);
    v50 = *((_OWORD *)v2 + 53);
    *(_OWORD *)(v2 + 45) = *((_OWORD *)v2 + 52);
    *(_OWORD *)(v2 + 47) = v50;
    *(_OWORD *)((char *)v2 + 386) = v48;
    v51 = *((_OWORD *)v2 + 48);
    *(_OWORD *)(v2 + 35) = *((_OWORD *)v2 + 47);
    *(_OWORD *)(v2 + 37) = v51;
    v52 = *((_OWORD *)v2 + 50);
    *(_OWORD *)(v2 + 39) = *((_OWORD *)v2 + 49);
    *(_OWORD *)(v2 + 41) = v52;
    *(_OWORD *)(v2 + 43) = v49;
    v53 = *((_OWORD *)v2 + 46);
    *(_OWORD *)(v2 + 31) = *((_OWORD *)v2 + 45);
    v2[30] = v2[89];
    v3[20] = 0;
    v3[21] = 0;
    v3[22] = 0;
    *(_OWORD *)(v2 + 33) = v53;
    *((_BYTE *)v2 + 408) = 0;
    *((_BYTE *)v2 + 432) = 0;
    if (*((_BYTE *)v2 + 904))
    {
      *(_OWORD *)(v2 + 51) = *((_OWORD *)v2 + 55);
      v2[53] = v2[112];
      v2[110] = 0;
      v2[112] = 0;
      v2[111] = 0;
      *((_BYTE *)v2 + 432) = 1;
    }
    goto LABEL_46;
  }
  v34 = v2[65];
  v2[6] = v34;
  v35 = v2 + 6;
  *(_OWORD *)(v2 + 3) = *((_OWORD *)v2 + 31);
  v4->__vftable = 0;
  v4->__imp_.__imp_ = 0;
  v2[5] = v2[64];
  v36 = v2[66];
  v2[7] = v36;
  if (v36)
  {
    *(_QWORD *)(v34 + 16) = v35;
    v2[64] = (uint64_t)(v2 + 65);
    v2[65] = 0;
    v2[66] = 0;
  }
  else
  {
    v2[5] = (uint64_t)v35;
  }
  *((_BYTE *)v2 + 96) = 0;
  v40 = *(_OWORD *)v3;
  v41 = *((_OWORD *)v3 + 1);
  *v3 = 0;
  v3[1] = 0;
  *((_OWORD *)v2 + 4) = v40;
  *((_OWORD *)v2 + 5) = v41;
  v3[2] = 0;
  v3[3] = 0;
  *((_BYTE *)v2 + 120) = 0;
  if (*((_BYTE *)v2 + 592))
  {
    v2[14] = v2[73];
    *((_OWORD *)v2 + 6) = *(_OWORD *)(v2 + 71);
    v2[73] = 0;
    v2[71] = 0;
    v2[72] = 0;
    *((_BYTE *)v2 + 120) = 1;
  }
  *((_BYTE *)v2 + 128) = 0;
  *((_DWORD *)v2 + 36) = -1;
  v42 = *((unsigned int *)v2 + 154);
  if ((_DWORD)v42 != -1)
  {
    ((void (*)(char *))off_1E253CA98[v42])(&v71);
    *((_DWORD *)v2 + 36) = v42;
  }
  *(_OWORD *)(v2 + 19) = *((_OWORD *)v2 + 39);
  *((_DWORD *)v2 + 42) = *((_DWORD *)v2 + 160);
  v43 = (uint64_t *)v2[84];
  if (v43)
  {
    if (v43 == v2 + 81)
    {
      v2[25] = (uint64_t)(v2 + 22);
      (*(void (**)(uint64_t *))(v2[81] + 24))(v2 + 81);
      goto LABEL_40;
    }
    v44 = v2 + 84;
    v2[25] = (uint64_t)v43;
  }
  else
  {
    v44 = v2 + 25;
  }
  *v44 = 0;
LABEL_40:
  *((_OWORD *)v2 + 13) = *((_OWORD *)v3 + 9);
  v3[18] = 0;
  v3[19] = 0;
LABEL_46:
  *((_BYTE *)v2 + 440) = v33;
  *((_BYTE *)v2 + 448) = 1;
  if (*((_BYTE *)v2 + 912))
  {
    v54 = (std::__shared_weak_count *)v2[86];
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v2 + 64));
    v57 = (std::__shared_weak_count *)v2[63];
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
  }
  v60 = v2[259];
  if (v60)
  {
    v61 = (unint64_t *)(v60 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      v63 = (std::__shared_weak_count *)v2[259];
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v64 = (std::__shared_weak_count *)v2[257];
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v2 + 235));
  v67 = (std::__shared_weak_count *)v2[213];
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2 + 165);
  v2[62] = (uint64_t)(v2 + 2);
  *v2 = 0;
  *((_BYTE *)v2 + 2080) = 1;
  return AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::Awaiter::await_suspend((uint64_t *)v4);
}

void AMSCore::ExecuteHTTPRequestTask::perform(uint64_t a1)
{
  AMSCore::ExecuteHTTPRequestTask::Options *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1712);
  v3 = a1 + 16;
  if ((*(_BYTE *)(a1 + 2080) & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 2072);
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        v7 = *(std::__shared_weak_count **)(a1 + 2072);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v8 = *(std::__shared_weak_count **)(a1 + 2056);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1880));
    v11 = *(std::__shared_weak_count **)(a1 + 1704);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1320));
  }
  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::Promise::~Promise(v3);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v2);
  if (*(_BYTE *)(a1 + 1312))
  {
    v14 = *(std::__shared_weak_count **)(a1 + 1304);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 920));
  }
  else
  {
    (**(void (***)(uint64_t))(a1 + 920))(a1 + 920);
  }
  operator delete((void *)a1);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::ExecuteHTTPRequestTask::operator<<(std::ostream &,AMSCore::ExecuteHTTPRequestTask::HandlerType const&)::$_0,AMSCore::ExecuteHTTPRequestTask::operator<<(std::ostream &,AMSCore::ExecuteHTTPRequestTask::HandlerType const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<AMSCore::ExecuteHTTPRequestTask::IHandler>,std::__variant_detail::_Trait<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>> const&>(_QWORD ***a1)
{
  return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(**a1, (uint64_t)"IHandler::SPtr", 14);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::ExecuteHTTPRequestTask::operator<<(std::ostream &,AMSCore::ExecuteHTTPRequestTask::HandlerType const&)::$_0,AMSCore::ExecuteHTTPRequestTask::operator<<(std::ostream &,AMSCore::ExecuteHTTPRequestTask::HandlerType const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<AMSCore::ExecuteHTTPRequestTask::IHandler>,std::__variant_detail::_Trait<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>> const&>(uint64_t a1)
{
  return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(*(_QWORD **)(*(_QWORD *)a1 + 8), (uint64_t)"AnonymousHandler", 16);
}

uint64_t AMSCore::URL::decode(std::string *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  unint64_t i;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  char v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 *v25;
  unsigned int *v26;
  std::runtime_error v28;
  __int128 v29;
  uint64_t *v30;
  _QWORD v31[2];
  __int128 v32;
  char v33;
  uint64_t v34;
  _QWORD v35[8];
  __int128 __p;
  __int128 v37;
  int v38;
  uint64_t v39[19];
  std::runtime_error v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46[3];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v39[0] = MEMORY[0x1E0DE4FE0] + 64;
  v34 = v8;
  *(_QWORD *)((char *)&v35[-1] + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v35[-1] + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v10, v35);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v34 = v6 + 24;
  v39[0] = v7;
  std::streambuf::basic_streambuf();
  v35[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v37 = 0u;
  v38 = 16;
  if (a3)
  {
    for (i = 0; i < a3; ++i)
    {
      v12 = *(unsigned __int8 *)(a2 + i);
      if (v12 == 43)
      {
        LOBYTE(v28.__vftable) = 32;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v34, (uint64_t)&v28, 1);
      }
      else
      {
        if (a3 - i >= 3 && v12 == 37)
        {
          v13 = (unsigned __int8 *)(a2 + i + 1);
          v14 = 2;
          if (a3 - (i + 1) < 2)
            v14 = a3 - (i + 1);
          v46[0] = a2 + i + 1;
          v46[1] = v14;
          v15 = &v13[v14];
          if (v14)
          {
            v16 = *v13;
            if (v16 == 48)
            {
              if (v14 != 1)
              {
                v17 = v13 + 1;
                v16 = v13[1];
                if (v16 != 48 && v17 != v15)
                {
LABEL_15:
                  v18 = v16 - 48;
                  if ((v16 - 48) < 0xA)
                    goto LABEL_26;
                  if ((v16 - 65) <= 0x25 && ((1 << (v16 - 65)) & 0x3F0000003FLL) != 0)
                  {
                    if ((v16 - 97) > 5)
                      v18 = v16 - 55;
                    else
                      v18 = v16 - 87;
LABEL_26:
                    v20 = v17 + 1;
                    if (v17 + 1 == v15)
                    {
                      v23 = 0;
                      v20 = v15;
                      v24 = v18;
                    }
                    else
                    {
                      v21 = *v20;
                      v22 = v21 - 48;
                      if ((v21 - 48) < 0xA)
                      {
                        v23 = v21 - 48;
                        goto LABEL_34;
                      }
                      if ((v21 - 97) <= 5)
                      {
                        v23 = v21 - 87;
                        goto LABEL_34;
                      }
                      if ((v21 - 65) > 5)
                      {
                        v23 = 0;
                        v24 = v18;
                        goto LABEL_38;
                      }
                      v23 = v21 - 55;
LABEL_34:
                      v24 = 16 * v18;
                      v25 = v17 + 2;
                      if ((v18 & 0xF0) == 0)
                        v20 = v25;
                      if (v20 == v15)
                      {
                        v20 = v15;
                        if ((((16 * v18) + v23) & 0x100) != 0)
                          goto LABEL_45;
                      }
                      else
                      {
                        v21 = *v20;
                        v22 = v21 - 48;
LABEL_38:
                        if (v22 < 0xAu
                          || (v21 - 97) < 6u
                          || (v21 - 65) < 6
                          || (((v24 + v23) >> 8) & 1) != 0)
                        {
LABEL_45:
                          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[42],std::string_view &>((uint64_t)&v40, 3u, "Failed to parse value as number. value = ", v46);
                          std::runtime_error::runtime_error(&v28, &v40);
                          v29 = v41;
                          v26 = (unsigned int *)v43;
                          v28.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                          v30 = v42;
                          v31[0] = v43;
                          v31[1] = v44;
                          if (v44)
                          {
                            *(_QWORD *)(v43 + 16) = v31;
                            v26 = 0;
                            v42 = &v43;
                            v43 = 0;
                            v44 = 0;
                          }
                          else
                          {
                            v30 = v31;
                          }
                          v32 = v45;
                          v45 = 0uLL;
                          v33 = 0;
                          v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v26);
                          MEMORY[0x18D7898AC](&v40);
                          if (!v33)
                            ((void (*)(AMSCore::Error *))v28.~runtime_error)((AMSCore::Error *)&v28);
                          v19 = (char)v28.__vftable;
                          goto LABEL_53;
                        }
                      }
                    }
                    v19 = v23 + v24;
                    if (v15 != v20)
                      goto LABEL_45;
LABEL_52:
                    LOBYTE(v28.__vftable) = v19;
                    v33 = 1;
LABEL_53:
                    LOBYTE(v40.__vftable) = v19;
                    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v34, (uint64_t)&v40, 1);
                    i += 2;
                    if (!v33)
                      ((void (*)(std::runtime_error *))v28.~runtime_error)(&v28);
                    continue;
                  }
LABEL_22:
                  if (v17 == v13)
                    goto LABEL_45;
                  v19 = 0;
                  if (v15 != v17)
                    goto LABEL_45;
                  goto LABEL_52;
                }
              }
            }
            else
            {
              v17 = (unsigned __int8 *)(a2 + i + 1);
              if (v13 != v15)
                goto LABEL_15;
            }
          }
          v17 = v15;
          goto LABEL_22;
        }
        LOBYTE(v28.__vftable) = *(_BYTE *)(a2 + i);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v34, (uint64_t)&v28, 1);
      }
    }
  }
  std::stringbuf::str[abi:fe180100]((uint64_t)v35, a1);
  v34 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v35[-1] + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v35[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v37) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v39);
}

void sub_18CD168C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::ostream::~ostream();
  MEMORY[0x18D789B58](a11);
  __clang_call_terminate(a1);
}

void AMSCore::URL::encode(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const std::locale *v6;
  const std::locale::facet *v7;
  const std::locale::facet *v8;
  std::string::value_type *v9;
  int v10;
  _QWORD *v11;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  v6 = std::locale::classic();
  v7 = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  if (a3)
  {
    v8 = v7;
    v9 = (std::string::value_type *)a2;
    do
    {
      if ((*v9 & 0x80000000) == 0 && (*((_DWORD *)&v8[1].~facet + *v9) & 0x500) != 0
        || (v10 = *v9, (v10 - 45) < 2)
        || v10 == 126
        || v10 == 95)
      {
        __p.__r_.__value_.__s.__data_[0] = *v9;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 37;
        v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
        AMSCore::StringUtils::toHexString(&__p, a2, 1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v9;
      ++a2;
      --a3;
    }
    while (a3);
  }
}

void AMSCore::URL::getLastPathComponent(AMSCore::URL *this, uint64_t a2)
{
  std::string *v3;
  std::string::size_type size;
  char *v5;
  size_t v6;
  const void *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  char *v13;
  char *v14;
  std::string v15;
  char v16;

  v15.__r_.__value_.__s.__data_[0] = 0;
  v16 = 0;
  if (!*(_BYTE *)(a2 + 88))
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 24) = 0;
    return;
  }
  if (*(char *)(a2 + 87) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  else
    v15 = *(std::string *)(a2 + 64);
  v16 = 1;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v15;
  else
    v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  AMSCore::StringUtils::split(&v13, (uint64_t)v3, size, "/", 1, 0xFFFFFFFFFFFFFFFFLL);
  v5 = v13;
  if (v13 != v14)
  {
    v6 = *((_QWORD *)v14 - 1);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:fe180100]();
    v7 = (const void *)*((_QWORD *)v14 - 2);
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (__int128 *)operator new(v9 + 1);
      *((_QWORD *)&v11 + 1) = v6;
      v12 = v10 | 0x8000000000000000;
      *(_QWORD *)&v11 = v8;
    }
    else
    {
      HIBYTE(v12) = *((_QWORD *)v14 - 1);
      v8 = &v11;
      if (!v6)
      {
LABEL_23:
        *((_BYTE *)v8 + v6) = 0;
        *(_OWORD *)this = v11;
        v5 = v13;
        *((_QWORD *)this + 2) = v12;
        *((_BYTE *)this + 24) = 1;
        if (!v5)
          goto LABEL_25;
        goto LABEL_24;
      }
    }
    memmove(v8, v7, v6);
    goto LABEL_23;
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 24) = 0;
  if (v5)
LABEL_24:
    operator delete(v5);
LABEL_25:
  if (v16)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_18CD16BC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
    {
      operator delete(__p);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::URL::getStringRepresentation@<X0>(AMSCore::URL *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[8];
  void *__p[2];
  __int128 v15;
  int v16;
  uint64_t v17[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v17[0] = MEMORY[0x1E0DE4FE0] + 64;
  v12 = v7;
  *(_QWORD *)((char *)&v13[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24));
  std::ios_base::init(v9, v13);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v12 = v4 + 24;
  v17[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8] + 16;
  v13[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  v16 = 16;
  AMSCore::operator<<(&v12, (uint64_t)this);
  std::stringbuf::str[abi:fe180100]((uint64_t)v13, a2);
  v12 = *v6;
  *(_QWORD *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24)) = v6[3];
  v13[0] = v10;
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v17);
}

void sub_18CD16D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18CD16D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  _Unwind_Resume(a1);
}

BOOL AMSCore::URL::isInDomain(uint64_t a1, char *a2, unint64_t a3)
{
  char *v5;
  unint64_t v6;
  _BOOL8 v7;
  unint64_t v8;
  int v9;
  std::string::size_type v10;
  char *v11;
  std::string *p_p;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::string::size_type v16;
  char *v17;
  std::string::size_type v18;
  std::string *v19;
  size_t size;
  std::string::size_type v21;
  char v22;
  BOOL v23;
  std::string::size_type v24;
  std::string *v25;
  std::string *v26;
  std::string v28;
  std::string __p;
  std::string v30;

  if (!*(_BYTE *)(a1 + 56))
    return 0;
  if (*(char *)(a1 + 55) < 0)
  {
    v5 = *(char **)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v5 = (char *)(a1 + 32);
    v6 = *(unsigned __int8 *)(a1 + 55);
  }
  v8 = v6;
  do
  {
    if (!v8)
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_18;
    }
    v9 = v5[--v8];
  }
  while (v9 == 46);
  if (v6 >= v8 + 1)
    v6 = v8 + 1;
  if (v8 == -1)
    v10 = 0;
  else
    v10 = v6;
  if (v8 == -1)
    v11 = 0;
  else
    v11 = v5;
LABEL_18:
  AMSCore::StringUtils::lowercase((uint64_t)&__p, v11, v10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      p_p = &__p;
      goto LABEL_23;
    }
LABEL_24:
    AMSCore::StringUtils::join<char [2],std::string>(&v30, ".", (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v30;
    goto LABEL_27;
  }
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_24;
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_23:
  if (p_p->__r_.__value_.__s.__data_[0] != 46)
    goto LABEL_24;
LABEL_27:
  v13 = a3;
  do
  {
    if (!v13)
    {
      v16 = 0;
      v17 = 0;
      goto LABEL_40;
    }
    v14 = a2[--v13];
  }
  while (v14 == 46);
  if (a3 >= v13 + 1)
    v15 = v13 + 1;
  else
    v15 = a3;
  if (v13 == -1)
    v16 = 0;
  else
    v16 = v15;
  if (v13 == -1)
    v17 = 0;
  else
    v17 = a2;
LABEL_40:
  AMSCore::StringUtils::lowercase((uint64_t)&v28, v17, v16);
  LOBYTE(v18) = *((_BYTE *)&v28.__r_.__value_.__s + 23);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v28.__r_.__value_.__l.__size_)
    {
      v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
LABEL_45:
      if (v19->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_49;
    }
  }
  else if (*((_BYTE *)&v28.__r_.__value_.__s + 23))
  {
    v19 = &v28;
    goto LABEL_45;
  }
  AMSCore::StringUtils::join<char [2],std::string>(&v30, ".", (uint64_t)&v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v28 = v30;
  v18 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
LABEL_49:
  if ((v18 & 0x80u) == 0)
    size = v18;
  else
    size = v28.__r_.__value_.__l.__size_;
  v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = __p.__r_.__value_.__l.__size_;
  v23 = v21 >= size;
  v24 = v21 - size;
  if (v23)
  {
    v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    if ((v18 & 0x80u) == 0)
      v26 = &v28;
    else
      v26 = (std::string *)v28.__r_.__value_.__r.__words[0];
    v7 = memcmp((char *)v25 + v24, v26, size) == 0;
    if ((v18 & 0x80) == 0)
      goto LABEL_64;
  }
  else
  {
    v7 = 0;
    if ((v18 & 0x80) == 0)
      goto LABEL_64;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_64:
  if (v22 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_18CD17234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMSCore::URL::parse(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  std::string::size_type v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  char *v17;
  char *v18;
  uint64_t v19;
  const std::locale *v20;
  const std::locale::facet *v21;
  const std::locale::facet *v22;
  int v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  std::ios_base *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  void **v50;
  void **v51;
  _QWORD *v52;
  unint64_t v53;
  std::string::value_type *v54;
  std::string::size_type v55;
  char v56;
  _OWORD *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  void *v69;
  void **v70;
  _QWORD **v71;
  _QWORD *v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  std::ios_base *v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  unint64_t v95;
  _BYTE *v96;
  _QWORD *v97;
  _BYTE *v98;
  size_t v99;
  uint64_t v100;
  char *v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  std::ios_base *v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned int v117;
  unsigned __int8 *v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  __int16 v122;
  unsigned int *v123;
  std::runtime_error *v124;
  _BYTE *v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  BOOL v136;
  size_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  std::locale::id *v140;
  uint64_t v141;
  const std::locale *v142;
  const std::locale::facet *v143;
  int v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int *v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::runtime_error v160;
  __int128 v161;
  unsigned int **v162;
  unsigned int *v163;
  uint64_t v164;
  __int128 v165;
  char v166;
  __int128 v167;
  uint64_t v168;
  char v169;
  __int128 v170;
  uint64_t v171;
  char v172;
  __int128 v173;
  uint64_t v174;
  char v175;
  int v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  char v182;
  std::runtime_error v183;
  __int128 v184;
  unsigned int **v185;
  unsigned int *v186;
  uint64_t v187;
  __int128 v188;
  char v189;
  std::string v190;
  char v191;
  __int128 v192;
  uint64_t v193;
  char v194;
  __int16 v195;
  char v196;
  char v197[24];
  _QWORD v198[2];
  unsigned __int8 v199;
  void *__p;
  __int128 v201;
  std::string v202;
  _DWORD v203[2];
  std::string __sz;
  void *v205;
  _BYTE *v206;
  _BYTE v207[32];
  unsigned int **v208;
  unsigned int *v209;
  uint64_t v210;
  __int128 v211;
  void *v212;
  void **v213;
  uint64_t v214;
  _BYTE v215[40];
  unsigned int *v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  int v221;
  _QWORD v222[3];
  char v223;
  char v224;
  char v225;
  char v226;
  char v227;
  _QWORD v228[4];
  _BYTE v229[15];
  char v230;
  _BYTE __what_arg[32];
  unsigned int **v232;
  unsigned int *v233;
  uint64_t v234;
  __int128 v235;
  unsigned __int8 v236;
  _QWORD v237[5];
  std::error_code v238;
  std::error_code v239;
  std::error_code v240;

  v237[2] = *MEMORY[0x1E0C80C00];
  memset(&v202, 0, sizeof(v202));
  AMSCore::StringUtils::split((char **)&__p, a1, a2, "://", 3, 1uLL);
  v6 = (uint64_t *)__p;
  v7 = v201 - (_QWORD)__p;
  v8 = (uint64_t)(v201 - (_QWORD)__p) >> 4;
  if (v8 == 1)
  {
    v9 = 5;
    *((_BYTE *)&v202.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v202, "https");
    if ((void *)v201 == __p)
      goto LABEL_284;
    goto LABEL_6;
  }
  if (v8 == 2)
  {
    std::string::__assign_external(&v202, *(const std::string::value_type **)__p, *((_QWORD *)__p + 1));
    if (v7 <= 0x10)
      goto LABEL_284;
    v6 += 2;
    v9 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
LABEL_6:
    v10 = *v6;
    v11 = v6[1];
    v215[0] = 0;
    LOBYTE(v219) = 0;
    BYTE8(v219) = 0;
    LOBYTE(v221) = 0;
    LOBYTE(v222[0]) = 0;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    v226 = 0;
    v227 = 0;
    v228[0] = v228;
    v228[1] = v228;
    *(_QWORD *)v229 = v202.__r_.__value_.__l.__size_;
    v12 = v202.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v229[7] = *(std::string::size_type *)((char *)&v202.__r_.__value_.__r.__words[1] + 7);
    memset(&v202, 0, sizeof(v202));
    v228[2] = 0;
    v228[3] = v12;
    v230 = v9;
    std::__optional_move_base<AMSCore::Error,false>::__optional_move_base[abi:fe180100]((AMSCore::Error *)&v183, (uint64_t)v215);
    AMSCore::URL::URL(&v190, (const AMSCore::URL *)((char *)&v219 + 8));
    AMSCore::URL::~URL((AMSCore::URL *)((char *)&v219 + 8));
    if ((_BYTE)v219)
    {
      *(_QWORD *)v215 = off_1E2521330;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
      if (*((_QWORD *)&v218 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v215[32], v216);
      MEMORY[0x18D7898AC](v215);
    }
    v16 = (char)v199;
    v17 = (char *)v198[0];
    if ((v199 & 0x80u) == 0)
      v18 = (char *)v198;
    else
      v18 = (char *)v198[0];
    if ((v199 & 0x80u) == 0)
      v19 = v199;
    else
      v19 = v198[1];
    v20 = std::locale::classic();
    v21 = std::locale::use_facet(v20, MEMORY[0x1E0DE4A90]);
    if (v19 == 4)
    {
      v22 = v21;
      v23 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v21->__vftable[1].__on_zero_shared)(v21, *v18);
      if (v23 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v22->__vftable[1].__on_zero_shared)(v22, 102))
      {
        v24 = (char *)v198 + 1;
        if (v16 < 0)
          v24 = v17 + 1;
        v25 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v22->__vftable[1].__on_zero_shared)(v22, *v24);
        if (v25 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v22->__vftable[1].__on_zero_shared)(v22, 105))
        {
          v26 = v17 + 2;
          if (v16 >= 0)
            v26 = (char *)v198 + 2;
          v27 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v22->__vftable[1].__on_zero_shared)(v22, *v26);
          if (v27 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v22->__vftable[1].__on_zero_shared)(v22, 108))
          {
            v28 = v17 + 3;
            if (v16 >= 0)
              v28 = (char *)v198 + 3;
            v29 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v22->__vftable[1].__on_zero_shared)(v22, *v28);
            if (v29 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v22->__vftable[1].__on_zero_shared)(v22, 101))
            {
              if (!v11)
                goto LABEL_185;
              v30 = v11;
              v31 = (_BYTE *)v10;
              while (*v31 == 47)
              {
                ++v31;
                if (!--v30)
                {
                  v32 = 0;
                  goto LABEL_186;
                }
              }
              v125 = &v31[-v10];
              if (&v31[-v10] == (_BYTE *)-1)
              {
LABEL_185:
                v32 = 0;
                v30 = 0;
              }
              else
              {
                v32 = v11 - (_QWORD)v125;
                if (v11 < (unint64_t)v125)
                  std::__throw_out_of_range[abi:fe180100]("string_view::substr");
                v30 = (unint64_t)&v125[v10];
              }
LABEL_186:
              *(_QWORD *)__what_arg = v30;
              *(_QWORD *)&__what_arg[8] = v32;
              AMSCore::StringUtils::join<char [2],std::string_view>((std::string *)v215, (uint64_t *)__what_arg);
              if (v194)
              {
                if (SHIBYTE(v193) < 0)
                  operator delete((void *)v192);
                v192 = *(_OWORD *)v215;
                v193 = *(_QWORD *)&v215[16];
              }
              else
              {
                v192 = *(_OWORD *)v215;
                v193 = *(_QWORD *)&v215[16];
                v194 = 1;
              }
              goto LABEL_238;
            }
          }
        }
      }
    }
    AMSCore::StringUtils::split((char **)v215, v10, v11, "#", 1, 1uLL);
    if (__p)
    {
      *(_QWORD *)&v201 = __p;
      operator delete(__p);
    }
    v33 = *(_QWORD *)v215;
    v34 = *(_QWORD *)&v215[8];
    __p = *(void **)v215;
    if (*(_QWORD *)&v215[8] - *(_QWORD *)v215 == 32)
    {
      AMSCore::URL::decode((std::string *)v215, *(_QWORD *)(*(_QWORD *)v215 + 16), *(_QWORD *)(*(_QWORD *)v215 + 24));
      v35 = *(_QWORD *)v215;
      v237[0] = *(_QWORD *)&v215[8];
      *(_QWORD *)((char *)v237 + 7) = *(_QWORD *)&v215[15];
      v36 = v215[23];
      memset(v215, 0, 24);
      if (v191)
      {
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v190.__r_.__value_.__l.__data_);
          v190.__r_.__value_.__r.__words[0] = v35;
          v190.__r_.__value_.__l.__size_ = v237[0];
          *(std::string::size_type *)((char *)&v190.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v237 + 7);
          *((_BYTE *)&v190.__r_.__value_.__s + 23) = v36;
          if ((v215[23] & 0x80000000) != 0)
            operator delete(*(void **)v215);
        }
        else
        {
          v190.__r_.__value_.__r.__words[0] = v35;
          v190.__r_.__value_.__l.__size_ = v237[0];
          *(std::string::size_type *)((char *)&v190.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v237 + 7);
          *((_BYTE *)&v190.__r_.__value_.__s + 23) = v36;
        }
      }
      else
      {
        v190.__r_.__value_.__r.__words[0] = v35;
        v190.__r_.__value_.__l.__size_ = v237[0];
        *(std::string::size_type *)((char *)&v190.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v237 + 7);
        *((_BYTE *)&v190.__r_.__value_.__s + 23) = v36;
        v237[0] = 0;
        *(_QWORD *)((char *)v237 + 7) = 0;
        v191 = 1;
      }
    }
    if (v34 == v33)
      goto LABEL_284;
    AMSCore::StringUtils::split((char **)v215, *(_QWORD *)v33, *(_QWORD *)(v33 + 8), "?", 1, 1uLL);
    operator delete((void *)v33);
    v46 = *(uint64_t **)v215;
    __p = *(void **)v215;
    v201 = *(_OWORD *)&v215[8];
    v47 = *(uint64_t **)&v215[8];
    if (*(_QWORD *)&v215[8] - *(_QWORD *)v215 == 32)
    {
      v48 = *(_QWORD *)(*(_QWORD *)v215 + 16);
      v49 = *(_QWORD *)(*(_QWORD *)v215 + 24);
      AMSCore::StringUtils::split((char **)&v212, v48, v49, "&", 1, 0xFFFFFFFFFFFFFFFFLL);
      v50 = (void **)v212;
      v51 = v213;
      if (v212 != v213)
      {
        *(_QWORD *)v207 = v207;
        *(_OWORD *)&v207[8] = (unint64_t)v207;
        while (1)
        {
          AMSCore::StringUtils::split((char **)&v205, (uint64_t)*v50, (unint64_t)v50[1], "=", 1, 1uLL);
          v52 = v205;
          v53 = v206 - (_BYTE *)v205;
          if (v206 == v205)
            goto LABEL_284;
          AMSCore::URL::decode(&__sz, *(_QWORD *)v205, *((_QWORD *)v205 + 1));
          *(_DWORD *)((char *)v203 + 3) = 0;
          v203[0] = 0;
          if (v53 < 0x11)
          {
            v56 = 0;
            v55 = 0;
            v54 = 0;
            if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_64:
              *(std::string *)v215 = __sz;
              goto LABEL_67;
            }
          }
          else
          {
            AMSCore::URL::decode((std::string *)v215, v52[2], v52[3]);
            v54 = *(std::string::value_type **)v215;
            v55 = *(_QWORD *)&v215[8];
            v56 = v215[23];
            v203[0] = *(_DWORD *)&v215[16];
            *(_DWORD *)((char *)v203 + 3) = *(_DWORD *)&v215[19];
            if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_64;
          }
          std::string::__init_copy_ctor_external((std::string *)v215, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
LABEL_67:
          if (v56 < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v215[24], v54, v55);
          }
          else
          {
            *(_QWORD *)&v215[24] = v54;
            *(_QWORD *)&v215[32] = v55;
            LODWORD(v216) = v203[0];
            *(_DWORD *)((char *)&v216 + 3) = *(_DWORD *)((char *)v203 + 3);
            HIBYTE(v216) = v56;
          }
          _ZNSt3__14listINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE9remove_ifIZN7AMSCore10OrderedMapIS7_S7_E5eraseERKS7_EUlRT_E_EEmSH_(v207, (unsigned __int8 **)v215);
          v57 = operator new(0x40uLL);
          v57[1] = *(_OWORD *)v215;
          *((_QWORD *)v57 + 4) = *(_QWORD *)&v215[16];
          memset(v215, 0, 24);
          *(_OWORD *)((char *)v57 + 40) = *(_OWORD *)&v215[24];
          *((_QWORD *)v57 + 7) = v216;
          *(_QWORD *)&v215[24] = 0;
          *(_QWORD *)&v215[32] = 0;
          v216 = 0;
          v58 = *(_QWORD *)v207;
          *(_QWORD *)v57 = *(_QWORD *)v207;
          *((_QWORD *)v57 + 1) = v207;
          *(_QWORD *)(v58 + 8) = v57;
          *(_QWORD *)v207 = v57;
          ++*(_QWORD *)&v207[16];
          if (SHIBYTE(v216) < 0)
          {
            operator delete(*(void **)&v215[24]);
            if ((v215[23] & 0x80000000) == 0)
            {
LABEL_72:
              if ((v56 & 0x80) == 0)
                goto LABEL_73;
              goto LABEL_78;
            }
          }
          else if ((v215[23] & 0x80000000) == 0)
          {
            goto LABEL_72;
          }
          operator delete(*(void **)v215);
          if ((v56 & 0x80) == 0)
          {
LABEL_73:
            if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_74;
            goto LABEL_79;
          }
LABEL_78:
          operator delete(v54);
          if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_74:
            v59 = v205;
            if (!v205)
              goto LABEL_60;
LABEL_80:
            operator delete(v59);
            goto LABEL_60;
          }
LABEL_79:
          operator delete(__sz.__r_.__value_.__l.__data_);
          v59 = v205;
          if (v205)
            goto LABEL_80;
LABEL_60:
          v50 += 2;
          if (v50 == v51)
          {
            *(_QWORD *)__what_arg = __what_arg;
            *(_QWORD *)&__what_arg[8] = __what_arg;
            *(_QWORD *)&__what_arg[16] = 0;
            v60 = *(_QWORD *)&v207[16];
            if (*(_QWORD *)&v207[16])
            {
              v61 = *(_QWORD **)&v207[8];
              v62 = *(_QWORD *)v207;
              v63 = **(_QWORD **)&v207[8];
              *(_QWORD *)(v63 + 8) = *(_QWORD *)(*(_QWORD *)v207 + 8);
              **(_QWORD **)(v62 + 8) = v63;
              v64 = *(_QWORD *)__what_arg;
              *(_QWORD *)(*(_QWORD *)__what_arg + 8) = v61;
              *v61 = v64;
              *(_QWORD *)(v62 + 8) = __what_arg;
              *(_QWORD *)__what_arg = v62;
              *(_QWORD *)&__what_arg[16] = v60;
            }
            v236 = 1;
            v50 = (void **)v212;
            if (v212)
              goto LABEL_84;
            goto LABEL_85;
          }
        }
      }
      v74 = MEMORY[0x1E0DE4FE0];
      v75 = MEMORY[0x1E0DE4FE0] + 64;
      v76 = (_QWORD *)MEMORY[0x1E0DE4F60];
      v77 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v78 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v222[0] = MEMORY[0x1E0DE4FE0] + 64;
      *(_QWORD *)v215 = v77;
      *(_QWORD *)&v215[*(_QWORD *)(v77 - 24)] = v78;
      v79 = (std::ios_base *)&v215[*(_QWORD *)(*(_QWORD *)v215 - 24)];
      std::ios_base::init(v79, &v215[8]);
      v79[1].__vftable = 0;
      v79[1].__fmtflags_ = -1;
      *(_QWORD *)v215 = v74 + 24;
      v222[0] = v75;
      std::streambuf::basic_streambuf();
      v80 = MEMORY[0x1E0DE4FB8];
      *(_QWORD *)&v215[8] = MEMORY[0x1E0DE4FB8] + 16;
      v219 = 0u;
      v220 = 0u;
      v221 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v215, (uint64_t)"Received invalid query parameters. parameters = ", 48);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v215, v48, v49);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v215[8], (std::string *)v207);
      *(_QWORD *)v215 = *v76;
      *(_QWORD *)&v215[*(_QWORD *)(*(_QWORD *)v215 - 24)] = v76[3];
      *(_QWORD *)&v215[8] = v80 + 16;
      if (SBYTE7(v220) < 0)
        operator delete((void *)v219);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v222);
      v239.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v239.__val_ = 3;
      std::system_error::system_error((std::system_error *)v215, v239, (const std::string *)v207);
      if ((v207[23] & 0x80000000) != 0)
        operator delete(*(void **)v207);
      v217 = 0;
      v216 = 0;
      *(_QWORD *)v215 = off_1E2521330;
      *(_QWORD *)&v215[32] = &v216;
      v218 = 0uLL;
      std::runtime_error::runtime_error((std::runtime_error *)v207, (const std::runtime_error *)v215);
      *(_OWORD *)&v207[16] = *(_OWORD *)&v215[16];
      *(_QWORD *)v207 = off_1E2521330;
      v81 = v216;
      v208 = *(unsigned int ***)&v215[32];
      v209 = v216;
      v210 = v217;
      if (v217)
      {
        *((_QWORD *)v216 + 2) = &v209;
        v81 = 0;
        *(_QWORD *)&v215[32] = &v216;
        v216 = 0;
        v217 = 0;
      }
      else
      {
        v208 = &v209;
      }
      v211 = v218;
      v218 = 0uLL;
      *(_QWORD *)v215 = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v215[32], v81);
      MEMORY[0x18D7898AC](v215);
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, (const std::runtime_error *)v207);
      *(_OWORD *)&__what_arg[16] = *(_OWORD *)&v207[16];
      *(_QWORD *)__what_arg = off_1E2521330;
      v83 = v209;
      v232 = v208;
      v233 = v209;
      v234 = v210;
      if (v210)
      {
        *((_QWORD *)v209 + 2) = &v233;
        v83 = 0;
        v208 = &v209;
        v209 = 0;
        v210 = 0;
      }
      else
      {
        v232 = &v233;
      }
      v235 = v211;
      v211 = 0uLL;
      v236 = 0;
      *(_QWORD *)v207 = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v208, v83);
      MEMORY[0x18D7898AC](v207);
      if (v50)
LABEL_84:
        operator delete(v50);
LABEL_85:
      v65 = v236;
      if (v236)
      {
        v212 = &v212;
        v213 = &v212;
        v214 = 0;
        v66 = *(_QWORD *)&__what_arg[16];
        if (*(_QWORD *)&__what_arg[16])
        {
          v67 = *(_OWORD *)__what_arg;
          v68 = **(_QWORD **)&__what_arg[8];
          *(_QWORD *)(v68 + 8) = *(_QWORD *)(*(_QWORD *)__what_arg + 8);
          **(_QWORD **)(v67 + 8) = v68;
          v69 = v212;
          *((_QWORD *)v212 + 1) = *((_QWORD *)&v67 + 1);
          **((_QWORD **)&v67 + 1) = v69;
          *(_QWORD *)(v67 + 8) = &v212;
          v212 = (void *)v67;
          v214 = v66;
          *(_QWORD *)&__what_arg[16] = 0;
        }
        std::list<std::pair<std::string,std::string>>::__move_assign(v197, (char *)&v212);
        if (v214)
        {
          v70 = v213;
          v71 = (_QWORD **)v212;
          v72 = *v213;
          v72[1] = *((_QWORD *)v212 + 1);
          *v71[1] = v72;
          v214 = 0;
          if (v70 != &v212)
          {
            do
            {
              v73 = (void **)v70[1];
              if (*((char *)v70 + 63) < 0)
              {
                operator delete(v70[5]);
                if (*((char *)v70 + 39) < 0)
                  goto LABEL_95;
              }
              else if (*((char *)v70 + 39) < 0)
              {
LABEL_95:
                operator delete(v70[2]);
              }
              operator delete(v70);
              v70 = v73;
            }
            while (v73 != &v212);
          }
        }
      }
      else
      {
        AMSCore::Error::Error((std::runtime_error *)v215, (const std::runtime_error *)__what_arg);
        std::runtime_error::runtime_error((std::runtime_error *)v207, (const std::runtime_error *)v215);
        *(_OWORD *)&v207[16] = *(_OWORD *)&v215[16];
        *(_QWORD *)v207 = off_1E2521330;
        v82 = v216;
        v208 = *(unsigned int ***)&v215[32];
        v209 = v216;
        v210 = v217;
        if (v217)
        {
          *((_QWORD *)v216 + 2) = &v209;
          *(_QWORD *)&v215[32] = &v216;
          v216 = 0;
          v217 = 0;
          v82 = 0;
        }
        else
        {
          v208 = &v209;
        }
        v211 = v218;
        v218 = 0uLL;
        *(_QWORD *)v215 = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v215[32], v82);
        MEMORY[0x18D7898AC](v215);
        std::runtime_error::runtime_error(&v160, (const std::runtime_error *)v207);
        v161 = *(_OWORD *)&v207[16];
        v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v84 = v209;
        v162 = v208;
        v163 = v209;
        v164 = v210;
        if (v210)
        {
          *((_QWORD *)v209 + 2) = &v163;
          v84 = 0;
          v208 = &v209;
          v209 = 0;
          v210 = 0;
        }
        else
        {
          v162 = &v163;
        }
        v165 = v211;
        v211 = 0uLL;
        v182 = 0;
        *(_QWORD *)v207 = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v208, v84);
        MEMORY[0x18D7898AC](v207);
      }
      std::__expected_base<AMSCore::OrderedMap<std::string,std::string>,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](__what_arg);
      if (!v65)
        goto LABEL_239;
      v46 = (uint64_t *)__p;
      v47 = (uint64_t *)v201;
    }
    if (v47 == v46)
      goto LABEL_284;
    v85 = *v46;
    v86 = v46[1];
    AMSCore::StringUtils::split((char **)v215, *v46, v86, "/", 1, 1uLL);
    operator delete(v46);
    v87 = *(_QWORD *)v215;
    __p = *(void **)v215;
    v201 = *(_OWORD *)&v215[8];
    v88 = *(_QWORD *)&v215[8];
    v89 = (uint64_t)(*(_QWORD *)&v215[8] - *(_QWORD *)v215) >> 4;
    if (v89 == 2)
    {
      v90 = *(_QWORD *)(*(_QWORD *)v215 + 24);
      if (!v90)
        goto LABEL_138;
      v91 = *(_BYTE **)(*(_QWORD *)v215 + 16);
      v92 = *(_QWORD *)(*(_QWORD *)v215 + 24);
      v93 = v91;
      while (*v93 == 47)
      {
        ++v93;
        if (!--v92)
          goto LABEL_132;
      }
      v94 = (_BYTE *)(v93 - v91);
      if (v94 == (_BYTE *)-1)
      {
LABEL_132:
        v95 = 0;
        v96 = 0;
        goto LABEL_133;
      }
      v136 = v90 >= (unint64_t)v94;
      v95 = v90 - (_QWORD)v94;
      if (!v136)
        std::__throw_out_of_range[abi:fe180100]("string_view::substr");
      v96 = &v94[(_QWORD)v91];
LABEL_133:
      *(_QWORD *)__what_arg = v96;
      *(_QWORD *)&__what_arg[8] = v95;
    }
    else
    {
      if (v89 != 1)
        goto LABEL_138;
      if (!v86)
        goto LABEL_284;
      if (*(_BYTE *)(v86 + v85 - 1) != 47)
        goto LABEL_138;
      *(_OWORD *)__what_arg = 0uLL;
    }
    AMSCore::StringUtils::join<char [2],std::string_view>((std::string *)v215, (uint64_t *)__what_arg);
    if (!v194)
    {
      v192 = *(_OWORD *)v215;
      v193 = *(_QWORD *)&v215[16];
      v194 = 1;
      if (v88 == v87)
        goto LABEL_284;
      goto LABEL_139;
    }
    if (SHIBYTE(v193) < 0)
      operator delete((void *)v192);
    v192 = *(_OWORD *)v215;
    v193 = *(_QWORD *)&v215[16];
LABEL_138:
    if (v88 == v87)
      goto LABEL_284;
LABEL_139:
    AMSCore::StringUtils::split((char **)&v205, *(_QWORD *)v87, *(_QWORD *)(v87 + 8), ":", 1, 1uLL);
    v97 = v205;
    v98 = v206;
    if (v205 != v206)
    {
      v99 = *((_QWORD *)v205 + 1);
      if (v99)
      {
        v100 = *(_QWORD *)v205;
        v101 = (char *)memchr(*(void **)v205, 64, v99);
        if (v101 && &v101[-v100] != (char *)-1)
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[42],std::string_view &>((uint64_t)v215, 3u, "Received an unsupported URL host. host = ", (uint64_t *)v87);
          std::runtime_error::runtime_error(&v160, (const std::runtime_error *)v215);
          v161 = *(_OWORD *)&v215[16];
          v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v102 = v216;
          v162 = *(unsigned int ***)&v215[32];
          v163 = v216;
          v164 = v217;
          if (v217)
          {
            *((_QWORD *)v216 + 2) = &v163;
            *(_QWORD *)&v215[32] = &v216;
            v216 = 0;
            v217 = 0;
            v102 = 0;
          }
          else
          {
            v162 = &v163;
          }
          v165 = v218;
          v182 = 0;
          v218 = 0uLL;
          *(_QWORD *)v215 = off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v215[32], v102);
          MEMORY[0x18D7898AC](v215);
          v112 = 1;
          goto LABEL_237;
        }
        if (v98 - (_BYTE *)v97 != 32)
        {
LABEL_222:
          *(_OWORD *)v207 = *(_OWORD *)v97;
          v137 = *(_QWORD *)&v207[8];
          if (*(_QWORD *)&v207[8])
          {
            v138 = 0;
            v139 = *(unsigned __int8 **)v207;
            v140 = (std::locale::id *)MEMORY[0x1E0DE4A90];
            while (1)
            {
              v141 = v139[v138];
              v142 = std::locale::classic();
              v143 = std::locale::use_facet(v142, v140);
              if ((v141 & 0x80) != 0 || (*((_DWORD *)&v143[1].~facet + v141) & 0x500) == 0)
              {
                v144 = v139[v138];
                if ((v144 - 45) >= 2 && v144 != 126 && v144 != 95)
                  break;
              }
              if (v137 == ++v138)
              {
                std::string::basic_string<std::string_view,0>(__what_arg, v139, v137);
                *(_OWORD *)v215 = *(_OWORD *)__what_arg;
                *(_QWORD *)&v215[16] = *(_QWORD *)&__what_arg[16];
                memset(__what_arg, 0, 24);
                v215[24] = 1;
                AMSCore::URLBuilder::withHost((uint64_t)&v183, (__int128 *)v215);
                if (v215[24] && (v215[23] & 0x80000000) != 0)
                  operator delete(*(void **)v215);
                if ((__what_arg[23] & 0x80000000) != 0)
                  operator delete(*(void **)__what_arg);
                v112 = 0;
                if (v97)
                  goto LABEL_237;
LABEL_156:
                if (!v112)
                  goto LABEL_238;
                goto LABEL_239;
              }
            }
            AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[35],std::string_view &>((uint64_t)v215, 3u, (uint64_t *)v207);
          }
          else
          {
            AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[15]>((uint64_t)v215, 3u);
          }
          std::expected<AMSCore::URLBuilder,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v160, (uint64_t)v215);
          std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v215);
        }
        v113 = (unsigned __int8 *)v97[2];
        v114 = v97[3];
        *(_QWORD *)v207 = v113;
        *(_QWORD *)&v207[8] = v114;
        v115 = &v113[v114];
        if (!v114)
          goto LABEL_173;
        v116 = v113;
        while (1)
        {
          v117 = *v116 - 48;
          if (*v116 != 48)
            break;
          ++v116;
          if (!--v114)
            goto LABEL_173;
        }
        if (v116 == v115)
        {
LABEL_173:
          v116 = v115;
        }
        else if (v117 < 0xA)
        {
          v118 = v116 + 1;
          *(_DWORD *)&__what_arg[16] = *v116 - 48;
          if (v116 + 1 == v115)
          {
            v120 = 4;
            v118 = v115;
            v121 = v117;
            goto LABEL_206;
          }
          v119 = *v118;
          if ((v119 - 58) < 0xFFFFFFF6)
          {
            v120 = 4;
            v121 = v117;
LABEL_206:
            v132 = *(unsigned int *)((char *)&std::__itoa::__pow10_32 + ((0x400000000 - (v120 << 32)) >> 30))
                 * (unint64_t)v117;
            v133 = &v118[-((v132 & 0xFFFFFFFF00000000) != 0)];
            v134 = HIWORD(v121);
            if (v133 == v115)
            {
              if (v134 || 0xFFFF - v121 < v132)
                goto LABEL_176;
            }
            else
            {
              v136 = *v133 - 48 >= 0xA && v134 == 0 && 0xFFFF - v121 >= v132;
              if (!v136)
              {
LABEL_176:
                AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[42],std::string_view &>((uint64_t)__what_arg, 3u, "Failed to parse value as number. value = ", (uint64_t *)v207);
                std::runtime_error::runtime_error((std::runtime_error *)v215, (const std::runtime_error *)__what_arg);
                *(_OWORD *)&v215[16] = *(_OWORD *)&__what_arg[16];
                *(_QWORD *)v215 = off_1E2521330;
                v123 = v233;
                *(_QWORD *)&v215[32] = v232;
                v216 = v233;
                v217 = v234;
                if (v234)
                {
                  *((_QWORD *)v233 + 2) = &v216;
                  v232 = &v233;
                  v233 = 0;
                  v234 = 0;
                  v123 = 0;
                }
                else
                {
                  *(_QWORD *)&v215[32] = &v216;
                }
                v218 = v235;
                v235 = 0uLL;
                LOBYTE(v219) = 0;
                *(_QWORD *)__what_arg = off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v232, v123);
                v124 = (std::runtime_error *)MEMORY[0x18D7898AC](__what_arg);
                if (!(_BYTE)v219)
                {
                  std::runtime_error::runtime_error(v124, (const std::runtime_error *)v215);
                  *(_OWORD *)&__what_arg[16] = *(_OWORD *)&v215[16];
                  *(_QWORD *)__what_arg = off_1E2521330;
                  v232 = *(unsigned int ***)&v215[32];
                  v233 = v216;
                  v234 = v217;
                  if (v217)
                  {
                    *((_QWORD *)v216 + 2) = &v233;
                    *(_QWORD *)&v215[32] = &v216;
                    v216 = 0;
                    v217 = 0;
                  }
                  else
                  {
                    v232 = &v233;
                  }
                  v235 = v218;
                  v218 = 0uLL;
                  v236 = 1;
                  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v207, (uint64_t)__what_arg);
                  std::expected<AMSCore::URLBuilder,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v160, (uint64_t)v207);
                  std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v207);
                }
LABEL_220:
                __what_arg[0] = 0;
                v236 = 0;
                std::optional<AMSCore::Error>::~optional((uint64_t)__what_arg);
                if ((_BYTE)v219)
                {
                  v196 = 1;
                  v195 = *(_WORD *)v215;
                  goto LABEL_222;
                }
                goto LABEL_284;
              }
            }
            v122 = v132 + v121;
            if (v115 != v133)
              goto LABEL_176;
LABEL_219:
            *(_WORD *)v215 = v122;
            LOBYTE(v219) = 1;
            goto LABEL_220;
          }
          v118 = v116 + 2;
          v121 = v119 - 48;
          *(_DWORD *)&__what_arg[12] = v121;
          if (v116 + 2 == v115)
          {
            v120 = 3;
            v118 = v115;
            goto LABEL_206;
          }
          v126 = *v118;
          if ((v126 - 58) < 0xFFFFFFF6)
          {
            v120 = 3;
            goto LABEL_206;
          }
          v118 = v116 + 3;
          v121 = v126 - 48;
          *(_DWORD *)&__what_arg[8] = v126 - 48;
          if (v116 + 3 == v115)
          {
            v118 = v115;
          }
          else
          {
            v127 = *v118;
            if ((v127 - 58) >= 0xFFFFFFF6)
            {
              v118 = v116 + 4;
              v128 = v127 - 48;
              *(_DWORD *)&__what_arg[4] = v127 - 48;
              if (v116 + 4 == v115)
              {
                v120 = 1;
                v118 = v115;
              }
              else
              {
                v129 = *v118;
                if ((v129 - 58) >= 0xFFFFFFF6)
                {
                  v120 = 0;
                  v118 = v116 + 5;
                  v128 = v129 - 48;
                  *(_DWORD *)__what_arg = v129 - 48;
                }
                else
                {
                  v120 = 1;
                }
              }
              v121 = v128 + 10 * *(_DWORD *)&__what_arg[4 * v120 + 4] + 100 * *(_DWORD *)&__what_arg[4 * (v120 | 2)];
              if ((v120 | 2) == 3)
                goto LABEL_206;
              v131 = v120 + 3;
              v130 = 1000;
              goto LABEL_205;
            }
          }
          v130 = 10;
          v120 = 2;
          v131 = 3;
LABEL_205:
          v121 += *(_DWORD *)&__what_arg[4 * v131] * v130;
          goto LABEL_206;
        }
        if (v116 == v113)
          goto LABEL_176;
        v122 = 0;
        if (v115 != v116)
          goto LABEL_176;
        goto LABEL_219;
      }
    }
    v103 = MEMORY[0x1E0DE4FE0];
    v104 = MEMORY[0x1E0DE4FE0] + 64;
    v105 = (_QWORD *)MEMORY[0x1E0DE4F60];
    v106 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v107 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v222[0] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)v215 = v106;
    *(_QWORD *)&v215[*(_QWORD *)(v106 - 24)] = v107;
    v108 = (std::ios_base *)&v215[*(_QWORD *)(*(_QWORD *)v215 - 24)];
    std::ios_base::init(v108, &v215[8]);
    v108[1].__vftable = 0;
    v108[1].__fmtflags_ = -1;
    *(_QWORD *)v215 = v103 + 24;
    v222[0] = v104;
    std::streambuf::basic_streambuf();
    v109 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v215[8] = MEMORY[0x1E0DE4FB8] + 16;
    v219 = 0u;
    v220 = 0u;
    v221 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v215, (uint64_t)"Failed to parse the URL host. host = ", 37);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v215, *(_QWORD *)v87, *(_QWORD *)(v87 + 8));
    std::stringbuf::str[abi:fe180100]((uint64_t)&v215[8], (std::string *)v207);
    *(_QWORD *)v215 = *v105;
    *(_QWORD *)&v215[*(_QWORD *)(*(_QWORD *)v215 - 24)] = v105[3];
    *(_QWORD *)&v215[8] = v109 + 16;
    if (SBYTE7(v220) < 0)
      operator delete((void *)v219);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v222);
    v240.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v240.__val_ = 3;
    std::system_error::system_error((std::system_error *)v215, v240, (const std::string *)v207);
    if ((v207[23] & 0x80000000) != 0)
      operator delete(*(void **)v207);
    v217 = 0;
    v216 = 0;
    *(_QWORD *)v215 = off_1E2521330;
    *(_QWORD *)&v215[32] = &v216;
    v218 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, (const std::runtime_error *)v215);
    *(_OWORD *)&__what_arg[16] = *(_OWORD *)&v215[16];
    *(_QWORD *)__what_arg = off_1E2521330;
    v110 = v216;
    v232 = *(unsigned int ***)&v215[32];
    v233 = v216;
    v234 = v217;
    if (v217)
    {
      *((_QWORD *)v216 + 2) = &v233;
      v110 = 0;
      *(_QWORD *)&v215[32] = &v216;
      v216 = 0;
      v217 = 0;
    }
    else
    {
      v232 = &v233;
    }
    v235 = v218;
    v218 = 0uLL;
    *(_QWORD *)v215 = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v215[32], v110);
    MEMORY[0x18D7898AC](v215);
    std::runtime_error::runtime_error(&v160, (const std::runtime_error *)__what_arg);
    v161 = *(_OWORD *)&__what_arg[16];
    v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v111 = v233;
    v162 = v232;
    v163 = v233;
    v164 = v234;
    if (v234)
    {
      *((_QWORD *)v233 + 2) = &v163;
      v111 = 0;
      v232 = &v233;
      v233 = 0;
      v234 = 0;
    }
    else
    {
      v162 = &v163;
    }
    v165 = v235;
    v235 = 0uLL;
    v182 = 0;
    *(_QWORD *)__what_arg = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v232, v111);
    MEMORY[0x18D7898AC](__what_arg);
    v112 = 1;
    if (!v97)
      goto LABEL_156;
LABEL_237:
    operator delete(v97);
    if (!v112)
    {
LABEL_238:
      AMSCore::URLBuilder::URLBuilder(&v160, &v183);
      v182 = 1;
    }
LABEL_239:
    AMSCore::URL::~URL((AMSCore::URL *)&v190);
    if (v189)
    {
      v183.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v145 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
      if (*((_QWORD *)&v188 + 1))
      {
        v146 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v185, v186);
      MEMORY[0x18D7898AC](&v183);
    }
    v6 = (uint64_t *)__p;
    if (__p)
      goto LABEL_247;
    goto LABEL_248;
  }
  v37 = MEMORY[0x1E0DE4FE0];
  v38 = MEMORY[0x1E0DE4FE0] + 64;
  v39 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v41 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v222[0] = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)v215 = v40;
  *(_QWORD *)&v215[*(_QWORD *)(v40 - 24)] = v41;
  v42 = (std::ios_base *)&v215[*(_QWORD *)(*(_QWORD *)v215 - 24)];
  std::ios_base::init(v42, &v215[8]);
  v42[1].__vftable = 0;
  v42[1].__fmtflags_ = -1;
  *(_QWORD *)v215 = v37 + 24;
  v222[0] = v38;
  std::streambuf::basic_streambuf();
  v43 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v215[8] = MEMORY[0x1E0DE4FB8] + 16;
  v219 = 0u;
  v220 = 0u;
  v221 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v215, (uint64_t)"Failed to parse the URL. url = ", 31);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v215, a1, a2);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v215[8], (std::string *)__what_arg);
  *(_QWORD *)v215 = *v39;
  *(_QWORD *)&v215[*(_QWORD *)(*(_QWORD *)v215 - 24)] = v39[3];
  *(_QWORD *)&v215[8] = v43 + 16;
  if (SBYTE7(v220) < 0)
    operator delete((void *)v219);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v222);
  v238.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v238.__val_ = 3;
  std::system_error::system_error((std::system_error *)v215, v238, (const std::string *)__what_arg);
  if ((__what_arg[23] & 0x80000000) != 0)
    operator delete(*(void **)__what_arg);
  v217 = 0;
  v216 = 0;
  *(_QWORD *)v215 = off_1E2521330;
  *(_QWORD *)&v215[32] = &v216;
  v218 = 0uLL;
  std::runtime_error::runtime_error(&v183, (const std::runtime_error *)v215);
  v184 = *(_OWORD *)&v215[16];
  v183.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v44 = v216;
  v185 = *(unsigned int ***)&v215[32];
  v186 = v216;
  v187 = v217;
  if (v217)
  {
    *((_QWORD *)v216 + 2) = &v186;
    v44 = 0;
    *(_QWORD *)&v215[32] = &v216;
    v216 = 0;
    v217 = 0;
  }
  else
  {
    v185 = &v186;
  }
  v188 = v218;
  v218 = 0uLL;
  *(_QWORD *)v215 = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v215[32], v44);
  MEMORY[0x18D7898AC](v215);
  std::runtime_error::runtime_error(&v160, &v183);
  v161 = v184;
  v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v45 = v186;
  v162 = v185;
  v163 = v186;
  v164 = v187;
  if (v187)
  {
    *((_QWORD *)v186 + 2) = &v163;
    v45 = 0;
    v185 = &v186;
    v186 = 0;
    v187 = 0;
  }
  else
  {
    v162 = &v163;
  }
  v165 = v188;
  v188 = 0uLL;
  v182 = 0;
  v183.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v185, v45);
  MEMORY[0x18D7898AC](&v183);
  if (v6)
LABEL_247:
    operator delete(v6);
LABEL_248:
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v202.__r_.__value_.__l.__data_);
    if (v182)
    {
LABEL_250:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 24) = 0;
      if (v169)
      {
        *(_OWORD *)a3 = v167;
        *(_QWORD *)(a3 + 16) = v168;
        v168 = 0;
        v167 = 0uLL;
        *(_BYTE *)(a3 + 24) = 1;
      }
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      if (v172)
      {
        *(_OWORD *)(a3 + 32) = v170;
        *(_QWORD *)(a3 + 48) = v171;
        v171 = 0;
        v170 = 0uLL;
        *(_BYTE *)(a3 + 56) = 1;
      }
      *(_BYTE *)(a3 + 64) = 0;
      *(_BYTE *)(a3 + 88) = 0;
      if (v175)
      {
        *(_OWORD *)(a3 + 64) = v173;
        *(_QWORD *)(a3 + 80) = v174;
        v174 = 0;
        v173 = 0uLL;
        *(_BYTE *)(a3 + 88) = 1;
      }
      *(_DWORD *)(a3 + 96) = v176;
      *(_QWORD *)(a3 + 104) = a3 + 104;
      *(_QWORD *)(a3 + 112) = a3 + 104;
      *(_QWORD *)(a3 + 120) = 0;
      if (&v167 != (__int128 *)a3)
      {
        v148 = v179;
        if (v179)
        {
          v150 = v177;
          v149 = v178;
          v151 = *v178;
          *(_QWORD *)(v151 + 8) = *(_QWORD *)(v177 + 8);
          **(_QWORD **)(v150 + 8) = v151;
          v152 = *(_QWORD *)(a3 + 104);
          *(_QWORD *)(v152 + 8) = v149;
          *v149 = v152;
          *(_QWORD *)(a3 + 104) = v150;
          *(_QWORD *)(v150 + 8) = a3 + 104;
          *(_QWORD *)(a3 + 120) = v148;
          v179 = 0;
        }
        *(_OWORD *)(a3 + 128) = v180;
        *(_QWORD *)(a3 + 144) = v181;
        v181 = 0;
        v180 = 0uLL;
        *(_BYTE *)(a3 + 152) = 1;
        goto LABEL_268;
      }
LABEL_284:
      __break(1u);
      return;
    }
  }
  else if (v182)
  {
    goto LABEL_250;
  }
  AMSCore::Error::Error((std::runtime_error *)v215, &v160);
  std::runtime_error::runtime_error(&v183, (const std::runtime_error *)v215);
  v184 = *(_OWORD *)&v215[16];
  v183.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v153 = v216;
  v185 = *(unsigned int ***)&v215[32];
  v186 = v216;
  v187 = v217;
  if (v217)
  {
    *((_QWORD *)v216 + 2) = &v186;
    *(_QWORD *)&v215[32] = &v216;
    v216 = 0;
    v217 = 0;
    v153 = 0;
  }
  else
  {
    v185 = &v186;
  }
  v188 = v218;
  v218 = 0uLL;
  *(_QWORD *)v215 = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v215[32], v153);
  MEMORY[0x18D7898AC](v215);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v183);
  *(_OWORD *)(a3 + 16) = v184;
  *(_QWORD *)a3 = off_1E2521330;
  v154 = v186;
  *(_QWORD *)(a3 + 32) = v185;
  *(_QWORD *)(a3 + 40) = v154;
  v155 = a3 + 40;
  v156 = v187;
  *(_QWORD *)(a3 + 48) = v187;
  if (v156)
  {
    *((_QWORD *)v154 + 2) = v155;
    v154 = 0;
    v185 = &v186;
    v186 = 0;
    v187 = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = v155;
  }
  *(_OWORD *)(a3 + 56) = v188;
  v188 = 0uLL;
  *(_BYTE *)(a3 + 152) = 0;
  v183.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v185, v154);
  MEMORY[0x18D7898AC](&v183);
  if (!v182)
  {
    ((void (*)(std::runtime_error *))v160.~runtime_error)(&v160);
    return;
  }
LABEL_268:
  AMSCore::URL::~URL((AMSCore::URL *)&v167);
  if (v166)
  {
    v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v157 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
    if (*((_QWORD *)&v165 + 1))
    {
      v158 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v162, v163);
    MEMORY[0x18D7898AC](&v160);
  }
}

void sub_18CD18E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v70;

  if (v70)
    operator delete(v70);
  AMSCore::URLBuilder::~URLBuilder((AMSCore::URLBuilder *)&a41);
  if (__p)
  {
    operator delete(__p);
    if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x200]);
  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:fe180100]();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

uint64_t AMSCore::StringUtils::join<char [2],std::string_view>(std::string *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[8];
  void *__p[2];
  __int128 v15;
  int v16;
  uint64_t v17[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v17[0] = MEMORY[0x1E0DE4FE0] + 64;
  v12 = v7;
  *(_QWORD *)((char *)&v13[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24));
  std::ios_base::init(v9, v13);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v12 = v4 + 24;
  v17[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v13[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  v16 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v12, (uint64_t)"/", 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v12, *a2, a2[1]);
  std::stringbuf::str[abi:fe180100]((uint64_t)v13, a1);
  v12 = *v6;
  *(_QWORD *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24)) = v6[3];
  v13[0] = v10 + 16;
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v17);
}

void sub_18CD19338(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void std::__expected_base<AMSCore::OrderedMap<std::string,std::string>,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](char *a1)
{
  void (**v2)(_QWORD);
  char *v3;
  uint64_t v4;
  char *v5;

  if (!a1[72])
  {
    (**(void (***)(char *))a1)(a1);
    return;
  }
  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(void (***)(_QWORD))a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    *(_QWORD *)v2[1] = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0)
LABEL_10:
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_10;
        }
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

__n128 std::expected<AMSCore::URLBuilder,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(std::runtime_error *a1, uint64_t a2)
{
  std::runtime_error *v3;
  _QWORD *v4;
  uint64_t v5;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v7;
  __n128 result;

  v3 = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  v3->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v3[1] = *(std::runtime_error *)(a2 + 16);
  v3->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v3[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  v3[2].__imp_.__imp_ = (const char *)v5;
  p_imp = (std::runtime_error_vtbl *)&v3[2].__imp_;
  v7 = *(std::runtime_error_vtbl **)(a2 + 48);
  v3[3].__vftable = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = p_imp;
    *(_QWORD *)(a2 + 32) = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v3[2].__vftable = p_imp;
  }
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)((char *)v3 + 56) = result;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  LOBYTE(v3[14].__imp_.__imp_) = 0;
  return result;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[15]>(uint64_t a1, unsigned int a2)
{
  std::system_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error_vtbl *v7;
  std::system_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::system_error v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::error_code v25;

  v4 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = MEMORY[0x1E0DE4F60];
  v7 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16.__vftable = v7;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v7[-1].~system_error) = v8;
  v9 = (std::ios_base *)((char *)&v16 + (unint64_t)v16.__vftable[-1].~system_error);
  std::ios_base::init(v9, &v16.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16.__vftable = v4 + 1;
  v24[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Host is empty.", 14);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v16.__imp_, &v15);
  v16.__vftable = *(std::system_error_vtbl **)v6;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v16.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v6 + 24);
  v16.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v24);
  *(_QWORD *)&v25.__val_ = a2;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v16, v25, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v18 = 0;
  v19 = 0;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v17 = &v18;
  v20 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(std::error_code *)(a1 + 16) = v16.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v11 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = a1 + 40;
  v13 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v11 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
  return MEMORY[0x18D7898AC](&v16);
}

void sub_18CD196B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CD196CC(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[35],std::string_view &>(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  std::system_error v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];
  std::error_code v27;

  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v26[0] = MEMORY[0x1E0DE4FE0] + 64;
  v18.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&v18.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&v18 + (unint64_t)v18.__vftable[-1].~system_error);
  std::ios_base::init(v11, &v18.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v18.__vftable = v6 + 1;
  v26[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v18.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v24 = 0u;
  v25 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Invalid character in host. host = ", 34);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, *a3, a3[1]);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v18.__imp_, &v17);
  v18.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&v18.__vftable + (unint64_t)v18.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  v18.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v26);
  *(_QWORD *)&v27.__val_ = a2;
  v27.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v18, v27, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v20 = 0;
  v21 = 0;
  v18.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v19 = &v20;
  v22 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v18);
  *(std::error_code *)(a1 + 16) = v18.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v13 = v20;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v13;
  v14 = a1 + 40;
  v15 = v21;
  *(_QWORD *)(a1 + 48) = v21;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    v13 = 0;
    v19 = &v20;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v14;
  }
  *(_OWORD *)(a1 + 56) = v22;
  v22 = 0uLL;
  v18.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, (unsigned int *)v13);
  return MEMORY[0x18D7898AC](&v18);
}

void sub_18CD1990C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CD19928(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

_QWORD *std::string::basic_string<std::string_view,0>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t AMSCore::URLBuilder::withHost(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = a1 + 112;
  if (*(unsigned __int8 *)(a1 + 136) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(a1 + 136))
    {
      if (*(char *)(a1 + 135) < 0)
        operator delete(*(void **)v4);
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 136))
  {
    if (*(char *)(a1 + 135) < 0)
      operator delete(*(void **)v4);
    *(_BYTE *)(a1 + 136) = 0;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 136) = 1;
  }
  return a1;
}

void _ZNSt3__14listINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE9remove_ifIZN7AMSCore10OrderedMapIS7_S7_E5eraseERKS7_EUlRT_E_EEmSH_(_QWORD *a1, unsigned __int8 **a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v26 = &v26;
  v27 = &v26;
  v28 = 0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1)
  {
    v5 = 0;
    v6 = &v26;
    while (1)
    {
      v8 = *((unsigned __int8 *)v2 + 39);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 39);
      else
        v9 = (unsigned __int8 *)v2[3];
      v10 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      v11 = (char)v10;
      if ((char)v10 < 0)
        v10 = a2[1];
      if (v9 != v10)
        goto LABEL_4;
      if (v11 >= 0)
        v12 = (unsigned __int8 *)a2;
      else
        v12 = *a2;
      if ((v8 & 0x80) != 0)
      {
        if (memcmp((const void *)v2[2], v12, v2[3]))
          goto LABEL_4;
      }
      else if (*((_BYTE *)v2 + 39))
      {
        v13 = 0;
        while (*((unsigned __int8 *)v2 + v13 + 16) == v12[v13])
        {
          if (v8 == ++v13)
            goto LABEL_21;
        }
LABEL_4:
        i = v2;
LABEL_5:
        i = (_QWORD *)i[1];
        goto LABEL_6;
      }
LABEL_21:
      for (i = (_QWORD *)v2[1]; ; i = (_QWORD *)i[1])
      {
        if (i == a1)
        {
          v17 = 1;
          i = a1;
          if (v2 == a1)
            goto LABEL_36;
          goto LABEL_39;
        }
        v14 = *((unsigned __int8 *)i + 39);
        if ((v14 & 0x80u) == 0)
          v15 = (unsigned __int8 *)*((unsigned __int8 *)i + 39);
        else
          v15 = (unsigned __int8 *)i[3];
        if (v15 != v9)
          goto LABEL_35;
        if ((v14 & 0x80) == 0)
          break;
        if (memcmp((const void *)i[2], v12, i[3]))
          goto LABEL_35;
LABEL_23:
        ;
      }
      if (!*((_BYTE *)i + 39))
        goto LABEL_23;
      v16 = 0;
      while (*((unsigned __int8 *)i + v16 + 16) == v12[v16])
      {
        if (v14 == ++v16)
          goto LABEL_23;
      }
LABEL_35:
      v17 = 0;
      if (v2 == i)
      {
LABEL_36:
        if ((v17 & 1) == 0)
          goto LABEL_5;
        goto LABEL_6;
      }
LABEL_39:
      v6 = (_QWORD *)*i;
      if (&v26 != a1)
      {
        if (v6 == v2)
        {
          v20 = 1;
        }
        else
        {
          v18 = -1;
          v19 = v2;
          do
          {
            v19 = (_QWORD *)v19[1];
            ++v18;
          }
          while (v19 != v6);
          v20 = v18 + 2;
        }
        a1[2] -= v20;
        v5 += v20;
        v28 = v5;
      }
      v21 = *v2;
      *(_QWORD *)(v21 + 8) = v6[1];
      *(_QWORD *)v6[1] = v21;
      v22 = v26;
      v26[1] = v2;
      *v2 = v22;
      v26 = v6;
      v6[1] = &v26;
      if ((v17 & 1) == 0)
        goto LABEL_5;
LABEL_6:
      v2 = i;
      if (i == a1)
      {
        if (!v5)
          return;
        v23 = v27;
        v24 = *v27;
        *(_QWORD *)(v24 + 8) = v6[1];
        *(_QWORD *)v6[1] = v24;
        v28 = 0;
        if (v23 == &v26)
          return;
        while (2)
        {
          v25 = (_QWORD *)v23[1];
          if (*((char *)v23 + 63) < 0)
          {
            operator delete((void *)v23[5]);
            if (*((char *)v23 + 39) < 0)
              goto LABEL_55;
          }
          else if (*((char *)v23 + 39) < 0)
          {
LABEL_55:
            operator delete((void *)v23[2]);
          }
          operator delete(v23);
          v23 = v25;
          if (v25 == &v26)
            return;
          continue;
        }
      }
    }
  }
}

uint64_t AMSCore::URLBuilder::withPathSegment(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  void **v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string *p_p;
  size_t size;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string __p;
  uint64_t v21[2];

  if (!a3)
    return a1;
  v4 = (void **)(a1 + 144);
  v5 = a3;
  v6 = a2;
  while (*v6 == 47)
  {
    ++v6;
    if (!--v5)
      goto LABEL_9;
  }
  v7 = (_BYTE *)(v6 - a2);
  if (v7 == (_BYTE *)-1)
  {
LABEL_9:
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v8 = a3 - (_QWORD)v7;
    if (a3 < (unint64_t)v7)
      goto LABEL_54;
    v9 = &v7[(_QWORD)a2];
  }
  v21[0] = (uint64_t)v9;
  v21[1] = v8;
  if (*(_BYTE *)(a1 + 168))
  {
    v10 = *(unsigned __int8 *)(a1 + 167);
    if (*(char *)(a1 + 167) < 0)
    {
      v12 = *(_QWORD *)(a1 + 152);
      if (v12)
      {
        if (*((char *)*v4 + v12 - 1) == 47)
        {
          v11 = (*(_QWORD *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_22:
          if (v11 - v12 >= v8)
          {
            if (v8)
            {
              if ((v10 & 0x80) != 0)
                v4 = (void **)*v4;
              memmove((char *)v4 + v12, v9, v8);
              v17 = v12 + v8;
              if (*(char *)(a1 + 167) < 0)
                *(_QWORD *)(a1 + 152) = v17;
              else
                *(_BYTE *)(a1 + 167) = v17 & 0x7F;
              *((_BYTE *)v4 + v17) = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace((std::string *)(a1 + 144), v11, v8 - v11 + v12, v12, v12, 0, v8, v9);
          }
          return a1;
        }
LABEL_24:
        AMSCore::StringUtils::join<char [2],std::string_view>(&__p, v21);
        if (*(_BYTE *)(a1 + 168))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          if (*(char *)(a1 + 167) < 0)
          {
            v16 = *(_QWORD *)(a1 + 152);
            v15 = (*(_QWORD *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFLL) - 1;
          }
          else
          {
            v15 = 22;
            v16 = *(unsigned __int8 *)(a1 + 167);
          }
          if (v15 - v16 >= size)
          {
            if (size)
            {
              if ((*(_BYTE *)(a1 + 167) & 0x80) != 0)
                v4 = (void **)*v4;
              memmove((char *)v4 + v16, p_p, size);
              v18 = v16 + size;
              if (*(char *)(a1 + 167) < 0)
              {
                *(_QWORD *)(a1 + 152) = v18;
                *((_BYTE *)v4 + v18) = 0;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return a1;
                goto LABEL_49;
              }
              *(_BYTE *)(a1 + 167) = v18 & 0x7F;
              *((_BYTE *)v4 + v18) = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace((std::string *)(a1 + 144), v15, size - v15 + v16, v16, v16, 0, size, (const std::string::value_type *)p_p);
          }
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return a1;
LABEL_49:
          operator delete(__p.__r_.__value_.__l.__data_);
          return a1;
        }
      }
    }
    else if (*(_BYTE *)(a1 + 167))
    {
      if (*((_BYTE *)v4 + v10 - 1) == 47)
      {
        v11 = 22;
        v12 = *(unsigned __int8 *)(a1 + 167);
        goto LABEL_22;
      }
      goto LABEL_24;
    }
    __break(1u);
LABEL_54:
    std::__throw_out_of_range[abi:fe180100]("string_view::substr");
  }
  AMSCore::StringUtils::join<char [2],std::string_view>(&__p, v21);
  if (*(_BYTE *)(a1 + 168))
  {
    if (*(char *)(a1 + 167) < 0)
      operator delete(*v4);
    *(_OWORD *)v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 160) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 160) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_18CD19FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::URLBuilder::withQueryParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  void *v8[2];
  uint64_t v9;
  void *__p[2];
  uint64_t v11;

  *(_OWORD *)v8 = *(_OWORD *)a2;
  v4 = a1 + 184;
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  _ZNSt3__14listINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE9remove_ifIZN7AMSCore10OrderedMapIS7_S7_E5eraseERKS7_EUlRT_E_EEmSH_((_QWORD *)(a1 + 184), (unsigned __int8 **)v8);
  v5 = operator new(0x40uLL);
  v5[1] = *(_OWORD *)v8;
  *((_QWORD *)v5 + 4) = v9;
  v8[1] = 0;
  v9 = 0;
  v8[0] = 0;
  *(_OWORD *)((char *)v5 + 40) = *(_OWORD *)__p;
  *((_QWORD *)v5 + 7) = v11;
  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  v6 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)v5 = v6;
  *((_QWORD *)v5 + 1) = v4;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(a1 + 184) = v5;
  ++*(_QWORD *)(a1 + 200);
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return a1;
LABEL_5:
    operator delete(v8[0]);
    return a1;
  }
  if (SHIBYTE(v9) < 0)
    goto LABEL_5;
  return a1;
}

uint64_t AMSCore::UserAgent::create@<X0>(AMSCore::UserAgent *this@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  std::string::size_type v10;
  std::ios_base *v11;
  std::string::size_type size;
  int v13;
  std::string *p_p;
  BOOL v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  AMSCore::UserAgent *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::pointer data;
  std::string::size_type v26;
  std::string::size_type v27;
  int v28;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::pointer v39;
  std::string::size_type v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string *v49;
  std::string::size_type v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string::pointer v59;
  std::string::size_type v60;
  std::string::size_type v61;
  int v62;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  std::string *v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string::size_type v75;
  std::string::pointer v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string::pointer v79;
  uint64_t v80;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::string *v91;
  std::string::size_type v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  const void *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v119;
  std::string *v120;
  std::string::size_type v121;
  void **v122;
  const void *v123;
  _QWORD *v124;
  std::string *v125;
  std::string::size_type v126;
  _QWORD *v127;
  std::string *v128;
  std::string::size_type v129;
  _QWORD *v130;
  std::string *v131;
  std::string::size_type v132;
  uint64_t v133;
  void **v134;
  const char *v135;
  uint64_t v136;
  const void *v137;
  _QWORD *v138;
  std::string *v139;
  std::string::size_type v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v157;
  std::string *v158;
  std::string::size_type v159;
  _QWORD *v160;
  std::string::size_type v161;
  char v162;
  std::string *v163;
  int v164;
  int v165;
  BOOL v166;
  const void *v167;
  _QWORD *v168;
  _QWORD *v169;
  const void *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  std::string *v175;
  std::string::size_type v176;
  _QWORD *v177;
  _QWORD *v178;
  std::string *v179;
  std::string::size_type v180;
  _QWORD *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::string::size_type v185;
  std::string::size_type v186;
  std::string *v187;
  void *v188;
  uint64_t v189;
  _QWORD *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  _QWORD *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  const void *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v205;
  std::ios_base *v206;
  unint64_t v207;
  void **v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  _QWORD *v212;
  std::string *v213;
  std::string::size_type v214;
  _QWORD *v215;
  std::string::value_type v216;
  BOOL v219;
  BOOL v220;
  void *v221;
  uint64_t v222;
  unsigned __int8 v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  std::ios_base *v230;
  unsigned __int8 v231;
  std::string::size_type v232;
  char *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  _QWORD *v237;
  std::string *v238;
  std::string::size_type v239;
  char v240;
  std::string::size_type v241;
  size_t v242;
  unint64_t v243;
  std::string::value_type *v244;
  uint64_t v245;
  uint64_t v246;
  _BYTE *v247;
  std::string *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::string::size_type v252;
  int v253;
  std::string *v254;
  unint64_t *v255;
  unint64_t v256;
  _QWORD *v257;
  _BYTE *v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  std::string *v264;
  std::string::size_type v265;
  _QWORD *v267;
  std::string *v268;
  std::string::size_type v269;
  _QWORD *v270;
  uint64_t **v271;
  std::string *v272;
  uint64_t *v273;
  std::string *v274;
  void *v275;
  _BYTE v276[23];
  unsigned __int8 v277;
  char v278;
  std::__shared_weak_count *v279;
  _QWORD v280[8];
  void *v281[2];
  __int128 v282;
  int v283;
  uint64_t v284;
  void *v285[2];
  unsigned __int8 v286;
  char v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  void *v290;
  uint64_t v291;
  unsigned __int8 v292;
  __int128 v293;
  __int128 v294;
  int v295;
  _QWORD v296[19];
  std::__shared_weak_count *v297;
  std::__shared_weak_count *v298;
  char v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  std::string __p;
  char v303;
  std::string::size_type v304;
  __int128 v305;
  __int128 v306;
  int v307;
  uint64_t *v308;
  std::string v309;
  std::string::size_type v310;
  std::string::size_type v311;
  uint64_t v312;

  v312 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = v280;
  v8 = (void *)MEMORY[0x1E0DE4F60];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
  v284 = MEMORY[0x1E0DE4FE0] + 64;
  v279 = (std::__shared_weak_count *)v10;
  v275 = v9;
  *(_QWORD *)((char *)&v280[-1] + *(_QWORD *)(v10 - 24)) = v9;
  v11 = (std::ios_base *)((char *)&v280[-1] + (unint64_t)v279[-1].__vftable);
  std::ios_base::init(v11, v280);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v279 = v5 + 1;
  v284 = v6;
  std::streambuf::basic_streambuf();
  v280[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v281 = 0u;
  v282 = 0u;
  v283 = 16;
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v290);
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v290 + 80))(&__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size != 65)
  {
    v15 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_12;
LABEL_10:
    v16 = (std::__shared_weak_count *)v291;
    if (!v291)
      goto LABEL_16;
    goto LABEL_13;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v15 = memcmp(p_p, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL) == 0;
  if ((v13 & 0x80000000) == 0)
    goto LABEL_10;
LABEL_12:
  operator delete(__p.__r_.__value_.__l.__data_);
  v16 = (std::__shared_weak_count *)v291;
  if (!v291)
    goto LABEL_16;
LABEL_13:
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v15)
      goto LABEL_150;
    goto LABEL_17;
  }
LABEL_16:
  if (!v15)
    goto LABEL_150;
LABEL_17:
  (*(void (**)(std::string *__return_ptr, AMSCore::UserAgent *))(*(_QWORD *)this + 80))(&v309, this);
  if (v309.__r_.__value_.__r.__words[0])
    v19 = (AMSCore::UserAgent *)v309.__r_.__value_.__r.__words[0];
  else
    v19 = this;
  (*(void (**)(std::string *__return_ptr, AMSCore::UserAgent *))(*(_QWORD *)v19 + 16))(&__p, v19);
  v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = __p.__r_.__value_.__l.__size_;
  switch(v20)
  {
    case '1':
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &__p;
      v22 = v21->__r_.__value_.__r.__words[0];
      v23 = v21->__r_.__value_.__l.__size_;
      v24 = v21->__r_.__value_.__r.__words[2];
      data = v21[1].__r_.__value_.__l.__data_;
      v26 = v21[1].__r_.__value_.__l.__size_;
      v27 = v21[1].__r_.__value_.__r.__words[2];
      v28 = v21[2].__r_.__value_.__s.__data_[0];
      if (v22 != 0x6C7070612E6D6F63
        || v23 != 0x4D656C7070412E65
        || v24 != 0x7672655361696465
        || data != (std::string::pointer)0x65726F4373656369
        || v26 != 0x41616964654D492ELL
        || v27 != 0x742E746E756F6363
        || v28 != 118)
      {
        goto LABEL_142;
      }
      break;
    case '4':
      v49 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v49->__r_.__value_.__r.__words[0] != 0x6C7070612E6D6F63
        || v49->__r_.__value_.__l.__size_ != 0x4D656C7070412E65
        || v49->__r_.__value_.__r.__words[2] != 0x7672655361696465
        || v49[1].__r_.__value_.__r.__words[0] != 0x65726F4373656369
        || v49[1].__r_.__value_.__l.__size_ != 0x41616964654D492ELL
        || v49[1].__r_.__value_.__r.__words[2] != 0x6D2E746E756F6363
        || LODWORD(v49[2].__r_.__value_.__l.__data_) != 1667855221)
      {
        v56 = v49->__r_.__value_.__r.__words[0];
        v57 = v49->__r_.__value_.__l.__size_;
        v58 = v49->__r_.__value_.__r.__words[2];
        v59 = v49[1].__r_.__value_.__l.__data_;
        v60 = v49[1].__r_.__value_.__l.__size_;
        v61 = v49[1].__r_.__value_.__r.__words[2];
        v62 = (int)v49[2].__r_.__value_.__l.__data_;
        if (v56 == 0x6C7070612E6D6F63
          && v57 == 0x4D656C7070412E65
          && v58 == 0x7672655361696465
          && v59 == (std::string::pointer)0x65726F4373656369
          && v60 == 0x41616964654D492ELL
          && v61 == 0x622E746E756F6363
          && v62 == 1936420719)
        {
          v69 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"iBooks/", 7);
          (*(void (**)(void **__return_ptr, AMSCore::UserAgent *))(*(_QWORD *)v19 + 72))(&v290, v19);
          if ((v292 & 0x80u) == 0)
            v70 = &v290;
          else
            v70 = v290;
          if ((v292 & 0x80u) == 0)
            v71 = v292;
          else
            v71 = v291;
          goto LABEL_335;
        }
        goto LABEL_142;
      }
      break;
    case '7':
      v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &__p;
      v36 = v35->__r_.__value_.__r.__words[0];
      v37 = v35->__r_.__value_.__l.__size_;
      v38 = v35->__r_.__value_.__r.__words[2];
      v39 = v35[1].__r_.__value_.__l.__data_;
      v40 = v35[1].__r_.__value_.__l.__size_;
      v41 = v35[1].__r_.__value_.__r.__words[2];
      v42 = *(std::string::size_type *)((char *)&v35[1].__r_.__value_.__r.__words[2] + 7);
      if (v36 != 0x6C7070612E6D6F63
        || v37 != 0x4D656C7070412E65
        || v38 != 0x7672655361696465
        || v39 != (std::string::pointer)0x65726F4373656369
        || v40 != 0x41616964654D492ELL
        || v41 != 0x702E746E756F6363
        || v42 != 0x7374736163646F70)
      {
        goto LABEL_142;
      }
      break;
    case ';':
      v72 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = &__p;
      v73 = v72->__r_.__value_.__r.__words[0];
      v74 = v72->__r_.__value_.__l.__size_;
      v75 = v72->__r_.__value_.__r.__words[2];
      v76 = v72[1].__r_.__value_.__l.__data_;
      v77 = v72[1].__r_.__value_.__l.__size_;
      v78 = v72[1].__r_.__value_.__r.__words[2];
      v79 = v72[2].__r_.__value_.__l.__data_;
      v80 = *(std::string::size_type *)((char *)v72[2].__r_.__value_.__r.__words + 3);
      if (v73 != 0x6C7070612E6D6F63
        || v74 != 0x4D656C7070412E65
        || v75 != 0x7672655361696465
        || v76 != (std::string::pointer)0x65726F4373656369
        || v77 != 0x41616964654D492ELL
        || v78 != 0x632E746E756F6363
        || v79 != (std::string::pointer)0x6172756769666E6FLL
        || v80 != 0x726F746172756769)
      {
        goto LABEL_142;
      }
      v69 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"Configurator/", 13);
      (*(void (**)(void **__return_ptr, AMSCore::UserAgent *))(*(_QWORD *)v19 + 72))(&v290, v19);
      if ((v292 & 0x80u) == 0)
        v70 = &v290;
      else
        v70 = v290;
      if ((v292 & 0x80u) == 0)
        v71 = v292;
      else
        v71 = v291;
LABEL_335:
      v169 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
      LOBYTE(v297) = 32;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v169, (uint64_t)&v297, 1);
      if ((char)v292 < 0)
        operator delete(v290);
      break;
    default:
LABEL_142:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"MacAppStore/3.0 ", 16);
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v88 = (std::__shared_weak_count *)v309.__r_.__value_.__l.__size_;
  if (v309.__r_.__value_.__l.__size_)
  {
    v89 = (unint64_t *)(v309.__r_.__value_.__l.__size_ + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_150:
  (*(void (**)(std::string *__return_ptr, AMSCore::UserAgent *))(*(_QWORD *)this + 48))(&__p, this);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = &__p;
  else
    v91 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v92 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v92 = __p.__r_.__value_.__l.__size_;
  v93 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)v91, v92);
  LOBYTE(v290) = 47;
  v94 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v93, (uint64_t)&v290, 1);
  (*(void (**)(void **__return_ptr, AMSCore::UserAgent *))(*(_QWORD *)this + 72))(&v290, this);
  if ((v292 & 0x80u) == 0)
    v95 = &v290;
  else
    v95 = v290;
  if ((v292 & 0x80u) == 0)
    v96 = v292;
  else
    v96 = v291;
  v97 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
  v309.__r_.__value_.__s.__data_[0] = 32;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v97, (uint64_t)&v309, 1);
  if ((char)v292 < 0)
  {
    operator delete(v290);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_164;
LABEL_215:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_164;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_215;
LABEL_164:
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v297);
  v98 = v297;
  ((void (*)(void **__return_ptr, std::__shared_weak_count *))v297->__vftable[2].~__shared_weak_count)(&v290, v297);
  LODWORD(v99) = (char)v292;
  if ((v292 & 0x80u) == 0)
    v100 = v292;
  else
    v100 = v291;
  if (v100 != 65
    || ((v292 & 0x80u) == 0 ? (v101 = &v290) : (v101 = v290),
        memcmp(v101, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL)))
  {
    if (!AMSCore::IDeviceInfo::isAppleEmbeddedPlatform((uint64_t *)&v290))
    {
      if (v100 == 67)
      {
        if ((int)v99 >= 0)
          v123 = &v290;
        else
          v123 = v290;
        if (memcmp(v123, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.windows.arm64", 0x43uLL))
          goto LABEL_344;
      }
      else
      {
        if (v100 != 65)
          goto LABEL_344;
        v122 = (int)v99 >= 0 ? &v290 : (void **)v290;
        if (memcmp(v122, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.windows.x64", 0x41uLL))
          goto LABEL_344;
      }
      v124 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"(Windows ", 9);
      ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v98->__vftable[2].~__shared_weak_count_0)(&__p, v98);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v125 = &__p;
      else
        v125 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v126 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v126 = __p.__r_.__value_.__l.__size_;
      v127 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v124, (uint64_t)v125, v126);
      v309.__r_.__value_.__s.__data_[0] = 46;
      v100 = (uint64_t)std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v127, (uint64_t)&v309, 1);
      v99 = (std::__shared_weak_count *)&v309;
      ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v98->__on_zero_shared)(&v309, v98);
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = &v309;
      else
        v128 = (std::string *)v309.__r_.__value_.__r.__words[0];
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
      else
        v129 = v309.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)v100, (uint64_t)v128, v129);
      if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v309.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v98->__vftable[1].~__shared_weak_count)(&__p, v98);
      if (v303)
      {
        v309.__r_.__value_.__s.__data_[0] = 32;
        v130 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)&v309, 1);
        if (!v303)
          goto LABEL_632;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v131 = &__p;
        else
          v131 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v132 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v132 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v130, (uint64_t)v131, v132);
        if (v303 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v133 = v292;
      if ((v292 & 0x80u) != 0)
        v133 = v291;
      if (v133 == 65)
      {
        if ((v292 & 0x80u) == 0)
          v170 = &v290;
        else
          v170 = v290;
        if (memcmp(v170, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.windows.x64", 0x41uLL))
          goto LABEL_343;
        v135 = "; x64";
        v136 = 5;
      }
      else
      {
        if (v133 != 67)
          goto LABEL_343;
        v134 = (v292 & 0x80u) == 0 ? &v290 : (void **)v290;
        if (memcmp(v134, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.windows.arm64", 0x43uLL))
          goto LABEL_343;
        v135 = "; arm64";
        v136 = 7;
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)v135, v136);
LABEL_343:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)") ", 2);
      goto LABEL_344;
    }
  }
  ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v98->__vftable[2].~__shared_weak_count_0)(&v309, v98);
  v102 = v292;
  if ((v292 & 0x80u) != 0)
    v102 = v291;
  switch(v102)
  {
    case '?':
      v103 = (uint64_t *)&v290;
      if ((v292 & 0x80u) != 0)
        v103 = (uint64_t *)v290;
      v104 = *v103;
      v105 = v103[1];
      v106 = v103[2];
      v107 = v103[3];
      v108 = v103[4];
      v109 = v103[5];
      v110 = v103[6];
      v111 = *(uint64_t *)((char *)v103 + 55);
      if (v104 != 0x6C7070612E6D6F63
        || v105 != 0x4D656C7070412E65
        || v106 != 0x7672655361696465
        || v107 != 0x65726F4373656369
        || v108 != 0x656369766544492ELL
        || v109 != 0x616C702E6F666E49
        || v110 != 0x70612E6D726F6674
        || v111 != 0x736F692E656C7070)
      {
        goto LABEL_314;
      }
      v119 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"iOS/", 4);
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = &v309;
      else
        v120 = (std::string *)v309.__r_.__value_.__r.__words[0];
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v121 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
      else
        v121 = v309.__r_.__value_.__l.__size_;
      goto LABEL_320;
    case '@':
      v141 = (uint64_t *)&v290;
      if ((v292 & 0x80u) != 0)
        v141 = (uint64_t *)v290;
      v142 = *v141;
      v143 = v141[1];
      v144 = v141[2];
      v145 = v141[3];
      v146 = v141[4];
      v147 = v141[5];
      v148 = v141[6];
      v149 = v141[7];
      if (v142 != 0x6C7070612E6D6F63
        || v143 != 0x4D656C7070412E65
        || v144 != 0x7672655361696465
        || v145 != 0x65726F4373656369
        || v146 != 0x656369766544492ELL
        || v147 != 0x616C702E6F666E49
        || v148 != 0x70612E6D726F6674
        || v149 != 0x736F76742E656C70)
      {
        goto LABEL_314;
      }
      v157 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"iOS/", 4);
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v158 = &v309;
      else
        v158 = (std::string *)v309.__r_.__value_.__r.__words[0];
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v159 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
      else
        v159 = v309.__r_.__value_.__l.__size_;
      v160 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v157, (uint64_t)v158, v159);
      __p.__r_.__value_.__s.__data_[0] = 32;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v160, (uint64_t)&__p, 1);
      ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v98->__vftable[1].~__shared_weak_count_0)(&__p, v98);
      if (v303)
      {
        v161 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v162 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v161 = __p.__r_.__value_.__l.__size_;
        if (v161 < 7)
          goto LABEL_308;
        v163 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v163 = &__p;
        v164 = (int)v163->__r_.__value_.__l.__data_;
        v165 = *(_DWORD *)((char *)v163->__r_.__value_.__r.__words + 3);
        v166 = v164 == 1819308097 && v165 == 1448371564;
        if (!v166
          || ((v267 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"AppleTV/", 8), (v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)? (v268 = &v309): (v268 = (std::string *)v309.__r_.__value_.__r.__words[0]), (v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0? (v269 = HIBYTE(v309.__r_.__value_.__r.__words[2])): (v269 = v309.__r_.__value_.__l.__size_), v270 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v267, (uint64_t)v268, v269), LOBYTE(v285[0]) = 32, std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v270, (uint64_t)v285, 1), v162 = HIBYTE(__p.__r_.__value_.__r.__words[2]), v303))
        {
LABEL_308:
          if (v162 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_321;
    case 'A':
      if ((v292 & 0x80u) == 0)
        v137 = &v290;
      else
        v137 = v290;
      if (memcmp(v137, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL))
        goto LABEL_314;
      v138 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"(Macintosh; OS X ",
               17);
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v139 = &v309;
      else
        v139 = (std::string *)v309.__r_.__value_.__r.__words[0];
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v140 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
      else
        v140 = v309.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v138, (uint64_t)v139, v140);
      goto LABEL_321;
    case 'C':
      if ((v292 & 0x80u) == 0)
        v167 = &v290;
      else
        v167 = v290;
      if (memcmp(v167, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.watchos", 0x43uLL))
        goto LABEL_314;
      v119 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"watchOS/", 8);
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = &v309;
      else
        v120 = (std::string *)v309.__r_.__value_.__r.__words[0];
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v121 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
      else
        v121 = v309.__r_.__value_.__l.__size_;
      goto LABEL_320;
    default:
LABEL_314:
      v119 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"visionOS/", 9);
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = &v309;
      else
        v120 = (std::string *)v309.__r_.__value_.__r.__words[0];
      if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v121 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
      else
        v121 = v309.__r_.__value_.__l.__size_;
LABEL_320:
      v168 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v119, (uint64_t)v120, v121);
      __p.__r_.__value_.__s.__data_[0] = 32;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v168, (uint64_t)&__p, 1);
LABEL_321:
      if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v309.__r_.__value_.__l.__data_);
      break;
  }
LABEL_344:
  if ((char)v292 < 0)
    operator delete(v290);
  v171 = v298;
  if (v298)
  {
    v172 = (unint64_t *)&v298->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v297);
  v98 = v297;
  ((void (*)(void **__return_ptr, std::__shared_weak_count *))v297->__vftable[2].~__shared_weak_count)(&v290, v297);
  if (AMSCore::IDeviceInfo::isAppleEmbeddedPlatform((uint64_t *)&v290))
  {
    ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v98->__vftable[1].~__shared_weak_count_0)(&__p, v98);
    if (v303)
    {
      v174 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"model/", 6);
      if (!v303)
        goto LABEL_632;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v175 = &__p;
      else
        v175 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v176 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v176 = __p.__r_.__value_.__l.__size_;
      v177 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v174, (uint64_t)v175, v176);
      v309.__r_.__value_.__s.__data_[0] = 32;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v177, (uint64_t)&v309, 1);
    }
    else
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v309);
      AMSCore::Logger::log<char [25]>((uint64_t)v309.__r_.__value_.__l.__data_, 3, (uint64_t)"networking", 10, "Missing a hardware type.");
      v98 = (std::__shared_weak_count *)v309.__r_.__value_.__l.__size_;
      if (v309.__r_.__value_.__l.__size_)
      {
        v191 = (unint64_t *)(v309.__r_.__value_.__l.__size_ + 8);
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
    }
    if (v303 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ((void (*)(std::string *__return_ptr))v297->__vftable[1].~__shared_weak_count)(&__p);
    if (v303)
    {
      v178 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"hwp/", 4);
      if (!v303)
        goto LABEL_632;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v179 = &__p;
      else
        v179 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v180 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v180 = __p.__r_.__value_.__l.__size_;
      v181 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v178, (uint64_t)v179, v180);
      v309.__r_.__value_.__s.__data_[0] = 32;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v181, (uint64_t)&v309, 1);
    }
    else
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v309);
      AMSCore::Logger::log<char [29]>((uint64_t)v309.__r_.__value_.__l.__data_, 3, (uint64_t)"networking", 10, "Missing a hardware platform.");
      v209 = (std::__shared_weak_count *)v309.__r_.__value_.__l.__size_;
      if (v309.__r_.__value_.__l.__size_)
      {
        v210 = (unint64_t *)(v309.__r_.__value_.__l.__size_ + 8);
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
    }
    if (v303 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v292 < 0)
    operator delete(v290);
  v182 = v298;
  if (v298)
  {
    v183 = (unint64_t *)&v298->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v309);
  v185 = v309.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v309.__r_.__value_.__l.__data_
                                                                            + 80))(&__p, v309.__r_.__value_.__r.__words[0]);
  v186 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v186 = __p.__r_.__value_.__l.__size_;
  if (v186 == 65
    && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v187 = &__p)
      : (v187 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        !memcmp(v187, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL)))
  {
    v100 = (uint64_t)std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"; ", 2);
    (*(void (**)(void **__return_ptr, std::string::size_type))(*(_QWORD *)v185 + 16))(&v290, v185);
    if ((v292 & 0x80u) == 0)
      v193 = &v290;
    else
      v193 = v290;
    if ((v292 & 0x80u) == 0)
      v194 = v292;
    else
      v194 = v291;
    v195 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)v100, (uint64_t)v193, v194);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v195, (uint64_t)") ", 2);
  }
  else
  {
    if (!AMSCore::IDeviceInfo::isAppleEmbeddedPlatform((uint64_t *)&__p))
      goto LABEL_411;
    v100 = (uint64_t)std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"build/", 6);
    (*(void (**)(void **__return_ptr, std::string::size_type))(*(_QWORD *)v185 + 16))(&v290, v185);
    if ((v292 & 0x80u) == 0)
      v188 = &v290;
    else
      v188 = v290;
    if ((v292 & 0x80u) == 0)
      v189 = v292;
    else
      v189 = v291;
    v190 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)v100, (uint64_t)v188, v189);
    LOBYTE(v297) = 32;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v190, (uint64_t)&v297, 1);
  }
  if ((char)v292 < 0)
  {
    operator delete(v290);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_413;
    goto LABEL_412;
  }
LABEL_411:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_412:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_413:
  v196 = (std::__shared_weak_count *)v309.__r_.__value_.__l.__size_;
  if (v309.__r_.__value_.__l.__size_)
  {
    v197 = (unint64_t *)(v309.__r_.__value_.__l.__size_ + 8);
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v309);
  v98 = (std::__shared_weak_count *)v309.__r_.__value_.__r.__words[0];
  (*(void (**)(void **__return_ptr, std::string::size_type))(*(_QWORD *)v309.__r_.__value_.__l.__data_ + 80))(&v290, v309.__r_.__value_.__r.__words[0]);
  v199 = v292;
  LOBYTE(v99) = v292;
  if ((v292 & 0x80u) != 0)
    v199 = v291;
  if (v199 == 65
    && ((v292 & 0x80u) == 0 ? (v200 = &v290) : (v200 = v290),
        !memcmp(v200, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL)))
  {
    ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v98->__vftable[2].__on_zero_shared)(&__p, v98);
    if (v303)
    {
      v212 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"AppleWebKit/", 12);
      if (!v303)
        goto LABEL_632;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v213 = &__p;
      else
        v213 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v214 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v214 = __p.__r_.__value_.__l.__size_;
      v215 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v212, (uint64_t)v213, v214);
      LOBYTE(v297) = 32;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v215, (uint64_t)&v297, 1);
      if (v303 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v292 & 0x80) != 0)
      goto LABEL_426;
  }
  else if ((v99 & 0x80) != 0)
  {
LABEL_426:
    operator delete(v290);
  }
  v201 = (std::__shared_weak_count *)v309.__r_.__value_.__l.__size_;
  if (v309.__r_.__value_.__l.__size_)
  {
    v202 = (unint64_t *)(v309.__r_.__value_.__l.__size_ + 8);
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v274 = a2;
  a2 = (std::string *)v296;
  p_shared_weak_owners = &v5[2].__shared_weak_owners_;
  v100 = (uint64_t)&v291;
  v296[0] = (char *)v5 + 64;
  v290 = (void *)v10;
  *(void **)((char *)&v290 + *(_QWORD *)(v10 - 24)) = v275;
  v205 = v5;
  v206 = (std::ios_base *)((char *)&v290 + *((_QWORD *)v290 - 3));
  std::ios_base::init(v206, &v291);
  v98 = (std::__shared_weak_count *)v280;
  v273 = &v284;
  v206[1].__vftable = 0;
  v206[1].__fmtflags_ = -1;
  v290 = &v205[1];
  v296[0] = p_shared_weak_owners;
  std::streambuf::basic_streambuf();
  v291 = MEMORY[0x1E0DE4FB8] + 16;
  v293 = 0u;
  v294 = 0u;
  v295 = 16;
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v288);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v288 + 48))(v285);
  if (!v287)
    goto LABEL_436;
  v207 = v286;
  if ((v286 & 0x80u) != 0)
    v207 = (unint64_t)v285[1];
  if (v207 < 4)
    goto LABEL_436;
  v208 = v285;
  if ((v286 & 0x80u) != 0)
    v208 = (void **)v285[0];
  if (*(_DWORD *)v208 == 1684099177)
  {
    v216 = 53;
LABEL_493:
    __p.__r_.__value_.__s.__data_[0] = v216;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v290, (uint64_t)&__p, 1);
    LOBYTE(v99) = 0;
    goto LABEL_494;
  }
  if (v207 >= 6)
  {
    if (*(_DWORD *)v208 == 1869107305 && *((_WORD *)v208 + 2) == 25966)
      goto LABEL_490;
  }
  else if (v207 != 5)
  {
    if (*(_DWORD *)v208 == 1685016681)
      goto LABEL_491;
    goto LABEL_436;
  }
  if (*(_DWORD *)v208 == 1668571479 && *((_BYTE *)v208 + 4) == 104)
  {
LABEL_490:
    v216 = 54;
    goto LABEL_493;
  }
  if (*(_DWORD *)v208 == 1685016681)
  {
LABEL_491:
    v216 = 52;
    goto LABEL_493;
  }
  if (v207 >= 7
    && (*(_DWORD *)v208 == 1819308097 ? (v219 = *(_DWORD *)((char *)v208 + 3) == 1448371564) : (v219 = 0), v219)
    || (*(_DWORD *)v208 == 1869762665 ? (v220 = *((_BYTE *)v208 + 4) == 100) : (v220 = 0), v220))
  {
    v216 = 51;
    goto LABEL_493;
  }
  if (v207 >= 0xD)
  {
    v221 = *v208;
    v222 = *(uint64_t *)((char *)v208 + 5);
    if (v221 == (void *)0x447974696C616552 && v222 == 0x6563697665447974)
    {
      v216 = 55;
      goto LABEL_493;
    }
  }
LABEL_436:
  LOBYTE(v99) = 1;
LABEL_494:
  v224 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
  if ((v224 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
    qword_1ECEABEC8 = 0;
    qword_1ECEABED0 = 0;
    byte_1ECEABED8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
  if (!byte_1ECEABED8)
    std::terminate();
  v225 = qword_1ECEABEC8;
  v5 = (std::__shared_weak_count *)qword_1ECEABED0;
  if (qword_1ECEABED0)
  {
    v226 = (unint64_t *)(qword_1ECEABED0 + 8);
    do
      v227 = __ldxr(v226);
    while (__stxr(v227 + 1, v226));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
  if (v225)
  {
    (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(_QWORD *)v225 + 24))(&v297, v225);
    if (!v299)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v300);
      v7 = (_QWORD *)v300;
      if (*(int *)(v300 + 8) <= 4)
      {
        v271 = &v308;
        v272 = (std::string *)v296;
        v308 = &v205[2].__shared_weak_owners_;
        __p.__r_.__value_.__r.__words[0] = v10;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v10 - 24)) = (std::string::size_type)v275;
        v230 = (std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24));
        std::ios_base::init(v230, &__p.__r_.__value_.__r.__words[1]);
        v230[1].__vftable = 0;
        v230[1].__fmtflags_ = -1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205[1];
        v308 = &v205[2].__shared_weak_owners_;
        std::streambuf::basic_streambuf();
        __p.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
        v305 = 0u;
        v306 = 0u;
        v307 = 16;
        v8 = *(void **)(__p.__r_.__value_.__r.__words[0] - 24);
        v10 = (std::string::size_type)&unk_1EE059000;
        a2 = v272;
        if ((v231 & 1) == 0)
          goto LABEL_633;
        goto LABEL_509;
      }
      goto LABEL_515;
    }
    LODWORD(v225) = (_DWORD)v297;
  }
  if (v5)
  {
LABEL_503:
    v228 = (unint64_t *)&v5->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    goto LABEL_524;
  }
  while (1)
  {
LABEL_524:
    if ((_DWORD)v225)
    {
      if ((v99 & 1) == 0)
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v290, (uint64_t)"; ", 2);
      v237 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v290, (uint64_t)"dt:", 3);
      std::to_string(&__p, v225);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v238 = &__p;
      else
        v238 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v239 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v239 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v237, (uint64_t)v238, v239);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str[abi:fe180100](v100, &__p);
    v240 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v241 = __p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
      {
        v7 = &v98->__vftable;
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_558:
        v276[0] = 0;
        v278 = 0;
        if (!v287)
          goto LABEL_561;
LABEL_559:
        if ((char)v286 < 0)
          operator delete(v285[0]);
        goto LABEL_561;
      }
    }
    else
    {
      v7 = &v98->__vftable;
      if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        goto LABEL_558;
      v241 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v242 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v242 = v241;
    v243 = v242 + 1;
    if (v242 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:fe180100]();
    if (v243 >= 0x17)
    {
      v245 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v243 | 7) != 0x17)
        v245 = v243 | 7;
      v246 = v245 + 1;
      v247 = operator new(v245 + 1);
      v309.__r_.__value_.__l.__size_ = v242 + 1;
      v309.__r_.__value_.__r.__words[2] = v246 | 0x8000000000000000;
      v309.__r_.__value_.__r.__words[0] = (std::string::size_type)v247;
      *v247 = 40;
      v244 = v247 + 1;
    }
    else
    {
      v309.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v309.__r_.__value_.__l.__data_ = 0x28uLL;
      *((_BYTE *)&v309.__r_.__value_.__s + 23) = v242 + 1;
      v244 = &v309.__r_.__value_.__s.__data_[1];
      if (!v242)
        goto LABEL_553;
    }
    v248 = v240 >= 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v244, v248, v242);
LABEL_553:
    v244[v242] = 0;
    std::string::push_back(&v309, 41);
    *(_OWORD *)v276 = *(_OWORD *)&v309.__r_.__value_.__l.__data_;
    *(_QWORD *)&v276[15] = *(std::string::size_type *)((char *)&v309.__r_.__value_.__r.__words[1] + 7);
    v277 = HIBYTE(v309.__r_.__value_.__r.__words[2]);
    v278 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = &v98->__vftable;
    if (v287)
      goto LABEL_559;
LABEL_561:
    v249 = v289;
    if (v289)
    {
      v250 = (unint64_t *)&v289->__shared_owners_;
      do
        v251 = __ldaxr(v250);
      while (__stlxr(v251 - 1, v250));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
        std::__shared_weak_count::__release_weak(v249);
      }
    }
    v5 = (std::__shared_weak_count *)MEMORY[0x1E0DE4F60];
    v99 = (std::__shared_weak_count *)*MEMORY[0x1E0DE4F60];
    v290 = v99;
    v8 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    *(void **)((char *)&v290 + (unint64_t)v99[-1].__vftable) = v8;
    v291 = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v294) < 0)
      operator delete((void *)v293);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](a2);
    AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v290);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v290 + 80))(&__p);
    v252 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v253 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v252 = __p.__r_.__value_.__l.__size_;
    if (v252 == 65)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v254 = &__p;
      else
        v254 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v100 = memcmp(v254, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL) == 0;
      if ((v253 & 0x80000000) == 0)
      {
LABEL_577:
        v98 = (std::__shared_weak_count *)v291;
        if (!v291)
          goto LABEL_583;
        goto LABEL_580;
      }
    }
    else
    {
      v100 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_577;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v98 = (std::__shared_weak_count *)v291;
    if (!v291)
      goto LABEL_583;
LABEL_580:
    v255 = (unint64_t *)&v98->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (v256)
    {
LABEL_583:
      if (!(_DWORD)v100)
        goto LABEL_594;
      goto LABEL_584;
    }
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    if (!(_DWORD)v100)
    {
LABEL_594:
      if (v278)
      {
        if ((v277 & 0x80u) == 0)
          v260 = v276;
        else
          v260 = *(_BYTE **)v276;
        if ((v277 & 0x80u) == 0)
          v261 = v277;
        else
          v261 = *(_QWORD *)&v276[8];
        v262 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)v260, v261);
        __p.__r_.__value_.__s.__data_[0] = 32;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v262, (uint64_t)&__p, 1);
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"AMS/1", 5);
      goto LABEL_603;
    }
LABEL_584:
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)"AMS/1", 5);
    if (v278)
    {
      __p.__r_.__value_.__s.__data_[0] = 32;
      v257 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)&__p, 1);
      if (!v278)
        goto LABEL_632;
      if ((v277 & 0x80u) == 0)
        v258 = v276;
      else
        v258 = *(_BYTE **)v276;
      if ((v277 & 0x80u) == 0)
        v259 = v277;
      else
        v259 = *(_QWORD *)&v276[8];
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v257, (uint64_t)v258, v259);
    }
LABEL_603:
    (*(void (**)(std::string *__return_ptr, AMSCore::UserAgent *))(*(_QWORD *)this + 64))(&__p, this);
    if (!v303)
      goto LABEL_614;
    LOBYTE(v290) = 32;
    v263 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v279, (uint64_t)&v290, 1);
    if (v303)
      break;
LABEL_632:
    __break(1u);
LABEL_633:
    {
      *(_DWORD *)(v10 + 1744) = std::ios_base::xalloc();
      a2 = v272;
    }
LABEL_509:
    *std::ios_base::iword((std::ios_base *)((char *)&__p + (_QWORD)v8), *(_DWORD *)(v10 + 1744)) = 1;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to determine FairPlay device type: ", 42);
    AMSCore::operator<<(&__p, (uint64_t)&v297);
    v232 = v304;
    v233 = (char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24);
    if ((v233[32] & 5) != 0)
    {
      v10 = -1;
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v233 + 5)
                                                                                          + 32))(&v309, *((_QWORD *)v233 + 5), 0, 1, 16);
      v10 = v311;
    }
    v309.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v309.__r_.__value_.__r.__words[1]) = 4;
    v309.__r_.__value_.__r.__words[2] = v232;
    v310 = v10;
    (*(void (**)(_QWORD, const char *, uint64_t, std::string *))(*(_QWORD *)v7[2] + 16))(v7[2], "networking", 10, &v309);
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                + 24);
    __p.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v306) < 0)
      operator delete((void *)v305);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v271);
LABEL_515:
    v234 = v301;
    if (v301)
    {
      v235 = (unint64_t *)&v301->__shared_owners_;
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
      }
    }
    if (v299)
    {
      LODWORD(v225) = 0;
      if (v5)
        goto LABEL_503;
    }
    else
    {
      ((void (*)(std::__shared_weak_count **))v297->__vftable)(&v297);
      LODWORD(v225) = 0;
      if (v5)
        goto LABEL_503;
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v264 = &__p;
  else
    v264 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v265 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v265 = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v263, (uint64_t)v264, v265);
  if (v303 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_614:
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, v274);
  if (v278 && (char)v277 < 0)
    operator delete(*(void **)v276);
  v279 = v99;
  *(_QWORD *)((char *)&v280[-1] + (unint64_t)v99[-1].__vftable) = v8;
  v280[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v282) < 0)
    operator delete(v281[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v273);
}

void sub_18CD1BE94(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::getValueByKey(uint64_t a1, uint64_t *a2, void *__s1, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  size_t v27;
  const void *v28;
  uint64_t *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  int v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  std::system_error_vtbl *v40;
  uint64_t v41;
  uint64_t v42;
  std::system_error_vtbl *v43;
  std::system_error_vtbl *v44;
  std::ios_base *v45;
  uint64_t v46;
  unsigned int *v47;
  std::runtime_error *v48;
  uint64_t v49;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v51;
  char *v52;
  std::runtime_error *v53;
  char *v54;
  std::runtime_error v55;
  std::error_code ec;
  std::runtime_error_vtbl *v57;
  uint64_t v58;
  std::runtime_error_vtbl *v59;
  __int128 v60;
  char *v61;
  char *v62;
  std::string __what_arg;
  std::system_error v64;
  std::runtime_error_vtbl *v65;
  uint64_t v66;
  std::runtime_error_vtbl *v67;
  __int128 v68;
  __int128 __p;
  __int128 v70;
  int v71;
  uint64_t v72[20];
  std::error_code v73;

  v6 = a2;
  v8 = a2 + 1;
  v9 = (uint64_t *)a2[1];
  if (!v9)
    goto LABEL_32;
  v10 = a2 + 1;
  do
  {
    while (1)
    {
      v11 = *((char *)v9 + 55);
      v12 = v11 >= 0 ? v9 + 4 : (uint64_t *)v9[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v9 + 55) : v9[5];
      v14 = v13 >= a4 ? a4 : v13;
      v15 = memcmp(__s1, v12, v14);
      if (v15)
        break;
      if (a4 <= v13)
        goto LABEL_17;
LABEL_3:
      v9 = (uint64_t *)v9[1];
      if (!v9)
        goto LABEL_18;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v10 = v9;
    v9 = (uint64_t *)*v9;
  }
  while (v9);
LABEL_18:
  if (v10 != v8)
  {
    v16 = *((char *)v10 + 55);
    if (v16 >= 0)
      v17 = v10 + 4;
    else
      v17 = (const void *)v10[4];
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)v10 + 55);
    else
      v18 = v10[5];
    if (v18 >= a4)
      v19 = a4;
    else
      v19 = v18;
    v20 = memcmp(__s1, v17, v19);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0)
      {
LABEL_30:
        *(_QWORD *)a1 = v10 + 7;
        *(_BYTE *)(a1 + 72) = 1;
        return;
      }
    }
    else if (a4 >= v18)
    {
      goto LABEL_30;
    }
  }
LABEL_32:
  v53 = (std::runtime_error *)a1;
  AMSCore::StringUtils::split(&v61, (uint64_t)__s1, a4, "/", 1, 0xFFFFFFFFFFFFFFFFLL);
  v54 = v61;
  if (v61 == v62)
    goto LABEL_70;
  v21 = 0;
  v22 = (v62 - v61) >> 4;
  while (2)
  {
    v25 = (uint64_t *)v6[1];
    v23 = v6 + 1;
    v24 = v25;
    if (!v25)
      break;
    v26 = &v54[16 * v21];
    v28 = *(const void **)v26;
    v27 = *((_QWORD *)v26 + 1);
    v29 = v23;
    while (2)
    {
      while (2)
      {
        v30 = *((char *)v24 + 55);
        if (v30 >= 0)
          v31 = v24 + 4;
        else
          v31 = (const void *)v24[4];
        if (v30 >= 0)
          v32 = *((unsigned __int8 *)v24 + 55);
        else
          v32 = v24[5];
        if (v32 >= v27)
          v33 = v27;
        else
          v33 = v32;
        v34 = memcmp(v28, v31, v33);
        if (v34)
        {
          if ((v34 & 0x80000000) == 0)
            break;
          goto LABEL_36;
        }
        if (v27 <= v32)
        {
LABEL_36:
          v29 = v24;
          v24 = (uint64_t *)*v24;
          if (!v24)
            goto LABEL_53;
          continue;
        }
        break;
      }
      v24 = (uint64_t *)v24[1];
      if (v24)
        continue;
      break;
    }
LABEL_53:
    if (v29 == v23)
      break;
    v35 = *((char *)v29 + 55);
    if (v35 >= 0)
      v36 = v29 + 4;
    else
      v36 = (const void *)v29[4];
    if (v35 >= 0)
      v37 = *((unsigned __int8 *)v29 + 55);
    else
      v37 = v29[5];
    if (v37 >= v27)
      v38 = v27;
    else
      v38 = v37;
    v39 = memcmp(v28, v36, v38);
    if (v39)
    {
      if (v39 < 0)
        break;
    }
    else if (v27 < v37)
    {
      break;
    }
    if (v21 == v22 - 1)
    {
      v53->__vftable = (std::runtime_error_vtbl *)(v29 + 7);
      LOBYTE(v53[4].__imp_.__imp_) = 1;
      v52 = v54;
      if (v54)
        goto LABEL_81;
      return;
    }
    if (*((_DWORD *)v29 + 20) == 8)
    {
      v6 = v29 + 7;
      if (++v21 < v22)
        continue;
    }
    break;
  }
LABEL_70:
  v40 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v41 = MEMORY[0x1E0DE4FE0] + 64;
  v42 = MEMORY[0x1E0DE4F60];
  v43 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v44 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v72[0] = MEMORY[0x1E0DE4FE0] + 64;
  v64.__vftable = v43;
  *(std::system_error_vtbl **)((char *)&v64.__vftable + (unint64_t)v43[-1].~system_error) = v44;
  v45 = (std::ios_base *)((char *)&v64 + (unint64_t)v64.__vftable[-1].~system_error);
  std::ios_base::init(v45, &v64.__imp_);
  v45[1].__vftable = 0;
  v45[1].__fmtflags_ = -1;
  v64.__vftable = v40 + 1;
  v72[0] = v41;
  std::streambuf::basic_streambuf();
  v46 = MEMORY[0x1E0DE4FB8];
  v64.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  __p = 0u;
  v70 = 0u;
  v71 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v64, (uint64_t)"Unable to find value from key path \"", 36);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v64, (uint64_t)__s1, a4);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v64, (uint64_t)"\"", 1);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v64.__imp_, &__what_arg);
  v64.__vftable = *(std::system_error_vtbl **)v42;
  *(std::system_error_vtbl **)((char *)&v64.__vftable + (unint64_t)v64.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v42 + 24);
  v64.__imp_.__imp_ = (const char *)(v46 + 16);
  if (SBYTE7(v70) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v72);
  v73.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v73.__val_ = 12;
  std::system_error::system_error(&v64, v73, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v66 = 0;
  v67 = 0;
  v64.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v65 = (std::runtime_error_vtbl *)&v66;
  v68 = 0uLL;
  std::runtime_error::runtime_error(&v55, &v64);
  ec = v64.__ec_;
  v55.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v47 = (unsigned int *)v66;
  v57 = v65;
  v58 = v66;
  v59 = v67;
  if (v67)
  {
    *(_QWORD *)(v66 + 16) = &v58;
    v47 = 0;
    v65 = (std::runtime_error_vtbl *)&v66;
    v66 = 0;
    v67 = 0;
  }
  else
  {
    v57 = (std::runtime_error_vtbl *)&v58;
  }
  v60 = v68;
  v68 = 0uLL;
  v64.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, v47);
  MEMORY[0x18D7898AC](&v64);
  v48 = std::runtime_error::runtime_error(v53, &v55);
  v48[1] = (std::runtime_error)ec;
  v48->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v49 = v58;
  v48[2].__vftable = v57;
  v48[2].__imp_.__imp_ = (const char *)v49;
  p_imp = (std::runtime_error_vtbl *)&v48[2].__imp_;
  v51 = v59;
  v48[3].__vftable = v59;
  if (v51)
  {
    *(_QWORD *)(v49 + 16) = p_imp;
    v49 = 0;
    v57 = (std::runtime_error_vtbl *)&v58;
    v58 = 0;
    v59 = 0;
  }
  else
  {
    v48[2].__vftable = p_imp;
  }
  v52 = v54;
  *(_OWORD *)&v48[3].__imp_.__imp_ = v60;
  v60 = 0uLL;
  LOBYTE(v48[4].__imp_.__imp_) = 0;
  v55.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v57, (unsigned int *)v49);
  MEMORY[0x18D7898AC](&v55);
  if (v54)
LABEL_81:
    operator delete(v52);
}

void sub_18CD1C53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if (a11)
      goto LABEL_3;
  }
  else if (a11)
  {
LABEL_3:
    operator delete(a11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_18CD1C578(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::getValueByKey(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::runtime_error v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::runtime_error v15[4];
  char v16;
  std::runtime_error v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  AMSCore::getValueByKey((uint64_t)v15, a2, a3, a4);
  if (v16)
  {
    *(_QWORD *)a1 = v15[0].__vftable;
    *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    AMSCore::Error::Error(&v17, v15);
    std::runtime_error::runtime_error(&v9, &v17);
    v10 = v18;
    v9.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v5 = (unsigned int *)v20;
    v11 = v19;
    v12 = v20;
    v13 = v21;
    if (v21)
    {
      *(_QWORD *)(v20 + 16) = &v12;
      v19 = &v20;
      v20 = 0;
      v21 = 0;
      v5 = 0;
    }
    else
    {
      v11 = &v12;
    }
    v14 = v22;
    v22 = 0uLL;
    v17.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, v5);
    MEMORY[0x18D7898AC](&v17);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)a1 = off_1E2521330;
    v6 = v12;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v6;
    v7 = a1 + 40;
    v8 = v13;
    *(_QWORD *)(a1 + 48) = v13;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      v6 = 0;
      v11 = &v12;
      v12 = 0;
      v13 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v14;
    v14 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v9.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, (unsigned int *)v6);
    MEMORY[0x18D7898AC](&v9);
    if (!v16)
      ((void (*)(std::runtime_error *))v15[0].~runtime_error)(v15);
  }
}

void sub_18CD1C728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(_QWORD), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a27)
    (*a18)(&a18);
  _Unwind_Resume(exception_object);
}

void AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
    qword_1ECEABF88 = 0;
    qword_1ECEABF90 = 0;
    byte_1ECEABF98 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
  if (!byte_1ECEABF98)
    std::terminate();
  v3 = qword_1ECEABF90;
  *a1 = qword_1ECEABF88;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
}

void sub_18CD1C804(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IAnisetteProvider>::getDefault(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
    xmmword_1ECEAC288 = 0uLL;
    byte_1ECEAC298 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  if (!byte_1ECEAC298)
    std::terminate();
  v3 = *((_QWORD *)&xmmword_1ECEAC288 + 1);
  *a1 = xmmword_1ECEAC288;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
}

void sub_18CD1C8DC(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IAnisetteProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
    xmmword_1ECEAC288 = 0uLL;
    byte_1ECEAC298 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEAC288 + 1);
  xmmword_1ECEAC288 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEAC298 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
}

void sub_18CD1C9D0(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::ICancellationContextProvider>::getDefault(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
    qword_1ECEAB808 = 0;
    qword_1ECEAB810 = 0;
    byte_1ECEAB818 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
  if (!byte_1ECEAB818)
    std::terminate();
  v3 = qword_1ECEAB810;
  *a1 = qword_1ECEAB808;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
}

void sub_18CD1CAA8(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
    xmmword_1ECEABB08 = 0uLL;
    byte_1ECEABB18 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  if (!byte_1ECEABB18)
    std::terminate();
  v3 = *((_QWORD *)&xmmword_1ECEABB08 + 1);
  *a1 = xmmword_1ECEABB08;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
}

void sub_18CD1CB80(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IDataProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
    xmmword_1ECEABB08 = 0uLL;
    byte_1ECEABB18 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEABB08 + 1);
  xmmword_1ECEABB08 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEABB18 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
}

void sub_18CD1CC74(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
    xmmword_1ECEABA48 = 0uLL;
    byte_1ECEABA58 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  if (!byte_1ECEABA58)
    std::terminate();
  v3 = *((_QWORD *)&xmmword_1ECEABA48 + 1);
  *a1 = xmmword_1ECEABA48;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
}

void sub_18CD1CD4C(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
    xmmword_1ECEABA48 = 0uLL;
    byte_1ECEABA58 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEABA48 + 1);
  xmmword_1ECEABA48 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEABA58 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
}

void sub_18CD1CE40(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IKeybagProvider>::getDefault(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
    xmmword_1ECEABE08 = 0uLL;
    byte_1ECEABE18 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  if (!byte_1ECEABE18)
    std::terminate();
  v3 = *((_QWORD *)&xmmword_1ECEABE08 + 1);
  *a1 = xmmword_1ECEABE08;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
}

void sub_18CD1CF18(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IKeybagProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
    xmmword_1ECEABE08 = 0uLL;
    byte_1ECEABE18 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEABE08 + 1);
  xmmword_1ECEABE08 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEABE18 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
}

void sub_18CD1D00C(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IHTTPProvider>::getDefaultOrNull(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
    xmmword_1ECEABBC8 = 0uLL;
    byte_1ECEABBD8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  v3 = *((_QWORD *)&xmmword_1ECEABBC8 + 1);
  *a1 = xmmword_1ECEABBC8;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
}

void sub_18CD1D0D4(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IHTTPProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
    xmmword_1ECEABBC8 = 0uLL;
    byte_1ECEABBD8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEABBC8 + 1);
  xmmword_1ECEABBC8 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEABBD8 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
}

void sub_18CD1D1C8(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IMetricsProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
    xmmword_1ECEAC048 = 0uLL;
    byte_1ECEAC058 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEAC048 + 1);
  xmmword_1ECEAC048 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEAC058 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
}

void sub_18CD1D2BC(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::MetricsIdentifierProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
    xmmword_1ECEAC648 = 0uLL;
    byte_1ECEAC658 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEAC648 + 1);
  xmmword_1ECEAC648 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEAC658 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
}

void sub_18CD1D3B0(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IMetricsSamplingProvider>::getDefault(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
    xmmword_1ECEAC588 = 0uLL;
    byte_1ECEAC598 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  if (!byte_1ECEAC598)
    std::terminate();
  v3 = *((_QWORD *)&xmmword_1ECEAC588 + 1);
  *a1 = xmmword_1ECEAC588;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
}

void sub_18CD1D488(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IMetricsSamplingProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
    xmmword_1ECEAC588 = 0uLL;
    byte_1ECEAC598 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEAC588 + 1);
  xmmword_1ECEAC588 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEAC598 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
}

void sub_18CD1D57C(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::INotificationCenter>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
    xmmword_1ECEAC408 = 0uLL;
    byte_1ECEAC418 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEAC408 + 1);
  xmmword_1ECEAC408 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEAC418 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
}

void sub_18CD1D670(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IOpenURLProvider>::getDefault(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
    xmmword_1ECEAC108 = 0uLL;
    byte_1ECEAC118 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  if (!byte_1ECEAC118)
    std::terminate();
  v3 = *((_QWORD *)&xmmword_1ECEAC108 + 1);
  *a1 = xmmword_1ECEAC108;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
}

void sub_18CD1D748(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IOpenURLProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
    xmmword_1ECEAC108 = 0uLL;
    byte_1ECEAC118 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEAC108 + 1);
  xmmword_1ECEAC108 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEAC118 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
}

void sub_18CD1D83C(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::IPrivacyProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
    xmmword_1ECEAC1C8 = 0uLL;
    byte_1ECEAC1D8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEAC1C8 + 1);
  xmmword_1ECEAC1C8 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEAC1D8 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
}

void sub_18CD1D930(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::ISchedulingProvider>::getDefault(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
    xmmword_1ECEAC4C8 = 0uLL;
    byte_1ECEAC4D8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  if (!byte_1ECEAC4D8)
    std::terminate();
  v3 = *((_QWORD *)&xmmword_1ECEAC4C8 + 1);
  *a1 = xmmword_1ECEAC4C8;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
}

void sub_18CD1DA08(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::ISchedulingProvider>::getDefaultOrNull(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
    xmmword_1ECEAC4C8 = 0uLL;
    byte_1ECEAC4D8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  v3 = *((_QWORD *)&xmmword_1ECEAC4C8 + 1);
  *a1 = xmmword_1ECEAC4C8;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
}

void sub_18CD1DAD0(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::ISchedulingProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
    xmmword_1ECEAC4C8 = 0uLL;
    byte_1ECEAC4D8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEAC4C8 + 1);
  xmmword_1ECEAC4C8 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEAC4D8 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
}

void sub_18CD1DBC4(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::StructuredData::IStructuredDataProvider>::getDefault(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
    xmmword_1ECEABD48 = 0uLL;
    byte_1ECEABD58 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  if (!byte_1ECEABD58)
    std::terminate();
  v3 = *((_QWORD *)&xmmword_1ECEABD48 + 1);
  *a1 = xmmword_1ECEABD48;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
}

void sub_18CD1DC9C(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::StructuredData::IStructuredDataProvider>::setDefault(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  if ((v2 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
    xmmword_1ECEABD48 = 0uLL;
    byte_1ECEABD58 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  v3 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ECEABD48 + 1);
  xmmword_1ECEABD48 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  byte_1ECEABD58 = 1;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
}

void sub_18CD1DD90(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
    qword_1ECEAC7C8 = 0;
    qword_1ECEAC7D0 = 0;
    byte_1ECEAC7D8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
  if (!byte_1ECEAC7D8)
    std::terminate();
  v3 = qword_1ECEAC7D0;
  *a1 = qword_1ECEAC7C8;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
}

void sub_18CD1DE68(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
  __clang_call_terminate(a1);
}

BOOL AMSCore::StringUtils::CaseInsensitiveEqualTo::operator()(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  const std::locale *v9;
  const std::locale::facet *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v9 = std::locale::classic();
  v10 = std::locale::use_facet(v9, MEMORY[0x1E0DE4A90]);
  if (a3 != a5)
    return 0;
  if (a3)
  {
    v11 = v10;
    v12 = a3 - 1;
    v13 = a2;
    v14 = a4;
    while (1)
    {
      v15 = v12;
      v16 = *v14;
      v17 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v11->__vftable[1].__on_zero_shared)(v11, *v13);
      if (v17 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v11->__vftable[1].__on_zero_shared)(v11, v16))break;
      ++v13;
      ++v14;
      v12 = v15 - 1;
      if (!v15)
        return v13 == &a2[a3] && v14 == &a4[a3];
    }
    return 0;
  }
  v14 = a4;
  v13 = a2;
  return v13 == &a2[a3] && v14 == &a4[a3];
}

uint64_t AMSCore::StringUtils::CaseInsensitiveHash::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  const std::locale *v5;
  const std::locale::facet *v6;
  const std::locale::facet *v7;
  uint64_t v8;

  v5 = std::locale::classic();
  v6 = std::locale::use_facet(v5, MEMORY[0x1E0DE4A90]);
  if (!a3)
    return 0;
  v7 = v6;
  v8 = 0;
  do
  {
    v8 ^= 2
        * ((int (*)(const std::locale::facet *, _QWORD))v7->__vftable[1].__on_zero_shared)(v7, *a2++);
    --a3;
  }
  while (a3);
  return v8;
}

const std::locale::facet *AMSCore::StringUtils::lowercase(uint64_t a1, char *a2, std::string::size_type a3)
{
  const std::locale *v6;
  const std::locale::facet *result;
  const std::locale::facet *v8;
  _BYTE *v9;

  v6 = std::locale::classic();
  result = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  if (a3)
  {
    v8 = result;
    std::string::append((std::string *)a1, a3, 0);
    if (*(char *)(a1 + 23) >= 0)
      v9 = (_BYTE *)a1;
    else
      v9 = *(_BYTE **)a1;
    do
    {
      result = (const std::locale::facet *)((uint64_t (*)(const std::locale::facet *, _QWORD))v8->__vftable[1].__on_zero_shared)(v8, *a2);
      *v9++ = (_BYTE)result;
      ++a2;
      --a3;
    }
    while (a3);
  }
  return result;
}

void sub_18CD1E088(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void AMSCore::StringUtils::split(char **a1, uint64_t a2, unint64_t a3, char *a4, int64_t a5, unint64_t a6)
{
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  int64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  BOOL v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;

  if (a3)
  {
    v9 = a2;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (a5 && a6)
    {
      v11 = 0;
      v12 = 0;
      v13 = (char *)(a2 + a3);
LABEL_5:
      v14 = *a1;
      v44 = (v11 - *a1) >> 4;
      if (v44 < a6)
      {
        v15 = &v12[v9];
        v16 = v13 - &v12[v9];
        if (v16 >= a5)
        {
          v17 = *a4;
          v18 = v15;
          do
          {
            v19 = v16 - a5;
            if (v19 == -1)
              break;
            v20 = (char *)memchr(v18, v17, v19 + 1);
            if (!v20)
              break;
            v21 = v20;
            if (!memcmp(v20, a4, a5))
            {
              if (v21 == v13)
                break;
              v22 = &v21[-a2];
              if (&v21[-a2] == (char *)-1)
                break;
              if (v22 == v12)
              {
                v23 = a3;
              }
              else
              {
                if (a3 - (unint64_t)v12 >= v22 - v12)
                  v24 = (char *)(v22 - v12);
                else
                  v24 = (char *)(a3 - (_QWORD)v12);
                v25 = (unint64_t)a1[2];
                if ((unint64_t)v11 >= v25)
                {
                  v27 = v44 + 1;
                  if ((v44 + 1) >> 60)
                    std::vector<std::string>::__throw_length_error[abi:fe180100]();
                  v28 = v25 - (_QWORD)v14;
                  if (v28 >> 3 > v27)
                    v27 = v28 >> 3;
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
                    v29 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v29 = v27;
                  if (v29)
                  {
                    if (v29 >> 60)
                      std::__throw_bad_array_new_length[abi:fe180100]();
                    v30 = (char *)operator new(16 * v29);
                  }
                  else
                  {
                    v30 = 0;
                  }
                  v31 = &v30[16 * v44];
                  *(_QWORD *)v31 = v15;
                  *((_QWORD *)v31 + 1) = v24;
                  v32 = v31;
                  if (v11 == v14)
                  {
                    v23 = a3;
                  }
                  else
                  {
                    v23 = a3;
                    do
                    {
                      *((_OWORD *)v32 - 1) = *((_OWORD *)v11 - 1);
                      v32 -= 16;
                      v11 -= 16;
                    }
                    while (v11 != v14);
                    v11 = *a1;
                  }
                  v26 = v31 + 16;
                  *a1 = v32;
                  a1[1] = v31 + 16;
                  a1[2] = &v30[16 * v29];
                  if (v11)
                    operator delete(v11);
                }
                else
                {
                  *(_QWORD *)v11 = v15;
                  *((_QWORD *)v11 + 1) = v24;
                  v26 = v11 + 16;
                  v23 = a3;
                }
                a1[1] = v26;
                v11 = v26;
              }
              v12 = &v22[a5];
              v33 = (unint64_t)&v22[a5] >= v23;
              v9 = a2;
              if (v33)
                return;
              goto LABEL_5;
            }
            v18 = v21 + 1;
            v16 = v13 - (v21 + 1);
          }
          while (v16 >= a5);
        }
      }
      v35 = &v12[a2];
      v36 = a3 - (_QWORD)v12;
      v37 = (unint64_t)a1[2];
      if ((unint64_t)v11 >= v37)
      {
        v39 = v44 + 1;
        if ((v44 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:fe180100]();
        v40 = v37 - (_QWORD)v14;
        if (v40 >> 3 > v39)
          v39 = v40 >> 3;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
          v41 = 0xFFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 >> 60)
            std::__throw_bad_array_new_length[abi:fe180100]();
          v42 = (char *)operator new(16 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[16 * v44];
        *(_QWORD *)v43 = v35;
        *((_QWORD *)v43 + 1) = v36;
        v38 = v43 + 16;
        if (v11 != v14)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v11 - 1);
            v43 -= 16;
            v11 -= 16;
          }
          while (v11 != v14);
          v11 = *a1;
        }
        *a1 = v43;
        a1[1] = v38;
        a1[2] = &v42[16 * v41];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v11 = v35;
        *((_QWORD *)v11 + 1) = v36;
        v38 = v11 + 16;
      }
      a1[1] = v38;
    }
    else
    {
      v34 = (char *)operator new(0x10uLL);
      a1[1] = v34 + 16;
      a1[2] = v34 + 16;
      *(_QWORD *)v34 = v9;
      *((_QWORD *)v34 + 1) = a3;
      *a1 = v34;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_18CD1E3C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::toHexString(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  std::locale::id *v13;
  uint64_t v14;
  const std::ios_base *v15;
  const std::locale::facet *v16;
  std::string *v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::locale v25;

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v9;
  *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v11, v20);
  v18 = a1;
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v19 = v6 + 24;
  v24[0] = v7;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  v12 = v19;
  *(_DWORD *)((char *)v20 + *(_QWORD *)(v19 - 24)) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(v19 - 24)) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v20 + *(_QWORD *)(v12 - 24)) |= 0x4000u;
  if (a3)
  {
    v13 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v14 = v19;
      *(_QWORD *)((char *)&v20[2] + *(_QWORD *)(v19 - 24)) = 2;
      v15 = (const std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v14 - 24));
      if (v15[1].__fmtflags_ == -1)
      {
        std::ios_base::getloc(v15);
        v16 = std::locale::use_facet(&v25, v13);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 32);
        std::locale::~locale(&v25);
      }
      v15[1].__fmtflags_ = 48;
      std::ostream::operator<<();
      ++a2;
      --a3;
    }
    while (a3);
  }
  std::stringbuf::str[abi:fe180100]((uint64_t)v20, v18);
  v19 = *v8;
  *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v8[3];
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v24);
}

void sub_18CD1E5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[54]>(uint64_t a1, unsigned int a2)
{
  std::system_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error_vtbl *v7;
  std::system_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::system_error v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::error_code v25;

  v4 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = MEMORY[0x1E0DE4F60];
  v7 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16.__vftable = v7;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v7[-1].~system_error) = v8;
  v9 = (std::ios_base *)((char *)&v16 + (unint64_t)v16.__vftable[-1].~system_error);
  std::ios_base::init(v9, &v16.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16.__vftable = v4 + 1;
  v24[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"This TimePoint could not be represented as struct tm.", 53);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v16.__imp_, &v15);
  v16.__vftable = *(std::system_error_vtbl **)v6;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v16.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v6 + 24);
  v16.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v24);
  *(_QWORD *)&v25.__val_ = a2;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v16, v25, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v18 = 0;
  v19 = 0;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v17 = &v18;
  v20 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(std::error_code *)(a1 + 16) = v16.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v11 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = a1 + 40;
  v13 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v11 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
  return MEMORY[0x18D7898AC](&v16);
}

void sub_18CD1E834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CD1E850(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

tm *AMSCore::localTimeSecondsFromUTC(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep a2)
{
  std::runtime_error_vtbl *v3;
  unsigned int *v4;
  tm *result;
  uint64_t v6;
  int v7;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t tm_gmtoff;
  uint64_t v15;
  char *v16;
  std::runtime_error v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  std::runtime_error v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  __int128 v31;
  char *tm_zone;
  __int128 v33;
  char v34;
  std::chrono::system_clock::time_point __t;
  tm v36;
  __int128 v37;

  __t.__d_.__rep_ = a2;
  v3 = (std::runtime_error_vtbl *)std::chrono::system_clock::to_time_t(&__t);
  v17.__vftable = v3;
  memset(&v36, 0, sizeof(v36));
  if (localtime_r((const time_t *)&v17, &v36))
  {
    v29 = *(std::runtime_error *)&v36.tm_sec;
    v30 = *(_OWORD *)&v36.tm_mon;
    v31 = *(_OWORD *)&v36.tm_isdst;
    tm_zone = v36.tm_zone;
    v34 = 1;
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[54]>((uint64_t)&v23, 3u);
    std::runtime_error::runtime_error(&v29, &v23);
    v30 = v24;
    v4 = (unsigned int *)*((_QWORD *)&v25 + 1);
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v31 = v25;
    tm_zone = v26;
    if (v26)
    {
      *(_QWORD *)(*((_QWORD *)&v25 + 1) + 16) = (char *)&v31 + 8;
      *(_QWORD *)&v25 = (char *)&v25 + 8;
      *((_QWORD *)&v25 + 1) = 0;
      v26 = 0;
      v4 = 0;
    }
    else
    {
      *(_QWORD *)&v31 = (char *)&v31 + 8;
    }
    v33 = v27;
    v27 = 0uLL;
    v34 = 0;
    v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v4);
    MEMORY[0x18D7898AC](&v23);
    if (!v34)
    {
      AMSCore::Error::Error(&v23, &v29);
      std::runtime_error::runtime_error((std::runtime_error *)&v36, &v23);
      *(_OWORD *)&v36.tm_mon = v24;
      v10 = (unsigned int *)*((_QWORD *)&v25 + 1);
      *(_QWORD *)&v36.tm_sec = off_1E2521330;
      *(_OWORD *)&v36.tm_isdst = v25;
      v36.tm_zone = v26;
      if (v26)
      {
        *(_QWORD *)(*((_QWORD *)&v25 + 1) + 16) = &v36.tm_gmtoff;
        *(_QWORD *)&v25 = (char *)&v25 + 8;
        *((_QWORD *)&v25 + 1) = 0;
        v26 = 0;
        v10 = 0;
      }
      else
      {
        *(_QWORD *)&v36.tm_isdst = &v36.tm_gmtoff;
      }
      v37 = v27;
      v27 = 0uLL;
      v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v10);
      MEMORY[0x18D7898AC](&v23);
      std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)&v36);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)&v36.tm_mon;
      *(_QWORD *)a1 = off_1E2521330;
      tm_gmtoff = v36.tm_gmtoff;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)&v36.tm_isdst;
      *(_QWORD *)(a1 + 40) = tm_gmtoff;
      v15 = a1 + 40;
      v16 = v36.tm_zone;
      *(_QWORD *)(a1 + 48) = v36.tm_zone;
      if (v16)
      {
        *(_QWORD *)(tm_gmtoff + 16) = v15;
        tm_gmtoff = 0;
        *(_QWORD *)&v36.tm_isdst = &v36.tm_gmtoff;
        v36.tm_gmtoff = 0;
        v36.tm_zone = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v15;
      }
      *(_OWORD *)(a1 + 56) = v37;
      v37 = 0uLL;
      *(_BYTE *)(a1 + 72) = 0;
      *(_QWORD *)&v36.tm_sec = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36.tm_isdst, (unsigned int *)tm_gmtoff);
      result = (tm *)MEMORY[0x18D7898AC](&v36);
      if (v34)
        return result;
      return (tm *)((uint64_t (*)(std::runtime_error *))v29.~runtime_error)(&v29);
    }
  }
  if (!v28)
  {
    AMSCore::Error::Error((std::runtime_error *)&v36, &v23);
    std::runtime_error::runtime_error(&v17, (const std::runtime_error *)&v36);
    v18 = *(_OWORD *)&v36.tm_mon;
    v17.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v9 = (unsigned int *)v36.tm_gmtoff;
    v19 = *(uint64_t **)&v36.tm_isdst;
    v20 = v36.tm_gmtoff;
    v21 = v36.tm_zone;
    if (v36.tm_zone)
    {
      *(_QWORD *)(v36.tm_gmtoff + 16) = &v20;
      *(_QWORD *)&v36.tm_isdst = &v36.tm_gmtoff;
      v36.tm_gmtoff = 0;
      v36.tm_zone = 0;
      v9 = 0;
    }
    else
    {
      v19 = &v20;
    }
    v22 = v37;
    v37 = 0uLL;
    *(_QWORD *)&v36.tm_sec = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36.tm_isdst, v9);
    MEMORY[0x18D7898AC](&v36);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v17);
    *(_OWORD *)(a1 + 16) = v18;
    *(_QWORD *)a1 = off_1E2521330;
    v11 = v20;
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v11;
    v12 = a1 + 40;
    v13 = v21;
    *(_QWORD *)(a1 + 48) = v21;
    if (v13)
    {
      *(_QWORD *)(v11 + 16) = v12;
      v11 = 0;
      v19 = &v20;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v12;
    }
    *(_OWORD *)(a1 + 56) = v22;
    v22 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v17.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, (unsigned int *)v11);
    result = (tm *)MEMORY[0x18D7898AC](&v17);
    if (!v28)
      result = (tm *)((uint64_t (*)(std::runtime_error *))v23.~runtime_error)(&v23);
    if (v34)
      return result;
    return (tm *)((uint64_t (*)(std::runtime_error *))v29.~runtime_error)(&v29);
  }
  if (!v34)
  {
    __break(1u);
    return result;
  }
  v6 = 60
     * (60 * (SLODWORD(v29.__imp_.__imp_) - (uint64_t)SLODWORD(v23.__imp_.__imp_))
      - SHIDWORD(v23.__vftable)
      + SHIDWORD(v29.__vftable))
     - SLODWORD(v23.__vftable)
     + SLODWORD(v29.__vftable);
  v7 = HIDWORD(v29.__imp_.__imp_) - HIDWORD(v23.__imp_.__imp_);
  if (HIDWORD(v29.__imp_.__imp_) - HIDWORD(v23.__imp_.__imp_) == 1 || v7 <= -2)
  {
    v6 += 86400;
  }
  else if (v7 > 1 || v7 == -1)
  {
    v6 -= 86400;
  }
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 72) = 1;
  if (!v34)
    return (tm *)((uint64_t (*)(_QWORD))v29.~runtime_error)(&v29);
  return result;
}

tm *AMSCore::`anonymous namespace'::toUTC(AMSCore::_anonymous_namespace_ *this, time_t a2)
{
  tm *result;
  __int128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  std::runtime_error v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  tm v14;
  time_t v15;

  v15 = a2;
  memset(&v14, 0, sizeof(v14));
  result = gmtime_r(&v15, &v14);
  if (result)
  {
    v4 = *(_OWORD *)&v14.tm_mon;
    *(_OWORD *)this = *(_OWORD *)&v14.tm_sec;
    *((_OWORD *)this + 1) = v4;
    *((_OWORD *)this + 2) = *(_OWORD *)&v14.tm_isdst;
    *((_QWORD *)this + 6) = v14.tm_zone;
    *((_BYTE *)this + 72) = 1;
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[54]>((uint64_t)&v8, 3u);
    std::runtime_error::runtime_error((std::runtime_error *)this, &v8);
    *((_OWORD *)this + 1) = v9;
    *(_QWORD *)this = off_1E2521330;
    v5 = v11;
    *((_QWORD *)this + 4) = v10;
    *((_QWORD *)this + 5) = v5;
    v6 = (char *)this + 40;
    v7 = v12;
    *((_QWORD *)this + 6) = v12;
    if (v7)
    {
      *(_QWORD *)(v5 + 16) = v6;
      v10 = &v11;
      v11 = 0;
      v12 = 0;
      v5 = 0;
    }
    else
    {
      *((_QWORD *)this + 4) = v6;
    }
    *(_OWORD *)((char *)this + 56) = v13;
    v13 = 0uLL;
    *((_BYTE *)this + 72) = 0;
    v8.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
    return (tm *)MEMORY[0x18D7898AC](&v8);
  }
  return result;
}

void AMSCore::stringify_time_s(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  time_t v6;
  const char *v7;
  std::runtime_error_vtbl *v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error_vtbl *v11;
  std::runtime_error_vtbl *v12;
  std::ios_base *v13;
  const std::ios_base *v14;
  const std::locale::facet *v15;
  std::ios_base::fmtflags v16;
  size_t v17;
  std::runtime_error_vtbl *p_dst;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  const char *v30;
  std::runtime_error v31;
  __int128 v32;
  unsigned int **v33;
  _QWORD v34[2];
  __int128 v35;
  char v36;
  std::runtime_error v37;
  __int128 v38;
  unsigned int **v39;
  unsigned int *v40;
  void *__src;
  __int128 v42;
  __int128 __p;
  __int128 v44;
  int v45;
  uint64_t v46[19];
  std::runtime_error v47;
  __int128 v48;
  unsigned int **v49;
  unsigned int *v50;
  void *v51;
  __int128 v52;
  std::runtime_error v53;
  __int128 v54;
  unsigned int **v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  char v59;
  std::chrono::system_clock::time_point __t;
  std::runtime_error __dst;
  __int128 v62;
  unsigned int **v63;
  unsigned int *v64;
  void *v65;
  __int128 v66;

  v5 = 2147483647000000;
  if (a2 < 2147483647000000)
    v5 = a2;
  __t.__d_.__rep_ = v5 & ~(v5 >> 63);
  v6 = std::chrono::system_clock::to_time_t(&__t);
  if (v59)
  {
    v7 = off_1E253D2D0[a3];
    v8 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v9 = MEMORY[0x1E0DE4FE0] + 64;
    v10 = MEMORY[0x1E0DE4F60];
    v11 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v12 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v46[0] = MEMORY[0x1E0DE4FE0] + 64;
    v37.__vftable = v11;
    *(std::runtime_error_vtbl **)((char *)&v37.__vftable + (unint64_t)v11[-1].~runtime_error) = v12;
    v13 = (std::ios_base *)((char *)&v37 + (unint64_t)v37.__vftable[-1].~runtime_error);
    std::ios_base::init(v13, &v37.__imp_);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    v37.__vftable = v8 + 1;
    v46[0] = v9;
    std::streambuf::basic_streambuf();
    v37.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    __p = 0u;
    v44 = 0u;
    v45 = 16;
    if (v59)
    {
      MEMORY[0x18D7898C4](&__dst, &v37);
      if (LOBYTE(__dst.__vftable))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&v37 + (unint64_t)v37.__vftable[-1].~runtime_error));
        std::locale::use_facet((const std::locale *)&v47, MEMORY[0x1E0DE4CD0]);
        std::locale::~locale((std::locale *)&v47);
        v14 = (const std::ios_base *)((char *)&v37 + (unint64_t)v37.__vftable[-1].~runtime_error);
        if (v14[1].__fmtflags_ == -1)
        {
          std::ios_base::getloc(v14);
          v15 = std::locale::use_facet((const std::locale *)&v47, MEMORY[0x1E0DE4A90]);
          v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 32);
          std::locale::~locale((std::locale *)&v47);
          v14[1].__fmtflags_ = v16;
        }
        strlen(v7);
        if (!std::time_put<char,std::ostreambuf_iterator<char>>::put())
          std::ios_base::clear((std::ios_base *)((char *)&v37 + (unint64_t)v37.__vftable[-1].~runtime_error), *(_DWORD *)((char *)&v39 + (unint64_t)v37.__vftable[-1].~runtime_error) | 1);
      }
      MEMORY[0x18D7898D0](&__dst);
      if ((v45 & 0x10) != 0)
      {
        v19 = *((_QWORD *)&v44 + 1);
        if (*((_QWORD *)&v44 + 1) < (unint64_t)v42)
        {
          *((_QWORD *)&v44 + 1) = v42;
          v19 = v42;
        }
        v20 = __src;
        v17 = v19 - (_QWORD)__src;
        if (v19 - (uint64_t)__src >= 0)
          goto LABEL_20;
      }
      else
      {
        if ((v45 & 8) == 0)
        {
          v17 = 0;
          BYTE7(v62) = 0;
          p_dst = (std::runtime_error_vtbl *)&__dst;
          goto LABEL_28;
        }
        v20 = (void *)*((_QWORD *)&v38 + 1);
        v17 = (size_t)v40 - *((_QWORD *)&v38 + 1);
        if ((uint64_t)v40 - *((_QWORD *)&v38 + 1) >= 0)
        {
LABEL_20:
          if (v17 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:fe180100]();
          if (v17 >= 0x17)
          {
            v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17)
              v21 = v17 | 7;
            v22 = v21 + 1;
            p_dst = (std::runtime_error_vtbl *)operator new(v21 + 1);
            __dst.__imp_.__imp_ = (const char *)v17;
            *(_QWORD *)&v62 = v22 | 0x8000000000000000;
            __dst.__vftable = p_dst;
          }
          else
          {
            BYTE7(v62) = v17;
            p_dst = (std::runtime_error_vtbl *)&__dst;
            if (!v17)
              goto LABEL_28;
          }
          memmove(p_dst, v20, v17);
LABEL_28:
          *((_BYTE *)&p_dst->~runtime_error + v17) = 0;
          v31 = __dst;
          *(_QWORD *)&v32 = v62;
          v36 = 1;
          v37.__vftable = *(std::runtime_error_vtbl **)v10;
          *(std::runtime_error_vtbl **)((char *)&v37.__vftable + (unint64_t)v37.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v10 + 24);
          v37.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
          if (SBYTE7(v44) < 0)
            operator delete((void *)__p);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D789B58](v46);
          goto LABEL_48;
        }
      }
    }
    __break(1u);
    return;
  }
  std::runtime_error::runtime_error(&v37, &v53);
  v38 = v54;
  v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v39 = v55;
  v40 = (unsigned int *)v56;
  __src = v57;
  if (v57)
  {
    *(_QWORD *)(v56 + 16) = &v40;
    v55 = (unsigned int **)&v56;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v39 = &v40;
  }
  v42 = v58;
  v58 = 0uLL;
  LOBYTE(__p) = 1;
  std::runtime_error::runtime_error(&__dst, &v37);
  v62 = v38;
  __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v63 = v39;
  v64 = v40;
  v65 = __src;
  if (__src)
  {
    *((_QWORD *)v40 + 2) = &v64;
    v39 = &v40;
    v40 = 0;
    __src = 0;
  }
  else
  {
    v63 = &v64;
  }
  v66 = v42;
  v42 = 0uLL;
  std::runtime_error::runtime_error(&v47, &__dst);
  v48 = v62;
  v23 = v64;
  v47.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v49 = v63;
  v50 = v64;
  v51 = v65;
  if (v65)
  {
    *((_QWORD *)v64 + 2) = &v50;
    v23 = 0;
    v63 = &v64;
    v64 = 0;
    v65 = 0;
  }
  else
  {
    v49 = &v50;
  }
  v52 = v66;
  v66 = 0uLL;
  __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v63, v23);
  MEMORY[0x18D7898AC](&__dst);
  std::runtime_error::runtime_error(&v31, &v47);
  v32 = v48;
  v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v24 = v50;
  v33 = v49;
  v34[0] = v50;
  v34[1] = v51;
  if (v51)
  {
    *((_QWORD *)v50 + 2) = v34;
    v24 = 0;
    v49 = &v50;
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v33 = (unsigned int **)v34;
  }
  v35 = v52;
  v52 = 0uLL;
  v36 = 0;
  v47.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, v24);
  MEMORY[0x18D7898AC](&v47);
  if ((_BYTE)__p)
  {
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
    MEMORY[0x18D7898AC](&v37);
  }
LABEL_48:
  if (v59)
  {
    if (v36)
      goto LABEL_50;
LABEL_53:
    ((void (*)(std::runtime_error *))v31.~runtime_error)(&v31);
    if (a3 == 2)
    {
      v28 = (char *)operator new(0x20uLL);
      *(_QWORD *)a1 = v28;
      v29 = xmmword_18CF51BA0;
      v30 = "Thu, 01 Jan 1970 00:00:00 GMT";
    }
    else
    {
      if (a3 != 1)
      {
        *(_BYTE *)(a1 + 23) = 20;
        strcpy((char *)a1, "1970-01-01T00:00:00Z");
        return;
      }
      v28 = (char *)operator new(0x20uLL);
      *(_QWORD *)a1 = v28;
      v29 = xmmword_18CF51BA0;
      v30 = "Thu, 01-Jan-1970 00:00:00 GMT";
    }
    *(_OWORD *)(a1 + 8) = v29;
    *(_OWORD *)v28 = *(_OWORD *)v30;
    *(_OWORD *)(v28 + 13) = *(_OWORD *)(v30 + 13);
    v28[29] = 0;
    return;
  }
  ((void (*)(std::runtime_error *))v53.~runtime_error)(&v53);
  if (!v36)
    goto LABEL_53;
LABEL_50:
  if (SBYTE7(v32) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, (const std::string::value_type *)v31.__vftable, (std::string::size_type)v31.__imp_.__imp_);
    if (v36)
    {
      if (SBYTE7(v32) < 0)
        operator delete(v31.__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))v31.~runtime_error)(&v31);
    }
  }
  else
  {
    *(std::runtime_error *)a1 = v31;
    *(_QWORD *)(a1 + 16) = v32;
  }
}

void sub_18CD1F454(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::locale a54)
{
  uint64_t v54;

  MEMORY[0x18D7898D0](v54 - 168);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)&a21 + *(_QWORD *)(a21 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x18CD1EF9CLL);
}

void sub_18CD1F4B8(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

uint64_t AMSCore::parseDateString(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  std::ios_base *v8;
  std::locale *rdbuf;
  std::locale *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  time_t v14;
  uint64_t v15;
  std::runtime_error v17[2];
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::locale __loc;
  std::locale v23;
  tm v24;
  _QWORD v25[2];
  _QWORD v26[11];
  char v27;
  uint64_t v28;
  std::locale v29;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:fe180100]((uint64_t)v25);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v26, a2, a3);
  memset(&v24, 0, sizeof(v24));
  v8 = (std::ios_base *)((char *)v25 + *(_QWORD *)(v25[0] - 24));
  MEMORY[0x18D789AEC](&__loc);
  std::ios_base::getloc(v8);
  std::ios_base::imbue(v8, &__loc);
  std::locale::~locale((std::locale *)v17);
  rdbuf = (std::locale *)v8->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
    v10 = rdbuf + 1;
    std::locale::locale(&v29, v10);
    std::locale::operator=(v10, &__loc);
    std::locale::~locale(&v29);
  }
  std::locale::~locale(&v23);
  std::locale::~locale(&__loc);
  if (a4[23] < 0)
    a4 = *(const char **)a4;
  MEMORY[0x18D7898B8](&__loc, v25, 0);
  if (LOBYTE(__loc.__locale_))
  {
    LODWORD(v29.__locale_) = 0;
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(v25[0] - 24)));
    std::locale::use_facet((const std::locale *)v17, MEMORY[0x1E0DE4CC8]);
    std::locale::~locale((std::locale *)v17);
    strlen(a4);
    std::time_get<char,std::istreambuf_iterator<char>>::get();
    std::ios_base::clear((std::ios_base *)((char *)v25 + *(_QWORD *)(v25[0] - 24)), *(_DWORD *)((char *)&v26[2] + *(_QWORD *)(v25[0] - 24)) | LODWORD(v29.__locale_));
  }
  if ((*((_BYTE *)&v26[2] + *(_QWORD *)(v25[0] - 24)) & 5) != 0 || (v14 = timegm(&v24), v14 == -1))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[28]>((uint64_t)v17, 3u, "Unable to parse time string");
    std::runtime_error::runtime_error((std::runtime_error *)a1, v17);
    *(std::runtime_error *)(a1 + 16) = v17[1];
    *(_QWORD *)a1 = off_1E2521330;
    v11 = v19;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = v11;
    v12 = a1 + 40;
    v13 = v20;
    *(_QWORD *)(a1 + 48) = v20;
    if (v13)
    {
      *(_QWORD *)(v11 + 16) = v12;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
      v11 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v12;
    }
    *(_OWORD *)(a1 + 56) = v21;
    v21 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v17[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v11);
    MEMORY[0x18D7898AC](v17);
  }
  else
  {
    *(std::chrono::system_clock::time_point *)a1 = std::chrono::system_clock::from_time_t(v14);
    *(_BYTE *)(a1 + 72) = 1;
  }
  v25[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v26[0] = v15;
  v26[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D789B58](&v28);
}

void sub_18CD1F7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D789B58](a1 + 128);
  return a1;
}

void AMSCore::toStringVector(std::vector<std::string> *a1, __int128 **a2)
{
  __int128 *i;
  __int128 *v5;
  __int128 v6;
  int v7;
  BOOL v8;
  __int128 *v9;
  __int128 v10;
  std::vector<std::string>::pointer end;
  char *v12;
  int v13;
  std::string __p;
  char v15;

  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a1, ((char *)a2[1] - (char *)*a2) >> 5);
  v5 = *a2;
  for (i = a2[1]; v5 != i; v5 += 2)
  {
    v7 = *((_DWORD *)v5 + 6);
    v8 = v7 == 5;
    if (v7 == 5)
      v9 = v5;
    else
      v9 = 0;
    if (v8)
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      v15 = 1;
      end = a1->__end_;
      if (end < a1->__end_cap_.__value_)
      {
        v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v6;
        a1->__end_ = end + 1;
      }
      else
      {
        v12 = std::vector<std::string>::__emplace_back_slow_path<std::string>((void **)&a1->__begin_, (uint64_t)&__p);
        v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a1->__end_ = (std::vector<std::string>::pointer)v12;
        if (v15)
        {
          if (v13 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_18CD218C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __destructor_8_s0_s8_s16((id *)va);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s8_s16(id *a1)
{

}

void sub_18CD251C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD29CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CD2AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18CD2D390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

AMSPromise *AMSCookieDatabasePath(void *a1)
{
  id v1;
  AMSPromise *v2;
  id v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = objc_alloc_init(AMSPromise);
  v3 = v1;
  +[AMSCookieService sharedService](AMSCookieService, "sharedService");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[AMSPromise completionHandlerAdapter](v2, "completionHandlerAdapter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "getCookieDatabasePathForAccount:withCompletion:", v3, v5);

  return v2;
}

void AMSSetAccountProperty(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  NSObject *v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  id v57;
  __int16 v58;
  id v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  id v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  if (!v10)
  {
    v30 = 0;
    goto LABEL_31;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    +[AMSLogConfig sharedAccountsConfig](AMSLogConfig, "sharedAccountsConfig");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v18)
    {
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v18, "OSLogObject");
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = objc_opt_class();
      AMSLogKey();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v55 = v32;
      v56 = 2114;
      v57 = v33;
      v58 = 2114;
      v59 = v11;
      v60 = 2114;
      v61 = a5;
      v62 = 2114;
      v63 = (id)objc_opt_class();
      v34 = v63;
      _os_log_impl(&dword_18C849000, v31, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Someone attempted to store an account property as the wrong type. key = %{public}@ | expectedClass = %{public}@ | actualClass = %{public}@", buf, 0x34u);

    }
    goto LABEL_40;
  }
  if (!a4)
  {
    v30 = (uint64_t)v10;
LABEL_31:
    objc_msgSend(v9, "accountPropertyForKey:", v11, v46, v47, v48);
    v41 = objc_claimAutoreleasedReturnValue();
    v18 = (void *)v41;
    if (v41 | v30 && !objc_msgSend((id)v41, "isEqual:", v30))
    {
      objc_msgSend(v9, "setAccountProperty:forKey:", v30, v11);
    }
    else
    {
      +[AMSLogConfig sharedAccountsConfig](AMSLogConfig, "sharedAccountsConfig");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v42)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v42, "OSLogObject");
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        v44 = objc_opt_class();
        AMSLogKey();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v55 = v44;
        v56 = 2114;
        v57 = v45;
        v58 = 2114;
        v59 = v11;
        _os_log_impl(&dword_18C849000, v43, OS_LOG_TYPE_DEBUG, "%{public}@: [%{public}@] Someone attempted to set an account property to its existing value. key = %{public}@", buf, 0x20u);

      }
    }
    v10 = (id)v30;
    goto LABEL_40;
  }
  +[AMSLogConfig sharedAccountsConfig](AMSLogConfig, "sharedAccountsConfig");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v12, "OSLogObject");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v14 = objc_opt_class();
    AMSLogKey();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v55 = v14;
    v56 = 2114;
    v57 = v15;
    v58 = 2114;
    v59 = v11;
    v60 = 2048;
    v61 = a4;
    _os_log_impl(&dword_18C849000, v13, OS_LOG_TYPE_DEBUG, "%{public}@: [%{public}@] Encrypting an account property. key = %{public}@ | dataProtectionClass = %ld", buf, 0x2Au);

  }
  v53 = 0;
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v10, 1, &v53);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v53;
  v18 = v17;
  if (v16)
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v49 = v17;
    objc_msgSend(v16, "ams_encryptDataUsingDataProtectionClass:error:", a4, &v49);
    v19 = v49;

    v20 = v50;
    if (!v50)
    {
      +[AMSLogConfig sharedAccountsConfig](AMSLogConfig, "sharedAccountsConfig");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v21)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v21, "OSLogObject");
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = objc_opt_class();
        AMSLogKey();
        v24 = (id)objc_claimAutoreleasedReturnValue();
        AMSLogableError(v19);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v55 = v23;
        v56 = 2114;
        v57 = v24;
        v58 = 2114;
        v59 = v11;
        v60 = 2114;
        v61 = v25;
        _os_log_impl(&dword_18C849000, v22, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to encrypt an account property in order to encrypt it. key = %{public}@ | error = %{public}@", buf, 0x2Au);

      }
      v20 = v50;
    }
    v26 = (void *)MEMORY[0x1E0C99D80];
    v27 = v20;
    v46 = v27;
    v28 = v51;
    v47 = v28;
    v29 = v52;
    v48 = v29;
    if (v26)
    {
      objc_msgSend(v26, "ams_dictionaryWithEncryptionResult:", &v46);
      v30 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v40 = v29;

      v30 = 0;
    }

    goto LABEL_31;
  }
  +[AMSLogConfig sharedAccountsConfig](AMSLogConfig, "sharedAccountsConfig");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v35)
  {
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v35, "OSLogObject");
  v36 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    v37 = objc_opt_class();
    AMSLogKey();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    AMSLogableError(v18);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v55 = v37;
    v56 = 2114;
    v57 = v38;
    v58 = 2114;
    v59 = v11;
    v60 = 2114;
    v61 = v39;
    _os_log_impl(&dword_18C849000, v36, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to archive an account property in order to encrypt it. key = %{public}@ | error = %{public}@", buf, 0x2Au);

  }
LABEL_40:

}

void sub_18CD2E560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  __destructor_8_s0_s8_s16((id *)va);
  _Unwind_Resume(a1);
}

void sub_18CD2F58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CD318E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

AMSMutableBinaryPromise *AMSSaveAccount(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  AMSMutableBinaryPromise *v7;
  void *v8;
  id v9;
  id v10;
  _QWORD v12[4];
  id v13;
  id v14;

  v5 = a1;
  v6 = a2;
  v7 = objc_alloc_init(AMSMutableBinaryPromise);
  -[AMSBinaryPromise completionHandlerAdapter](v7, "completionHandlerAdapter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "saveAccount:withDataclassActions:doVerify:completion:", v6, 0, a3, v8);

  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __AMSSaveAccount_block_invoke;
  v12[3] = &unk_1E253D950;
  v13 = v5;
  v14 = v6;
  v9 = v6;
  v10 = v5;
  -[AMSBinaryPromise addErrorBlock:](v7, "addErrorBlock:", v12);

  return v7;
}

uint64_t AMSSaveVerifiedAccount(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  objc_class *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v22 = 0;
  v7 = objc_msgSend(v5, "saveVerifiedAccount:error:", v6, &v22);
  v8 = v22;
  if ((v7 & 1) == 0)
  {
    v9 = (objc_class *)objc_opt_class();
    AMSCheckErrorForUnitTestAccess(v9, v8);
    +[AMSLogConfig sharedAccountsConfig](AMSLogConfig, "sharedAccountsConfig");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v10, "OSLogObject");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v21 = a3;
      AMSLogKey();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)MEMORY[0x1E0CB3940];
      v14 = objc_opt_class();
      v15 = v14;
      if (v12)
      {
        AMSLogKey();
        v20 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "stringWithFormat:", CFSTR("%@: [%@] "), v15, v20);
      }
      else
      {
        objc_msgSend(v13, "stringWithFormat:", CFSTR("%@: "), v14);
      }
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      AMSHashIfNeeded(v6);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      AMSLogableError(v8);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v24 = v16;
      v25 = 2114;
      v26 = v17;
      v27 = 2114;
      v28 = v18;
      _os_log_impl(&dword_18C849000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to save a verified account. account = %{public}@ | error = %{public}@", buf, 0x20u);
      if (v12)
      {

        v16 = (void *)v20;
      }

      a3 = v21;
    }

    if (a3)
      *a3 = objc_retainAutorelease(v8);
  }

  return v7;
}

AMSMutablePromise *AMSFetchAccountWithIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  AMSMutablePromise *v5;
  AMSMutablePromise *v6;
  id v7;
  id v8;
  void *v9;
  AMSMutablePromise *v10;
  _QWORD v12[4];
  AMSMutablePromise *v13;
  id v14;
  id v15;

  v3 = a1;
  v4 = a2;
  v5 = objc_alloc_init(AMSMutablePromise);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __AMSFetchAccountWithIdentifier_block_invoke;
  v12[3] = &unk_1E253DCC8;
  v6 = v5;
  v13 = v6;
  v14 = v4;
  v15 = v3;
  v7 = v3;
  v8 = v4;
  objc_msgSend(v7, "accountWithIdentifier:completion:", v8, v12);
  v9 = v15;
  v10 = v6;

  return v10;
}

id AMSAccountWithIdentifier(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  objc_class *v11;
  id v13;

  v5 = a1;
  v6 = a2;
  v7 = (void *)MEMORY[0x18D78A1C4]();
  v13 = 0;
  objc_msgSend(v5, "accountWithIdentifier:error:", v6, &v13);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v13;
  v10 = (void *)objc_msgSend(v8, "copy");
  v11 = (objc_class *)objc_opt_class();
  AMSCheckErrorForUnitTestAccess(v11, v9);

  objc_autoreleasePoolPop(v7);
  if (a3 && !v10)
    *a3 = objc_retainAutorelease(v9);

  return v10;
}

void sub_18CD34230(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __getOBBundleClass_block_invoke(uint64_t a1)
{
  OnBoardingKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("OBBundle");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_3_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    OnBoardingKitLibrary();
  }
}

void OnBoardingKitLibrary()
{
  void *v0;

  if (!OnBoardingKitLibraryCore_frameworkLibrary)
  {
    OnBoardingKitLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!OnBoardingKitLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getOBPrivacyFlowClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  id v8;

  OnBoardingKitLibrary();
  result = objc_getClass("OBPrivacyFlow");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEACC80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)abort_report_np();
    return (Class)+[AMSAgeVerificationCore _resultForAccountVerificationExpirationTimestamp:withBagControlledAgeVerificationRequired:bagWarningThresholdDays:at:](v3, v4, v5, v6, v7, v8);
  }
  return result;
}

void sub_18CD36EF4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CD38AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAppleIDAuthenticationAppleIDSettingsTokenIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1ECEACF28)
  {
    v2 = (void *)qword_1ECEACF28;
  }
  else
  {
    qword_1ECEACF28 = _sl_dlopen();
    v2 = (void *)qword_1ECEACF28;
    if (!qword_1ECEACF28)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "AppleIDAuthenticationAppleIDSettingsTokenIdentifier");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECEACF20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CD3F330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CD41838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_18CD45B18(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_18CD46A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD47E2C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 192), 8);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18CD48308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
  uint64_t v9;

  _Block_object_dispose((const void *)(v9 - 152), 8);
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_18CD4D4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  id *v27;

  _Block_object_dispose(&a27, 8);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CD4E5AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18CD4E6B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18CD4E710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CD4E9A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18CD4ED6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_18CD4EEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CD4EF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18CD4F014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18CD4F108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v17 - 40));

  _Unwind_Resume(a1);
}

void sub_18CD4F2E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18CD4F398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18CD4F5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CD4F6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18CD4F860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18CD4FB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18CD4FC6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18CD4FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD51100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18CD511F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CD51320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18CD51428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CD51C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD51DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromBagValueType(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E253F0C8[a1];
}

__CFString *AMSBagKeyForPurchaseType(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E253F100[a1];
}

void sub_18CD5310C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18CD53400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_18CD538A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_18CD53B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18CD53C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_18CD53D38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CD53DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18CD53EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18CD53F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18CD53FCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CD54300(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_18CD54E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBiometricKitIdentityClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getBiometricKitIdentityClass_softClass;
  v7 = getBiometricKitIdentityClass_softClass;
  if (!getBiometricKitIdentityClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getBiometricKitIdentityClass_block_invoke;
    v3[3] = &unk_1E253DDB8;
    v3[4] = &v4;
    __getBiometricKitIdentityClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18CD55460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD58DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD5904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getBiometricKitClass_block_invoke(uint64_t a1)
{
  BiometricKitLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("BiometricKit");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getBiometricKitClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    BiometricKitLibrary();
  }
}

void BiometricKitLibrary()
{
  void *v0;

  if (!BiometricKitLibraryCore_frameworkLibrary)
  {
    BiometricKitLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!BiometricKitLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

AMSBiometricsDisableTask *__getBiometricKitIdentityClass_block_invoke(uint64_t a1)
{
  AMSBiometricsDisableTask *result;
  AMSBiometricsDisableTask *v3;
  SEL v4;
  id v5;

  BiometricKitLibrary();
  result = (AMSBiometricsDisableTask *)objc_getClass("BiometricKitIdentity");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getBiometricKitIdentityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (AMSBiometricsDisableTask *)abort_report_np();
    return -[AMSBiometricsDisableTask initWithAccount:](v3, v4, v5);
  }
  return result;
}

void sub_18CD5A974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD5ACD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD5B008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD5B1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD5CE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD5D800(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CD5F344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD5FEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_18CD60948(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  id v11;
  void *v12;
  NSObject *v13;
  objc_class *v14;
  id v15;
  void *v16;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(a1);
    +[AMSLogConfig sharedPurchaseConfig](AMSLogConfig, "sharedPurchaseConfig");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v12, "OSLogObject");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = (objc_class *)objc_opt_class();
      NSStringFromClass(v14);
      v15 = (id)objc_claimAutoreleasedReturnValue();
      AMSHashIfNeeded(v11);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543618;
      *(_QWORD *)((char *)&buf + 4) = v15;
      WORD6(buf) = 2112;
      *(_QWORD *)((char *)&buf + 14) = v16;
      _os_log_impl(&dword_18C849000, v13, OS_LOG_TYPE_ERROR, "%{public}@Error parsing buyParams string: %@", (uint8_t *)&buf, 0x16u);

    }
    objc_end_catch();
    JUMPOUT(0x18CD60874);
  }
  _Unwind_Resume(a1);
}

void sub_18CD6139C(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  NSObject *v8;
  objc_class *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  objc_class *v15;
  id v16;
  void *v17;
  uint64_t v18;

  if (a2 == 1)
  {
    v4 = objc_begin_catch(exception_object);
    v5 = +[AMSUnitTests isRunningUnitTests](AMSUnitTests, "isRunningUnitTests");
    v6 = *(void **)(v2 + 2192);
    if (v5)
    {
      objc_msgSend(v6, "sharedPurchaseConfig");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v7)
      {
        objc_msgSend(*(id *)(v2 + 2192), "sharedConfig");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v7, "OSLogObject");
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = (objc_class *)objc_opt_class();
        NSStringFromClass(v9);
        v10 = (id)objc_claimAutoreleasedReturnValue();
        AMSHashIfNeeded(v4);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)(v3 - 128) = 138543618;
        v12 = v3 - 128;
        *(_QWORD *)(v12 + 4) = v10;
        *(_WORD *)(v3 - 116) = 2112;
        *(_QWORD *)(v12 + 14) = v11;
        _os_log_impl(&dword_18C849000, v8, OS_LOG_TYPE_ERROR, "%{public}@: Exception parsing buyParams string: %@", (uint8_t *)(v3 - 128), 0x16u);

      }
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(v2 + 2192), "sharedPurchaseConfig");
      v14 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "postNotificationName:object:userInfo:", CFSTR("com.apple.AppleMediaServicesTests.FaultLogged"), v14, 0);
    }
    else
    {
      objc_msgSend(v6, "sharedPurchaseConfig");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v13)
      {
        objc_msgSend(*(id *)(v2 + 2192), "sharedConfig");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v13, "OSLogObject");
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        v15 = (objc_class *)objc_opt_class();
        NSStringFromClass(v15);
        v16 = (id)objc_claimAutoreleasedReturnValue();
        AMSHashIfNeeded(v4);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)(v3 - 128) = 138543618;
        v18 = v3 - 128;
        *(_QWORD *)(v18 + 4) = v16;
        *(_WORD *)(v3 - 116) = 2112;
        *(_QWORD *)(v18 + 14) = v17;
        _os_log_impl(&dword_18C849000, v14, OS_LOG_TYPE_FAULT, "%{public}@: Exception parsing buyParams string: %@", (uint8_t *)(v3 - 128), 0x16u);

      }
    }

    objc_end_catch();
    JUMPOUT(0x18CD61358);
  }
  _Unwind_Resume(exception_object);
}

id AMSBagKeyBuyProductOverrideForProductType(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  if (qword_1ECEAD000 != -1)
    dispatch_once(&qword_1ECEAD000, &__block_literal_global_191);
  objc_msgSend((id)qword_1ECEAD008, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;

  return v3;
}

void sub_18CD635A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CD641F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18CD646AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initPKPaymentRequest()
{
  Class result;

  if (qword_1EE060850 != -1)
    dispatch_once(&qword_1EE060850, &__block_literal_global_23);
  result = objc_getClass("PKPaymentRequest");
  _MergedGlobals_4 = (uint64_t)result;
  _MergedGlobals_3[0] = (uint64_t (*)())PKPaymentRequestFunction;
  return result;
}

id PKPaymentRequestFunction()
{
  return (id)_MergedGlobals_4;
}

Class initPKPaymentMerchantSession()
{
  Class result;

  if (qword_1EE060850 != -1)
    dispatch_once(&qword_1EE060850, &__block_literal_global_23);
  result = objc_getClass("PKPaymentMerchantSession");
  qword_1EE060858 = (uint64_t)result;
  off_1ECEAA638[0] = (uint64_t (*)())PKPaymentMerchantSessionFunction;
  return result;
}

id PKPaymentMerchantSessionFunction()
{
  return (id)qword_1EE060858;
}

Class initPKPaymentSummaryItem()
{
  Class result;

  if (qword_1EE060850 != -1)
    dispatch_once(&qword_1EE060850, &__block_literal_global_23);
  result = objc_getClass("PKPaymentSummaryItem");
  qword_1EE060860 = (uint64_t)result;
  off_1ECEAA640 = (uint64_t (*)())PKPaymentSummaryItemFunction;
  return result;
}

id PKPaymentSummaryItemFunction()
{
  return (id)qword_1EE060860;
}

Class initPKPaymentAuthorizationController()
{
  Class result;

  if (qword_1EE060870 != -1)
    dispatch_once(&qword_1EE060870, &__block_literal_global_260);
  result = objc_getClass("PKPaymentAuthorizationController");
  qword_1EE060868 = (uint64_t)result;
  getPKPaymentAuthorizationControllerClass[0] = (uint64_t (*)())PKPaymentAuthorizationControllerFunction;
  return result;
}

id PKPaymentAuthorizationControllerFunction()
{
  return (id)qword_1EE060868;
}

Class initPKPaymentAuthorizationResult()
{
  Class result;

  if (qword_1EE060850 != -1)
    dispatch_once(&qword_1EE060850, &__block_literal_global_23);
  result = objc_getClass("PKPaymentAuthorizationResult");
  qword_1EE060878 = (uint64_t)result;
  getPKPaymentAuthorizationResultClass_0 = (uint64_t (*)())PKPaymentAuthorizationResultFunction;
  return result;
}

id PKPaymentAuthorizationResultFunction()
{
  return (id)qword_1EE060878;
}

void sub_18CD68910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD68E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD6906C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18CD69294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD69664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD69C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPKAuthenticatorClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEAD038)
  {
    qword_1ECEAD038 = _sl_dlopen();
    if (!qword_1ECEAD038)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("PKAuthenticator");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getPKInAppPaymentServiceClass_block_invoke(uint64_t a1)
{
  PassKitCoreLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PKInAppPaymentService");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKInAppPaymentServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    PassKitCoreLibrary();
  }
}

void PassKitCoreLibrary()
{
  void *v0;

  if (!PassKitCoreLibraryCore_frameworkLibrary)
  {
    PassKitCoreLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!PassKitCoreLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

AMSCardEnrollmentEligibilityTask *__getPKPaymentServiceClass_block_invoke(uint64_t a1)
{
  AMSCardEnrollmentEligibilityTask *result;
  AMSCardEnrollmentEligibilityTask *v3;
  SEL v4;

  PassKitCoreLibrary();
  result = (AMSCardEnrollmentEligibilityTask *)objc_getClass("PKPaymentService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKPaymentServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (AMSCardEnrollmentEligibilityTask *)abort_report_np();
    return -[AMSCardEnrollmentEligibilityTask init](v3, v4);
  }
  return result;
}

void sub_18CD6C050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD6C26C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __getPKPassLibraryClass_block_invoke(uint64_t a1)
{
  PassKitCoreLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PKPassLibrary");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_3_2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    PassKitCoreLibrary_0();
  }
}

void PassKitCoreLibrary_0()
{
  void *v0;

  if (!PassKitCoreLibraryCore_frameworkLibrary_0)
  {
    PassKitCoreLibraryCore_frameworkLibrary_0 = _sl_dlopen();
    if (!PassKitCoreLibraryCore_frameworkLibrary_0)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getPKPaymentPassClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;
  id v5;
  id v6;

  PassKitCoreLibrary_0();
  result = objc_getClass("PKPaymentPass");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEACCB0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)abort_report_np();
    return (Class)+[AMSCardEnrollmentPaymentSessionService performSilentEnrollmentWithRequest:logKey:](v3, v4, v5, v6);
  }
  return result;
}

void sub_18CD6CA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD6D970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD6DB3C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18CD6DC84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18CD6DFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void __getSSSilentEnrollmentContextClass_block_invoke(uint64_t a1)
{
  StoreServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SSSilentEnrollmentContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSSSilentEnrollmentContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    StoreServicesLibrary();
  }
}

void StoreServicesLibrary()
{
  void *v0;

  if (!StoreServicesLibraryCore_frameworkLibrary)
  {
    StoreServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!StoreServicesLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getSSSilentEnrollmentPaymentSessionClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  StoreServicesLibrary();
  result = objc_getClass("SSSilentEnrollmentPaymentSession");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSSSilentEnrollmentPaymentSessionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return __getPKPaymentMerchantSessionClass_block_invoke(v3);
  }
  return result;
}

Class __getPKPaymentMerchantSessionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEAD048)
  {
    qword_1ECEAD048 = _sl_dlopen();
    if (!qword_1ECEAD048)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("PKPaymentMerchantSession");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CD6F31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD6F408(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18CD6F550(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void __getSSSilentEnrollmentContextClass_block_invoke_0(uint64_t a1)
{
  StoreServicesLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SSSilentEnrollmentContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSSSilentEnrollmentContextClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    StoreServicesLibrary_0();
  }
}

void StoreServicesLibrary_0()
{
  void *v0;

  if (!StoreServicesLibraryCore_frameworkLibrary_0)
  {
    StoreServicesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
    if (!StoreServicesLibraryCore_frameworkLibrary_0)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

AMSCardMetadataRegistrationResult *__getSSSilentEnrollmentVerificationClass_block_invoke(uint64_t a1)
{
  AMSCardMetadataRegistrationResult *result;
  AMSCardMetadataRegistrationResult *v3;
  SEL v4;

  StoreServicesLibrary_0();
  result = (AMSCardMetadataRegistrationResult *)objc_getClass("SSSilentEnrollmentVerification");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getSSSilentEnrollmentVerificationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (AMSCardMetadataRegistrationResult *)abort_report_np();
    return -[AMSCardMetadataRegistrationResult init](v3, v4);
  }
  return result;
}

void sub_18CD701F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CD704DC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CD7063C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initPKInAppPaymentService()
{
  Class result;

  if (qword_1ECEACCC0 != -1)
    dispatch_once(&qword_1ECEACCC0, &__block_literal_global_25);
  result = objc_getClass("PKInAppPaymentService");
  _MergedGlobals_3_3 = (uint64_t)result;
  getPKInAppPaymentServiceClass[0] = (uint64_t (*)())PKInAppPaymentServiceFunction;
  return result;
}

id PKInAppPaymentServiceFunction()
{
  return (id)_MergedGlobals_3_3;
}

void sub_18CD76254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CD782DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD7A668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18CD7A78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD7A890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD7A970(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_18CD7AB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD7AE48(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18CD7CB94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CD7E7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD7E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD7EE0C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  _Unwind_Resume(a1);
}

void sub_18CD8182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD82C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_18CD83EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCookieDatabaseColumnForNSHTTPCookiePropertyKey(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AD0]) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92B10]) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AD8]) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92B18]) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AB0]) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AE0]) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92B08]) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AB8]) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92A98]) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AA0]) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AA8]) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AC8]) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AE8]) & 1) != 0)
  {
    v2 = 9;
  }
  else if (objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C92AF8]))
  {
    v2 = 10;
  }
  else
  {
    v2 = 14;
  }

  return v2;
}

const __CFString *AMSTypeForAMSCookieDatabaseColumn(unint64_t a1)
{
  if (a1 >= 0xE)
    return 0;
  else
    return CFSTR("TEXT");
}

uint64_t AMSCookieDatabaseColumnIsPrimaryKey(unint64_t a1)
{
  return (a1 < 9) & (0x148u >> a1);
}

uint64_t AMSCookieDatabaseColumnIsNullable(unint64_t a1)
{
  return (a1 > 8) | (0xB7u >> a1) & 1;
}

void sub_18CD84EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initTapToRadarService()
{
  Class result;

  if (qword_1ECEACCD0 != -1)
    dispatch_once(&qword_1ECEACCD0, &__block_literal_global_101);
  result = objc_getClass("TapToRadarService");
  _MergedGlobals_3_4 = (uint64_t)result;
  _MergedGlobals_71[0] = (uint64_t (*)())TapToRadarServiceFunction;
  return result;
}

id TapToRadarServiceFunction()
{
  return (id)_MergedGlobals_3_4;
}

Class initRadarComponent()
{
  Class result;

  if (qword_1ECEACCD0 != -1)
    dispatch_once(&qword_1ECEACCD0, &__block_literal_global_101);
  result = objc_getClass("RadarComponent");
  qword_1ECEACCD8 = (uint64_t)result;
  off_1ECEAA6E8[0] = (uint64_t (*)())RadarComponentFunction;
  return result;
}

id RadarComponentFunction()
{
  return (id)qword_1ECEACCD8;
}

Class initRadarDraft()
{
  Class result;

  if (qword_1ECEACCD0 != -1)
    dispatch_once(&qword_1ECEACCD0, &__block_literal_global_101);
  result = objc_getClass("RadarDraft");
  qword_1ECEACCE0 = (uint64_t)result;
  off_1ECEAA6F0[0] = (uint64_t (*)())RadarDraftFunction;
  return result;
}

id RadarDraftFunction()
{
  return (id)qword_1ECEACCE0;
}

void sub_18CD86C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18CD88074(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 32);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 56);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMS::DeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25226C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMS::DeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25226C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMS::DeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<AMS::initAMSCore(void)::$_0,std::allocator<AMS::initAMSCore(void)::$_0>,AMSCore::BagService ()(void)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMS::initAMSCore(void)::$_0,std::allocator<AMS::initAMSCore(void)::$_0>,AMSCore::BagService ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2521760;
  return result;
}

void std::__function::__func<AMS::initAMSCore(void)::$_0,std::allocator<AMS::initAMSCore(void)::$_0>,AMSCore::BagService ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2521760;
}

void std::__function::__func<AMS::initAMSCore(void)::$_0,std::allocator<AMS::initAMSCore(void)::$_0>,AMSCore::BagService ()(void)>::operator()(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  __n128 __p;
  char v11;
  void *v12[2];
  char v13;
  __int128 v14;
  char v15;

  std::string::basic_string[abi:ne180100]<0>(v8, "AMSMetrics");
  std::string::basic_string[abi:ne180100]<0>(v6, "1");
  v2 = operator new(0x68uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E2522DC8;
  std::string::basic_string[abi:ne180100]<0>(&v14, "");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  AMSCore::StaticBundleInfoProvider::StaticBundleInfoProvider((uint64_t)(v2 + 3), &v14, (__int128 *)v12, &__p);
  if (v11 < 0)
    operator delete((void *)__p.n128_u64[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete((void *)v14);
  *(_QWORD *)&v14 = v2 + 3;
  *((_QWORD *)&v14 + 1) = v2;
  AMSCore::BagService::BagService(a1, (uint64_t)v8, (uint64_t)v6, &v14);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_18CD88310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count *v33;
  uint64_t v34;
  void *v36;

  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v34 - 33) < 0)
    operator delete(*(void **)(v34 - 56));
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v36);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMS::initAMSCore(void)::$_0,std::allocator<AMS::initAMSCore(void)::$_0>,AMSCore::BagService ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3AMS11initAMSCoreEvE3$_0"
    || ((v3 & (unint64_t)"ZN3AMS11initAMSCoreEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN3AMS11initAMSCoreEvE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3AMS11initAMSCoreEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMS::initAMSCore(void)::$_0,std::allocator<AMS::initAMSCore(void)::$_0>,AMSCore::BagService ()(void)>::target_type()
{
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:fe180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E251A538, MEMORY[0x1E0DE42D0]);
}

void sub_18CD88500(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMSCore::StaticBundleInfoProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::StaticBundleInfoProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::StaticBundleInfoProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_18CD88AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _handleNotification(uint64_t a1, void *a2)
{
  void (**v2)(void);
  void (**v3)(void);

  if (a2)
  {
    objc_msgSend(a2, "observerBlock");
    v2 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = v2;
      v2[2]();
      v2 = v3;
    }

  }
}

void sub_18CD907C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CD90E68(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CD923A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CD93B20(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CD97E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CD9B62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getNFHardwareManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getNFHardwareManagerClass_softClass;
  v7 = getNFHardwareManagerClass_softClass;
  if (!getNFHardwareManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getNFHardwareManagerClass_block_invoke;
    v3[3] = &unk_1E253DDB8;
    v3[4] = &v4;
    __getNFHardwareManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18CD9B6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getNFSecureElementClass_block_invoke(uint64_t a1)
{
  NearFieldLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("NFSecureElement");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getNFSecureElementClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    NearFieldLibrary();
  }
}

void NearFieldLibrary()
{
  void *v0;

  if (!NearFieldLibraryCore_frameworkLibrary)
  {
    NearFieldLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!NearFieldLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

AMSDeviceAccountPrivacyAcknowledgementTask *__getNFHardwareManagerClass_block_invoke(uint64_t a1)
{
  AMSDeviceAccountPrivacyAcknowledgementTask *result;
  AMSDeviceAccountPrivacyAcknowledgementTask *v3;
  SEL v4;
  id v5;
  id v6;

  NearFieldLibrary();
  result = (AMSDeviceAccountPrivacyAcknowledgementTask *)objc_getClass("NFHardwareManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getNFHardwareManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (AMSDeviceAccountPrivacyAcknowledgementTask *)abort_report_np();
    return -[AMSDeviceAccountPrivacyAcknowledgementTask initWithAccount:bag:](v3, v4, v5, v6);
  }
  return result;
}

void sub_18CD9E1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CD9EA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CDA0284(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CDA437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDA711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDA7A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *__getMKBDeviceUnlockedSinceBootSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1ECEAD128)
  {
    v2 = (void *)qword_1ECEAD128;
  }
  else
  {
    qword_1ECEAD128 = _sl_dlopen();
    v2 = (void *)qword_1ECEAD128;
    if (!qword_1ECEAD128)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "MKBDeviceUnlockedSinceBoot");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_99 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CDADB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDAECCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDB35D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDB39EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CDB3A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDB3EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDB4324(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CDB4610(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CDB4798(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CDB4E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDB57D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _handleClearCachesNotification()
{
  NSObject *v0;

  +[AMSEngagementClientData _sharedQueue](AMSEngagementClientData, "_sharedQueue");
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v0, &__block_literal_global_69_0);

}

void ___handleClearCachesNotification_block_invoke()
{
  void *v0;
  NSObject *v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  +[AMSLogConfig sharedEngagementConfig](AMSLogConfig, "sharedEngagementConfig");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v0, "OSLogObject");
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v3 = 138543362;
    v4 = objc_opt_class();
    _os_log_impl(&dword_18C849000, v1, OS_LOG_TYPE_DEBUG, "%{public}@: Client data changed", (uint8_t *)&v3, 0xCu);
  }

  v2 = (void *)kSharedInstance;
  kSharedInstance = 0;

}

id AMSCustomCodableError(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;

  v11 = a6;
  v12 = a5;
  v13 = a4;
  v14 = a3;
  v15 = a1;
  v16 = (void *)objc_opt_class();
  AMSCustomSubclassedError(v15, a2, v14, v13, v12, v11, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id AMSCustomSubclassedError(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v26;
  void *v27;
  id v28;
  _QWORD v29[4];
  id v30;

  v13 = a1;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  if ((objc_msgSend(a7, "isSubclassOfClass:", objc_opt_class()) & 1) == 0)
  {
    v26 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("errorClass must be subclass of NSError. errorClass = %@"), a7);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "exceptionWithName:reason:userInfo:", CFSTR("AMSErrorException"), v27, 0);
    v28 = (id)objc_claimAutoreleasedReturnValue();

    objc_exception_throw(v28);
  }
  if (!objc_msgSend(v14, "length") && !objc_msgSend(v15, "length"))
  {

    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("DEFAULT_ERROR_TITLE"), &stru_1E2548760, 0);
    v19 = objc_claimAutoreleasedReturnValue();

    v15 = 0;
    v14 = (id)v19;
  }
  v20 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (v15 && v14)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v14, v15);
    v21 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v14)
      v22 = v14;
    else
      v22 = v15;
    v21 = v22;
  }
  v23 = v21;
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v21, *MEMORY[0x1E0CB2938]);

  if (v14)
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v14, CFSTR("AMSDescription"));
  if (v15)
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v15, CFSTR("AMSFailureReason"));
  if (v17)
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0CB3388]);
  if (v16)
  {
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __AMSCustomSubclassedError_block_invoke;
    v29[3] = &unk_1E253FA48;
    v30 = v20;
    objc_msgSend(v16, "enumerateKeysAndObjectsUsingBlock:", v29);

  }
  objc_msgSend(a7, "errorWithDomain:code:userInfo:", v13, a2, v20);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

id AMSErrorWithMultipleUnderlyingErrors(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v14 = *MEMORY[0x1E0CB2F70];
  v15[0] = a4;
  v7 = (void *)MEMORY[0x1E0C99D80];
  v8 = a4;
  v9 = a3;
  v10 = a2;
  objc_msgSend(v7, "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  AMSCustomError(CFSTR("AMSErrorDomain"), a1, v10, v9, v11, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id AMSErrorWithUserInfo(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  return AMSCustomError(CFSTR("AMSErrorDomain"), a1, a2, a3, a4, a5);
}

void sub_18CDBFE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDC01EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDC0670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDC09AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDC0BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDC1404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18CDC27F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, __int16 a14, uint64_t a15, __int16 a16, __int128 a17)
{
  id v17;
  void *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(a1);
    AMSSetLogKeyIfNeeded();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v19)
    {
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v19, "OSLogObject");
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = objc_opt_class();
      LODWORD(buf) = 138544386;
      *(_QWORD *)((char *)&buf + 4) = v21;
      WORD6(buf) = 2114;
      *(_QWORD *)((char *)&buf + 14) = v18;
      a14 = 2114;
      a16 = 2114;
      WORD1(a17) = 2114;
      *(_QWORD *)((char *)&a17 + 4) = v17;
      _os_log_impl(&dword_18C849000, v20, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Error fetching state for feature flag %{public}@/%{public}@: %{public}@", (uint8_t *)&buf, 0x34u);
    }

    objc_end_catch();
    JUMPOUT(0x18CDC27B0);
  }
  _Unwind_Resume(a1);
}

void sub_18CDC29B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, __int16 a14, uint64_t a15, __int16 a16, __int128 a17)
{
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v24 = v17;
  if (a2 == 1)
  {
    v18 = objc_begin_catch(a1);
    AMSSetLogKeyIfNeeded();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v20)
    {
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v20, "OSLogObject");
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = objc_opt_class();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v24);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138544642;
      *(_QWORD *)((char *)&buf + 4) = v22;
      WORD6(buf) = 2114;
      *(_QWORD *)((char *)&buf + 14) = v19;
      a14 = 2114;
      a16 = 2114;
      WORD1(a17) = 2114;
      *(_QWORD *)((char *)&a17 + 4) = v23;
      WORD6(a17) = 2114;
      *(_QWORD *)((char *)&a17 + 14) = v18;
      _os_log_impl(&dword_18C849000, v21, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Error fetching state for feature flag and level %{public}@/%{public}@/%{public}@: %{public}@", (uint8_t *)&buf, 0x3Eu);

    }
    objc_end_catch();
    JUMPOUT(0x18CDC296CLL);
  }
  _Unwind_Resume(a1);
}

void sub_18CDCEBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAPRequestHandlerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEAD1F0)
  {
    qword_1ECEAD1F0 = _sl_dlopen();
    if (!qword_1ECEAD1F0)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("APRequestHandler");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CDD5B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDDD57C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

Class __getFLFollowUpControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEAD210)
  {
    qword_1ECEAD210 = _sl_dlopen();
    if (!qword_1ECEAD210)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("FLFollowUpController");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CDDFA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDDFBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDDFCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDDFDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDDFFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE011C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE026C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE06D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE0E64(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

Class __getFLFollowUpActionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEAD220)
  {
    qword_1ECEAD220 = _sl_dlopen();
    if (!qword_1ECEAD220)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("FLFollowUpAction");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_109 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id getFLUserInfoPropertyDontDisplayDate()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getFLUserInfoPropertyDontDisplayDateSymbolLoc_ptr;
  v7 = getFLUserInfoPropertyDontDisplayDateSymbolLoc_ptr;
  if (!getFLUserInfoPropertyDontDisplayDateSymbolLoc_ptr)
  {
    v1 = (void *)CoreFollowUpLibrary();
    v0 = (id *)dlsym(v1, "FLUserInfoPropertyDontDisplayDate");
    v5[3] = (uint64_t)v0;
    getFLUserInfoPropertyDontDisplayDateSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

void sub_18CDE2178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE250C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE2820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE2AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDE36CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CoreFollowUpLibrary()
{
  uint64_t v0;
  void *v2;

  if (CoreFollowUpLibraryCore_frameworkLibrary)
    return CoreFollowUpLibraryCore_frameworkLibrary;
  CoreFollowUpLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = CoreFollowUpLibraryCore_frameworkLibrary;
  if (!CoreFollowUpLibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

Class __getFLFollowUpItemClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;
  id v5;

  CoreFollowUpLibrary();
  result = objc_getClass("FLFollowUpItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getFLFollowUpItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)abort_report_np();
    return (Class)+[AMSFollowUpMetricsEvent eventFromMetricsDictionary:](v3, v4, v5);
  }
  return result;
}

void sub_18CDE4314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getFLNotificationOptionLockscreen()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getFLNotificationOptionLockscreenSymbolLoc_ptr;
  v7 = getFLNotificationOptionLockscreenSymbolLoc_ptr;
  if (!getFLNotificationOptionLockscreenSymbolLoc_ptr)
  {
    v1 = (void *)CoreFollowUpLibrary_0();
    v0 = (id *)dlsym(v1, "FLNotificationOptionLockscreen");
    v5[3] = (uint64_t)v0;
    getFLNotificationOptionLockscreenSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

id getFLNotificationOptionNotificationCenter()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getFLNotificationOptionNotificationCenterSymbolLoc_ptr;
  v7 = getFLNotificationOptionNotificationCenterSymbolLoc_ptr;
  if (!getFLNotificationOptionNotificationCenterSymbolLoc_ptr)
  {
    v1 = (void *)CoreFollowUpLibrary_0();
    v0 = (id *)dlsym(v1, "FLNotificationOptionNotificationCenter");
    v5[3] = (uint64_t)v0;
    getFLNotificationOptionNotificationCenterSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

id getFLNotificationOptionBannerAlert()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)getFLNotificationOptionBannerAlertSymbolLoc_ptr;
  v7 = getFLNotificationOptionBannerAlertSymbolLoc_ptr;
  if (!getFLNotificationOptionBannerAlertSymbolLoc_ptr)
  {
    v1 = (void *)CoreFollowUpLibrary_0();
    v0 = (id *)dlsym(v1, "FLNotificationOptionBannerAlert");
    v5[3] = (uint64_t)v0;
    getFLNotificationOptionBannerAlertSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v3 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

void sub_18CDE4740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFLFollowUpNotificationClass_block_invoke(uint64_t a1)
{
  Class result;

  CoreFollowUpLibrary_0();
  result = objc_getClass("FLFollowUpNotification");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getFLFollowUpNotificationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)CoreFollowUpLibrary_0();
  }
  return result;
}

uint64_t CoreFollowUpLibrary_0()
{
  uint64_t v0;
  void *v2;

  if (CoreFollowUpLibraryCore_frameworkLibrary_0)
    return CoreFollowUpLibraryCore_frameworkLibrary_0;
  CoreFollowUpLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  v0 = CoreFollowUpLibraryCore_frameworkLibrary_0;
  if (!CoreFollowUpLibraryCore_frameworkLibrary_0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id AMSFraudReportAddDeviceIdentityCertificateAndSignatureToRequest(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  int v11;
  uint64_t v12;
  char *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  AMSDeviceIdentityCertificateTask *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  _QWORD v29[4];
  id v30;
  __int128 buf;
  id (*v32)(uint64_t, void *);
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v5;
  v9 = v6;
  v10 = v7;
  v11 = MGGetBoolAnswer();
  v12 = MEMORY[0x1E0C809B0];
  v13 = "sponseENS2_9HTTPErrorEEERKNS_10shared_ptrIKNS2_13IMediaAccountEEEONS3_7OptionsEENS_9allocatorISN_EEFS4_S7_SD_NSE_ISF_EESL_EEE";
  if (v11)
  {
    +[AMSLogConfig sharedFraudReportConfig](AMSLogConfig, "sharedFraudReportConfig");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v14, "OSLogObject");
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      AMSLogKey();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_impl(&dword_18C849000, v15, OS_LOG_TYPE_INFO, "AMSFraudReport [%{public}@] Attempting to sign with host certificate because we're in VM", (uint8_t *)&buf, 0xCu);

    }
    AMSFraudReportGetSignatureForRequestAfterAddingDeviceIdentityCertificatesOnVM(v8, v9);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v18 = v8;
    v19 = v9;
    v20 = v10;
    v21 = v20;
    if (v18 && v19 && v20)
    {
      v22 = -[AMSDeviceIdentityCertificateTask initWithBag:]([AMSDeviceIdentityCertificateTask alloc], "initWithBag:", v20);
      -[AMSDeviceIdentityCertificateTask performDeviceIdentityRequestForFraudReport](v22, "performDeviceIdentityRequestForFraudReport");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      AMSLogKey();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&buf = v12;
      *((_QWORD *)&buf + 1) = 3221225472;
      v32 = __AMSFraudReportGetSignatureForRequestAfterAddingDeviceIdentityCertificatesOnDevice_block_invoke;
      v33 = &unk_1E2542410;
      v34 = v18;
      v35 = v19;
      v36 = v24;
      v25 = v24;
      objc_msgSend(v23, "thenWithBlock:", &buf);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v12 = MEMORY[0x1E0C809B0];
      v13 = "NSt3__110__function6__funcIPFN7AMSCore21LoadURLMetricsHandler25LoadURLMetricsHandlerTaskERKNS2_11HTTPRequest"
            "ERKNS_8expectedINS2_12HTTPResponseENS2_9HTTPErrorEEERKNS_10shared_ptrIKNS2_13IMediaAccountEEEONS3_7OptionsEE"
            "NS_9allocatorISN_EEFS4_S7_SD_NSE_ISF_EESL_EEE"
          + 136;
    }
    else
    {
      +[AMSOptional optionalWithNil](AMSOptional, "optionalWithNil");
      v22 = (AMSDeviceIdentityCertificateTask *)objc_claimAutoreleasedReturnValue();
      +[AMSPromise promiseWithResult:](AMSPromise, "promiseWithResult:", v22);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  v29[0] = v12;
  v29[1] = *((_QWORD *)v13 + 245);
  v29[2] = __AMSFraudReportAddDeviceIdentityCertificateAndSignatureToRequest_block_invoke;
  v29[3] = &unk_1E253FFB8;
  v30 = v8;
  v26 = v8;
  objc_msgSend(v17, "thenWithBlock:", v29);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  return v27;
}

id AMSFraudReportGetSignatureForRequestAfterAddingDeviceIdentityCertificatesOnVM(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  id v16;
  id v17;
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
  {
    AMSLogKey();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((DeviceIdentityIsSupported() & 1) != 0)
    {
      v7 = (void *)objc_opt_new();
      dispatch_get_global_queue(21, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (void *)objc_opt_new();
      v16 = v7;
      v17 = v5;
      v18 = v3;
      v19 = v6;
      v10 = v8;
      DeviceIdentityCreateHostSignatureWithCompletion();

      v11 = v16;
    }
    else
    {
      +[AMSLogConfig sharedFraudReportConfig](AMSLogConfig, "sharedFraudReportConfig");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v13)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v13, "OSLogObject");
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v21 = v6;
        _os_log_impl(&dword_18C849000, v14, OS_LOG_TYPE_ERROR, "AMSFraudReport [%{public}@] Error signing the fraud report score payload. DeviceIdentity is not supported on this platform.", buf, 0xCu);
      }

      +[AMSOptional optionalWithNil](AMSOptional, "optionalWithNil");
      v10 = (id)objc_claimAutoreleasedReturnValue();
      +[AMSPromise promiseWithResult:](AMSPromise, "promiseWithResult:", v10);
      v11 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    +[AMSOptional optionalWithNil](AMSOptional, "optionalWithNil");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[AMSPromise promiseWithResult:](AMSPromise, "promiseWithResult:", v12);
    v11 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v11;
}

uint64_t AMSSetRequestBodyWithParametersAndCertificates(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  objc_class *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  if (!a1 || !a2 || !a3 || !a4)
    return 0;
  v9 = (objc_class *)MEMORY[0x1E0C99DF0];
  v10 = a4;
  v11 = a3;
  v12 = a2;
  v13 = a1;
  v14 = (void *)objc_msgSend([v9 alloc], "initWithData:", v11);

  objc_msgSend(v14, "appendData:", v10);
  objc_msgSend(v14, "base64EncodedStringWithOptions:", 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v12, "mutableCopy");

  objc_msgSend(v16, "setObject:forKeyedSubscript:", v15, CFSTR("baa_cert"));
  v17 = objc_msgSend(v13, "ams_setBodyParameters:encoding:compressBody:error:", v16, 3, 0, a5);

  return v17;
}

id AMSFraudReportHandleResponse(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  AMSSetLogKeyIfNeeded();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  AMSFraudReportIsFeatureSupportedForBag(v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __AMSFraudReportHandleResponse_block_invoke;
  v24[3] = &unk_1E2542438;
  v25 = v11;
  v26 = v10;
  v27 = v14;
  v28 = v9;
  v29 = v12;
  v30 = v13;
  v16 = v13;
  v17 = v12;
  v18 = v9;
  v19 = v14;
  v20 = v10;
  v21 = v11;
  objc_msgSend(v15, "thenWithBlock:", v24);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  return v22;
}

id AMSFraudReportIsFeatureSupportedForBag(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "BOOLForKey:", 0x1E254CFA0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "valuePromise");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __AMSFraudReportIsFeatureSupportedForBag_block_invoke;
    v8[3] = &unk_1E253E440;
    v9 = v2;
    objc_msgSend(v4, "thenWithBlock:", v8);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "continueWithBlock:", &__block_literal_global_12_2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    +[AMSPromise promiseWithResult:](AMSPromise, "promiseWithResult:", MEMORY[0x1E0C9AAA0]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

id AMSFraudReportCallURL(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  AMSURLRequestEncoder *v14;
  void *v15;
  id v16;
  void *v17;
  _QWORD v19[4];
  id v20;

  v9 = a1;
  v10 = a5;
  v11 = a4;
  v12 = a2;
  AMSSetLogKeyIfNeeded();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[AMSURLRequestEncoder initWithBag:]([AMSURLRequestEncoder alloc], "initWithBag:", v10);

  -[AMSURLRequestEncoder setDialogOptions:](v14, "setDialogOptions:", 1);
  -[AMSURLRequestEncoder setUrlKnownToBeTrusted:](v14, "setUrlKnownToBeTrusted:", 1);
  -[AMSURLRequestEncoder setLogUUID:](v14, "setLogUUID:", v13);
  -[AMSURLRequestEncoder requestWithMethod:URL:headers:parameters:](v14, "requestWithMethod:URL:headers:parameters:", a3, v12, v11, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __AMSFraudReportCallURL_block_invoke;
  v19[3] = &unk_1E253DB08;
  v20 = v9;
  v16 = v9;
  objc_msgSend(v15, "thenWithBlock:", v19);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id AMSFraudReportGetFSRHeadersForFraudReportResponse(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  _QWORD v15[4];
  id v16;
  id v17;

  v3 = a1;
  v4 = a2;
  AMSSetLogKeyIfNeeded();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "ams_fsrTransactionID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "ams_fsrNameSpace");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "ams_fsrData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "ams_fsrKeyID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[AMSFraudReportTask ams_performFraudReportRefreshWithAccount:transactionID:nameSpace:fsrData:keyID:](AMSFraudReportTask, "ams_performFraudReportRefreshWithAccount:transactionID:nameSpace:fsrData:keyID:", v4, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __AMSFraudReportGetFSRHeadersForFraudReportResponse_block_invoke;
  v15[3] = &unk_1E25424D0;
  v16 = v5;
  v17 = v3;
  v11 = v3;
  v12 = v5;
  objc_msgSend(v10, "thenWithBlock:", v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_18CDE93E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDEB82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDEBA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AMSHTTPArchiveControllerUpdateHarURLFilters()
{
  return +[AMSHTTPArchiveController _updateHarFileFilters](AMSHTTPArchiveController, "_updateHarFileFilters");
}

void sub_18CDEDCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_18CDEE878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CDEEBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CDEEC84(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSSecItemCopyMatchingWithTimeFault(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  _WORD v44[17];

  *(_QWORD *)&v44[13] = *MEMORY[0x1E0C80C00];
  +[AMSLogConfig sharedKeychainConfig](AMSLogConfig, "sharedKeychainConfig");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v6, "OSLogObject");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    AMSLogKey();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1E0CB3940];
    objc_opt_class();
    v10 = objc_opt_class();
    v11 = v10;
    if (v8)
    {
      AMSLogKey();
      v2 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "stringWithFormat:", CFSTR("%@: [%@] "), v11, v2);
    }
    else
    {
      objc_msgSend(v9, "stringWithFormat:", CFSTR("%@: "), v10);
    }
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    AMSHashIfNeeded(a1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v42 = v3;
    v43 = 2114;
    *(_QWORD *)v44 = v12;
    _os_log_impl(&dword_18C849000, v7, OS_LOG_TYPE_INFO, "%{public}@Beginning keychain query: %{public}@", buf, 0x16u);
    if (v8)
    {

      v3 = (void *)v2;
    }

  }
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = _secItemCopyMatchingFunc(a1, a2);
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "timeIntervalSinceDate:", v13);
  v17 = v16;
  +[AMSLogConfig sharedKeychainConfig](AMSLogConfig, "sharedKeychainConfig");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v18, "OSLogObject");
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    AMSLogKey();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)MEMORY[0x1E0CB3940];
    objc_opt_class();
    v22 = objc_opt_class();
    v23 = v22;
    if (v20)
    {
      AMSLogKey();
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "stringWithFormat:", CFSTR("%@: [%@] "), v23, v3);
    }
    else
    {
      objc_msgSend(v21, "stringWithFormat:", CFSTR("%@: "), v22);
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v42 = v24;
    v43 = 1024;
    *(_DWORD *)v44 = v14;
    v44[2] = 2048;
    *(double *)&v44[3] = v17;
    _os_log_impl(&dword_18C849000, v19, OS_LOG_TYPE_INFO, "%{public}@Keychain query finished with status: %d elapsedTime: %f", buf, 0x1Cu);
    if (v20)
    {

      v24 = v3;
    }

  }
  if (os_variant_has_internal_content() && v17 > 2.0)
  {
    v25 = +[AMSUnitTests isRunningUnitTests](AMSUnitTests, "isRunningUnitTests");
    +[AMSLogConfig sharedKeychainConfig](AMSLogConfig, "sharedKeychainConfig");
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = (void *)v26;
    if (v25)
    {
      if (!v26)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v27, "OSLogObject");
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        AMSLogKey();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = (void *)MEMORY[0x1E0CB3940];
        objc_opt_class();
        v31 = objc_opt_class();
        v32 = v31;
        if (v29)
        {
          AMSLogKey();
          v3 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "stringWithFormat:", CFSTR("%@: [%@] "), v32, v3);
        }
        else
        {
          objc_msgSend(v30, "stringWithFormat:", CFSTR("%@: "), v31);
        }
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v42 = v33;
        v43 = 2048;
        *(double *)v44 = v17;
        _os_log_impl(&dword_18C849000, v28, OS_LOG_TYPE_ERROR, "%{public}@Keychain query exceeded expected duration. Took %f seconds.", buf, 0x16u);
        if (v29)
        {

          v33 = v3;
        }

      }
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      +[AMSLogConfig sharedKeychainConfig](AMSLogConfig, "sharedKeychainConfig");
      v34 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "postNotificationName:object:userInfo:", CFSTR("com.apple.AppleMediaServicesTests.FaultLogged"), v34, 0);
    }
    else
    {
      if (!v26)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v27, "OSLogObject");
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      {
        AMSLogKey();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = (void *)MEMORY[0x1E0CB3940];
        objc_opt_class();
        v37 = objc_opt_class();
        v38 = v37;
        if (v35)
        {
          AMSLogKey();
          v3 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "stringWithFormat:", CFSTR("%@: [%@] "), v38, v3);
        }
        else
        {
          objc_msgSend(v36, "stringWithFormat:", CFSTR("%@: "), v37);
        }
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v42 = v39;
        v43 = 2048;
        *(double *)v44 = v17;
        _os_log_impl(&dword_18C849000, v34, OS_LOG_TYPE_FAULT, "%{public}@Keychain query exceeded expected duration. Took %f seconds.", buf, 0x16u);
        if (v35)
        {

          v39 = v3;
        }

      }
    }

  }
  return v14;
}

id AMSKeychainError(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a1;
  if (a2)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, CFSTR("AMSStatusCode"));

  }
  else
  {
    v4 = 0;
  }
  AMSCustomError(CFSTR("AMSErrorDomain"), 600, CFSTR("Keychain Error"), v3, v4, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_18CDF8020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL AMSIsEntitledForDirectKeychainAccess()
{
  return +[AMSProcessInfo hasValue:inArrayForEntitlement:](AMSProcessInfo, "hasValue:inArrayForEntitlement:", CFSTR("apple"), CFSTR("keychain-access-groups"));
}

id _AMSDescriptionForError(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v2, "appendString:", CFSTR("{ "));
  objc_msgSend(v1, "domain");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendFormat:", CFSTR("Error domain=%@, code=%ld"), v3, objc_msgSend(v1, "code"));

  objc_msgSend(v1, "ams_underlyingError");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v2, "appendString:", CFSTR(", underlyingError={ "));
    objc_msgSend(v1, "ams_underlyingError");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (*)(void))_AMSDescriptionForError)();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v6);

    objc_msgSend(v2, "appendString:", CFSTR(" }"));
  }
  objc_msgSend(v1, "ams_multipleUnderlyingErrors");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  if (v8)
  {
    objc_msgSend(v2, "appendString:", CFSTR(", multipleUnderlyingErrors=[ "));
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    objc_msgSend(v1, "ams_multipleUnderlyingErrors");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v17;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v17 != v12)
            objc_enumerationMutation(v9);
          _AMSDescriptionForError(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v13));
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "appendString:", v14);

          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v11);
    }

    objc_msgSend(v2, "appendString:", CFSTR(" ]"));
  }

  return v2;
}

id AMSHash(void *a1)
{
  return AMSHashAndLogCacheMisses(a1, 1);
}

id AMSHashAndLogCacheMisses(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a1;
  if (v3)
  {
    if (_MergedGlobals_116 != -1)
      dispatch_once(&_MergedGlobals_116, &__block_literal_global_67);
    v4 = (id)qword_1ECEAD2D8;
    objc_msgSend(v4, "objectForKey:canLogCacheMisses:", v3, a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      v7 = v5;
    }
    else
    {
      objc_msgSend(v3, "ams_sha512HashStringUsingEncoding:error:", 10, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("H:"));
        objc_msgSend(v8, "substringToIndex:", 5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "appendString:", v9);

        objc_msgSend(v8, "substringFromIndex:", objc_msgSend(v8, "length") - 5);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "appendString:", v10);

        objc_msgSend(v4, "setObject:forKey:", v7, v3);
      }
      else
      {
        v7 = 0;
      }

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

__CFString *AMSLogableErrors(void *a1)
{
  id v1;
  __CFString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("[\n"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          -[__CFString appendString:](v2, "appendString:", CFSTR("\t"), (_QWORD)v11);
          AMSLogableError(v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString appendString:](v2, "appendString:", v9);

          -[__CFString appendString:](v2, "appendString:", CFSTR("\n"));
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    -[__CFString appendString:](v2, "appendString:", CFSTR("]"));
  }
  else
  {
    v2 = CFSTR("(null)");
  }

  return v2;
}

void sub_18CDFD538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t i;

  for (i = 72; i != -24; i -= 24)
    __destructor_8_s0_s16((id *)(&a14 + i));
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s16(id *a1)
{

}

void sub_18CDFDCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AMSAttributesAvailableIntervalKeyPath(uint64_t a1)
{
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("availableInterval"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("attributes"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t AMSAttributesKeyPath(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("attributes"), a1);
}

id AMSAttributesOffersKeyPath(uint64_t a1)
{
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("offers"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("attributes"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t AMSOffersKeyPath(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("offers"), a1);
}

uint64_t AMSRelationshipsContentDataKeyPath()
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@.%@"), CFSTR("relationships"), CFSTR("contents"), CFSTR("data"));
}

void sub_18CE054E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t soft_MKBDeviceUnlockedSinceBoot()
{
  uint64_t (*v0)(void);
  _Unwind_Exception *v2;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (uint64_t (*)(void))_MergedGlobals_122;
  v7 = _MergedGlobals_122;
  if (!_MergedGlobals_122)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getMKBDeviceUnlockedSinceBootSymbolLoc_block_invoke_0;
    v3[3] = &unk_1E253DDB8;
    v3[4] = &v4;
    __getMKBDeviceUnlockedSinceBootSymbolLoc_block_invoke_0((uint64_t)v3);
    v0 = (uint64_t (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v2 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v2);
  }
  return v0();
}

void *__getMKBDeviceUnlockedSinceBootSymbolLoc_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1ECEAD5E8)
  {
    v2 = (void *)qword_1ECEAD5E8;
  }
  else
  {
    qword_1ECEAD5E8 = _sl_dlopen();
    v2 = (void *)qword_1ECEAD5E8;
    if (!qword_1ECEAD5E8)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "MKBDeviceUnlockedSinceBoot");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_122 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CE09810(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18CE0C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE0C238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE0F3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE0F70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE0F8CC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id AMSMetricsDatabaseBlockWithKeepAlive(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a1;
  v4 = a2;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __AMSMetricsDatabaseBlockWithKeepAlive_block_invoke;
  v9[3] = &unk_1E253DC28;
  v10 = v3;
  v11 = v4;
  v5 = v4;
  v6 = v3;
  v7 = _Block_copy(v9);

  return v7;
}

void sub_18CE102A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18CE10708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE110A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18CE1123C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE1164C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE11C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE12BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE12F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE13514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE13BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE13F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE14278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE14664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE14B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE162B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  _Block_object_dispose((const void *)(v41 - 192), 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_18CE19EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE1A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE1A944(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18CE1CD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_18CE1D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_18CE20538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE24458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18CE244D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18CE24628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18CE247E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18CE24940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18CE24A5C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_destroyWeak((id *)(v2 - 40));

  _Unwind_Resume(a1);
}

void sub_18CE24AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18CE24CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE24DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE250C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE254D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE26624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE27398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_18CE279B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE27ABC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18CE281E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE297A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE2AAAC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CE2B350(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18CE2D8DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18CE2D9CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18CE2DAC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18CE2E488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE2EA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE2F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE2F6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE32578(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id AMSNormalisedCountryCodeForPaymentRequest(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL4 v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DC8], "ISOCountryCodes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  AMSMaybeUpperCaseNormalisedStringIfFoundInList(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = +[AMSUnitTests isRunningUnitTests](AMSUnitTests, "isRunningUnitTests");
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (v4)
    {
      if (!v5)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v6, "OSLogObject");
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        AMSLogKey();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138543618;
        v13 = v8;
        v14 = 2114;
        v15 = v1;
        _os_log_impl(&dword_18C849000, v7, OS_LOG_TYPE_ERROR, "AMSNormalisedCountryCodeForPaymentRequest: [%{public}@] invalid country code: %{public}@", (uint8_t *)&v12, 0x16u);

      }
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v9 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "postNotificationName:object:userInfo:", CFSTR("com.apple.AppleMediaServicesTests.FaultLogged"), v9, 0);
    }
    else
    {
      if (!v5)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v6, "OSLogObject");
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        AMSLogKey();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138543618;
        v13 = v10;
        v14 = 2114;
        v15 = v1;
        _os_log_impl(&dword_18C849000, v9, OS_LOG_TYPE_FAULT, "AMSNormalisedCountryCodeForPaymentRequest: [%{public}@] invalid country code: %{public}@", (uint8_t *)&v12, 0x16u);

      }
    }

  }
  return v3;
}

void sub_18CE33624(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18CE33794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initPKPaymentSetupConfiguration()
{
  Class result;

  if (qword_1ECEACCF0 != -1)
    dispatch_once(&qword_1ECEACCF0, &__block_literal_global_103);
  result = objc_getClass("PKPaymentSetupConfiguration");
  _MergedGlobals_3_5 = (uint64_t)result;
  _MergedGlobals_72[0] = (uint64_t (*)())PKPaymentSetupConfigurationFunction;
  return result;
}

id PKPaymentSetupConfigurationFunction()
{
  return (id)_MergedGlobals_3_5;
}

Class initPKPaymentSetupViewController()
{
  Class result;

  if (qword_1ECEACD00 != -1)
    dispatch_once(&qword_1ECEACD00, &__block_literal_global_28_1);
  result = objc_getClass("PKPaymentSetupViewController");
  qword_1ECEACCF8 = (uint64_t)result;
  off_1ECEAA700 = (uint64_t (*)())PKPaymentSetupViewControllerFunction;
  return result;
}

id PKPaymentSetupViewControllerFunction()
{
  return (id)qword_1ECEACCF8;
}

id getPKPaymentSummaryItemClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPKPaymentSummaryItemClass_softClass;
  v7 = getPKPaymentSummaryItemClass_softClass;
  if (!getPKPaymentSummaryItemClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPKPaymentSummaryItemClass_block_invoke;
    v3[3] = &unk_1E253DDB8;
    v3[4] = &v4;
    __getPKPaymentSummaryItemClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18CE36EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPKPaymentContentItemClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPKPaymentContentItemClass_softClass;
  v7 = getPKPaymentContentItemClass_softClass;
  if (!getPKPaymentContentItemClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPKPaymentContentItemClass_block_invoke;
    v3[3] = &unk_1E253DDB8;
    v3[4] = &v4;
    __getPKPaymentContentItemClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18CE371F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE390C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE39848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE3A234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_18CE3A890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE3AE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE3CA00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(v3 + 16))(v3);
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

Class __getPKPaymentSummaryItemClass_block_invoke(uint64_t a1)
{
  Class result;

  PassKitCoreLibrary_1();
  result = objc_getClass("PKPaymentSummaryItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKPaymentSummaryItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)PassKitCoreLibrary_1();
  }
  return result;
}

uint64_t PassKitCoreLibrary_1()
{
  uint64_t v0;
  void *v2;

  if (PassKitCoreLibraryCore_frameworkLibrary_1)
    return PassKitCoreLibraryCore_frameworkLibrary_1;
  PassKitCoreLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  v0 = PassKitCoreLibraryCore_frameworkLibrary_1;
  if (!PassKitCoreLibraryCore_frameworkLibrary_1)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

AMSPaymentSheetRequest *__getPKPaymentContentItemClass_block_invoke(uint64_t a1)
{
  AMSPaymentSheetRequest *result;
  AMSPaymentSheetRequest *v3;
  SEL v4;

  PassKitCoreLibrary_1();
  result = (AMSPaymentSheetRequest *)objc_getClass("PKPaymentContentItem");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKPaymentContentItemClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (AMSPaymentSheetRequest *)abort_report_np();
    return -[AMSPaymentSheetRequest init](v3, v4);
  }
  return result;
}

void sub_18CE43C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18CE44FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18CE46268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPKPaymentRequestClass_block_invoke(uint64_t a1)
{
  PassKitCoreLibrary_2();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PKPaymentRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_1_14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    PassKitCoreLibrary_2();
  }
}

void PassKitCoreLibrary_2()
{
  void *v0;

  if (!PassKitCoreLibraryCore_frameworkLibrary_2)
  {
    PassKitCoreLibraryCore_frameworkLibrary_2 = _sl_dlopen();
    if (!PassKitCoreLibraryCore_frameworkLibrary_2)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getPKPaymentMerchantSessionClass_block_invoke_0(uint64_t a1)
{
  Class result;
  uint64_t v3;

  PassKitCoreLibrary_2();
  result = objc_getClass("PKPaymentMerchantSession");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEACBD8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getPKPaymentAuthorizationControllerClass_block_invoke(v3);
  }
  return result;
}

Class __getPKPaymentAuthorizationControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEACBE8)
  {
    qword_1ECEACBE8 = _sl_dlopen();
    if (!qword_1ECEACBE8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("PKPaymentAuthorizationController");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECEACBE0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getPKPaymentAuthorizationResultClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  PassKitCoreLibrary_2();
  result = objc_getClass("PKPaymentAuthorizationResult");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKPaymentAuthorizationResultClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getPKPaymentRequestPaymentMethodUpdateClass_block_invoke(v3);
  }
  return result;
}

Class __getPKPaymentRequestPaymentMethodUpdateClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;

  PassKitCoreLibrary_2();
  result = objc_getClass("PKPaymentRequestPaymentMethodUpdate");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getPKPaymentRequestPaymentMethodUpdateClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)abort_report_np();
    return (Class)+[AMSPaymentValidationService _isEntitledForDirectAccess](v3, v4);
  }
  return result;
}

void sub_18CE483DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getOBPrivacyAppleIDIdentifier()
{
  id *v0;
  _Unwind_Exception *v2;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)_MergedGlobals_136;
  v7 = _MergedGlobals_136;
  if (!_MergedGlobals_136)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getOBPrivacyAppleIDIdentifierSymbolLoc_block_invoke;
    v3[3] = &unk_1E253DDB8;
    v3[4] = &v4;
    __getOBPrivacyAppleIDIdentifierSymbolLoc_block_invoke((uint64_t)v3);
    v0 = (id *)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v2 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v2);
  }
  return *v0;
}

void *__getOBPrivacyAppleIDIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1ECEAD7B8)
  {
    v2 = (void *)qword_1ECEAD7B8;
  }
  else
  {
    qword_1ECEAD7B8 = _sl_dlopen();
    v2 = (void *)qword_1ECEAD7B8;
    if (!qword_1ECEAD7B8)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "OBPrivacyAppleIDIdentifier");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_136 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CE495D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t initBYSetupAssistantNeedsToRun()
{
  if (qword_1ECEAD800 != -1)
    dispatch_once(&qword_1ECEAD800, &__block_literal_global_199);
  softLinkBYSetupAssistantNeedsToRun = (uint64_t (*)())dlsym((void *)qword_1ECEAD808, "BYSetupAssistantNeedsToRun");
  return softLinkBYSetupAssistantNeedsToRun();
}

BOOL AMSPromiseClassCompatibleWithFinishedPromise(uint64_t a1)
{
  return objc_opt_class() == a1 || objc_opt_class() == a1;
}

void sub_18CE4ED24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18CE51A7C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18CE5353C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE53710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE53924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE59B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE5AC50(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CE63958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE68EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE6A73C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void *__getMKBDeviceUnlockedSinceBootSymbolLoc_block_invoke_1(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1ECEACC08)
  {
    v2 = (void *)qword_1ECEACC08;
  }
  else
  {
    qword_1ECEACC08 = _sl_dlopen();
    v2 = (void *)qword_1ECEACC08;
    if (!qword_1ECEACC08)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "MKBDeviceUnlockedSinceBoot");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  off_1ECEACC00 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CE6C9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE6CDA4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_18CE705E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSimulateCrashSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1ECEAD868)
  {
    v2 = (void *)qword_1ECEAD868;
  }
  else
  {
    qword_1ECEAD868 = _sl_dlopen();
    v2 = (void *)qword_1ECEAD868;
    if (!qword_1ECEAD868)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "SimulateCrash");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_141 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18CE7269C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CE72784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_18CE727E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CE72958(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18CE72B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18CE72BE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18CE72C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void AMSSQLiteBindFoundationValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  const char *v8;
  id v9;

  v9 = a1;
  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v9, "bindString:atPosition:", v5, a2);
  }
  else if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v9, "bindData:atPosition:", v5, a2);
        goto LABEL_16;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v5, "absoluteString");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "bindString:atPosition:", v6, a2);

        goto LABEL_16;
      }
      v7 = objc_retainAutorelease(v5);
      v8 = (const char *)objc_msgSend(v7, "objCType");
      if (strcmp(v8, "d") && strcmp(v8, "f"))
      {
        objc_msgSend(v9, "bindInt64:atPosition:", objc_msgSend(v7, "longLongValue"), a2);
        goto LABEL_16;
      }
      objc_msgSend(v7, "doubleValue");
    }
    objc_msgSend(v9, "bindDouble:atPosition:", a2);
  }
  else
  {
    objc_msgSend(v9, "bindNullAtPosition:", a2);
  }
LABEL_16:

}

void sub_18CE73030(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id AMSSQLiteCopyFoundationValue(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  v4 = 0;
  switch(objc_msgSend(v3, "_columnTypeForColumnIndex:", a2))
  {
    case 1u:
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v3, "int64ForColumnIndex:", a2));
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    case 2u:
      v6 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v3, "doubleForColumnIndex:", a2);
      objc_msgSend(v6, "numberWithDouble:");
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    case 3u:
      objc_msgSend(v3, "stringForColumnIndex:", a2);
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    case 5u:
      goto LABEL_7;
    default:
      objc_msgSend(v3, "dataForColumnIndex:", a2);
      v5 = objc_claimAutoreleasedReturnValue();
LABEL_6:
      v4 = (void *)v5;
LABEL_7:

      return v4;
  }
}

void sub_18CE74190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE7442C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE74700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE74EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE752B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id AMSSQLiteCreateError(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v11 = CFSTR("AMSSQLiteErrorCode");
  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a2;
  objc_msgSend(v5, "numberWithInt:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  AMSCustomError(CFSTR("AMSSQLiteErrorDomain"), a1, v6, 0, v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_18CE77E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE781C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE78794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE791D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE79568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE79770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE79938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE79B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE79CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE79F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AMSSQLiteGetCurrentError(sqlite3 *a1)
{
  int v2;
  int v3;
  char *v4;
  void *v5;
  id v6;
  void *v7;

  v2 = sqlite3_errcode(a1);
  if (v2)
  {
    v3 = v2;
    v4 = (char *)sqlite3_errmsg(a1);
    if (v4)
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v4);
      v6 = objc_alloc(MEMORY[0x1E0C99D80]);
      v4 = (char *)objc_msgSend(v6, "initWithObjectsAndKeys:", v5, *MEMORY[0x1E0CB2D50], 0);

    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", 0x1E2562A20, v3, v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void AMSSQLiteCloseDatabase(sqlite3 *a1)
{
  int v1;
  int v2;
  void *v3;
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = sqlite3_close(a1);
    if (v1)
    {
      v2 = v1;
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v3)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v3, "OSLogObject");
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5[0] = 67109120;
        v5[1] = v2;
        _os_log_impl(&dword_18C849000, v4, OS_LOG_TYPE_ERROR, "Error closing database. closeResult = %d", (uint8_t *)v5, 8u);
      }

    }
  }
}

BOOL AMSSQLiteTruncateDatabase(void *a1)
{
  _BOOL8 v1;
  int v3;
  sqlite3 *ppDb;

  ppDb = 0;
  if (sqlite3_open_v2((const char *)objc_msgSend(objc_retainAutorelease(a1), "fileSystemRepresentation"), &ppDb, 2, 0))
  {
    return 0;
  }
  v3 = 129;
  v1 = sqlite3_file_control(ppDb, 0, 101, &v3) == 0;
  sqlite3_close(ppDb);
  return v1;
}

void sub_18CE7BD74(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_18CE7C120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18CE7CBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE7CEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18CE7D354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18CE7D978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_18CE7E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_18CE7F054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AMSHTTPArchiveControllerShouldSaveToDisk()
{
  void *v0;
  NSObject *v1;
  void *v2;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v0, "OSLogObject");
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    AMSLogKey();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = 138543362;
    v5 = v2;
    _os_log_impl(&dword_18C849000, v1, OS_LOG_TYPE_DEFAULT, "%{public}@: [AMSStreamHTTPArchiveEntryController] Received should save HAR to disk", (uint8_t *)&v4, 0xCu);

  }
  return +[AMSStreamHTTPArchiveEntryController ams_streamEntriesToDisk](AMSStreamHTTPArchiveEntryController, "ams_streamEntriesToDisk");
}

uint64_t _AMSHTTPArchiveControllerShouldSaveToDiskDecompressed()
{
  void *v0;
  NSObject *v1;
  void *v2;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v0, "OSLogObject");
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    AMSLogKey();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = 138543362;
    v5 = v2;
    _os_log_impl(&dword_18C849000, v1, OS_LOG_TYPE_DEFAULT, "%{public}@: [AMSStreamHTTPArchiveEntryController] Received should save HAR to disk decompressed", (uint8_t *)&v4, 0xCu);

  }
  return +[AMSStreamHTTPArchiveEntryController ams_streamEntriesToDisk](AMSStreamHTTPArchiveEntryController, "ams_streamEntriesToDisk");
}

void sub_18CE81730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AMSMaybeUpperCaseNormalisedStringIfFoundInList(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "containsObject:", v3))
  {
    v5 = v3;
  }
  else
  {
    objc_msgSend(v3, "uppercaseString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "containsObject:", v6))
      v5 = v6;
    else
      v5 = 0;

  }
  return v5;
}

id getASDSubscriptionEntitlementsClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)_MergedGlobals_144;
  v7 = _MergedGlobals_144;
  if (!_MergedGlobals_144)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getASDSubscriptionEntitlementsClass_block_invoke;
    v3[3] = &unk_1E253DDB8;
    v3[4] = &v4;
    __getASDSubscriptionEntitlementsClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18CE85828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE85ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getASDSubscriptionEntitlementsClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEAD898)
  {
    qword_1ECEAD898 = _sl_dlopen();
    if (!qword_1ECEAD898)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("ASDSubscriptionEntitlements");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_144 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void __getICMusicSubscriptionStatusControllerClass_block_invoke(uint64_t a1)
{
  iTunesCloudLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ICMusicSubscriptionStatusController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEAD8A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    iTunesCloudLibrary();
  }
}

void iTunesCloudLibrary()
{
  void *v0;

  if (!iTunesCloudLibraryCore_frameworkLibrary)
  {
    iTunesCloudLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!iTunesCloudLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getICStoreRequestContextClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  iTunesCloudLibrary();
  result = objc_getClass("ICStoreRequestContext");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEAD8A8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getICUserIdentityClass_block_invoke(v3);
  }
  return result;
}

Class __getICUserIdentityClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  iTunesCloudLibrary();
  result = objc_getClass("ICUserIdentity");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEAD8B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getICMusicSubscriptionStatusRequestClass_block_invoke(v3);
  }
  return result;
}

AMSSyncAccountFlagsResult *__getICMusicSubscriptionStatusRequestClass_block_invoke(uint64_t a1)
{
  AMSSyncAccountFlagsResult *result;
  AMSSyncAccountFlagsResult *v3;
  SEL v4;
  id v5;

  iTunesCloudLibrary();
  result = (AMSSyncAccountFlagsResult *)objc_getClass("ICMusicSubscriptionStatusRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEAD8B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (AMSSyncAccountFlagsResult *)abort_report_np();
    return -[AMSSyncAccountFlagsResult initWithAccountFlags:](v3, v4, v5);
  }
  return result;
}

void sub_18CE88F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE892D8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18CE8D538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE8F720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE90B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE90C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE911FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE912E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE913F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE92A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE92E7C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18CE92F44(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18CE9322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE93710(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18CE937DC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18CE93A1C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18CE93CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE94088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18CE94260(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18CE943FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE94B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE94DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE94FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE9538C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_18CE95820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CE959E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18CEA8BE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CEA8C30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18CEA8C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18CEA8CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_18CEA8DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{

  _Unwind_Resume(a1);
}

void sub_18CEB01EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_18CEB1374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18CEB2470(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18CEB2D20(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void AMS::BundleInfo::getAccountClientIdentifier(id *this@<X0>, _QWORD *a2@<X8>)
{
  __CFString *v3;
  const char *v4;
  char *v5;
  __CFString *v6;

  objc_msgSend(this[2], "accountMediaType");
  v3 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  if (AMSAccountMediaTypeAppStoreSandbox == v3)
    v4 = "com.apple.AppleMediaServicesCore.IMediaAccount.appStoreSandbox";
  else
    v4 = "com.apple.AppleMediaServicesCore.IMediaAccount.appStore";
  v6 = v3;
  if (AMSAccountMediaTypeAppStoreBeta == v3)
    v5 = "com.apple.AppleMediaServicesCore.IMediaAccount.appStoreBeta";
  else
    v5 = (char *)v4;
  std::string::basic_string[abi:ne180100]<0>(a2, v5);

}

void sub_18CEB6514(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  __clang_call_terminate(a1);
}

void AMS::BundleInfo::getIdentifier(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(this[2], "bundleIdentifier");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_18CEB6588(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __clang_call_terminate(a1);
}

void AMS::BundleInfo::getName(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(this[2], "clientName");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_18CEB65FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __clang_call_terminate(a1);
}

void AMS::BundleInfo::getVersion(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(this[2], "clientVersion");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_18CEB6670(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __clang_call_terminate(a1);
}

void AMS::BundleInfo::getIssuingBundleInfo(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  AMSProcessInfo *v5;
  void *v6;
  void *v7;
  __int128 v8;

  objc_msgSend(this[2], "proxyAppBundleID");
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v7 = (void *)v4;
    v5 = -[AMSProcessInfo initWithBundleIdentifier:]([AMSProcessInfo alloc], "initWithBundleIdentifier:", v4);
    +[AMSMappedBundleInfo bundleInfoForProcessInfo:](AMSMappedBundleInfo, "bundleInfoForProcessInfo:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    std::allocate_shared[abi:ne180100]<AMS::BundleInfo,std::allocator<AMS::BundleInfo>,AMSProcessInfo * const {__strong}&,AMSMappedBundleInfo * {__strong}&,void>(&v8, this[1], v6);
    *(_OWORD *)a2 = v8;

  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;

  }
}

void sub_18CEB672C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void AMS::BundleInfo::getUserAgentSuffix(id *this@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  id v5;
  __int128 v6;
  uint64_t v7;

  objc_msgSend(this[2], "userAgentSuffix");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = objc_retainAutorelease(v3);
    std::string::basic_string[abi:ne180100]<0>(&v6, (char *)objc_msgSend(v5, "UTF8String"));

    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }

}

void sub_18CEB67E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AMS::BundleInfo::getMappedAccountClientIdentifierBundleInfo(AMS::BundleInfo *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  __int128 v6;

  +[AMSMappedBundleInfo accountMediaTypeInfoForProcessInfo:](AMSMappedBundleInfo, "accountMediaTypeInfoForProcessInfo:", *((_QWORD *)this + 1));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    std::allocate_shared[abi:ne180100]<AMS::BundleInfo,std::allocator<AMS::BundleInfo>,AMSProcessInfo * const {__strong}&,AMSMappedBundleInfo * {__strong}&,void>(&v6, *((void **)this + 1), v4);
    *(_OWORD *)a2 = v6;

  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

void AMS::BundleInfo::~BundleInfo(id *this)
{

}

{

  JUMPOUT(0x18D789BDCLL);
}

id std::allocate_shared[abi:ne180100]<AMS::BundleInfo,std::allocator<AMS::BundleInfo>,AMSProcessInfo * const {__strong}&,AMSMappedBundleInfo * {__strong}&,void>(_QWORD *a1, void *a2, void *a3)
{
  _QWORD *v6;
  id v7;
  id result;

  v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2522690;
  v7 = a2;
  result = a3;
  v6[3] = &off_1E2520450;
  v6[4] = v7;
  v6[5] = result;
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void std::__shared_ptr_emplace<AMS::BundleInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMS::BundleInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMS::BundleInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMS::DeviceInfo::getBuildVersion(_QWORD *a1@<X8>)
{
  id v3;

  +[AMSDevice buildVersion](AMSDevice, "buildVersion");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_18CEB6A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t AMS::DeviceInfo::getBuildType(AMS::DeviceInfo *this)
{
  return os_variant_has_internal_content();
}

void AMS::DeviceInfo::getUniqueIdentifier(uint64_t a1@<X8>)
{
  void *v3;
  id v4;
  __int128 v5;
  uint64_t v6;

  +[AMSDevice deviceGUID](AMSDevice, "deviceGUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "length"))
  {
    v4 = objc_retainAutorelease(v3);
    std::string::basic_string[abi:ne180100]<0>(&v5, (char *)objc_msgSend(v4, "UTF8String"));

    *(_OWORD *)a1 = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

}

void sub_18CEB6AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AMS::DeviceInfo::getHardwarePlatform(uint64_t a1@<X8>)
{
  id v3;
  void *v4;
  id v5;
  __int128 v6;
  uint64_t v7;

  +[AMSDevice hardwarePlatform](AMSDevice, "hardwarePlatform");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = objc_retainAutorelease(v3);
    std::string::basic_string[abi:ne180100]<0>(&v6, (char *)objc_msgSend(v5, "UTF8String"));

    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

}

void sub_18CEB6B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AMS::DeviceInfo::getHardwareType(uint64_t a1@<X8>)
{
  id v3;
  void *v4;
  id v5;
  __int128 v6;
  uint64_t v7;

  +[AMSDevice productType](AMSDevice, "productType");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = objc_retainAutorelease(v3);
    std::string::basic_string[abi:ne180100]<0>(&v6, (char *)objc_msgSend(v5, "UTF8String"));

    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

}

void sub_18CEB6C24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AMS::DeviceInfo::getLanguageCode(_QWORD *a1@<X8>)
{
  id v3;

  +[AMSDevice language](AMSDevice, "language");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_18CEB6C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void AMS::DeviceInfo::getName(_QWORD *a1@<X8>)
{
  id v3;

  +[AMSDevice name](AMSDevice, "name");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_18CEB6D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *AMS::DeviceInfo::getPlatform@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.ios");
}

void AMS::DeviceInfo::getPlatformVersion(_QWORD *a1@<X8>)
{
  id v3;

  +[AMSDevice productVersion](AMSDevice, "productVersion");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_18CEB6D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void AMS::DeviceInfo::getWebKitVersion(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AMS::DeviceInfo::~DeviceInfo(AMS::DeviceInfo *this)
{
  JUMPOUT(0x18D789BDCLL);
}

id AMSLocalizedString(void *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (void *)MEMORY[0x1E0CB34D0];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "ams_AppleMediaServicesBundle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[AMSLocalizations localizedStringForKey:bundle:table:bag:](AMSLocalizations, "localizedStringForKey:bundle:table:bag:", v5, v6, CFSTR("Localizable"), v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

_QWORD *__copy_constructor_8_8_s0_s8_s16(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void sub_18CEB9598(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s0_s8_s16(v1);
  _Unwind_Resume(a1);
}

void sub_18CEB9FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AMSNonEmptyHeaderValue(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(a1, "ams_valueForHTTPHeaderField:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void sub_18CEC0690(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _handleClearCachesNotification_0()
{
  NSObject *v0;

  dispatch_get_global_queue(0, 0);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v0, &__block_literal_global_152);

}

void ___handleClearCachesNotification_block_invoke_0()
{
  id v0;
  void *v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = AMSSetLogKey(0);
  +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v1)
  {
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v1, "OSLogObject");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    AMSLogKey();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v3;
    _os_log_impl(&dword_18C849000, v2, OS_LOG_TYPE_DEFAULT, "NSURLSessionConfiguration+AppleMediaServices: [%{public}@] Received clear caches notification", (uint8_t *)&v6, 0xCu);

  }
  objc_msgSend(MEMORY[0x1E0C92CA0], "_URLBagCache");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeAllCachedResponses");

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postNotificationName:object:", 0x1E254C040, 0);

}

void AMSSetCountryCodeOnPaymentRequest(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL4 v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  AMSNormalisedCountryCodeForPaymentRequest(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v4, "setCountryCode:", v5);
  }
  else
  {
    v6 = +[AMSUnitTests isRunningUnitTests](AMSUnitTests, "isRunningUnitTests");
    +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    if (v6)
    {
      if (!v7)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v8, "OSLogObject");
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = 138543362;
        v12 = v3;
        _os_log_impl(&dword_18C849000, v9, OS_LOG_TYPE_ERROR, "AMSSetCountryCodeOnPaymentRequest: Attempting to set an invalid country code: %{public}@", (uint8_t *)&v11, 0xCu);
      }

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
      v10 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "postNotificationName:object:userInfo:", CFSTR("com.apple.AppleMediaServicesTests.FaultLogged"), v10, 0);
    }
    else
    {
      if (!v7)
      {
        +[AMSLogConfig sharedConfig](AMSLogConfig, "sharedConfig");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v8, "OSLogObject");
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        v11 = 138543362;
        v12 = v3;
        _os_log_impl(&dword_18C849000, v10, OS_LOG_TYPE_FAULT, "AMSSetCountryCodeOnPaymentRequest: Attempting to set an invalid country code: %{public}@", (uint8_t *)&v11, 0xCu);
      }
    }

  }
}

void std::__function::__func<AMSCore::AppleHTTPProvider::submitRequest(std::shared_ptr<AMSCore::HTTPRequest const>,std::optional<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0,std::allocator<AMSCore::AppleHTTPProvider::submitRequest(std::shared_ptr<AMSCore::HTTPRequest const>,std::optional<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>,void ()(AMSCore::Task<AMSCore::HTTPResponse,AMSCore::HTTPError>::Completion)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      OUTLINED_FUNCTION_0_24();
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  OUTLINED_FUNCTION_0();
}

void std::__function::__func<AMSCore::AppleHTTPProvider::submitRequest(std::shared_ptr<AMSCore::HTTPRequest const>,std::optional<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0,std::allocator<AMSCore::AppleHTTPProvider::submitRequest(std::shared_ptr<AMSCore::HTTPRequest const>,std::optional<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0>,void ()(AMSCore::Task<AMSCore::HTTPResponse,AMSCore::HTTPError>::Completion)>::operator()(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    OUTLINED_FUNCTION_0_24();
    std::__shared_weak_count::__release_weak(a1);
  }
  OUTLINED_FUNCTION_0();
}

void std::unordered_set<std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::string>>::unordered_set(void **a1)
{
  void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    operator delete(v2);
}

void std::unordered_set<std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::string>>::unordered_set(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
  OUTLINED_FUNCTION_0();
}

uint64_t sub_18CEC1054()
{
  return MEMORY[0x1E0CADD40]();
}

uint64_t sub_18CEC1060()
{
  return MEMORY[0x1E0CADDA8]();
}

uint64_t sub_18CEC106C()
{
  return MEMORY[0x1E0CADDC0]();
}

uint64_t sub_18CEC1078()
{
  return MEMORY[0x1E0CADE20]();
}

uint64_t sub_18CEC1084()
{
  return MEMORY[0x1E0CADE48]();
}

uint64_t sub_18CEC1090()
{
  return MEMORY[0x1E0CADEE8]();
}

uint64_t sub_18CEC109C()
{
  return MEMORY[0x1E0CADF08]();
}

uint64_t sub_18CEC10A8()
{
  return MEMORY[0x1E0CADF50]();
}

uint64_t sub_18CEC10B4()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t sub_18CEC10C0()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t sub_18CEC10CC()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t sub_18CEC10D8()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t sub_18CEC10E4()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t sub_18CEC10F0()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t sub_18CEC10FC()
{
  return MEMORY[0x1E0CAE3D8]();
}

uint64_t sub_18CEC1108()
{
  return MEMORY[0x1E0CAE470]();
}

uint64_t sub_18CEC1114()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_18CEC1120()
{
  return MEMORY[0x1E0CAE668]();
}

uint64_t sub_18CEC112C()
{
  return MEMORY[0x1E0CAE670]();
}

uint64_t sub_18CEC1138()
{
  return MEMORY[0x1E0CAE678]();
}

uint64_t sub_18CEC1144()
{
  return MEMORY[0x1E0CAE690]();
}

uint64_t sub_18CEC1150()
{
  return MEMORY[0x1E0CAE6C0]();
}

uint64_t sub_18CEC115C()
{
  return MEMORY[0x1E0CAE6E0]();
}

uint64_t sub_18CEC1168()
{
  return MEMORY[0x1E0CAE700]();
}

uint64_t sub_18CEC1174()
{
  return MEMORY[0x1E0CAE768]();
}

uint64_t sub_18CEC1180()
{
  return MEMORY[0x1E0CAE778]();
}

uint64_t sub_18CEC118C()
{
  return MEMORY[0x1E0CAE7C8]();
}

uint64_t sub_18CEC1198()
{
  return MEMORY[0x1E0CAE7D0]();
}

uint64_t sub_18CEC11A4()
{
  return MEMORY[0x1E0CAE890]();
}

uint64_t sub_18CEC11B0()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_18CEC11BC()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_18CEC11C8()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_18CEC11D4()
{
  return MEMORY[0x1E0CAE938]();
}

uint64_t sub_18CEC11E0()
{
  return MEMORY[0x1E0CAE9D0]();
}

uint64_t sub_18CEC11EC()
{
  return MEMORY[0x1E0CAEA00]();
}

uint64_t sub_18CEC11F8()
{
  return MEMORY[0x1E0CAEA18]();
}

uint64_t sub_18CEC1204()
{
  return MEMORY[0x1E0CAEA28]();
}

uint64_t sub_18CEC1210()
{
  return MEMORY[0x1E0CAEA40]();
}

uint64_t sub_18CEC121C()
{
  return MEMORY[0x1E0CAEA50]();
}

uint64_t sub_18CEC1228()
{
  return MEMORY[0x1E0CAEA80]();
}

uint64_t sub_18CEC1234()
{
  return MEMORY[0x1E0CAEA90]();
}

uint64_t sub_18CEC1240()
{
  return MEMORY[0x1E0CAEAA8]();
}

uint64_t sub_18CEC124C()
{
  return MEMORY[0x1E0CAEAB0]();
}

uint64_t sub_18CEC1258()
{
  return MEMORY[0x1E0CAEB20]();
}

uint64_t sub_18CEC1264()
{
  return MEMORY[0x1E0CAEB38]();
}

uint64_t sub_18CEC1270()
{
  return MEMORY[0x1E0CAEB40]();
}

uint64_t sub_18CEC127C()
{
  return MEMORY[0x1E0CAEB50]();
}

uint64_t sub_18CEC1288()
{
  return MEMORY[0x1E0CAF360]();
}

uint64_t sub_18CEC1294()
{
  return MEMORY[0x1E0CAF3D8]();
}

uint64_t sub_18CEC12A0()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t sub_18CEC12AC()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t sub_18CEC12B8()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t sub_18CEC12C4()
{
  return MEMORY[0x1E0CAF628]();
}

uint64_t sub_18CEC12D0()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t sub_18CEC12DC()
{
  return MEMORY[0x1E0CAF648]();
}

uint64_t sub_18CEC12E8()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t sub_18CEC12F4()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t sub_18CEC1300()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t sub_18CEC130C()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t sub_18CEC1318()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t sub_18CEC1324()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t sub_18CEC1330()
{
  return MEMORY[0x1E0CAF910]();
}

uint64_t sub_18CEC133C()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t sub_18CEC1348()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t sub_18CEC1354()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_18CEC1360()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_18CEC136C()
{
  return MEMORY[0x1E0CAFD30]();
}

uint64_t sub_18CEC1378()
{
  return MEMORY[0x1E0CAFD90]();
}

uint64_t sub_18CEC1384()
{
  return MEMORY[0x1E0CAFD98]();
}

uint64_t sub_18CEC1390()
{
  return MEMORY[0x1E0CAFDA0]();
}

uint64_t sub_18CEC139C()
{
  return MEMORY[0x1E0CAFDC0]();
}

uint64_t sub_18CEC13A8()
{
  return MEMORY[0x1E0CAFE08]();
}

uint64_t sub_18CEC13B4()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_18CEC13C0()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_18CEC13CC()
{
  return MEMORY[0x1E0CAFF20]();
}

uint64_t sub_18CEC13D8()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t sub_18CEC13E4()
{
  return MEMORY[0x1E0CAFF60]();
}

uint64_t sub_18CEC13F0()
{
  return MEMORY[0x1E0CAFF80]();
}

uint64_t sub_18CEC13FC()
{
  return MEMORY[0x1E0CAFF90]();
}

uint64_t sub_18CEC1408()
{
  return MEMORY[0x1E0CAFFA8]();
}

uint64_t sub_18CEC1414()
{
  return MEMORY[0x1E0CAFFB8]();
}

uint64_t sub_18CEC1420()
{
  return MEMORY[0x1E0CAFFD0]();
}

uint64_t sub_18CEC142C()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_18CEC1438()
{
  return MEMORY[0x1E0CB00A0]();
}

uint64_t sub_18CEC1444()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_18CEC1450()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_18CEC145C()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t sub_18CEC1468()
{
  return MEMORY[0x1E0CB05A8]();
}

uint64_t sub_18CEC1474()
{
  return MEMORY[0x1E0CB05C0]();
}

uint64_t sub_18CEC1480()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_18CEC148C()
{
  return MEMORY[0x1E0CB06D0]();
}

uint64_t sub_18CEC1498()
{
  return MEMORY[0x1E0CB07B0]();
}

uint64_t sub_18CEC14A4()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t sub_18CEC14B0()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_18CEC14BC()
{
  return MEMORY[0x1E0CB0820]();
}

uint64_t sub_18CEC14C8()
{
  return MEMORY[0x1E0CB0830]();
}

uint64_t sub_18CEC14D4()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_18CEC14E0()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_18CEC14EC()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_18CEC14F8()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_18CEC1504()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_18CEC1510()
{
  return MEMORY[0x1E0CB0F00]();
}

uint64_t sub_18CEC151C()
{
  return MEMORY[0x1E0CB0F20]();
}

uint64_t sub_18CEC1528()
{
  return MEMORY[0x1E0CB1060]();
}

uint64_t sub_18CEC1534()
{
  return MEMORY[0x1E0CB11F0]();
}

uint64_t sub_18CEC1540()
{
  return MEMORY[0x1E0CB1438]();
}

uint64_t sub_18CEC154C()
{
  return MEMORY[0x1E0CB1470]();
}

uint64_t sub_18CEC1558()
{
  return MEMORY[0x1E0DEFCA8]();
}

uint64_t sub_18CEC1564()
{
  return MEMORY[0x1E0DEFCB0]();
}

uint64_t sub_18CEC1570()
{
  return MEMORY[0x1E0D20EF8]();
}

uint64_t sub_18CEC157C()
{
  return MEMORY[0x1E0D12FB0]();
}

uint64_t sub_18CEC1588()
{
  return MEMORY[0x1E0D12FE8]();
}

uint64_t sub_18CEC1594()
{
  return MEMORY[0x1E0DF2078]();
}

uint64_t sub_18CEC15A0()
{
  return MEMORY[0x1E0DF20F8]();
}

uint64_t sub_18CEC15AC()
{
  return MEMORY[0x1E0DF2108]();
}

uint64_t sub_18CEC15B8()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t sub_18CEC15C4()
{
  return MEMORY[0x1E0DF2140]();
}

uint64_t sub_18CEC15D0()
{
  return MEMORY[0x1E0DF2148]();
}

uint64_t sub_18CEC15DC()
{
  return MEMORY[0x1E0DF2150]();
}

uint64_t sub_18CEC15E8()
{
  return MEMORY[0x1E0DF2170]();
}

uint64_t sub_18CEC15F4()
{
  return MEMORY[0x1E0DF2198]();
}

uint64_t sub_18CEC1600()
{
  return MEMORY[0x1E0DF2218]();
}

uint64_t sub_18CEC160C()
{
  return MEMORY[0x1E0DF2220]();
}

uint64_t sub_18CEC1618()
{
  return MEMORY[0x1E0DF2228]();
}

uint64_t sub_18CEC1624()
{
  return MEMORY[0x1E0DF2238]();
}

uint64_t sub_18CEC1630()
{
  return MEMORY[0x1E0DF2040]();
}

uint64_t sub_18CEC163C()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t sub_18CEC1648()
{
  return MEMORY[0x1E0DEF4D0]();
}

uint64_t sub_18CEC1654()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_18CEC1660()
{
  return MEMORY[0x1E0DEF550]();
}

uint64_t sub_18CEC166C()
{
  return MEMORY[0x1E0DEF560]();
}

uint64_t sub_18CEC1678()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_18CEC1684()
{
  return MEMORY[0x1E0DEF590]();
}

uint64_t sub_18CEC1690()
{
  return MEMORY[0x1E0DEF5A0]();
}

uint64_t sub_18CEC169C()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_18CEC16A8()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_18CEC16B4()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_18CEC16C0()
{
  return MEMORY[0x1E0DEF6F8]();
}

uint64_t sub_18CEC16CC()
{
  return MEMORY[0x1E0DEF720]();
}

uint64_t sub_18CEC16D8()
{
  return MEMORY[0x1E0DEF728]();
}

uint64_t sub_18CEC16E4()
{
  return MEMORY[0x1E0DEF750]();
}

uint64_t sub_18CEC16F0()
{
  return MEMORY[0x1E0CA92A8]();
}

uint64_t sub_18CEC16FC()
{
  return MEMORY[0x1E0CA92B0]();
}

uint64_t sub_18CEC1708()
{
  return MEMORY[0x1E0CA92C8]();
}

uint64_t sub_18CEC1714()
{
  return MEMORY[0x1E0CA92F8]();
}

uint64_t sub_18CEC1720()
{
  return MEMORY[0x1E0CA9348]();
}

uint64_t sub_18CEC172C()
{
  return MEMORY[0x1E0CA9928]();
}

uint64_t sub_18CEC1738()
{
  return MEMORY[0x1E0CA9940]();
}

uint64_t sub_18CEC1744()
{
  return MEMORY[0x1E0CA9988]();
}

uint64_t sub_18CEC1750()
{
  return MEMORY[0x1E0DF05B0]();
}

uint64_t sub_18CEC175C()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_18CEC1768()
{
  return MEMORY[0x1E0CB17F8]();
}

uint64_t sub_18CEC1774()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_18CEC1780()
{
  return MEMORY[0x1E0DE9E58]();
}

uint64_t sub_18CEC178C()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t sub_18CEC1798()
{
  return MEMORY[0x1E0DE9FF8]();
}

uint64_t sub_18CEC17A4()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_18CEC17B0()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_18CEC17BC()
{
  return MEMORY[0x1E0DEA270]();
}

uint64_t sub_18CEC17C8()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_18CEC17D4()
{
  return MEMORY[0x1E0DEA518]();
}

uint64_t sub_18CEC17E0()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_18CEC17EC()
{
  return MEMORY[0x1E0CB1830]();
}

uint64_t sub_18CEC17F8()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_18CEC1804()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_18CEC1810()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_18CEC181C()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_18CEC1828()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_18CEC1834()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_18CEC1840()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_18CEC184C()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_18CEC1858()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_18CEC1864()
{
  return MEMORY[0x1E0DEA610]();
}

uint64_t sub_18CEC1870()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_18CEC187C()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t sub_18CEC1888()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_18CEC1894()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_18CEC18A0()
{
  return MEMORY[0x1E0DEA7F0]();
}

uint64_t sub_18CEC18AC()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_18CEC18B8()
{
  return MEMORY[0x1E0DEA840]();
}

uint64_t sub_18CEC18C4()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_18CEC18D0()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_18CEC18DC()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_18CEC18E8()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_18CEC18F4()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_18CEC1900()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_18CEC190C()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_18CEC1918()
{
  return MEMORY[0x1E0DEA948]();
}

uint64_t sub_18CEC1924()
{
  return MEMORY[0x1E0DEA9C0]();
}

uint64_t sub_18CEC1930()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t sub_18CEC193C()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_18CEC1948()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_18CEC1954()
{
  return MEMORY[0x1E0DEAA68]();
}

uint64_t sub_18CEC1960()
{
  return MEMORY[0x1E0DEAB00]();
}

uint64_t sub_18CEC196C()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t sub_18CEC1978()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t sub_18CEC1984()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t sub_18CEC1990()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_18CEC199C()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_18CEC19A8()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_18CEC19B4()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_18CEC19C0()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_18CEC19CC()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_18CEC19D8()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_18CEC19E4()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_18CEC19F0()
{
  return MEMORY[0x1E0CB1B28]();
}

uint64_t sub_18CEC19FC()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_18CEC1A08()
{
  return MEMORY[0x1E0DF05C8]();
}

uint64_t sub_18CEC1A14()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_18CEC1A20()
{
  return MEMORY[0x1E0DF05E0]();
}

uint64_t sub_18CEC1A2C()
{
  return MEMORY[0x1E0DF0608]();
}

uint64_t sub_18CEC1A38()
{
  return MEMORY[0x1E0DF0640]();
}

uint64_t sub_18CEC1A44()
{
  return MEMORY[0x1E0DF0668]();
}

uint64_t sub_18CEC1A50()
{
  return MEMORY[0x1E0DF0688]();
}

uint64_t sub_18CEC1A5C()
{
  return MEMORY[0x1E0DF0698]();
}

uint64_t sub_18CEC1A68()
{
  return MEMORY[0x1E0DF06B8]();
}

uint64_t sub_18CEC1A74()
{
  return MEMORY[0x1E0DF0710]();
}

uint64_t sub_18CEC1A80()
{
  return MEMORY[0x1E0DF0730]();
}

uint64_t sub_18CEC1A8C()
{
  return MEMORY[0x1E0DF0738]();
}

uint64_t sub_18CEC1A98()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_18CEC1AA4()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_18CEC1AB0()
{
  return MEMORY[0x1E0DF0770]();
}

uint64_t sub_18CEC1ABC()
{
  return MEMORY[0x1E0DF07A0]();
}

uint64_t sub_18CEC1AC8()
{
  return MEMORY[0x1E0DF07D8]();
}

uint64_t sub_18CEC1AD4()
{
  return MEMORY[0x1E0DF07E0]();
}

uint64_t sub_18CEC1AE0()
{
  return MEMORY[0x1E0DF07E8]();
}

uint64_t sub_18CEC1AEC()
{
  return MEMORY[0x1E0DF07F8]();
}

uint64_t sub_18CEC1AF8()
{
  return MEMORY[0x1E0DF0800]();
}

uint64_t sub_18CEC1B04()
{
  return MEMORY[0x1E0DF0840]();
}

uint64_t sub_18CEC1B10()
{
  return MEMORY[0x1E0DF08C0]();
}

uint64_t sub_18CEC1B1C()
{
  return MEMORY[0x1E0DF08C8]();
}

uint64_t sub_18CEC1B28()
{
  return MEMORY[0x1E0DF09D0]();
}

uint64_t sub_18CEC1B34()
{
  return MEMORY[0x1E0DF0AF0]();
}

uint64_t sub_18CEC1B40()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_18CEC1B4C()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t sub_18CEC1B58()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_18CEC1B64()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_18CEC1B70()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_18CEC1B7C()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_18CEC1B88()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_18CEC1B94()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_18CEC1BA0()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_18CEC1BAC()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_18CEC1BB8()
{
  return MEMORY[0x1E0DEF840]();
}

uint64_t sub_18CEC1BC4()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_18CEC1BD0()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_18CEC1BDC()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_18CEC1BE8()
{
  return MEMORY[0x1E0DF2298]();
}

uint64_t sub_18CEC1BF4()
{
  return MEMORY[0x1E0DF22A0]();
}

uint64_t sub_18CEC1C00()
{
  return MEMORY[0x1E0DF22A8]();
}

uint64_t sub_18CEC1C0C()
{
  return MEMORY[0x1E0CB2020]();
}

uint64_t sub_18CEC1C18()
{
  return MEMORY[0x1E0CB2028]();
}

uint64_t sub_18CEC1C24()
{
  return MEMORY[0x1E0CB20E0]();
}

uint64_t sub_18CEC1C30()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t sub_18CEC1C3C()
{
  return MEMORY[0x1E0DF22B0]();
}

uint64_t sub_18CEC1C48()
{
  return MEMORY[0x1E0DF22E0]();
}

uint64_t sub_18CEC1C54()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_18CEC1C60()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_18CEC1C6C()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_18CEC1C78()
{
  return MEMORY[0x1E0CB2410]();
}

uint64_t sub_18CEC1C84()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t sub_18CEC1C90()
{
  return MEMORY[0x1E0CB24B0]();
}

uint64_t sub_18CEC1C9C()
{
  return MEMORY[0x1E0CB24C8]();
}

uint64_t sub_18CEC1CA8()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t sub_18CEC1CB4()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_18CEC1CC0()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_18CEC1CCC()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_18CEC1CD8()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_18CEC1CE4()
{
  return MEMORY[0x1E0DEC070]();
}

uint64_t sub_18CEC1CF0()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t sub_18CEC1CFC()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_18CEC1D08()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_18CEC1D14()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t sub_18CEC1D20()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_18CEC1D2C()
{
  return MEMORY[0x1E0CB25C8]();
}

uint64_t sub_18CEC1D38()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_18CEC1D44()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t sub_18CEC1D50()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t sub_18CEC1D5C()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_18CEC1D68()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_18CEC1D74()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t sub_18CEC1D80()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_18CEC1D8C()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_18CEC1D98()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_18CEC1DA4()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_18CEC1DB0()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_18CEC1DBC()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_18CEC1DC8()
{
  return MEMORY[0x1E0DF0B08]();
}

uint64_t sub_18CEC1DD4()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_18CEC1DE0()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_18CEC1DEC()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_18CEC1DF8()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_18CEC1E04()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_18CEC1E10()
{
  return MEMORY[0x1E0DEC888]();
}

uint64_t sub_18CEC1E1C()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_18CEC1E28()
{
  return MEMORY[0x1E0DF0C68]();
}

uint64_t sub_18CEC1E34()
{
  return MEMORY[0x1E0DEC980]();
}

uint64_t sub_18CEC1E40()
{
  return MEMORY[0x1E0DEC990]();
}

uint64_t sub_18CEC1E4C()
{
  return MEMORY[0x1E0DECAB0]();
}

uint64_t sub_18CEC1E58()
{
  return MEMORY[0x1E0DECAE0]();
}

uint64_t sub_18CEC1E64()
{
  return MEMORY[0x1E0DECAF8]();
}

uint64_t sub_18CEC1E70()
{
  return MEMORY[0x1E0DECB00]();
}

uint64_t sub_18CEC1E7C()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t sub_18CEC1E88()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t sub_18CEC1E94()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t sub_18CEC1EA0()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_18CEC1EAC()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_18CEC1EB8()
{
  return MEMORY[0x1E0DECC00]();
}

uint64_t sub_18CEC1EC4()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_18CEC1ED0()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_18CEC1EDC()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_18CEC1EE8()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_18CEC1EF4()
{
  return MEMORY[0x1E0DF0CB8]();
}

uint64_t sub_18CEC1F00()
{
  return MEMORY[0x1E0DECD90]();
}

uint64_t sub_18CEC1F0C()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_18CEC1F18()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_18CEC1F24()
{
  return MEMORY[0x1E0DF0D48]();
}

uint64_t sub_18CEC1F30()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_18CEC1F3C()
{
  return MEMORY[0x1E0DECF60]();
}

uint64_t sub_18CEC1F48()
{
  return MEMORY[0x1E0DECF68]();
}

uint64_t sub_18CEC1F54()
{
  return MEMORY[0x1E0DECF78]();
}

uint64_t sub_18CEC1F60()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_18CEC1F6C()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_18CEC1F78()
{
  return MEMORY[0x1E0DECFD0]();
}

uint64_t sub_18CEC1F84()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_18CEC1F90()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_18CEC1F9C()
{
  return MEMORY[0x1E0DED030]();
}

uint64_t sub_18CEC1FA8()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_18CEC1FB4()
{
  return MEMORY[0x1E0DED098]();
}

uint64_t sub_18CEC1FC0()
{
  return MEMORY[0x1E0DED0A0]();
}

uint64_t sub_18CEC1FCC()
{
  return MEMORY[0x1E0DED0B0]();
}

uint64_t sub_18CEC1FD8()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t sub_18CEC1FE4()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_18CEC1FF0()
{
  return MEMORY[0x1E0DED100]();
}

uint64_t sub_18CEC1FFC()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_18CEC2008()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_18CEC2014()
{
  return MEMORY[0x1E0DED160]();
}

uint64_t sub_18CEC2020()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_18CEC202C()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_18CEC2038()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t sub_18CEC2044()
{
  return MEMORY[0x1E0DED548]();
}

uint64_t sub_18CEC2050()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_18CEC205C()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_18CEC2068()
{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t sub_18CEC2074()
{
  return MEMORY[0x1E0DF0EC0]();
}

uint64_t sub_18CEC2080()
{
  return MEMORY[0x1E0DED9C8]();
}

uint64_t sub_18CEC208C()
{
  return MEMORY[0x1E0DED9F8]();
}

uint64_t sub_18CEC2098()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_18CEC20A4()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_18CEC20B0()
{
  return MEMORY[0x1E0CB2620]();
}

uint64_t sub_18CEC20BC()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t sub_18CEC20C8()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t sub_18CEC20D4()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_18CEC20E0()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_18CEC20EC()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_18CEC20F8()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_18CEC2104()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_18CEC2110()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t sub_18CEC211C()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_18CEC2128()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_18CEC2134()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_18CEC2140()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_18CEC214C()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_18CEC2158()
{
  return MEMORY[0x1E0DEDF80]();
}

uint64_t sub_18CEC2164()
{
  return MEMORY[0x1E0DEDFF8]();
}

uint64_t sub_18CEC2170()
{
  return MEMORY[0x1E0DEE000]();
}

uint64_t sub_18CEC217C()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t sub_18CEC2188()
{
  return MEMORY[0x1E0CB2710]();
}

uint64_t sub_18CEC2194()
{
  return MEMORY[0x1E0CB2720]();
}

uint64_t sub_18CEC21A0()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_18CEC21AC()
{
  return MEMORY[0x1E0DEE268]();
}

uint64_t sub_18CEC21B8()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_18CEC21C4()
{
  return MEMORY[0x1E0DEE748]();
}

uint64_t sub_18CEC21D0()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_18CEC21DC()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_18CEC21E8()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t BKSProcessAssertionSetExpirationHandler()
{
  return MEMORY[0x1E0CFE2E8]();
}

uint64_t CCCryptorGCMOneshotDecrypt()
{
  return MEMORY[0x1E0C800D8]();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return MEMORY[0x1E0C800E0]();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x1E0C802C0](bytes, count);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80328](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA512(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C803A8](data, *(_QWORD *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98130](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1E0C98150]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988C8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1E0C98A50](applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

CFStringEncoding CFStringGetFastestEncoding(CFStringRef theString)
{
  return MEMORY[0x1E0C990D8](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

uint64_t CFURLResponseCopyPeerAddress()
{
  return MEMORY[0x1E0C92A40]();
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x1E0C994E0](url, key, propertyValue, error);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x1E0C995A0](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1E0C995A8](allocator, flags, error, dictionary, timeout);
}

CFDictionaryRef CFUserNotificationGetResponseDictionary(CFUserNotificationRef userNotification)
{
  return (CFDictionaryRef)MEMORY[0x1E0C995D8](userNotification);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1E0C995E8](userNotification, responseFlags, timeout);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BEC8](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9BFD0](c, x, y);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextAddRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9BFE8](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClip(CGContextRef c)
{
  MEMORY[0x1E0C9C028](c);
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
  MEMORY[0x1E0C9C030](c, mask, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
  MEMORY[0x1E0C9C1A0](c, page);
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
  MEMORY[0x1E0C9C1B8](c, *(_QWORD *)&mode);
}

void CGContextFillPath(CGContextRef c)
{
  MEMORY[0x1E0C9C218](c);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C330](c, x, y);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  MEMORY[0x1E0C9C458](c, *(_QWORD *)&quality);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A0](c, red, green, blue, alpha);
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A8](c, red, green, blue, alpha);
}

void CGContextSetShouldAntialias(CGContextRef c, BOOL shouldAntialias)
{
  MEMORY[0x1E0C9C4C8](c, shouldAntialias);
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C508](c, color);
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C538](c, x, y);
}

void CGContextStrokePath(CGContextRef c)
{
  MEMORY[0x1E0C9C570](c);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

CGImageRef CGImageCreateCopy(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CB88](image);
}

CGImageRef CGImageCreateWithJPEGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CBB8](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

CGImageRef CGImageCreateWithMask(CGImageRef image, CGImageRef mask)
{
  return (CGImageRef)MEMORY[0x1E0C9CBC0](image, mask);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CBD0](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF8](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1E0C9CC00](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

CGImageRef CGImageMaskCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate)
{
  return (CGImageRef)MEMORY[0x1E0C9CD00](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, provider, decode, shouldInterpolate);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC5F0](isrc);
}

CGPDFDocumentRef CGPDFDocumentCreateWithURL(CFURLRef url)
{
  return (CGPDFDocumentRef)MEMORY[0x1E0C9CF60](url);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x1E0C9CFA0](document, pageNumber);
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
  MEMORY[0x1E0C9CFC8](document);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D090](page, *(_QWORD *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9D0A8](retstr, page, *(_QWORD *)&box, *(_QWORD *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

int CGPDFPageGetRotationAngle(CGPDFPageRef page)
{
  return MEMORY[0x1E0C9D0C8](page);
}

void CGPathAddArcToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius)
{
  MEMORY[0x1E0C9D288](path, m, x1, y1, x2, y2, radius);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2C0](path, m, cpx, cpy, x, y);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D320](path);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGMutablePathRef CGPathCreateMutableCopy(CGPathRef path)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D390](path);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3D0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1E0CFA6C0]();
}

uint64_t CSArchitectureIs64Bit()
{
  return MEMORY[0x1E0D19F70]();
}

uint64_t CSIsNull()
{
  return MEMORY[0x1E0D19FB8]();
}

uint64_t CSSourceInfoGetFilename()
{
  return MEMORY[0x1E0D1A040]();
}

uint64_t CSSourceInfoGetLineNumber()
{
  return MEMORY[0x1E0D1A050]();
}

uint64_t CSSymbolGetName()
{
  return MEMORY[0x1E0D1A088]();
}

uint64_t CSSymbolGetRange()
{
  return MEMORY[0x1E0D1A090]();
}

uint64_t CSSymbolOwnerGetName()
{
  return MEMORY[0x1E0D1A130]();
}

uint64_t CSSymbolOwnerGetSourceInfoWithAddress()
{
  return MEMORY[0x1E0D1A158]();
}

uint64_t CSSymbolicatorCreateWithTaskFlagsAndNotification()
{
  return MEMORY[0x1E0D1A258]();
}

uint64_t CSSymbolicatorGetArchitecture()
{
  return MEMORY[0x1E0D1A2C8]();
}

uint64_t CSSymbolicatorGetSymbolOwnerWithAddressAtTime()
{
  return MEMORY[0x1E0D1A330]();
}

uint64_t CSSymbolicatorGetSymbolWithAddressAtTime()
{
  return MEMORY[0x1E0D1A350]();
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x1E0CA7A68](*(_QWORD *)&uiType, language, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A88](name, matrix, size);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1E0CA7DE0](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x1E0CA7DF8](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1E0CA7E88](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1E0CA7EA8](line, context);
}

uint64_t DeviceIdentityCreateHostSignatureWithCompletion()
{
  return MEMORY[0x1E0D1D0E8]();
}

uint64_t DeviceIdentityIsSupported()
{
  return MEMORY[0x1E0D1D0F0]();
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return MEMORY[0x1E0D1D0F8]();
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD80](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD90](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x1E0CBB680](*(_QWORD *)&bootstrapPort, mainPort);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x1E0CBB918](*(_QWORD *)&mainPort, path);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1E0CBB9D0](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1E0CBBA10](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

uint64_t MAECopyActivationRecordWithError()
{
  return MEMORY[0x1E0D4DEA0]();
}

uint64_t MAEPerformCollectionWithCompletion()
{
  return MEMORY[0x1E0D4DEB0]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGCopyAnswerWithError()
{
  return MEMORY[0x1E0DE2B38]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetFloat32Answer()
{
  return MEMORY[0x1E0DE2B58]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x1E0DE2B78]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1E0CB3218](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t OSAWriteLogForSubmission()
{
  return MEMORY[0x1E0D1BD28]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t SBSGetScreenLockStatus()
{
  return MEMORY[0x1E0DAB728]();
}

uint64_t SBSRequestPasscodeUnlockUI()
{
  return MEMORY[0x1E0DAB950]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x1E0CD5EA8](allocator, protection, flags, error);
}

uint64_t SecAccessControlGetConstraints()
{
  return MEMORY[0x1E0CD5EB8]();
}

CFTypeID SecAccessControlGetTypeID(void)
{
  return MEMORY[0x1E0CD5ED0]();
}

uint64_t SecAccessControlSetConstraints()
{
  return MEMORY[0x1E0CD5EE8]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1E0CD5F60](certificate);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x1E0CD5F98](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1E0CD6010](allocator, data);
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1E0CD6218](*(_QWORD *)&status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6290](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1E0CD62A0](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1E0CD62D8](query, attributesToUpdate);
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x1E0CD62F0](key);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD62F8](key, error);
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x1E0CD6318](key);
}

uint64_t SecKeyCopySystemKey()
{
  return MEMORY[0x1E0CD6330]();
}

uint64_t SecKeyCreateAttestation()
{
  return MEMORY[0x1E0CD6338]();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD6390](key, algorithm, dataToSign, error);
}

OSStatus SecKeyGeneratePair(CFDictionaryRef parameters, SecKeyRef *publicKey, SecKeyRef *privateKey)
{
  return MEMORY[0x1E0CD63C8](parameters, publicKey, privateKey);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

uint64_t SecTrustCopyInfo()
{
  return MEMORY[0x1E0CD6668]();
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1E0CD66C8](trust, error);
}

SecCertificateRef SecTrustGetCertificateAtIndex(SecTrustRef trust, CFIndex ix)
{
  return (SecCertificateRef)MEMORY[0x1E0CD66D8](trust, ix);
}

CFIndex SecTrustGetCertificateCount(SecTrustRef trust)
{
  return MEMORY[0x1E0CD66E0](trust);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return MEMORY[0x1E0CD6710](trust, anchorCertificates);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4220](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

uint64_t std::time_get<char,std::istreambuf_iterator<char>>::get()
{
  return MEMORY[0x1E0DE4260]();
}

uint64_t std::time_put<char,std::ostreambuf_iterator<char>>::put()
{
  return MEMORY[0x1E0DE4268]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
  MEMORY[0x1E0DE42F8](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::operator=(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4348](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x1E0DE4460](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec, const std::string *__what_arg)
{
  return (std::system_error *)MEMORY[0x1E0DE4578](this, *(_QWORD *)&__ec.__val_, __ec.__cat_, __what_arg);
}

void std::system_error::~system_error(std::system_error *this)
{
  MEMORY[0x1E0DE4588](this);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE46D8]();
}

{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4710]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4728]();
}

{
  return MEMORY[0x1E0DE4730]();
}

{
  return MEMORY[0x1E0DE4738]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1E0DE4770](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x1E0DE4778](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1E0DE4780](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x1E0DE47C0](this);
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4848]();
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x1E0DE48B0](this);
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48B8](this);
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48C0](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48D0](this);
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
  MEMORY[0x1E0DE48D8](this);
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x1E0DE48E8](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

void std::__libcpp_atomic_wait(const void *a1, std::__cxx_contention_t a2)
{
  MEMORY[0x1E0DE4918](a1, a2);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x1E0DE4920](*(_QWORD *)&__ev, __what_arg);
}

void std::__cxx_atomic_notify_all(const void *a1)
{
  MEMORY[0x1E0DE4938](a1);
}

std::__cxx_contention_t std::__libcpp_atomic_monitor(const void *a1)
{
  return MEMORY[0x1E0DE4940](a1);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::from_time_t(time_t __t)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1E0DE4B40](__t);
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1E0DE4B48]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x1E0DE4B50](__t);
}

const std::locale *std::locale::classic(void)
{
  return (const std::locale *)MEMORY[0x1E0DE4B78]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1E0DE4BA0](this, a2);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x1E0DE4C88](this, __loc);
}

uint64_t *__cdecl std::ios_base::iword(std::ios_base *this, int __index)
{
  return (uint64_t *)MEMORY[0x1E0DE4C90](this, *(_QWORD *)&__index);
}

int std::ios_base::xalloc(void)
{
  return MEMORY[0x1E0DE4C98]();
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1E0DE4D80](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D78](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x1E0DE4DF0]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
  MEMORY[0x1E0DE4DF8](a1.__ptr_);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E251A5B0(__p);
}

uint64_t operator delete()
{
  return off_1E251A5B8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E251A5C0(__sz);
}

uint64_t operator new()
{
  return off_1E251A5C8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1E0C81828](__count, __size);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t container_system_group_path_for_identifier()
{
  return MEMORY[0x1E0C82A90]();
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

void dispatch_block_cancel(dispatch_block_t block)
{
  MEMORY[0x1E0C82C58](block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

double drand48(void)
{
  double result;

  MEMORY[0x1E0C83070]();
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int getpwuid_r(uid_t a1, passwd *a2, char *a3, size_t a4, passwd **a5)
{
  return MEMORY[0x1E0C837A8](*(_QWORD *)&a1, a2, a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83860](a1, a2);
}

char *__cdecl inet_ntoa(in_addr a1)
{
  return (char *)MEMORY[0x1E0C83960](*(_QWORD *)&a1.s_addr);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1E0C83968](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
  MEMORY[0x1E0C83CC0](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C840D0](__s, __smax, *(_QWORD *)&__c, __n);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C840E8](*(_QWORD *)&reply_port);
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1E0C84100]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C84110](*(_QWORD *)&reply_port);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

uint64_t nw_activity_activate()
{
  return MEMORY[0x1E0CCEDE0]();
}

uint64_t nw_activity_complete_with_reason()
{
  return MEMORY[0x1E0CCEDE8]();
}

uint64_t nw_activity_complete_with_reason_and_underlying_error()
{
  return MEMORY[0x1E0CCEDF0]();
}

uint64_t nw_activity_create()
{
  return MEMORY[0x1E0CCEE00]();
}

uint64_t nw_activity_is_activated()
{
  return MEMORY[0x1E0CCEE38]();
}

uint64_t nw_activity_is_complete()
{
  return MEMORY[0x1E0CCEE40]();
}

uint64_t nw_activity_set_parent_activity()
{
  return MEMORY[0x1E0CCEE50]();
}

uint32_t nw_data_transfer_report_get_path_count(nw_data_transfer_report_t report)
{
  return MEMORY[0x1E0CCF308](report);
}

nw_interface_radio_type_t nw_data_transfer_report_get_path_radio_type(nw_data_transfer_report_t report, uint32_t path_index)
{
  return MEMORY[0x1E0CCF310](report, *(_QWORD *)&path_index);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1E0CCF410](endpoint);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return MEMORY[0x1E0CCF440](endpoint);
}

nw_endpoint_t nw_establishment_report_copy_proxy_endpoint(nw_establishment_report_t report)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF480](report);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84488](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

uint64_t os_eligibility_force_domain_set_answers()
{
  return MEMORY[0x1E0C84670]();
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1E0C84678]();
}

uint64_t os_eligibility_reset_all_domains()
{
  return MEMORY[0x1E0C84680]();
}

uint64_t os_eligibility_set_input()
{
  return MEMORY[0x1E0C84688]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84988](lock);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x1E0C849A0]();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1E0C849B8]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1E0C849D0]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

int res_9_getservers(res_9_state a1, res_9_sockaddr_union *a2, int a3)
{
  return MEMORY[0x1E0DE8480](a1, a2, *(_QWORD *)&a3);
}

void res_9_ndestroy(res_9_state a1)
{
  MEMORY[0x1E0DE8488](a1);
}

int res_9_ninit(res_9_state a1)
{
  return MEMORY[0x1E0DE8490](a1);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1E0C85178]();
}

int scanf(const char *a1, ...)
{
  return MEMORY[0x1E0C85258](a1);
}

int sched_yield(void)
{
  return MEMORY[0x1E0C85270]();
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8588](a1, *(_QWORD *)&a2, a3, a4, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1E0DE85C0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85E0](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_bind_text64(sqlite3_stmt *a1, int a2, const char *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *), unsigned __int8 encoding)
{
  return MEMORY[0x1E0DE85E8](a1, *(_QWORD *)&a2, a3, a4, a5, encoding);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x1E0DE8638](a1, *(_QWORD *)&ms);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8640](a1);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE8648](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE8678](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x1E0DE8688](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8698](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1E0DE86A0](a1, *(_QWORD *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_compileoption_get(int N)
{
  return (const char *)MEMORY[0x1E0DE86E0](*(_QWORD *)&N);
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  return MEMORY[0x1E0DE8738](a1, *(_QWORD *)&op);
}

sqlite3_mutex *__cdecl sqlite3_db_mutex(sqlite3 *a1)
{
  return (sqlite3_mutex *)MEMORY[0x1E0DE8750](a1);
}

int sqlite3_errcode(sqlite3 *db)
{
  return MEMORY[0x1E0DE8780](db);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1E0DE8790](*(_QWORD *)&a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1E0DE8798](a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_result_codes(sqlite3 *a1, int onoff)
{
  return MEMORY[0x1E0DE87B8](a1, *(_QWORD *)&onoff);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1E0DE87C0](a1, zDbName, *(_QWORD *)&op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

int sqlite3_initialize(void)
{
  return MEMORY[0x1E0DE87F8]();
}

const char *sqlite3_libversion(void)
{
  return (const char *)MEMORY[0x1E0DE8828]();
}

void sqlite3_mutex_enter(sqlite3_mutex *a1)
{
  MEMORY[0x1E0DE8850](a1);
}

void sqlite3_mutex_leave(sqlite3_mutex *a1)
{
  MEMORY[0x1E0DE8858](a1);
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  return (sqlite3_stmt *)MEMORY[0x1E0DE8860](pDb, pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8888](db, zSql, *(_QWORD *)&nByte, *(_QWORD *)&prepFlags, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE88B0](pStmt);
}

const char *sqlite3_sourceid(void)
{
  return (const char *)MEMORY[0x1E0DE8990]();
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x1E0DE8998](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE89B8](pStmt);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x1E0DE8A98](db, zDb, *(_QWORD *)&eMode, pnLog, pnCkpt);
}

void *__cdecl sqlite3_wal_hook(sqlite3 *a1, int (__cdecl *a2)(void *, sqlite3 *, const char *, int), void *a3)
{
  return (void *)MEMORY[0x1E0DE8AA0](a1, a2, a3);
}

void srand48(uint64_t a1)
{
  MEMORY[0x1E0C85480](a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1E0DEEE68]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_taskGroup_addPending()
{
  return MEMORY[0x1E0DF0FE8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1E0C85790](*(_QWORD *)&a1);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

int tcgetattr(int a1, termios *a2)
{
  return MEMORY[0x1E0C858B0](*(_QWORD *)&a1, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  return MEMORY[0x1E0C858C0](*(_QWORD *)&a1, *(_QWORD *)&a2, a3);
}

time_t timegm(tm *const a1)
{
  return MEMORY[0x1E0C85958](a1);
}

mode_t umask(mode_t a1)
{
  return MEMORY[0x1E0C85998](a1);
}

int uname(utsname *a1)
{
  return MEMORY[0x1E0C859A0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void uuid_generate_random(uuid_t out)
{
  MEMORY[0x1E0C85A20](out);
}

void uuid_unparse_lower(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A48](uu, out);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1E0C85B60](msg);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1E0C85F00](xBOOL);
}

uint64_t xpc_copy_entitlement_for_self()
{
  return MEMORY[0x1E0C86118]();
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

