void sub_18CC9BCEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,void *>>>::operator()[abi:fe180100](char a1, uint64_t a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a2 + 328))
      AMSCore::URL::~URL((AMSCore::URL *)(a2 + 176));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a2 + 144));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a2 + 120));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a2 + 96));
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

uint64_t std::expected<AMSCore::MetricsEventModifier::TopicModifier,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176))
  {
    if (*(_BYTE *)(a1 + 168))
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 16));
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

void AMSCore::MetricsEventModifier::MetricsConfig::build(uint64_t a1)
{
  uint64_t v1;
  __int128 *v3;
  std::runtime_error *v4;
  std::runtime_error *v5;
  char v6;
  std::runtime_error_vtbl *v7;
  uint64_t v8;
  std::runtime_error_vtbl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void (***v27)(_QWORD);
  uint64_t v28;
  unsigned int *v29;
  void (***v30)(_QWORD);
  std::runtime_error v31;
  unsigned int *v32;
  unsigned int **v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char **v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  std::runtime_error_vtbl *v57;
  const char *imp;
  std::runtime_error_vtbl *v59;
  char *v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned int *v67;
  void (***v68)(_QWORD);
  unsigned int *v69;
  unsigned int **v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::runtime_error v76;
  std::runtime_error v77;
  unsigned int **v78;
  unsigned int *v79;
  uint64_t v80;
  __int128 v81;
  std::runtime_error v82;
  std::runtime_error v83;
  char **v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  char *v88;
  _BYTE v89[160];
  char v90;
  std::runtime_error v91;
  std::runtime_error v92;
  unsigned int **v93;
  unsigned int *v94;
  uint64_t v95;
  __int128 v96;
  std::runtime_error v97[2];
  unsigned int **v98;
  unsigned int *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char **v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  int v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  __int128 __p;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v1 = *(_QWORD *)(a1 + 608);
  if (!*(_BYTE *)(v1 + 88))
    goto LABEL_134;
  v3 = (__int128 *)(a1 + 472);
  v4 = (std::runtime_error *)(a1 + 416);
  v5 = (std::runtime_error *)(v1 + 8);
  v6 = *(_BYTE *)(v1 + 80);
  if (v6)
  {
    v7 = (std::runtime_error_vtbl *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 16);
    v9 = (std::runtime_error_vtbl *)(a1 + 424);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(a1 + 424) = v8;
    v10 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(a1 + 432) = v10;
    if (v10)
    {
      *(_QWORD *)(v8 + 16) = v9;
      v5->__vftable = v7;
      v7->~runtime_error = 0;
      *(_QWORD *)(v1 + 24) = 0;
      v1 = *(_QWORD *)(a1 + 608);
    }
    else
    {
      v4->__vftable = v9;
    }
    *(_BYTE *)(a1 + 440) = *(_BYTE *)(v1 + 32);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 416), v5);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v1 + 24);
    *(_QWORD *)(a1 + 416) = off_1E2521330;
    v11 = (_QWORD *)(v1 + 48);
    v12 = *(_QWORD *)(v1 + 48);
    v13 = a1 + 456;
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(a1 + 456) = v12;
    v14 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(a1 + 464) = v14;
    if (v14)
    {
      *(_QWORD *)(v12 + 16) = v13;
      *(_QWORD *)(v1 + 40) = v11;
      *v11 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 448) = v13;
    }
    v15 = *(_QWORD *)(a1 + 608);
    *v3 = *(_OWORD *)(v15 + 64);
    *(_QWORD *)(v15 + 64) = 0;
    *(_QWORD *)(v15 + 72) = 0;
  }
  *(_BYTE *)(a1 + 488) = v6;
  v16 = *(_QWORD *)(a1 + 616);
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = *(std::__shared_weak_count **)(a1 + 616);
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 600);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(std::__shared_weak_count **)(a1 + 528);
  if (!v23)
    goto LABEL_25;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
  {
LABEL_25:
    if ((*(char *)(a1 + 519) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (*(char *)(a1 + 519) < 0)
LABEL_26:
    operator delete(*(void **)(a1 + 496));
LABEL_27:
  v26 = a1 + 16;
  if (*(char *)(a1 + 591) < 0)
    operator delete(*(void **)(a1 + 568));
  if (!*(_BYTE *)(a1 + 488))
  {
    std::runtime_error::runtime_error(v97, v4);
    v97[1] = *(std::runtime_error *)(a1 + 432);
    v97[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v28 = *(_QWORD *)(a1 + 456);
    v98 = *(unsigned int ***)(a1 + 448);
    v99 = (unsigned int *)v28;
    v100 = *(_QWORD *)(a1 + 464);
    if (v100)
    {
      *(_QWORD *)(v28 + 16) = &v99;
      *(_QWORD *)(a1 + 448) = a1 + 456;
      *(_QWORD *)(a1 + 456) = 0;
      *(_QWORD *)(a1 + 464) = 0;
    }
    else
    {
      v98 = &v99;
    }
    v101 = *v3;
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    LOBYTE(v102) = 1;
    std::runtime_error::runtime_error(&v91, v97);
    v92 = v97[1];
    v91.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v93 = v98;
    v94 = v99;
    v95 = v100;
    if (v100)
    {
      *((_QWORD *)v99 + 2) = &v94;
      v98 = &v99;
      v99 = 0;
      v100 = 0;
    }
    else
    {
      v93 = &v94;
    }
    v96 = v101;
    v101 = 0uLL;
    std::runtime_error::runtime_error(&v82, &v91);
    v83 = v92;
    v82.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v29 = v94;
    v84 = (char **)v93;
    v85 = (char *)v94;
    v86 = v95;
    if (v95)
    {
      *((_QWORD *)v94 + 2) = &v85;
      v29 = 0;
      v93 = &v94;
      v94 = 0;
      v95 = 0;
    }
    else
    {
      v84 = &v85;
    }
    v87 = v96;
    v96 = 0uLL;
    v91.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v93, v29);
    MEMORY[0x18D7898AC](&v91);
    if (*(_BYTE *)(a1 + 368))
    {
      v30 = (void (***)(_QWORD))(a1 + 24);
      if (*(_BYTE *)(a1 + 360))
        std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v30);
      else
        (**v30)(v30);
      *(_BYTE *)(a1 + 368) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v82);
    v61 = v84;
    v60 = v85;
    *(_QWORD *)(a1 + 64) = v85;
    v62 = a1 + 64;
    *(std::runtime_error *)(a1 + 40) = v83;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v61;
    v63 = v86;
    *(_QWORD *)(a1 + 72) = v86;
    if (v63)
    {
      *((_QWORD *)v60 + 2) = v62;
      v60 = 0;
      v84 = &v85;
      v85 = 0;
      v86 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v62;
    }
    *(_OWORD *)(a1 + 80) = v87;
    v87 = 0uLL;
    *(_BYTE *)(a1 + 360) = 0;
    *(_BYTE *)(a1 + 368) = 1;
    v82.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v84, (unsigned int *)v60);
    MEMORY[0x18D7898AC](&v82);
    v26 = a1 + 16;
    if ((_BYTE)v102)
    {
      v97[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v99);
      MEMORY[0x18D7898AC](v97);
      if (*(_BYTE *)(a1 + 488))
        goto LABEL_130;
      goto LABEL_132;
    }
    goto LABEL_129;
  }
  if (!v90)
  {
    std::runtime_error::runtime_error(v97, &v82);
    v97[1] = v83;
    v97[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v98 = (unsigned int **)v84;
    v99 = (unsigned int *)v85;
    v100 = v86;
    if (v86)
    {
      *((_QWORD *)v85 + 2) = &v99;
      v84 = &v85;
      v85 = 0;
      v86 = 0;
    }
    else
    {
      v98 = &v99;
    }
    v101 = v87;
    v87 = 0uLL;
    LOBYTE(v102) = 1;
    std::runtime_error::runtime_error(&v76, v97);
    v77 = v97[1];
    v76.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v78 = v98;
    v79 = v99;
    v80 = v100;
    if (v100)
    {
      *((_QWORD *)v99 + 2) = &v79;
      v98 = &v99;
      v99 = 0;
      v100 = 0;
    }
    else
    {
      v78 = &v79;
    }
    v81 = v101;
    v101 = 0uLL;
    std::runtime_error::runtime_error(&v91, &v76);
    v92 = v77;
    v67 = v79;
    v91.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v93 = v78;
    v94 = v79;
    v95 = v80;
    if (v80)
    {
      *((_QWORD *)v79 + 2) = &v94;
      v67 = 0;
      v78 = &v79;
      v79 = 0;
      v80 = 0;
    }
    else
    {
      v93 = &v94;
    }
    v96 = v81;
    v81 = 0uLL;
    v76.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v78, v67);
    MEMORY[0x18D7898AC](&v76);
    if (*(_BYTE *)(a1 + 368))
    {
      v68 = (void (***)(_QWORD))(a1 + 24);
      if (*(_BYTE *)(a1 + 360))
        std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v68);
      else
        (**v68)(v68);
      *(_BYTE *)(a1 + 368) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v91);
    v70 = v93;
    v69 = v94;
    *(_QWORD *)(a1 + 64) = v94;
    v71 = a1 + 64;
    *(std::runtime_error *)(a1 + 40) = v92;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v70;
    v72 = v95;
    *(_QWORD *)(a1 + 72) = v95;
    if (v72)
    {
      *((_QWORD *)v69 + 2) = v71;
      v69 = 0;
      v93 = &v94;
      v94 = 0;
      v95 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v71;
    }
    v26 = a1 + 16;
    *(_OWORD *)(a1 + 80) = v96;
    v96 = 0uLL;
    *(_BYTE *)(a1 + 360) = 0;
    *(_BYTE *)(a1 + 368) = 1;
    v91.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v93, v69);
    MEMORY[0x18D7898AC](&v91);
    if ((_BYTE)v102)
    {
      v97[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v99);
      MEMORY[0x18D7898AC](v97);
    }
    goto LABEL_125;
  }
  if (*(_BYTE *)(a1 + 488))
  {
    AMSCore::MetricsEventModifier::MetricsConfig::buildFieldFilters((void **)&v76.__vftable, (uint64_t *)v4);
    if (*(_BYTE *)(a1 + 488))
    {
      AMSCore::MetricsEventModifier::MetricsConfig::buildTopicOverrides((uint64_t **)&v91, v4);
      if (v90)
      {
        AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig((uint64_t)v97, (__int128 *)&v82, (uint64_t)&v76, &v91);
        if (*(_BYTE *)(a1 + 368))
        {
          v27 = (void (***)(_QWORD))(a1 + 24);
          if (*(_BYTE *)(a1 + 360))
            std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v27);
          else
            (**v27)(v27);
          *(_BYTE *)(a1 + 368) = 0;
        }
        v31 = v97[0];
        v33 = v98;
        v32 = v99;
        *(_QWORD *)(a1 + 64) = v99;
        v34 = a1 + 64;
        *(std::runtime_error *)(a1 + 24) = v31;
        *(std::runtime_error *)(a1 + 36) = *(std::runtime_error *)((char *)&v97[0].__imp_.__imp_ + 4);
        *(_QWORD *)(a1 + 56) = v33;
        v35 = v100;
        *(_QWORD *)(a1 + 72) = v100;
        if (v35)
        {
          *((_QWORD *)v32 + 2) = v34;
          v98 = &v99;
          v99 = 0;
          v100 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v34;
        }
        v36 = v101;
        *(_QWORD *)(a1 + 88) = *((_QWORD *)&v101 + 1);
        v37 = a1 + 88;
        *(_QWORD *)(a1 + 80) = v36;
        v38 = v102;
        *(_QWORD *)(a1 + 96) = v102;
        if (v38)
        {
          *(_QWORD *)(*((_QWORD *)&v36 + 1) + 16) = v37;
          *(_QWORD *)&v101 = (char *)&v101 + 8;
          *((_QWORD *)&v101 + 1) = 0;
          v102 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 80) = v37;
        }
        v39 = v103;
        v40 = v104;
        *(_QWORD *)(a1 + 112) = v104;
        v41 = a1 + 112;
        *(_QWORD *)(a1 + 104) = v39;
        v42 = v105;
        *(_QWORD *)(a1 + 120) = v105;
        if (v42)
        {
          *((_QWORD *)v40 + 2) = v41;
          v103 = &v104;
          v104 = 0;
          v105 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = v41;
        }
        *(_BYTE *)(a1 + 144) = 0;
        v43 = (__int128 *)(a1 + 144);
        *(_OWORD *)(a1 + 128) = v106;
        *(_BYTE *)(a1 + 296) = 0;
        if (!v122)
          goto LABEL_75;
        *(_BYTE *)(a1 + 144) = 0;
        *(_BYTE *)(a1 + 168) = 0;
        if (v109)
        {
          *v43 = v107;
          *(_QWORD *)(a1 + 160) = v108;
          v108 = 0;
          v107 = 0uLL;
          *(_BYTE *)(a1 + 168) = 1;
        }
        *(_BYTE *)(a1 + 176) = 0;
        *(_BYTE *)(a1 + 200) = 0;
        if (v112)
        {
          *(_OWORD *)(a1 + 176) = v110;
          *(_QWORD *)(a1 + 192) = v111;
          v111 = 0;
          v110 = 0uLL;
          *(_BYTE *)(a1 + 200) = 1;
        }
        *(_BYTE *)(a1 + 208) = 0;
        *(_BYTE *)(a1 + 232) = 0;
        if (v115)
        {
          *(_OWORD *)(a1 + 208) = v113;
          *(_QWORD *)(a1 + 224) = v114;
          v114 = 0;
          v113 = 0uLL;
          *(_BYTE *)(a1 + 232) = 1;
        }
        *(_DWORD *)(a1 + 240) = v116;
        *(_QWORD *)(a1 + 248) = a1 + 248;
        *(_QWORD *)(a1 + 256) = a1 + 248;
        *(_QWORD *)(a1 + 264) = 0;
        if (v43 != &v107)
        {
          v44 = v119;
          if (v119)
          {
            v45 = v118;
            v46 = v117;
            v47 = *v118;
            *(_QWORD *)(v47 + 8) = *(_QWORD *)(v117 + 8);
            **(_QWORD **)(v46 + 8) = v47;
            v48 = *(_QWORD *)(a1 + 248);
            *(_QWORD *)(v48 + 8) = v45;
            *v45 = v48;
            *(_QWORD *)(a1 + 248) = v46;
            *(_QWORD *)(v46 + 8) = a1 + 248;
            *(_QWORD *)(a1 + 264) = v44;
            v119 = 0;
          }
          *(_OWORD *)(a1 + 272) = v120;
          *(_QWORD *)(a1 + 288) = v121;
          v121 = 0;
          v120 = 0uLL;
          *(_BYTE *)(a1 + 296) = 1;
LABEL_75:
          *(_OWORD *)(a1 + 304) = __p;
          v49 = v124;
          v50 = v125;
          v124 = 0;
          __p = 0uLL;
          *(_QWORD *)(a1 + 320) = v49;
          *(_QWORD *)(a1 + 328) = v50;
          v51 = a1 + 336;
          v52 = v126;
          v53 = v127;
          *(_QWORD *)(a1 + 336) = v126;
          *(_QWORD *)(a1 + 344) = v53;
          if (v53)
          {
            *(_QWORD *)(v52 + 16) = v51;
            v125 = &v126;
            v126 = 0;
            v127 = 0;
            v52 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 328) = v51;
          }
          *(_QWORD *)(a1 + 352) = v128;
          *(_BYTE *)(a1 + 360) = 1;
          *(_BYTE *)(a1 + 368) = 1;
          std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy((char *)v52);
          v54 = __p;
          if ((_QWORD)__p)
          {
            v55 = *((_QWORD *)&__p + 1);
            v56 = (void *)__p;
            if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
            {
              do
              {
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v55 - 16));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v55 - 40));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v55 - 64));
                std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(char **)(v55 - 120));
                v55 -= 128;
              }
              while (v55 != v54);
              v56 = (void *)__p;
            }
            *((_QWORD *)&__p + 1) = v54;
            operator delete(v56);
          }
          if (v122)
            AMSCore::URL::~URL((AMSCore::URL *)&v107);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v104);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v101 + 1));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v99);
          std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy((char *)v91.__imp_.__imp_);
          v57 = v76.__vftable;
          if (v76.__vftable)
          {
            imp = v76.__imp_.__imp_;
            v59 = v76.__vftable;
            if (v76.__imp_.__imp_ != (const char *)v76.__vftable)
            {
              do
              {
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)imp - 2));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)imp - 5));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)imp - 8));
                std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*((char **)imp - 15));
                imp -= 128;
              }
              while (imp != (const char *)v57);
              v59 = v76.__vftable;
            }
            v76.__imp_.__imp_ = (const char *)v57;
            operator delete(v59);
          }
LABEL_125:
          if (!v90)
          {
            ((void (*)(std::runtime_error *))v82.~runtime_error)(&v82);
            if (*(_BYTE *)(a1 + 488))
              goto LABEL_130;
            goto LABEL_132;
          }
          if (v89[152])
            AMSCore::URL::~URL((AMSCore::URL *)v89);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v88);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v87 + 1));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v85);
LABEL_129:
          if (*(_BYTE *)(a1 + 488))
          {
LABEL_130:
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v4, *(unsigned int **)(a1 + 424));
LABEL_133:
            *(_QWORD *)(a1 + 416) = v26;
            *(_QWORD *)a1 = 0;
            *((_BYTE *)v3 + 152) = 1;
            AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v4);
            return;
          }
LABEL_132:
          ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
          goto LABEL_133;
        }
      }
    }
  }
LABEL_134:
  __break(1u);
}

void sub_18CC9C938(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a66;
  uint64_t v66;

  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(a58);
  a66 = (void **)&a12;
  std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100](&a66);
  std::expected<AMSCore::MetricsEventModifier::EventModifier,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a21);
  std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](v66);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC9C98C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC9C8FCLL);
}

void sub_18CC9C994(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  *(_BYTE *)(v2 + 152) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::MetricsConfig::build(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void (***v14)(_QWORD);
  unsigned int v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  if ((__p[624] & 1) == 0)
  {
    v2 = *((_QWORD *)__p + 77);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 77);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 75);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 66);
    if (!v9)
      goto LABEL_16;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if ((__p[519] & 0x80000000) == 0)
      {
LABEL_17:
        if ((__p[591] & 0x80000000) == 0)
          goto LABEL_18;
LABEL_43:
        operator delete(*((void **)__p + 71));
        goto LABEL_18;
      }
    }
    else
    {
LABEL_16:
      if ((__p[519] & 0x80000000) == 0)
        goto LABEL_17;
    }
    operator delete(*((void **)__p + 62));
    if ((__p[591] & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_18:
  v12 = (char *)*((_QWORD *)__p + 51);
  if (v12 == __p + 384)
  {
    v13 = 4;
    v12 = __p + 384;
  }
  else
  {
    if (!v12)
      goto LABEL_23;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_23:
  if (__p[368])
  {
    v14 = (void (***)(_QWORD))(__p + 24);
    if (__p[360])
      std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v14);
    else
      (**v14)(v14);
  }
  do
  {
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v16)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 70);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 68);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(__p);
}

void std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(*(char **)(a1 + 312));
  v2 = *(_QWORD *)(a1 + 280);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 288);
    v4 = *(void **)(a1 + 280);
    if (v3 != v2)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v3 - 16));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v3 - 40));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v3 - 64));
        std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(char **)(v3 - 120));
        v3 -= 128;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 280);
    }
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 272))
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 120));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 88));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 64));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 40));
}

void AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t *AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t *result)
{
  uint64_t *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::runtime_error v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::runtime_error v21[2];
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t *v27;
  uint64_t v28;
  __int128 v30;
  _BYTE v31[160];
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD v35[3];
  char v36;
  _BYTE v37[24];
  uint64_t *v38;
  uint64_t v39;

  v1 = result;
  v39 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*result + 360);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*result - 8))(*result - 16);
    v4 = *result;
    result = *(uint64_t **)(*result + 392);
    if (result)
    {
      if (result == (uint64_t *)(v4 + 368))
      {
        v38 = (uint64_t *)v37;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _BYTE *))(*result + 24))(result, v37);
      }
      else
      {
        v38 = result;
        *(_QWORD *)(v4 + 392) = 0;
      }
    }
    else
    {
      v38 = 0;
    }
    if (v38)
    {
      v5 = *v1;
      if (!*(_BYTE *)(v5 + 352))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 344);
      if (v7)
      {
        v8 = *v6;
        *(std::runtime_error *)((char *)&v21[0].__imp_.__imp_ + 4) = *(std::runtime_error *)(v5 + 20);
        v21[0] = v8;
        v9 = (_QWORD *)(v5 + 48);
        v10 = *(_QWORD *)(v5 + 48);
        v22 = *(uint64_t **)(v5 + 40);
        v23 = v10;
        v24 = *(_QWORD *)(v5 + 56);
        if (v24)
        {
          *(_QWORD *)(v10 + 16) = &v23;
          *(_QWORD *)(v5 + 40) = v9;
          *v9 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v22 = &v23;
        }
        v13 = (_QWORD *)(v5 + 72);
        v14 = *(_QWORD *)(v5 + 72);
        *(_QWORD *)&v25 = *(_QWORD *)(v5 + 64);
        *((_QWORD *)&v25 + 1) = v14;
        if (*(_QWORD *)(v5 + 80))
        {
          *(_QWORD *)(v14 + 16) = (char *)&v25 + 8;
          *(_QWORD *)(v5 + 64) = v13;
          *v13 = 0;
          *(_QWORD *)(v5 + 80) = 0;
        }
        else
        {
          *(_QWORD *)&v25 = (char *)&v25 + 8;
        }
        v15 = (_QWORD *)(v5 + 96);
        v16 = *(_QWORD *)(v5 + 96);
        v27 = *(uint64_t **)(v5 + 88);
        v28 = v16;
        if (*(_QWORD *)(v5 + 104))
        {
          *(_QWORD *)(v16 + 16) = &v28;
          *(_QWORD *)(v5 + 88) = v15;
          *v15 = 0;
          *(_QWORD *)(v5 + 104) = 0;
        }
        else
        {
          v27 = &v28;
        }
        v30 = *(_OWORD *)(v5 + 112);
        v31[0] = 0;
        v31[152] = 0;
        std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)v31, (__int128 *)(v5 + 128));
        v33 = 0;
        v32 = 0uLL;
        v32 = *(_OWORD *)(v5 + 288);
        v17 = *(_QWORD **)(v5 + 312);
        v33 = *(_QWORD *)(v5 + 304);
        *(_QWORD *)(v5 + 296) = 0;
        *(_QWORD *)(v5 + 304) = 0;
        *(_QWORD *)(v5 + 288) = 0;
        v18 = *(_QWORD *)(v5 + 320);
        v19 = *(_QWORD *)(v5 + 328);
        v34 = v17;
        v35[0] = v18;
        v35[1] = v19;
        if (v19)
        {
          *(_QWORD *)(v18 + 16) = v35;
          *(_QWORD *)(v5 + 312) = v5 + 320;
          *(_QWORD *)(v5 + 320) = 0;
          *(_QWORD *)(v5 + 328) = 0;
        }
        else
        {
          v34 = v35;
        }
        v35[2] = *(_QWORD *)(v5 + 336);
      }
      else
      {
        std::runtime_error::runtime_error(v21, v6);
        v11 = (_QWORD *)(v5 + 48);
        v12 = *(_QWORD *)(v5 + 48);
        v21[1] = *(std::runtime_error *)(v5 + 24);
        v21[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v22 = *(uint64_t **)(v5 + 40);
        v23 = v12;
        v24 = *(_QWORD *)(v5 + 56);
        if (v24)
        {
          *(_QWORD *)(v12 + 16) = &v23;
          *(_QWORD *)(v5 + 40) = v11;
          *v11 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v22 = &v23;
        }
        v25 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v36 = v7;
      if (!v38)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t *, std::runtime_error *))(*v38 + 48))(v38, v21);
      if (v36)
        std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v21);
      else
        ((void (*)(std::runtime_error *))v21[0].~runtime_error)(v21);
    }
    else
    {
      (*v3)(v3);
    }
    result = v38;
    if (v38 == (uint64_t *)v37)
    {
      v20 = 4;
      result = (uint64_t *)v37;
    }
    else
    {
      if (!v38)
        return result;
      v20 = 5;
    }
    return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v20))();
  }
  return result;
}

void sub_18CC9D1A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  unsigned int v6;
  unsigned int v7;

  v2 = (_QWORD *)(a1 + 368);
  v3 = *(_QWORD **)(a1 + 392);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 352))
  {
    v5 = (void (***)(_QWORD))(a1 + 8);
    if (*(_BYTE *)(a1 + 344))
      std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v5);
    else
      (**v5)(v5);
  }
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 360);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_20MetricsEventModifier13MetricsConfigENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier13MetricsConfigENS_5ErrorEE7Promise17get_return"
                                "_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_20MetricsEventModifier13MetricsConfigENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier13MetricsConfigENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::MetricsEventModifier::MergedEventModifier::shouldDropEvent(AMSCore::MetricsEventModifier::MergedEventModifier *this, const AMSCore::IMetricsProvider::Event *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  const void *v8;
  size_t v9;
  _QWORD *v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  const void *v16;
  _QWORD *v17;
  const void *v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  char v29;

  v4 = (uint64_t *)((char *)a2 + 72);
  AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v27, (uint64_t *)a2 + 9, "topic", 5uLL);
  if (!v29)
  {
    __break(1u);
    return;
  }
  v5 = *(_QWORD *)(v27 + 8);
  if (*(char *)(v27 + 23) >= 0)
    v5 = *(unsigned __int8 *)(v27 + 23);
  if (v5 && !*((_BYTE *)this + 27))
  {
    AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v27, v4, "eventType", 9uLL);
    if (!v29)
    {
      (*(void (**)(uint64_t *))v27)(&v27);
      goto LABEL_46;
    }
    v6 = (uint64_t *)*((_QWORD *)this + 8);
    if (!v6)
    {
LABEL_46:
      if (!*((_BYTE *)a2 + 96))
      {
        if (*((_BYTE *)this + 16))
        {
          AMSCore::ServiceProvider<AMSCore::IMetricsSamplingProvider>::getDefault(&v27);
          (*(void (**)(uint64_t, AMSCore::MetricsEventModifier::MergedEventModifier *, _QWORD))(*(_QWORD *)v27 + 24))(v27, this, *((_QWORD *)this + 35));
          v24 = v28;
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
      }
      return;
    }
    v7 = *(char *)(v27 + 23);
    if (v7 >= 0)
      v8 = (const void *)v27;
    else
      v8 = *(const void **)v27;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v27 + 23);
    else
      v9 = *(_QWORD *)(v27 + 8);
    v10 = (_QWORD *)((char *)this + 64);
    while (1)
    {
      v11 = *((char *)v6 + 55);
      if (v11 >= 0)
        v12 = v6 + 4;
      else
        v12 = (const void *)v6[4];
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)v6 + 55);
      else
        v13 = v6[5];
      if (v9 >= v13)
        v14 = v13;
      else
        v14 = v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
      {
        if (v15 < 0)
          goto LABEL_17;
LABEL_31:
        v10 = v6;
        v6 = (uint64_t *)*v6;
        if (!v6)
        {
LABEL_32:
          if (v10 == (_QWORD *)((char *)this + 64))
            goto LABEL_46;
          v18 = (const void *)v10[4];
          v17 = v10 + 4;
          v16 = v18;
          v19 = *((char *)v17 + 23);
          if (v19 >= 0)
            v20 = v17;
          else
            v20 = v16;
          if (v19 >= 0)
            v21 = *((unsigned __int8 *)v17 + 23);
          else
            v21 = v17[1];
          if (v21 >= v9)
            v22 = v9;
          else
            v22 = v21;
          v23 = memcmp(v8, v20, v22);
          if (v23)
          {
            if (v23 < 0)
              goto LABEL_46;
          }
          else if (v9 < v21)
          {
            goto LABEL_46;
          }
          return;
        }
      }
      else
      {
        if (v13 >= v9)
          goto LABEL_31;
LABEL_17:
        v6 = (uint64_t *)v6[1];
        if (!v6)
          goto LABEL_32;
      }
    }
  }
}

void AMSCore::MetricsEventModifier::MergedEventModifier::handleFieldModifiers(AMSCore::MetricsEventModifier::MergedEventModifier *this, AMSCore::IMetricsProvider::Event *a2)
{
  const void **v4;
  const void ***v5;
  uint64_t *v6;
  uint64_t *v7;
  const void **v8;
  const void ***v9;
  BOOL v10;
  const std::string::value_type **v11;
  char *v12;
  _QWORD *v13;
  size_t v14;
  const std::string::value_type *v15;
  uint64_t *v16;
  _QWORD *v17;
  int v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  int v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  const std::string::value_type *v39;
  std::string::value_type *v40;
  _QWORD **v41;
  char *v42;
  std::runtime_error v43;
  __int128 v44;
  uint64_t *v45;
  _QWORD v46[2];
  __int128 v47;
  char v48;
  std::runtime_error v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;

  v4 = (const void **)*((_QWORD *)this + 4);
  v5 = (const void ***)((char *)this + 40);
  if (v4 != (const void **)((char *)this + 40))
  {
    v6 = (uint64_t *)((char *)a2 + 80);
    do
    {
      v7 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)a2 + 72, v4 + 4);
      if (v6 != v7)
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)a2 + 9, (uint64_t)v7);
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)a2 + 16, v4 + 4);
      v8 = (const void **)v4[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v4[2];
          v10 = *v9 == v4;
          v4 = (const void **)v9;
        }
        while (!v10);
      }
      v4 = (const void **)v9;
    }
    while (v9 != v5);
  }
  v11 = (const std::string::value_type **)*((_QWORD *)this + 10);
  v42 = (char *)this + 88;
  if (v11 != (const std::string::value_type **)((char *)this + 88))
  {
    v12 = (char *)a2 + 72;
    v13 = (_QWORD *)((char *)a2 + 80);
    v41 = (_QWORD **)v12;
    do
    {
      if (*((char *)v11 + 55) < 0)
      {
        v15 = v11[4];
        v14 = (size_t)v11[5];
        v16 = (uint64_t *)*v13;
        if (!*v13)
          goto LABEL_52;
      }
      else
      {
        v14 = *((unsigned __int8 *)v11 + 55);
        v15 = (const std::string::value_type *)(v11 + 4);
        v16 = (uint64_t *)*v13;
        if (!*v13)
          goto LABEL_52;
      }
      v17 = v13;
      do
      {
        while (1)
        {
          v18 = *((char *)v16 + 55);
          v19 = v18 >= 0 ? v16 + 4 : (uint64_t *)v16[4];
          v20 = v18 >= 0 ? *((unsigned __int8 *)v16 + 55) : v16[5];
          v21 = v20 >= v14 ? v14 : v20;
          v22 = memcmp(v15, v19, v21);
          if (v22)
            break;
          if (v14 <= v20)
            goto LABEL_34;
LABEL_20:
          v16 = (uint64_t *)v16[1];
          if (!v16)
            goto LABEL_35;
        }
        if ((v22 & 0x80000000) == 0)
          goto LABEL_20;
LABEL_34:
        v17 = v16;
        v16 = (uint64_t *)*v16;
      }
      while (v16);
LABEL_35:
      if (v17 != v13)
      {
        v23 = *((char *)v17 + 55);
        if (v23 >= 0)
          v24 = v17 + 4;
        else
          v24 = (const void *)v17[4];
        if (v23 >= 0)
          v25 = *((unsigned __int8 *)v17 + 55);
        else
          v25 = v17[5];
        if (v25 >= v14)
          v26 = v14;
        else
          v26 = v25;
        v27 = memcmp(v15, v24, v26);
        if (v27)
        {
          if ((v27 & 0x80000000) == 0)
            goto LABEL_47;
        }
        else if (v14 >= v25)
        {
LABEL_47:
          v28 = *((_DWORD *)v17 + 20);
          if (v28 == -1)
            v28 = 0;
          switch(v28)
          {
            case 1:
              v32 = 0;
              v33 = *((unsigned __int8 *)v17 + 56);
              goto LABEL_62;
            case 2:
              v29 = (uint64_t)*((double *)v17 + 7);
              goto LABEL_61;
            case 3:
            case 4:
              v29 = v17[7];
              goto LABEL_61;
            case 7:
              v29 = v17[7] / 1000;
LABEL_61:
              v33 = v29;
              v32 = v29 & 0xFFFFFFFFFFFFFF00;
LABEL_62:
              v43.__vftable = (std::runtime_error_vtbl *)(v32 | v33);
              v48 = 1;
              v31 = (uint64_t)v11[8];
              if ((v31 & 0x8000000000000000) == 0)
                goto LABEL_63;
              goto LABEL_68;
            default:
              break;
          }
        }
      }
LABEL_52:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v49, 4u, "any doesn't contain expected type");
      std::runtime_error::runtime_error(&v43, &v49);
      v44 = v50;
      v30 = (unsigned int *)v52;
      v43.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v45 = v51;
      v46[0] = v52;
      v46[1] = v53;
      if (v53)
      {
        *(_QWORD *)(v52 + 16) = v46;
        v30 = 0;
        v51 = &v52;
        v52 = 0;
        v53 = 0;
      }
      else
      {
        v45 = v46;
      }
      v47 = v54;
      v54 = 0uLL;
      v48 = 0;
      v49.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v51, v30);
      MEMORY[0x18D7898AC](&v49);
      if (!v48)
        goto LABEL_67;
      v31 = (uint64_t)v11[8];
      if (v31 < 0)
        goto LABEL_68;
LABEL_63:
      v34 = (uint64_t)v11[7];
      if (v34 >= 1)
      {
        v35 = __exp10((double)v31);
        v36 = (double)(uint64_t)v43.__vftable / (double)v34 / v35;
        v37 = floor(v36);
        v38 = ceil(v36);
        if ((uint64_t)v43.__vftable > 0)
          v38 = v37;
        v49.__vftable = (std::runtime_error_vtbl *)(uint64_t)(v35 * v38);
        v49.__imp_.__imp_ = (const char *)1;
        std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<long long>(v41, v11 + 4, (uint64_t **)&v49);
        if (!v48)
LABEL_67:
          ((void (*)(std::runtime_error *))v43.~runtime_error)(&v43);
      }
LABEL_68:
      v39 = v11[1];
      if (v39)
      {
        do
        {
          v40 = (std::string::value_type *)v39;
          v39 = *(const std::string::value_type **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (std::string::value_type *)v11[2];
          v10 = *(_QWORD *)v40 == (_QWORD)v11;
          v11 = (const std::string::value_type **)v40;
        }
        while (!v10);
      }
      v11 = (const std::string::value_type **)v40;
    }
    while (v40 != v42);
  }
}

void AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForEvent(uint64_t a1, uint64_t a2, AMSCore::MetricsEventModifier::EventModifierForFieldFilters *a3)
{
  uint64_t v6;
  uint64_t *v7;
  const void **v8;
  const void ***v9;
  const void **v10;
  const void **v11;
  _QWORD *v12;
  const void **v13;
  const void ***v14;
  BOOL v15;
  const void **v16;
  const void ***v17;
  const void **v18;
  const void ***v19;
  const void **v20;
  uint64_t *v21;
  __int128 *v22;
  __int128 *v23;
  unsigned __int8 *v24;
  __int128 v25;
  int v26;
  const void **v27;
  const void ***v28;
  const void **v29;
  const void **v30;
  const void **v31;
  const void **v32;
  int v33;
  uint64_t *v34;
  unint64_t v35;
  size_t v36;
  int v37;
  int v38;
  const void *v39;
  unint64_t v40;
  size_t v41;
  int v42;
  uint64_t *v43;
  AMSCore::MetricsEventModifier::EventModifierForFieldFilters *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  AMSCore::MetricsEventModifier::EventModifierForFieldFilters *v48;
  _QWORD *i;
  std::string v50;
  int v51;
  char v52;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 40) = 0;
  v6 = a1 + 40;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v7 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  v8 = *(const void ***)(a2 + 32);
  v9 = (const void ***)(a2 + 40);
  if (v8 != (const void **)(a2 + 40))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v7, v6, v8 + 4, (uint64_t)(v8 + 4));
      v13 = (const void **)v8[1];
      if (v13)
      {
        do
        {
          v14 = (const void ***)v13;
          v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (const void ***)v8[2];
          v15 = *v14 == v8;
          v8 = (const void **)v14;
        }
        while (!v15);
      }
      v8 = (const void **)v14;
    }
    while (v14 != v9);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  v10 = *(const void ***)(a2 + 56);
  if (v10 != (const void **)(a2 + 64))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)(a1 + 56), a1 + 64, v10 + 4, (uint64_t)(v10 + 4));
      v16 = (const void **)v10[1];
      if (v16)
      {
        do
        {
          v17 = (const void ***)v16;
          v16 = (const void **)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (const void ***)v10[2];
          v15 = *v17 == v10;
          v10 = (const void **)v17;
        }
        while (!v15);
      }
      v10 = (const void **)v17;
    }
    while (v17 != (const void ***)(a2 + 64));
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  v11 = *(const void ***)(a2 + 80);
  if (v11 != (const void **)(a2 + 88))
  {
    do
    {
      std::__tree<AMSCore::MetricsEventModifier::DeResFields>::__emplace_hint_unique_key_args<AMSCore::MetricsEventModifier::DeResFields,AMSCore::MetricsEventModifier::DeResFields const&>((uint64_t *)(a1 + 80), a1 + 88, v11 + 4, (uint64_t)(v11 + 4));
      v18 = (const void **)v11[1];
      if (v18)
      {
        do
        {
          v19 = (const void ***)v18;
          v18 = (const void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (const void ***)v11[2];
          v15 = *v19 == v11;
          v11 = (const void **)v19;
        }
        while (!v15);
      }
      v11 = (const void **)v19;
    }
    while (v19 != (const void ***)(a2 + 88));
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    AMSCore::URL::URL((std::string *)(a1 + 120), (const AMSCore::URL *)(a2 + 120));
    *(_BYTE *)(a1 + 272) = 1;
  }
  v47 = a1 + 120;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 328);
  v12 = *(_QWORD **)(a2 + 280);
  v48 = (AMSCore::MetricsEventModifier::EventModifierForFieldFilters *)a1;
  for (i = *(_QWORD **)(a2 + 288); v12 != i; v12 += 16)
  {
    v20 = (const void **)*v12;
    if ((_QWORD *)*v12 == v12 + 1)
    {
LABEL_29:
    }
    else
    {
      while (1)
      {
        v21 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)a3, v20 + 4);
        if ((uint64_t *)((char *)a3 + 8) == v21)
          break;
        v22 = (__int128 *)v20[7];
        v23 = (__int128 *)v20[8];
        if (v22 == v23)
          break;
        v24 = (unsigned __int8 *)(v21 + 7);
        while (1)
        {
          if (*((char *)v22 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
          }
          else
          {
            v25 = *v22;
            v50.__r_.__value_.__r.__words[2] = *((_QWORD *)v22 + 2);
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v25;
          }
          v51 = 5;
          v26 = AMSCore::operator==((unsigned __int8 *)&v50, v24);
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v52, (uint64_t)&v50);
          if (v26)
            break;
          v22 = (__int128 *)((char *)v22 + 24);
          if (v22 == v23)
            goto LABEL_30;
        }
        v27 = (const void **)v20[1];
        if (v27)
        {
          do
          {
            v28 = (const void ***)v27;
            v27 = (const void **)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (const void ***)v20[2];
            v15 = *v28 == v20;
            v20 = (const void **)v28;
          }
          while (!v15);
        }
        v20 = (const void **)v28;
        if (v28 == v12 + 1)
          goto LABEL_29;
      }
    }
LABEL_30:
    ;
  }
  v31 = (const void **)*((_QWORD *)a3 + 1);
  v30 = (const void **)((char *)a3 + 8);
  v29 = v31;
  if (!v31)
    return;
  v32 = v30;
  do
  {
    while (1)
    {
      v33 = *((char *)v29 + 55);
      v34 = v33 >= 0 ? (uint64_t *)(v29 + 4) : (uint64_t *)v29[4];
      v35 = v33 >= 0 ? *((unsigned __int8 *)v29 + 55) : (unint64_t)v29[5];
      v36 = v35 >= 5 ? 5 : v35;
      v37 = memcmp(v34, "topic", v36);
      if (v37)
        break;
      if (v35 < 5)
        goto LABEL_52;
LABEL_50:
      v32 = v29;
      v29 = (const void **)*v29;
      if (!v29)
        goto LABEL_67;
    }
    if ((v37 & 0x80000000) == 0)
      goto LABEL_50;
LABEL_52:
    v29 = (const void **)v29[1];
  }
  while (v29);
LABEL_67:
  if (v32 != v30)
  {
    v38 = *((char *)v32 + 55);
    if (v38 >= 0)
      v39 = v32 + 4;
    else
      v39 = v32[4];
    if (v38 >= 0)
      v40 = *((unsigned __int8 *)v32 + 55);
    else
      v40 = (unint64_t)v32[5];
    if (v40 >= 5)
      v41 = 5;
    else
      v41 = v40;
    v42 = memcmp(v39, "topic", v41);
    if (v42)
    {
      if (v42 < 0)
      {
LABEL_81:
        if (*((_DWORD *)v32 + 20) == 5)
        {
          v43 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a2 + 304, v32 + 7);
          if ((uint64_t *)(a2 + 312) != v43)
          {
            v45 = v43;
            if (*((_BYTE *)v45 + 168))
            {
              v46 = v45[20];
              *(_BYTE *)(v47 - 8) = *((_BYTE *)v45 + 168);
              *(_QWORD *)(v47 - 16) = v46;
            }
            if (*((_BYTE *)v45 + 328))
              std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>(v47, (AMSCore::URL *)(v45 + 22));
          }
        }
      }
    }
    else if (v40 <= 5)
    {
      goto LABEL_81;
    }
  }
}

void sub_18CC9DDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, AMSCore::MetricsEventModifier::EventModifier *a11)
{
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(a11);
  _Unwind_Resume(a1);
}

void sub_18CC9DDEC(_Unwind_Exception *a1)
{
  char **v1;
  char **v2;
  char **v3;

  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v3);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v2);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForTopic(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 16;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    AMSCore::URL::URL((std::string *)(a1 + 16), (const AMSCore::URL *)(a2 + 120));
    *(_BYTE *)(a1 + 168) = 1;
  }
  v7 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a2 + 304, a3);
  if ((uint64_t *)(a2 + 312) != v7)
  {
    if (*((_BYTE *)v7 + 168))
    {
      v8 = v7[20];
      *(_BYTE *)(a1 + 8) = *((_BYTE *)v7 + 168);
      *(_QWORD *)a1 = v8;
    }
    if (*((_BYTE *)v7 + 328))
      std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>(v6, (AMSCore::URL *)(v7 + 22));
  }
}

void sub_18CC9DEC8(_Unwind_Exception *exception_object)
{
  AMSCore::URL *v1;
  uint64_t v2;

  if (*(_BYTE *)(v2 + 168))
    AMSCore::URL::~URL(v1);
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsEventModifierProvider::~MetricsEventModifierProvider(std::mutex *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[48];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[32];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[32];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[16];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  std::mutex::~mutex(this);
}

_QWORD *std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E2521EF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E2521EF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E2521EF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E2521EF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  __int128 v26;
  int v27;
  void *v28[2];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        goto LABEL_31;
      v29 = 7;
      strcpy((char *)v28, "metrics");
      *(_OWORD *)__p = 0u;
      v26 = 0u;
      v27 = 1065353216;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v28, (uint64_t)v28);
      v8 = (void **)v26;
      if ((_QWORD)v26)
      {
        v24 = v6;
        v9 = *a2;
        v10 = a2[1];
        v11 = a2[5];
        v12 = a2[6];
        v13 = (_QWORD *)v26;
        v15 = a2[10];
        v14 = a2[11];
        while (1)
        {
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v9, v10, (uint64_t)(v13 + 2)))
          {
            v16 = 1;
            goto LABEL_16;
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, v12, (uint64_t)(v13 + 2)))
          {
            v16 = 1;
            goto LABEL_16;
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v15, v14, (uint64_t)(v13 + 2)))
          {
            break;
          }
          v13 = (_QWORD *)*v13;
          if (!v13)
          {
            v16 = 0;
            goto LABEL_16;
          }
        }
        v16 = 1;
        do
        {
LABEL_16:
          v17 = (void **)*v8;
          if (*((char *)v8 + 39) < 0)
            operator delete(v8[2]);
          operator delete(v8);
          v8 = v17;
        }
        while (v17);
        v6 = v24;
      }
      else
      {
        v16 = 0;
      }
      v18 = __p[0];
      __p[0] = 0;
      if (v18)
        operator delete(v18);
      if (v29 < 0)
      {
        operator delete(v28[0]);
        if (!v16)
          goto LABEL_31;
      }
      else if (!v16)
      {
LABEL_31:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      std::mutex::lock((std::mutex *)v7);
      v19 = *(std::__shared_weak_count **)(v7 + 72);
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      std::mutex::unlock((std::mutex *)v7);
      goto LABEL_31;
    }
  }
}

void sub_18CC9E370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;

  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore28MetricsEventModifierProvider4makeENS_10BagServiceEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore28MetricsEventModifierProvider4makeENS_10BagServiceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore28MetricsEventModifierProvider4makeENS_10BagServiceEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore28MetricsEventModifierProvider4makeENS_10BagServiceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::target_type()
{
}

void std::__shared_ptr_pointer<AMSCore::MetricsEventModifierProvider *,std::shared_ptr<AMSCore::MetricsEventModifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsEventModifierProvider,AMSCore::MetricsEventModifierProvider>,std::allocator<AMSCore::MetricsEventModifierProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

std::mutex *std::__shared_ptr_pointer<AMSCore::MetricsEventModifierProvider *,std::shared_ptr<AMSCore::MetricsEventModifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsEventModifierProvider,AMSCore::MetricsEventModifierProvider>,std::allocator<AMSCore::MetricsEventModifierProvider>>::__on_zero_shared(uint64_t a1)
{
  std::mutex *result;

  result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    AMSCore::MetricsEventModifierProvider::~MetricsEventModifierProvider(result);
    JUMPOUT(0x18D789BDCLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::MetricsEventModifierProvider *,std::shared_ptr<AMSCore::MetricsEventModifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsEventModifierProvider,AMSCore::MetricsEventModifierProvider>,std::allocator<AMSCore::MetricsEventModifierProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN7AMSCore28MetricsEventModifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN7AMSCore28MetricsEventModifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN7AMSCore28MetricsEventModifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN7AMSCore28MetricsEventModifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::MetricsEventModifierProvider::Config::reloadModifier(_OWORD *a1, uint64_t a2, uint64_t *a3)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  std::runtime_error *v29;
  char *v30;
  char *v31;
  unsigned int v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  unsigned int v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unsigned int v48;
  _QWORD *v49;
  __int128 v50;
  char *v51;
  unint64_t v52;
  std::runtime_error *v53;
  unsigned int v54;
  void (***v55)(uint64_t);
  BOOL v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::runtime_error *v61;
  unsigned __int8 *v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_mutex_base *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 v71;
  _QWORD *v72;
  std::mutex *v73;
  uint64_t v74;
  __int128 v75;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __int128 v98;
  unint64_t v99;
  uint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_mutex_base *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  std::runtime_error *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 v130;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  const std::runtime_error *v135;
  char v136;
  const char **v137;
  std::__libcpp_refstring *p_imp;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  const std::runtime_error *v143;
  std::runtime_error_vtbl *v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  uint64_t *v152;
  void **v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  char *v156;
  std::runtime_error *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  std::runtime_error *v167;
  char v168;
  std::runtime_error_vtbl *v169;
  uint64_t v170;
  std::runtime_error_vtbl *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  __int128 v190;
  unint64_t v191;
  uint64_t v192;
  __int128 v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  char **v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  std::runtime_error_vtbl *v213;
  const char *imp;
  std::runtime_error_vtbl *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unsigned int *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  __int128 v231;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  const std::runtime_error *v236;
  char v237;
  std::runtime_error v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  __int128 v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  char *v273;
  char *v274;
  _QWORD *v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  _QWORD *v282;
  AMSCore::MetricsEventModifier::MetricsConfig *v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::mutex *v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  _QWORD *v322;
  std::runtime_error *v323;
  char *v324;
  char *v325;
  std::runtime_error *v326;
  void **v327;
  void **v328;
  std::runtime_error *v329;
  std::runtime_error *v330;
  std::runtime_error *v331;
  std::runtime_error *v332;
  std::runtime_error *v333;
  char *v334;
  char *v335;
  char *v336;
  _OWORD *v337;
  _BYTE *v338;
  char *v339;
  _QWORD *v340;
  char *v341;
  char *v342;
  _BYTE v343[32];
  __int128 v344;
  uint64_t v345;
  __int128 v346;
  uint64_t v347;
  char **v348;
  char *v349;
  uint64_t v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  char v354;
  __int128 v355;
  uint64_t v356;
  char v357;
  __int128 v358;
  uint64_t v359;
  char v360;
  int v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  char v367;
  __int128 v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  std::runtime_error v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  __int128 v378;
  void *__p[2];
  __int128 v380;
  __int128 v381;
  uint64_t v382;
  __int128 v383;
  char *v384;
  _BYTE v385[160];
  char v386;
  std::runtime_error v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  __int128 v391;
  uint64_t v392;

  v392 = *MEMORY[0x1E0C80C00];
  v6 = (char *)operator new(0x220uLL);
  v7 = (unint64_t)v6;
  *(_QWORD *)v6 = AMSCore::MetricsEventModifierProvider::Config::reloadModifier;
  *((_QWORD *)v6 + 1) = AMSCore::MetricsEventModifierProvider::Config::reloadModifier;
  v8 = (uint64_t)(v6 + 88);
  v338 = v6 + 520;
  v339 = v6 + 432;
  v340 = v6 + 464;
  v341 = v6 + 480;
  v342 = v6 + 16;
  v10 = *a3;
  v9 = a3[1];
  *((_QWORD *)v6 + 62) = a2;
  *((_QWORD *)v6 + 63) = v9;
  *a3 = 0;
  a3[1] = 0;
  v12 = a3[2];
  v11 = a3[3];
  a3[2] = 0;
  a3[3] = 0;
  *((_QWORD *)v6 + 64) = v11;
  do
    v13 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v13 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v6 + 6) = 0;
  v6[24] = 0;
  v6[40] = 0;
  *((_QWORD *)v6 + 10) = 0;
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E2523810;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v342;
  *(_QWORD *)&v15 = v342;
  *((_QWORD *)&v15 + 1) = v14;
  *a1 = v15;
  std::mutex::lock((std::mutex *)a2);
  v16 = *(_QWORD *)(a2 + 64);
  if (v16)
  {
    if (*(_BYTE *)(v7 + 40))
    {
      v17 = *(std::__shared_weak_count **)(v7 + 32);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *(_BYTE *)(v7 + 40) = 0;
      v16 = *(_QWORD *)(a2 + 64);
    }
    v20 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(v7 + 24) = v16;
    *(_QWORD *)(v7 + 32) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_BYTE *)(v7 + 40) = 1;
    std::mutex::unlock((std::mutex *)a2);
LABEL_15:
    *(_QWORD *)(v7 + 88) = v342;
    *(_QWORD *)v7 = 0;
    AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::Awaiter::await_suspend((_BYTE *)v8);
    return;
  }
  std::mutex::unlock((std::mutex *)a2);
  *v340 = 0;
  v340[1] = 0;
  *(_QWORD *)(v7 + 432) = v10;
  *(_QWORD *)(v7 + 440) = v9;
  if (v9)
  {
    v23 = (unint64_t *)(v9 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)(v7 + 448) = v12;
  *(_QWORD *)(v7 + 456) = v11;
  if (v11)
  {
    v25 = (unint64_t *)(v11 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (char *)operator new(0x278uLL);
  v28 = (unint64_t)v27;
  *(_QWORD *)v27 = AMSCore::MetricsEventModifier::MetricsConfig::build;
  *((_QWORD *)v27 + 1) = AMSCore::MetricsEventModifier::MetricsConfig::build;
  v29 = (std::runtime_error *)(v27 + 416);
  v30 = v27 + 496;
  *(_OWORD *)(v27 + 536) = *(_OWORD *)v339;
  v31 = v27 + 568;
  v334 = v27 + 16;
  *(_QWORD *)v339 = 0;
  *((_QWORD *)v339 + 1) = 0;
  v336 = v27 + 472;
  *(_OWORD *)(v27 + 552) = *(_OWORD *)(v7 + 448);
  *(_QWORD *)(v7 + 448) = 0;
  *(_QWORD *)(v7 + 456) = 0;
  do
    v32 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v32 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v27[24] = 0;
  v27[368] = 0;
  *((_QWORD *)v27 + 47) = 0;
  v331 = (std::runtime_error *)(v27 + 24);
  *((_QWORD *)v27 + 51) = 0;
  v33 = (_QWORD *)operator new();
  v332 = (std::runtime_error *)v8;
  *v33 = &off_1E2523570;
  v33[1] = 0;
  v33[2] = 0;
  v33[3] = v334;
  *(_QWORD *)&v34 = v334;
  *((_QWORD *)&v34 + 1) = v33;
  *(_OWORD *)v341 = v34;
  *(_BYTE *)(v28 + 591) = 7;
  *(_DWORD *)v31 = 1920230765;
  *(_DWORD *)(v31 + 3) = 1935894898;
  *(_BYTE *)(v28 + 575) = 0;
  *(_OWORD *)v343 = *(_OWORD *)v31;
  *(_QWORD *)&v343[16] = *((_QWORD *)v31 + 2);
  v35 = *(_QWORD *)(v28 + 536);
  v36 = *(_QWORD *)(v28 + 544);
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_OWORD *)v30 = *(_OWORD *)v343;
  *((_QWORD *)v30 + 2) = *(_QWORD *)&v343[16];
  *(_QWORD *)(v28 + 520) = v35;
  *(_QWORD *)(v28 + 528) = v36;
  v39 = (char *)operator new(0x118uLL);
  v40 = (unint64_t)v39;
  *(_QWORD *)v39 = AMSCore::BagValue::getValueWithWrappedError<std::map<std::string,AMSCore::Any>,AMSCore::BagValue::getMapValue(void)::$_0>;
  *((_QWORD *)v39 + 1) = AMSCore::BagValue::getValueWithWrappedError<std::map<std::string,AMSCore::Any>,AMSCore::BagValue::getMapValue(void)::$_0>;
  v329 = (std::runtime_error *)(v39 + 152);
  v41 = v39 + 16;
  *((_QWORD *)v39 + 31) = v30;
  do
    v42 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v42 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v327 = (void **)v31;
  *((_QWORD *)v39 + 14) = 0;
  v39[24] = 0;
  v326 = (std::runtime_error *)(v39 + 24);
  v39[104] = 0;
  *((_QWORD *)v39 + 18) = 0;
  v43 = (_QWORD *)operator new();
  *v43 = &off_1E25237A0;
  v43[1] = 0;
  v43[2] = 0;
  v43[3] = v41;
  v325 = v41;
  *(_QWORD *)&v44 = v41;
  *((_QWORD *)&v44 + 1) = v43;
  *(_OWORD *)(v28 + 592) = v44;
  v45 = *(_QWORD *)(v28 + 520);
  v46 = (char *)operator new(0x118uLL);
  v47 = (unint64_t)v46;
  v337 = (_OWORD *)(v40 + 232);
  *(_QWORD *)v46 = AMSCore::BagDataSource::getAllValues;
  *((_QWORD *)v46 + 1) = AMSCore::BagDataSource::getAllValues;
  v330 = (std::runtime_error *)(v46 + 152);
  v335 = v46 + 16;
  *((_QWORD *)v46 + 31) = v45;
  do
    v48 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v48 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v328 = (void **)v30;
  v333 = v29;
  *((_QWORD *)v46 + 14) = 0;
  v46[24] = 0;
  v323 = (std::runtime_error *)(v46 + 24);
  v46[104] = 0;
  *((_QWORD *)v46 + 18) = 0;
  v49 = (_QWORD *)operator new();
  *v49 = &off_1E2523848;
  v49[1] = 0;
  v49[2] = 0;
  v49[3] = v335;
  *(_QWORD *)&v50 = v335;
  *((_QWORD *)&v50 + 1) = v49;
  *v337 = v50;
  v51 = (char *)operator new(0x118uLL);
  v52 = (unint64_t)v51;
  *(_QWORD *)v51 = AMSCore::BagDataSource::sync;
  *((_QWORD *)v51 + 1) = AMSCore::BagDataSource::sync;
  v53 = (std::runtime_error *)(v51 + 152);
  v322 = v51 + 232;
  *((_QWORD *)v51 + 31) = v45;
  do
    v54 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v54 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v51[24] = 0;
  v55 = (void (***)(uint64_t))(v51 + 24);
  v51[104] = 0;
  *((_QWORD *)v51 + 14) = 0;
  *((_QWORD *)v51 + 18) = 0;
  v324 = v51 + 16;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v343, (uint64_t)(v51 + 16));
  *(_OWORD *)(v47 + 232) = *(_OWORD *)v343;
  *(_QWORD *)v343 = &off_1E2520798;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v45 + 248));
  if (*(_BYTE *)(v45 + 464))
    v56 = *(_QWORD *)(v45 + 456) <= (*(std::chrono::system_clock::time_point (**)(void))(*(_QWORD *)v343 + 16))().__d_.__rep_;
  else
    v56 = 0;
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v45 + 248));
  if (v56)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v343);
    AMSCore::Logger::log<char [29]>(*(uint64_t *)v343, 2, (uint64_t)"bag", 3, "The cached data has expired.");
    v57 = *(std::__shared_weak_count **)&v343[8];
    if (*(_QWORD *)&v343[8])
    {
      v58 = (unint64_t *)(*(_QWORD *)&v343[8] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  else
  {
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v45 + 248));
    v60 = *(_QWORD *)(*(_QWORD *)(v45 + 416) + 16);
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v45 + 248));
    if (v60)
    {
      if (*(_BYTE *)(v52 + 104) && !*(_BYTE *)(v52 + 96))
        (**v55)(v52 + 24);
      *(_BYTE *)(v52 + 96) = 1;
      *(_BYTE *)(v52 + 104) = 1;
      v61 = v53;
      goto LABEL_98;
    }
  }
  v62 = (unsigned __int8 *)(v45 + 536);
  do
    v63 = __ldaxr(v62);
  while (__stxr(1u, v62));
  if ((v63 & 1) != 0)
  {
    *(_BYTE *)(v52 + 272) = 1;
    std::mutex::lock((std::mutex *)(*(_QWORD *)(v52 + 248) + 472));
    v69 = *(_QWORD *)(v52 + 248);
    if (*(_QWORD *)(v69 + 560))
      goto LABEL_59;
    v70 = (unsigned __int8 *)(v69 + 536);
    do
      v71 = __ldxr(v70);
    while (__stlxr(1u, v70));
    if ((v71 & 1) != 0)
    {
LABEL_59:
      v72 = operator new(0x18uLL);
      v73 = (std::mutex *)(*(_QWORD *)(v52 + 248) + 472);
      v72[1] = v69 + 544;
      v72[2] = v52;
      v74 = *(_QWORD *)(v69 + 544);
      *v72 = v74;
      *(_QWORD *)(v74 + 8) = v72;
      *(_QWORD *)(v69 + 544) = v72;
      ++*(_QWORD *)(v69 + 560);
      std::mutex::unlock(v73);
      goto LABEL_99;
    }
    std::mutex::unlock((std::mutex *)(*(_QWORD *)(v52 + 248) + 472));
  }
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(*(_QWORD *)(v52 + 248) + 248));
  v64 = *(_QWORD *)(v52 + 248);
  v65 = *(_QWORD *)(*(_QWORD *)(v64 + 416) + 16);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v64 + 248));
  v61 = v53;
  if (v65)
  {
    v66 = (std::__shared_mutex_base *)(*(_QWORD *)(v52 + 248) + 248);
    *(_QWORD *)v343 = &off_1E2520798;
    std::__shared_mutex_base::lock_shared(v66);
    v67 = *(_QWORD *)(v52 + 248);
    if (*(_BYTE *)(v67 + 464))
    {
      v68 = *(_QWORD *)(v67 + 456) <= (*(std::chrono::system_clock::time_point (**)(void))(*(_QWORD *)v343 + 16))().__d_.__rep_;
      v67 = *(_QWORD *)(v52 + 248);
    }
    else
    {
      v68 = 0;
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v67 + 248));
    if (!v68)
    {
      if (*(_BYTE *)(v52 + 104) && !*(_BYTE *)(v52 + 96))
        (**v55)(v52 + 24);
      *(_BYTE *)(v52 + 96) = 1;
      *(_BYTE *)(v52 + 104) = 1;
LABEL_97:
      AMSCore::AwaitableMutex::unlock((std::mutex *)(*(_QWORD *)(v52 + 248) + 472));
LABEL_98:
      *(_QWORD *)(v52 + 152) = v324;
      *(_QWORD *)v52 = 0;
      AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v61);
      goto LABEL_99;
    }
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v52 + 248) + 32))(*(_QWORD *)(v52 + 248), 0);
  v75 = *(_OWORD *)(v52 + 232);
  *(_OWORD *)(v52 + 256) = v75;
  *v322 = 0;
  v322[1] = 0;
  if (atomic_load((unint64_t *)(v75 + 96)))
    goto LABEL_66;
  *(_BYTE *)(v52 + 272) = 0;
  v77 = (unint64_t *)(*(_QWORD *)(v52 + 256) + 96);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v52, v77));
  if (v78)
  {
LABEL_66:
    v79 = *(_QWORD *)(v52 + 256);
    if (!*(_BYTE *)(v79 + 88))
      goto LABEL_427;
    v80 = *(unsigned __int8 *)(v79 + 80);
    if (!*(_BYTE *)(v79 + 80))
    {
      std::runtime_error::runtime_error(v53, (const std::runtime_error *)(v79 + 8));
      *(_OWORD *)(v52 + 168) = *(_OWORD *)(v79 + 24);
      v81 = (_QWORD *)(v79 + 48);
      v82 = *(_QWORD *)(v79 + 48);
      *(_QWORD *)(v52 + 192) = v82;
      v83 = v52 + 192;
      *(_QWORD *)(v52 + 152) = off_1E2521330;
      *(_QWORD *)(v52 + 184) = *(_QWORD *)(v79 + 40);
      v84 = *(_QWORD *)(v79 + 56);
      *(_QWORD *)(v52 + 200) = v84;
      if (v84)
      {
        *(_QWORD *)(v82 + 16) = v83;
        *(_QWORD *)(v79 + 40) = v81;
        *v81 = 0;
        *(_QWORD *)(v79 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v52 + 184) = v83;
      }
      v85 = *(_QWORD *)(v52 + 256);
      *(_OWORD *)(v52 + 208) = *(_OWORD *)(v85 + 64);
      *(_QWORD *)(v85 + 64) = 0;
      *(_QWORD *)(v85 + 72) = 0;
    }
    *(_BYTE *)(v52 + 224) = v80;
    if (*(_BYTE *)(v52 + 104))
    {
      if (!*(_BYTE *)(v52 + 96))
      {
        (**(void (***)(uint64_t))(v52 + 24))(v52 + 24);
        v80 = *(unsigned __int8 *)(v52 + 224);
      }
      *(_BYTE *)(v52 + 104) = 0;
    }
    if (v80)
    {
      *(_BYTE *)(v52 + 96) = v80;
      *(_BYTE *)(v52 + 104) = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v52 + 24), v53);
      v86 = (_QWORD *)(v52 + 192);
      v87 = *(_QWORD *)(v52 + 192);
      *(_QWORD *)(v52 + 64) = v87;
      v88 = v52 + 64;
      *(_OWORD *)(v52 + 40) = *(_OWORD *)(v52 + 168);
      *(_QWORD *)(v52 + 24) = off_1E2521330;
      *(_QWORD *)(v52 + 56) = *(_QWORD *)(v52 + 184);
      v89 = *(_QWORD *)(v52 + 200);
      *(_QWORD *)(v52 + 72) = v89;
      if (v89)
      {
        *(_QWORD *)(v87 + 16) = v88;
        *(_QWORD *)(v52 + 184) = v86;
        *v86 = 0;
        *(_QWORD *)(v52 + 200) = 0;
      }
      else
      {
        *(_QWORD *)(v52 + 56) = v88;
      }
      *(_OWORD *)(v52 + 80) = *(_OWORD *)(v52 + 208);
      *(_QWORD *)(v52 + 208) = 0;
      *(_QWORD *)(v52 + 216) = 0;
      v90 = *(unsigned __int8 *)(v52 + 224);
      *(_BYTE *)(v52 + 96) = 0;
      *(_BYTE *)(v52 + 104) = 1;
      if (!v90)
        ((void (*)(std::runtime_error *))v53->~runtime_error)(v53);
    }
    v91 = *(_QWORD *)(v52 + 264);
    if (v91)
    {
      v92 = (unint64_t *)(v91 + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        v94 = *(std::__shared_weak_count **)(v52 + 264);
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v95 = *(std::__shared_weak_count **)(v52 + 240);
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    goto LABEL_97;
  }
LABEL_99:
  v98 = *(_OWORD *)(v47 + 232);
  *(_OWORD *)(v47 + 256) = v98;
  *(_QWORD *)(v47 + 232) = 0;
  *(_QWORD *)(v47 + 240) = 0;
  v99 = atomic_load((unint64_t *)(v98 + 96));
  v100 = (uint64_t *)v333;
  if (!v99)
  {
    *(_BYTE *)(v47 + 272) = 0;
    v101 = (unint64_t *)(*(_QWORD *)(v47 + 256) + 96);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v47, v101));
    if (!v102)
      goto LABEL_143;
  }
  v103 = *(_QWORD *)(v47 + 256);
  if (!*(_BYTE *)(v103 + 88))
    goto LABEL_427;
  v104 = *(_BYTE *)(v103 + 80);
  if (!v104)
  {
    std::runtime_error::runtime_error(v330, (const std::runtime_error *)(v103 + 8));
    *(_OWORD *)(v47 + 168) = *(_OWORD *)(v103 + 24);
    v105 = (_QWORD *)(v103 + 48);
    v106 = *(_QWORD *)(v103 + 48);
    *(_QWORD *)(v47 + 192) = v106;
    v107 = v47 + 192;
    *(_QWORD *)(v47 + 152) = off_1E2521330;
    *(_QWORD *)(v47 + 184) = *(_QWORD *)(v103 + 40);
    v108 = *(_QWORD *)(v103 + 56);
    *(_QWORD *)(v47 + 200) = v108;
    if (v108)
    {
      *(_QWORD *)(v106 + 16) = v107;
      *(_QWORD *)(v103 + 40) = v105;
      *v105 = 0;
      *(_QWORD *)(v103 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v47 + 184) = v107;
    }
    v109 = *(_QWORD *)(v47 + 256);
    *(_OWORD *)(v47 + 208) = *(_OWORD *)(v109 + 64);
    *(_QWORD *)(v109 + 64) = 0;
    *(_QWORD *)(v109 + 72) = 0;
  }
  *(_BYTE *)(v47 + 224) = v104;
  v110 = *(_QWORD *)(v47 + 264);
  if (!v110)
    goto LABEL_113;
  v111 = (unint64_t *)(v110 + 8);
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v112 - 1, v111));
  if (!v112)
  {
    v122 = *(std::__shared_weak_count **)(v47 + 264);
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
    v113 = *(std::__shared_weak_count **)(v47 + 240);
    if (!v113)
      goto LABEL_117;
  }
  else
  {
LABEL_113:
    v113 = *(std::__shared_weak_count **)(v47 + 240);
    if (!v113)
      goto LABEL_117;
  }
  v114 = (unint64_t *)&v113->__shared_owners_;
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
    if (*(_BYTE *)(v47 + 224))
      goto LABEL_118;
LABEL_128:
    LODWORD(__p[0]) = 204;
    v123 = v330;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::BagErrorCode>((uint64_t)v343, v330, (unsigned int *)__p);
    std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v323, (std::runtime_error *)v343);
    *(_QWORD *)v343 = off_1E2521330;
    v124 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
    if (*((_QWORD *)&v346 + 1))
    {
      v125 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v344, *((unsigned int **)&v344 + 1));
    MEMORY[0x18D7898AC](v343);
    goto LABEL_140;
  }
LABEL_117:
  if (!*(_BYTE *)(v47 + 224))
    goto LABEL_128;
LABEL_118:
  v116 = (std::__shared_mutex_base *)(*(_QWORD *)(v47 + 248) + 248);
  std::__shared_mutex_base::lock_shared(v116);
  v117 = *(_QWORD *)(v47 + 248);
  v118 = v117;
  if (*(_BYTE *)(v47 + 104))
  {
    if (*(_BYTE *)(v47 + 96))
    {
      v119 = *(std::__shared_weak_count **)(v47 + 32);
      if (v119)
      {
        v120 = (unint64_t *)&v119->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v323->~runtime_error)(v323);
    }
    *(_BYTE *)(v47 + 104) = 0;
    v118 = *(_QWORD *)(v47 + 248);
  }
  *(_QWORD *)(v47 + 24) = *(_QWORD *)(v117 + 416);
  v127 = *(_QWORD *)(v118 + 424);
  *(_QWORD *)(v47 + 32) = v127;
  if (v127)
  {
    v128 = (unint64_t *)(v127 + 8);
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  *(_BYTE *)(v47 + 96) = 1;
  *(_BYTE *)(v47 + 104) = 1;
  std::__shared_mutex_base::unlock_shared(v116);
  v123 = v330;
LABEL_140:
  if (!*(_BYTE *)(v47 + 224))
    ((void (*)(std::runtime_error *))v123->~runtime_error)(v123);
  *(_QWORD *)(v47 + 152) = v335;
  *(_QWORD *)v47 = 0;
  AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v123);
LABEL_143:
  v130 = *(_OWORD *)(v40 + 232);
  *(_OWORD *)(v40 + 256) = v130;
  *(_QWORD *)v337 = 0;
  *(_QWORD *)(v40 + 240) = 0;
  if (!atomic_load((unint64_t *)(v130 + 96)))
  {
    *(_BYTE *)(v40 + 272) = 0;
    v132 = (unint64_t *)(*(_QWORD *)(v40 + 256) + 96);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v40, v132));
    if (!v133)
      goto LABEL_192;
  }
  v134 = *(_QWORD *)(v40 + 256);
  if (!*(_BYTE *)(v134 + 88))
    goto LABEL_427;
  v135 = (const std::runtime_error *)(v134 + 8);
  v136 = *(_BYTE *)(v134 + 80);
  if (v136)
  {
    *(_QWORD *)(v40 + 152) = *(_QWORD *)(v134 + 8);
    v137 = (const char **)(v40 + 160);
    p_imp = (std::__libcpp_refstring *)(v134 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v329, v135);
    *(_OWORD *)(v40 + 168) = *(_OWORD *)(v134 + 24);
    v139 = (_QWORD *)(v134 + 48);
    v140 = *(_QWORD *)(v134 + 48);
    *(_QWORD *)(v40 + 192) = v140;
    v141 = v40 + 192;
    *(_QWORD *)(v40 + 152) = off_1E2521330;
    *(_QWORD *)(v40 + 184) = *(_QWORD *)(v134 + 40);
    v142 = *(_QWORD *)(v134 + 56);
    *(_QWORD *)(v40 + 200) = v142;
    if (v142)
    {
      *(_QWORD *)(v140 + 16) = v141;
      *(_QWORD *)(v134 + 40) = v139;
      *v139 = 0;
      *(_QWORD *)(v134 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v40 + 184) = v141;
    }
    v143 = *(const std::runtime_error **)(v40 + 256);
    v144 = v143[4].__vftable;
    v135 = v143 + 4;
    *(_QWORD *)(v40 + 208) = v144;
    v137 = (const char **)(v40 + 216);
    p_imp = &v135->__imp_;
  }
  *v137 = p_imp->__imp_;
  v135->__vftable = 0;
  v135->__imp_.__imp_ = 0;
  *(_BYTE *)(v40 + 224) = v136;
  v145 = *(_QWORD *)(v40 + 264);
  if (!v145)
    goto LABEL_158;
  v146 = (unint64_t *)(v145 + 8);
  do
    v147 = __ldaxr(v146);
  while (__stlxr(v147 - 1, v146));
  if (!v147)
  {
    v155 = *(std::__shared_weak_count **)(v40 + 264);
    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
    std::__shared_weak_count::__release_weak(v155);
    v148 = *(std::__shared_weak_count **)(v40 + 240);
    if (!v148)
      goto LABEL_162;
  }
  else
  {
LABEL_158:
    v148 = *(std::__shared_weak_count **)(v40 + 240);
    if (!v148)
      goto LABEL_162;
  }
  v149 = (unint64_t *)&v148->__shared_owners_;
  do
    v150 = __ldaxr(v149);
  while (__stlxr(v150 - 1, v149));
  if (v150)
  {
LABEL_162:
    if (*(_BYTE *)(v40 + 224))
      goto LABEL_163;
LABEL_169:
    v382 = 0;
    v380 = 0u;
    v381 = 0u;
    *(_OWORD *)__p = 0u;
    *(_QWORD *)&v375 = 0;
    v374.__imp_.__imp_ = 0;
    v374.__vftable = (std::runtime_error_vtbl *)&v374.__imp_;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v374, (uint64_t *)&v374.__imp_, (const void **)__p, (__int128 *)__p);
    v156 = *(char **)(v40 + 248);
    v387.__vftable = (std::runtime_error_vtbl *)&off_1E2521FF8;
    v387.__imp_.__imp_ = v156;
    *((_QWORD *)&v388 + 1) = &v387;
    AMSCore::BagDataAccessor::getMapValue((uint64_t)v343, (void **)v156, (uint64_t *)&v374, (uint64_t)&v387);
    v157 = (std::runtime_error *)*((_QWORD *)&v388 + 1);
    if (*((std::runtime_error **)&v388 + 1) == &v387)
    {
      v158 = 4;
      v157 = &v387;
    }
    else
    {
      if (!*((_QWORD *)&v388 + 1))
      {
LABEL_177:
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v374, (unsigned int *)v374.__imp_.__imp_);
        if ((_DWORD)v382 != -1)
          ((void (*)(std::runtime_error *, char *))off_1E253D240[v382])(&v387, (char *)&v380 + 8);
        LODWORD(v382) = -1;
        if (SBYTE7(v380) < 0)
          operator delete(__p[0]);
        if (!(_BYTE)v347)
          (**(void (***)(AMSCore::Error *))v343)((AMSCore::Error *)v343);
        goto LABEL_182;
      }
      v158 = 5;
    }
    (*((void (**)(std::runtime_error *))&v157->~runtime_error + v158))(v157);
    goto LABEL_177;
  }
  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
  std::__shared_weak_count::__release_weak(v148);
  if (!*(_BYTE *)(v40 + 224))
    goto LABEL_169;
LABEL_163:
  v151 = *(void **)(v40 + 248);
  v152 = *(uint64_t **)(v40 + 152);
  __p[0] = &off_1E2521FF8;
  __p[1] = v151;
  *((_QWORD *)&v380 + 1) = __p;
  AMSCore::BagDataAccessor::getMapValue((uint64_t)v343, (void **)v151, v152, (uint64_t)__p);
  v153 = (void **)*((_QWORD *)&v380 + 1);
  if (*((void ***)&v380 + 1) == __p)
  {
    v154 = 4;
    v153 = __p;
    goto LABEL_173;
  }
  if (*((_QWORD *)&v380 + 1))
  {
    v154 = 5;
LABEL_173:
    (*((void (**)(void **))*v153 + v154))(v153);
  }
LABEL_182:
  std::optional<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>,void>(v326, (std::runtime_error *)v343);
  if (!(_BYTE)v347)
    (**(void (***)(AMSCore::Error *))v343)((AMSCore::Error *)v343);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v343, *(unsigned int **)&v343[8]);
  if (*(_BYTE *)(v40 + 224))
  {
    v159 = *(std::__shared_weak_count **)(v40 + 160);
    if (v159)
    {
      v160 = (unint64_t *)&v159->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v329->~runtime_error)(v329);
  }
  *(_QWORD *)(v40 + 152) = v325;
  *(_QWORD *)v40 = 0;
  AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v329);
LABEL_192:
  v162 = *(_OWORD *)(v28 + 592);
  *(_OWORD *)(v28 + 608) = v162;
  *(_QWORD *)(v28 + 592) = 0;
  *(_QWORD *)(v28 + 600) = 0;
  v163 = atomic_load((unint64_t *)(v162 + 96));
  v8 = (uint64_t)v332;
  if (v163)
    goto LABEL_196;
  v336[152] = 0;
  v164 = (unint64_t *)(*(_QWORD *)(v28 + 608) + 96);
  do
    v165 = __ldaxr(v164);
  while (__stlxr(v28, v164));
  if (v165)
  {
LABEL_196:
    v166 = *(_QWORD *)(v28 + 608);
    if (!*(_BYTE *)(v166 + 88))
      goto LABEL_427;
    v167 = (std::runtime_error *)(v166 + 8);
    v168 = *(_BYTE *)(v166 + 80);
    if (v168)
    {
      v169 = (std::runtime_error_vtbl *)(v166 + 16);
      v170 = *(_QWORD *)(v166 + 16);
      v171 = (std::runtime_error_vtbl *)(v28 + 424);
      *(_QWORD *)(v28 + 416) = *(_QWORD *)(v166 + 8);
      *(_QWORD *)(v28 + 424) = v170;
      v172 = *(_QWORD *)(v166 + 24);
      *(_QWORD *)(v28 + 432) = v172;
      if (v172)
      {
        *(_QWORD *)(v170 + 16) = v171;
        v167->__vftable = v169;
        v169->~runtime_error = 0;
        *(_QWORD *)(v166 + 24) = 0;
        v166 = *(_QWORD *)(v28 + 608);
      }
      else
      {
        v333->__vftable = v171;
      }
      *(_BYTE *)(v28 + 440) = *(_BYTE *)(v166 + 32);
    }
    else
    {
      std::runtime_error::runtime_error(v333, v167);
      *(_OWORD *)(v28 + 432) = *(_OWORD *)(v166 + 24);
      *(_QWORD *)(v28 + 416) = off_1E2521330;
      v173 = (_QWORD *)(v166 + 48);
      v174 = *(_QWORD *)(v166 + 48);
      v175 = v28 + 456;
      *(_QWORD *)(v28 + 448) = *(_QWORD *)(v166 + 40);
      *(_QWORD *)(v28 + 456) = v174;
      v176 = *(_QWORD *)(v166 + 56);
      *(_QWORD *)(v28 + 464) = v176;
      if (v176)
      {
        *(_QWORD *)(v174 + 16) = v175;
        *(_QWORD *)(v166 + 40) = v173;
        *v173 = 0;
        *(_QWORD *)(v166 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v28 + 448) = v175;
      }
      v177 = *(_QWORD *)(v28 + 608);
      *(_OWORD *)v336 = *(_OWORD *)(v177 + 64);
      *(_QWORD *)(v177 + 64) = 0;
      *(_QWORD *)(v177 + 72) = 0;
    }
    *(_BYTE *)(v28 + 488) = v168;
    v178 = *(_QWORD *)(v28 + 616);
    if (v178)
    {
      v179 = (unint64_t *)(v178 + 8);
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        v181 = *(std::__shared_weak_count **)(v28 + 616);
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    v182 = *(std::__shared_weak_count **)(v28 + 600);
    if (!v182)
      goto LABEL_216;
    v183 = (unint64_t *)&v182->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
      v185 = *(std::__shared_weak_count **)(v28 + 528);
      if (!v185)
        goto LABEL_220;
    }
    else
    {
LABEL_216:
      v185 = *(std::__shared_weak_count **)(v28 + 528);
      if (!v185)
        goto LABEL_220;
    }
    v186 = (unint64_t *)&v185->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
      if ((*(char *)(v28 + 519) & 0x80000000) == 0)
      {
LABEL_221:
        if ((*(char *)(v28 + 591) & 0x80000000) == 0)
          goto LABEL_222;
        goto LABEL_234;
      }
LABEL_233:
      operator delete(*v328);
      if ((*(char *)(v28 + 591) & 0x80000000) == 0)
      {
LABEL_222:
        if (*(_BYTE *)(v28 + 488))
        {
LABEL_223:
          if (v386)
          {
            if (!*(_BYTE *)(v28 + 488))
              goto LABEL_427;
            AMSCore::MetricsEventModifier::MetricsConfig::buildFieldFilters((void **)&v387.__vftable, (uint64_t *)v333);
            if (!*(_BYTE *)(v28 + 488))
              goto LABEL_427;
            AMSCore::MetricsEventModifier::MetricsConfig::buildTopicOverrides((uint64_t **)&v374, v333);
            if (!v386)
              goto LABEL_427;
            AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig((uint64_t)v343, (__int128 *)__p, (uint64_t)&v387, &v374);
            if (*(_BYTE *)(v28 + 368))
            {
              if (*(_BYTE *)(v28 + 360))
                std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v331);
              else
                ((void (*)(std::runtime_error *))v331->~runtime_error)(v331);
              *(_BYTE *)(v28 + 368) = 0;
            }
            *v331 = *(std::runtime_error *)v343;
            *(std::runtime_error *)((char *)&v331->__imp_.__imp_ + 4) = *(std::runtime_error *)&v343[12];
            v190 = v344;
            *(_QWORD *)(v28 + 64) = *((_QWORD *)&v344 + 1);
            v191 = v28 + 64;
            *(_QWORD *)(v28 + 56) = v190;
            v192 = v345;
            *(_QWORD *)(v28 + 72) = v345;
            if (v192)
            {
              *(_QWORD *)(*((_QWORD *)&v190 + 1) + 16) = v191;
              *(_QWORD *)&v344 = (char *)&v344 + 8;
              *((_QWORD *)&v344 + 1) = 0;
              v345 = 0;
            }
            else
            {
              *(_QWORD *)(v28 + 56) = v191;
            }
            v193 = v346;
            *(_QWORD *)(v28 + 88) = *((_QWORD *)&v346 + 1);
            v194 = v28 + 88;
            *(_QWORD *)(v28 + 80) = v193;
            v195 = v347;
            *(_QWORD *)(v28 + 96) = v347;
            if (v195)
            {
              *(_QWORD *)(*((_QWORD *)&v193 + 1) + 16) = v194;
              *(_QWORD *)&v346 = (char *)&v346 + 8;
              *((_QWORD *)&v346 + 1) = 0;
              v347 = 0;
            }
            else
            {
              *(_QWORD *)(v28 + 80) = v194;
            }
            v197 = v348;
            v196 = v349;
            *(_QWORD *)(v28 + 112) = v349;
            v198 = v28 + 112;
            *(_QWORD *)(v28 + 104) = v197;
            v199 = v350;
            *(_QWORD *)(v28 + 120) = v350;
            if (v199)
            {
              *((_QWORD *)v196 + 2) = v198;
              v348 = &v349;
              v349 = 0;
              v350 = 0;
            }
            else
            {
              *(_QWORD *)(v28 + 104) = v198;
            }
            *(_BYTE *)(v28 + 144) = 0;
            *(_OWORD *)(v28 + 128) = v351;
            *(_BYTE *)(v28 + 296) = 0;
            if (v367)
            {
              *(_BYTE *)(v28 + 168) = 0;
              if (v354)
              {
                *(_OWORD *)(v28 + 144) = v352;
                *(_QWORD *)(v28 + 160) = v353;
                v353 = 0;
                v352 = 0uLL;
                *(_BYTE *)(v28 + 168) = 1;
              }
              *(_BYTE *)(v28 + 176) = 0;
              *(_BYTE *)(v28 + 200) = 0;
              if (v357)
              {
                *(_OWORD *)(v28 + 176) = v355;
                *(_QWORD *)(v28 + 192) = v356;
                v356 = 0;
                v355 = 0uLL;
                *(_BYTE *)(v28 + 200) = 1;
              }
              *(_BYTE *)(v28 + 208) = 0;
              *(_BYTE *)(v28 + 232) = 0;
              if (v360)
              {
                *(_OWORD *)(v28 + 208) = v358;
                *(_QWORD *)(v28 + 224) = v359;
                v359 = 0;
                v358 = 0uLL;
                *(_BYTE *)(v28 + 232) = 1;
              }
              *(_DWORD *)(v28 + 240) = v361;
              *(_QWORD *)(v28 + 248) = v28 + 248;
              *(_QWORD *)(v28 + 256) = v28 + 248;
              *(_QWORD *)(v28 + 264) = 0;
              v200 = v364;
              if (v364)
              {
                v202 = v362;
                v201 = v363;
                v203 = *v363;
                *(_QWORD *)(v203 + 8) = *(_QWORD *)(v362 + 8);
                **(_QWORD **)(v202 + 8) = v203;
                v204 = *(_QWORD *)(v28 + 248);
                *(_QWORD *)(v204 + 8) = v201;
                *v201 = v204;
                *(_QWORD *)(v28 + 248) = v202;
                *(_QWORD *)(v202 + 8) = v28 + 248;
                *(_QWORD *)(v28 + 264) = v200;
                v364 = 0;
              }
              *(_OWORD *)(v28 + 272) = v365;
              *(_QWORD *)(v28 + 288) = v366;
              v366 = 0;
              v365 = 0uLL;
              *(_BYTE *)(v28 + 296) = 1;
            }
            *(_OWORD *)(v28 + 304) = v368;
            v205 = v369;
            v206 = v370;
            v369 = 0;
            v368 = 0uLL;
            *(_QWORD *)(v28 + 320) = v205;
            *(_QWORD *)(v28 + 328) = v206;
            v207 = v28 + 336;
            v208 = v371;
            v209 = v372;
            *(_QWORD *)(v28 + 336) = v371;
            *(_QWORD *)(v28 + 344) = v209;
            if (v209)
            {
              *(_QWORD *)(v208 + 16) = v207;
              v370 = &v371;
              v371 = 0;
              v372 = 0;
              v208 = 0;
            }
            else
            {
              *(_QWORD *)(v28 + 328) = v207;
            }
            *(_QWORD *)(v28 + 352) = v373;
            *(_BYTE *)(v28 + 360) = 1;
            *(_BYTE *)(v28 + 368) = 1;
            std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy((char *)v208);
            v210 = v368;
            if ((_QWORD)v368)
            {
              v211 = *((_QWORD *)&v368 + 1);
              v212 = (void *)v368;
              if (*((_QWORD *)&v368 + 1) != (_QWORD)v368)
              {
                do
                {
                  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v211 - 16));
                  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v211 - 40));
                  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v211 - 64));
                  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(char **)(v211 - 120));
                  v211 -= 128;
                }
                while (v211 != v210);
                v212 = (void *)v368;
              }
              *((_QWORD *)&v368 + 1) = v210;
              operator delete(v212);
            }
            if (v367)
              AMSCore::URL::~URL((AMSCore::URL *)&v352);
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v349);
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v346 + 1));
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v344 + 1));
            std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy((char *)v374.__imp_.__imp_);
            v213 = v387.__vftable;
            if (v387.__vftable)
            {
              imp = v387.__imp_.__imp_;
              v215 = v387.__vftable;
              if (v387.__imp_.__imp_ != (const char *)v387.__vftable)
              {
                do
                {
                  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)imp - 2));
                  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)imp - 5));
                  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)imp - 8));
                  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*((char **)imp - 15));
                  imp -= 128;
                }
                while (imp != (const char *)v213);
                v215 = v387.__vftable;
              }
              v387.__imp_.__imp_ = (const char *)v213;
              operator delete(v215);
            }
          }
          else
          {
            std::runtime_error::runtime_error((std::runtime_error *)v343, (const std::runtime_error *)__p);
            *(_OWORD *)&v343[16] = v380;
            *(_QWORD *)v343 = off_1E2521330;
            v344 = v381;
            v345 = v382;
            if (v382)
            {
              *(_QWORD *)(*((_QWORD *)&v381 + 1) + 16) = (char *)&v344 + 8;
              *(_QWORD *)&v381 = (char *)&v381 + 8;
              *((_QWORD *)&v381 + 1) = 0;
              v382 = 0;
            }
            else
            {
              *(_QWORD *)&v344 = (char *)&v344 + 8;
            }
            v346 = v383;
            v383 = 0uLL;
            LOBYTE(v347) = 1;
            std::runtime_error::runtime_error(&v387, (const std::runtime_error *)v343);
            v388 = *(_OWORD *)&v343[16];
            v387.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v389 = v344;
            v390 = v345;
            if (v345)
            {
              *(_QWORD *)(*((_QWORD *)&v344 + 1) + 16) = (char *)&v389 + 8;
              *(_QWORD *)&v344 = (char *)&v344 + 8;
              *((_QWORD *)&v344 + 1) = 0;
              v345 = 0;
            }
            else
            {
              *(_QWORD *)&v389 = (char *)&v389 + 8;
            }
            v391 = v346;
            v346 = 0uLL;
            std::runtime_error::runtime_error(&v374, &v387);
            v375 = v388;
            v223 = (unsigned int *)*((_QWORD *)&v389 + 1);
            v374.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v376 = v389;
            v377 = v390;
            if (v390)
            {
              *(_QWORD *)(*((_QWORD *)&v389 + 1) + 16) = (char *)&v376 + 8;
              v223 = 0;
              *(_QWORD *)&v389 = (char *)&v389 + 8;
              *((_QWORD *)&v389 + 1) = 0;
              v390 = 0;
            }
            else
            {
              *(_QWORD *)&v376 = (char *)&v376 + 8;
            }
            v378 = v391;
            v391 = 0uLL;
            v387.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v389, v223);
            MEMORY[0x18D7898AC](&v387);
            if (*(_BYTE *)(v28 + 368))
            {
              if (*(_BYTE *)(v28 + 360))
                std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v331);
              else
                ((void (*)(std::runtime_error *))v331->~runtime_error)(v331);
              *(_BYTE *)(v28 + 368) = 0;
            }
            std::runtime_error::runtime_error(v331, &v374);
            v224 = *((_QWORD *)&v376 + 1);
            v225 = v376;
            *(_QWORD *)(v28 + 64) = *((_QWORD *)&v376 + 1);
            v226 = v28 + 64;
            *(_OWORD *)(v28 + 40) = v375;
            *(_QWORD *)(v28 + 24) = off_1E2521330;
            *(_QWORD *)(v28 + 56) = v225;
            v227 = v377;
            *(_QWORD *)(v28 + 72) = v377;
            if (v227)
            {
              *(_QWORD *)(v224 + 16) = v226;
              v224 = 0;
              *(_QWORD *)&v376 = (char *)&v376 + 8;
              *((_QWORD *)&v376 + 1) = 0;
              v377 = 0;
            }
            else
            {
              *(_QWORD *)(v28 + 56) = v226;
            }
            v8 = (uint64_t)v332;
            v100 = (uint64_t *)v333;
            *(_OWORD *)(v28 + 80) = v378;
            v378 = 0uLL;
            *(_BYTE *)(v28 + 360) = 0;
            *(_BYTE *)(v28 + 368) = 1;
            v374.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v376, (unsigned int *)v224);
            MEMORY[0x18D7898AC](&v374);
            if ((_BYTE)v347)
            {
              *(_QWORD *)v343 = off_1E2521330;
              v228 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
              if (*((_QWORD *)&v346 + 1))
              {
                v229 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
                do
                  v230 = __ldaxr(v229);
                while (__stlxr(v230 - 1, v229));
                if (!v230)
                {
                  ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                  std::__shared_weak_count::__release_weak(v228);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v344, *((unsigned int **)&v344 + 1));
              MEMORY[0x18D7898AC](v343);
            }
          }
          if (!v386)
          {
            (*(void (**)(void **))__p[0])(__p);
            if (*(_BYTE *)(v28 + 488))
              goto LABEL_325;
            goto LABEL_297;
          }
          if (v385[152])
            AMSCore::URL::~URL((AMSCore::URL *)v385);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v384);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v383 + 1));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v381 + 1));
LABEL_324:
          if (*(_BYTE *)(v28 + 488))
          {
LABEL_325:
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v100, *(unsigned int **)(v28 + 424));
            goto LABEL_326;
          }
LABEL_297:
          (*(void (**)(uint64_t *))*v100)(v100);
LABEL_326:
          *(_QWORD *)(v28 + 416) = v334;
          *(_QWORD *)v28 = 0;
          v336[152] = 1;
          AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::Awaiter::await_suspend(v100);
          goto LABEL_327;
        }
LABEL_235:
        std::runtime_error::runtime_error((std::runtime_error *)v343, v333);
        *(_OWORD *)&v343[16] = *(_OWORD *)(v28 + 432);
        *(_QWORD *)v343 = off_1E2521330;
        v188 = *(_QWORD *)(v28 + 456);
        *(_QWORD *)&v344 = *(_QWORD *)(v28 + 448);
        *((_QWORD *)&v344 + 1) = v188;
        v345 = *(_QWORD *)(v28 + 464);
        if (v345)
        {
          *(_QWORD *)(v188 + 16) = (char *)&v344 + 8;
          *(_QWORD *)(v28 + 448) = v28 + 456;
          *(_QWORD *)(v28 + 456) = 0;
          *(_QWORD *)(v28 + 464) = 0;
        }
        else
        {
          *(_QWORD *)&v344 = (char *)&v344 + 8;
        }
        v346 = *(_OWORD *)v336;
        *(_QWORD *)v336 = 0;
        *((_QWORD *)v336 + 1) = 0;
        LOBYTE(v347) = 1;
        std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)v343);
        v380 = *(_OWORD *)&v343[16];
        __p[0] = off_1E2521330;
        v381 = v344;
        v382 = v345;
        if (v345)
        {
          *(_QWORD *)(*((_QWORD *)&v344 + 1) + 16) = (char *)&v381 + 8;
          *(_QWORD *)&v344 = (char *)&v344 + 8;
          *((_QWORD *)&v344 + 1) = 0;
          v345 = 0;
        }
        else
        {
          *(_QWORD *)&v381 = (char *)&v381 + 8;
        }
        v383 = v346;
        v346 = 0uLL;
        std::runtime_error::runtime_error(&v387, (const std::runtime_error *)__p);
        v388 = v380;
        v387.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v189 = (unsigned int *)*((_QWORD *)&v381 + 1);
        v389 = v381;
        v390 = v382;
        if (v382)
        {
          *(_QWORD *)(*((_QWORD *)&v381 + 1) + 16) = (char *)&v389 + 8;
          v189 = 0;
          *(_QWORD *)&v381 = (char *)&v381 + 8;
          *((_QWORD *)&v381 + 1) = 0;
          v382 = 0;
        }
        else
        {
          *(_QWORD *)&v389 = (char *)&v389 + 8;
        }
        v391 = v383;
        v383 = 0uLL;
        __p[0] = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v381, v189);
        MEMORY[0x18D7898AC](__p);
        if (*(_BYTE *)(v28 + 368))
        {
          if (*(_BYTE *)(v28 + 360))
            std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v331);
          else
            ((void (*)(std::runtime_error *))v331->~runtime_error)(v331);
          *(_BYTE *)(v28 + 368) = 0;
        }
        std::runtime_error::runtime_error(v331, &v387);
        v216 = *((_QWORD *)&v389 + 1);
        v217 = v389;
        *(_QWORD *)(v28 + 64) = *((_QWORD *)&v389 + 1);
        v218 = v28 + 64;
        *(_OWORD *)(v28 + 40) = v388;
        *(_QWORD *)(v28 + 24) = off_1E2521330;
        *(_QWORD *)(v28 + 56) = v217;
        v219 = v390;
        *(_QWORD *)(v28 + 72) = v390;
        if (v219)
        {
          *(_QWORD *)(v216 + 16) = v218;
          v216 = 0;
          *(_QWORD *)&v389 = (char *)&v389 + 8;
          *((_QWORD *)&v389 + 1) = 0;
          v390 = 0;
        }
        else
        {
          *(_QWORD *)(v28 + 56) = v218;
        }
        v8 = (uint64_t)v332;
        v100 = (uint64_t *)v333;
        *(_OWORD *)(v28 + 80) = v391;
        v391 = 0uLL;
        *(_BYTE *)(v28 + 360) = 0;
        *(_BYTE *)(v28 + 368) = 1;
        v387.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v389, (unsigned int *)v216);
        MEMORY[0x18D7898AC](&v387);
        if ((_BYTE)v347)
        {
          *(_QWORD *)v343 = off_1E2521330;
          v220 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
          if (*((_QWORD *)&v346 + 1))
          {
            v221 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
              std::__shared_weak_count::__release_weak(v220);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v344, *((unsigned int **)&v344 + 1));
          MEMORY[0x18D7898AC](v343);
          if (*(_BYTE *)(v28 + 488))
            goto LABEL_325;
          goto LABEL_297;
        }
        goto LABEL_324;
      }
LABEL_234:
      operator delete(*v327);
      if (*(_BYTE *)(v28 + 488))
        goto LABEL_223;
      goto LABEL_235;
    }
LABEL_220:
    if ((*(char *)(v28 + 519) & 0x80000000) == 0)
      goto LABEL_221;
    goto LABEL_233;
  }
LABEL_327:
  v231 = *(_OWORD *)(v7 + 480);
  *(_OWORD *)v338 = v231;
  *(_QWORD *)v341 = 0;
  *((_QWORD *)v341 + 1) = 0;
  if (atomic_load((unint64_t *)(v231 + 360)))
    goto LABEL_331;
  v338[16] = 0;
  v233 = (unint64_t *)(*(_QWORD *)(v7 + 520) + 360);
  do
    v234 = __ldaxr(v233);
  while (__stlxr(v7, v233));
  if (v234)
  {
LABEL_331:
    v235 = *(_QWORD *)v338;
    if (*(_BYTE *)(*(_QWORD *)v338 + 352))
    {
      v236 = (const std::runtime_error *)(v235 + 8);
      v237 = *(_BYTE *)(v235 + 344);
      if (v237)
      {
        v238 = *v236;
        *(_OWORD *)(v8 + 12) = *(_OWORD *)(v235 + 20);
        *(std::runtime_error *)v8 = v238;
        *(_QWORD *)(v7 + 120) = *(_QWORD *)(v235 + 40);
        v239 = (_QWORD *)(v235 + 48);
        v240 = *(_QWORD *)(v235 + 48);
        *(_QWORD *)(v7 + 128) = v240;
        v241 = v7 + 128;
        v242 = *(_QWORD *)(v235 + 56);
        *(_QWORD *)(v7 + 136) = v242;
        if (v242)
        {
          *(_QWORD *)(v240 + 16) = v241;
          *(_QWORD *)(v235 + 40) = v239;
          *v239 = 0;
          *(_QWORD *)(v235 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 120) = v241;
        }
        *(_QWORD *)(v7 + 144) = *(_QWORD *)(v235 + 64);
        v247 = (_QWORD *)(v235 + 72);
        v248 = *(_QWORD *)(v235 + 72);
        *(_QWORD *)(v7 + 152) = v248;
        v249 = v7 + 152;
        v250 = *(_QWORD *)(v235 + 80);
        *(_QWORD *)(v7 + 160) = v250;
        if (v250)
        {
          *(_QWORD *)(v248 + 16) = v249;
          *(_QWORD *)(v235 + 64) = v247;
          *v247 = 0;
          *(_QWORD *)(v235 + 80) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 144) = v249;
        }
        *(_QWORD *)(v7 + 168) = *(_QWORD *)(v235 + 88);
        v251 = (_QWORD *)(v235 + 96);
        v252 = *(_QWORD *)(v235 + 96);
        *(_QWORD *)(v7 + 176) = v252;
        v253 = v7 + 176;
        v254 = *(_QWORD *)(v235 + 104);
        *(_QWORD *)(v7 + 184) = v254;
        if (v254)
        {
          *(_QWORD *)(v252 + 16) = v253;
          *(_QWORD *)(v235 + 88) = v251;
          *v251 = 0;
          *(_QWORD *)(v235 + 104) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 168) = v253;
        }
        v255 = *(_OWORD *)(v235 + 112);
        *(_BYTE *)(v7 + 208) = 0;
        *(_OWORD *)(v7 + 192) = v255;
        *(_BYTE *)(v7 + 360) = 0;
        std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(v7 + 208, (__int128 *)(v235 + 128));
        *(_QWORD *)(v7 + 368) = 0;
        *(_QWORD *)(v7 + 376) = 0;
        *(_QWORD *)(v7 + 384) = 0;
        *(_OWORD *)(v7 + 368) = *(_OWORD *)(v235 + 288);
        *(_QWORD *)(v7 + 384) = *(_QWORD *)(v235 + 304);
        *(_QWORD *)(v235 + 288) = 0;
        *(_QWORD *)(v235 + 296) = 0;
        *(_QWORD *)(v235 + 304) = 0;
        *(_QWORD *)(v7 + 392) = *(_QWORD *)(v235 + 312);
        v256 = v7 + 400;
        v257 = *(_QWORD *)(v235 + 320);
        *(_QWORD *)(v7 + 400) = v257;
        v258 = *(_QWORD *)(v235 + 328);
        *(_QWORD *)(v7 + 408) = v258;
        if (v258)
        {
          *(_QWORD *)(v257 + 16) = v256;
          *(_QWORD *)(v235 + 312) = v235 + 320;
          *(_QWORD *)(v235 + 320) = 0;
          *(_QWORD *)(v235 + 328) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 392) = v256;
        }
        *(_QWORD *)(v7 + 416) = *(_QWORD *)(v235 + 336);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)v8, v236);
        *(_OWORD *)(v7 + 104) = *(_OWORD *)(v235 + 24);
        v243 = (_QWORD *)(v235 + 48);
        v244 = *(_QWORD *)(v235 + 48);
        *(_QWORD *)(v7 + 128) = v244;
        v245 = v7 + 128;
        *(_QWORD *)(v7 + 88) = off_1E2521330;
        *(_QWORD *)(v7 + 120) = *(_QWORD *)(v235 + 40);
        v246 = *(_QWORD *)(v235 + 56);
        *(_QWORD *)(v7 + 136) = v246;
        if (v246)
        {
          *(_QWORD *)(v244 + 16) = v245;
          *(_QWORD *)(v235 + 40) = v243;
          *v243 = 0;
          *(_QWORD *)(v235 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 120) = v245;
        }
        v259 = *(_QWORD *)(v7 + 520);
        *(_OWORD *)(v7 + 144) = *(_OWORD *)(v259 + 64);
        *(_QWORD *)(v259 + 64) = 0;
        *(_QWORD *)(v259 + 72) = 0;
      }
      *(_BYTE *)(v7 + 424) = v237;
      v260 = *(_QWORD *)(v7 + 528);
      if (v260)
      {
        v261 = (unint64_t *)(v260 + 8);
        do
          v262 = __ldaxr(v261);
        while (__stlxr(v262 - 1, v261));
        if (!v262)
        {
          v263 = *(std::__shared_weak_count **)(v7 + 528);
          ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
          std::__shared_weak_count::__release_weak(v263);
        }
      }
      v264 = *(std::__shared_weak_count **)(v7 + 488);
      if (v264)
      {
        v265 = (unint64_t *)&v264->__shared_owners_;
        do
          v266 = __ldaxr(v265);
        while (__stlxr(v266 - 1, v265));
        if (!v266)
        {
          ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
          std::__shared_weak_count::__release_weak(v264);
        }
      }
      v267 = *(std::__shared_weak_count **)(v7 + 456);
      if (!v267)
        goto LABEL_366;
      v268 = (unint64_t *)&v267->__shared_owners_;
      do
        v269 = __ldaxr(v268);
      while (__stlxr(v269 - 1, v268));
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
        v270 = *(std::__shared_weak_count **)(v7 + 440);
        if (!v270)
          goto LABEL_370;
      }
      else
      {
LABEL_366:
        v270 = *(std::__shared_weak_count **)(v7 + 440);
        if (!v270)
          goto LABEL_370;
      }
      v271 = (unint64_t *)&v270->__shared_owners_;
      do
        v272 = __ldaxr(v271);
      while (__stlxr(v272 - 1, v271));
      if (!v272)
      {
        ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
        std::__shared_weak_count::__release_weak(v270);
        if (*(_BYTE *)(v7 + 424))
          goto LABEL_371;
        goto LABEL_376;
      }
LABEL_370:
      if (*(_BYTE *)(v7 + 424))
      {
LABEL_371:
        v273 = (char *)operator new(0x168uLL);
        v274 = v273;
        *((_QWORD *)v273 + 1) = 0;
        *((_QWORD *)v273 + 2) = 0;
        *(_QWORD *)v273 = &off_1E2522B28;
        *(_OWORD *)(v273 + 24) = *(_OWORD *)v8;
        *(_OWORD *)(v273 + 36) = *(_OWORD *)(v8 + 12);
        v275 = (_QWORD *)(v7 + 128);
        v276 = *(_QWORD *)(v7 + 128);
        *((_QWORD *)v273 + 7) = *(_QWORD *)(v7 + 120);
        *((_QWORD *)v273 + 8) = v276;
        v277 = v273 + 64;
        v278 = *(_QWORD *)(v7 + 136);
        *((_QWORD *)v273 + 9) = v278;
        if (v278)
        {
          *(_QWORD *)(v276 + 16) = v277;
          *(_QWORD *)(v7 + 120) = v275;
          *v275 = 0;
          *(_QWORD *)(v7 + 136) = 0;
        }
        else
        {
          *((_QWORD *)v273 + 7) = v277;
        }
        v287 = (_QWORD *)(v7 + 152);
        v288 = *(_QWORD *)(v7 + 152);
        v289 = *(_QWORD *)(v7 + 144);
        *((_QWORD *)v273 + 11) = v288;
        v290 = v273 + 88;
        *((_QWORD *)v273 + 10) = v289;
        v291 = *(_QWORD *)(v7 + 160);
        *((_QWORD *)v273 + 12) = v291;
        if (v291)
        {
          *(_QWORD *)(v288 + 16) = v290;
          *(_QWORD *)(v7 + 144) = v287;
          *v287 = 0;
          *(_QWORD *)(v7 + 160) = 0;
        }
        else
        {
          *((_QWORD *)v273 + 10) = v290;
        }
        v292 = (_QWORD *)(v7 + 176);
        v293 = *(_QWORD *)(v7 + 176);
        v294 = *(_QWORD *)(v7 + 168);
        *((_QWORD *)v273 + 14) = v293;
        v295 = v273 + 112;
        *((_QWORD *)v273 + 13) = v294;
        v296 = *(_QWORD *)(v7 + 184);
        *((_QWORD *)v273 + 15) = v296;
        if (v296)
        {
          *(_QWORD *)(v293 + 16) = v295;
          *(_QWORD *)(v7 + 168) = v292;
          *v292 = 0;
          *(_QWORD *)(v7 + 184) = 0;
        }
        else
        {
          *((_QWORD *)v273 + 13) = v295;
        }
        v297 = *(_OWORD *)(v7 + 192);
        v273[144] = 0;
        *((_OWORD *)v273 + 8) = v297;
        v273[296] = 0;
        std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(v273 + 144), (__int128 *)(v7 + 208));
        *((_OWORD *)v274 + 19) = *(_OWORD *)(v7 + 368);
        v298 = *(_QWORD *)(v7 + 384);
        v299 = *(_QWORD *)(v7 + 392);
        *(_QWORD *)(v7 + 376) = 0;
        *(_QWORD *)(v7 + 384) = 0;
        *(_QWORD *)(v7 + 368) = 0;
        *((_QWORD *)v274 + 40) = v298;
        *((_QWORD *)v274 + 41) = v299;
        v300 = v274 + 336;
        v301 = *(_QWORD *)(v7 + 400);
        v302 = *(_QWORD *)(v7 + 408);
        *((_QWORD *)v274 + 42) = v301;
        *((_QWORD *)v274 + 43) = v302;
        if (v302)
        {
          *(_QWORD *)(v301 + 16) = v300;
          *(_QWORD *)(v7 + 392) = v7 + 400;
          *(_QWORD *)(v7 + 400) = 0;
          *(_QWORD *)(v7 + 408) = 0;
        }
        else
        {
          *((_QWORD *)v274 + 41) = v300;
        }
        *((_QWORD *)v274 + 44) = *(_QWORD *)(v7 + 416);
        v284 = *(std::__shared_weak_count **)(v7 + 472);
        *(_QWORD *)(v7 + 464) = v274 + 24;
        *(_QWORD *)(v7 + 472) = v274;
        if (!v284)
          goto LABEL_399;
        v303 = (unint64_t *)&v284->__shared_owners_;
        do
          v286 = __ldaxr(v303);
        while (__stlxr(v286 - 1, v303));
        goto LABEL_398;
      }
LABEL_376:
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v343);
      AMSCore::Logger::log<char [40],AMSCore::Error>(*(uint64_t *)v343, v8);
      v279 = *(std::__shared_weak_count **)&v343[8];
      if (*(_QWORD *)&v343[8])
      {
        v280 = (unint64_t *)(*(_QWORD *)&v343[8] + 8);
        do
          v281 = __ldaxr(v280);
        while (__stlxr(v281 - 1, v280));
        if (!v281)
        {
          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
          std::__shared_weak_count::__release_weak(v279);
        }
      }
      v282 = operator new(0x168uLL);
      v282[1] = 0;
      v282[2] = 0;
      *v282 = &off_1E2522B28;
      v283 = AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig((AMSCore::MetricsEventModifier::MetricsConfig *)(v282 + 3));
      v284 = *(std::__shared_weak_count **)(v7 + 472);
      *(_QWORD *)(v7 + 464) = v283;
      *(_QWORD *)(v7 + 472) = v282;
      if (!v284)
        goto LABEL_399;
      v285 = (unint64_t *)&v284->__shared_owners_;
      do
        v286 = __ldaxr(v285);
      while (__stlxr(v286 - 1, v285));
LABEL_398:
      if (!v286)
      {
        ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
        std::__shared_weak_count::__release_weak(v284);
        if (*(_BYTE *)(v7 + 424))
          goto LABEL_400;
        goto LABEL_402;
      }
LABEL_399:
      if (*(_BYTE *)(v7 + 424))
      {
LABEL_400:
        std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>(v8);
LABEL_403:
        std::mutex::lock(*(std::mutex **)(v7 + 496));
        v305 = *(_QWORD *)(v7 + 464);
        v304 = *(_QWORD *)(v7 + 472);
        if (v304)
        {
          v306 = (unint64_t *)(v304 + 8);
          do
            v307 = __ldxr(v306);
          while (__stxr(v307 + 1, v306));
        }
        v308 = *(_QWORD *)(v7 + 496);
        v309 = *(std::__shared_weak_count **)(v308 + 72);
        *(_QWORD *)(v308 + 64) = v305;
        *(_QWORD *)(v308 + 72) = v304;
        if (v309)
        {
          v310 = (unint64_t *)&v309->__shared_owners_;
          do
            v311 = __ldaxr(v310);
          while (__stlxr(v311 - 1, v310));
          if (!v311)
          {
            ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
            std::__shared_weak_count::__release_weak(v309);
          }
        }
        if (*(_BYTE *)(v7 + 40))
        {
          v312 = *(std::__shared_weak_count **)(v7 + 32);
          if (v312)
          {
            v313 = (unint64_t *)&v312->__shared_owners_;
            do
              v314 = __ldaxr(v313);
            while (__stlxr(v314 - 1, v313));
            if (!v314)
            {
              ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
              std::__shared_weak_count::__release_weak(v312);
            }
          }
          *(_BYTE *)(v7 + 40) = 0;
        }
        v315 = *(std::mutex **)(v7 + 496);
        *(_QWORD *)(v7 + 24) = v315[1].__m_.__sig;
        v316 = *(_QWORD *)(v308 + 72);
        *(_QWORD *)(v7 + 32) = v316;
        if (v316)
        {
          v317 = (unint64_t *)(v316 + 8);
          do
            v318 = __ldxr(v317);
          while (__stxr(v318 + 1, v317));
          v315 = *(std::mutex **)(v7 + 496);
        }
        *(_BYTE *)(v7 + 40) = 1;
        std::mutex::unlock(v315);
        v319 = *(std::__shared_weak_count **)(v7 + 472);
        if (v319)
        {
          v320 = (unint64_t *)&v319->__shared_owners_;
          do
            v321 = __ldaxr(v320);
          while (__stlxr(v321 - 1, v320));
          if (!v321)
          {
            ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
            std::__shared_weak_count::__release_weak(v319);
          }
        }
        goto LABEL_15;
      }
LABEL_402:
      (**(void (***)(uint64_t))v8)(v8);
      goto LABEL_403;
    }
LABEL_427:
    __break(1u);
  }
}

void sub_18CCA0BB0(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18CCA0BD0);
  }
  JUMPOUT(0x18CCA0BC8);
}

void sub_18CCA0BC0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_BYTE *AMSCore::MetricsEventModifierProvider::Config::reloadModifier(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  const std::runtime_error *v4;
  char v5;
  std::runtime_error v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  __int128 v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  AMSCore::MetricsEventModifier::MetricsConfig *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::mutex *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;

  v1 = *((_QWORD *)result + 65);
  if (!*(_BYTE *)(v1 + 352))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = (uint64_t)(result + 88);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 344);
  if (v5)
  {
    v6 = *v4;
    *(_OWORD *)(result + 100) = *(_OWORD *)(v1 + 20);
    *(std::runtime_error *)v3 = v6;
    *((_QWORD *)result + 15) = *(_QWORD *)(v1 + 40);
    v7 = (_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)result + 16) = v8;
    v9 = result + 128;
    v10 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)result + 17) = v10;
    if (v10)
    {
      *(_QWORD *)(v8 + 16) = v9;
      *(_QWORD *)(v1 + 40) = v7;
      *v7 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)result + 15) = v9;
    }
    *((_QWORD *)result + 18) = *(_QWORD *)(v1 + 64);
    v15 = (_QWORD *)(v1 + 72);
    v16 = *(_QWORD *)(v1 + 72);
    *((_QWORD *)result + 19) = v16;
    v17 = result + 152;
    v18 = *(_QWORD *)(v1 + 80);
    *((_QWORD *)result + 20) = v18;
    if (v18)
    {
      *(_QWORD *)(v16 + 16) = v17;
      *(_QWORD *)(v1 + 64) = v15;
      *v15 = 0;
      *(_QWORD *)(v1 + 80) = 0;
    }
    else
    {
      *((_QWORD *)result + 18) = v17;
    }
    *((_QWORD *)result + 21) = *(_QWORD *)(v1 + 88);
    v19 = (_QWORD *)(v1 + 96);
    v20 = *(_QWORD *)(v1 + 96);
    *((_QWORD *)result + 22) = v20;
    v21 = result + 176;
    v22 = *(_QWORD *)(v1 + 104);
    *((_QWORD *)result + 23) = v22;
    if (v22)
    {
      *(_QWORD *)(v20 + 16) = v21;
      *(_QWORD *)(v1 + 88) = v19;
      *v19 = 0;
      *(_QWORD *)(v1 + 104) = 0;
    }
    else
    {
      *((_QWORD *)result + 21) = v21;
    }
    v23 = *(_OWORD *)(v1 + 112);
    result[208] = 0;
    *((_OWORD *)result + 12) = v23;
    result[360] = 0;
    std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(result + 208), (__int128 *)(v1 + 128));
    *((_QWORD *)v2 + 46) = 0;
    *((_QWORD *)v2 + 47) = 0;
    *((_QWORD *)v2 + 48) = 0;
    *((_OWORD *)v2 + 23) = *(_OWORD *)(v1 + 288);
    *((_QWORD *)v2 + 48) = *(_QWORD *)(v1 + 304);
    *(_QWORD *)(v1 + 288) = 0;
    *(_QWORD *)(v1 + 296) = 0;
    *(_QWORD *)(v1 + 304) = 0;
    *((_QWORD *)v2 + 49) = *(_QWORD *)(v1 + 312);
    v24 = v2 + 400;
    v25 = *(_QWORD *)(v1 + 320);
    *((_QWORD *)v2 + 50) = v25;
    v26 = *(_QWORD *)(v1 + 328);
    *((_QWORD *)v2 + 51) = v26;
    if (v26)
    {
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v1 + 312) = v1 + 320;
      *(_QWORD *)(v1 + 320) = 0;
      *(_QWORD *)(v1 + 328) = 0;
    }
    else
    {
      *((_QWORD *)v2 + 49) = v24;
    }
    *((_QWORD *)v2 + 52) = *(_QWORD *)(v1 + 336);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 88), v4);
    *(_OWORD *)(v2 + 104) = *(_OWORD *)(v1 + 24);
    v11 = (_QWORD *)(v1 + 48);
    v12 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v2 + 16) = v12;
    v13 = v2 + 128;
    *((_QWORD *)v2 + 11) = off_1E2521330;
    *((_QWORD *)v2 + 15) = *(_QWORD *)(v1 + 40);
    v14 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v2 + 17) = v14;
    if (v14)
    {
      *(_QWORD *)(v12 + 16) = v13;
      *(_QWORD *)(v1 + 40) = v11;
      *v11 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v2 + 15) = v13;
    }
    v27 = *((_QWORD *)v2 + 65);
    *((_OWORD *)v2 + 9) = *(_OWORD *)(v27 + 64);
    *(_QWORD *)(v27 + 64) = 0;
    *(_QWORD *)(v27 + 72) = 0;
  }
  v2[424] = v5;
  v28 = *((_QWORD *)v2 + 66);
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      v31 = (std::__shared_weak_count *)*((_QWORD *)v2 + 66);
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)v2 + 61);
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)v2 + 57);
  if (!v35)
    goto LABEL_34;
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = (std::__shared_weak_count *)*((_QWORD *)v2 + 55);
    if (!v38)
      goto LABEL_38;
  }
  else
  {
LABEL_34:
    v38 = (std::__shared_weak_count *)*((_QWORD *)v2 + 55);
    if (!v38)
      goto LABEL_38;
  }
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (v2[424])
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_38:
  if (v2[424])
  {
LABEL_39:
    v41 = (char *)operator new(0x168uLL);
    v42 = v41;
    *((_QWORD *)v41 + 1) = 0;
    *((_QWORD *)v41 + 2) = 0;
    *(_QWORD *)v41 = &off_1E2522B28;
    *(_OWORD *)(v41 + 24) = *(_OWORD *)v3;
    *(_OWORD *)(v41 + 36) = *(_OWORD *)(v3 + 12);
    v43 = v2 + 128;
    v44 = *((_QWORD *)v2 + 16);
    *((_QWORD *)v41 + 7) = *((_QWORD *)v2 + 15);
    *((_QWORD *)v41 + 8) = v44;
    v45 = v41 + 64;
    v46 = *((_QWORD *)v2 + 17);
    *((_QWORD *)v41 + 9) = v46;
    if (v46)
    {
      *(_QWORD *)(v44 + 16) = v45;
      *((_QWORD *)v2 + 15) = v43;
      *v43 = 0;
      *((_QWORD *)v2 + 17) = 0;
    }
    else
    {
      *((_QWORD *)v41 + 7) = v45;
    }
    v55 = v2 + 152;
    v56 = *((_QWORD *)v2 + 19);
    v57 = *((_QWORD *)v2 + 18);
    *((_QWORD *)v41 + 11) = v56;
    v58 = v41 + 88;
    *((_QWORD *)v41 + 10) = v57;
    v59 = *((_QWORD *)v2 + 20);
    *((_QWORD *)v41 + 12) = v59;
    if (v59)
    {
      *(_QWORD *)(v56 + 16) = v58;
      *((_QWORD *)v2 + 18) = v55;
      *v55 = 0;
      *((_QWORD *)v2 + 20) = 0;
    }
    else
    {
      *((_QWORD *)v41 + 10) = v58;
    }
    v60 = v2 + 176;
    v61 = *((_QWORD *)v2 + 22);
    v62 = *((_QWORD *)v2 + 21);
    *((_QWORD *)v41 + 14) = v61;
    v63 = v41 + 112;
    *((_QWORD *)v41 + 13) = v62;
    v64 = *((_QWORD *)v2 + 23);
    *((_QWORD *)v41 + 15) = v64;
    if (v64)
    {
      *(_QWORD *)(v61 + 16) = v63;
      *((_QWORD *)v2 + 21) = v60;
      *v60 = 0;
      *((_QWORD *)v2 + 23) = 0;
    }
    else
    {
      *((_QWORD *)v41 + 13) = v63;
    }
    v65 = *((_OWORD *)v2 + 12);
    v41[144] = 0;
    *((_OWORD *)v41 + 8) = v65;
    v41[296] = 0;
    std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(v41 + 144), (__int128 *)v2 + 13);
    *((_OWORD *)v42 + 19) = *((_OWORD *)v2 + 23);
    v66 = *((_QWORD *)v2 + 48);
    v67 = *((_QWORD *)v2 + 49);
    *((_QWORD *)v2 + 47) = 0;
    *((_QWORD *)v2 + 48) = 0;
    *((_QWORD *)v2 + 46) = 0;
    *((_QWORD *)v42 + 40) = v66;
    *((_QWORD *)v42 + 41) = v67;
    v68 = v42 + 336;
    v69 = *((_QWORD *)v2 + 50);
    v70 = *((_QWORD *)v2 + 51);
    *((_QWORD *)v42 + 42) = v69;
    *((_QWORD *)v42 + 43) = v70;
    if (v70)
    {
      *(_QWORD *)(v69 + 16) = v68;
      *((_QWORD *)v2 + 49) = v2 + 400;
      *((_QWORD *)v2 + 50) = 0;
      *((_QWORD *)v2 + 51) = 0;
    }
    else
    {
      *((_QWORD *)v42 + 41) = v68;
    }
    *((_QWORD *)v42 + 44) = *((_QWORD *)v2 + 52);
    v52 = (std::__shared_weak_count *)*((_QWORD *)v2 + 59);
    *((_QWORD *)v2 + 58) = v42 + 24;
    *((_QWORD *)v2 + 59) = v42;
    if (!v52)
      goto LABEL_67;
    v71 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v71);
    while (__stlxr(v54 - 1, v71));
    goto LABEL_66;
  }
LABEL_44:
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v90);
  AMSCore::Logger::log<char [40],AMSCore::Error>(v90, v3);
  v47 = v91;
  if (v91)
  {
    v48 = (unint64_t *)&v91->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = operator new(0x168uLL);
  v50[1] = 0;
  v50[2] = 0;
  *v50 = &off_1E2522B28;
  v51 = AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig((AMSCore::MetricsEventModifier::MetricsConfig *)(v50 + 3));
  v52 = (std::__shared_weak_count *)*((_QWORD *)v2 + 59);
  *((_QWORD *)v2 + 58) = v51;
  *((_QWORD *)v2 + 59) = v50;
  if (!v52)
    goto LABEL_67;
  v53 = (unint64_t *)&v52->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
LABEL_66:
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    if (v2[424])
      goto LABEL_68;
LABEL_70:
    (**(void (***)(uint64_t))v3)(v3);
    goto LABEL_71;
  }
LABEL_67:
  if (!v2[424])
    goto LABEL_70;
LABEL_68:
  std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>(v3);
LABEL_71:
  std::mutex::lock(*((std::mutex **)v2 + 62));
  v73 = *((_QWORD *)v2 + 58);
  v72 = *((_QWORD *)v2 + 59);
  if (v72)
  {
    v74 = (unint64_t *)(v72 + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v76 = *((_QWORD *)v2 + 62);
  v77 = *(std::__shared_weak_count **)(v76 + 72);
  *(_QWORD *)(v76 + 64) = v73;
  *(_QWORD *)(v76 + 72) = v72;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (v2[40])
  {
    v80 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v2[40] = 0;
  }
  v83 = (std::mutex *)*((_QWORD *)v2 + 62);
  *((_QWORD *)v2 + 3) = v83[1].__m_.__sig;
  v84 = *(_QWORD *)(v76 + 72);
  *((_QWORD *)v2 + 4) = v84;
  if (v84)
  {
    v85 = (unint64_t *)(v84 + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    v83 = (std::mutex *)*((_QWORD *)v2 + 62);
  }
  v2[40] = 1;
  std::mutex::unlock(v83);
  v87 = (std::__shared_weak_count *)*((_QWORD *)v2 + 59);
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  *((_QWORD *)v2 + 11) = v2 + 16;
  *(_QWORD *)v2 = 0;
  return AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::Awaiter::await_suspend((_BYTE *)v3);
}

void sub_18CCA1238(void *a1)
{
  uint64_t v1;
  void (***v2)(_QWORD);
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v6;

  v4 = v3;
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  if (*(_BYTE *)(v1 + 424))
    std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v2);
  else
    (**v2)(v2);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1 + 464);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsEventModifierProvider::Config::reloadModifier(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;

  if (*__p)
  {
    v2 = __p[66];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[66];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[61];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[57];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[55];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)__p[59];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v18 = (_QWORD *)__p[10];
  if (v18 == __p + 7)
  {
    v19 = 4;
    v18 = __p + 7;
    goto LABEL_31;
  }
  if (v18)
  {
    v19 = 5;
LABEL_31:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  if (*((_BYTE *)__p + 40))
  {
    v20 = (std::__shared_weak_count *)__p[4];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v23 = __p[64];
  do
  {
    v24 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v25)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v23)
  {
    v26 = (unint64_t *)(__p[64] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      v28 = (std::__shared_weak_count *)__p[64];
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v29 = __p[63];
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      v32 = (std::__shared_weak_count *)__p[63];
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [40],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"failed to build metrics config modifier", 39);
    AMSCore::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 4;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "metrics", 7, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CCA175C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

AMSCore::MetricsEventModifier::MetricsConfig *AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig(AMSCore::MetricsEventModifier::MetricsConfig *this)
{
  char **v2;
  char **v3;
  char **v5;
  char *v6[2];
  void *__p;
  char **v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  int v12;
  char **v13;
  char *v14[3];
  char *v15[3];
  char *v16[2];
  char v17;
  char v18;
  char v19[152];
  char v20;

  LOBYTE(v10) = 0;
  v11 = 0;
  v12 = 0;
  v13 = v14;
  v14[0] = 0;
  v15[0] = 0;
  v15[1] = 0;
  v14[1] = 0;
  v14[2] = (char *)v15;
  v16[0] = 0;
  v16[1] = 0;
  v15[2] = (char *)v16;
  v17 = 0;
  v18 = 0;
  v19[0] = 0;
  v20 = 0;
  __p = 0;
  v8 = 0;
  v9 = 0;
  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig((uint64_t)this, &v10, (uint64_t)&__p, &v5);
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(v6[0]);
  v2 = (char **)__p;
  if (__p)
  {
    v3 = v8;
    if (v8 != __p)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v3 - 2));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v3 - 5));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v3 - 8));
        std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(v3 - 15));
        v3 -= 16;
      }
      while (v3 != v2);
    }
    operator delete(v2);
  }
  if (v20)
    AMSCore::URL::~URL((AMSCore::URL *)v19);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v16[0]);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v15[0]);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v14[0]);
  return this;
}

void sub_18CCA18CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(v5);
  std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier((AMSCore::MetricsEventModifier::EventModifier *)va1);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v1 = result;
  v13 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 32);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 64);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 40))
      {
        v12 = v11;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v11);
      }
      else
      {
        v12 = *(_BYTE **)(*(_QWORD *)v1 + 64);
        *v4 = 0;
      }
    }
    else
    {
      v12 = 0;
    }
    if (v12)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 24))
      {
        __break(1u);
        return result;
      }
      v10 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      if (!v12)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v10);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
      if (*((_QWORD *)&v10 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v12;
    if (v12 == v11)
    {
      v9 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v9 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8 * v9))(result);
  }
  return result;
}

void sub_18CCA1A80(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMSCore::MetricsEventModifier::MetricsConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::MetricsEventModifier::MetricsConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::MetricsEventModifier::MetricsConfig>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>(a1 + 24);
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 32);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_20MetricsEventModifier13MetricsConfigEEEvE7Promise17get_ret"
                     "urn_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_20MetricsEventModifier13MetricsConfigEEEvE7Promi"
                                "se17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_20MetricsEventModifier13MetricsConfigEEEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_20MetricsEventModifier13MetricsConfigEEEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::MetricsEventModifierProvider::getOverrideForEvent(_OWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char **v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BYTE v60[28];
  char **v61;
  char *v62;
  uint64_t v63;
  char **v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  int v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char v86;
  uint64_t v87;

  v6 = (char *)operator new(0x1D0uLL);
  v7 = (unint64_t)v6;
  v8 = v6 + 392;
  *(_QWORD *)v6 = AMSCore::MetricsEventModifierProvider::getOverrideForEvent;
  *((_QWORD *)v6 + 1) = AMSCore::MetricsEventModifierProvider::getOverrideForEvent;
  v9 = (uint64_t *)(v6 + 360);
  v10 = v6 + 408;
  v11 = (uint64_t)(v6 + 16);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  do
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v12 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v13 = v6 + 24;
  v6[312] = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 44) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,void>(v60, v11);
  *a1 = *(_OWORD *)v60;
  v14 = a2[11];
  *(_QWORD *)(v7 + 360) = a2[10];
  *(_QWORD *)(v7 + 368) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = a2[13];
  *(_QWORD *)(v7 + 376) = a2[12];
  *(_QWORD *)(v7 + 384) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  AMSCore::MetricsEventModifierProvider::Config::reloadModifier(v10, (uint64_t)a2, v9);
  v20 = *((_OWORD *)v8 + 1);
  *((_OWORD *)v8 + 3) = v20;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  if (atomic_load((unint64_t *)(v20 + 32)))
    goto LABEL_13;
  v8[64] = 0;
  v22 = (unint64_t *)(*(_QWORD *)(v7 + 440) + 32);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v7, v22));
  if (v23)
  {
LABEL_13:
    v24 = *((_QWORD *)v8 + 6);
    if (*(_BYTE *)(v24 + 24))
    {
      *(_OWORD *)v8 = *(_OWORD *)(v24 + 8);
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = 0;
      v25 = *(_QWORD *)(v7 + 448);
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          v28 = *(std::__shared_weak_count **)(v7 + 448);
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v29 = *(std::__shared_weak_count **)(v7 + 416);
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *(std::__shared_weak_count **)(v7 + 384);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)(v7 + 368);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForEvent((uint64_t)v60, *(_QWORD *)v8, (AMSCore::MetricsEventModifier::EventModifierForFieldFilters *)(*((_QWORD *)v8 + 4) + 72));
      if (*(_BYTE *)(v7 + 312))
      {
        if (*(_BYTE *)(v7 + 296))
          AMSCore::URL::~URL((AMSCore::URL *)(v7 + 144));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 112));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 88));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 64));
        *(_BYTE *)(v7 + 312) = 0;
      }
      *v13 = *(_OWORD *)v60;
      *(_OWORD *)(v7 + 36) = *(_OWORD *)&v60[12];
      v39 = v61;
      v38 = v62;
      *(_QWORD *)(v7 + 64) = v62;
      v40 = v7 + 64;
      *(_QWORD *)(v7 + 56) = v39;
      v41 = v63;
      *(_QWORD *)(v7 + 72) = v63;
      if (v41)
      {
        *((_QWORD *)v38 + 2) = v40;
        v61 = &v62;
        v62 = 0;
        v63 = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 56) = v40;
      }
      v43 = v64;
      v42 = v65;
      *(_QWORD *)(v7 + 88) = v65;
      v44 = v7 + 88;
      *(_QWORD *)(v7 + 80) = v43;
      v45 = v66;
      *(_QWORD *)(v7 + 96) = v66;
      if (v45)
      {
        *((_QWORD *)v42 + 2) = v44;
        v64 = &v65;
        v65 = 0;
        v66 = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 80) = v44;
      }
      v47 = v67;
      v46 = v68;
      *(_QWORD *)(v7 + 112) = v68;
      v48 = v7 + 112;
      *(_QWORD *)(v7 + 104) = v47;
      v49 = v69;
      *(_QWORD *)(v7 + 120) = v69;
      if (v49)
      {
        *(_QWORD *)(v46 + 16) = v48;
        v67 = &v68;
        v68 = 0;
        v69 = 0;
        v46 = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 104) = v48;
      }
      v50 = v70;
      *(_BYTE *)(v7 + 144) = 0;
      *(_OWORD *)(v7 + 128) = v50;
      *(_BYTE *)(v7 + 296) = 0;
      if (v86)
      {
        *(_BYTE *)(v7 + 168) = 0;
        if (v73)
        {
          *(_OWORD *)(v7 + 144) = v71;
          *(_QWORD *)(v7 + 160) = v72;
          v72 = 0;
          v71 = 0uLL;
          *(_BYTE *)(v7 + 168) = 1;
        }
        *(_BYTE *)(v7 + 176) = 0;
        *(_BYTE *)(v7 + 200) = 0;
        if (v76)
        {
          *(_OWORD *)(v7 + 176) = v74;
          *(_QWORD *)(v7 + 192) = v75;
          v75 = 0;
          v74 = 0uLL;
          *(_BYTE *)(v7 + 200) = 1;
        }
        *(_BYTE *)(v7 + 208) = 0;
        *(_BYTE *)(v7 + 232) = 0;
        if (v79)
        {
          *(_OWORD *)(v7 + 208) = v77;
          *(_QWORD *)(v7 + 224) = v78;
          v78 = 0;
          v77 = 0uLL;
          *(_BYTE *)(v7 + 232) = 1;
        }
        *(_DWORD *)(v7 + 240) = v80;
        *(_QWORD *)(v7 + 248) = v7 + 248;
        *(_QWORD *)(v7 + 256) = v7 + 248;
        *(_QWORD *)(v7 + 264) = 0;
        v51 = v83;
        if (v83)
        {
          v53 = v81;
          v52 = v82;
          v54 = *v82;
          *(_QWORD *)(v54 + 8) = *(_QWORD *)(v81 + 8);
          **(_QWORD **)(v53 + 8) = v54;
          v55 = *(_QWORD *)(v7 + 248);
          *(_QWORD *)(v55 + 8) = v52;
          *v52 = v55;
          *(_QWORD *)(v7 + 248) = v53;
          *(_QWORD *)(v53 + 8) = v7 + 248;
          *(_QWORD *)(v7 + 264) = v51;
          v83 = 0;
        }
        *(_OWORD *)(v7 + 272) = v84;
        v56 = v87;
        *(_QWORD *)(v7 + 288) = v85;
        v85 = 0;
        v84 = 0uLL;
        *(_BYTE *)(v7 + 296) = 1;
        *(_QWORD *)(v7 + 304) = v56;
        *(_BYTE *)(v7 + 312) = 1;
        AMSCore::URL::~URL((AMSCore::URL *)&v71);
        v46 = v68;
      }
      else
      {
        *(_QWORD *)(v7 + 304) = v87;
        *(_BYTE *)(v7 + 312) = 1;
      }
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v46);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v65);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v62);
      v57 = *(std::__shared_weak_count **)(v7 + 400);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      *(_QWORD *)(v7 + 392) = v11;
      *(_QWORD *)v7 = 0;
      AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::Awaiter::await_suspend((uint64_t *)v8);
    }
    else
    {
      __break(1u);
    }
  }
}

{
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char **v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BYTE v60[28];
  char **v61;
  char *v62;
  uint64_t v63;
  char **v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  int v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char v86;
  uint64_t v87;

  v6 = (char *)operator new(0x1D0uLL);
  v7 = (unint64_t)v6;
  v8 = v6 + 392;
  *(_QWORD *)v6 = AMSCore::MetricsEventModifierProvider::getOverrideForEvent;
  *((_QWORD *)v6 + 1) = AMSCore::MetricsEventModifierProvider::getOverrideForEvent;
  v9 = (uint64_t *)(v6 + 360);
  v10 = v6 + 408;
  v11 = (uint64_t)(v6 + 16);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  do
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v12 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v13 = v6 + 24;
  v6[312] = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 44) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,void>(v60, v11);
  *a1 = *(_OWORD *)v60;
  v14 = a2[11];
  *(_QWORD *)(v7 + 360) = a2[10];
  *(_QWORD *)(v7 + 368) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = a2[13];
  *(_QWORD *)(v7 + 376) = a2[12];
  *(_QWORD *)(v7 + 384) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  AMSCore::MetricsEventModifierProvider::Config::reloadModifier(v10, (uint64_t)a2, v9);
  v20 = *((_OWORD *)v8 + 1);
  *((_OWORD *)v8 + 3) = v20;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  if (atomic_load((unint64_t *)(v20 + 32)))
    goto LABEL_13;
  v8[64] = 0;
  v22 = (unint64_t *)(*(_QWORD *)(v7 + 440) + 32);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v7, v22));
  if (v23)
  {
LABEL_13:
    v24 = *((_QWORD *)v8 + 6);
    if (*(_BYTE *)(v24 + 24))
    {
      *(_OWORD *)v8 = *(_OWORD *)(v24 + 8);
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = 0;
      v25 = *(_QWORD *)(v7 + 448);
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          v28 = *(std::__shared_weak_count **)(v7 + 448);
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v29 = *(std::__shared_weak_count **)(v7 + 416);
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *(std::__shared_weak_count **)(v7 + 384);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)(v7 + 368);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForEvent((uint64_t)v60, *(_QWORD *)v8, *((AMSCore::MetricsEventModifier::EventModifierForFieldFilters **)v8 + 4));
      if (*(_BYTE *)(v7 + 312))
      {
        if (*(_BYTE *)(v7 + 296))
          AMSCore::URL::~URL((AMSCore::URL *)(v7 + 144));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 112));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 88));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 64));
        *(_BYTE *)(v7 + 312) = 0;
      }
      *v13 = *(_OWORD *)v60;
      *(_OWORD *)(v7 + 36) = *(_OWORD *)&v60[12];
      v39 = v61;
      v38 = v62;
      *(_QWORD *)(v7 + 64) = v62;
      v40 = v7 + 64;
      *(_QWORD *)(v7 + 56) = v39;
      v41 = v63;
      *(_QWORD *)(v7 + 72) = v63;
      if (v41)
      {
        *((_QWORD *)v38 + 2) = v40;
        v61 = &v62;
        v62 = 0;
        v63 = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 56) = v40;
      }
      v43 = v64;
      v42 = v65;
      *(_QWORD *)(v7 + 88) = v65;
      v44 = v7 + 88;
      *(_QWORD *)(v7 + 80) = v43;
      v45 = v66;
      *(_QWORD *)(v7 + 96) = v66;
      if (v45)
      {
        *((_QWORD *)v42 + 2) = v44;
        v64 = &v65;
        v65 = 0;
        v66 = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 80) = v44;
      }
      v47 = v67;
      v46 = v68;
      *(_QWORD *)(v7 + 112) = v68;
      v48 = v7 + 112;
      *(_QWORD *)(v7 + 104) = v47;
      v49 = v69;
      *(_QWORD *)(v7 + 120) = v69;
      if (v49)
      {
        *(_QWORD *)(v46 + 16) = v48;
        v67 = &v68;
        v68 = 0;
        v69 = 0;
        v46 = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 104) = v48;
      }
      v50 = v70;
      *(_BYTE *)(v7 + 144) = 0;
      *(_OWORD *)(v7 + 128) = v50;
      *(_BYTE *)(v7 + 296) = 0;
      if (v86)
      {
        *(_BYTE *)(v7 + 168) = 0;
        if (v73)
        {
          *(_OWORD *)(v7 + 144) = v71;
          *(_QWORD *)(v7 + 160) = v72;
          v72 = 0;
          v71 = 0uLL;
          *(_BYTE *)(v7 + 168) = 1;
        }
        *(_BYTE *)(v7 + 176) = 0;
        *(_BYTE *)(v7 + 200) = 0;
        if (v76)
        {
          *(_OWORD *)(v7 + 176) = v74;
          *(_QWORD *)(v7 + 192) = v75;
          v75 = 0;
          v74 = 0uLL;
          *(_BYTE *)(v7 + 200) = 1;
        }
        *(_BYTE *)(v7 + 208) = 0;
        *(_BYTE *)(v7 + 232) = 0;
        if (v79)
        {
          *(_OWORD *)(v7 + 208) = v77;
          *(_QWORD *)(v7 + 224) = v78;
          v78 = 0;
          v77 = 0uLL;
          *(_BYTE *)(v7 + 232) = 1;
        }
        *(_DWORD *)(v7 + 240) = v80;
        *(_QWORD *)(v7 + 248) = v7 + 248;
        *(_QWORD *)(v7 + 256) = v7 + 248;
        *(_QWORD *)(v7 + 264) = 0;
        v51 = v83;
        if (v83)
        {
          v53 = v81;
          v52 = v82;
          v54 = *v82;
          *(_QWORD *)(v54 + 8) = *(_QWORD *)(v81 + 8);
          **(_QWORD **)(v53 + 8) = v54;
          v55 = *(_QWORD *)(v7 + 248);
          *(_QWORD *)(v55 + 8) = v52;
          *v52 = v55;
          *(_QWORD *)(v7 + 248) = v53;
          *(_QWORD *)(v53 + 8) = v7 + 248;
          *(_QWORD *)(v7 + 264) = v51;
          v83 = 0;
        }
        *(_OWORD *)(v7 + 272) = v84;
        v56 = v87;
        *(_QWORD *)(v7 + 288) = v85;
        v85 = 0;
        v84 = 0uLL;
        *(_BYTE *)(v7 + 296) = 1;
        *(_QWORD *)(v7 + 304) = v56;
        *(_BYTE *)(v7 + 312) = 1;
        AMSCore::URL::~URL((AMSCore::URL *)&v71);
        v46 = v68;
      }
      else
      {
        *(_QWORD *)(v7 + 304) = v87;
        *(_BYTE *)(v7 + 312) = 1;
      }
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v46);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v65);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v62);
      v57 = *(std::__shared_weak_count **)(v7 + 400);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      *(_QWORD *)(v7 + 392) = v11;
      *(_QWORD *)v7 = 0;
      AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::Awaiter::await_suspend((uint64_t *)v8);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_18CCA20A4(void *a1)
{
  uint64_t v1;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t *AMSCore::MetricsEventModifierProvider::getOverrideForEvent(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  char **v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  char **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[2];
  char **v42;
  char *v43;
  uint64_t v44;
  char **v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v1 = result[55];
  if (!*(_BYTE *)(v1 + 24))
    goto LABEL_53;
  v2 = result;
  v3 = result + 49;
  *(_OWORD *)(result + 49) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  v4 = result[56];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      v7 = (std::__shared_weak_count *)result[56];
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v8 = (std::__shared_weak_count *)v2[52];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)v2[48];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v2[46];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForEvent((uint64_t)v41, v2[49], (AMSCore::MetricsEventModifier::EventModifierForFieldFilters *)(v2[53] + 72));
  if (*((_BYTE *)v2 + 312))
  {
    if (*((_BYTE *)v2 + 296))
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 18));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v2[14]);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v2[11]);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v2[8]);
    *((_BYTE *)v2 + 312) = 0;
  }
  v17 = v41[0];
  v19 = v42;
  v18 = v43;
  v2[8] = (uint64_t)v43;
  v20 = v2 + 8;
  *(_OWORD *)(v2 + 3) = v17;
  *(_OWORD *)((char *)v2 + 36) = *(_OWORD *)((char *)v41 + 12);
  v2[7] = (uint64_t)v19;
  v21 = v44;
  v2[9] = v44;
  if (v21)
  {
    *((_QWORD *)v18 + 2) = v20;
    v42 = &v43;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v2[7] = (uint64_t)v20;
  }
  v23 = v45;
  v22 = v46;
  v2[11] = (uint64_t)v46;
  v24 = v2 + 11;
  v2[10] = (uint64_t)v23;
  v25 = v47;
  v2[12] = v47;
  if (v25)
  {
    *((_QWORD *)v22 + 2) = v24;
    v45 = &v46;
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v2[10] = (uint64_t)v24;
  }
  v27 = v48;
  v26 = v49;
  v2[14] = v49;
  v28 = v2 + 14;
  v2[13] = (uint64_t)v27;
  v29 = v50;
  v2[15] = v50;
  if (v29)
  {
    *(_QWORD *)(v26 + 16) = v28;
    v48 = &v49;
    v49 = 0;
    v50 = 0;
    v26 = 0;
  }
  else
  {
    v2[13] = (uint64_t)v28;
  }
  v30 = v51;
  *((_BYTE *)v2 + 144) = 0;
  v31 = (__int128 *)(v2 + 18);
  *((_OWORD *)v2 + 8) = v30;
  *((_BYTE *)v2 + 296) = 0;
  if (v67)
  {
    result = (uint64_t *)&v52;
    *((_BYTE *)v2 + 168) = 0;
    if (v54)
    {
      *v31 = v52;
      v2[20] = v53;
      v53 = 0;
      v52 = 0uLL;
      *((_BYTE *)v2 + 168) = 1;
    }
    *((_BYTE *)v2 + 176) = 0;
    *((_BYTE *)v2 + 200) = 0;
    if (v57)
    {
      *((_OWORD *)v2 + 11) = v55;
      v2[24] = v56;
      v56 = 0;
      v55 = 0uLL;
      *((_BYTE *)v2 + 200) = 1;
    }
    *((_BYTE *)v2 + 208) = 0;
    *((_BYTE *)v2 + 232) = 0;
    if (v60)
    {
      *((_OWORD *)v2 + 13) = v58;
      v2[28] = v59;
      v59 = 0;
      v58 = 0uLL;
      *((_BYTE *)v2 + 232) = 1;
    }
    *((_DWORD *)v2 + 60) = v61;
    v2[31] = (uint64_t)(v2 + 31);
    v2[32] = (uint64_t)(v2 + 31);
    v2[33] = 0;
    if (v31 != &v52)
    {
      v32 = v64;
      if (v64)
      {
        v34 = v62;
        v33 = v63;
        v35 = *v63;
        *(_QWORD *)(v35 + 8) = *(_QWORD *)(v62 + 8);
        **(_QWORD **)(v34 + 8) = v35;
        v36 = v2[31];
        *(_QWORD *)(v36 + 8) = v33;
        *v33 = v36;
        v2[31] = v34;
        *(_QWORD *)(v34 + 8) = v2 + 31;
        v2[33] = v32;
        v64 = 0;
      }
      *((_OWORD *)v2 + 17) = v65;
      v37 = v68;
      v2[36] = v66;
      v66 = 0;
      v65 = 0uLL;
      *((_BYTE *)v2 + 296) = 1;
      v2[38] = v37;
      *((_BYTE *)v2 + 312) = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v52);
      v26 = v49;
      goto LABEL_47;
    }
LABEL_53:
    __break(1u);
    return result;
  }
  v2[38] = v68;
  *((_BYTE *)v2 + 312) = 1;
LABEL_47:
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v26);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v46);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v43);
  v38 = (std::__shared_weak_count *)v2[50];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v2[49] = (uint64_t)(v2 + 2);
  *v2 = 0;
  return AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::Awaiter::await_suspend(v3);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  char **v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  char **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD v41[2];
  char **v42;
  char *v43;
  uint64_t v44;
  char **v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v1 = result[55];
  if (!*(_BYTE *)(v1 + 24))
    goto LABEL_53;
  v2 = result;
  v3 = result + 49;
  *(_OWORD *)(result + 49) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  v4 = result[56];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      v7 = (std::__shared_weak_count *)result[56];
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v8 = (std::__shared_weak_count *)v2[52];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)v2[48];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v2[46];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForEvent((uint64_t)v41, v2[49], (AMSCore::MetricsEventModifier::EventModifierForFieldFilters *)v2[53]);
  if (*((_BYTE *)v2 + 312))
  {
    if (*((_BYTE *)v2 + 296))
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 18));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v2[14]);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v2[11]);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v2[8]);
    *((_BYTE *)v2 + 312) = 0;
  }
  v17 = v41[0];
  v19 = v42;
  v18 = v43;
  v2[8] = (uint64_t)v43;
  v20 = v2 + 8;
  *(_OWORD *)(v2 + 3) = v17;
  *(_OWORD *)((char *)v2 + 36) = *(_OWORD *)((char *)v41 + 12);
  v2[7] = (uint64_t)v19;
  v21 = v44;
  v2[9] = v44;
  if (v21)
  {
    *((_QWORD *)v18 + 2) = v20;
    v42 = &v43;
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v2[7] = (uint64_t)v20;
  }
  v23 = v45;
  v22 = v46;
  v2[11] = (uint64_t)v46;
  v24 = v2 + 11;
  v2[10] = (uint64_t)v23;
  v25 = v47;
  v2[12] = v47;
  if (v25)
  {
    *((_QWORD *)v22 + 2) = v24;
    v45 = &v46;
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v2[10] = (uint64_t)v24;
  }
  v27 = v48;
  v26 = v49;
  v2[14] = v49;
  v28 = v2 + 14;
  v2[13] = (uint64_t)v27;
  v29 = v50;
  v2[15] = v50;
  if (v29)
  {
    *(_QWORD *)(v26 + 16) = v28;
    v48 = &v49;
    v49 = 0;
    v50 = 0;
    v26 = 0;
  }
  else
  {
    v2[13] = (uint64_t)v28;
  }
  v30 = v51;
  *((_BYTE *)v2 + 144) = 0;
  v31 = (__int128 *)(v2 + 18);
  *((_OWORD *)v2 + 8) = v30;
  *((_BYTE *)v2 + 296) = 0;
  if (v67)
  {
    result = (uint64_t *)&v52;
    *((_BYTE *)v2 + 168) = 0;
    if (v54)
    {
      *v31 = v52;
      v2[20] = v53;
      v53 = 0;
      v52 = 0uLL;
      *((_BYTE *)v2 + 168) = 1;
    }
    *((_BYTE *)v2 + 176) = 0;
    *((_BYTE *)v2 + 200) = 0;
    if (v57)
    {
      *((_OWORD *)v2 + 11) = v55;
      v2[24] = v56;
      v56 = 0;
      v55 = 0uLL;
      *((_BYTE *)v2 + 200) = 1;
    }
    *((_BYTE *)v2 + 208) = 0;
    *((_BYTE *)v2 + 232) = 0;
    if (v60)
    {
      *((_OWORD *)v2 + 13) = v58;
      v2[28] = v59;
      v59 = 0;
      v58 = 0uLL;
      *((_BYTE *)v2 + 232) = 1;
    }
    *((_DWORD *)v2 + 60) = v61;
    v2[31] = (uint64_t)(v2 + 31);
    v2[32] = (uint64_t)(v2 + 31);
    v2[33] = 0;
    if (v31 != &v52)
    {
      v32 = v64;
      if (v64)
      {
        v34 = v62;
        v33 = v63;
        v35 = *v63;
        *(_QWORD *)(v35 + 8) = *(_QWORD *)(v62 + 8);
        **(_QWORD **)(v34 + 8) = v35;
        v36 = v2[31];
        *(_QWORD *)(v36 + 8) = v33;
        *v33 = v36;
        v2[31] = v34;
        *(_QWORD *)(v34 + 8) = v2 + 31;
        v2[33] = v32;
        v64 = 0;
      }
      *((_OWORD *)v2 + 17) = v65;
      v37 = v68;
      v2[36] = v66;
      v66 = 0;
      v65 = 0uLL;
      *((_BYTE *)v2 + 296) = 1;
      v2[38] = v37;
      *((_BYTE *)v2 + 312) = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v52);
      v26 = v49;
      goto LABEL_47;
    }
LABEL_53:
    __break(1u);
    return result;
  }
  v2[38] = v68;
  *((_BYTE *)v2 + 312) = 1;
LABEL_47:
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v26);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v46);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v43);
  v38 = (std::__shared_weak_count *)v2[50];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v2[49] = (uint64_t)(v2 + 2);
  *v2 = 0;
  return AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CCA24C0(void *a1)
{
  uint64_t v1;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsEventModifierProvider::getOverrideForEvent(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;

  v2 = (uint64_t)(a1 + 2);
  if (*a1)
  {
    v3 = a1[56];
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        v6 = (std::__shared_weak_count *)a1[56];
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v7 = (std::__shared_weak_count *)a1[52];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)a1[48];
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)a1[46];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v16 = a1[54];
  AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::~Promise(v2);
  if (v16)
  {
    v17 = (unint64_t *)(a1[54] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = (std::__shared_weak_count *)a1[54];
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  operator delete(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;

  v2 = (uint64_t)(a1 + 2);
  if (*a1)
  {
    v3 = a1[56];
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        v6 = (std::__shared_weak_count *)a1[56];
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v7 = (std::__shared_weak_count *)a1[52];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)a1[48];
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)a1[46];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v16 = a1[54];
  AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::~Promise(v2);
  if (v16)
  {
    v17 = (unint64_t *)(a1[54] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = (std::__shared_weak_count *)a1[54];
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  operator delete(a1);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E25235E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CCA268C(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 304);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CCA26C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::Awaiter::await_suspend(uint64_t *result)
{
  uint64_t *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE v7[40];
  char *v8;
  char *v9;
  char *v10;
  _BYTE v11[168];
  _BYTE v12[24];
  uint64_t *v13;
  uint64_t v14;

  v1 = result;
  v14 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*result + 304);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*result - 8))(*result - 16);
    v4 = *result;
    v5 = *(uint64_t **)(*result + 336);
    if (v5)
    {
      if (v5 == (uint64_t *)(v4 + 312))
      {
        v13 = (uint64_t *)v12;
        (*(void (**)(uint64_t *, _BYTE *))(*v5 + 24))(v5, v12);
      }
      else
      {
        v13 = v5;
        *(_QWORD *)(v4 + 336) = 0;
      }
    }
    else
    {
      v13 = 0;
    }
    if (v13)
    {
      AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume((uint64_t)v7, *v1);
      if (!v13)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t *, _BYTE *))(*v13 + 48))(v13, v7);
      if (v11[152])
        AMSCore::URL::~URL((AMSCore::URL *)v11);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v10);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v9);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v8);
    }
    else
    {
      (*v3)(v3);
    }
    result = v13;
    if (v13 == (uint64_t *)v12)
    {
      v6 = 4;
      result = (uint64_t *)v12;
    }
    else
    {
      if (!v13)
        return result;
      v6 = 5;
    }
    return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_18CCA2850(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (*(_BYTE *)(a2 + 296))
  {
    v3 = (_QWORD *)(a2 + 48);
    v4 = *(_QWORD *)(a2 + 48);
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 12) = *(_OWORD *)(a2 + 20);
    *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(result + 40) = v4;
    v5 = result + 40;
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(result + 48) = v6;
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = v5;
      *(_QWORD *)(a2 + 40) = v3;
      *v3 = 0;
      *(_QWORD *)(a2 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(result + 32) = v5;
    }
    v7 = (_QWORD *)(a2 + 72);
    v8 = *(_QWORD *)(a2 + 72);
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(result + 64) = v8;
    v10 = result + 64;
    *(_QWORD *)(result + 56) = v9;
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(result + 72) = v11;
    if (v11)
    {
      *(_QWORD *)(v8 + 16) = v10;
      *(_QWORD *)(a2 + 64) = v7;
      *v7 = 0;
      *(_QWORD *)(a2 + 80) = 0;
    }
    else
    {
      *(_QWORD *)(result + 56) = v10;
    }
    v12 = (_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 96);
    v14 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(result + 88) = v13;
    v15 = result + 88;
    *(_QWORD *)(result + 80) = v14;
    v16 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(result + 96) = v16;
    if (v16)
    {
      *(_QWORD *)(v13 + 16) = v15;
      *(_QWORD *)(a2 + 88) = v12;
      *v12 = 0;
      *(_QWORD *)(a2 + 104) = 0;
    }
    else
    {
      *(_QWORD *)(result + 80) = v15;
    }
    v17 = *(_OWORD *)(a2 + 112);
    *(_BYTE *)(result + 120) = 0;
    v18 = result + 120;
    *(_OWORD *)(result + 104) = v17;
    *(_BYTE *)(result + 272) = 0;
    result = std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(result + 120, (__int128 *)(a2 + 128));
    *(_QWORD *)(v18 + 160) = *(_QWORD *)(a2 + 288);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 304);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_20MetricsEventModifier19MergedEventModifierEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier19MergedEventModifierEvE7Promise17get_return_ob"
                                "jectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_20MetricsEventModifier19MergedEventModifierEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier19MergedEventModifierEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::~Promise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (_QWORD *)(a1 + 312);
  v3 = *(_QWORD **)(a1 + 336);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 296))
  {
    if (*(_BYTE *)(a1 + 280))
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 128));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 96));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 72));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 48));
  }
  do
  {
    v5 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v6)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void sub_18CCA2FD8(void *a1)
{
  uint64_t v1;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18CCA33F0(void *a1)
{
  uint64_t v1;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsEventModifierProvider::getOverrideForTopic(_OWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  uint64_t *v8;
  const void **v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char v64;

  v6 = (char *)operator new(0x168uLL);
  v7 = (unint64_t)v6;
  *(_QWORD *)v6 = AMSCore::MetricsEventModifierProvider::getOverrideForTopic;
  *((_QWORD *)v6 + 1) = AMSCore::MetricsEventModifierProvider::getOverrideForTopic;
  v8 = (uint64_t *)(v6 + 248);
  v9 = (const void **)(v6 + 280);
  v10 = (uint64_t *)(v6 + 304);
  v11 = v6 + 320;
  *(_OWORD *)(v6 + 280) = *(_OWORD *)a3;
  v12 = v6 + 16;
  *((_QWORD *)v6 + 37) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  do
    v13 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v13 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v6 + 26) = 0;
  v6[24] = 0;
  v6[200] = 0;
  *((_QWORD *)v6 + 30) = 0;
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E25235A8;
  v14[1] = 0;
  *(_QWORD *)&v15 = v12;
  *((_QWORD *)&v15 + 1) = v14;
  v14[2] = 0;
  v14[3] = v12;
  *a1 = v15;
  v16 = a2[11];
  *(_QWORD *)(v7 + 248) = a2[10];
  *(_QWORD *)(v7 + 256) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = a2[13];
  *(_QWORD *)(v7 + 264) = a2[12];
  *(_QWORD *)(v7 + 272) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  AMSCore::MetricsEventModifierProvider::Config::reloadModifier(v11, (uint64_t)a2, v8);
  v22 = *(_OWORD *)(v7 + 320);
  *(_OWORD *)(v7 + 336) = v22;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  if (atomic_load((unint64_t *)(v22 + 32)))
    goto LABEL_13;
  *(_BYTE *)(v7 + 352) = 0;
  v24 = (unint64_t *)(*(_QWORD *)(v7 + 336) + 32);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v7, v24));
  if (v25)
  {
LABEL_13:
    v26 = *(_QWORD *)(v7 + 336);
    if (!*(_BYTE *)(v26 + 24))
    {
      __break(1u);
      return;
    }
    *(_OWORD *)(v7 + 304) = *(_OWORD *)(v26 + 8);
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 16) = 0;
    v27 = *(_QWORD *)(v7 + 344);
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        v30 = *(std::__shared_weak_count **)(v7 + 344);
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v31 = *(std::__shared_weak_count **)(v7 + 328);
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *(std::__shared_weak_count **)(v7 + 272);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = *(std::__shared_weak_count **)(v7 + 256);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForTopic((uint64_t)&v48, *v10, v9);
    if (*(_BYTE *)(v7 + 200) && *(_BYTE *)(v7 + 192))
      AMSCore::URL::~URL((AMSCore::URL *)(v7 + 40));
    *(_OWORD *)(v7 + 24) = v48;
    *(_BYTE *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 192) = 0;
    if (v64)
    {
      *(_BYTE *)(v7 + 64) = 0;
      if (v51)
      {
        *(_OWORD *)(v7 + 40) = v49;
        *(_QWORD *)(v7 + 56) = v50;
        v50 = 0;
        v49 = 0uLL;
        *(_BYTE *)(v7 + 64) = 1;
      }
      *(_BYTE *)(v7 + 72) = 0;
      *(_BYTE *)(v7 + 96) = 0;
      if (v54)
      {
        *(_OWORD *)(v7 + 72) = v52;
        *(_QWORD *)(v7 + 88) = v53;
        v53 = 0;
        v52 = 0uLL;
        *(_BYTE *)(v7 + 96) = 1;
      }
      *(_BYTE *)(v7 + 104) = 0;
      *(_BYTE *)(v7 + 128) = 0;
      if (v57)
      {
        *(_OWORD *)(v7 + 104) = v55;
        *(_QWORD *)(v7 + 120) = v56;
        v56 = 0;
        v55 = 0uLL;
        *(_BYTE *)(v7 + 128) = 1;
      }
      *(_DWORD *)(v7 + 136) = v58;
      *(_QWORD *)(v7 + 144) = v7 + 144;
      *(_QWORD *)(v7 + 152) = v7 + 144;
      *(_QWORD *)(v7 + 160) = 0;
      v40 = v61;
      if (v61)
      {
        v42 = v59;
        v41 = v60;
        v43 = *v60;
        *(_QWORD *)(v43 + 8) = *(_QWORD *)(v59 + 8);
        **(_QWORD **)(v42 + 8) = v43;
        v44 = *(_QWORD *)(v7 + 144);
        *(_QWORD *)(v44 + 8) = v41;
        *v41 = v44;
        *(_QWORD *)(v7 + 144) = v42;
        *(_QWORD *)(v42 + 8) = v7 + 144;
        *(_QWORD *)(v7 + 160) = v40;
        v61 = 0;
      }
      *(_OWORD *)(v7 + 168) = v62;
      *(_QWORD *)(v7 + 184) = v63;
      v63 = 0;
      v62 = 0uLL;
      *(_BYTE *)(v7 + 192) = 1;
      *(_BYTE *)(v7 + 200) = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v49);
      v45 = *(std::__shared_weak_count **)(v7 + 312);
      if (!v45)
        goto LABEL_53;
    }
    else
    {
      *(_BYTE *)(v7 + 200) = 1;
      v45 = *(std::__shared_weak_count **)(v7 + 312);
      if (!v45)
      {
LABEL_53:
        *(_QWORD *)(v7 + 304) = v12;
        *(_QWORD *)v7 = 0;
        AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::Awaiter::await_suspend(v10);
        return;
      }
    }
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_53;
  }
}

void sub_18CCA39F4(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

_BYTE *AMSCore::MetricsEventModifierProvider::getOverrideForTopic(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;

  v1 = *((_QWORD *)result + 42);
  if (*(_BYTE *)(v1 + 24))
  {
    v2 = result;
    *((_OWORD *)result + 19) = *(_OWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    v3 = *((_QWORD *)result + 43);
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)result + 43);
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 41);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)v2 + 34);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)v2 + 32);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForTopic((uint64_t)&v25, *((_QWORD *)v2 + 38), (const void **)v2 + 35);
    if (v2[200] && v2[192])
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 40));
    v16 = v25;
    v2[40] = 0;
    *(_OWORD *)(v2 + 24) = v16;
    v2[192] = 0;
    if (v41)
    {
      v2[64] = 0;
      if (v28)
      {
        *(_OWORD *)(v2 + 40) = v26;
        *((_QWORD *)v2 + 7) = v27;
        v27 = 0;
        v26 = 0uLL;
        v2[64] = 1;
      }
      v2[72] = 0;
      v2[96] = 0;
      if (v31)
      {
        *(_OWORD *)(v2 + 72) = v29;
        *((_QWORD *)v2 + 11) = v30;
        v30 = 0;
        v29 = 0uLL;
        v2[96] = 1;
      }
      v2[104] = 0;
      v2[128] = 0;
      if (v34)
      {
        *(_OWORD *)(v2 + 104) = v32;
        *((_QWORD *)v2 + 15) = v33;
        v33 = 0;
        v32 = 0uLL;
        v2[128] = 1;
      }
      *((_DWORD *)v2 + 34) = v35;
      *((_QWORD *)v2 + 18) = v2 + 144;
      *((_QWORD *)v2 + 19) = v2 + 144;
      *((_QWORD *)v2 + 20) = 0;
      v17 = v38;
      if (v38)
      {
        v19 = v36;
        v18 = v37;
        v20 = *v37;
        *(_QWORD *)(v20 + 8) = *(_QWORD *)(v36 + 8);
        **(_QWORD **)(v19 + 8) = v20;
        v21 = *((_QWORD *)v2 + 18);
        *(_QWORD *)(v21 + 8) = v18;
        *v18 = v21;
        *((_QWORD *)v2 + 18) = v19;
        *(_QWORD *)(v19 + 8) = v2 + 144;
        *((_QWORD *)v2 + 20) = v17;
        v38 = 0;
      }
      *(_OWORD *)(v2 + 168) = v39;
      *((_QWORD *)v2 + 23) = v40;
      v40 = 0;
      v39 = 0uLL;
      v2[192] = 1;
      v2[200] = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v26);
      v22 = (std::__shared_weak_count *)*((_QWORD *)v2 + 39);
      if (!v22)
        goto LABEL_41;
    }
    else
    {
      v2[200] = 1;
      v22 = (std::__shared_weak_count *)*((_QWORD *)v2 + 39);
      if (!v22)
      {
LABEL_41:
        *((_QWORD *)v2 + 38) = v2 + 16;
        *(_QWORD *)v2 = 0;
        return AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::Awaiter::await_suspend(v2 + 304);
      }
    }
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_41;
  }
  __break(1u);
  return result;
}

void sub_18CCA3CF4(void *a1)
{
  uint64_t v1;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsEventModifierProvider::getOverrideForTopic(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (*(_QWORD *)__p)
  {
    v2 = *((_QWORD *)__p + 43);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 43);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 41);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 34);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 32);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = (char *)*((_QWORD *)__p + 30);
  if (v15 == __p + 216)
  {
    v16 = 4;
    v15 = __p + 216;
    goto LABEL_26;
  }
  if (v15)
  {
    v16 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  }
  if (__p[200] && __p[192])
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 40));
  do
  {
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v18)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (__p[303] < 0)
    operator delete(*((void **)__p + 35));
  operator delete(__p);
}

_BYTE *AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _BYTE v9[152];
  char v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v1 = result;
  v13 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 192);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 224);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 200))
      {
        v12 = v11;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v11);
      }
      else
      {
        v12 = *(_BYTE **)(*(_QWORD *)v1 + 224);
        *v4 = 0;
      }
    }
    else
    {
      v12 = 0;
    }
    if (v12)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 184))
      {
        __break(1u);
        return result;
      }
      v8 = *(_OWORD *)(v5 + 8);
      v9[0] = 0;
      v10 = 0;
      std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)v9, (__int128 *)(v5 + 24));
      if (!v12)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v8);
      if (v10)
        AMSCore::URL::~URL((AMSCore::URL *)v9);
    }
    else
    {
      (*v3)(v3);
    }
    result = v12;
    if (v12 == v11)
    {
      v7 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v7 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)result + 8 * v7))(result, v6);
  }
  return result;
}

void sub_18CCA4020(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 192);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_20MetricsEventModifier13TopicModifierEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier13TopicModifierEvE7Promise17get_return_objectEv"
                                "E13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_20MetricsEventModifier13TopicModifierEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier13TopicModifierEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::MetricsFlushTask::internal::perform(unint64_t a1)
{
  std::runtime_error *v2;
  std::runtime_error *v3;
  std::system_error *v4;
  void **v5;
  void **v6;
  void (**v7)(AMSCore::Error *__hidden);
  uint64_t v8;
  const std::runtime_error *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  std::runtime_error_vtbl *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  void (**v79)(unint64_t);
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unsigned __int8 v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  __int128 v134;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  void *v141;
  char *v142;
  uint64_t v143;
  void (***v144)(uint64_t);
  _QWORD *v145;
  _QWORD *v146;
  _OWORD *v147;
  _QWORD *v148;
  __int128 *v149;
  __int128 *v150;
  AMSCore::Error *v151;
  _BYTE *v152;
  unsigned int *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  void **v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  void **v161;
  std::string *v162;
  unsigned int *v163;
  uint64_t *v164;
  unsigned int *v165;
  _OWORD *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const std::runtime_error *v171;
  std::runtime_error v172;
  __int128 v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  std::error_code v178;

  v152 = (_BYTE *)(a1 + 1052);
  v159 = a1 + 600;
  v2 = (std::runtime_error *)(a1 + 152);
  v3 = (std::runtime_error *)(a1 + 232);
  v171 = (const std::runtime_error *)(a1 + 312);
  v158 = a1 + 392;
  v4 = (std::system_error *)(a1 + 472);
  v5 = (void **)(a1 + 680);
  v163 = (unsigned int *)(a1 + 544);
  v164 = (uint64_t *)(a1 + 704);
  v168 = a1 + 728;
  v6 = (void **)(a1 + 752);
  v162 = (std::string *)(a1 + 776);
  v155 = a1 + 816;
  v156 = a1 + 616;
  v154 = a1 + 832;
  v149 = (__int128 *)(a1 + 848);
  v150 = (__int128 *)(a1 + 800);
  v153 = (unsigned int *)(a1 + 1048);
  v160 = a1 + 16;
  v7 = off_1E2521330;
  v170 = a1 + 152;
  v161 = (void **)(a1 + 680);
  v151 = (AMSCore::Error *)(a1 + 472);
  v165 = (unsigned int *)(a1 + 232);
  v157 = (void **)(a1 + 752);
  if (!*(_BYTE *)(a1 + 1052))
    goto LABEL_163;
LABEL_2:
  v8 = *(_QWORD *)(a1 + 1032);
  if (!*(_BYTE *)(v8 + 88))
  {
LABEL_247:
    __break(1u);
    return;
  }
  v9 = (const std::runtime_error *)(v8 + 8);
  v10 = *(_BYTE *)(v8 + 80);
  if (v10)
  {
    LODWORD(v2->__vftable) = v9->__vftable;
  }
  else
  {
    std::runtime_error::runtime_error(v2, v9);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v8 + 24);
    v11 = (_QWORD *)(v8 + 48);
    v12 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)(a1 + 192) = v12;
    v13 = a1 + 192;
    *(_QWORD *)(a1 + 152) = v7;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(v8 + 40);
    v14 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(a1 + 200) = v14;
    if (v14)
    {
      *(_QWORD *)(v12 + 16) = v13;
      *(_QWORD *)(v8 + 40) = v11;
      *v11 = 0;
      *(_QWORD *)(v8 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 184) = v13;
    }
    v15 = *(_QWORD *)(a1 + 1032);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(v15 + 64);
    *(_QWORD *)(v15 + 64) = 0;
    *(_QWORD *)(v15 + 72) = 0;
  }
  *(_BYTE *)(a1 + 224) = v10;
  v16 = *(_QWORD *)(a1 + 1040);
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = *(std::__shared_weak_count **)(a1 + 1040);
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 240);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(std::__shared_weak_count **)(a1 + 840);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(std::__shared_weak_count **)(a1 + 824);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(std::__shared_weak_count **)(a1 + 640);
  if (!v29)
    goto LABEL_33;
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = *(std::__shared_weak_count **)(a1 + 624);
    if (!v32)
      goto LABEL_37;
  }
  else
  {
LABEL_33:
    v32 = *(std::__shared_weak_count **)(a1 + 624);
    if (!v32)
      goto LABEL_37;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = (char *)*v6;
    if (!*v6)
      goto LABEL_45;
    goto LABEL_38;
  }
LABEL_37:
  v35 = (char *)*v6;
  if (!*v6)
    goto LABEL_45;
LABEL_38:
  v36 = *(char **)(a1 + 760);
  v37 = v35;
  if (v36 != v35)
  {
    do
    {
      v38 = v36 - 32;
      v39 = *((unsigned int *)v36 - 2);
      if ((_DWORD)v39 != -1)
        ((void (*)(std::system_error *, char *))off_1E253D240[v39])(v4, v36 - 32);
      *((_DWORD *)v36 - 2) = -1;
      v36 -= 32;
    }
    while (v38 != v35);
    v37 = *v157;
    v3 = (std::runtime_error *)v165;
  }
  *(_QWORD *)(a1 + 760) = v35;
  operator delete(v37);
  v2 = (std::runtime_error *)v170;
LABEL_45:
  if (*(char *)(a1 + 799) < 0)
  {
    operator delete(v162->__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 224))
      goto LABEL_47;
LABEL_52:
    AMSCore::Error::Error(v4, v2);
    goto LABEL_53;
  }
  if (!*(_BYTE *)(a1 + 224))
    goto LABEL_52;
LABEL_47:
  if (LODWORD(v2->__vftable) != 2)
  {
    (*(void (**)(_QWORD, const std::runtime_error *))(**(_QWORD **)(a1 + 864) + 24))(*(_QWORD *)(a1 + 864), v171);
    v45 = 0;
    v46 = 1;
    if (!*(_BYTE *)(a1 + 304))
    {
      *v163 = 999;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[35]>((uint64_t)v4, v3, v163);
      if (*(_BYTE *)(a1 + 104))
      {
        if (!*(_BYTE *)(a1 + 96))
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        *(_BYTE *)(a1 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v4);
      v47 = *(_QWORD *)(a1 + 512);
      *(_QWORD *)(a1 + 64) = v47;
      v48 = a1 + 64;
      v49 = (_QWORD *)(a1 + 504);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 488);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 504);
      v50 = *(_QWORD *)(a1 + 520);
      *(_QWORD *)(a1 + 72) = v50;
      if (v50)
      {
        *(_QWORD *)(v47 + 16) = v48;
        *v49 = a1 + 512;
        *(_QWORD *)(a1 + 512) = 0;
        *(_QWORD *)(a1 + 520) = 0;
        v47 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 56) = v48;
      }
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 528);
      *(_QWORD *)(a1 + 536) = 0;
      *(_QWORD *)(a1 + 528) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      *(_BYTE *)(a1 + 104) = 1;
      *(_QWORD *)(a1 + 472) = v7;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v49, (unsigned int *)v47);
      MEMORY[0x18D7898AC](v4);
      v46 = 0;
      v45 = 3;
      if (!*(_BYTE *)(a1 + 304))
      {
        ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
        v46 = 0;
      }
    }
    goto LABEL_88;
  }
  AMSCore::StringUtils::join<char [17]>((std::string *)v3, "invalid response");
  v178.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  *(_QWORD *)&v178.__val_ = 301;
  std::system_error::system_error(v4, v178, (const std::string *)v3);
  if (*(char *)(a1 + 255) < 0)
    operator delete(v3->__vftable);
  *(_QWORD *)(a1 + 472) = v7;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = a1 + 512;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
LABEL_53:
  (*(void (**)(_QWORD, const std::runtime_error *))(**(_QWORD **)(a1 + 864) + 40))(*(_QWORD *)(a1 + 864), v171);
  if (*(_BYTE *)(a1 + 304))
  {
    *v163 = 999;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>((uint64_t)v3, (uint64_t)v4, v163);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v3);
    v40 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 64) = v40;
    v41 = a1 + 64;
    v42 = (_QWORD *)(a1 + 264);
    v43 = *(_QWORD *)(a1 + 264);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 56) = v43;
    v44 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 72) = v44;
    if (v44)
    {
      *(_QWORD *)(v40 + 16) = v41;
      *v42 = a1 + 272;
      *(_QWORD *)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 280) = 0;
      v40 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v41;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)(a1 + 232) = v7;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v42, (unsigned int *)v40);
    MEMORY[0x18D7898AC](v3);
  }
  else
  {
    *v153 = 999;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[56],AMSCore::Error&>((uint64_t)v163, (uint64_t)v4, v153, (uint64_t)v3);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v163);
    v51 = *(_QWORD *)(a1 + 584);
    *(_QWORD *)(a1 + 64) = v51;
    v52 = a1 + 64;
    v53 = (_QWORD *)(a1 + 576);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 560);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 576);
    v54 = *(_QWORD *)(a1 + 592);
    *(_QWORD *)(a1 + 72) = v54;
    if (v54)
    {
      *(_QWORD *)(v51 + 16) = v52;
      *v53 = a1 + 584;
      *(_QWORD *)(a1 + 584) = 0;
      *(_QWORD *)(a1 + 592) = 0;
      v51 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v52;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v159;
    *(_QWORD *)v159 = 0;
    *(_QWORD *)(v159 + 8) = 0;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)(a1 + 544) = v7;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v53, (unsigned int *)v51);
    MEMORY[0x18D7898AC](v163);
    if (!*(_BYTE *)(a1 + 304))
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  }
  *(_QWORD *)(a1 + 472) = v7;
  v55 = *(std::__shared_weak_count **)(a1 + 536);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 504, *(unsigned int **)(a1 + 512));
  MEMORY[0x18D7898AC](v4);
  v46 = 0;
  v45 = 3;
LABEL_88:
  if (!*(_BYTE *)(a1 + 224))
    (**(void (***)(uint64_t))v170)(v170);
  v58 = (uint64_t *)(a1 + 1024);
  v59 = (uint64_t *)(a1 + 1016);
  if ((v46 & 1) != 0)
  {
LABEL_204:
    v60 = (std::runtime_error_vtbl *)v7;
    v113 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 984) - *(_QWORD *)(a1 + 992)) >> 3);
    if (v113 >= 0x1F4)
      v61 = *(_QWORD *)(a1 + 960);
    else
      v61 = *(_QWORD *)(a1 + 960) + 1;
    if (v113 >= 0x1F4)
      v45 = 0;
    else
      v45 = 6;
  }
  else
  {
    v60 = (std::runtime_error_vtbl *)v7;
    v61 = *(_QWORD *)(a1 + 960);
  }
  while (2)
  {
    v169 = *v58;
    v138 = *v59;
    v139 = (char *)*v5;
    if (*v5)
    {
      v140 = *(char **)(a1 + 688);
      v141 = *v5;
      if (v140 != v139)
      {
        do
        {
          v142 = v140 - 32;
          v143 = *((unsigned int *)v140 - 2);
          if ((_DWORD)v143 != -1)
            ((void (*)(uint64_t, char *))off_1E253D240[v143])(v170, v140 - 32);
          *((_DWORD *)v140 - 2) = -1;
          v140 -= 32;
        }
        while (v142 != v139);
        v141 = *v161;
      }
      *(_QWORD *)(a1 + 688) = v139;
      operator delete(v141);
    }
    v144 = (void (***)(uint64_t))(a1 + 24);
    v145 = (_QWORD *)(a1 + 192);
    v146 = (_QWORD *)(a1 + 184);
    v166 = (_OWORD *)(a1 + 40);
    v167 = a1 + 64;
    v147 = (_OWORD *)(a1 + 168);
    v148 = (_QWORD *)(a1 + 208);
    while (1)
    {
      while (1)
      {
        std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v171);
        if (v45)
        {
          if (v45 != 6)
            goto LABEL_146;
          if (v61 > 0x31 || (v63 = *(_QWORD *)(a1 + 952) + 16, v63 == *(_QWORD *)(a1 + 944)))
          {
LABEL_134:
            if (*(_BYTE *)(a1 + 104) && !*(_BYTE *)(a1 + 96))
              (**v144)(a1 + 24);
            *(_BYTE *)(a1 + 96) = 1;
            *(_BYTE *)(a1 + 104) = 1;
            goto LABEL_146;
          }
          *(_QWORD *)(a1 + 952) = v63;
        }
        else if (++v61 >= 0x32)
        {
          goto LABEL_134;
        }
        *(_QWORD *)(a1 + 976) = v138;
        *(_QWORD *)(a1 + 968) = v169;
        *(_QWORD *)(a1 + 960) = v61;
        v64 = atomic_load(*(unsigned __int8 **)(a1 + 912));
        if ((v64 & 1) != 0)
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>((uint64_t)&v172, 1u);
          if (*(_BYTE *)(a1 + 104))
          {
            if (!*(_BYTE *)(a1 + 96))
              (**v144)(a1 + 24);
            *(_BYTE *)(a1 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v172);
          *v166 = v173;
          *(_QWORD *)(a1 + 24) = v60;
          v77 = v175;
          *(_QWORD *)(a1 + 56) = v174;
          *(_QWORD *)(a1 + 64) = v77;
          v78 = v176;
          *(_QWORD *)(a1 + 72) = v176;
          if (v78)
          {
            *(_QWORD *)(v77 + 16) = v167;
            v174 = &v175;
            v175 = 0;
            v176 = 0;
            v77 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 56) = v167;
          }
          *(_OWORD *)(a1 + 80) = v177;
          v177 = 0uLL;
          *(_BYTE *)(a1 + 96) = 0;
          *(_BYTE *)(a1 + 104) = 1;
          v172.__vftable = v60;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v174, (unsigned int *)v77);
          MEMORY[0x18D7898AC](&v172);
LABEL_146:
          v79 = *(void (***)(unint64_t))(a1 + 392);
          if (*(_BYTE *)(a1 + 464))
          {
            if (v79)
            {
              *(_QWORD *)(a1 + 400) = v79;
              operator delete(v79);
            }
          }
          else
          {
            (*v79)(v158);
          }
          *(_QWORD *)(a1 + 152) = v160;
          *(_QWORD *)a1 = 0;
          AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v170);
          return;
        }
        v2 = (std::runtime_error *)v170;
        (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 864) + 56))(*(_QWORD *)(a1 + 864), v168, **(_QWORD **)(a1 + 952), *(_QWORD *)(*(_QWORD *)(a1 + 952) + 8), 500);
        if (!*(_BYTE *)(a1 + 384))
        {
          *v165 = 999;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[24]>(v170, v171, v165);
          goto LABEL_122;
        }
        v65 = atomic_load(*(unsigned __int8 **)(a1 + 912));
        if ((v65 & 1) == 0)
          break;
        *v165 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>(v170, 1u);
LABEL_122:
        if (*(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(a1 + 96))
            (**v144)(a1 + 24);
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v170);
        *v166 = *v147;
        *(_QWORD *)(a1 + 24) = v60;
        v62 = *(_QWORD *)(a1 + 192);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 184);
        *(_QWORD *)(a1 + 64) = v62;
        v73 = *(_QWORD *)(a1 + 200);
        *(_QWORD *)(a1 + 72) = v73;
        if (v73)
        {
          *(_QWORD *)(v62 + 16) = v167;
          v62 = 0;
          *v146 = v145;
          *v145 = 0;
          *(_QWORD *)(a1 + 200) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v167;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 208);
        *v148 = 0;
        *(_QWORD *)(a1 + 216) = 0;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)(a1 + 152) = v60;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 184, (unsigned int *)v62);
        MEMORY[0x18D7898AC](v170);
        v45 = 3;
      }
      if (!*(_BYTE *)(a1 + 384))
        goto LABEL_247;
      v67 = *(_QWORD *)(a1 + 328);
      v66 = *(_QWORD *)(a1 + 336);
      *(_QWORD *)(a1 + 984) = v66;
      *(_QWORD *)(a1 + 992) = v67;
      if (v66 != v67)
        break;
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault((_QWORD *)v170);
      AMSCore::Logger::log<char [33]>(*(_QWORD *)v170);
      v68 = *(std::__shared_weak_count **)(a1 + 160);
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      LOBYTE(v71) = 1;
      *(_BYTE *)(a1 + 224) = 1;
      if (*(_BYTE *)(a1 + 104))
        v72 = *(_BYTE *)(a1 + 96) == 0;
      else
        v72 = 0;
      if (v72
        && ((**(void (***)(uint64_t))(a1 + 24))(a1 + 24),
            v71 = *(unsigned __int8 *)(a1 + 224),
            *(_BYTE *)(a1 + 104) = 0,
            !v71))
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v170);
        *v166 = *v147;
        *(_QWORD *)(a1 + 24) = v60;
        v74 = *(_QWORD *)(a1 + 192);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 184);
        *(_QWORD *)(a1 + 64) = v74;
        v75 = *(_QWORD *)(a1 + 200);
        *(_QWORD *)(a1 + 72) = v75;
        if (v75)
        {
          *(_QWORD *)(v74 + 16) = v167;
          *v146 = v145;
          *v145 = 0;
          *(_QWORD *)(a1 + 200) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v167;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 208);
        *v148 = 0;
        *(_QWORD *)(a1 + 216) = 0;
        v76 = *(unsigned __int8 *)(a1 + 224);
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v45 = 3;
        if (!v76)
          (**(void (***)(uint64_t))v170)(v170);
      }
      else
      {
        *(_BYTE *)(a1 + 96) = v71;
        *(_BYTE *)(a1 + 104) = 1;
        v45 = 3;
      }
    }
    v80 = *(_QWORD *)(a1 + 872);
    v81 = *(_QWORD *)(a1 + 864);
    *(_QWORD *)(a1 + 704) = v67;
    *(_QWORD *)(a1 + 712) = v66;
    *(_QWORD *)(a1 + 720) = *(_QWORD *)(a1 + 344);
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 800) = v81;
    *(_QWORD *)(a1 + 808) = v80;
    if (v80)
    {
      v82 = (unint64_t *)(v80 + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v84 = *(_QWORD *)(a1 + 936);
    *(_QWORD *)(a1 + 848) = *(_QWORD *)(a1 + 928);
    *(_QWORD *)(a1 + 856) = v84;
    v5 = v161;
    v7 = (void (**)(AMSCore::Error *__hidden))v60;
    v3 = (std::runtime_error *)v165;
    v6 = v157;
    if (v84)
    {
      v85 = (unint64_t *)(v84 + 8);
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    v4 = (std::system_error *)v151;
    v87 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(v159 + 400) = v87;
    *(_QWORD *)v170 = 0;
    *(_QWORD *)(v170 + 8) = 0;
    if (atomic_load((unint64_t *)(v87 + 40)))
      goto LABEL_163;
    *v152 = 0;
    v89 = (unint64_t *)(*(_QWORD *)(a1 + 1000) + 40);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(a1, v89));
    if (v90)
    {
LABEL_163:
      v91 = *(_QWORD *)(a1 + 1000);
      if (!*(_BYTE *)(v91 + 32))
        goto LABEL_247;
      *(_OWORD *)v5 = *(_OWORD *)(v91 + 8);
      *(_QWORD *)(a1 + 696) = *(_QWORD *)(v91 + 24);
      *(_QWORD *)(v91 + 8) = 0;
      *(_QWORD *)(v91 + 16) = 0;
      *(_QWORD *)(v91 + 24) = 0;
      v92 = *(_QWORD *)(a1 + 1008);
      if (v92)
      {
        v93 = (unint64_t *)(v92 + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          v95 = *(std::__shared_weak_count **)(a1 + 1008);
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v96 = *(std::__shared_weak_count **)(a1 + 160);
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v99 = *(std::__shared_weak_count **)(a1 + 856);
      if (v99)
      {
        v100 = (unint64_t *)&v99->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = *(std::__shared_weak_count **)(a1 + 808);
      if (v102)
      {
        v103 = (unint64_t *)&v102->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = *v164;
      if (*v164)
      {
        v106 = *(_QWORD *)(a1 + 712);
        v107 = (void *)*v164;
        if (v106 == v105)
        {
LABEL_196:
          *(_QWORD *)(a1 + 712) = v105;
          operator delete(v107);
          goto LABEL_197;
        }
        while (2)
        {
          if (*(char *)(v106 - 17) < 0)
          {
            operator delete(*(void **)(v106 - 40));
            if (*(char *)(v106 - 41) < 0)
              goto LABEL_187;
          }
          else if (*(char *)(v106 - 41) < 0)
          {
LABEL_187:
            operator delete(*(void **)(v106 - 64));
            if ((*(char *)(v106 - 65) & 0x80000000) == 0)
              goto LABEL_188;
LABEL_194:
            operator delete(*(void **)(v106 - 88));
LABEL_188:
            v106 -= 88;
            if (v106 == v105)
            {
              v107 = (void *)*v164;
              goto LABEL_196;
            }
            continue;
          }
          break;
        }
        if (*(char *)(v106 - 65) < 0)
          goto LABEL_194;
        goto LABEL_188;
      }
LABEL_197:
      if (*(_QWORD *)(a1 + 680) == *(_QWORD *)(a1 + 688))
      {
        v59 = (uint64_t *)(a1 + 976);
        v58 = (uint64_t *)(a1 + 968);
        goto LABEL_204;
      }
      v108 = atomic_load(*(unsigned __int8 **)(a1 + 912));
      if ((v108 & 1) != 0)
      {
        LODWORD(v3->__vftable) = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>((uint64_t)v2, 1u);
        if (*(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(a1 + 96))
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v2);
        v115 = (_QWORD *)(a1 + 192);
        v114 = *(_QWORD *)(a1 + 192);
        *(_QWORD *)(a1 + 64) = v114;
        v116 = a1 + 64;
        v117 = (_QWORD *)(a1 + 184);
        v118 = *(_QWORD *)(a1 + 184);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 56) = v118;
        v119 = *(_QWORD *)(a1 + 200);
        *(_QWORD *)(a1 + 72) = v119;
        if (v119)
        {
          *(_QWORD *)(v114 + 16) = v116;
          v114 = 0;
          *v117 = v115;
          *v115 = 0;
          *(_QWORD *)(a1 + 200) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v116;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v60 = (std::runtime_error_vtbl *)v7;
        *(_QWORD *)(a1 + 152) = v7;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v117, (unsigned int *)v114);
        MEMORY[0x18D7898AC](v2);
        v59 = (uint64_t *)(a1 + 976);
        v58 = (uint64_t *)(a1 + 968);
        v61 = *(_QWORD *)(a1 + 960);
        v45 = 3;
        continue;
      }
      v109 = *(_QWORD *)(a1 + 952);
      v110 = *(unsigned __int8 *)(v109 + 8);
      if (!*(_BYTE *)(v109 + 8))
        v109 = a1 + 976;
      v111 = v110 | ((unint64_t)*(unsigned int *)(a1 + 972) << 32);
      v112 = *(_QWORD *)v109;
      *(_QWORD *)(a1 + 1024) = v111;
      *(_QWORD *)(a1 + 1016) = v112;
      if (*(char *)(a1 + 751) < 0)
      {
        std::string::__init_copy_ctor_external(v162, *(const std::string::value_type **)(a1 + 728), *(_QWORD *)(a1 + 736));
      }
      else
      {
        *(_OWORD *)&v162->__r_.__value_.__l.__data_ = *(_OWORD *)v168;
        v162->__r_.__value_.__r.__words[2] = *(_QWORD *)(v168 + 16);
      }
      v120 = *(_QWORD *)(a1 + 888);
      v121 = *(_QWORD *)(a1 + 880);
      *(_OWORD *)(a1 + 752) = *(_OWORD *)v5;
      *(_QWORD *)(a1 + 768) = *(_QWORD *)(a1 + 696);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = 0;
      *(_QWORD *)(a1 + 616) = v121;
      *(_QWORD *)(a1 + 624) = v120;
      if (v120)
      {
        v122 = (unint64_t *)(v120 + 8);
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      v124 = *(_QWORD *)(a1 + 904);
      *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 896);
      *(_QWORD *)(a1 + 640) = v124;
      if (v124)
      {
        v125 = (unint64_t *)(v124 + 8);
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      v127 = *(_QWORD *)(a1 + 920);
      *(_QWORD *)(a1 + 816) = *(_QWORD *)(a1 + 912);
      *(_QWORD *)(a1 + 824) = v127;
      if (v127)
      {
        v128 = (unint64_t *)(v127 + 8);
        do
          v129 = __ldxr(v128);
        while (__stxr(v129 + 1, v128));
      }
      v130 = *(_QWORD *)(a1 + 936);
      *(_QWORD *)(a1 + 832) = *(_QWORD *)(a1 + 928);
      *(_QWORD *)(a1 + 840) = v130;
      if (v130)
      {
        v131 = (unint64_t *)(v130 + 8);
        do
          v132 = __ldxr(v131);
        while (__stxr(v132 + 1, v131));
      }
      *(_QWORD *)(a1 + 472) = v112;
      *(_QWORD *)(a1 + 480) = v111;
      v133 = *(_QWORD *)(a1 + 672);
      if (!v133)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t, std::string *, void **, unint64_t, std::system_error *, unint64_t, unint64_t))(*(_QWORD *)v133 + 48))(v133, v162, v6, v156, v4, v155, v154);
      v134 = *(_OWORD *)(a1 + 232);
      *(_OWORD *)(v159 + 432) = v134;
      v3->__vftable = 0;
      v3->__imp_.__imp_ = 0;
      if (atomic_load((unint64_t *)(v134 + 96)))
        goto LABEL_2;
      *v152 = 1;
      v136 = (unint64_t *)(*(_QWORD *)(a1 + 1032) + 96);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(a1, v136));
      if (v137)
        goto LABEL_2;
    }
    break;
  }
}

void sub_18CCA547C()
{
  uint64_t v0;
  void **v1;

  std::vector<AMSCore::Any>::~vector[abi:fe180100](v1);
  std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](*(_QWORD *)(v0 - 168));
  JUMPOUT(0x18CCA5528);
}

void sub_18CCA54F8()
{
  uint64_t v0;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](*(_QWORD *)(v0 - 176));
  std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](*(_QWORD *)(v0 - 168));
  JUMPOUT(0x18CCA5528);
}

void sub_18CCA5508()
{
  JUMPOUT(0x18CCA5510);
}

void sub_18CCA5540()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCA4C70);
}

void AMSCore::MetricsFlushTask::internal::perform(char *__p)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (**v47)(char *);
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;

  v2 = __p + 152;
  if (!*(_QWORD *)__p)
    goto LABEL_91;
  if (!__p[1052])
  {
    v27 = *((_QWORD *)__p + 126);
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        v30 = (std::__shared_weak_count *)*((_QWORD *)__p + 126);
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)__p + 107);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = (std::__shared_weak_count *)*((_QWORD *)__p + 101);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = *((_QWORD *)__p + 88);
    if (!v40)
      goto LABEL_87;
    v41 = *((_QWORD *)__p + 89);
    v42 = (char *)*((_QWORD *)__p + 88);
    if (v41 == v40)
    {
LABEL_85:
      *((_QWORD *)__p + 89) = v40;
LABEL_86:
      operator delete(v42);
      goto LABEL_87;
    }
    while (1)
    {
      if (*(char *)(v41 - 17) < 0)
      {
        operator delete(*(void **)(v41 - 40));
        if ((*(char *)(v41 - 41) & 0x80000000) == 0)
        {
LABEL_64:
          if (*(char *)(v41 - 65) < 0)
            goto LABEL_68;
          goto LABEL_61;
        }
      }
      else if ((*(char *)(v41 - 41) & 0x80000000) == 0)
      {
        goto LABEL_64;
      }
      operator delete(*(void **)(v41 - 64));
      if (*(char *)(v41 - 65) < 0)
LABEL_68:
        operator delete(*(void **)(v41 - 88));
LABEL_61:
      v41 -= 88;
      if (v41 == v40)
      {
        v42 = (char *)*((_QWORD *)__p + 88);
        goto LABEL_85;
      }
    }
  }
  v3 = *((_QWORD *)__p + 130);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 130);
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)__p + 30);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 105);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 103);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 80);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 78);
  if (!v19)
    goto LABEL_32;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = (char *)*((_QWORD *)__p + 94);
    if (!v22)
      goto LABEL_71;
  }
  else
  {
LABEL_32:
    v22 = (char *)*((_QWORD *)__p + 94);
    if (!v22)
      goto LABEL_71;
  }
  v23 = (char *)*((_QWORD *)__p + 95);
  v24 = v22;
  if (v23 != v22)
  {
    do
    {
      v25 = v23 - 32;
      v26 = *((unsigned int *)v23 - 2);
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, char *))off_1E253D240[v26])(__p + 472, v23 - 32);
      *((_DWORD *)v23 - 2) = -1;
      v23 -= 32;
    }
    while (v25 != v22);
    v24 = (char *)*((_QWORD *)__p + 94);
  }
  *((_QWORD *)__p + 95) = v22;
  operator delete(v24);
LABEL_71:
  if (__p[799] < 0)
  {
    operator delete(*((void **)__p + 97));
    v43 = (char *)*((_QWORD *)__p + 85);
    if (!v43)
      goto LABEL_87;
    goto LABEL_75;
  }
  v43 = (char *)*((_QWORD *)__p + 85);
  if (v43)
  {
LABEL_75:
    v44 = (char *)*((_QWORD *)__p + 86);
    v42 = v43;
    if (v44 != v43)
    {
      do
      {
        v45 = v44 - 32;
        v46 = *((unsigned int *)v44 - 2);
        if ((_DWORD)v46 != -1)
          ((void (*)(char *, char *))off_1E253D240[v46])(v2, v44 - 32);
        *((_DWORD *)v44 - 2) = -1;
        v44 -= 32;
      }
      while (v45 != v43);
      v42 = (char *)*((_QWORD *)__p + 85);
    }
    *((_QWORD *)__p + 86) = v43;
    goto LABEL_86;
  }
LABEL_87:
  std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(__p + 312));
  v47 = (void (**)(char *))*((_QWORD *)__p + 49);
  if (__p[464])
  {
    if (v47)
    {
      *((_QWORD *)__p + 50) = v47;
      operator delete(v47);
    }
  }
  else
  {
    (*v47)(__p + 392);
  }
LABEL_91:
  v48 = (char *)*((_QWORD *)__p + 18);
  if (v48 == __p + 120)
  {
    v49 = 4;
    v48 = __p + 120;
    goto LABEL_95;
  }
  if (v48)
  {
    v49 = 5;
LABEL_95:
    (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
  }
  v50 = __p + 648;
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v51 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v52)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v53 = (_QWORD *)*((_QWORD *)__p + 84);
  if (v53 == v50)
  {
    v54 = 4;
    goto LABEL_106;
  }
  if (v53)
  {
    v54 = 5;
    v50 = (_QWORD *)*((_QWORD *)__p + 84);
LABEL_106:
    (*(void (**)(_QWORD *))(*v50 + 8 * v54))(v50);
  }
  v55 = *((_QWORD *)__p + 117);
  if (v55)
  {
    v56 = (unint64_t *)(v55 + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      v58 = (std::__shared_weak_count *)*((_QWORD *)__p + 117);
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v59 = *((_QWORD *)__p + 115);
  if (v59)
  {
    v60 = (unint64_t *)(v59 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      v62 = (std::__shared_weak_count *)*((_QWORD *)__p + 115);
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v63 = *((_QWORD *)__p + 113);
  if (v63)
  {
    v64 = (unint64_t *)(v63 + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      v66 = (std::__shared_weak_count *)*((_QWORD *)__p + 113);
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v67 = *((_QWORD *)__p + 111);
  if (v67)
  {
    v68 = (unint64_t *)(v67 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      v74 = (std::__shared_weak_count *)*((_QWORD *)__p + 111);
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
      if ((__p[751] & 0x80000000) == 0)
        goto LABEL_128;
      goto LABEL_127;
    }
  }
  if (__p[751] < 0)
LABEL_127:
    operator delete(*((void **)__p + 91));
LABEL_128:
  v70 = *((_QWORD *)__p + 109);
  if (v70)
  {
    v71 = (unint64_t *)(v70 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      v73 = (std::__shared_weak_count *)*((_QWORD *)__p + 109);
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string __what_arg;
  std::error_code v14;

  v3 = a2;
  AMSCore::StringUtils::join<char [20]>(&__what_arg, "flush task canceled");
  *(_QWORD *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v9 = &v10;
  v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v4 = v10;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = a1 + 40;
  v6 = v11;
  *(_QWORD *)(a1 + 48) = v11;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    v4 = 0;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x18D7898AC](&v8);
}

void sub_18CCA5C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[24]>(uint64_t a1, const std::runtime_error *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  std::runtime_error *v7;
  unsigned int *v8;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::runtime_error v19;
  std::runtime_error v20;
  unsigned int **v21;
  unsigned int *v22;
  std::runtime_error_vtbl *v23;
  __int128 v24;
  std::system_error v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::string __what_arg;
  std::error_code v31;

  AMSCore::Error::Error(&v19, a2);
  v5 = *a3;
  AMSCore::StringUtils::join<char [24]>(&__what_arg, "failed to lock database");
  *(_QWORD *)&v31.__val_ = v5;
  v31.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v25, v31, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v27 = 0;
  v28 = 0;
  v25.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v26 = &v27;
  v6 = operator new();
  v7 = std::runtime_error::runtime_error((std::runtime_error *)v6, &v19);
  v7[1] = v20;
  v7->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v8 = v22;
  v7[2].__vftable = (std::runtime_error_vtbl *)v21;
  v7[2].__imp_.__imp_ = (const char *)v8;
  p_imp = &v7[2].__imp_;
  v10 = v23;
  v7[3].__vftable = v23;
  if (v10)
  {
    *((_QWORD *)v8 + 2) = p_imp;
    v21 = &v22;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    *(_QWORD *)(v6 + 32) = p_imp;
  }
  *(_OWORD *)(v6 + 56) = v24;
  v24 = 0uLL;
  *(_QWORD *)&v29 = v6;
  v11 = (_QWORD *)operator new();
  *v11 = &off_1E2523B58;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v6;
  *((_QWORD *)&v29 + 1) = v11;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v25);
  *(std::error_code *)(a1 + 16) = v25.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v12 = v27;
  *(_QWORD *)(a1 + 32) = v26;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = a1 + 40;
  v14 = v28;
  *(_QWORD *)(a1 + 48) = v28;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = v13;
    v12 = 0;
    v26 = &v27;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v13;
  }
  *(_OWORD *)(a1 + 56) = v29;
  v29 = 0uLL;
  v25.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v12);
  MEMORY[0x18D7898AC](&v25);
  v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22);
  return MEMORY[0x18D7898AC](&v19);
}

void sub_18CCA5EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24)
{
  uint64_t v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v24, a24);
  MEMORY[0x18D7898AC](&a19);
  AMSCore::Error::~Error((AMSCore::Error *)&a10);
}

void sub_18CCA5F0C()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t AMSCore::Logger::log<char [33]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"no events to flush, closing task", 32);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "metrics", 7, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CCA6154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsFlushTask::`anonymous namespace'::convertToAnyVectorAndHandleSkips(_OWORD *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unsigned int v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  BOOL v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char v70;

  v8 = operator new(0x280uLL);
  v9 = (unint64_t)v8;
  v10 = v8 + 12;
  v11 = v8 + 48;
  v67 = (char *)(v8 + 58);
  v68 = (char *)(v8 + 61);
  v12 = (char *)(v8 + 66);
  v69 = (uint64_t)(v8 + 68);
  v66 = (char *)(v8 + 2);
  v14 = *a2;
  v13 = a2[1];
  v8[70] = *a2;
  v8[71] = v13;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v15 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v16 = *a4;
  *((_OWORD *)v8 + 36) = v15;
  *((_OWORD *)v8 + 37) = v16;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  do
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v17 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v8[7] = 0;
  *((_BYTE *)v8 + 24) = 0;
  *((_BYTE *)v8 + 48) = 0;
  v8[11] = 0;
  v18 = (_QWORD *)operator new();
  *v18 = &off_1E2523A40;
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = v66;
  *(_QWORD *)&v19 = v66;
  *((_QWORD *)&v19 + 1) = v18;
  *a1 = v19;
  *((_QWORD *)v68 + 1) = 0;
  *((_QWORD *)v68 + 2) = 0;
  *(_QWORD *)v68 = 0;
  std::vector<AMSCore::Any>::reserve((char **)v68, 0x2E8BA2E8BA2E8BA3 * ((v13 - v14) >> 3));
  if (v14 != v13)
  {
    v20 = (_QWORD *)(v9 + 392);
    do
    {
      *(_QWORD *)(v9 + 608) = v14;
      AMSCore::JsonData::decode((uint64_t *)(v14 + 48), (uint64_t)v11);
      if (*(_BYTE *)(v9 + 456))
      {
        if (*(_DWORD *)(v9 + 408) == 8)
        {
          v21 = (unint64_t *)operator new(0x30uLL);
          v21[1] = 0;
          v22 = v21 + 1;
          v21[2] = 0;
          v23 = *(_QWORD *)(v9 + 392);
          v21[3] = *(_QWORD *)(v9 + 384);
          v24 = v21 + 3;
          *v21 = (unint64_t)&off_1E2523068;
          v21[4] = v23;
          v25 = v21 + 4;
          v26 = *(_QWORD *)(v9 + 400);
          v21[5] = v26;
          if (v26)
          {
            *(_QWORD *)(v23 + 16) = v25;
            *v11 = v20;
            *v20 = 0;
            *(_QWORD *)(v9 + 400) = 0;
          }
          else
          {
            *v24 = v25;
          }
          v31 = *(_QWORD **)(v9 + 592);
          *(_QWORD *)(v9 + 512) = v24;
          *(_QWORD *)(v9 + 520) = v21;
          *(_QWORD *)(v9 + 544) = v24;
          *(_QWORD *)(v9 + 552) = v21;
          do
            v32 = __ldxr(v22);
          while (__stxr(v32 + 1, v22));
          AMSCore::MetricsEventModifierProvider::getOverrideForEvent(v12, v31, v69);
          v33 = *(_OWORD *)v12;
          *((_OWORD *)v68 + 8) = *(_OWORD *)v12;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          if (!atomic_load((unint64_t *)(v33 + 304)))
          {
            v68[144] = 0;
            v35 = (unint64_t *)(*((_QWORD *)v68 + 16) + 304);
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v9, v35));
            if (!v36)
              return;
          }
          AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume((uint64_t)v10, *(_QWORD *)(v9 + 616));
          v37 = *(_QWORD *)(v9 + 624);
          if (!v37)
            goto LABEL_31;
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            v43 = *(std::__shared_weak_count **)(v9 + 624);
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
            v40 = *(std::__shared_weak_count **)(v9 + 536);
            if (v40)
            {
LABEL_32:
              p_shared_owners = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(p_shared_owners);
              while (__stlxr(v42 - 1, p_shared_owners));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
          }
          else
          {
LABEL_31:
            v40 = *(std::__shared_weak_count **)(v9 + 536);
            if (v40)
              goto LABEL_32;
          }
          v44 = *(std::__shared_weak_count **)(v9 + 552);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          if (*(_BYTE *)(v9 + 121))
            v47 = *(_BYTE *)(v9 + 120) == 0;
          else
            v47 = 1;
          if (v47)
          {
            v48 = *(_QWORD **)(v9 + 512);
            v49 = *(_QWORD *)(v9 + 496);
            if (v49 >= *(_QWORD *)(v9 + 504))
            {
              v57 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>((char **)v68, v48);
            }
            else
            {
              *(_QWORD *)v49 = *v48;
              v50 = v48 + 1;
              v51 = v48[1];
              *(_QWORD *)(v49 + 8) = v51;
              v52 = v49 + 8;
              v53 = v48[2];
              *(_QWORD *)(v49 + 16) = v53;
              if (v53)
              {
                *(_QWORD *)(v51 + 16) = v52;
                *v48 = v50;
                *v50 = 0;
                v48[2] = 0;
              }
              else
              {
                *(_QWORD *)v49 = v52;
              }
              *(_DWORD *)(v49 + 24) = 8;
              v57 = (char *)(v49 + 32);
            }
            *(_QWORD *)(v9 + 496) = v57;
          }
          else
          {
            v54 = *(_QWORD *)(v9 + 608);
            v55 = *(_QWORD *)(v9 + 576);
            v56 = *(_QWORD *)(v54 + 40);
            *(_OWORD *)v67 = *(_OWORD *)(v54 + 24);
            *((_QWORD *)v67 + 2) = v56;
            *(_QWORD *)(v54 + 32) = 0;
            *(_QWORD *)(v54 + 40) = 0;
            *(_QWORD *)(v54 + 24) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 80))(v55);
            if (*(char *)(v9 + 487) < 0)
              operator delete(*(void **)v67);
          }
          if (*(_BYTE *)(v9 + 368))
            AMSCore::URL::~URL((AMSCore::URL *)(v9 + 216));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v9 + 184));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v9 + 160));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v9 + 136));
          v27 = *(std::__shared_weak_count **)(v9 + 520);
          if (!v27)
            goto LABEL_64;
          v58 = (unint64_t *)&v27->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (v59)
            goto LABEL_64;
LABEL_63:
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
          goto LABEL_64;
        }
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v10);
        AMSCore::Logger::log<char [25]>(*v10, 4, (uint64_t)"metrics", 7, "skipping malformed event");
        v27 = *(std::__shared_weak_count **)(v9 + 104);
        if (!v27)
          goto LABEL_64;
        v30 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v30);
        while (__stlxr(v29 - 1, v30));
      }
      else
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v10);
        AMSCore::Logger::log<char [30],AMSCore::Error>(*v10, 4, (uint64_t)"metrics", 7, "failed to deserialize event: ", (uint64_t)v11);
        v27 = *(std::__shared_weak_count **)(v9 + 104);
        if (!v27)
          goto LABEL_64;
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
      }
      if (!v29)
        goto LABEL_63;
LABEL_64:
      if (*(_BYTE *)(v9 + 456))
      {
        v60 = *(unsigned int *)(v9 + 408);
        if ((_DWORD)v60 != -1)
          ((void (*)(uint64_t *, _QWORD *))off_1E253D240[v60])(v10, v11);
      }
      else
      {
        (*(void (**)(_QWORD *))*v11)(v11);
      }
      v14 = *(_QWORD *)(v9 + 608) + 88;
    }
    while (v14 != *(_QWORD *)(v9 + 568));
  }
  if (*(_BYTE *)(v9 + 48))
  {
    v61 = *(_QWORD *)(v9 + 24);
    if (v61)
    {
      v62 = *(_QWORD *)(v9 + 32);
      v63 = *(void **)(v9 + 24);
      if (v62 != v61)
      {
        do
        {
          v64 = v62 - 32;
          v65 = *(unsigned int *)(v62 - 8);
          if ((_DWORD)v65 != -1)
            ((void (*)(char *, uint64_t))off_1E253D240[v65])(&v70, v62 - 32);
          *(_DWORD *)(v62 - 8) = -1;
          v62 -= 32;
        }
        while (v64 != v61);
        v63 = *(void **)(v9 + 24);
      }
      *(_QWORD *)(v9 + 32) = v61;
      operator delete(v63);
    }
  }
  *(_OWORD *)(v9 + 24) = *(_OWORD *)v68;
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v9 + 504);
  *(_BYTE *)(v9 + 48) = 1;
  *(_QWORD *)(v9 + 96) = v66;
  *(_QWORD *)v9 = 0;
  AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::Awaiter::await_suspend(v10);
}

void sub_18CCA6914(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15)
{
  AMSCore::MetricsEventModifier::EventModifier *v15;
  uint64_t v16;

  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v15);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a10);
  std::expected<AMSCore::Any,AMSCore::Error>::~expected[abi:fe180100](v16);
  std::vector<AMSCore::Any>::~vector[abi:fe180100](a14);
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[56],AMSCore::Error&>(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  std::runtime_error *v19;
  unsigned int *v20;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::runtime_error v31;
  std::runtime_error v32;
  unsigned int **v33;
  unsigned int *v34;
  std::runtime_error_vtbl *v35;
  __int128 v36;
  std::system_error v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  std::string __what_arg;
  uint64_t v43;
  _QWORD v44[8];
  __int128 __p;
  __int128 v46;
  int v47;
  uint64_t v48[20];
  std::error_code v49;

  std::runtime_error::runtime_error(&v31, (const std::runtime_error *)a2);
  v8 = (_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  v32 = *(std::runtime_error *)(a2 + 16);
  v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v33 = *(unsigned int ***)(a2 + 32);
  v34 = (unsigned int *)v9;
  v35 = *(std::runtime_error_vtbl **)(a2 + 48);
  if (v35)
  {
    *(_QWORD *)(v9 + 16) = &v34;
    *(_QWORD *)(a2 + 32) = v8;
    *v8 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v33 = &v34;
  }
  v36 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v10 = *a3;
  v11 = MEMORY[0x1E0DE4FE0];
  v12 = MEMORY[0x1E0DE4FE0] + 64;
  v13 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v48[0] = MEMORY[0x1E0DE4FE0] + 64;
  v43 = v14;
  *(_QWORD *)((char *)&v44[-1] + *(_QWORD *)(v14 - 24)) = v15;
  v16 = (std::ios_base *)((char *)&v44[-1] + *(_QWORD *)(v43 - 24));
  std::ios_base::init(v16, v44);
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  v43 = v11 + 24;
  v48[0] = v12;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x1E0DE4FB8];
  v44[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v46 = 0u;
  v47 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v43, (uint64_t)"failed to upload metrics. Db error after network fail: ", 55);
  AMSCore::operator<<(&v43, a4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v44, &__what_arg);
  v43 = *v13;
  *(_QWORD *)((char *)&v44[-1] + *(_QWORD *)(v43 - 24)) = v13[3];
  v44[0] = v17 + 16;
  if (SBYTE7(v46) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v48);
  *(_QWORD *)&v49.__val_ = v10;
  v49.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v37, v49, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v39 = 0;
  v40 = 0;
  v37.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v38 = &v39;
  v18 = operator new();
  v19 = std::runtime_error::runtime_error((std::runtime_error *)v18, &v31);
  v19[1] = v32;
  v19->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v20 = v34;
  v19[2].__vftable = (std::runtime_error_vtbl *)v33;
  v19[2].__imp_.__imp_ = (const char *)v20;
  p_imp = &v19[2].__imp_;
  v22 = v35;
  v19[3].__vftable = v35;
  if (v22)
  {
    *((_QWORD *)v20 + 2) = p_imp;
    v33 = &v34;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    *(_QWORD *)(v18 + 32) = p_imp;
  }
  *(_OWORD *)(v18 + 56) = v36;
  v36 = 0uLL;
  *(_QWORD *)&v41 = v18;
  v23 = (_QWORD *)operator new();
  *v23 = &off_1E2523B58;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v18;
  *((_QWORD *)&v41 + 1) = v23;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v37);
  *(std::error_code *)(a1 + 16) = v37.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v24 = v39;
  *(_QWORD *)(a1 + 32) = v38;
  *(_QWORD *)(a1 + 40) = v24;
  v25 = a1 + 40;
  v26 = v40;
  *(_QWORD *)(a1 + 48) = v40;
  if (v26)
  {
    *(_QWORD *)(v24 + 16) = v25;
    v24 = 0;
    v38 = &v39;
    v39 = 0;
    v40 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v25;
  }
  *(_OWORD *)(a1 + 56) = v41;
  v41 = 0uLL;
  v37.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, (unsigned int *)v24);
  MEMORY[0x18D7898AC](&v37);
  v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v33, v34);
  return MEMORY[0x18D7898AC](&v31);
}

void sub_18CCA6D64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v33, a24);
  MEMORY[0x18D7898AC](&a19);
  AMSCore::Error::~Error((AMSCore::Error *)&a10);
}

void sub_18CCA6DB4()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void sub_18CCA6DBC(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::runtime_error *v10;
  unsigned int *v11;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error v22;
  std::runtime_error v23;
  unsigned int **v24;
  unsigned int *v25;
  std::runtime_error_vtbl *v26;
  __int128 v27;
  std::system_error v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::string __what_arg;
  std::error_code v34;

  std::runtime_error::runtime_error(&v22, (const std::runtime_error *)a2);
  v6 = (_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  v23 = *(std::runtime_error *)(a2 + 16);
  v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v24 = *(unsigned int ***)(a2 + 32);
  v25 = (unsigned int *)v7;
  v26 = *(std::runtime_error_vtbl **)(a2 + 48);
  if (v26)
  {
    *(_QWORD *)(v7 + 16) = &v25;
    *(_QWORD *)(a2 + 32) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v24 = &v25;
  }
  v27 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v8 = *a3;
  AMSCore::StringUtils::join<char [25]>(&__what_arg, "failed to upload metrics");
  *(_QWORD *)&v34.__val_ = v8;
  v34.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v28, v34, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v30 = 0;
  v31 = 0;
  v28.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v29 = &v30;
  v9 = operator new();
  v10 = std::runtime_error::runtime_error((std::runtime_error *)v9, &v22);
  v10[1] = v23;
  v10->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v11 = v25;
  v10[2].__vftable = (std::runtime_error_vtbl *)v24;
  v10[2].__imp_.__imp_ = (const char *)v11;
  p_imp = &v10[2].__imp_;
  v13 = v26;
  v10[3].__vftable = v26;
  if (v13)
  {
    *((_QWORD *)v11 + 2) = p_imp;
    v24 = &v25;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    *(_QWORD *)(v9 + 32) = p_imp;
  }
  *(_OWORD *)(v9 + 56) = v27;
  v27 = 0uLL;
  *(_QWORD *)&v32 = v9;
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E2523B58;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v9;
  *((_QWORD *)&v32 + 1) = v14;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v28);
  *(std::error_code *)(a1 + 16) = v28.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v15 = v30;
  *(_QWORD *)(a1 + 32) = v29;
  *(_QWORD *)(a1 + 40) = v15;
  v16 = a1 + 40;
  v17 = v31;
  *(_QWORD *)(a1 + 48) = v31;
  if (v17)
  {
    *(_QWORD *)(v15 + 16) = v16;
    v15 = 0;
    v29 = &v30;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v16;
  }
  *(_OWORD *)(a1 + 56) = v32;
  v32 = 0uLL;
  v28.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v29, (unsigned int *)v15);
  MEMORY[0x18D7898AC](&v28);
  v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v25);
  return MEMORY[0x18D7898AC](&v22);
}

void sub_18CCA705C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24)
{
  uint64_t v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v24, a24);
  MEMORY[0x18D7898AC](&a19);
  AMSCore::Error::~Error((AMSCore::Error *)&a10);
}

void sub_18CCA70AC()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[35]>(uint64_t a1, const std::runtime_error *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::runtime_error v12[2];
  unsigned int *v13[4];
  std::__shared_weak_count *v14;
  std::runtime_error v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  AMSCore::Error::Error(v12, a2);
  AMSCore::Error::Error<char [35]>((uint64_t)&v15, (uint64_t)v12, *a3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance, "failed to get events from database");
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
  *(_OWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v5);
  MEMORY[0x18D7898AC](&v15);
  v12[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v13, v13[1]);
  return MEMORY[0x18D7898AC](v12);
}

void sub_18CCA71DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CCA71E8()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (!*(_BYTE *)(a1 + 72))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return;
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 == v2)
    {
LABEL_16:
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      if (*(char *)(v3 - 17) < 0)
      {
        operator delete(*(void **)(v3 - 40));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if (*(char *)(v3 - 65) < 0)
            goto LABEL_12;
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v3 - 64));
      if (*(char *)(v3 - 65) < 0)
LABEL_12:
        operator delete(*(void **)(v3 - 88));
LABEL_5:
      v3 -= 88;
      if (v3 == v2)
      {
        v4 = *(void **)(a1 + 16);
        goto LABEL_16;
      }
    }
  }
}

uint64_t std::expected<std::vector<std::optional<unsigned long long>>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  int v2;
  void (**v3)(uint64_t);

  v2 = *(unsigned __int8 *)(a1 + 72);
  v3 = *(void (***)(uint64_t))a1;
  if (v2)
  {
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  else
  {
    (*v3)(a1);
  }
  return a1;
}

uint64_t AMSCore::Error::Error<char [35]>(uint64_t a1, uint64_t a2, uint64_t a3, const std::error_category *a4, const char *a5)
{
  uint64_t v9;
  std::runtime_error *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v14;
  _QWORD *v15;
  std::string __what_arg;
  std::error_code v18;

  AMSCore::StringUtils::join<char [35]>(&__what_arg, a5);
  *(_QWORD *)&v18.__val_ = a3;
  v18.__cat_ = a4;
  std::system_error::system_error((std::system_error *)a1, v18, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1E2521330;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  v9 = operator new();
  v10 = std::runtime_error::runtime_error((std::runtime_error *)v9, (const std::runtime_error *)a2);
  v11 = (_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 40);
  v10[1] = *(std::runtime_error *)(a2 + 16);
  v10->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v10[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v10[2].__imp_.__imp_ = (const char *)v12;
  p_imp = &v10[2].__imp_;
  v14 = *(std::runtime_error_vtbl **)(a2 + 48);
  v10[3].__vftable = v14;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = p_imp;
    *(_QWORD *)(a2 + 32) = v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(v9 + 32) = p_imp;
  }
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v15 = (_QWORD *)operator new();
  *v15 = &off_1E2523B58;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v9;
  *(_QWORD *)(a1 + 64) = v15;
  return a1;
}

void sub_18CCA7440(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x18D7898AC](v1);
  _Unwind_Resume(a1);
}

void sub_18CCA7478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsFlushTask::`anonymous namespace'::convertToAnyVectorAndHandleSkips(unint64_t a1)
{
  uint64_t *v2;
  void (***v3)(_QWORD);
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  AMSCore::URL *v60;
  unint64_t v61;
  unint64_t v62;
  char v63;

  v2 = (uint64_t *)(a1 + 96);
  v3 = (void (***)(_QWORD))(a1 + 384);
  v61 = a1 + 464;
  v62 = a1 + 488;
  v4 = a1 + 528;
  v58 = a1 + 16;
  v59 = a1 + 544;
  v60 = (AMSCore::URL *)(a1 + 216);
  v57 = (_QWORD *)(a1 + 392);
  while (2)
  {
    while (2)
    {
      AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume((uint64_t)v2, *(_QWORD *)(a1 + 616));
      v5 = *(_QWORD *)(a1 + 624);
      if (!v5)
        goto LABEL_6;
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        v11 = *(std::__shared_weak_count **)(a1 + 624);
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        v8 = *(std::__shared_weak_count **)(a1 + 536);
        if (!v8)
          goto LABEL_12;
      }
      else
      {
LABEL_6:
        v8 = *(std::__shared_weak_count **)(a1 + 536);
        if (!v8)
          goto LABEL_12;
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_12:
      v12 = *(std::__shared_weak_count **)(a1 + 552);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (*(_BYTE *)(a1 + 121))
        v15 = *(_BYTE *)(a1 + 120) == 0;
      else
        v15 = 1;
      if (v15)
      {
        v16 = *(_QWORD **)(a1 + 512);
        v17 = *(_QWORD *)(a1 + 496);
        if (v17 >= *(_QWORD *)(a1 + 504))
        {
          v25 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>((char **)v62, v16);
        }
        else
        {
          *(_QWORD *)v17 = *v16;
          v18 = v16 + 1;
          v19 = v16[1];
          *(_QWORD *)(v17 + 8) = v19;
          v20 = v17 + 8;
          v21 = v16[2];
          *(_QWORD *)(v17 + 16) = v21;
          if (v21)
          {
            *(_QWORD *)(v19 + 16) = v20;
            *v16 = v18;
            *v18 = 0;
            v16[2] = 0;
          }
          else
          {
            *(_QWORD *)v17 = v20;
          }
          *(_DWORD *)(v17 + 24) = 8;
          v25 = (char *)(v17 + 32);
        }
        *(_QWORD *)(a1 + 496) = v25;
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 608);
        v23 = *(_QWORD *)(a1 + 576);
        v24 = *(_QWORD *)(v22 + 40);
        *(_OWORD *)v61 = *(_OWORD *)(v22 + 24);
        *(_QWORD *)(v61 + 16) = v24;
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 24) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 80))(v23);
        if (*(char *)(a1 + 487) < 0)
          operator delete(*(void **)v61);
      }
      if (*(_BYTE *)(a1 + 368))
        AMSCore::URL::~URL(v60);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 184));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 160));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 136));
      v26 = *(std::__shared_weak_count **)(a1 + 520);
      if (!v26)
        goto LABEL_38;
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (v28)
      {
LABEL_38:
        if (!*(_BYTE *)(a1 + 456))
          goto LABEL_71;
LABEL_39:
        v29 = *(unsigned int *)(a1 + 408);
        if ((_DWORD)v29 != -1)
          ((void (*)(uint64_t *, void (***)(_QWORD)))off_1E253D240[v29])(v2, v3);
        goto LABEL_41;
      }
      while (1)
      {
LABEL_70:
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        if (*(_BYTE *)(a1 + 456))
          goto LABEL_39;
LABEL_71:
        (**v3)(v3);
LABEL_41:
        v30 = *(_QWORD *)(a1 + 608);
        if (v30 + 88 == *(_QWORD *)(a1 + 568))
          goto LABEL_80;
        *(_QWORD *)(a1 + 608) = v30 + 88;
        AMSCore::JsonData::decode((uint64_t *)(v30 + 136), (uint64_t)v3);
        if (*(_BYTE *)(a1 + 456))
          break;
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
        AMSCore::Logger::log<char [30],AMSCore::Error>(*v2, 4, (uint64_t)"metrics", 7, "failed to deserialize event: ", (uint64_t)v3);
        v26 = *(std::__shared_weak_count **)(a1 + 104);
        if (!v26)
          goto LABEL_54;
        v37 = (unint64_t *)&v26->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
LABEL_53:
        if (v38)
        {
          while (1)
          {
LABEL_54:
            if (*(_BYTE *)(a1 + 456))
            {
              v40 = *(unsigned int *)(a1 + 408);
              if ((_DWORD)v40 != -1)
                ((void (*)(uint64_t *, void (***)(_QWORD)))off_1E253D240[v40])(v2, v3);
            }
            else
            {
              (**v3)(v3);
            }
            v41 = *(_QWORD *)(a1 + 608);
            if (v41 + 88 == *(_QWORD *)(a1 + 568))
              break;
            *(_QWORD *)(a1 + 608) = v41 + 88;
            AMSCore::JsonData::decode((uint64_t *)(v41 + 136), (uint64_t)v3);
            if (*(_BYTE *)(a1 + 456))
            {
              if (*(_DWORD *)(a1 + 408) == 8)
                goto LABEL_44;
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
              AMSCore::Logger::log<char [25]>(*v2, 4, (uint64_t)"metrics", 7, "skipping malformed event");
              v26 = *(std::__shared_weak_count **)(a1 + 104);
              if (v26)
              {
                v42 = (unint64_t *)&v26->__shared_owners_;
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                if (!v43)
                  goto LABEL_70;
              }
            }
            else
            {
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
              AMSCore::Logger::log<char [30],AMSCore::Error>(*v2, 4, (uint64_t)"metrics", 7, "failed to deserialize event: ", (uint64_t)v3);
              v26 = *(std::__shared_weak_count **)(a1 + 104);
              if (v26)
              {
                v44 = (unint64_t *)&v26->__shared_owners_;
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                  goto LABEL_70;
              }
            }
          }
LABEL_80:
          if (*(_BYTE *)(a1 + 48))
          {
            v52 = *(_QWORD *)(a1 + 24);
            if (v52)
            {
              v53 = *(_QWORD *)(a1 + 32);
              v54 = *(void **)(a1 + 24);
              if (v53 != v52)
              {
                do
                {
                  v55 = v53 - 32;
                  v56 = *(unsigned int *)(v53 - 8);
                  if ((_DWORD)v56 != -1)
                    ((void (*)(char *, uint64_t))off_1E253D240[v56])(&v63, v53 - 32);
                  *(_DWORD *)(v53 - 8) = -1;
                  v53 -= 32;
                }
                while (v55 != v52);
                v54 = *(void **)(a1 + 24);
              }
              *(_QWORD *)(a1 + 32) = v52;
              operator delete(v54);
            }
          }
          *(_OWORD *)(a1 + 24) = *(_OWORD *)v62;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 504);
          *(_BYTE *)(a1 + 48) = 1;
          *(_QWORD *)(a1 + 96) = v58;
          *(_QWORD *)a1 = 0;
          AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::Awaiter::await_suspend(v2);
          return;
        }
      }
      if (*(_DWORD *)(a1 + 408) != 8)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
        AMSCore::Logger::log<char [25]>(*v2, 4, (uint64_t)"metrics", 7, "skipping malformed event");
        v26 = *(std::__shared_weak_count **)(a1 + 104);
        if (!v26)
          goto LABEL_54;
        v39 = (unint64_t *)&v26->__shared_owners_;
        do
          v38 = __ldaxr(v39);
        while (__stlxr(v38 - 1, v39));
        goto LABEL_53;
      }
LABEL_44:
      v31 = (unint64_t *)operator new(0x30uLL);
      v31[1] = 0;
      v32 = v31 + 1;
      v31[2] = 0;
      v33 = *(_QWORD *)(a1 + 392);
      v31[3] = *(_QWORD *)(a1 + 384);
      v34 = v31 + 3;
      *v31 = (unint64_t)&off_1E2523068;
      v31[4] = v33;
      v35 = v31 + 4;
      v36 = *(_QWORD *)(a1 + 400);
      v31[5] = v36;
      if (v36)
      {
        *(_QWORD *)(v33 + 16) = v35;
        *v3 = (void (**)(_QWORD))v57;
        *v57 = 0;
        v57[1] = 0;
      }
      else
      {
        *v34 = v35;
      }
      v46 = *(_QWORD **)(a1 + 592);
      *(_QWORD *)(a1 + 512) = v34;
      *(_QWORD *)(a1 + 520) = v31;
      *(_QWORD *)(a1 + 544) = v34;
      *(_QWORD *)(a1 + 552) = v31;
      do
        v47 = __ldxr(v32);
      while (__stxr(v47 + 1, v32));
      AMSCore::MetricsEventModifierProvider::getOverrideForEvent((_OWORD *)v4, v46, v59);
      v48 = *(_OWORD *)v4;
      *(_OWORD *)(v62 + 128) = *(_OWORD *)v4;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if (atomic_load((unint64_t *)(v48 + 304)))
        continue;
      break;
    }
    *(_BYTE *)(v62 + 144) = 0;
    v50 = (unint64_t *)(*(_QWORD *)(v62 + 128) + 304);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(a1, v50));
    if (v51)
      continue;
    break;
  }
}

void sub_18CCA7C18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  AMSCore::MetricsEventModifier::EventModifier *v15;
  uint64_t v16;

  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v15);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a9);
  std::expected<AMSCore::Any,AMSCore::Error>::~expected[abi:fe180100](v16);
  std::vector<AMSCore::Any>::~vector[abi:fe180100](a15);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsFlushTask::`anonymous namespace'::convertToAnyVectorAndHandleSkips(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***v16)(uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void **i;
  char v32;

  v2 = (uint64_t)(a1 + 16);
  if (!*(_QWORD *)a1)
    goto LABEL_35;
  v3 = *((_QWORD *)a1 + 78);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 78);
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 67);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 69);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 65);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (void (***)(uint64_t))(a1 + 384);
  if (!a1[456])
  {
    (**v16)((uint64_t)(a1 + 384));
    v18 = (char *)*((_QWORD *)a1 + 61);
    if (!v18)
      goto LABEL_35;
    goto LABEL_28;
  }
  v17 = *((unsigned int *)a1 + 102);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, void (***)(uint64_t)))off_1E253D240[v17])(a1 + 96, v16);
  v18 = (char *)*((_QWORD *)a1 + 61);
  if (v18)
  {
LABEL_28:
    v19 = (char *)*((_QWORD *)a1 + 62);
    v20 = v18;
    if (v19 != v18)
    {
      do
      {
        v21 = v19 - 32;
        v22 = *((unsigned int *)v19 - 2);
        if ((_DWORD)v22 != -1)
          ((void (*)(char *, char *))off_1E253D240[v22])(&v32, v19 - 32);
        *((_DWORD *)v19 - 2) = -1;
        v19 -= 32;
      }
      while (v21 != v18);
      v20 = (char *)*((_QWORD *)a1 + 61);
    }
    *((_QWORD *)a1 + 62) = v18;
    operator delete(v20);
  }
LABEL_35:
  v23 = *((_QWORD *)a1 + 75);
  AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::~Promise(v2);
  if (v23)
  {
    v24 = (unint64_t *)(*((_QWORD *)a1 + 75) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      v26 = (std::__shared_weak_count *)*((_QWORD *)a1 + 75);
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v27 = *((_QWORD *)a1 + 73);
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      v30 = (std::__shared_weak_count *)*((_QWORD *)a1 + 73);
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  i = (void **)*((_QWORD *)a1 + 70);
  if (i)
  {
    if (i != *((void ***)a1 + 71))
    {
      for (i = (void **)*((_QWORD *)a1 + 71); i != *((void ***)a1 + 70); i -= 11)
      {
        if (*((char *)i - 17) < 0)
        {
          operator delete(*(i - 5));
          if ((*((char *)i - 41) & 0x80000000) == 0)
          {
LABEL_51:
            if (*((char *)i - 65) < 0)
              goto LABEL_55;
            continue;
          }
        }
        else if ((*((char *)i - 41) & 0x80000000) == 0)
        {
          goto LABEL_51;
        }
        operator delete(*(i - 8));
        if (*((char *)i - 65) < 0)
LABEL_55:
          operator delete(*(i - 11));
      }
    }
    operator delete(i);
  }
  operator delete(a1);
}

_BYTE *AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v1 = result;
  v17 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 40);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 72);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 48))
      {
        v16 = v15;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v15);
      }
      else
      {
        v16 = *(_BYTE **)(*(_QWORD *)v1 + 72);
        *v4 = 0;
      }
    }
    else
    {
      v16 = 0;
    }
    if (v16)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 32))
      {
        __break(1u);
        return result;
      }
      *(_OWORD *)__p = *(_OWORD *)(v5 + 8);
      v13 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      if (!v16)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, void **))(*(_QWORD *)v16 + 48))(v16, __p);
      v6 = (char *)__p[0];
      if (__p[0])
      {
        v7 = (char *)__p[1];
        v8 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v9 = v7 - 32;
            v10 = *((unsigned int *)v7 - 2);
            if ((_DWORD)v10 != -1)
              ((void (*)(char *, char *))off_1E253D240[v10])(&v14, v7 - 32);
            *((_DWORD *)v7 - 2) = -1;
            v7 -= 32;
          }
          while (v9 != v6);
          v8 = __p[0];
        }
        __p[1] = v6;
        operator delete(v8);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v16;
    if (v16 == v15)
    {
      v11 = 4;
      result = v15;
    }
    else
    {
      if (!v16)
        return result;
      v11 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
  }
  return result;
}

void sub_18CCA8168(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::~Promise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v13;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(void **)(a1 + 8);
      if (v6 != v5)
      {
        do
        {
          v8 = v6 - 32;
          v9 = *(unsigned int *)(v6 - 8);
          if ((_DWORD)v9 != -1)
            ((void (*)(char *, uint64_t))off_1E253D240[v9])(&v13, v6 - 32);
          *(_DWORD *)(v6 - 8) = -1;
          v6 -= 32;
        }
        while (v8 != v5);
        v7 = *(void **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 16) = v5;
      operator delete(v7);
    }
  }
  do
  {
    v10 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v11)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise *,AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise *,AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 40);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise *,AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__16vectorINS_3AnyENS1_9allocatorIS3_EEEEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS_3AnyENS1_9allocatorIS3_EEEEvE7Promise17get_return_obje"
                                "ctEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__16vectorINS_3AnyENS1_9allocatorIS3_EEEEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS_3AnyENS1_9allocatorIS3_EEEEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::MetricsFlushTask::perform(__n128 *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, std::runtime_error *a6@<X8>)
{
  __n128 v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  std::runtime_error *v13;
  const std::runtime_error *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  unsigned int v18;
  std::runtime_error *v19;
  std::runtime_error_vtbl *v20;
  uint64_t v21;
  std::system_error_vtbl *v22;
  uint64_t v23;
  uint64_t v24;
  std::system_error_vtbl *v25;
  std::system_error_vtbl *v26;
  std::ios_base *v27;
  uint64_t v28;
  void (__cdecl *v29)(std::system_error *__hidden);
  unsigned __int8 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  std::runtime_error_vtbl *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *imp;
  __n128 v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::runtime_error v56;
  unint64_t *p_what;
  unint64_t v59;
  std::runtime_error_vtbl *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  int v83;
  _QWORD *v84;
  _QWORD *v85;
  unsigned __int8 v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  std::runtime_error v107;
  unint64_t *v109;
  unint64_t v110;
  std::runtime_error_vtbl *v111;
  const std::runtime_error *v112;
  char v113;
  std::runtime_error_vtbl *v114;
  void (__cdecl *v115)(std::runtime_error *__hidden);
  void (__cdecl *v116)(std::runtime_error *__hidden);
  uint64_t v117;
  uint64_t v118;
  std::runtime_error_vtbl *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  std::runtime_error *v156;
  char *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  std::runtime_error *v165;
  unsigned int *v166;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v168;
  _QWORD *v169;
  unsigned int *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  unint64_t v176;
  std::runtime_error_vtbl *v177;
  std::system_error *v178;
  uint64_t v179;
  std::runtime_error_vtbl *v180;
  std::error_code v181;
  uint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  std::runtime_error_vtbl *v185;
  void (**v186)(AMSCore::Error *);
  _QWORD *v187;
  uint64_t v188;
  int v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  unsigned int ***v195;
  unsigned int **v196;
  unsigned int *v197;
  std::string::size_type *v198;
  char *v199;
  char *v200;
  char *v201;
  unsigned int *v202;
  _BYTE *v203;
  std::string *v204;
  void **v205;
  __int128 *v206;
  __int128 *v207;
  std::runtime_error *v208;
  _QWORD *v209;
  const std::runtime_error *v210;
  uint64_t *v211;
  uint64_t v212;
  char *v213;
  AMSCore::Error *v214;
  _QWORD *v215;
  std::error_code *v216;
  __int128 v217;
  std::error_code *v218;
  __int128 v219;
  unint64_t v220;
  std::system_error *v221;
  std::runtime_error *v222;
  __int128 v223;
  __int128 v224;
  __n128 v225;
  _QWORD *v226;
  std::runtime_error v227;
  std::error_code ec;
  uint64_t *v229;
  uint64_t v230;
  std::runtime_error_vtbl *v231;
  __int128 v232;
  std::system_error v233;
  uint64_t *v234;
  uint64_t v235;
  std::runtime_error_vtbl *v236;
  __int128 v237;
  __int128 __p;
  __int128 v239;
  int v240;
  _QWORD v241[19];
  std::string __what_arg;
  _QWORD v243[3];
  _QWORD *v244;
  _QWORD v245[2];
  std::runtime_error v246;
  std::runtime_error v247;
  unsigned int **v248;
  unsigned int *v249;
  std::runtime_error_vtbl *v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  std::error_code v254;
  std::error_code v255;

  v253 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  v8 = *a2;
  v245[0] = a2[1];
  *(_QWORD *)((char *)v245 + 7) = *(uint64_t *)((char *)a2 + 15);
  v9 = *((_BYTE *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v224 = *a3;
  v225 = v7;
  v223 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v10 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v217 = *a5;
  v219 = v10;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v243[0] = &off_1E2521550;
  v243[1] = AMSCore::UploadMetricsEventTask::performMultiple;
  v244 = v243;
  v11 = (char *)operator new(0x420uLL);
  v12 = (unint64_t)v11;
  *(_QWORD *)v11 = AMSCore::MetricsFlushTask::internal::perform;
  *((_QWORD *)v11 + 1) = AMSCore::MetricsFlushTask::internal::perform;
  *((_QWORD *)v11 + 91) = v8;
  v208 = (std::runtime_error *)(v11 + 600);
  v13 = (std::runtime_error *)(v11 + 152);
  *((_QWORD *)v11 + 92) = v245[0];
  v14 = (const std::runtime_error *)(v11 + 312);
  v214 = (AMSCore::Error *)(v11 + 392);
  v221 = (std::system_error *)(v11 + 472);
  v222 = (std::runtime_error *)(v11 + 232);
  v202 = (unsigned int *)(v11 + 544);
  v203 = v11 + 1052;
  v15 = v11 + 648;
  v213 = v11 + 680;
  v211 = (uint64_t *)(v11 + 704);
  v16 = v11 + 728;
  v204 = (std::string *)(v11 + 776);
  v205 = (void **)(v11 + 752);
  *(_QWORD *)(v11 + 743) = *(_QWORD *)((char *)v245 + 7);
  v11[751] = v9;
  v245[0] = 0;
  *(_QWORD *)((char *)v245 + 7) = 0;
  v200 = v11 + 816;
  v201 = v11 + 616;
  v206 = (__int128 *)(v11 + 848);
  v207 = (__int128 *)(v11 + 800);
  *((__n128 *)v11 + 54) = v225;
  *((_OWORD *)v11 + 55) = v224;
  v197 = (unsigned int *)(v11 + 1048);
  v212 = (uint64_t)(v11 + 16);
  v198 = (std::string::size_type *)(v11 + 736);
  v199 = v11 + 832;
  *((_OWORD *)v11 + 56) = v223;
  *((_OWORD *)v11 + 57) = v219;
  *((_OWORD *)v11 + 58) = v217;
  if (!v244)
  {
    v17 = v11 + 672;
    goto LABEL_5;
  }
  if (v244 != v243)
  {
    v17 = &v244;
    *((_QWORD *)v11 + 84) = v244;
LABEL_5:
    *v17 = 0;
    goto LABEL_7;
  }
  *((_QWORD *)v11 + 84) = v15;
  (*(void (**)(uint64_t, _QWORD *))(v243[0] + 24))((uint64_t)v243, v15);
  do
LABEL_7:
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v18 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_BYTE *)(v12 + 24) = 0;
  v19 = (std::runtime_error *)(v12 + 24);
  *(_BYTE *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 144) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v233, v212);
  *a6 = v233.std::runtime_error;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v227);
  v20 = v227.__vftable;
  v210 = v14;
  if (SLODWORD(v227.~runtime_error_0) <= 2)
  {
    *(_QWORD *)&v223 = v12 + 24;
    v21 = (uint64_t)v16;
    *(_QWORD *)&v224 = v241;
    v22 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v23 = MEMORY[0x1E0DE4FE0] + 64;
    v24 = MEMORY[0x1E0DE4F60];
    v25 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v26 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v241[0] = MEMORY[0x1E0DE4FE0] + 64;
    v233.__vftable = v25;
    *(std::system_error_vtbl **)((char *)&v233.__vftable + (unint64_t)v25[-1].~system_error) = v26;
    v27 = (std::ios_base *)((char *)&v233 + (unint64_t)v233.__vftable[-1].~system_error);
    std::ios_base::init(v27, &v233.__imp_);
    v27[1].__vftable = 0;
    v27[1].__fmtflags_ = -1;
    v233.__vftable = v22 + 1;
    v241[0] = v23;
    std::streambuf::basic_streambuf();
    v28 = MEMORY[0x1E0DE4FB8];
    v233.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    __p = 0u;
    v239 = 0u;
    v240 = 16;
    v29 = v233.__vftable[-1].~system_error;
    if ((v30 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v233, (uint64_t)"flushing events starting for topic: ", 36);
    v31 = *(char *)(v12 + 751);
    if (v31 >= 0)
      v32 = v21;
    else
      v32 = *(_QWORD *)(v12 + 728);
    if (v31 >= 0)
      v33 = *(unsigned __int8 *)(v12 + 751);
    else
      v33 = *(_QWORD *)(v12 + 736);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v233, v32, v33);
    v34 = v236;
    v35 = (char *)&v233 + (unint64_t)v233.__vftable[-1].~system_error;
    if ((v35[32] & 5) != 0)
    {
      v36 = -1;
    }
    else
    {
      (*(void (**)(std::runtime_error *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v35 + 5)
                                                                                                 + 32))(&v246, *((_QWORD *)v35 + 5), 0, 1, 16);
      v36 = v252;
    }
    v246.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v246.__imp_.__imp_) = 2;
    v247.__vftable = v34;
    v247.__imp_.__imp_ = (const char *)v36;
    (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden), const char *, uint64_t, std::runtime_error *))(*(_QWORD *)v20->what + 16))(v20->what, "metrics", 7, &v246);
    v233.__vftable = *(std::system_error_vtbl **)v24;
    *(std::system_error_vtbl **)((char *)&v233.__vftable + (unint64_t)v233.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v24 + 24);
    v233.__imp_.__imp_ = (const char *)(v28 + 16);
    if (SBYTE7(v239) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v241);
    v16 = (char *)v21;
    v14 = v210;
    v19 = (std::runtime_error *)(v12 + 24);
  }
  imp = (std::__shared_weak_count *)v227.__imp_.__imp_;
  v38 = v225;
  if (v227.__imp_.__imp_)
  {
    v39 = (unint64_t *)(v227.__imp_.__imp_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *, __n128))imp->__on_zero_shared)(imp, v225);
      std::__shared_weak_count::__release_weak(imp);
      v38 = v225;
    }
  }
  (*(void (**)(unint64_t, char *, __n128))(*(_QWORD *)v38.n128_u64[0] + 72))(v38.n128_u64[0], v16, v38);
  v41 = (unsigned int *)v222;
  if (!*(_BYTE *)(v12 + 464))
  {
    AMSCore::Error::Error(&v246, (const std::runtime_error *)v214);
    AMSCore::StringUtils::join<char [37]>(&__what_arg, "failed to get accounts from database");
    v255.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v255.__val_ = 999;
    std::system_error::system_error(&v233, v255, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v236 = 0;
    v235 = 0;
    v233.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v234 = &v235;
    v164 = operator new();
    v165 = std::runtime_error::runtime_error((std::runtime_error *)v164, &v246);
    v165[1] = v247;
    v165->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v166 = v249;
    v165[2].__vftable = (std::runtime_error_vtbl *)v248;
    v165[2].__imp_.__imp_ = (const char *)v166;
    p_imp = &v165[2].__imp_;
    v168 = v250;
    v165[3].__vftable = v250;
    if (v168)
    {
      *((_QWORD *)v166 + 2) = p_imp;
      v248 = &v249;
      v249 = 0;
      v250 = 0;
    }
    else
    {
      *(_QWORD *)(v164 + 32) = p_imp;
    }
    *(_OWORD *)(v164 + 56) = v251;
    v251 = 0uLL;
    *(_QWORD *)&v237 = v164;
    v169 = (_QWORD *)operator new();
    *v169 = &off_1E2523B58;
    v169[1] = 0;
    v169[2] = 0;
    v169[3] = v164;
    *((_QWORD *)&v237 + 1) = v169;
    std::runtime_error::runtime_error(&v227, &v233);
    ec = v233.__ec_;
    v227.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v170 = (unsigned int *)v235;
    v229 = v234;
    v230 = v235;
    v231 = v236;
    if (v236)
    {
      *(_QWORD *)(v235 + 16) = &v230;
      v170 = 0;
      v234 = &v235;
      v235 = 0;
      v236 = 0;
    }
    else
    {
      v229 = &v230;
    }
    v232 = v237;
    v237 = 0uLL;
    v233.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v234, v170);
    MEMORY[0x18D7898AC](&v233);
    v246.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v171 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
    if (*((_QWORD *)&v251 + 1))
    {
      v172 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v248, v249);
    MEMORY[0x18D7898AC](&v246);
    if (*(_BYTE *)(v12 + 104))
    {
      if (!*(_BYTE *)(v12 + 96))
        ((void (*)(std::runtime_error *))v19->~runtime_error)(v19);
      *(_BYTE *)(v12 + 104) = 0;
    }
    std::runtime_error::runtime_error(v19, &v227);
    v175 = v229;
    v174 = v230;
    *(_QWORD *)(v12 + 64) = v230;
    v176 = v12 + 64;
    *(std::error_code *)(v12 + 40) = ec;
    *(_QWORD *)(v12 + 24) = off_1E2521330;
    *(_QWORD *)(v12 + 56) = v175;
    v177 = v231;
    *(_QWORD *)(v12 + 72) = v231;
    if (v177)
    {
      *(_QWORD *)(v174 + 16) = v176;
      v174 = 0;
      v229 = &v230;
      v230 = 0;
      v231 = 0;
    }
    else
    {
      *(_QWORD *)(v12 + 56) = v176;
    }
    *(_OWORD *)(v12 + 80) = v232;
    v232 = 0uLL;
    *(_BYTE *)(v12 + 96) = 0;
    *(_BYTE *)(v12 + 104) = 1;
    v227.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v229, (unsigned int *)v174);
    v178 = (std::system_error *)&v227;
    goto LABEL_289;
  }
  v42 = *(_QWORD *)(v12 + 392);
  v43 = *(_QWORD *)(v12 + 400);
  *(_QWORD *)(v12 + 944) = v43;
  if (v42 == v43)
    goto LABEL_253;
  v44 = 0;
  v209 = (_QWORD *)(v12 + 192);
  v226 = (_QWORD *)(v12 + 184);
  v220 = v12 + 64;
  v216 = (std::error_code *)(v12 + 168);
  v218 = (std::error_code *)(v12 + 40);
  v215 = (_QWORD *)(v12 + 208);
  v196 = (unsigned int **)(v12 + 512);
  v193 = (_QWORD *)(v12 + 528);
  v192 = (_QWORD *)(v12 + 272);
  v194 = (_QWORD *)(v12 + 264);
  v195 = (unsigned int ***)(v12 + 504);
  v190 = (_QWORD *)(v12 + 584);
  v191 = (_QWORD *)(v12 + 576);
LABEL_30:
  *(_QWORD *)(v12 + 952) = v42;
  while (1)
  {
    *(_QWORD *)(v12 + 976) = v223;
    *(_QWORD *)(v12 + 968) = v224;
    *(_QWORD *)(v12 + 960) = v44;
    v45 = atomic_load(*(unsigned __int8 **)(v12 + 912));
    if ((v45 & 1) != 0)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>((uint64_t)&v233, 1u);
      if (*(_BYTE *)(v12 + 104))
      {
        if (!*(_BYTE *)(v12 + 96))
          ((void (*)(std::runtime_error *))v19->~runtime_error)(v19);
        *(_BYTE *)(v12 + 104) = 0;
      }
      std::runtime_error::runtime_error(v19, &v233);
      *v218 = v233.__ec_;
      *(_QWORD *)(v12 + 24) = off_1E2521330;
      v179 = v235;
      *(_QWORD *)(v12 + 56) = v234;
      *(_QWORD *)(v12 + 64) = v179;
      v180 = v236;
      *(_QWORD *)(v12 + 72) = v236;
      if (v180)
      {
        *(_QWORD *)(v179 + 16) = v220;
        v234 = &v235;
        v235 = 0;
        v236 = 0;
        v179 = 0;
      }
      else
      {
        *(_QWORD *)(v12 + 56) = v220;
      }
      *(_OWORD *)(v12 + 80) = v237;
      *((_QWORD *)&v237 + 1) = 0;
      *(_BYTE *)(v12 + 96) = 0;
      *(_BYTE *)(v12 + 104) = 1;
      *(_QWORD *)&v237 = 0;
      v233.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v234, (unsigned int *)v179);
      v178 = &v233;
LABEL_289:
      MEMORY[0x18D7898AC](v178);
      goto LABEL_290;
    }
    (*(void (**)(_QWORD, char *, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v12 + 864) + 56))(*(_QWORD *)(v12 + 864), v16, **(_QWORD **)(v12 + 952), *(_QWORD *)(*(_QWORD *)(v12 + 952) + 8), 500);
    if (!*(_BYTE *)(v12 + 384))
    {
      *v41 = 999;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[24]>((uint64_t)v13, v14, v41);
LABEL_80:
      if (*(_BYTE *)(v12 + 104))
      {
        if (!*(_BYTE *)(v12 + 96))
          ((void (*)(std::runtime_error *))v19->~runtime_error)(v19);
        *(_BYTE *)(v12 + 104) = 0;
      }
      std::runtime_error::runtime_error(v19, v13);
      *v218 = *v216;
      *(_QWORD *)(v12 + 24) = off_1E2521330;
      v77 = *(_QWORD *)(v12 + 192);
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(v12 + 184);
      *(_QWORD *)(v12 + 64) = v77;
      v78 = *(_QWORD *)(v12 + 200);
      *(_QWORD *)(v12 + 72) = v78;
      if (v78)
      {
        *(_QWORD *)(v77 + 16) = v220;
        v77 = 0;
        *v226 = v209;
        *v209 = 0;
        *(_QWORD *)(v12 + 200) = 0;
      }
      else
      {
        *(_QWORD *)(v12 + 56) = v220;
      }
      *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 208);
      *v215 = 0;
      *(_QWORD *)(v12 + 216) = 0;
      *(_BYTE *)(v12 + 96) = 0;
      *(_BYTE *)(v12 + 104) = 1;
      *(_QWORD *)(v12 + 152) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v226, (unsigned int *)v77);
      MEMORY[0x18D7898AC](v13);
      goto LABEL_88;
    }
    v46 = atomic_load(*(unsigned __int8 **)(v12 + 912));
    if ((v46 & 1) != 0)
    {
      *v41 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>((uint64_t)v13, 1u);
      goto LABEL_80;
    }
    if (!*(_BYTE *)(v12 + 384))
      goto LABEL_308;
    v48 = *(_QWORD *)(v12 + 328);
    v47 = *(_QWORD *)(v12 + 336);
    *(_QWORD *)(v12 + 984) = v47;
    *(_QWORD *)(v12 + 992) = v48;
    if (v47 == v48)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v13);
      AMSCore::Logger::log<char [33]>((uint64_t)v13->__vftable);
      v80 = *(std::__shared_weak_count **)(v12 + 160);
      if (v80)
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(p_shared_owners);
        while (__stlxr(v82 - 1, p_shared_owners));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      LOBYTE(v83) = 1;
      *(_BYTE *)(v12 + 224) = 1;
      if (*(_BYTE *)(v12 + 104))
      {
        if (*(_BYTE *)(v12 + 96))
        {
          LOBYTE(v83) = 1;
        }
        else
        {
          (**(void (***)(std::runtime_error *))(v12 + 24))(v19);
          v83 = *(unsigned __int8 *)(v12 + 224);
          *(_BYTE *)(v12 + 104) = 0;
          if (!v83)
          {
            std::runtime_error::runtime_error(v19, v13);
            *v218 = *v216;
            *(_QWORD *)(v12 + 24) = off_1E2521330;
            v117 = *(_QWORD *)(v12 + 192);
            *(_QWORD *)(v12 + 56) = *(_QWORD *)(v12 + 184);
            *(_QWORD *)(v12 + 64) = v117;
            v118 = *(_QWORD *)(v12 + 200);
            *(_QWORD *)(v12 + 72) = v118;
            if (v118)
            {
              *(_QWORD *)(v117 + 16) = v220;
              *v226 = v209;
              *v209 = 0;
              *(_QWORD *)(v12 + 200) = 0;
            }
            else
            {
              *(_QWORD *)(v12 + 56) = v220;
            }
            *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 208);
            *v215 = 0;
            *(_QWORD *)(v12 + 216) = 0;
            v162 = *(unsigned __int8 *)(v12 + 224);
            *(_BYTE *)(v12 + 96) = 0;
            *(_BYTE *)(v12 + 104) = 1;
            if (!v162)
              ((void (*)(std::runtime_error *))v13->~runtime_error)(v13);
            goto LABEL_88;
          }
        }
      }
      *(_BYTE *)(v12 + 96) = v83;
      *(_BYTE *)(v12 + 104) = 1;
LABEL_88:
      v79 = 3;
      goto LABEL_89;
    }
    v49 = *(_QWORD *)(v12 + 872);
    v50 = *(_QWORD *)(v12 + 864);
    *(_QWORD *)(v12 + 704) = v48;
    *(_QWORD *)(v12 + 712) = v47;
    *(_QWORD *)(v12 + 720) = *(_QWORD *)(v12 + 344);
    *(_QWORD *)(v12 + 328) = 0;
    *(_QWORD *)(v12 + 336) = 0;
    *(_QWORD *)(v12 + 344) = 0;
    *(_QWORD *)(v12 + 800) = v50;
    *(_QWORD *)(v12 + 808) = v49;
    if (v49)
    {
      v51 = (unint64_t *)(v49 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *(_QWORD *)(v12 + 936);
    *(_QWORD *)(v12 + 848) = *(_QWORD *)(v12 + 928);
    *(_QWORD *)(v12 + 856) = v53;
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = *v13;
    v208[25] = *v13;
    v13->__vftable = 0;
    v13->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v56.__vftable[1].what))
    {
      *v203 = 0;
      p_what = (unint64_t *)&v208[25].__vftable[1].what;
      do
        v59 = __ldaxr(p_what);
      while (__stlxr(v12, p_what));
      if (!v59)
        break;
    }
    v60 = v208[25].__vftable;
    if (!LOBYTE(v60[1].~runtime_error_0))
      goto LABEL_308;
    *(_OWORD *)v213 = *(_OWORD *)&v60->~runtime_error_0;
    *(_QWORD *)(v12 + 696) = v60[1].~runtime_error;
    v60->~runtime_error_0 = 0;
    v60->what = 0;
    v60[1].~runtime_error = 0;
    v61 = *(_QWORD *)(v12 + 1008);
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        v64 = *(std::__shared_weak_count **)(v12 + 1008);
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v65 = *(std::__shared_weak_count **)(v12 + 160);
    if (v65)
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = *(std::__shared_weak_count **)(v12 + 856);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = *(std::__shared_weak_count **)(v12 + 808);
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = *v211;
    if (*v211)
    {
      v75 = *(_QWORD *)(v12 + 712);
      v76 = (void *)*v211;
      if (v75 == v74)
      {
LABEL_101:
        *(_QWORD *)(v12 + 712) = v74;
        operator delete(v76);
        goto LABEL_102;
      }
      while (2)
      {
        if (*(char *)(v75 - 17) < 0)
        {
          operator delete(*(void **)(v75 - 40));
          if (*(char *)(v75 - 41) < 0)
            goto LABEL_70;
        }
        else if (*(char *)(v75 - 41) < 0)
        {
LABEL_70:
          operator delete(*(void **)(v75 - 64));
          if ((*(char *)(v75 - 65) & 0x80000000) == 0)
            goto LABEL_71;
LABEL_77:
          operator delete(*(void **)(v75 - 88));
LABEL_71:
          v75 -= 88;
          if (v75 == v74)
          {
            v76 = (void *)*v211;
            goto LABEL_101;
          }
          continue;
        }
        break;
      }
      if (*(char *)(v75 - 65) < 0)
        goto LABEL_77;
      goto LABEL_71;
    }
LABEL_102:
    v84 = (_QWORD *)(v12 + 976);
    v85 = (_QWORD *)(v12 + 968);
    v41 = (unsigned int *)v222;
    if (*(_QWORD *)(v12 + 680) == *(_QWORD *)(v12 + 688))
      goto LABEL_227;
    v86 = atomic_load(*(unsigned __int8 **)(v12 + 912));
    if ((v86 & 1) != 0)
    {
      LODWORD(v222->__vftable) = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>((uint64_t)v13, 1u);
      if (*(_BYTE *)(v12 + 104))
      {
        if (!*(_BYTE *)(v12 + 96))
          ((void (*)(std::runtime_error *))v19->~runtime_error)(v19);
        *(_BYTE *)(v12 + 104) = 0;
      }
      std::runtime_error::runtime_error(v19, v13);
      *v218 = *v216;
      *(_QWORD *)(v12 + 24) = off_1E2521330;
      v91 = *(_QWORD *)(v12 + 192);
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(v12 + 184);
      *(_QWORD *)(v12 + 64) = v91;
      v92 = *(_QWORD *)(v12 + 200);
      *(_QWORD *)(v12 + 72) = v92;
      if (v92)
      {
        *(_QWORD *)(v91 + 16) = v220;
        v91 = 0;
        *v226 = v209;
        *v209 = 0;
        *(_QWORD *)(v12 + 200) = 0;
      }
      else
      {
        *(_QWORD *)(v12 + 56) = v220;
      }
      *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 208);
      *v215 = 0;
      *(_QWORD *)(v12 + 216) = 0;
      *(_BYTE *)(v12 + 96) = 0;
      *(_BYTE *)(v12 + 104) = 1;
      *(_QWORD *)(v12 + 152) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v226, (unsigned int *)v91);
      MEMORY[0x18D7898AC](v13);
      v44 = *(_QWORD *)(v12 + 960);
      v79 = 3;
      v84 = (_QWORD *)(v12 + 976);
      v85 = (_QWORD *)(v12 + 968);
      goto LABEL_233;
    }
    v87 = *(_QWORD *)(v12 + 952);
    v88 = *(unsigned __int8 *)(v87 + 8);
    if (!*(_BYTE *)(v87 + 8))
      v87 = v12 + 976;
    v89 = v88 | ((unint64_t)*(unsigned int *)(v12 + 972) << 32);
    v90 = *(_QWORD *)v87;
    *(_QWORD *)(v12 + 1024) = v89;
    *(_QWORD *)(v12 + 1016) = v90;
    if (*(char *)(v12 + 751) < 0)
    {
      std::string::__init_copy_ctor_external(v204, *(const std::string::value_type **)v16, *v198);
    }
    else
    {
      *(_OWORD *)&v204->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v204->__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
    }
    v93 = *(_QWORD *)(v12 + 888);
    v94 = *(_QWORD *)(v12 + 880);
    *(_OWORD *)(v12 + 752) = *(_OWORD *)v213;
    *(_QWORD *)(v12 + 768) = *(_QWORD *)(v12 + 696);
    *((_QWORD *)v213 + 1) = 0;
    *((_QWORD *)v213 + 2) = 0;
    *(_QWORD *)v213 = 0;
    *(_QWORD *)(v12 + 616) = v94;
    *(_QWORD *)(v12 + 624) = v93;
    if (v93)
    {
      v95 = (unint64_t *)(v93 + 8);
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    v97 = *(_QWORD *)(v12 + 904);
    *(_QWORD *)(v12 + 632) = *(_QWORD *)(v12 + 896);
    *(_QWORD *)(v12 + 640) = v97;
    if (v97)
    {
      v98 = (unint64_t *)(v97 + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    v100 = *(_QWORD *)(v12 + 920);
    *(_QWORD *)(v12 + 816) = *(_QWORD *)(v12 + 912);
    *(_QWORD *)(v12 + 824) = v100;
    if (v100)
    {
      v101 = (unint64_t *)(v100 + 8);
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
    }
    v103 = *(_QWORD *)(v12 + 936);
    *(_QWORD *)(v12 + 832) = *(_QWORD *)(v12 + 928);
    *(_QWORD *)(v12 + 840) = v103;
    if (v103)
    {
      v104 = (unint64_t *)(v103 + 8);
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    *(_QWORD *)(v12 + 472) = v90;
    *(_QWORD *)(v12 + 480) = v89;
    v106 = *(_QWORD *)(v12 + 672);
    if (!v106)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, std::string *, void **, char *, std::system_error *, char *, char *))(*(_QWORD *)v106 + 48))(v106, v204, v205, v201, v221, v200, v199);
    v107 = *v222;
    v208[27] = *v222;
    v222->__vftable = 0;
    v222->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v107.__vftable[4]))
    {
      *v203 = 1;
      v109 = (unint64_t *)&v208[27].__vftable[4];
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v12, v109));
      if (!v110)
        break;
    }
    v111 = v208[27].__vftable;
    if (!LOBYTE(v111[3].what))
    {
LABEL_308:
      __break(1u);
      return;
    }
    v112 = (const std::runtime_error *)&v111->~runtime_error_0;
    v113 = (char)v111[3].~runtime_error_0;
    if (v113)
    {
      LODWORD(v13->__vftable) = v112->__vftable;
    }
    else
    {
      std::runtime_error::runtime_error(v13, v112);
      *v216 = *(std::error_code *)&v111[1].~runtime_error;
      *(_QWORD *)(v12 + 152) = off_1E2521330;
      v114 = v111 + 2;
      v115 = v111[2].~runtime_error;
      *(_QWORD *)(v12 + 184) = v111[1].what;
      *(_QWORD *)(v12 + 192) = v115;
      v116 = v111[2].~runtime_error_0;
      *(_QWORD *)(v12 + 200) = v116;
      if (v116)
      {
        *((_QWORD *)v115 + 2) = v209;
        v111[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v114;
        v114->~runtime_error = 0;
        v111[2].~runtime_error_0 = 0;
      }
      else
      {
        *v226 = v209;
      }
      v119 = v208[27].__vftable;
      *(_OWORD *)v215 = *(_OWORD *)&v119[2].what;
      v119[2].what = 0;
      v119[3].~runtime_error = 0;
    }
    *(_BYTE *)(v12 + 224) = v113;
    v120 = *(_QWORD *)(v12 + 1040);
    if (v120)
    {
      v121 = (unint64_t *)(v120 + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        v123 = *(std::__shared_weak_count **)(v12 + 1040);
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v124 = *(std::__shared_weak_count **)(v12 + 240);
    if (v124)
    {
      v125 = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v127 = *(std::__shared_weak_count **)(v12 + 840);
    if (v127)
    {
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = *(std::__shared_weak_count **)(v12 + 824);
    if (v130)
    {
      v131 = (unint64_t *)&v130->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v133 = *(std::__shared_weak_count **)(v12 + 640);
    if (v133)
    {
      v134 = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = *(std::__shared_weak_count **)(v12 + 624);
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v139 = (char *)*v205;
    if (*v205)
    {
      v140 = *(char **)(v12 + 760);
      v141 = *v205;
      if (v140 != v139)
      {
        do
        {
          v142 = v140 - 32;
          v143 = *((unsigned int *)v140 - 2);
          if ((_DWORD)v143 != -1)
            ((void (*)(std::system_error *, char *))off_1E253D240[v143])(v221, v140 - 32);
          *((_DWORD *)v140 - 2) = -1;
          v140 -= 32;
        }
        while (v142 != v139);
        v141 = *v205;
      }
      *(_QWORD *)(v12 + 760) = v139;
      operator delete(v141);
    }
    if (*(char *)(v12 + 799) < 0)
      operator delete(v204->__r_.__value_.__l.__data_);
    v41 = (unsigned int *)v222;
    if (*(_BYTE *)(v12 + 224))
    {
      if (LODWORD(v13->__vftable) != 2)
      {
        (*(void (**)(_QWORD, const std::runtime_error *))(**(_QWORD **)(v12 + 864) + 24))(*(_QWORD *)(v12 + 864), v14);
        if (*(_BYTE *)(v12 + 304))
        {
          v79 = 0;
          v146 = 1;
          if (*(_BYTE *)(v12 + 224))
            goto LABEL_226;
        }
        else
        {
          *v202 = 999;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[35]>((uint64_t)v221, v222, v202);
          if (*(_BYTE *)(v12 + 104))
          {
            if (!*(_BYTE *)(v12 + 96))
              ((void (*)(std::runtime_error *))v19->~runtime_error)(v19);
            *(_BYTE *)(v12 + 104) = 0;
          }
          std::runtime_error::runtime_error(v19, v221);
          *v218 = *(std::error_code *)(v12 + 488);
          *(_QWORD *)(v12 + 24) = off_1E2521330;
          v149 = *(_QWORD *)(v12 + 512);
          *(_QWORD *)(v12 + 56) = *(_QWORD *)(v12 + 504);
          *(_QWORD *)(v12 + 64) = v149;
          v150 = *(_QWORD *)(v12 + 520);
          *(_QWORD *)(v12 + 72) = v150;
          if (v150)
          {
            *(_QWORD *)(v149 + 16) = v220;
            v149 = 0;
            *v195 = v196;
            *v196 = 0;
            *(_QWORD *)(v12 + 520) = 0;
          }
          else
          {
            *(_QWORD *)(v12 + 56) = v220;
          }
          *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 528);
          *v193 = 0;
          *(_QWORD *)(v12 + 536) = 0;
          *(_BYTE *)(v12 + 96) = 0;
          *(_BYTE *)(v12 + 104) = 1;
          *(_QWORD *)(v12 + 472) = off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v195, (unsigned int *)v149);
          MEMORY[0x18D7898AC](v221);
          if (!*(_BYTE *)(v12 + 304))
            ((void (*)(std::runtime_error *))v222->~runtime_error)(v222);
          v146 = 0;
          v79 = 3;
          if (*(_BYTE *)(v12 + 224))
          {
LABEL_226:
            v84 = (_QWORD *)(v12 + 1016);
            v85 = (_QWORD *)(v12 + 1024);
            if ((v146 & 1) != 0)
              goto LABEL_227;
LABEL_202:
            v44 = *(_QWORD *)(v12 + 960);
            v84 = (_QWORD *)(v12 + 1016);
            v85 = (_QWORD *)(v12 + 1024);
            goto LABEL_233;
          }
        }
        goto LABEL_201;
      }
      AMSCore::StringUtils::join<char [17]>((std::string *)v222, "invalid response");
      *(_QWORD *)&v254.__val_ = 301;
      v254.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
      std::system_error::system_error(v221, v254, (const std::string *)v222);
      if (*(char *)(v12 + 255) < 0)
        operator delete(v222->__vftable);
      v221->__vftable = (std::system_error_vtbl *)off_1E2521330;
      *v196 = 0;
      *(_QWORD *)(v12 + 520) = 0;
      *v195 = v196;
      *v193 = 0;
      *(_QWORD *)(v12 + 536) = 0;
    }
    else
    {
      AMSCore::Error::Error(v221, v13);
    }
    (*(void (**)(_QWORD, const std::runtime_error *))(**(_QWORD **)(v12 + 864) + 40))(*(_QWORD *)(v12 + 864), v14);
    if (*(_BYTE *)(v12 + 304))
    {
      *v202 = 999;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>((uint64_t)v222, (uint64_t)v221, v202);
      if (*(_BYTE *)(v12 + 104))
      {
        if (!*(_BYTE *)(v12 + 96))
          ((void (*)(std::runtime_error *))v19->~runtime_error)(v19);
        *(_BYTE *)(v12 + 104) = 0;
      }
      std::runtime_error::runtime_error(v19, v222);
      *v218 = *(std::error_code *)(v12 + 248);
      *(_QWORD *)(v12 + 24) = off_1E2521330;
      v144 = *(_QWORD *)(v12 + 272);
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(v12 + 264);
      *(_QWORD *)(v12 + 64) = v144;
      v145 = *(_QWORD *)(v12 + 280);
      *(_QWORD *)(v12 + 72) = v145;
      if (v145)
      {
        *(_QWORD *)(v144 + 16) = v220;
        v144 = 0;
        *v194 = v192;
        *v192 = 0;
        *(_QWORD *)(v12 + 280) = 0;
      }
      else
      {
        *(_QWORD *)(v12 + 56) = v220;
      }
      *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 288);
      *(_QWORD *)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
      *(_BYTE *)(v12 + 96) = 0;
      *(_BYTE *)(v12 + 104) = 1;
      *(_QWORD *)(v12 + 232) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v194, (unsigned int *)v144);
      MEMORY[0x18D7898AC](v222);
    }
    else
    {
      *v197 = 999;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[56],AMSCore::Error&>((uint64_t)v202, (uint64_t)v221, v197, (uint64_t)v222);
      if (*(_BYTE *)(v12 + 104))
      {
        if (!*(_BYTE *)(v12 + 96))
          ((void (*)(std::runtime_error *))v19->~runtime_error)(v19);
        *(_BYTE *)(v12 + 104) = 0;
      }
      std::runtime_error::runtime_error(v19, (const std::runtime_error *)v202);
      *v218 = *(std::error_code *)(v12 + 560);
      *(_QWORD *)(v12 + 24) = off_1E2521330;
      v147 = *(_QWORD *)(v12 + 584);
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(v12 + 576);
      *(_QWORD *)(v12 + 64) = v147;
      v148 = *(_QWORD *)(v12 + 592);
      *(_QWORD *)(v12 + 72) = v148;
      if (v148)
      {
        *(_QWORD *)(v147 + 16) = v220;
        v147 = 0;
        *v191 = v190;
        *v190 = 0;
        *(_QWORD *)(v12 + 592) = 0;
      }
      else
      {
        *(_QWORD *)(v12 + 56) = v220;
      }
      *(std::runtime_error *)(v12 + 80) = *v208;
      v208->__vftable = 0;
      v208->__imp_.__imp_ = 0;
      *(_BYTE *)(v12 + 96) = 0;
      *(_BYTE *)(v12 + 104) = 1;
      *(_QWORD *)(v12 + 544) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v191, (unsigned int *)v147);
      MEMORY[0x18D7898AC](v202);
      if (!*(_BYTE *)(v12 + 304))
        ((void (*)(std::runtime_error *))v222->~runtime_error)(v222);
    }
    *(_QWORD *)(v12 + 472) = off_1E2521330;
    v151 = *(std::__shared_weak_count **)(v12 + 536);
    if (v151)
    {
      v152 = (unint64_t *)&v151->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v195, *v196);
    MEMORY[0x18D7898AC](v221);
    v146 = 0;
    v79 = 3;
    if (*(_BYTE *)(v12 + 224))
      goto LABEL_226;
LABEL_201:
    ((void (*)(std::runtime_error *))v13->~runtime_error)(v13);
    v84 = (_QWORD *)(v12 + 1016);
    v85 = (_QWORD *)(v12 + 1024);
    if ((v146 & 1) == 0)
      goto LABEL_202;
LABEL_227:
    v154 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v12 + 984) - *(_QWORD *)(v12 + 992)) >> 3);
    if (v154 >= 0x1F4)
      v44 = *(_QWORD *)(v12 + 960);
    else
      v44 = *(_QWORD *)(v12 + 960) + 1;
    if (v154 >= 0x1F4)
      v79 = 0;
    else
      v79 = 6;
LABEL_233:
    *(_QWORD *)&v224 = *v85;
    *(_QWORD *)&v223 = *v84;
    v155 = *(_QWORD *)v213;
    if (*(_QWORD *)v213)
    {
      v156 = v19;
      v157 = v16;
      v158 = *(_QWORD *)(v12 + 688);
      v159 = *(void **)v213;
      if (v158 != v155)
      {
        do
        {
          v160 = v158 - 32;
          v161 = *(unsigned int *)(v158 - 8);
          if ((_DWORD)v161 != -1)
            ((void (*)(std::runtime_error *, uint64_t))off_1E253D240[v161])(v13, v158 - 32);
          *(_DWORD *)(v158 - 8) = -1;
          v158 -= 32;
        }
        while (v160 != v155);
        v159 = *(void **)v213;
      }
      *(_QWORD *)(v12 + 688) = v155;
      operator delete(v159);
      v16 = v157;
      v14 = v210;
      v19 = v156;
      v41 = (unsigned int *)v222;
    }
    else
    {
      v14 = v210;
    }
LABEL_89:
    std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v14);
    if (v79)
    {
      if (v79 != 6)
        goto LABEL_290;
      if (v44 > 0x31 || (v42 = *(_QWORD *)(v12 + 952) + 16, v42 == *(_QWORD *)(v12 + 944)))
      {
LABEL_253:
        LOBYTE(__p) = 1;
        if (*(_BYTE *)(v12 + 104) && !*(_BYTE *)(v12 + 96))
        {
          (**(void (***)(std::runtime_error *))(v12 + 24))(v19);
          v163 = __p;
          *(_BYTE *)(v12 + 104) = 0;
          if (!v163)
          {
            std::runtime_error::runtime_error(v19, &v233);
            v181 = v233.__ec_;
            v182 = v235;
            v183 = v234;
            *(_QWORD *)(v12 + 64) = v235;
            v184 = v12 + 64;
            *(std::error_code *)(v12 + 40) = v181;
            *(_QWORD *)(v12 + 24) = off_1E2521330;
            *(_QWORD *)(v12 + 56) = v183;
            v185 = v236;
            *(_QWORD *)(v12 + 72) = v236;
            if (v185)
            {
              *(_QWORD *)(v182 + 16) = v184;
              v234 = &v235;
              v235 = 0;
              v236 = 0;
            }
            else
            {
              *(_QWORD *)(v12 + 56) = v184;
            }
            *(_OWORD *)(v12 + 80) = v237;
            v237 = 0uLL;
            v189 = __p;
            *(_BYTE *)(v12 + 96) = 0;
            *(_BYTE *)(v12 + 104) = 1;
            if (!v189)
              ((void (*)(std::system_error *))v233.~system_error)(&v233);
            goto LABEL_290;
          }
        }
        else
        {
          LOBYTE(v163) = 1;
        }
        *(_BYTE *)(v12 + 96) = v163;
        *(_BYTE *)(v12 + 104) = 1;
LABEL_290:
        v186 = *(void (***)(AMSCore::Error *))(v12 + 392);
        if (*(_BYTE *)(v12 + 464))
        {
          if (v186)
          {
            *(_QWORD *)(v12 + 400) = v186;
            operator delete(v186);
          }
        }
        else
        {
          (*v186)(v214);
        }
        *(_QWORD *)(v12 + 152) = v212;
        *(_QWORD *)v12 = 0;
        AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v13);
        break;
      }
      goto LABEL_30;
    }
    if (++v44 >= 0x32)
      goto LABEL_253;
  }
  v187 = v244;
  if (v244 == v243)
  {
    v188 = 4;
    v187 = v243;
  }
  else
  {
    if (!v244)
      return;
    v188 = 5;
  }
  (*(void (**)(void))(*v187 + 8 * v188))();
}

void sub_18CCA9ED0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EED0Ev()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2521550;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2521550;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EEclEOSD_OSH_OSI_OSL_OSO_OSR_(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t *a5, __int128 *a6, __int128 *a7)
{
  void (*v7)(__int128 *, void **, __int128 *, uint64_t, uint64_t, __int128 *, __int128 *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *__p[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;

  v7 = *(void (**)(__int128 *, void **, __int128 *, uint64_t, uint64_t, __int128 *, __int128 *))(a1 + 8);
  v36 = *a2;
  v37 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v8 = *a3;
  v35 = *((_QWORD *)a3 + 2);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  v10 = *a4;
  v9 = a4[1];
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v33 = v9;
  *(_OWORD *)__p = v8;
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  v11 = *a5;
  v12 = a5[1];
  v31 = *a6;
  v32 = v10;
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  v30 = *a7;
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  v7(&v36, __p, &v32, v11, v12, &v31, &v30);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (!*((_QWORD *)&v32 + 1))
    goto LABEL_20;
  v23 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_28;
  }
  else
  {
LABEL_20:
    v25 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_28;
  }
  v26 = (char *)__p[1];
  v27 = v25;
  if (__p[1] != v25)
  {
    do
    {
      v28 = v26 - 32;
      v29 = *((unsigned int *)v26 - 2);
      if ((_DWORD)v29 != -1)
        ((void (*)(char *, char *))off_1E253D240[v29])(&v38, v26 - 32);
      *((_DWORD *)v26 - 2) = -1;
      v26 -= 32;
    }
    while (v28 != v25);
    v27 = (char *)__p[0];
  }
  __p[1] = v25;
  operator delete(v27);
LABEL_28:
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__112basic_stri"
                     "ngIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEENS_10BagServiceENS5_7v"
                     "ariantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IKNS_28MetricsEventModifierProviderEEEE"
    || ((v3 & (unint64_t)"PDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__11"
                                "2basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEE"
                                "NS_10BagServiceENS5_7variantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IK"
                                "NS_28MetricsEventModifierProviderEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEENS_10BagServiceENS5_7variantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IKNS_28MetricsEventModifierProviderEEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEENS_10BagServiceENS5_7variantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IKNS_28MetricsEventModifierProviderEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EE11target_typeEv()
{
  return &_ZTIPDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEENS_10BagServiceENS5_7variantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IKNS_28MetricsEventModifierProviderEEEE;
}

void AMSCore::MetricsIdentifierProvider::~MetricsIdentifierProvider(AMSCore::MetricsIdentifierProvider *this)
{
  AMSCore::MetricsIdentifierDataAccessObject *v2;

  v2 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2521230;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(v2);
    MEMORY[0x18D789BDC]();
  }
}

{
  AMSCore::MetricsIdentifierDataAccessObject *v2;

  v2 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2521230;
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(v2);
    MEMORY[0x18D789BDC]();
  }
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(AMSCore::MetricsIdentifierDataAccessObject *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  AMSCore::MetricsIdentifierDataAccessObject *v5;
  uint64_t v6;
  AMSCore::MetricsIdentifierDataAccessObject *v7;
  uint64_t v8;
  AMSCore::MetricsIdentifierDataAccessObject *v9;
  uint64_t v10;
  AMSCore::MetricsIdentifierDataAccessObject *v11;
  uint64_t v12;
  AMSCore::MetricsIdentifierDataAccessObject *v13;
  uint64_t v14;
  AMSCore::MetricsIdentifierDataAccessObject *v15;
  uint64_t v16;
  AMSCore::MetricsIdentifierDataAccessObject *v17;
  uint64_t v18;
  AMSCore::MetricsIdentifierDataAccessObject *v19;
  uint64_t v20;
  AMSCore::MetricsIdentifierDataAccessObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  v2 = (char *)this + 336;
  v3 = (char *)*((_QWORD *)this + 45);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 41);
  if (v5 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 304))
  {
    v6 = 4;
    v5 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 304);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 37);
  if (v7 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 272))
  {
    v8 = 4;
    v7 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 272);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 33);
  if (v9 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 240))
  {
    v10 = 4;
    v9 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 240);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 29);
  if (v11 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 208))
  {
    v12 = 4;
    v11 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 208);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_26:
  v13 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 25);
  if (v13 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 176))
  {
    v14 = 4;
    v13 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 176);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_31:
  v15 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 21);
  if (v15 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 144))
  {
    v16 = 4;
    v15 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 144);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_36:
  v17 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 17);
  if (v17 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 112))
  {
    v18 = 4;
    v17 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 112);
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_41:
  v19 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 13);
  if (v19 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 80))
  {
    v20 = 4;
    v19 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 80);
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_46:
  v21 = (AMSCore::MetricsIdentifierDataAccessObject *)*((_QWORD *)this + 9);
  if (v21 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 48))
  {
    v22 = 4;
    v21 = (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 48);
  }
  else
  {
    if (!v21)
      goto LABEL_51;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_51:
  v23 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v25)
    goto LABEL_59;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v28)
      return;
  }
  else
  {
LABEL_59:
    v28 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v28)
      return;
  }
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
}

AMSCore::MetricsIdentifierDataAccessObject *AMSCore::MetricsIdentifierProvider::make(AMSCore::MetricsIdentifierProvider *this)
{
  _QWORD *v2;
  uint64_t v3;
  std::runtime_error_vtbl *v4;
  char *v5;
  char *v6;
  std::runtime_error_vtbl *v7;
  char *v8;
  char *v9;
  std::runtime_error_vtbl *v10;
  char *v11;
  std::runtime_error_vtbl *v12;
  unsigned int *v13;
  unsigned int *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::runtime_error_vtbl *v43;
  unsigned int *v44;
  unsigned int *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::runtime_error_vtbl *v49;
  std::runtime_error_vtbl *v50;
  uint64_t v51;
  __int128 v52;
  std::runtime_error_vtbl *v53;
  std::runtime_error_vtbl *v54;
  std::runtime_error_vtbl *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;
  std::runtime_error *v70;
  uint64_t v71;
  std::runtime_error *v72;
  uint64_t v73;
  std::runtime_error *p_p;
  uint64_t v75;
  std::runtime_error *v76;
  uint64_t v77;
  std::runtime_error *v78;
  uint64_t v79;
  std::runtime_error_vtbl *v80;
  std::runtime_error *v81;
  uint64_t v82;
  std::runtime_error_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  std::runtime_error_vtbl *v92;
  _QWORD *v93;
  unsigned int *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  AMSCore::MetricsIdentifierDataAccessObject *result;
  __int128 v102;
  __int128 v103;
  std::runtime_error v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  char v109;
  std::runtime_error_vtbl *v110;
  std::runtime_error_vtbl *v111;
  __int128 v112;
  __int128 v113;
  void *v114[9];
  char v115;
  std::runtime_error v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  char v121;
  std::runtime_error v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  std::runtime_error v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  char v133;
  std::runtime_error __p;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  char v139;
  std::runtime_error v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  char v145;
  std::runtime_error v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  char v151;
  std::runtime_error v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  char v157;
  std::runtime_error v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  char v163;
  std::runtime_error v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  char v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _BYTE v176[24];
  _BYTE *v177;
  void *v178[3];
  void **v179;
  void *v180[3];
  void **v181;
  void *v182;
  void *v183;
  void **v184;
  __int128 v185;
  __int128 v186;
  char v187;
  _OWORD v188[4];
  char v189;
  std::runtime_error v190;
  __int128 v191;
  __int128 v192;
  _BYTE v193[32];
  __int128 v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E2522888;
  *((_QWORD *)&v103 + 1) = v2;
  v2[3] = &off_1E2520798;
  *(_QWORD *)&v103 = v2 + 3;
  AMSCore::ServiceProvider<AMSCore::StructuredData::IStructuredDataProvider>::getDefault(&v102);
  v3 = v102;
  if (!v169)
  {
    std::runtime_error::runtime_error(&v190, &v164);
    v191 = v165;
    v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v192 = v166;
    *(_QWORD *)v193 = v167;
    if (v167)
    {
      *(_QWORD *)(*((_QWORD *)&v166 + 1) + 16) = (char *)&v192 + 8;
      *(_QWORD *)&v166 = (char *)&v166 + 8;
      *((_QWORD *)&v166 + 1) = 0;
      v167 = 0;
    }
    else
    {
      *(_QWORD *)&v192 = (char *)&v192 + 8;
    }
    *(_OWORD *)&v193[8] = v168;
    v168 = 0uLL;
    v193[24] = 1;
    std::runtime_error::runtime_error(&v158, &v190);
    v159 = v191;
    v158.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v160 = v192;
    v161 = *(_QWORD *)v193;
    if (*(_QWORD *)v193)
    {
      *(_QWORD *)(*((_QWORD *)&v192 + 1) + 16) = (char *)&v160 + 8;
      *(_QWORD *)&v192 = (char *)&v192 + 8;
      *((_QWORD *)&v192 + 1) = 0;
      *(_QWORD *)v193 = 0;
    }
    else
    {
      *(_QWORD *)&v160 = (char *)&v160 + 8;
    }
    v162 = *(_OWORD *)&v193[8];
    *(_QWORD *)&v193[8] = 0;
    *(_QWORD *)&v193[16] = 0;
    std::runtime_error::runtime_error(&v152, &v158);
    v153 = v159;
    v13 = (unsigned int *)*((_QWORD *)&v160 + 1);
    v152.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v154 = v160;
    v155 = v161;
    if (v161)
    {
      *(_QWORD *)(*((_QWORD *)&v160 + 1) + 16) = (char *)&v154 + 8;
      v13 = 0;
      *(_QWORD *)&v160 = (char *)&v160 + 8;
      *((_QWORD *)&v160 + 1) = 0;
      v161 = 0;
    }
    else
    {
      *(_QWORD *)&v154 = (char *)&v154 + 8;
    }
    v156 = v162;
    v162 = 0uLL;
    v158.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v160, v13);
    MEMORY[0x18D7898AC](&v158);
    std::runtime_error::runtime_error(&v104, &v152);
    v105 = v153;
    v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v14 = (unsigned int *)*((_QWORD *)&v154 + 1);
    v106 = v154;
    v107 = v155;
    if (v155)
    {
      *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = (char *)&v106 + 8;
      v14 = 0;
      *(_QWORD *)&v154 = (char *)&v154 + 8;
      *((_QWORD *)&v154 + 1) = 0;
      v155 = 0;
    }
    else
    {
      *(_QWORD *)&v106 = (char *)&v106 + 8;
    }
    v108 = v156;
    v156 = 0uLL;
    v109 = 0;
    v152.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v154, v14);
    MEMORY[0x18D7898AC](&v152);
    if (v193[24])
    {
      v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v15 = *(std::__shared_weak_count **)&v193[16];
      if (*(_QWORD *)&v193[16])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v192, *((unsigned int **)&v192 + 1));
      MEMORY[0x18D7898AC](&v190);
    }
    goto LABEL_288;
  }
  (*((void (**)(std::runtime_error *__return_ptr))v164.~runtime_error + 3))(&v158);
  if (!v163)
  {
    std::runtime_error::runtime_error(&v190, &v158);
    v191 = v159;
    v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v192 = v160;
    *(_QWORD *)v193 = v161;
    if (v161)
    {
      *(_QWORD *)(*((_QWORD *)&v160 + 1) + 16) = (char *)&v192 + 8;
      *(_QWORD *)&v160 = (char *)&v160 + 8;
      *((_QWORD *)&v160 + 1) = 0;
      v161 = 0;
    }
    else
    {
      *(_QWORD *)&v192 = (char *)&v192 + 8;
    }
    *(_OWORD *)&v193[8] = v162;
    v162 = 0uLL;
    v193[24] = 1;
    std::runtime_error::runtime_error(&v152, &v190);
    v153 = v191;
    v152.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v154 = v192;
    v155 = *(_QWORD *)v193;
    if (*(_QWORD *)v193)
    {
      *(_QWORD *)(*((_QWORD *)&v192 + 1) + 16) = (char *)&v154 + 8;
      *(_QWORD *)&v192 = (char *)&v192 + 8;
      *((_QWORD *)&v192 + 1) = 0;
      *(_QWORD *)v193 = 0;
    }
    else
    {
      *(_QWORD *)&v154 = (char *)&v154 + 8;
    }
    v156 = *(_OWORD *)&v193[8];
    *(_QWORD *)&v193[8] = 0;
    *(_QWORD *)&v193[16] = 0;
    std::runtime_error::runtime_error(&v146, &v152);
    v147 = v153;
    v18 = (unsigned int *)*((_QWORD *)&v154 + 1);
    v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v148 = v154;
    v149 = v155;
    if (v155)
    {
      *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = (char *)&v148 + 8;
      v18 = 0;
      *(_QWORD *)&v154 = (char *)&v154 + 8;
      *((_QWORD *)&v154 + 1) = 0;
      v155 = 0;
    }
    else
    {
      *(_QWORD *)&v148 = (char *)&v148 + 8;
    }
    v150 = v156;
    v156 = 0uLL;
    v152.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v154, v18);
    MEMORY[0x18D7898AC](&v152);
    std::runtime_error::runtime_error(&v104, &v146);
    v105 = v147;
    v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v19 = (unsigned int *)*((_QWORD *)&v148 + 1);
    v106 = v148;
    v107 = v149;
    if (v149)
    {
      *(_QWORD *)(*((_QWORD *)&v148 + 1) + 16) = (char *)&v106 + 8;
      v19 = 0;
      *(_QWORD *)&v148 = (char *)&v148 + 8;
      *((_QWORD *)&v148 + 1) = 0;
      v149 = 0;
    }
    else
    {
      *(_QWORD *)&v106 = (char *)&v106 + 8;
    }
    v108 = v150;
    v150 = 0uLL;
    v109 = 0;
    v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v148, v19);
    MEMORY[0x18D7898AC](&v146);
    if (!v193[24])
      goto LABEL_280;
    v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v20 = *(std::__shared_weak_count **)&v193[16];
    if (*(_QWORD *)&v193[16])
    {
      v21 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v192, *((unsigned int **)&v192 + 1));
    MEMORY[0x18D7898AC](&v190);
    if (v163)
      goto LABEL_281;
LABEL_287:
    ((void (*)(std::runtime_error *))v158.~runtime_error)(&v158);
    goto LABEL_288;
  }
  if (!v157)
  {
    std::runtime_error::runtime_error(&v190, &v152);
    v191 = v153;
    v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v192 = v154;
    *(_QWORD *)v193 = v155;
    if (v155)
    {
      *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = (char *)&v192 + 8;
      *(_QWORD *)&v154 = (char *)&v154 + 8;
      *((_QWORD *)&v154 + 1) = 0;
      v155 = 0;
    }
    else
    {
      *(_QWORD *)&v192 = (char *)&v192 + 8;
    }
    *(_OWORD *)&v193[8] = v156;
    v156 = 0uLL;
    v193[24] = 1;
    std::runtime_error::runtime_error(&v146, &v190);
    v147 = v191;
    v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v148 = v192;
    v149 = *(_QWORD *)v193;
    if (*(_QWORD *)v193)
    {
      *(_QWORD *)(*((_QWORD *)&v192 + 1) + 16) = (char *)&v148 + 8;
      *(_QWORD *)&v192 = (char *)&v192 + 8;
      *((_QWORD *)&v192 + 1) = 0;
      *(_QWORD *)v193 = 0;
    }
    else
    {
      *(_QWORD *)&v148 = (char *)&v148 + 8;
    }
    v150 = *(_OWORD *)&v193[8];
    *(_QWORD *)&v193[8] = 0;
    *(_QWORD *)&v193[16] = 0;
    std::runtime_error::runtime_error(&v140, &v146);
    v141 = v147;
    v23 = (unsigned int *)*((_QWORD *)&v148 + 1);
    v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v142 = v148;
    v143 = v149;
    if (v149)
    {
      *(_QWORD *)(*((_QWORD *)&v148 + 1) + 16) = (char *)&v142 + 8;
      v23 = 0;
      *(_QWORD *)&v148 = (char *)&v148 + 8;
      *((_QWORD *)&v148 + 1) = 0;
      v149 = 0;
    }
    else
    {
      *(_QWORD *)&v142 = (char *)&v142 + 8;
    }
    v144 = v150;
    v150 = 0uLL;
    v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v148, v23);
    MEMORY[0x18D7898AC](&v146);
    std::runtime_error::runtime_error(&v104, &v140);
    v105 = v141;
    v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v24 = (unsigned int *)*((_QWORD *)&v142 + 1);
    v106 = v142;
    v107 = v143;
    if (v143)
    {
      *(_QWORD *)(*((_QWORD *)&v142 + 1) + 16) = (char *)&v106 + 8;
      v24 = 0;
      *(_QWORD *)&v142 = (char *)&v142 + 8;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
    }
    else
    {
      *(_QWORD *)&v106 = (char *)&v106 + 8;
    }
    v108 = v144;
    v144 = 0uLL;
    v109 = 0;
    v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v142, v24);
    MEMORY[0x18D7898AC](&v140);
    if (v193[24])
    {
      v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v25 = *(std::__shared_weak_count **)&v193[16];
      if (*(_QWORD *)&v193[16])
      {
        v26 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v192, *((unsigned int **)&v192 + 1));
      MEMORY[0x18D7898AC](&v190);
    }
    goto LABEL_277;
  }
  (*((void (**)(std::runtime_error *__return_ptr))v152.~runtime_error + 3))(&v146);
  if (v151)
  {
    if (!v157)
      goto LABEL_330;
    v4 = v152.__vftable;
    v5 = (char *)operator new(0x20uLL);
    v190.__imp_.__imp_ = v5 + 32;
    *(_QWORD *)&v191 = v5 + 32;
    *(_OWORD *)v5 = xmmword_1E253CFF8;
    *(_OWORD *)(v5 + 12) = *(__int128 *)((char *)&xmmword_1E253CFF8 + 12);
    v190.__vftable = (std::runtime_error_vtbl *)v5;
    v6 = (char *)operator new(0x18uLL);
    *(_QWORD *)&v135 = v6 + 24;
    *(_OWORD *)v6 = xmmword_1E253CFE0;
    *((_QWORD *)v6 + 2) = 0x100000003;
    __p.__vftable = (std::runtime_error_vtbl *)v6;
    __p.__imp_.__imp_ = v6 + 24;
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *, std::runtime_error *))v4->~runtime_error
     + 7))(&v140, v4, &v190, &__p);
    if (__p.__vftable)
    {
      __p.__imp_.__imp_ = (const char *)__p.__vftable;
      operator delete(__p.__vftable);
    }
    if (v190.__vftable)
    {
      v190.__imp_.__imp_ = (const char *)v190.__vftable;
      operator delete(v190.__vftable);
    }
    if (!v145)
    {
      std::runtime_error::runtime_error(&v190, &v140);
      v191 = v141;
      v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v192 = v142;
      *(_QWORD *)v193 = v143;
      if (v143)
      {
        *(_QWORD *)(*((_QWORD *)&v142 + 1) + 16) = (char *)&v192 + 8;
        *(_QWORD *)&v142 = (char *)&v142 + 8;
        *((_QWORD *)&v142 + 1) = 0;
        v143 = 0;
      }
      else
      {
        *(_QWORD *)&v192 = (char *)&v192 + 8;
      }
      *(_OWORD *)&v193[8] = v144;
      v144 = 0uLL;
      v193[24] = 1;
      std::runtime_error::runtime_error(&__p, &v190);
      v135 = v191;
      __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v136 = v192;
      v137 = *(_QWORD *)v193;
      if (*(_QWORD *)v193)
      {
        *(_QWORD *)(*((_QWORD *)&v192 + 1) + 16) = (char *)&v136 + 8;
        *(_QWORD *)&v192 = (char *)&v192 + 8;
        *((_QWORD *)&v192 + 1) = 0;
        *(_QWORD *)v193 = 0;
      }
      else
      {
        *(_QWORD *)&v136 = (char *)&v136 + 8;
      }
      v138 = *(_OWORD *)&v193[8];
      *(_QWORD *)&v193[8] = 0;
      *(_QWORD *)&v193[16] = 0;
      std::runtime_error::runtime_error(&v128, &__p);
      v129 = v135;
      v33 = (unsigned int *)*((_QWORD *)&v136 + 1);
      v128.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v130 = v136;
      v131 = v137;
      if (v137)
      {
        *(_QWORD *)(*((_QWORD *)&v136 + 1) + 16) = (char *)&v130 + 8;
        v33 = 0;
        *(_QWORD *)&v136 = (char *)&v136 + 8;
        *((_QWORD *)&v136 + 1) = 0;
        v137 = 0;
      }
      else
      {
        *(_QWORD *)&v130 = (char *)&v130 + 8;
      }
      v132 = v138;
      v138 = 0uLL;
      __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v136, v33);
      MEMORY[0x18D7898AC](&__p);
      std::runtime_error::runtime_error(&v104, &v128);
      v105 = v129;
      v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v34 = (unsigned int *)*((_QWORD *)&v130 + 1);
      v106 = v130;
      v107 = v131;
      if (v131)
      {
        *(_QWORD *)(*((_QWORD *)&v130 + 1) + 16) = (char *)&v106 + 8;
        v34 = 0;
        *(_QWORD *)&v130 = (char *)&v130 + 8;
        *((_QWORD *)&v130 + 1) = 0;
        v131 = 0;
      }
      else
      {
        *(_QWORD *)&v106 = (char *)&v106 + 8;
      }
      v108 = v132;
      v132 = 0uLL;
      v109 = 0;
      v128.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v130, v34);
      MEMORY[0x18D7898AC](&v128);
      if (v193[24])
      {
        v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v35 = *(std::__shared_weak_count **)&v193[16];
        if (*(_QWORD *)&v193[16])
        {
          v36 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v192, *((unsigned int **)&v192 + 1));
        MEMORY[0x18D7898AC](&v190);
        if (!v145)
        {
LABEL_275:
          ((void (*)(std::runtime_error *))v140.~runtime_error)(&v140);
          if (!v151)
            goto LABEL_276;
          goto LABEL_268;
        }
        goto LABEL_262;
      }
      goto LABEL_261;
    }
    if (!v169)
      goto LABEL_330;
    v7 = v164.__vftable;
    v8 = (char *)operator new(0x60uLL);
    v190.__imp_.__imp_ = v8 + 96;
    *(_QWORD *)&v191 = v8 + 96;
    *((_OWORD *)v8 + 2) = xmmword_1E253CE58;
    *((_OWORD *)v8 + 3) = unk_1E253CE68;
    *((_OWORD *)v8 + 4) = xmmword_1E253CE78;
    *(_OWORD *)(v8 + 76) = *(__int128 *)((char *)&xmmword_1E253CE78 + 12);
    *(_OWORD *)v8 = xmmword_1E253CE38;
    *((_OWORD *)v8 + 1) = unk_1E253CE48;
    v190.__vftable = (std::runtime_error_vtbl *)v8;
    v9 = (char *)operator new(0x60uLL);
    *(_QWORD *)&v129 = v9 + 96;
    *((_OWORD *)v9 + 2) = xmmword_1E253CF58;
    *((_OWORD *)v9 + 3) = *(_OWORD *)&off_1E253CF68;
    *((_OWORD *)v9 + 4) = xmmword_1E253CF78;
    *((_OWORD *)v9 + 5) = unk_1E253CF88;
    *(_OWORD *)v9 = xmmword_1E253CF38;
    *((_OWORD *)v9 + 1) = unk_1E253CF48;
    v128.__vftable = (std::runtime_error_vtbl *)v9;
    v128.__imp_.__imp_ = v9 + 96;
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *, std::runtime_error *))v7->~runtime_error
     + 6))(&__p, v7, &v190, &v128);
    if (v128.__vftable)
    {
      v128.__imp_.__imp_ = (const char *)v128.__vftable;
      operator delete(v128.__vftable);
    }
    if (v190.__vftable)
    {
      v190.__imp_.__imp_ = (const char *)v190.__vftable;
      operator delete(v190.__vftable);
    }
    if (!v139)
    {
      std::runtime_error::runtime_error(&v190, &__p);
      v191 = v135;
      v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v192 = v136;
      *(_QWORD *)v193 = v137;
      if (v137)
      {
        *(_QWORD *)(*((_QWORD *)&v136 + 1) + 16) = (char *)&v192 + 8;
        *(_QWORD *)&v136 = (char *)&v136 + 8;
        *((_QWORD *)&v136 + 1) = 0;
        v137 = 0;
      }
      else
      {
        *(_QWORD *)&v192 = (char *)&v192 + 8;
      }
      *(_OWORD *)&v193[8] = v138;
      v138 = 0uLL;
      v193[24] = 1;
      std::runtime_error::runtime_error(&v128, &v190);
      v129 = v191;
      v128.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v130 = v192;
      v131 = *(_QWORD *)v193;
      if (*(_QWORD *)v193)
      {
        *(_QWORD *)(*((_QWORD *)&v192 + 1) + 16) = (char *)&v130 + 8;
        *(_QWORD *)&v192 = (char *)&v192 + 8;
        *((_QWORD *)&v192 + 1) = 0;
        *(_QWORD *)v193 = 0;
      }
      else
      {
        *(_QWORD *)&v130 = (char *)&v130 + 8;
      }
      v132 = *(_OWORD *)&v193[8];
      *(_QWORD *)&v193[8] = 0;
      *(_QWORD *)&v193[16] = 0;
      std::runtime_error::runtime_error(&v122, &v128);
      v123 = v129;
      v38 = (unsigned int *)*((_QWORD *)&v130 + 1);
      v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v124 = v130;
      v125 = v131;
      if (v131)
      {
        *(_QWORD *)(*((_QWORD *)&v130 + 1) + 16) = (char *)&v124 + 8;
        v38 = 0;
        *(_QWORD *)&v130 = (char *)&v130 + 8;
        *((_QWORD *)&v130 + 1) = 0;
        v131 = 0;
      }
      else
      {
        *(_QWORD *)&v124 = (char *)&v124 + 8;
      }
      v126 = v132;
      v132 = 0uLL;
      v128.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v130, v38);
      MEMORY[0x18D7898AC](&v128);
      std::runtime_error::runtime_error(&v104, &v122);
      v105 = v123;
      v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v39 = (unsigned int *)*((_QWORD *)&v124 + 1);
      v106 = v124;
      v107 = v125;
      if (v125)
      {
        *(_QWORD *)(*((_QWORD *)&v124 + 1) + 16) = (char *)&v106 + 8;
        v39 = 0;
        *(_QWORD *)&v124 = (char *)&v124 + 8;
        *((_QWORD *)&v124 + 1) = 0;
        v125 = 0;
      }
      else
      {
        *(_QWORD *)&v106 = (char *)&v106 + 8;
      }
      v108 = v126;
      v126 = 0uLL;
      v109 = 0;
      v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, v39);
      MEMORY[0x18D7898AC](&v122);
      if (v193[24])
      {
        v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v40 = *(std::__shared_weak_count **)&v193[16];
        if (*(_QWORD *)&v193[16])
        {
          v41 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v192, *((unsigned int **)&v192 + 1));
        MEMORY[0x18D7898AC](&v190);
      }
      goto LABEL_256;
    }
    if (!v169)
      goto LABEL_330;
    v10 = v164.__vftable;
    v190.__vftable = 0;
    v190.__imp_.__imp_ = 0;
    *(_QWORD *)&v191 = 0;
    v11 = (char *)operator new(0x40uLL);
    v190.__imp_.__imp_ = v11 + 64;
    *(_QWORD *)&v191 = v11 + 64;
    *(_OWORD *)v11 = xmmword_1E253CE98;
    *((_OWORD *)v11 + 1) = unk_1E253CEA8;
    *((_OWORD *)v11 + 2) = xmmword_1E253CEB8;
    *(_OWORD *)(v11 + 44) = *(__int128 *)((char *)&xmmword_1E253CEB8 + 12);
    v190.__vftable = (std::runtime_error_vtbl *)v11;
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *))v10->~runtime_error
     + 8))(&v128, v10, &v190);
    if (v190.__vftable)
    {
      v190.__imp_.__imp_ = (const char *)v190.__vftable;
      operator delete(v190.__vftable);
    }
    if (!v133)
    {
      std::runtime_error::runtime_error(&v190, &v128);
      v191 = v129;
      v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v192 = v130;
      *(_QWORD *)v193 = v131;
      if (v131)
      {
        *(_QWORD *)(*((_QWORD *)&v130 + 1) + 16) = (char *)&v192 + 8;
        *(_QWORD *)&v130 = (char *)&v130 + 8;
        *((_QWORD *)&v130 + 1) = 0;
        v131 = 0;
      }
      else
      {
        *(_QWORD *)&v192 = (char *)&v192 + 8;
      }
      *(_OWORD *)&v193[8] = v132;
      v132 = 0uLL;
      v193[24] = 1;
      std::runtime_error::runtime_error(&v122, &v190);
      v123 = v191;
      v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v124 = v192;
      v125 = *(_QWORD *)v193;
      if (*(_QWORD *)v193)
      {
        *(_QWORD *)(*((_QWORD *)&v192 + 1) + 16) = (char *)&v124 + 8;
        *(_QWORD *)&v192 = (char *)&v192 + 8;
        *((_QWORD *)&v192 + 1) = 0;
        *(_QWORD *)v193 = 0;
      }
      else
      {
        *(_QWORD *)&v124 = (char *)&v124 + 8;
      }
      v126 = *(_OWORD *)&v193[8];
      *(_QWORD *)&v193[8] = 0;
      *(_QWORD *)&v193[16] = 0;
      std::runtime_error::runtime_error(&v116, &v122);
      v117 = v123;
      v44 = (unsigned int *)*((_QWORD *)&v124 + 1);
      v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v118 = v124;
      v119 = v125;
      if (v125)
      {
        *(_QWORD *)(*((_QWORD *)&v124 + 1) + 16) = (char *)&v118 + 8;
        v44 = 0;
        *(_QWORD *)&v124 = (char *)&v124 + 8;
        *((_QWORD *)&v124 + 1) = 0;
        v125 = 0;
      }
      else
      {
        *(_QWORD *)&v118 = (char *)&v118 + 8;
      }
      v120 = v126;
      v126 = 0uLL;
      v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, v44);
      MEMORY[0x18D7898AC](&v122);
      std::runtime_error::runtime_error(&v104, &v116);
      v105 = v117;
      v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v45 = (unsigned int *)*((_QWORD *)&v118 + 1);
      v106 = v118;
      v107 = v119;
      if (v119)
      {
        *(_QWORD *)(*((_QWORD *)&v118 + 1) + 16) = (char *)&v106 + 8;
        v45 = 0;
        *(_QWORD *)&v118 = (char *)&v118 + 8;
        *((_QWORD *)&v118 + 1) = 0;
        v119 = 0;
      }
      else
      {
        *(_QWORD *)&v106 = (char *)&v106 + 8;
      }
      v108 = v120;
      v120 = 0uLL;
      v109 = 0;
      v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v45);
      MEMORY[0x18D7898AC](&v116);
      if (v193[24])
      {
        v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v46 = *(std::__shared_weak_count **)&v193[16];
        if (*(_QWORD *)&v193[16])
        {
          v47 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v192, *((unsigned int **)&v192 + 1));
        MEMORY[0x18D7898AC](&v190);
      }
      goto LABEL_249;
    }
    if (!v169)
      goto LABEL_330;
    v190.__vftable = 0;
    v190.__imp_.__imp_ = 0;
    *(_QWORD *)&v191 = 0;
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *))v164.~runtime_error
     + 10))(&v122, v164.__vftable, &v190);
    if (v190.__vftable)
    {
      v190.__imp_.__imp_ = (const char *)v190.__vftable;
      operator delete(v190.__vftable);
    }
    if (!v127)
    {
      std::runtime_error::runtime_error(&v190, &v122);
      v191 = v123;
      v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v192 = v124;
      *(_QWORD *)v193 = v125;
      if (v125)
      {
        *(_QWORD *)(*((_QWORD *)&v124 + 1) + 16) = (char *)&v192 + 8;
        *(_QWORD *)&v124 = (char *)&v124 + 8;
        *((_QWORD *)&v124 + 1) = 0;
        v125 = 0;
      }
      else
      {
        *(_QWORD *)&v192 = (char *)&v192 + 8;
      }
      *(_OWORD *)&v193[8] = v126;
      v126 = 0uLL;
      v193[24] = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v116, (uint64_t)&v190);
      std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v104, (uint64_t)&v116);
      std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v116);
    }
    LOBYTE(v190.__vftable) = 0;
    v193[24] = 0;
    std::optional<AMSCore::Error>::~optional((uint64_t)&v190);
    if (!v169)
      goto LABEL_330;
    v12 = v164.__vftable;
    v190 = (std::runtime_error)xmmword_1E253CED8;
    v191 = unk_1E253CEE8;
    std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](v114, &v190, 1uLL);
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, void **))v12->~runtime_error
     + 10))(&v116, v12, v114);
    if (v114[0])
    {
      v114[1] = v114[0];
      operator delete(v114[0]);
    }
    AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>(&v190, (uint64_t)&v116);
    if (v193[24])
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v114, (uint64_t)&v190);
      std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v104, (uint64_t)v114);
      std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v114);
    }
    std::optional<AMSCore::Error>::~optional((uint64_t)&v190);
    if (!v169)
      goto LABEL_330;
    v43 = v164.__vftable;
    v188[0] = xmmword_1E253CEF8;
    v188[1] = unk_1E253CF08;
    v188[2] = xmmword_1E253CF18;
    v188[3] = unk_1E253CF28;
    std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](&v185, v188, 2uLL);
    v192 = xmmword_1E253CF58;
    *(_OWORD *)v193 = *(_OWORD *)&off_1E253CF68;
    *(_OWORD *)&v193[16] = xmmword_1E253CF78;
    v194 = unk_1E253CF88;
    v190 = (std::runtime_error)xmmword_1E253CF38;
    v191 = unk_1E253CF48;
    std::vector<AMSCore::StructuredData::ColumnDesc>::vector[abi:fe180100](&v182, &v190, 4uLL);
    (*((void (**)(void **__return_ptr, std::runtime_error_vtbl *, __int128 *, void **))v43->~runtime_error + 6))(v114, v43, &v185, &v182);
    if (v182)
    {
      v183 = v182;
      operator delete(v182);
    }
    if ((_QWORD)v185)
    {
      *((_QWORD *)&v185 + 1) = v185;
      operator delete((void *)v185);
    }
    AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>(&v190, (uint64_t)v114);
    if (v193[24])
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v188, (uint64_t)&v190);
      std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v104, (uint64_t)v188);
      std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v188);
    }
    std::optional<AMSCore::Error>::~optional((uint64_t)&v190);
    if (!v169)
      goto LABEL_330;
    v49 = v164.__vftable;
    v192 = xmmword_1E253CFB8;
    *(_OWORD *)v193 = *(_OWORD *)&off_1E253CFC8;
    *(_QWORD *)&v193[16] = 0x100000003;
    v190 = (std::runtime_error)xmmword_1E253CF98;
    v191 = unk_1E253CFA8;
    std::vector<AMSCore::StructuredData::ColumnDesc>::vector[abi:fe180100](&v182, &v190, 3uLL);
    v185 = xmmword_1E253CFF8;
    v186 = xmmword_1E253D008;
    std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](v180, &v185, 1uLL);
    (*((void (**)(_OWORD *__return_ptr, std::runtime_error_vtbl *, void **, void **))v49->~runtime_error + 5))(v188, v49, &v182, v180);
    if (v180[0])
    {
      v180[1] = v180[0];
      operator delete(v180[0]);
    }
    if (v182)
    {
      v183 = v182;
      operator delete(v182);
    }
    AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>(&v190, (uint64_t)v188);
    if (v193[24])
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v185, (uint64_t)&v190);
      std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v104, (uint64_t)&v185);
      std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v185);
    }
    std::optional<AMSCore::Error>::~optional((uint64_t)&v190);
    if (!v157)
      goto LABEL_330;
    v50 = v152.__vftable;
    *(_OWORD *)v180 = xmmword_1E253CFE0;
    v180[2] = (void *)0x100000003;
    std::vector<AMSCore::StructuredData::ColumnDesc>::vector[abi:fe180100](&v182, v180, 1uLL);
    v190 = (std::runtime_error)xmmword_1E253CFF8;
    v191 = xmmword_1E253D008;
    std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](v178, &v190, 1uLL);
    (*((void (**)(__int128 *__return_ptr, std::runtime_error_vtbl *, void **, void **))v50->~runtime_error + 5))(&v185, v50, &v182, v178);
    if (v178[0])
    {
      v178[1] = v178[0];
      operator delete(v178[0]);
    }
    if (v182)
    {
      v183 = v182;
      operator delete(v182);
    }
    AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>(&v190, (uint64_t)&v185);
    if (v193[24])
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v182, (uint64_t)&v190);
      std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v104, (uint64_t)&v182);
      std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v182);
    }
    std::optional<AMSCore::Error>::~optional((uint64_t)&v190);
    v51 = operator new();
    v52 = v103;
    v103 = 0uLL;
    v112 = v102;
    v113 = v52;
    v102 = 0uLL;
    if (!v169)
      goto LABEL_330;
    v53 = v164.__vftable;
    v164.__vftable = 0;
    v111 = v53;
    if (!v157)
      goto LABEL_330;
    v54 = v152.__vftable;
    v152.__vftable = 0;
    v110 = v54;
    if (!v163)
      goto LABEL_330;
    v55 = (std::runtime_error_vtbl *)v51;
    std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::function((uint64_t)&v182, (uint64_t)&v158);
    if (!v133)
      goto LABEL_330;
    std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::function((uint64_t)v180, (uint64_t)&v128);
    if (!v139)
      goto LABEL_330;
    std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::function((uint64_t)v178, (uint64_t)&__p);
    if (!v127)
      goto LABEL_330;
    std::function<std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::function((uint64_t)v176, (uint64_t)&v122);
    if (!v121)
      goto LABEL_330;
    std::function<std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::function((uint64_t)v174, (uint64_t)&v116);
    if (!v145)
      goto LABEL_330;
    std::function<std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::function((uint64_t)v172, (uint64_t)&v140);
    if (!v151)
      goto LABEL_330;
    std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::function((uint64_t)v170, (uint64_t)&v146);
    if (!v189)
      goto LABEL_330;
    std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::function((uint64_t)&v190, (uint64_t)v188);
    if (!v187)
      goto LABEL_330;
    std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::function((uint64_t)&v192, (uint64_t)&v185);
    if (!v115)
      goto LABEL_330;
    std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::function((uint64_t)&v193[16], (uint64_t)v114);
    AMSCore::MetricsIdentifierDataAccessObject::MetricsIdentifierDataAccessObject((uint64_t)v55, (uint64_t)&v113, (uint64_t)&v112, (uint64_t *)&v111, (uint64_t *)&v110, (uint64_t)&v182, (uint64_t)v180, (uint64_t)v178, (uint64_t)v176, (uint64_t)v174, (uint64_t)v172, (uint64_t)v170, &v190);
    v104.__vftable = v55;
    v109 = 1;
    AMSCore::MetricsIdentifierDataAccessObject::MigrateF::~MigrateF((AMSCore::MetricsIdentifierDataAccessObject::MigrateF *)&v190);
    v56 = v171;
    if (v171 == v170)
    {
      v57 = 4;
      v56 = v170;
    }
    else
    {
      if (!v171)
        goto LABEL_208;
      v57 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_208:
    v58 = v173;
    if (v173 == v172)
    {
      v59 = 4;
      v58 = v172;
    }
    else
    {
      if (!v173)
        goto LABEL_213;
      v59 = 5;
    }
    (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_213:
    v60 = v175;
    if (v175 == v174)
    {
      v61 = 4;
      v60 = v174;
    }
    else
    {
      if (!v175)
        goto LABEL_218;
      v61 = 5;
    }
    (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_218:
    v62 = v177;
    if (v177 == v176)
    {
      v63 = 4;
      v62 = v176;
    }
    else
    {
      if (!v177)
        goto LABEL_223;
      v63 = 5;
    }
    (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_223:
    v64 = v179;
    if (v179 == v178)
    {
      v65 = 4;
      v64 = v178;
    }
    else
    {
      if (!v179)
        goto LABEL_228;
      v65 = 5;
    }
    (*((void (**)(void))*v64 + v65))();
LABEL_228:
    v66 = v181;
    if (v181 == v180)
    {
      v67 = 4;
      v66 = v180;
    }
    else
    {
      if (!v181)
        goto LABEL_233;
      v67 = 5;
    }
    (*((void (**)(void))*v66 + v67))();
LABEL_233:
    v68 = v184;
    if (v184 == &v182)
    {
      v69 = 4;
      v68 = &v182;
    }
    else
    {
      if (!v184)
        goto LABEL_238;
      v69 = 5;
    }
    (*((void (**)(void))*v68 + v69))();
LABEL_238:
    if (v110)
      (*((void (**)(std::runtime_error_vtbl *))v110->~runtime_error + 1))(v110);
    if (v111)
      (*((void (**)(std::runtime_error_vtbl *))v111->~runtime_error + 1))(v111);
    std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&v112);
    std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&v113);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&v185);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)v188);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)v114);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&v116);
    if (v127)
    {
      v70 = (std::runtime_error *)*((_QWORD *)&v123 + 1);
      if (*((std::runtime_error **)&v123 + 1) == &v122)
      {
        v71 = 4;
        v70 = &v122;
      }
      else
      {
        if (!*((_QWORD *)&v123 + 1))
          goto LABEL_249;
        v71 = 5;
      }
      (*((void (**)(void))&v70->~runtime_error + v71))();
    }
    else
    {
      ((void (*)(std::runtime_error *))v122.~runtime_error)(&v122);
    }
LABEL_249:
    if (v133)
    {
      v72 = (std::runtime_error *)*((_QWORD *)&v129 + 1);
      if (*((std::runtime_error **)&v129 + 1) == &v128)
      {
        v73 = 4;
        v72 = &v128;
      }
      else
      {
        if (!*((_QWORD *)&v129 + 1))
          goto LABEL_256;
        v73 = 5;
      }
      (*((void (**)(void))&v72->~runtime_error + v73))();
    }
    else
    {
      ((void (*)(std::runtime_error *))v128.~runtime_error)(&v128);
    }
LABEL_256:
    if (v139)
    {
      p_p = (std::runtime_error *)*((_QWORD *)&v135 + 1);
      if (*((std::runtime_error **)&v135 + 1) == &__p)
      {
        v75 = 4;
        p_p = &__p;
LABEL_274:
        (*((void (**)(void))&p_p->~runtime_error + v75))();
        if (!v145)
          goto LABEL_275;
        goto LABEL_262;
      }
      if (*((_QWORD *)&v135 + 1))
      {
        v75 = 5;
        goto LABEL_274;
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
    }
LABEL_261:
    if (!v145)
      goto LABEL_275;
LABEL_262:
    v76 = (std::runtime_error *)*((_QWORD *)&v141 + 1);
    if (*((std::runtime_error **)&v141 + 1) == &v140)
    {
      v77 = 4;
      v76 = &v140;
    }
    else
    {
      if (!*((_QWORD *)&v141 + 1))
        goto LABEL_267;
      v77 = 5;
    }
    (*((void (**)(void))&v76->~runtime_error + v77))();
LABEL_267:
    if (!v151)
    {
LABEL_276:
      ((void (*)(std::runtime_error *))v146.~runtime_error)(&v146);
      goto LABEL_277;
    }
    goto LABEL_268;
  }
  std::runtime_error::runtime_error(&v190, &v146);
  v191 = v147;
  v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v192 = v148;
  *(_QWORD *)v193 = v149;
  if (v149)
  {
    *(_QWORD *)(*((_QWORD *)&v148 + 1) + 16) = (char *)&v192 + 8;
    *(_QWORD *)&v148 = (char *)&v148 + 8;
    *((_QWORD *)&v148 + 1) = 0;
    v149 = 0;
  }
  else
  {
    *(_QWORD *)&v192 = (char *)&v192 + 8;
  }
  *(_OWORD *)&v193[8] = v150;
  v150 = 0uLL;
  v193[24] = 1;
  std::runtime_error::runtime_error(&v140, &v190);
  v141 = v191;
  v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v142 = v192;
  v143 = *(_QWORD *)v193;
  if (*(_QWORD *)v193)
  {
    *(_QWORD *)(*((_QWORD *)&v192 + 1) + 16) = (char *)&v142 + 8;
    *(_QWORD *)&v192 = (char *)&v192 + 8;
    *((_QWORD *)&v192 + 1) = 0;
    *(_QWORD *)v193 = 0;
  }
  else
  {
    *(_QWORD *)&v142 = (char *)&v142 + 8;
  }
  v144 = *(_OWORD *)&v193[8];
  *(_QWORD *)&v193[8] = 0;
  *(_QWORD *)&v193[16] = 0;
  std::runtime_error::runtime_error(&__p, &v140);
  v135 = v141;
  v28 = (unsigned int *)*((_QWORD *)&v142 + 1);
  __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v136 = v142;
  v137 = v143;
  if (v143)
  {
    *(_QWORD *)(*((_QWORD *)&v142 + 1) + 16) = (char *)&v136 + 8;
    v28 = 0;
    *(_QWORD *)&v142 = (char *)&v142 + 8;
    *((_QWORD *)&v142 + 1) = 0;
    v143 = 0;
  }
  else
  {
    *(_QWORD *)&v136 = (char *)&v136 + 8;
  }
  v138 = v144;
  v144 = 0uLL;
  v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v142, v28);
  MEMORY[0x18D7898AC](&v140);
  std::runtime_error::runtime_error(&v104, &__p);
  v105 = v135;
  v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v29 = (unsigned int *)*((_QWORD *)&v136 + 1);
  v106 = v136;
  v107 = v137;
  if (v137)
  {
    *(_QWORD *)(*((_QWORD *)&v136 + 1) + 16) = (char *)&v106 + 8;
    v29 = 0;
    *(_QWORD *)&v136 = (char *)&v136 + 8;
    *((_QWORD *)&v136 + 1) = 0;
    v137 = 0;
  }
  else
  {
    *(_QWORD *)&v106 = (char *)&v106 + 8;
  }
  v108 = v138;
  v138 = 0uLL;
  v109 = 0;
  __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v136, v29);
  MEMORY[0x18D7898AC](&__p);
  if (!v193[24])
    goto LABEL_267;
  v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v30 = *(std::__shared_weak_count **)&v193[16];
  if (*(_QWORD *)&v193[16])
  {
    v31 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v192, *((unsigned int **)&v192 + 1));
  MEMORY[0x18D7898AC](&v190);
  if (!v151)
    goto LABEL_276;
LABEL_268:
  v78 = (std::runtime_error *)*((_QWORD *)&v147 + 1);
  if (*((std::runtime_error **)&v147 + 1) == &v146)
  {
    v79 = 4;
    v78 = &v146;
  }
  else
  {
    if (!*((_QWORD *)&v147 + 1))
      goto LABEL_277;
    v79 = 5;
  }
  (*((void (**)(void))&v78->~runtime_error + v79))();
LABEL_277:
  v80 = v152.__vftable;
  if (!v157)
  {
    ((void (*)(std::runtime_error *))v152.~runtime_error)(&v152);
    if (v163)
      goto LABEL_281;
    goto LABEL_287;
  }
  v152.__vftable = 0;
  if (v80)
    (*((void (**)(std::runtime_error_vtbl *))v80->~runtime_error + 1))(v80);
LABEL_280:
  if (!v163)
    goto LABEL_287;
LABEL_281:
  v81 = (std::runtime_error *)*((_QWORD *)&v159 + 1);
  if (*((std::runtime_error **)&v159 + 1) == &v158)
  {
    v82 = 4;
    v81 = &v158;
  }
  else
  {
    if (!*((_QWORD *)&v159 + 1))
      goto LABEL_288;
    v82 = 5;
  }
  (*((void (**)(void))&v81->~runtime_error + v82))();
LABEL_288:
  v83 = v164.__vftable;
  if (!v169)
  {
    ((void (*)(std::runtime_error *))v164.~runtime_error)(&v164);
    v84 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    if (!*((_QWORD *)&v102 + 1))
      goto LABEL_298;
    goto LABEL_294;
  }
  v164.__vftable = 0;
  if (v83)
    (*((void (**)(std::runtime_error_vtbl *))v83->~runtime_error + 1))(v83);
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
LABEL_294:
    p_shared_owners = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
LABEL_298:
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (!*((_QWORD *)&v103 + 1))
    goto LABEL_302;
  v88 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    if (v109)
    {
LABEL_303:
      v90 = (_QWORD *)operator new();
      if (v109)
      {
        v91 = v90;
        v92 = v104.__vftable;
        v104.__vftable = 0;
        *v90 = &off_1E2521230;
        v90[1] = v92;
        v93 = (_QWORD *)operator new();
        *v93 = &off_1E25232D0;
        v93[1] = 0;
        v93[2] = 0;
        v93[3] = v91;
        *(_QWORD *)this = v91;
        *((_QWORD *)this + 1) = v93;
        *((_BYTE *)this + 72) = 1;
        goto LABEL_325;
      }
LABEL_330:
      __break(1u);
    }
  }
  else
  {
LABEL_302:
    if (v109)
      goto LABEL_303;
  }
  std::runtime_error::runtime_error(&v190, &v104);
  v191 = v105;
  v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v192 = v106;
  *(_QWORD *)v193 = v107;
  if (v107)
  {
    *(_QWORD *)(*((_QWORD *)&v106 + 1) + 16) = (char *)&v192 + 8;
    *(_QWORD *)&v106 = (char *)&v106 + 8;
    *((_QWORD *)&v106 + 1) = 0;
    v107 = 0;
  }
  else
  {
    *(_QWORD *)&v192 = (char *)&v192 + 8;
  }
  *(_OWORD *)&v193[8] = v108;
  v108 = 0uLL;
  v193[24] = 1;
  std::runtime_error::runtime_error(&v164, &v190);
  v165 = v191;
  v164.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v166 = v192;
  v167 = *(_QWORD *)v193;
  if (*(_QWORD *)v193)
  {
    *(_QWORD *)(*((_QWORD *)&v192 + 1) + 16) = (char *)&v166 + 8;
    *(_QWORD *)&v192 = (char *)&v192 + 8;
    *((_QWORD *)&v192 + 1) = 0;
    *(_QWORD *)v193 = 0;
  }
  else
  {
    *(_QWORD *)&v166 = (char *)&v166 + 8;
  }
  v168 = *(_OWORD *)&v193[8];
  *(_QWORD *)&v193[8] = 0;
  *(_QWORD *)&v193[16] = 0;
  std::runtime_error::runtime_error(&v158, &v164);
  v159 = v165;
  v94 = (unsigned int *)*((_QWORD *)&v166 + 1);
  v158.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v160 = v166;
  v161 = v167;
  if (v167)
  {
    *(_QWORD *)(*((_QWORD *)&v166 + 1) + 16) = (char *)&v160 + 8;
    v94 = 0;
    *(_QWORD *)&v166 = (char *)&v166 + 8;
    *((_QWORD *)&v166 + 1) = 0;
    v167 = 0;
  }
  else
  {
    *(_QWORD *)&v160 = (char *)&v160 + 8;
  }
  v162 = v168;
  v168 = 0uLL;
  v164.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v166, v94);
  MEMORY[0x18D7898AC](&v164);
  std::runtime_error::runtime_error((std::runtime_error *)this, &v158);
  *((_OWORD *)this + 1) = v159;
  *(_QWORD *)this = off_1E2521330;
  v95 = *((_QWORD *)&v160 + 1);
  *((_QWORD *)this + 4) = v160;
  *((_QWORD *)this + 5) = v95;
  v96 = (char *)this + 40;
  v97 = v161;
  *((_QWORD *)this + 6) = v161;
  if (v97)
  {
    *(_QWORD *)(v95 + 16) = v96;
    v95 = 0;
    *(_QWORD *)&v160 = (char *)&v160 + 8;
    *((_QWORD *)&v160 + 1) = 0;
    v161 = 0;
  }
  else
  {
    *((_QWORD *)this + 4) = v96;
  }
  *(_OWORD *)((char *)this + 56) = v162;
  v162 = 0uLL;
  *((_BYTE *)this + 72) = 0;
  v158.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v160, (unsigned int *)v95);
  MEMORY[0x18D7898AC](&v158);
  if (v193[24])
  {
    v190.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v98 = *(std::__shared_weak_count **)&v193[16];
    if (*(_QWORD *)&v193[16])
    {
      v99 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v192, *((unsigned int **)&v192 + 1));
    MEMORY[0x18D7898AC](&v190);
  }
LABEL_325:
  result = (AMSCore::MetricsIdentifierDataAccessObject *)v104.__vftable;
  if (!v109)
    return (AMSCore::MetricsIdentifierDataAccessObject *)((uint64_t (*)(std::runtime_error *))v104.~runtime_error)(&v104);
  v104.__vftable = 0;
  if (result)
  {
    AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(result);
    return (AMSCore::MetricsIdentifierDataAccessObject *)MEMORY[0x18D789BDC]();
  }
  return result;
}

void sub_18CCACC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,__int16 a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  unint64_t v64;
  unint64_t v65;

  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x590]);
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x5E0]);
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a53);
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a63);
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x200]);
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x250]);
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x2A0]);
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x2F0]);
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x340]);
  v64 = STACK[0x390];
  if (LOBYTE(STACK[0x3D8]))
  {
    STACK[0x390] = 0;
    if (v64)
      (*(void (**)(unint64_t))(*(_QWORD *)v64 + 8))(v64);
  }
  else
  {
    (*(void (**)(unint64_t *))v64)(&STACK[0x390]);
  }
  std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x3E0]);
  v65 = STACK[0x430];
  if (LOBYTE(STACK[0x478]))
  {
    STACK[0x430] = 0;
    if (v65)
      (*(void (**)(unint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  else
  {
    (*(void (**)(unint64_t *))v65)(&STACK[0x430]);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a33);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

AMSCore::MetricsIdentifierDataAccessObject **std::unique_ptr<AMSCore::MetricsIdentifierDataAccessObject>::~unique_ptr[abi:fe180100](AMSCore::MetricsIdentifierDataAccessObject **a1)
{
  AMSCore::MetricsIdentifierDataAccessObject *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(v2);
    MEMORY[0x18D789BDC]();
  }
  return a1;
}

uint64_t std::expected<std::unique_ptr<AMSCore::MetricsIdentifierDataAccessObject>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  int v2;
  AMSCore::MetricsIdentifierDataAccessObject *v3;

  v2 = *(unsigned __int8 *)(a1 + 72);
  v3 = *(AMSCore::MetricsIdentifierDataAccessObject **)a1;
  if (v2)
  {
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(v3);
      MEMORY[0x18D789BDC]();
    }
  }
  else
  {
    (*(void (**)(uint64_t))v3)(a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::MetricsIdentifierProvider *,std::shared_ptr<AMSCore::MetricsIdentifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsIdentifierProvider,AMSCore::MetricsIdentifierProvider>,std::allocator<AMSCore::MetricsIdentifierProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::MetricsIdentifierProvider *,std::shared_ptr<AMSCore::MetricsIdentifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsIdentifierProvider,AMSCore::MetricsIdentifierProvider>,std::allocator<AMSCore::MetricsIdentifierProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::MetricsIdentifierProvider *,std::shared_ptr<AMSCore::MetricsIdentifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsIdentifierProvider,AMSCore::MetricsIdentifierProvider>,std::allocator<AMSCore::MetricsIdentifierProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN7AMSCore25MetricsIdentifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN7AMSCore25MetricsIdentifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN7AMSCore25MetricsIdentifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN7AMSCore25MetricsIdentifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::IMetricsProvider::enqueueEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  _QWORD *v11;
  _QWORD *v12;

  v3 = *a2;
  *a2 = 0;
  v4 = operator new(8uLL);
  __p = v4;
  *v4 = v3;
  v11 = v4 + 1;
  v12 = v4 + 1;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, &__p);
  v5 = __p;
  if (__p)
  {
    v6 = v11;
    v7 = __p;
    if (v11 != __p)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = __p;
    }
    v11 = v5;
    operator delete(v7);
  }
}

void sub_18CCAD0A8(void *a1)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __clang_call_terminate(a1);
}

std::runtime_error_vtbl *AMSCore::IMetricsProvider::makeDefault(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::runtime_error_vtbl *v7;
  _OWORD *v8;
  std::runtime_error_vtbl *v9;
  _OWORD *v10;
  std::runtime_error_vtbl *v11;
  _QWORD *v12;
  std::runtime_error_vtbl *v13;
  _QWORD *v14;
  char *v15;
  std::runtime_error_vtbl *v16;
  _OWORD *v17;
  char *v18;
  std::runtime_error_vtbl *v19;
  unsigned int *v20;
  unsigned int *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error_vtbl *v50;
  unsigned int *v51;
  unsigned int *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::runtime_error_vtbl *v56;
  std::runtime_error_vtbl *v57;
  _QWORD *v58;
  std::runtime_error *v59;
  uint64_t v60;
  std::runtime_error *v61;
  uint64_t v62;
  std::runtime_error *v63;
  uint64_t v64;
  std::runtime_error *v65;
  uint64_t v66;
  std::runtime_error *imp;
  uint64_t v68;
  std::runtime_error *v69;
  uint64_t v70;
  std::runtime_error *v71;
  uint64_t v72;
  std::runtime_error_vtbl *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  std::__shared_count v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  std::runtime_error_vtbl *v80;
  std::__shared_count v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  __int128 *p_p;
  uint64_t v94;
  std::runtime_error v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::runtime_error *v102;
  uint64_t v103;
  std::runtime_error *v104;
  uint64_t v105;
  std::runtime_error *v106;
  uint64_t v107;
  std::__shared_weak_count *shared_weak_owners;
  __int128 v109;
  unint64_t v110;
  unint64_t *p_shared_weak_owners;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int *v117;
  std::runtime_error *v118;
  uint64_t v119;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::runtime_error_vtbl *result;
  __int128 v126;
  std::__shared_count v127;
  __int128 v128;
  __int128 v129;
  _QWORD *v131;
  void *v132[9];
  void *v133[3];
  std::runtime_error v134;
  std::runtime_error v135;
  __int128 v136;
  std::runtime_error_vtbl *v137;
  __int128 v138;
  char v139;
  std::runtime_error v140;
  std::runtime_error v141;
  __int128 v142;
  std::runtime_error_vtbl *v143;
  __int128 v144;
  char v145;
  std::runtime_error v146;
  std::runtime_error v147;
  __int128 v148;
  std::runtime_error_vtbl *v149;
  __int128 v150;
  char v151;
  std::runtime_error v152;
  std::runtime_error v153;
  __int128 v154;
  std::runtime_error_vtbl *v155;
  __int128 v156;
  char v157;
  std::runtime_error v158;
  std::runtime_error v159;
  __int128 v160;
  std::runtime_error_vtbl *v161;
  __int128 v162;
  char v163;
  std::runtime_error v164;
  std::runtime_error v165;
  __int128 v166;
  std::runtime_error_vtbl *v167;
  __int128 v168;
  char v169;
  std::runtime_error v170;
  std::runtime_error v171;
  __int128 v172;
  std::runtime_error_vtbl *v173;
  __int128 v174;
  char v175;
  std::runtime_error v176[4];
  char v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  char v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  char v186;
  __int128 __p;
  std::runtime_error v188;
  __int128 v189;
  _BYTE v190[32];
  __int128 v191;
  std::runtime_error v192;
  std::runtime_error v193;
  __int128 v194;
  std::runtime_error_vtbl *v195;
  __int128 v196;
  char v197;
  std::runtime_error v198;
  std::runtime_error v199;
  __int128 v200;
  std::runtime_error_vtbl *v201;
  __int128 v202;
  char v203;
  std::runtime_error v204;
  std::runtime_error v205;
  __int128 v206;
  std::runtime_error_vtbl *v207;
  __int128 v208;
  char v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)operator new();
  *v3 = &off_1E2520798;
  v131 = v3;
  AMSCore::ServiceProvider<AMSCore::StructuredData::IStructuredDataProvider>::getDefault(&__p);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v209)
  {
    std::runtime_error::runtime_error((std::runtime_error *)&__p, &v204);
    v188 = v205;
    *(_QWORD *)&__p = off_1E2521330;
    v189 = v206;
    *(_QWORD *)v190 = v207;
    if (v207)
    {
      *(_QWORD *)(*((_QWORD *)&v206 + 1) + 16) = (char *)&v189 + 8;
      *(_QWORD *)&v206 = (char *)&v206 + 8;
      *((_QWORD *)&v206 + 1) = 0;
      v207 = 0;
    }
    else
    {
      *(_QWORD *)&v189 = (char *)&v189 + 8;
    }
    *(_OWORD *)&v190[8] = v208;
    v208 = 0uLL;
    v190[24] = 1;
    std::runtime_error::runtime_error(&v198, (const std::runtime_error *)&__p);
    v199 = v188;
    v198.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v200 = v189;
    v201 = *(std::runtime_error_vtbl **)v190;
    if (*(_QWORD *)v190)
    {
      *(_QWORD *)(*((_QWORD *)&v189 + 1) + 16) = (char *)&v200 + 8;
      *(_QWORD *)&v189 = (char *)&v189 + 8;
      *((_QWORD *)&v189 + 1) = 0;
      *(_QWORD *)v190 = 0;
    }
    else
    {
      *(_QWORD *)&v200 = (char *)&v200 + 8;
    }
    v202 = *(_OWORD *)&v190[8];
    *(_QWORD *)&v190[8] = 0;
    *(_QWORD *)&v190[16] = 0;
    std::runtime_error::runtime_error(&v192, &v198);
    v193 = v199;
    v192.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v20 = (unsigned int *)*((_QWORD *)&v200 + 1);
    v194 = v200;
    v195 = v201;
    if (v201)
    {
      *(_QWORD *)(*((_QWORD *)&v200 + 1) + 16) = (char *)&v194 + 8;
      v20 = 0;
      *(_QWORD *)&v200 = (char *)&v200 + 8;
      *((_QWORD *)&v200 + 1) = 0;
      v201 = 0;
    }
    else
    {
      *(_QWORD *)&v194 = (char *)&v194 + 8;
    }
    v196 = v202;
    v202 = 0uLL;
    v198.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v200, v20);
    MEMORY[0x18D7898AC](&v198);
    std::runtime_error::runtime_error(&v170, &v192);
    v171 = v193;
    v21 = (unsigned int *)*((_QWORD *)&v194 + 1);
    v170.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v172 = v194;
    v173 = v195;
    if (v195)
    {
      *(_QWORD *)(*((_QWORD *)&v194 + 1) + 16) = (char *)&v172 + 8;
      v21 = 0;
      *(_QWORD *)&v194 = (char *)&v194 + 8;
      *((_QWORD *)&v194 + 1) = 0;
      v195 = 0;
    }
    else
    {
      *(_QWORD *)&v172 = (char *)&v172 + 8;
    }
    v174 = v196;
    v196 = 0uLL;
    v175 = 0;
    v192.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v194, v21);
    MEMORY[0x18D7898AC](&v192);
    if (v190[24])
    {
      *(_QWORD *)&__p = off_1E2521330;
      v22 = *(std::__shared_weak_count **)&v190[16];
      if (*(_QWORD *)&v190[16])
      {
        v23 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v189, *((unsigned int **)&v189 + 1));
      MEMORY[0x18D7898AC](&__p);
    }
    goto LABEL_269;
  }
  (*((void (**)(std::runtime_error *__return_ptr))v204.~runtime_error + 4))(&v198);
  if (v203)
  {
    if (v209)
    {
      v7 = v204.__vftable;
      v8 = operator new(0x20uLL);
      v188.__vftable = (std::runtime_error_vtbl *)(v8 + 2);
      *v8 = xmmword_1E253CCB8;
      *(_OWORD *)((char *)v8 + 12) = *(__int128 *)((char *)&xmmword_1E253CCB8 + 12);
      *(_QWORD *)&__p = v8;
      *((_QWORD *)&__p + 1) = v8 + 2;
      (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, __int128 *))v7->~runtime_error
       + 8))(&v192, v7, &__p);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (!v197)
      {
        std::runtime_error::runtime_error((std::runtime_error *)&__p, &v192);
        v188 = v193;
        *(_QWORD *)&__p = off_1E2521330;
        v189 = v194;
        *(_QWORD *)v190 = v195;
        if (v195)
        {
          *(_QWORD *)(*((_QWORD *)&v194 + 1) + 16) = (char *)&v189 + 8;
          *(_QWORD *)&v194 = (char *)&v194 + 8;
          *((_QWORD *)&v194 + 1) = 0;
          v195 = 0;
        }
        else
        {
          *(_QWORD *)&v189 = (char *)&v189 + 8;
        }
        *(_OWORD *)&v190[8] = v196;
        v196 = 0uLL;
        v190[24] = 1;
        std::runtime_error::runtime_error(&v164, (const std::runtime_error *)&__p);
        v165 = v188;
        v164.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v166 = v189;
        v167 = *(std::runtime_error_vtbl **)v190;
        if (*(_QWORD *)v190)
        {
          *(_QWORD *)(*((_QWORD *)&v189 + 1) + 16) = (char *)&v166 + 8;
          *(_QWORD *)&v189 = (char *)&v189 + 8;
          *((_QWORD *)&v189 + 1) = 0;
          *(_QWORD *)v190 = 0;
        }
        else
        {
          *(_QWORD *)&v166 = (char *)&v166 + 8;
        }
        v168 = *(_OWORD *)&v190[8];
        *(_QWORD *)&v190[8] = 0;
        *(_QWORD *)&v190[16] = 0;
        std::runtime_error::runtime_error(&v158, &v164);
        v159 = v165;
        v30 = (unsigned int *)*((_QWORD *)&v166 + 1);
        v158.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v160 = v166;
        v161 = v167;
        if (v167)
        {
          *(_QWORD *)(*((_QWORD *)&v166 + 1) + 16) = (char *)&v160 + 8;
          v30 = 0;
          *(_QWORD *)&v166 = (char *)&v166 + 8;
          *((_QWORD *)&v166 + 1) = 0;
          v167 = 0;
        }
        else
        {
          *(_QWORD *)&v160 = (char *)&v160 + 8;
        }
        v162 = v168;
        v168 = 0uLL;
        v164.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v166, v30);
        MEMORY[0x18D7898AC](&v164);
        std::runtime_error::runtime_error(&v170, &v158);
        v171 = v159;
        v31 = (unsigned int *)*((_QWORD *)&v160 + 1);
        v170.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v172 = v160;
        v173 = v161;
        if (v161)
        {
          *(_QWORD *)(*((_QWORD *)&v160 + 1) + 16) = (char *)&v172 + 8;
          v31 = 0;
          *(_QWORD *)&v160 = (char *)&v160 + 8;
          *((_QWORD *)&v160 + 1) = 0;
          v161 = 0;
        }
        else
        {
          *(_QWORD *)&v172 = (char *)&v172 + 8;
        }
        v174 = v162;
        v162 = 0uLL;
        v175 = 0;
        v158.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v160, v31);
        MEMORY[0x18D7898AC](&v158);
        if (v190[24])
        {
          *(_QWORD *)&__p = off_1E2521330;
          v32 = *(std::__shared_weak_count **)&v190[16];
          if (*(_QWORD *)&v190[16])
          {
            v33 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v189, *((unsigned int **)&v189 + 1));
          MEMORY[0x18D7898AC](&__p);
          if (!v197)
          {
LABEL_267:
            ((void (*)(std::runtime_error *))v192.~runtime_error)(&v192);
            if (!v203)
              goto LABEL_268;
            goto LABEL_258;
          }
          goto LABEL_252;
        }
        goto LABEL_251;
      }
      if (v209)
      {
        v9 = v204.__vftable;
        v10 = operator new(0x20uLL);
        v188.__vftable = (std::runtime_error_vtbl *)(v10 + 2);
        *v10 = xmmword_1E253CBD8;
        *(_OWORD *)((char *)v10 + 12) = *(__int128 *)((char *)&xmmword_1E253CBD8 + 12);
        *(_QWORD *)&__p = v10;
        *((_QWORD *)&__p + 1) = v10 + 2;
        (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, __int128 *))v9->~runtime_error
         + 8))(&v164, v9, &__p);
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (!v169)
        {
          std::runtime_error::runtime_error((std::runtime_error *)&__p, &v164);
          v188 = v165;
          *(_QWORD *)&__p = off_1E2521330;
          v189 = v166;
          *(_QWORD *)v190 = v167;
          if (v167)
          {
            *(_QWORD *)(*((_QWORD *)&v166 + 1) + 16) = (char *)&v189 + 8;
            *(_QWORD *)&v166 = (char *)&v166 + 8;
            *((_QWORD *)&v166 + 1) = 0;
            v167 = 0;
          }
          else
          {
            *(_QWORD *)&v189 = (char *)&v189 + 8;
          }
          *(_OWORD *)&v190[8] = v168;
          v168 = 0uLL;
          v190[24] = 1;
          std::runtime_error::runtime_error(&v158, (const std::runtime_error *)&__p);
          v159 = v188;
          v158.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v160 = v189;
          v161 = *(std::runtime_error_vtbl **)v190;
          if (*(_QWORD *)v190)
          {
            *(_QWORD *)(*((_QWORD *)&v189 + 1) + 16) = (char *)&v160 + 8;
            *(_QWORD *)&v189 = (char *)&v189 + 8;
            *((_QWORD *)&v189 + 1) = 0;
            *(_QWORD *)v190 = 0;
          }
          else
          {
            *(_QWORD *)&v160 = (char *)&v160 + 8;
          }
          v162 = *(_OWORD *)&v190[8];
          *(_QWORD *)&v190[8] = 0;
          *(_QWORD *)&v190[16] = 0;
          std::runtime_error::runtime_error(&v152, &v158);
          v153 = v159;
          v35 = (unsigned int *)*((_QWORD *)&v160 + 1);
          v152.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v154 = v160;
          v155 = v161;
          if (v161)
          {
            *(_QWORD *)(*((_QWORD *)&v160 + 1) + 16) = (char *)&v154 + 8;
            v35 = 0;
            *(_QWORD *)&v160 = (char *)&v160 + 8;
            *((_QWORD *)&v160 + 1) = 0;
            v161 = 0;
          }
          else
          {
            *(_QWORD *)&v154 = (char *)&v154 + 8;
          }
          v156 = v162;
          v162 = 0uLL;
          v158.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v160, v35);
          MEMORY[0x18D7898AC](&v158);
          std::runtime_error::runtime_error(&v170, &v152);
          v171 = v153;
          v36 = (unsigned int *)*((_QWORD *)&v154 + 1);
          v170.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v172 = v154;
          v173 = v155;
          if (v155)
          {
            *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = (char *)&v172 + 8;
            v36 = 0;
            *(_QWORD *)&v154 = (char *)&v154 + 8;
            *((_QWORD *)&v154 + 1) = 0;
            v155 = 0;
          }
          else
          {
            *(_QWORD *)&v172 = (char *)&v172 + 8;
          }
          v174 = v156;
          v156 = 0uLL;
          v175 = 0;
          v152.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v154, v36);
          MEMORY[0x18D7898AC](&v152);
          if (v190[24])
          {
            *(_QWORD *)&__p = off_1E2521330;
            v37 = *(std::__shared_weak_count **)&v190[16];
            if (*(_QWORD *)&v190[16])
            {
              v38 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v189, *((unsigned int **)&v189 + 1));
            MEMORY[0x18D7898AC](&__p);
            if (!v169)
            {
LABEL_266:
              ((void (*)(std::runtime_error *))v164.~runtime_error)(&v164);
              if (!v197)
                goto LABEL_267;
              goto LABEL_252;
            }
LABEL_246:
            imp = (std::runtime_error *)v165.__imp_.__imp_;
            if ((std::runtime_error *)v165.__imp_.__imp_ == &v164)
            {
              v68 = 4;
              imp = &v164;
            }
            else
            {
              if (!v165.__imp_.__imp_)
                goto LABEL_251;
              v68 = 5;
            }
            (*((void (**)(void))&imp->~runtime_error + v68))();
LABEL_251:
            if (!v197)
              goto LABEL_267;
LABEL_252:
            v69 = (std::runtime_error *)v193.__imp_.__imp_;
            if ((std::runtime_error *)v193.__imp_.__imp_ == &v192)
            {
              v70 = 4;
              v69 = &v192;
            }
            else
            {
              if (!v193.__imp_.__imp_)
                goto LABEL_257;
              v70 = 5;
            }
            (*((void (**)(void))&v69->~runtime_error + v70))();
LABEL_257:
            if (!v203)
            {
LABEL_268:
              ((void (*)(std::runtime_error *))v198.~runtime_error)(&v198);
              goto LABEL_269;
            }
            goto LABEL_258;
          }
          goto LABEL_245;
        }
        if (v209)
        {
          *((_QWORD *)&__p + 1) = 0;
          *(_QWORD *)&__p = 0;
          v188.__vftable = 0;
          (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, __int128 *))v204.~runtime_error
           + 8))(&v158, v204.__vftable, &__p);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (!v163)
          {
            std::runtime_error::runtime_error((std::runtime_error *)&__p, &v158);
            v188 = v159;
            *(_QWORD *)&__p = off_1E2521330;
            v189 = v160;
            *(_QWORD *)v190 = v161;
            if (v161)
            {
              *(_QWORD *)(*((_QWORD *)&v160 + 1) + 16) = (char *)&v189 + 8;
              *(_QWORD *)&v160 = (char *)&v160 + 8;
              *((_QWORD *)&v160 + 1) = 0;
              v161 = 0;
            }
            else
            {
              *(_QWORD *)&v189 = (char *)&v189 + 8;
            }
            *(_OWORD *)&v190[8] = v162;
            v162 = 0uLL;
            v190[24] = 1;
            std::runtime_error::runtime_error(&v152, (const std::runtime_error *)&__p);
            v153 = v188;
            v152.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v154 = v189;
            v155 = *(std::runtime_error_vtbl **)v190;
            if (*(_QWORD *)v190)
            {
              *(_QWORD *)(*((_QWORD *)&v189 + 1) + 16) = (char *)&v154 + 8;
              *(_QWORD *)&v189 = (char *)&v189 + 8;
              *((_QWORD *)&v189 + 1) = 0;
              *(_QWORD *)v190 = 0;
            }
            else
            {
              *(_QWORD *)&v154 = (char *)&v154 + 8;
            }
            v156 = *(_OWORD *)&v190[8];
            *(_QWORD *)&v190[8] = 0;
            *(_QWORD *)&v190[16] = 0;
            std::runtime_error::runtime_error(&v146, &v152);
            v147 = v153;
            v40 = (unsigned int *)*((_QWORD *)&v154 + 1);
            v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v148 = v154;
            v149 = v155;
            if (v155)
            {
              *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = (char *)&v148 + 8;
              v40 = 0;
              *(_QWORD *)&v154 = (char *)&v154 + 8;
              *((_QWORD *)&v154 + 1) = 0;
              v155 = 0;
            }
            else
            {
              *(_QWORD *)&v148 = (char *)&v148 + 8;
            }
            v150 = v156;
            v156 = 0uLL;
            v152.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v154, v40);
            MEMORY[0x18D7898AC](&v152);
            std::runtime_error::runtime_error(&v170, &v146);
            v171 = v147;
            v41 = (unsigned int *)*((_QWORD *)&v148 + 1);
            v170.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v172 = v148;
            v173 = v149;
            if (v149)
            {
              *(_QWORD *)(*((_QWORD *)&v148 + 1) + 16) = (char *)&v172 + 8;
              v41 = 0;
              *(_QWORD *)&v148 = (char *)&v148 + 8;
              *((_QWORD *)&v148 + 1) = 0;
              v149 = 0;
            }
            else
            {
              *(_QWORD *)&v172 = (char *)&v172 + 8;
            }
            v174 = v150;
            v150 = 0uLL;
            v175 = 0;
            v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v148, v41);
            MEMORY[0x18D7898AC](&v146);
            if (v190[24])
            {
              *(_QWORD *)&__p = off_1E2521330;
              v42 = *(std::__shared_weak_count **)&v190[16];
              if (*(_QWORD *)&v190[16])
              {
                v43 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v189, *((unsigned int **)&v189 + 1));
              MEMORY[0x18D7898AC](&__p);
            }
            if (!v163)
            {
LABEL_265:
              ((void (*)(std::runtime_error *))v158.~runtime_error)(&v158);
              if (!v169)
                goto LABEL_266;
              goto LABEL_246;
            }
            goto LABEL_240;
          }
          if (v209)
          {
            v11 = v204.__vftable;
            v12 = operator new(0x18uLL);
            v188.__vftable = (std::runtime_error_vtbl *)(v12 + 3);
            *(_OWORD *)v12 = xmmword_1E253CBA8;
            v12[2] = 0x100000005;
            *(_QWORD *)&__p = v12;
            *((_QWORD *)&__p + 1) = v12 + 3;
            v146.__vftable = 0;
            v146.__imp_.__imp_ = 0;
            v147.__vftable = 0;
            (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, __int128 *, std::runtime_error *))v11->~runtime_error
             + 9))(&v152, v11, &__p, &v146);
            if (v146.__vftable)
            {
              v146.__imp_.__imp_ = (const char *)v146.__vftable;
              operator delete(v146.__vftable);
            }
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (!v157)
            {
              std::runtime_error::runtime_error((std::runtime_error *)&__p, &v152);
              v188 = v153;
              *(_QWORD *)&__p = off_1E2521330;
              v189 = v154;
              *(_QWORD *)v190 = v155;
              if (v155)
              {
                *(_QWORD *)(*((_QWORD *)&v154 + 1) + 16) = (char *)&v189 + 8;
                *(_QWORD *)&v154 = (char *)&v154 + 8;
                *((_QWORD *)&v154 + 1) = 0;
                v155 = 0;
              }
              else
              {
                *(_QWORD *)&v189 = (char *)&v189 + 8;
              }
              *(_OWORD *)&v190[8] = v156;
              v156 = 0uLL;
              v190[24] = 1;
              std::runtime_error::runtime_error(&v146, (const std::runtime_error *)&__p);
              v147 = v188;
              v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v148 = v189;
              v149 = *(std::runtime_error_vtbl **)v190;
              if (*(_QWORD *)v190)
              {
                *(_QWORD *)(*((_QWORD *)&v189 + 1) + 16) = (char *)&v148 + 8;
                *(_QWORD *)&v189 = (char *)&v189 + 8;
                *((_QWORD *)&v189 + 1) = 0;
                *(_QWORD *)v190 = 0;
              }
              else
              {
                *(_QWORD *)&v148 = (char *)&v148 + 8;
              }
              v150 = *(_OWORD *)&v190[8];
              *(_QWORD *)&v190[8] = 0;
              *(_QWORD *)&v190[16] = 0;
              std::runtime_error::runtime_error(&v140, &v146);
              v141 = v147;
              v45 = (unsigned int *)*((_QWORD *)&v148 + 1);
              v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v142 = v148;
              v143 = v149;
              if (v149)
              {
                *(_QWORD *)(*((_QWORD *)&v148 + 1) + 16) = (char *)&v142 + 8;
                v45 = 0;
                *(_QWORD *)&v148 = (char *)&v148 + 8;
                *((_QWORD *)&v148 + 1) = 0;
                v149 = 0;
              }
              else
              {
                *(_QWORD *)&v142 = (char *)&v142 + 8;
              }
              v144 = v150;
              v150 = 0uLL;
              v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v148, v45);
              MEMORY[0x18D7898AC](&v146);
              std::runtime_error::runtime_error(&v170, &v140);
              v171 = v141;
              v46 = (unsigned int *)*((_QWORD *)&v142 + 1);
              v170.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v172 = v142;
              v173 = v143;
              if (v143)
              {
                *(_QWORD *)(*((_QWORD *)&v142 + 1) + 16) = (char *)&v172 + 8;
                v46 = 0;
                *(_QWORD *)&v142 = (char *)&v142 + 8;
                *((_QWORD *)&v142 + 1) = 0;
                v143 = 0;
              }
              else
              {
                *(_QWORD *)&v172 = (char *)&v172 + 8;
              }
              v174 = v144;
              v144 = 0uLL;
              v175 = 0;
              v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v142, v46);
              MEMORY[0x18D7898AC](&v140);
              if (v190[24])
              {
                *(_QWORD *)&__p = off_1E2521330;
                v47 = *(std::__shared_weak_count **)&v190[16];
                if (*(_QWORD *)&v190[16])
                {
                  v48 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v189, *((unsigned int **)&v189 + 1));
                MEMORY[0x18D7898AC](&__p);
              }
              goto LABEL_234;
            }
            if (v209)
            {
              v13 = v204.__vftable;
              *((_QWORD *)&__p + 1) = 0;
              *(_QWORD *)&__p = 0;
              v188.__vftable = 0;
              v14 = operator new(0x18uLL);
              v188.__vftable = (std::runtime_error_vtbl *)(v14 + 3);
              *(_OWORD *)v14 = xmmword_1E253CBC0;
              v14[2] = 0x200000006;
              *(_QWORD *)&__p = v14;
              *((_QWORD *)&__p + 1) = v14 + 3;
              v15 = (char *)operator new(0x20uLL);
              v140.__imp_.__imp_ = v15 + 32;
              v141.__vftable = (std::runtime_error_vtbl *)(v15 + 32);
              *(_OWORD *)v15 = xmmword_1E253CBD8;
              *(_OWORD *)(v15 + 12) = *(__int128 *)((char *)&xmmword_1E253CBD8 + 12);
              v140.__vftable = (std::runtime_error_vtbl *)v15;
              (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, __int128 *, std::runtime_error *))v13->~runtime_error
               + 9))(&v146, v13, &__p, &v140);
              if (v140.__vftable)
              {
                v140.__imp_.__imp_ = (const char *)v140.__vftable;
                operator delete(v140.__vftable);
              }
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (!v151)
              {
                std::runtime_error::runtime_error((std::runtime_error *)&__p, &v146);
                v188 = v147;
                *(_QWORD *)&__p = off_1E2521330;
                v189 = v148;
                *(_QWORD *)v190 = v149;
                if (v149)
                {
                  *(_QWORD *)(*((_QWORD *)&v148 + 1) + 16) = (char *)&v189 + 8;
                  *(_QWORD *)&v148 = (char *)&v148 + 8;
                  *((_QWORD *)&v148 + 1) = 0;
                  v149 = 0;
                }
                else
                {
                  *(_QWORD *)&v189 = (char *)&v189 + 8;
                }
                *(_OWORD *)&v190[8] = v150;
                v150 = 0uLL;
                v190[24] = 1;
                std::runtime_error::runtime_error(&v140, (const std::runtime_error *)&__p);
                v141 = v188;
                v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v142 = v189;
                v143 = *(std::runtime_error_vtbl **)v190;
                if (*(_QWORD *)v190)
                {
                  *(_QWORD *)(*((_QWORD *)&v189 + 1) + 16) = (char *)&v142 + 8;
                  *(_QWORD *)&v189 = (char *)&v189 + 8;
                  *((_QWORD *)&v189 + 1) = 0;
                  *(_QWORD *)v190 = 0;
                }
                else
                {
                  *(_QWORD *)&v142 = (char *)&v142 + 8;
                }
                v144 = *(_OWORD *)&v190[8];
                *(_QWORD *)&v190[8] = 0;
                *(_QWORD *)&v190[16] = 0;
                std::runtime_error::runtime_error(&v134, &v140);
                v135 = v141;
                v134.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v51 = (unsigned int *)*((_QWORD *)&v142 + 1);
                v136 = v142;
                v137 = v143;
                if (v143)
                {
                  *(_QWORD *)(*((_QWORD *)&v142 + 1) + 16) = (char *)&v136 + 8;
                  v51 = 0;
                  *(_QWORD *)&v142 = (char *)&v142 + 8;
                  *((_QWORD *)&v142 + 1) = 0;
                  v143 = 0;
                }
                else
                {
                  *(_QWORD *)&v136 = (char *)&v136 + 8;
                }
                v138 = v144;
                v144 = 0uLL;
                v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v142, v51);
                MEMORY[0x18D7898AC](&v140);
                std::runtime_error::runtime_error(&v170, &v134);
                v171 = v135;
                v52 = (unsigned int *)*((_QWORD *)&v136 + 1);
                v170.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v172 = v136;
                v173 = v137;
                if (v137)
                {
                  *(_QWORD *)(*((_QWORD *)&v136 + 1) + 16) = (char *)&v172 + 8;
                  v52 = 0;
                  *(_QWORD *)&v136 = (char *)&v136 + 8;
                  *((_QWORD *)&v136 + 1) = 0;
                  v137 = 0;
                }
                else
                {
                  *(_QWORD *)&v172 = (char *)&v172 + 8;
                }
                v174 = v138;
                v138 = 0uLL;
                v175 = 0;
                v134.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v136, v52);
                MEMORY[0x18D7898AC](&v134);
                if (v190[24])
                {
                  *(_QWORD *)&__p = off_1E2521330;
                  v53 = *(std::__shared_weak_count **)&v190[16];
                  if (*(_QWORD *)&v190[16])
                  {
                    v54 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 - 1, v54));
                    if (!v55)
                    {
                      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                      std::__shared_weak_count::__release_weak(v53);
                    }
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v189, *((unsigned int **)&v189 + 1));
                  MEMORY[0x18D7898AC](&__p);
                }
                goto LABEL_227;
              }
              if (v209)
              {
                v16 = v204.__vftable;
                *((_QWORD *)&__p + 1) = 0;
                *(_QWORD *)&__p = 0;
                v188.__vftable = 0;
                v17 = operator new(0x20uLL);
                v188.__vftable = (std::runtime_error_vtbl *)(v17 + 2);
                *v17 = xmmword_1E253CCB8;
                *(_OWORD *)((char *)v17 + 12) = *(__int128 *)((char *)&xmmword_1E253CCB8 + 12);
                *(_QWORD *)&__p = v17;
                *((_QWORD *)&__p + 1) = v17 + 2;
                v18 = (char *)operator new(0x60uLL);
                v134.__imp_.__imp_ = v18 + 96;
                v135.__vftable = (std::runtime_error_vtbl *)(v18 + 96);
                *((_OWORD *)v18 + 2) = xmmword_1E253CC18;
                *((_OWORD *)v18 + 3) = *(_OWORD *)&off_1E253CC28;
                *((_OWORD *)v18 + 4) = xmmword_1E253CC38;
                *((_OWORD *)v18 + 5) = unk_1E253CC48;
                *(_OWORD *)v18 = xmmword_1E253CBF8;
                *((_OWORD *)v18 + 1) = unk_1E253CC08;
                v134.__vftable = (std::runtime_error_vtbl *)v18;
                (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, __int128 *, std::runtime_error *))v16->~runtime_error
                 + 6))(&v140, v16, &__p, &v134);
                if (v134.__vftable)
                {
                  v134.__imp_.__imp_ = (const char *)v134.__vftable;
                  operator delete(v134.__vftable);
                }
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (!v145)
                {
                  std::runtime_error::runtime_error((std::runtime_error *)&__p, &v140);
                  v188 = v141;
                  *(_QWORD *)&__p = off_1E2521330;
                  v189 = v142;
                  *(_QWORD *)v190 = v143;
                  if (v143)
                  {
                    *(_QWORD *)(*((_QWORD *)&v142 + 1) + 16) = (char *)&v189 + 8;
                    *(_QWORD *)&v142 = (char *)&v142 + 8;
                    *((_QWORD *)&v142 + 1) = 0;
                    v143 = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v189 = (char *)&v189 + 8;
                  }
                  *(_OWORD *)&v190[8] = v144;
                  v144 = 0uLL;
                  v190[24] = 1;
                  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v134, (uint64_t)&__p);
                  std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v170, (uint64_t)&v134);
                  std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v134);
                }
                LOBYTE(__p) = 0;
                v190[24] = 0;
                std::optional<AMSCore::Error>::~optional((uint64_t)&__p);
                if (v209)
                {
                  v19 = v204.__vftable;
                  v183 = xmmword_1E253CD18;
                  v184 = unk_1E253CD28;
                  v185 = xmmword_1E253CD38;
                  std::vector<AMSCore::StructuredData::ColumnDesc>::vector[abi:fe180100](&v178, &v183, 2uLL);
                  v189 = xmmword_1E253CC78;
                  *(_OWORD *)v190 = unk_1E253CC88;
                  *(_OWORD *)&v190[16] = xmmword_1E253CC98;
                  v191 = unk_1E253CCA8;
                  __p = xmmword_1E253CC58;
                  v188 = (std::runtime_error)unk_1E253CC68;
                  std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](v176, &__p, 3uLL);
                  (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, __int128 *, std::runtime_error *))v19->~runtime_error
                   + 5))(&v134, v19, &v178, v176);
                  if (v176[0].__vftable)
                  {
                    v176[0].__imp_.__imp_ = (const char *)v176[0].__vftable;
                    operator delete(v176[0].__vftable);
                  }
                  if ((_QWORD)v178)
                  {
                    *((_QWORD *)&v178 + 1) = v178;
                    operator delete((void *)v178);
                  }
                  AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>((std::runtime_error *)&__p, (uint64_t)&v134);
                  if (v190[24])
                  {
                    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v183, (uint64_t)&__p);
                    std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v170, (uint64_t)&v183);
                    std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v183);
                  }
                  std::optional<AMSCore::Error>::~optional((uint64_t)&__p);
                  if (v209)
                  {
                    v50 = v204.__vftable;
                    v183 = xmmword_1E253CD18;
                    v184 = unk_1E253CD28;
                    v185 = xmmword_1E253CD38;
                    std::vector<AMSCore::StructuredData::ColumnDesc>::vector[abi:fe180100](v176, &v183, 2uLL);
                    v178 = xmmword_1E253CCB8;
                    v179 = xmmword_1E253CCC8;
                    std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](&v170, &v178, 1uLL);
                    (*((void (**)(__int128 *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *, std::runtime_error *))v50->~runtime_error
                     + 5))(&__p, v50, v176, &v170);
                    if (v170.__vftable)
                    {
                      v170.__imp_.__imp_ = (const char *)v170.__vftable;
                      operator delete(v170.__vftable);
                    }
                    if (v176[0].__vftable)
                    {
                      v176[0].__imp_.__imp_ = (const char *)v176[0].__vftable;
                      operator delete(v176[0].__vftable);
                    }
                    AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>((std::runtime_error *)&v183, (uint64_t)&__p);
                    if (v186)
                    {
                      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v178, (uint64_t)&v183);
                      std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v170, (uint64_t)&v178);
                      std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v178);
                    }
                    std::optional<AMSCore::Error>::~optional((uint64_t)&v183);
                    if (v209)
                    {
                      v56 = v204.__vftable;
                      v178 = xmmword_1E253CCD8;
                      v179 = unk_1E253CCE8;
                      v180 = xmmword_1E253CCF8;
                      v181 = unk_1E253CD08;
                      std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](v176, &v178, 2uLL);
                      (*((void (**)(__int128 *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *))v56->~runtime_error
                       + 10))(&v183, v56, v176);
                      if (v176[0].__vftable)
                      {
                        v176[0].__imp_.__imp_ = (const char *)v176[0].__vftable;
                        operator delete(v176[0].__vftable);
                      }
                      AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>((std::runtime_error *)&v178, (uint64_t)&v183);
                      if (v182)
                      {
                        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v176, (uint64_t)&v178);
                        std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v170, (uint64_t)v176);
                        std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v176);
                      }
                      std::optional<AMSCore::Error>::~optional((uint64_t)&v178);
                      if (v209)
                      {
                        v57 = v204.__vftable;
                        v176[0] = (std::runtime_error)xmmword_1E253CD18;
                        v176[1] = (std::runtime_error)unk_1E253CD28;
                        v176[2] = (std::runtime_error)xmmword_1E253CD38;
                        std::vector<AMSCore::StructuredData::ColumnDesc>::vector[abi:fe180100](v132, v176, 2uLL);
                        v170 = (std::runtime_error)xmmword_1E253CD48;
                        v171 = (std::runtime_error)unk_1E253CD58;
                        std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](v133, &v170, 1uLL);
                        (*((void (**)(__int128 *__return_ptr, std::runtime_error_vtbl *, void **, void **))v57->~runtime_error
                         + 5))(&v178, v57, v132, v133);
                        if (v133[0])
                        {
                          v133[1] = v133[0];
                          operator delete(v133[0]);
                        }
                        if (v132[0])
                        {
                          v132[1] = v132[0];
                          operator delete(v132[0]);
                        }
                        AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>(v176, (uint64_t)&v178);
                        if (v177)
                        {
                          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v132, (uint64_t)v176);
                          std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(&v170, (uint64_t)v132);
                          std::unexpected<AMSCore::Error>::~unexpected((uint64_t)v132);
                        }
                        std::optional<AMSCore::Error>::~optional((uint64_t)v176);
                        v58 = (_QWORD *)operator new();
                        if (v209)
                        {
                          if (v203 && v197 && v169 && v163 && v157 && v151 && v145 && v139 && v190[24] && v186 && v182)
                          {
                            v170.__vftable = (std::runtime_error_vtbl *)AMSCore::MetricsDataAccessObject::MetricsDataAccessObject(v58, (uint64_t *)&v131, (uint64_t *)&v204, (uint64_t)&v198, (uint64_t)&v192, (uint64_t)&v164, (uint64_t)&v158, (uint64_t)&v152, (uint64_t)&v146, (uint64_t)&v140, (uint64_t)&v134, (uint64_t)&__p, (uint64_t)&v183, (uint64_t)&v178);
                            v175 = 1;
                            std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&v178);
                            std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&v183);
                            std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&__p);
                            std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&v134);
                            if (v145)
                            {
                              v59 = (std::runtime_error *)v141.__imp_.__imp_;
                              if ((std::runtime_error *)v141.__imp_.__imp_ == &v140)
                              {
                                v60 = 4;
                                v59 = &v140;
                              }
                              else
                              {
                                if (!v141.__imp_.__imp_)
                                  goto LABEL_227;
                                v60 = 5;
                              }
                              (*((void (**)(void))&v59->~runtime_error + v60))();
                            }
                            else
                            {
                              ((void (*)(std::runtime_error *))v140.~runtime_error)(&v140);
                            }
LABEL_227:
                            if (v151)
                            {
                              v61 = (std::runtime_error *)v147.__imp_.__imp_;
                              if ((std::runtime_error *)v147.__imp_.__imp_ == &v146)
                              {
                                v62 = 4;
                                v61 = &v146;
                              }
                              else
                              {
                                if (!v147.__imp_.__imp_)
                                  goto LABEL_234;
                                v62 = 5;
                              }
                              (*((void (**)(void))&v61->~runtime_error + v62))();
                            }
                            else
                            {
                              ((void (*)(std::runtime_error *))v146.~runtime_error)(&v146);
                            }
LABEL_234:
                            if (v157)
                            {
                              v63 = (std::runtime_error *)v153.__imp_.__imp_;
                              if ((std::runtime_error *)v153.__imp_.__imp_ == &v152)
                              {
                                v64 = 4;
                                v63 = &v152;
LABEL_264:
                                (*((void (**)(void))&v63->~runtime_error + v64))();
                                if (!v163)
                                  goto LABEL_265;
                                goto LABEL_240;
                              }
                              if (v153.__imp_.__imp_)
                              {
                                v64 = 5;
                                goto LABEL_264;
                              }
                            }
                            else
                            {
                              ((void (*)(std::runtime_error *))v152.~runtime_error)(&v152);
                            }
                            if (!v163)
                              goto LABEL_265;
LABEL_240:
                            v65 = (std::runtime_error *)v159.__imp_.__imp_;
                            if ((std::runtime_error *)v159.__imp_.__imp_ == &v158)
                            {
                              v66 = 4;
                              v65 = &v158;
                            }
                            else
                            {
                              if (!v159.__imp_.__imp_)
                                goto LABEL_245;
                              v66 = 5;
                            }
                            (*((void (**)(void))&v65->~runtime_error + v66))();
LABEL_245:
                            if (!v169)
                              goto LABEL_266;
                            goto LABEL_246;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  std::runtime_error::runtime_error((std::runtime_error *)&__p, &v198);
  v188 = v199;
  *(_QWORD *)&__p = off_1E2521330;
  v189 = v200;
  *(_QWORD *)v190 = v201;
  if (v201)
  {
    *(_QWORD *)(*((_QWORD *)&v200 + 1) + 16) = (char *)&v189 + 8;
    *(_QWORD *)&v200 = (char *)&v200 + 8;
    *((_QWORD *)&v200 + 1) = 0;
    v201 = 0;
  }
  else
  {
    *(_QWORD *)&v189 = (char *)&v189 + 8;
  }
  *(_OWORD *)&v190[8] = v202;
  v202 = 0uLL;
  v190[24] = 1;
  std::runtime_error::runtime_error(&v192, (const std::runtime_error *)&__p);
  v193 = v188;
  v192.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v194 = v189;
  v195 = *(std::runtime_error_vtbl **)v190;
  if (*(_QWORD *)v190)
  {
    *(_QWORD *)(*((_QWORD *)&v189 + 1) + 16) = (char *)&v194 + 8;
    *(_QWORD *)&v189 = (char *)&v189 + 8;
    *((_QWORD *)&v189 + 1) = 0;
    *(_QWORD *)v190 = 0;
  }
  else
  {
    *(_QWORD *)&v194 = (char *)&v194 + 8;
  }
  v196 = *(_OWORD *)&v190[8];
  *(_QWORD *)&v190[8] = 0;
  *(_QWORD *)&v190[16] = 0;
  std::runtime_error::runtime_error(&v164, &v192);
  v165 = v193;
  v25 = (unsigned int *)*((_QWORD *)&v194 + 1);
  v164.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v166 = v194;
  v167 = v195;
  if (v195)
  {
    *(_QWORD *)(*((_QWORD *)&v194 + 1) + 16) = (char *)&v166 + 8;
    v25 = 0;
    *(_QWORD *)&v194 = (char *)&v194 + 8;
    *((_QWORD *)&v194 + 1) = 0;
    v195 = 0;
  }
  else
  {
    *(_QWORD *)&v166 = (char *)&v166 + 8;
  }
  v168 = v196;
  v196 = 0uLL;
  v192.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v194, v25);
  MEMORY[0x18D7898AC](&v192);
  std::runtime_error::runtime_error(&v170, &v164);
  v171 = v165;
  v26 = (unsigned int *)*((_QWORD *)&v166 + 1);
  v170.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v172 = v166;
  v173 = v167;
  if (v167)
  {
    *(_QWORD *)(*((_QWORD *)&v166 + 1) + 16) = (char *)&v172 + 8;
    v26 = 0;
    *(_QWORD *)&v166 = (char *)&v166 + 8;
    *((_QWORD *)&v166 + 1) = 0;
    v167 = 0;
  }
  else
  {
    *(_QWORD *)&v172 = (char *)&v172 + 8;
  }
  v174 = v168;
  v168 = 0uLL;
  v175 = 0;
  v164.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v166, v26);
  MEMORY[0x18D7898AC](&v164);
  if (!v190[24])
    goto LABEL_257;
  *(_QWORD *)&__p = off_1E2521330;
  v27 = *(std::__shared_weak_count **)&v190[16];
  if (*(_QWORD *)&v190[16])
  {
    v28 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v189, *((unsigned int **)&v189 + 1));
  MEMORY[0x18D7898AC](&__p);
  if (!v203)
    goto LABEL_268;
LABEL_258:
  v71 = (std::runtime_error *)v199.__imp_.__imp_;
  if ((std::runtime_error *)v199.__imp_.__imp_ == &v198)
  {
    v72 = 4;
    v71 = &v198;
  }
  else
  {
    if (!v199.__imp_.__imp_)
      goto LABEL_269;
    v72 = 5;
  }
  (*((void (**)(void))&v71->~runtime_error + v72))();
LABEL_269:
  v73 = v204.__vftable;
  if (v209)
  {
    v204.__vftable = 0;
    if (v73)
      (*((void (**)(std::runtime_error_vtbl *))v73->~runtime_error + 1))(v73);
  }
  else
  {
    ((void (*)(std::runtime_error *))v204.~runtime_error)(&v204);
  }
  v74 = (uint64_t)v131;
  v131 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  if (v175)
  {
    v75 = (std::__shared_weak_count *)operator new(0x100uLL);
    v75->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    v75->__shared_weak_owners_ = 0;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25229A0;
    v77 = *(std::__shared_count *)a2;
    v78 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v198.__vftable = (std::runtime_error_vtbl *)&off_1E2521600;
    v198.__imp_.__imp_ = (const char *)AMSCore::UploadMetricsEventTask::perform;
    v75[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E25209C8;
    v79 = v75 + 1;
    v199.__imp_.__imp_ = (const char *)&v198;
    v192.__vftable = (std::runtime_error_vtbl *)&off_1E25215A8;
    v192.__imp_.__imp_ = (const char *)AMSCore::MetricsFlushTask::perform;
    v193.__imp_.__imp_ = (const char *)&v192;
    v75[1].__shared_owners_ = 0;
    v75[1].__shared_weak_owners_ = 0;
    v75[2].std::__shared_count = v77;
    *(_OWORD *)&v75[2].__shared_weak_owners_ = v78;
    v80 = v170.__vftable;
    v170.__vftable = 0;
    v75[3].__shared_owners_ = (uint64_t)v80;
    v75[4].__shared_weak_owners_ = (uint64_t)&v75[3].__shared_weak_owners_;
    _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE7__cloneEPNS0_6__baseISO_EE((uint64_t)&v192, &v75[3].__shared_weak_owners_);
    v81 = v75[2].std::__shared_count;
    v127 = v81;
    if (v81.__shared_owners_)
    {
      v82 = (unint64_t *)(v81.__shared_owners_ + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v84 = *(_OWORD *)&v75[2].__shared_weak_owners_;
    v126 = v84;
    if (*((_QWORD *)&v84 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    v87 = operator new();
    *(_QWORD *)v87 = 850045863;
    *(_OWORD *)(v87 + 8) = 0u;
    *(_OWORD *)(v87 + 24) = 0u;
    *(_OWORD *)(v87 + 40) = 0u;
    *(_OWORD *)(v87 + 56) = 0u;
    *(_QWORD *)(v87 + 72) = 0;
    *(std::__shared_count *)(v87 + 80) = v127;
    *(_OWORD *)(v87 + 96) = v126;
    *(_QWORD *)(v87 + 112) = 0;
    *(_QWORD *)(v87 + 120) = 0;
    v88 = (_QWORD *)operator new();
    v89 = v88;
    v88[2] = 0;
    v90 = v88 + 2;
    *v88 = &off_1E2523340;
    v88[1] = 0;
    v88[3] = v87;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
    v204.__vftable = (std::runtime_error_vtbl *)&off_1E2521EF0;
    v204.__imp_.__imp_ = (const char *)v87;
    v205.__vftable = (std::runtime_error_vtbl *)v88;
    v205.__imp_.__imp_ = (const char *)&v204;
    v92 = *(_QWORD *)(v87 + 80);
    v188.__imp_.__imp_ = (const char *)&__p;
    std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone((uint64_t)&v204, &__p);
    AMSCore::BagDataSource::observeChanged(&v164, v92, &__p);
    p_p = (__int128 *)v188.__imp_.__imp_;
    if ((__int128 *)v188.__imp_.__imp_ == &__p)
    {
      v94 = 4;
      p_p = &__p;
    }
    else
    {
      if (!v188.__imp_.__imp_)
      {
LABEL_291:
        v95 = v164;
        v164.__vftable = 0;
        v164.__imp_.__imp_ = 0;
        v96 = *(std::__shared_weak_count **)(v87 + 120);
        *(std::runtime_error *)(v87 + 112) = v95;
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v99 = (std::__shared_weak_count *)v164.__imp_.__imp_;
        if (v164.__imp_.__imp_)
        {
          v100 = (unint64_t *)(v164.__imp_.__imp_ + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v102 = (std::runtime_error *)v205.__imp_.__imp_;
        if ((std::runtime_error *)v205.__imp_.__imp_ == &v204)
        {
          v103 = 4;
          v102 = &v204;
        }
        else
        {
          if (!v205.__imp_.__imp_)
            goto LABEL_306;
          v103 = 5;
        }
        (*((void (**)(void))&v102->~runtime_error + v103))();
LABEL_306:
        v75[5].__vftable = (std::__shared_weak_count_vtbl *)v87;
        v75[5].__shared_owners_ = (uint64_t)v89;
        if (v199.__imp_.__imp_)
        {
          if ((std::runtime_error *)v199.__imp_.__imp_ == &v198)
          {
            v75[6].__shared_weak_owners_ = (uint64_t)&v75[5].__shared_weak_owners_;
            ((void (*)(uint64_t, _QWORD *))v198.__vftable[1].~runtime_error)((uint64_t)&v198, &v75[5].__shared_weak_owners_);
          }
          else
          {
            v75[6].__shared_weak_owners_ = (uint64_t)v199.__imp_.__imp_;
            v199.__imp_.__imp_ = 0;
          }
        }
        else
        {
          v75[6].__shared_weak_owners_ = 0;
        }
        v75[10].__vftable = 0;
        v75[7].__vftable = (std::__shared_weak_count_vtbl *)850045863;
        *(_OWORD *)&v75[7].__shared_owners_ = 0u;
        v75[8].std::__shared_count = 0u;
        *(_OWORD *)&v75[8].__shared_weak_owners_ = 0u;
        v75[10].__shared_owners_ = 0;
        v75[9].__shared_owners_ = 0;
        v75[9].__shared_weak_owners_ = (uint64_t)&v75[10];
        v104 = (std::runtime_error *)v193.__imp_.__imp_;
        if ((std::runtime_error *)v193.__imp_.__imp_ == &v192)
        {
          v105 = 4;
          v104 = &v192;
        }
        else
        {
          if (!v193.__imp_.__imp_)
            goto LABEL_316;
          v105 = 5;
        }
        (*((void (**)(void))&v104->~runtime_error + v105))();
LABEL_316:
        v106 = (std::runtime_error *)v199.__imp_.__imp_;
        if ((std::runtime_error *)v199.__imp_.__imp_ == &v198)
        {
          v107 = 4;
          v106 = &v198;
        }
        else
        {
          if (!v199.__imp_.__imp_)
            goto LABEL_321;
          v107 = 5;
        }
        (*((void (**)(void))&v106->~runtime_error + v107))();
LABEL_321:
        shared_weak_owners = (std::__shared_weak_count *)v75[1].__shared_weak_owners_;
        *(_QWORD *)&v109 = v75 + 1;
        *((_QWORD *)&v109 + 1) = v75;
        if (shared_weak_owners)
        {
          if (shared_weak_owners->__shared_owners_ != -1)
          {
LABEL_334:
            *(_OWORD *)a1 = v109;
            *(_BYTE *)(a1 + 72) = 1;
            goto LABEL_352;
          }
          do
            v110 = __ldxr(p_shared_owners);
          while (__stxr(v110 + 1, p_shared_owners));
          v128 = v109;
          p_shared_weak_owners = (unint64_t *)&v75->__shared_weak_owners_;
          do
            v112 = __ldxr(p_shared_weak_owners);
          while (__stxr(v112 + 1, p_shared_weak_owners));
          v75[1].__shared_owners_ = (uint64_t)v79;
          v75[1].__shared_weak_owners_ = (uint64_t)v75;
          std::__shared_weak_count::__release_weak(shared_weak_owners);
          v109 = v128;
        }
        else
        {
          do
            v113 = __ldxr(p_shared_owners);
          while (__stxr(v113 + 1, p_shared_owners));
          v114 = (unint64_t *)&v75->__shared_weak_owners_;
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
          v75[1].__shared_owners_ = (uint64_t)v79;
          v75[1].__shared_weak_owners_ = (uint64_t)v75;
        }
        do
          v116 = __ldaxr(p_shared_owners);
        while (__stlxr(v116 - 1, p_shared_owners));
        if (!v116)
        {
          v129 = v109;
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
          v109 = v129;
        }
        goto LABEL_334;
      }
      v94 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)p_p + 8 * v94))();
    goto LABEL_291;
  }
  std::runtime_error::runtime_error((std::runtime_error *)&__p, &v170);
  v188 = v171;
  *(_QWORD *)&__p = off_1E2521330;
  v189 = v172;
  *(_QWORD *)v190 = v173;
  if (v173)
  {
    *(_QWORD *)(*((_QWORD *)&v172 + 1) + 16) = (char *)&v189 + 8;
    *(_QWORD *)&v172 = (char *)&v172 + 8;
    *((_QWORD *)&v172 + 1) = 0;
    v173 = 0;
  }
  else
  {
    *(_QWORD *)&v189 = (char *)&v189 + 8;
  }
  *(_OWORD *)&v190[8] = v174;
  v174 = 0uLL;
  v190[24] = 1;
  std::runtime_error::runtime_error(&v204, (const std::runtime_error *)&__p);
  v205 = v188;
  v204.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v206 = v189;
  v207 = *(std::runtime_error_vtbl **)v190;
  if (*(_QWORD *)v190)
  {
    *(_QWORD *)(*((_QWORD *)&v189 + 1) + 16) = (char *)&v206 + 8;
    *(_QWORD *)&v189 = (char *)&v189 + 8;
    *((_QWORD *)&v189 + 1) = 0;
    *(_QWORD *)v190 = 0;
  }
  else
  {
    *(_QWORD *)&v206 = (char *)&v206 + 8;
  }
  v208 = *(_OWORD *)&v190[8];
  *(_QWORD *)&v190[8] = 0;
  *(_QWORD *)&v190[16] = 0;
  std::runtime_error::runtime_error(&v198, &v204);
  v199 = v205;
  v198.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v117 = (unsigned int *)*((_QWORD *)&v206 + 1);
  v200 = v206;
  v201 = v207;
  if (v207)
  {
    *(_QWORD *)(*((_QWORD *)&v206 + 1) + 16) = (char *)&v200 + 8;
    v117 = 0;
    *(_QWORD *)&v206 = (char *)&v206 + 8;
    *((_QWORD *)&v206 + 1) = 0;
    v207 = 0;
  }
  else
  {
    *(_QWORD *)&v200 = (char *)&v200 + 8;
  }
  v202 = v208;
  v208 = 0uLL;
  v204.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v206, v117);
  MEMORY[0x18D7898AC](&v204);
  v118 = std::runtime_error::runtime_error((std::runtime_error *)a1, &v198);
  v118[1] = v199;
  v118->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v119 = *((_QWORD *)&v200 + 1);
  v118[2].__vftable = (std::runtime_error_vtbl *)v200;
  v118[2].__imp_.__imp_ = (const char *)v119;
  p_imp = (std::runtime_error_vtbl *)&v118[2].__imp_;
  v121 = v201;
  v118[3].__vftable = v201;
  if (v121)
  {
    *(_QWORD *)(v119 + 16) = p_imp;
    v119 = 0;
    *(_QWORD *)&v200 = (char *)&v200 + 8;
    *((_QWORD *)&v200 + 1) = 0;
    v201 = 0;
  }
  else
  {
    v118[2].__vftable = p_imp;
  }
  *(_OWORD *)&v118[3].__imp_.__imp_ = v202;
  v202 = 0uLL;
  LOBYTE(v118[4].__imp_.__imp_) = 0;
  v198.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v200, (unsigned int *)v119);
  MEMORY[0x18D7898AC](&v198);
  if (v190[24])
  {
    *(_QWORD *)&__p = off_1E2521330;
    v122 = *(std::__shared_weak_count **)&v190[16];
    if (*(_QWORD *)&v190[16])
    {
      v123 = (unint64_t *)(*(_QWORD *)&v190[16] + 8);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v189, *((unsigned int **)&v189 + 1));
    MEMORY[0x18D7898AC](&__p);
  }
LABEL_352:
  result = v170.__vftable;
  if (!v175)
    return (std::runtime_error_vtbl *)((uint64_t (*)(std::runtime_error *))v170.~runtime_error)(&v170);
  v170.__vftable = 0;
  if (result)
    return (std::runtime_error_vtbl *)(*((uint64_t (**)(std::runtime_error_vtbl *))result->~runtime_error + 1))(result);
  return result;
}

void sub_18CCAF448(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  uint64_t v69;
  uint64_t v71;

  if (a2)
  {
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x370]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x3C0]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x410]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a39);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a49);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a59);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a69);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x230]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x280]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x478]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x4C8]);
    v71 = *(_QWORD *)(v69 - 184);
    if (*(_BYTE *)(v69 - 112))
    {
      *(_QWORD *)(v69 - 184) = 0;
      if (v71)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
        __clang_call_terminate(a1);
      }
    }
    else
    {
      (*(void (**)(uint64_t))v71)(v69 - 184);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EED0Ev()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E25215A8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E25215A8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EEclEOS8_OSE_OSF_OSH_OSK_(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  void (*v6)(__int128 *, void **, __int128 *, __int128 *, __int128 *);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *__p[2];
  uint64_t v30;
  __int128 v31;

  v6 = *(void (**)(__int128 *, void **, __int128 *, __int128 *, __int128 *))(a1 + 8);
  v31 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v7 = *a3;
  v30 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v9 = *a4;
  v8 = a4[1];
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v28 = v8;
  *(_OWORD *)__p = v7;
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  v26 = *a5;
  v27 = v9;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v25 = *a6;
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  v6(&v31, __p, &v27, &v26, &v25);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_5;
  v11 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (!*((_QWORD *)&v26 + 1))
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (!*((_QWORD *)&v26 + 1))
      goto LABEL_11;
  }
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_11:
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (!*((_QWORD *)&v28 + 1))
    goto LABEL_15;
  v17 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (!*((_QWORD *)&v27 + 1))
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (!*((_QWORD *)&v27 + 1))
      goto LABEL_21;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_21:
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (!*((_QWORD *)&v31 + 1))
      return;
  }
  else
  {
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (!*((_QWORD *)&v31 + 1))
      return;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_12basic_str"
                     "ingIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTokenEEENS4_IKNS_28Metri"
                     "csEventModifierProviderEEEE"
    || ((v3 & (unint64_t)"PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_"
                                "12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTo"
                                "kenEEENS4_IKNS_28MetricsEventModifierProviderEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTokenEEENS4_IKNS_28MetricsEventModifierProviderEEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTokenEEENS4_IKNS_28MetricsEventModifierProviderEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE11target_typeEv()
{
  return &_ZTIPDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTokenEEENS4_IKNS_28MetricsEventModifierProviderEEEE;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EED0Ev()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2521600;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EE7__cloneEPNS0_6__baseISL_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2521600;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EEclEOSB_OSC_OSG_(uint64_t a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  void (*v4)(uint64_t *, __int128 *, __int128 *);
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = *(void (**)(uint64_t *, __int128 *, __int128 *))(a1 + 8);
  v5 = *a2;
  *a2 = 0;
  v21 = v5;
  v6 = *a3;
  v7 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v19 = v6;
  v20 = v7;
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v18 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v4(&v21, &v19, &v18);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (!*((_QWORD *)&v18 + 1))
    goto LABEL_5;
  v9 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_11;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_11:
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14default_delet"
                     "eIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE"
    || ((v3 & (unint64_t)"PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14de"
                                "fault_deleteIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14default_deleteIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14default_deleteIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EE11target_typeEv()
{
  return &_ZTIPDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14default_deleteIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE;
}

void std::__shared_ptr_emplace<AMSCore::MetricsProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25229A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::MetricsProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25229A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::MetricsProvider>::__on_zero_shared(uint64_t a1)
{
  AMSCore::MetricsProvider::~MetricsProvider((AMSCore::MetricsProvider *)(a1 + 24));
}

void AMSCore::MetricsProvider::~MetricsProvider(AMSCore::MetricsProvider *this)
{
  AMSCore::MetricsProvider *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  AMSCore::MetricsProvider *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*((_QWORD *)this + 27));
  std::mutex::~mutex((std::mutex *)((char *)this + 144));
  v2 = (AMSCore::MetricsProvider *)*((_QWORD *)this + 17);
  if (v2 == (AMSCore::MetricsProvider *)((char *)this + 112))
  {
    v3 = 4;
    v2 = (AMSCore::MetricsProvider *)((char *)this + 112);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (AMSCore::MetricsProvider *)*((_QWORD *)this + 11);
  if (v7 == (AMSCore::MetricsProvider *)((char *)this + 64))
  {
    v8 = 4;
    v7 = (AMSCore::MetricsProvider *)((char *)this + 64);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v10)
    goto LABEL_22;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v13)
      goto LABEL_28;
  }
  else
  {
LABEL_22:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v13)
      goto LABEL_28;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_28:
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
}

{
  AMSCore::MetricsProvider::~MetricsProvider(this);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t AMSCore::IMetricsProvider::Event::Event(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD **v6;
  void **v7;
  _QWORD *v8;
  __int128 v9;
  std::string::size_type v10;
  std::string::size_type v11;
  char v12;
  uint64_t *v13;
  int v14;
  char v15;
  std::string::size_type v16;
  std::__shared_weak_count *size;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::ios_base *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string v39;
  std::string v40;
  char v41;
  std::string v42;
  std::string v43;
  void *__p[2];
  uint64_t v45;
  char v46;
  std::string v47;
  std::string v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54[20];
  std::string v55[3];
  char v56;
  _QWORD v57[2];
  _QWORD v58[2];
  const std::string::value_type *v59[2];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E2520A88;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 7824750;
  *(_BYTE *)(a1 + 71) = 3;
  *(_QWORD *)(a1 + 80) = 0;
  v5 = (uint64_t *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = a1 + 80;
  v6 = (_QWORD **)(a1 + 72);
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v7 = (void **)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  v8 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 144) = 0;
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v48, "topic");
  v9 = *a2;
  v45 = *((_QWORD *)a2 + 2);
  *(_OWORD *)__p = v9;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v46 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((_QWORD **)(a1 + 72), (const std::string::value_type **)&v48.__r_.__value_.__l.__data_, (__int128 *)__p);
  if (v46 && SHIBYTE(v45) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v48, "baseVersion");
  LODWORD(v59[0]) = 65537;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned short>(v6, (const std::string::value_type **)&v48.__r_.__value_.__l.__data_, (unsigned __int16 *)v59);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a3 + 32))(v55, a3);
  HIBYTE(v60) = 3;
  strcpy((char *)v59, "app");
  v48 = v55[0];
  memset(v55, 0, 24);
  v49 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)v59[0]);
    if ((SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_44:
    operator delete(v55[0].__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
  if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
LABEL_13:
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a3 + 72))(&v47, a3);
  HIBYTE(v60) = 10;
  strcpy((char *)v59, "appVersion");
  v48 = v47;
  memset(&v47, 0, sizeof(v47));
  v49 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)v59[0]);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v47.__r_.__value_.__l.__data_);
LABEL_18:
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a3 + 16))(&v48, a3);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v7);
  *(std::string *)v7 = v48;
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v47);
  v10 = v47.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v47.__r_.__value_.__l.__data_
                                                                            + 80))(v55, v47.__r_.__value_.__r.__words[0]);
  AMSCore::toString(&v43, (uint64_t)v55);
  HIBYTE(v60) = 2;
  strcpy((char *)v59, "os");
  v48 = v43;
  memset(&v43, 0, sizeof(v43));
  v49 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_48:
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_49:
    operator delete(v55[0].__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  operator delete((void *)v59[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_48;
LABEL_25:
  if (SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_49;
LABEL_26:
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v10 + 88))(&v42, v10);
  HIBYTE(v60) = 9;
  strcpy((char *)v59, "osVersion");
  v48 = v42;
  memset(&v42, 0, sizeof(v42));
  v49 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)v59[0]);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_51:
    operator delete(v42.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_51;
LABEL_31:
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v10 + 72))(v55, v10);
  v58[0] = v55[0].__r_.__value_.__l.__size_;
  v11 = v55[0].__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v58 + 7) = *(std::string::size_type *)((char *)&v55[0].__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v55[0].__r_.__value_.__r.__words[2]);
  memset(v55, 0, 24);
  HIBYTE(v60) = 14;
  strcpy((char *)v59, "hardwareFamily");
  v48.__r_.__value_.__r.__words[0] = v11;
  v48.__r_.__value_.__l.__size_ = v58[0];
  *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v58 + 7);
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = v12;
  v58[0] = 0;
  *(_QWORD *)((char *)v58 + 7) = 0;
  v49 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)v59[0]);
    if ((SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
  }
  else if ((SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v55[0].__r_.__value_.__l.__data_);
LABEL_36:
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v10 + 48))(&v40, v10);
  HIBYTE(v60) = 13;
  strcpy((char *)v59, "hardwareModel");
  v48.__r_.__value_.__s.__data_[0] = 0;
  v49 = 0;
  if (v41)
  {
    v48 = v40;
    memset(&v40, 0, sizeof(v40));
    v49 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
    if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_57:
    operator delete((void *)v59[0]);
    if (!v41)
      goto LABEL_60;
    goto LABEL_58;
  }
  v13 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)v6, (const void **)v59);
  if (v5 != v13)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(v6, (uint64_t)v13);
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>(v8, (const void **)v59);
  if (SHIBYTE(v60) < 0)
    goto LABEL_57;
LABEL_41:
  if (!v41)
    goto LABEL_60;
LABEL_58:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
LABEL_60:
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v10 + 16))(&v39, v10);
  HIBYTE(v60) = 13;
  strcpy((char *)v59, "osBuildNumber");
  v48 = v39;
  memset(&v39, 0, sizeof(v39));
  v49 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)v59[0]);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_65;
  }
  else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_65;
  }
  operator delete(v39.__r_.__value_.__l.__data_);
LABEL_65:
  v14 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v10 + 24))(v10);
  if (v14)
  {
    if (v14 == 2)
    {
      v15 = 4;
      v16 = 1684366707;
    }
    else
    {
      v15 = 8;
      v16 = 0x6C616E7265746E69;
    }
  }
  else
  {
    v15 = 8;
    v16 = 0x72656D6F74737563;
  }
  HIBYTE(v60) = 15;
  strcpy((char *)v59, "clientBuildType");
  v48.__r_.__value_.__r.__words[0] = v16;
  v48.__r_.__value_.__s.__data_[8] = 0;
  *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 1) = v57[0];
  *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v57 + 6);
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = v15;
  v57[0] = 0;
  *(_QWORD *)((char *)v57 + 6) = 0;
  v49 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
    operator delete((void *)v59[0]);
  size = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
  if (v47.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v48, "anonymous");
  LOWORD(v59[0]) = 256;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>(v6, (const std::string::value_type **)&v48.__r_.__value_.__l.__data_, v59);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v48, "eventVersion");
  LODWORD(v59[0]) = 65537;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned short>(v6, (const std::string::value_type **)&v48.__r_.__value_.__l.__data_, (unsigned __int16 *)v59);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  *(_OWORD *)&v55[0].__r_.__value_.__l.__data_ = 0uLL;
  uuid_generate_random((unsigned __int8 *)v55);
  v20 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v20 + 29) = 0;
  *(_OWORD *)v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  uuid_unparse_lower((const unsigned __int8 *)v55, v20);
  HIBYTE(v60) = 13;
  strcpy((char *)v59, "clientEventId");
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = xmmword_18CF51BF0;
  v49 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v59, (__int128 *)&v48);
  if (v49 && SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
    operator delete((void *)v59[0]);
  rep = std::chrono::system_clock::now().__d_.__rep_;
  *((_BYTE *)&v48.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v48, "eventTime");
  AMSCore::IMetricsProvider::Event::withTimePoint(a1, (uint64_t)&v48, rep, 0, 0);
  AMSCore::localTimeSecondsFromUTC((uint64_t)v55, rep);
  if (v56)
  {
    *((_BYTE *)&v48.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&v48, "timezoneOffset");
    v59[0] = (const std::string::value_type *)((int64_t)v55[0].__r_.__value_.__r.__words[0] / 60);
    v59[1] = (const std::string::value_type *)1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<long long>(v6, (const std::string::value_type **)&v48.__r_.__value_.__l.__data_, (uint64_t **)v59);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v48.__r_.__value_.__l.__data_);
      if (!v56)
        goto LABEL_108;
      return a1;
    }
  }
  else
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v47);
    v22 = v47.__r_.__value_.__r.__words[0];
    if (*(int *)(v47.__r_.__value_.__r.__words[0] + 8) <= 4)
    {
      v23 = MEMORY[0x1E0DE4FE0];
      v24 = MEMORY[0x1E0DE4FE0] + 64;
      v25 = (std::string::size_type *)MEMORY[0x1E0DE4F60];
      v26 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v54[0] = MEMORY[0x1E0DE4FE0] + 64;
      v48.__r_.__value_.__r.__words[0] = v26;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + *(_QWORD *)(v26 - 24)) = v27;
      v28 = (std::ios_base *)((char *)&v48 + *(_QWORD *)(v48.__r_.__value_.__r.__words[0] - 24));
      std::ios_base::init(v28, &v48.__r_.__value_.__r.__words[1]);
      v28[1].__vftable = 0;
      v28[1].__fmtflags_ = -1;
      v48.__r_.__value_.__r.__words[0] = v23 + 24;
      v54[0] = v24;
      std::streambuf::basic_streambuf();
      v29 = MEMORY[0x1E0DE4FB8];
      v48.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
      v51 = 0u;
      v52 = 0u;
      v53 = 16;
      v30 = *(_QWORD *)(v48.__r_.__value_.__r.__words[0] - 24);
      if ((v31 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v48, (uint64_t)"The current local time could not be expressed as seconds from UTC. error = ", 75);
      AMSCore::operator<<(&v48, (uint64_t)v55);
      v32 = v50;
      v33 = (char *)&v48 + *(_QWORD *)(v48.__r_.__value_.__r.__words[0] - 24);
      if ((v33[32] & 5) != 0)
      {
        v34 = -1;
      }
      else
      {
        (*(void (**)(const std::string::value_type **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v33 + 5) + 32))(v59, *((_QWORD *)v33 + 5), 0, 1, 16);
        v34 = v62;
      }
      v59[0] = (const std::string::value_type *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v59[1]) = 4;
      v60 = v32;
      v61 = v34;
      (*(void (**)(_QWORD, const char *, uint64_t, const std::string::value_type **))(**(_QWORD **)(v22 + 16)
                                                                                              + 16))(*(_QWORD *)(v22 + 16), "metrics", 7, v59);
      v48.__r_.__value_.__r.__words[0] = *v25;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words
                                + *(_QWORD *)(v48.__r_.__value_.__r.__words[0] - 24)) = v25[3];
      v48.__r_.__value_.__l.__size_ = v29 + 16;
      if (SBYTE7(v52) < 0)
        operator delete((void *)v51);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v54);
    }
    v35 = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
    if (v47.__r_.__value_.__l.__size_)
    {
      v36 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
        if (v56)
          return a1;
        goto LABEL_108;
      }
    }
  }
  if (!v56)
LABEL_108:
    (*(void (**)(std::string *))v55[0].__r_.__value_.__l.__data_)(v55);
  return a1;
}

void sub_18CCB0A30(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned short>(_QWORD **a1, const std::string::value_type **a2, unsigned __int16 *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  char **result;
  char **v23;
  char *v24;
  std::string *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28[3];
  int v29;
  uint64_t *v30;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_42;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    v17 = *((char *)v11 + 55);
    if (v17 >= 0)
      v18 = v11 + 4;
    else
      v18 = (_QWORD *)v11[4];
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v11 + 55);
    else
      v19 = v11[5];
    if (v19 >= v10)
      v20 = v10;
    else
      v20 = v19;
    v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28[0] = (uint64_t *)*a3;
        v29 = 3;
        result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1)
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1E253D240[v29])(&v30, v28);
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    v6 = v11;
  }
LABEL_42:
  result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    v23 = result;
    v24 = (char *)operator new(0x58uLL);
    v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v24 + 6) = a2[2];
    }
    *((_QWORD *)v24 + 7) = *a3;
    *((_DWORD *)v24 + 20) = 3;
    v26 = v28[0];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v26;
    *v23 = v24;
    v27 = (_QWORD *)**a1;
    if (v27)
    {
      *a1 = v27;
      v24 = *v23;
    }
    result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18CCB0D64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::IMetricsProvider::Event::withTimePoint(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  int v11;
  const std::string::value_type *v12;
  size_t v13;
  uint64_t **v14;
  _QWORD *v15;
  const void *v16;
  const void *v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  int v23;
  char *v24;
  std::string *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t **v29;
  int v30;
  const std::string::value_type *v31;
  unint64_t v32;
  uint64_t **v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t *v43;
  std::string *v44;
  uint64_t v45;
  _QWORD v47[3];
  int v48;
  char v49;

  v8 = dword_18CF5960C[a4];
  v47[0] = a3;
  v48 = 7;
  v10 = (uint64_t **)(a1 + 80);
  v9 = *(uint64_t **)(a1 + 80);
  if (v9)
  {
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a2;
    else
      v12 = *(const std::string::value_type **)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      v14 = (uint64_t **)v9;
      v17 = (const void *)v9[4];
      v15 = v9 + 4;
      v16 = v17;
      v18 = *((char *)v15 + 23);
      if (v18 >= 0)
        v19 = v15;
      else
        v19 = v16;
      if (v18 >= 0)
        v20 = *((unsigned __int8 *)v15 + 23);
      else
        v20 = v15[1];
      if (v20 >= v13)
        v21 = v13;
      else
        v21 = v20;
      v22 = memcmp(v12, v19, v21);
      if (v22)
      {
        if (v22 < 0)
          goto LABEL_8;
LABEL_22:
        v23 = memcmp(v19, v12, v21);
        if (v23)
        {
          if ((v23 & 0x80000000) == 0)
            goto LABEL_35;
        }
        else if (v20 >= v13)
        {
LABEL_35:
          v24 = (char *)v14;
          goto LABEL_36;
        }
        v9 = v14[1];
        if (!v9)
        {
          v10 = v14 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v13 >= v20)
          goto LABEL_22;
LABEL_8:
        v9 = *v14;
        v10 = v14;
        if (!*v14)
          goto LABEL_29;
      }
    }
  }
  v14 = (uint64_t **)(a1 + 80);
LABEL_29:
  v24 = (char *)operator new(0x58uLL);
  v25 = (std::string *)(v24 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v24 + 6) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = v14;
  *v10 = (uint64_t *)v24;
  v26 = **(_QWORD **)(a1 + 72);
  v27 = (uint64_t *)v24;
  if (v26)
  {
    *(_QWORD *)(a1 + 72) = v26;
    v27 = *v10;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v27);
  ++*(_QWORD *)(a1 + 88);
LABEL_36:
  AMSCore::Any::operator=((uint64_t)(v24 + 56), (uint64_t)v47);
  if (v48 != -1)
    ((void (*)(char *, _QWORD *))off_1E253D240[v48])(&v49, v47);
  v29 = (uint64_t **)(a1 + 136);
  v28 = *(uint64_t **)(a1 + 136);
  if (!v28)
  {
    v33 = (uint64_t **)(a1 + 136);
    goto LABEL_66;
  }
  v30 = *(char *)(a2 + 23);
  if (v30 >= 0)
    v31 = (const std::string::value_type *)a2;
  else
    v31 = *(const std::string::value_type **)a2;
  if (v30 >= 0)
    v32 = *(unsigned __int8 *)(a2 + 23);
  else
    v32 = *(_QWORD *)(a2 + 8);
  do
  {
    while (1)
    {
      v33 = (uint64_t **)v28;
      v36 = v28[4];
      v34 = v28 + 4;
      v35 = (_QWORD *)v36;
      v37 = *((char *)v34 + 23);
      v38 = v37 >= 0 ? v34 : v35;
      v39 = v37 >= 0 ? *((unsigned __int8 *)v34 + 23) : v34[1];
      v40 = v39 >= v32 ? v32 : v39;
      v41 = memcmp(v31, v38, v40);
      if (v41)
        break;
      if (v32 >= v39)
        goto LABEL_59;
LABEL_45:
      v28 = *v33;
      v29 = v33;
      if (!*v33)
        goto LABEL_66;
    }
    if (v41 < 0)
      goto LABEL_45;
LABEL_59:
    v42 = memcmp(v38, v31, v40);
    if (v42)
    {
      if ((v42 & 0x80000000) == 0)
        return a1;
    }
    else if (v39 >= v32)
    {
      return a1;
    }
    v28 = v33[1];
  }
  while (v28);
  v29 = v33 + 1;
LABEL_66:
  v43 = (uint64_t *)operator new(0x40uLL);
  v44 = (std::string *)(v43 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v43[6] = *(_QWORD *)(a2 + 16);
  }
  v43[7] = v8 | ((unint64_t)(a5 == 1) << 32);
  *v43 = 0;
  v43[1] = 0;
  v43[2] = (uint64_t)v33;
  *v29 = v43;
  v45 = **(_QWORD **)(a1 + 128);
  if (v45)
  {
    *(_QWORD *)(a1 + 128) = v45;
    v43 = *v29;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 136), v43);
  ++*(_QWORD *)(a1 + 144);
  return a1;
}

void sub_18CCB1080(void *a1)
{
  void *v1;

  operator delete(v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::IMetricsProvider::Event::{unnamed type#1}::~Event(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_BYTE *AMSCore::IMetricsProvider::Event::takeProperties(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  void **v25;
  uint64_t *v26;
  _QWORD *v27;
  unsigned int v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *result;
  __int128 v38;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  const std::runtime_error *v43;
  char v44;
  std::runtime_error_vtbl *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::string *v66;
  std::runtime_error *v67;
  void *__p[2];
  std::string::size_type v69;
  char v70;

  v6 = (char *)operator new(0x240uLL);
  v7 = (unint64_t)v6;
  *(_QWORD *)v6 = AMSCore::IMetricsProvider::Event::takeProperties;
  *((_QWORD *)v6 + 1) = AMSCore::IMetricsProvider::Event::takeProperties;
  *((_QWORD *)v6 + 68) = a2;
  *((_OWORD *)v6 + 6) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 108) = *(_OWORD *)(a3 + 12);
  v8 = (_QWORD *)(a3 + 40);
  v9 = *(_QWORD *)(a3 + 40);
  *((_QWORD *)v6 + 16) = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v6 + 17) = v9;
  v10 = v6 + 136;
  v11 = *(_QWORD *)(a3 + 48);
  *((_QWORD *)v6 + 18) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)(a3 + 32) = v8;
    *v8 = 0;
    *(_QWORD *)(a3 + 48) = 0;
  }
  else
  {
    *((_QWORD *)v6 + 16) = v10;
  }
  v12 = (_QWORD *)(a3 + 64);
  v13 = *(_QWORD *)(a3 + 64);
  v14 = *(_QWORD *)(a3 + 56);
  *((_QWORD *)v6 + 20) = v13;
  v15 = v6 + 160;
  *((_QWORD *)v6 + 19) = v14;
  v16 = *(_QWORD *)(a3 + 72);
  *((_QWORD *)v6 + 21) = v16;
  if (v16)
  {
    *(_QWORD *)(v13 + 16) = v15;
    *(_QWORD *)(a3 + 56) = v12;
    *v12 = 0;
    *(_QWORD *)(a3 + 72) = 0;
  }
  else
  {
    *((_QWORD *)v6 + 19) = v15;
  }
  v17 = v6 + 16;
  v18 = (_QWORD *)(a3 + 88);
  v19 = *(_QWORD *)(a3 + 88);
  v20 = *(_QWORD *)(a3 + 80);
  *((_QWORD *)v6 + 23) = v19;
  v21 = v6 + 184;
  *((_QWORD *)v6 + 22) = v20;
  v22 = *(_QWORD *)(a3 + 96);
  *((_QWORD *)v6 + 24) = v22;
  if (v22)
  {
    *(_QWORD *)(v19 + 16) = v21;
    *(_QWORD *)(a3 + 80) = v18;
    *v18 = 0;
    *(_QWORD *)(a3 + 96) = 0;
  }
  else
  {
    *((_QWORD *)v6 + 22) = v21;
  }
  v23 = v6 + 552;
  v66 = (std::string *)(v6 + 456);
  v67 = (std::runtime_error *)(v6 + 376);
  v24 = *(_OWORD *)(a3 + 104);
  v6[216] = 0;
  v25 = (void **)(v6 + 488);
  v26 = (uint64_t *)(v6 + 512);
  v27 = v6 + 528;
  *(_OWORD *)(v6 + 200) = v24;
  v6[368] = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(v6 + 216), (__int128 *)(a3 + 120));
  do
    v28 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v28 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_QWORD *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v29 = (_QWORD *)operator new();
  *v29 = &off_1E25239D0;
  v29[1] = 0;
  v29[2] = 0;
  v29[3] = v17;
  *(_QWORD *)&v30 = v7 + 16;
  *((_QWORD *)&v30 + 1) = v29;
  *a1 = v30;
  if ((uint64_t *)(a2 + 80) == std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>(a2 + 72, "storeFrontHeader"))
  {
    AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault((_QWORD *)(v7 + 512));
    v36 = *v26;
    if (*(char *)(a2 + 127) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v7 + 488), *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
    }
    else
    {
      *(_OWORD *)v25 = *(_OWORD *)(a2 + 104);
      *(_QWORD *)(v7 + 504) = *(_QWORD *)(a2 + 120);
    }
    result = AMSCore::IAccountProvider::getActiveOrLocalMediaAccount((_OWORD *)(v7 + 528), v36, v7 + 488);
    v38 = *(_OWORD *)(v7 + 528);
    *(_OWORD *)v23 = v38;
    *v27 = 0;
    *(_QWORD *)(v7 + 536) = 0;
    if (!atomic_load((unint64_t *)(v38 + 96)))
    {
      *(_BYTE *)(v7 + 568) = 0;
      v40 = (unint64_t *)(*(_QWORD *)(v7 + 552) + 96);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v7, v40));
      if (!v41)
        return result;
    }
    v42 = *(_QWORD *)v23;
    if (!*(_BYTE *)(*(_QWORD *)v23 + 88))
    {
      __break(1u);
      return result;
    }
    v43 = (const std::runtime_error *)(v42 + 8);
    v44 = *(_BYTE *)(v42 + 80);
    if (v44)
    {
      v45 = v43->__vftable;
      v43->__vftable = 0;
      v67->__vftable = v45;
    }
    else
    {
      std::runtime_error::runtime_error(v67, v43);
      *(_OWORD *)(v7 + 392) = *(_OWORD *)(v42 + 24);
      *(_QWORD *)(v7 + 376) = off_1E2521330;
      v46 = (_QWORD *)(v42 + 48);
      v47 = *(_QWORD *)(v42 + 48);
      v48 = v7 + 416;
      *(_QWORD *)(v7 + 408) = *(_QWORD *)(v42 + 40);
      *(_QWORD *)(v7 + 416) = v47;
      v49 = *(_QWORD *)(v42 + 56);
      *(_QWORD *)(v7 + 424) = v49;
      if (v49)
      {
        *(_QWORD *)(v47 + 16) = v48;
        *(_QWORD *)(v42 + 40) = v46;
        *v46 = 0;
        *(_QWORD *)(v42 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 408) = v48;
      }
      v50 = *(_QWORD *)(v7 + 552);
      *(_OWORD *)(v7 + 432) = *(_OWORD *)(v50 + 64);
      *(_QWORD *)(v50 + 64) = 0;
      *(_QWORD *)(v50 + 72) = 0;
    }
    *(_BYTE *)(v7 + 448) = v44;
    v51 = *(_QWORD *)(v7 + 560);
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        v54 = *(std::__shared_weak_count **)(v7 + 560);
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v55 = *(std::__shared_weak_count **)(v7 + 536);
    if (!v55)
      goto LABEL_43;
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      if ((*(char *)(v7 + 511) & 0x80000000) == 0)
        goto LABEL_45;
    }
    else
    {
LABEL_43:
      if ((*(char *)(v7 + 511) & 0x80000000) == 0)
      {
LABEL_45:
        v58 = *(std::__shared_weak_count **)(v7 + 520);
        if (!v58)
          goto LABEL_49;
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
          if (!*(_BYTE *)(v7 + 448))
            goto LABEL_57;
        }
        else
        {
LABEL_49:
          if (!*(_BYTE *)(v7 + 448))
            goto LABEL_57;
        }
        if (v67->__vftable)
        {
          (*((void (**)(void **__return_ptr, std::runtime_error_vtbl *, uint64_t))v67->~runtime_error + 16))(__p, v67->__vftable, *(_QWORD *)(v7 + 544) + 104);
          if (v70)
          {
            if (SHIBYTE(v69) < 0)
            {
              std::string::__init_copy_ctor_external(v66, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_OWORD *)&v66->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
              v66->__r_.__value_.__r.__words[2] = v69;
            }
            v64 = *(_QWORD *)(v7 + 544);
            *(_BYTE *)(v7 + 480) = 1;
            AMSCore::IMetricsProvider::Event::withStorefrontHeader(v64, (uint64_t)v66);
            if (*(_BYTE *)(v7 + 480) && *(char *)(v7 + 479) < 0)
              operator delete(v66->__r_.__value_.__l.__data_);
            if (v70 && SHIBYTE(v69) < 0)
              operator delete(__p[0]);
          }
LABEL_69:
          v65 = *(_QWORD *)(v7 + 376);
          if (*(_BYTE *)(v7 + 448))
          {
            v67->__vftable = 0;
            if (v65)
              (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
          }
          else
          {
            (*(void (**)(std::runtime_error *))v65)(v67);
          }
          goto LABEL_13;
        }
LABEL_57:
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(__p);
        AMSCore::Logger::log<char [51]>((uint64_t)__p[0], 4, (uint64_t)"metrics", 7, "Failed to get account storefront for metrics event");
        v61 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v62 = (unint64_t *)((char *)__p[1] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        goto LABEL_69;
      }
    }
    operator delete(*v25);
    goto LABEL_45;
  }
LABEL_13:
  AMSCore::MetricFormatter::formatTimes(*(_QWORD *)(v7 + 544) + 72, (const void ***)(*(_QWORD *)(v7 + 544) + 128));
  if (*(_BYTE *)(v7 + 48))
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v7 + 24, *(unsigned int **)(v7 + 32));
  v31 = *(_QWORD **)(v7 + 544);
  *(_QWORD *)(v7 + 24) = v31[9];
  v32 = v31 + 10;
  v33 = v31[10];
  *(_QWORD *)(v7 + 32) = v33;
  v34 = v7 + 32;
  v35 = v31[11];
  *(_QWORD *)(v7 + 40) = v35;
  if (v35)
  {
    *(_QWORD *)(v33 + 16) = v34;
    v31[9] = v32;
    *v32 = 0;
    v31[11] = 0;
  }
  else
  {
    *(_QWORD *)(v7 + 24) = v34;
  }
  *(_BYTE *)(v7 + 48) = 1;
  *(_QWORD *)(v7 + 376) = v17;
  *(_QWORD *)v7 = 0;
  return AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::Awaiter::await_suspend(v67);
}

void sub_18CCB170C(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

_QWORD *AMSCore::IMetricsProvider::Event::takeProperties(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  std::runtime_error_vtbl **v3;
  const std::runtime_error *v4;
  char v5;
  std::runtime_error_vtbl *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *__p[2];
  uint64_t v34;
  char v35;

  v1 = result[69];
  if (!*(_BYTE *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = (std::runtime_error_vtbl **)(result + 47);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 80);
  if (v5)
  {
    v6 = v4->__vftable;
    v4->__vftable = 0;
    *v3 = v6;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 47), v4);
    *(_OWORD *)(v2 + 49) = *(_OWORD *)(v1 + 24);
    v2[47] = off_1E2521330;
    v7 = (_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 48);
    v9 = v2 + 52;
    v2[51] = *(_QWORD *)(v1 + 40);
    v2[52] = v8;
    v10 = *(_QWORD *)(v1 + 56);
    v2[53] = v10;
    if (v10)
    {
      *(_QWORD *)(v8 + 16) = v9;
      *(_QWORD *)(v1 + 40) = v7;
      *v7 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      v2[51] = v9;
    }
    v11 = v2[69];
    *((_OWORD *)v2 + 27) = *(_OWORD *)(v11 + 64);
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 72) = 0;
  }
  *((_BYTE *)v2 + 448) = v5;
  v12 = v2[70];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      v15 = (std::__shared_weak_count *)v2[70];
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v16 = (std::__shared_weak_count *)v2[67];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if ((*((char *)v2 + 511) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  if (*((char *)v2 + 511) < 0)
LABEL_18:
    operator delete((void *)v2[61]);
LABEL_19:
  v19 = (std::__shared_weak_count *)v2[65];
  if (!v19)
    goto LABEL_23;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!*((_BYTE *)v2 + 448))
      goto LABEL_31;
  }
  else
  {
LABEL_23:
    if (!*((_BYTE *)v2 + 448))
    {
LABEL_31:
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(__p);
      AMSCore::Logger::log<char [51]>((uint64_t)__p[0], 4, (uint64_t)"metrics", 7, "Failed to get account storefront for metrics event");
      v23 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v24 = (unint64_t *)((char *)__p[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      goto LABEL_43;
    }
  }
  if (!*v3)
    goto LABEL_31;
  (*((void (**)(void **__return_ptr, std::runtime_error_vtbl *, uint64_t))(*v3)->~runtime_error + 16))(__p, *v3, v2[68] + 104);
  if (v35)
  {
    v22 = (void **)(v2 + 57);
    if (SHIBYTE(v34) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v2 + 19, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)v22 = *(_OWORD *)__p;
      v2[59] = v34;
    }
    v26 = v2[68];
    *((_BYTE *)v2 + 480) = 1;
    AMSCore::IMetricsProvider::Event::withStorefrontHeader(v26, (uint64_t)(v2 + 57));
    if (*((_BYTE *)v2 + 480) && *((char *)v2 + 479) < 0)
      operator delete(*v22);
    if (v35 && SHIBYTE(v34) < 0)
      operator delete(__p[0]);
  }
LABEL_43:
  v27 = v2[47];
  if (*((_BYTE *)v2 + 448))
  {
    *v3 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  else
  {
    (*(void (**)(std::runtime_error_vtbl **))v27)(v3);
  }
  AMSCore::MetricFormatter::formatTimes(v2[68] + 72, (const void ***)(v2[68] + 128));
  if (*((_BYTE *)v2 + 48))
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(v2 + 3), (unsigned int *)v2[4]);
  v28 = (_QWORD *)v2[68];
  v2[3] = v28[9];
  v29 = v28 + 10;
  v30 = v28[10];
  v2[4] = v30;
  v31 = v2 + 4;
  v32 = v28[11];
  v2[5] = v32;
  if (v32)
  {
    *(_QWORD *)(v30 + 16) = v31;
    v28[9] = v29;
    *v29 = 0;
    v28[11] = 0;
  }
  else
  {
    v2[3] = v31;
  }
  *((_BYTE *)v2 + 48) = 1;
  v2[47] = v2 + 2;
  *v2 = 0;
  return AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CCB1A64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  if (a15 && a14 < 0)
    operator delete(__p);
  v18 = *(_QWORD *)(v16 + 376);
  if (*(_BYTE *)(v16 + 448))
  {
    *v15 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    (*(void (**)(_QWORD *))v18)(v15);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::IMetricsProvider::Event::takeProperties(char *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if (!*(_QWORD *)a1)
    goto LABEL_18;
  v2 = *((_QWORD *)a1 + 70);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 70);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 67);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((a1[511] & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  if (a1[511] < 0)
LABEL_12:
    operator delete(*((void **)a1 + 61));
LABEL_13:
  v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 65);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_18:
  v12 = (char *)*((_QWORD *)a1 + 11);
  if (v12 == a1 + 64)
  {
    v13 = 4;
    v12 = a1 + 64;
  }
  else
  {
    if (!v12)
      goto LABEL_23;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_23:
  if (a1[48])
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 24), *((unsigned int **)a1 + 4));
  do
  {
    v14 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v15)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (a1[368])
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 216));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 23));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 20));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 17));
  operator delete(a1);
}

uint64_t AMSCore::IMetricsProvider::Event::withStorefrontHeader(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  void *__p[2];
  uint64_t v6;
  char v7;
  const std::string::value_type *v8[4];

  HIBYTE(v8[2]) = 16;
  strcpy((char *)v8, "storeFrontHeader");
  LOBYTE(__p[0]) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v7 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((_QWORD **)(a1 + 72), v8, (__int128 *)__p);
    if (v7 && SHIBYTE(v6) < 0)
      operator delete(__p[0]);
    if ((SHIBYTE(v8[2]) & 0x80000000) == 0)
      return a1;
LABEL_10:
    operator delete((void *)v8[0]);
    return a1;
  }
  v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 72, (const void **)v8);
  if ((uint64_t *)(a1 + 80) != v4)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((_QWORD *)(a1 + 72), (uint64_t)v4);
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((_QWORD *)(a1 + 128), (const void **)v8);
  if (SHIBYTE(v8[2]) < 0)
    goto LABEL_10;
  return a1;
}

_QWORD *AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::Awaiter::await_suspend(_QWORD *result)
{
  _QWORD *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t *v5;
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int *v12;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v1 = result;
  v16 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*result + 40);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (!v3)
    return result;
  if (v3 == (void (**)(_QWORD))2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*result - 8))(*result - 16);
  v5 = (uint64_t *)(*result + 72);
  v4 = *v5;
  if (*v5)
  {
    if (v4 == *v1 + 48)
    {
      v15 = v14;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 24))(v4, v14);
    }
    else
    {
      v15 = *(_BYTE **)(*v1 + 72);
      *v5 = 0;
    }
  }
  else
  {
    v15 = 0;
  }
  v6 = v15;
  if (v15)
  {
    v7 = (_QWORD *)*v1;
    if (*(_BYTE *)(*v1 + 32))
    {
      v8 = v7 + 2;
      v9 = v7[2];
      v11 = (unsigned int **)v7[1];
      v12 = (unsigned int *)v9;
      if (v7[3])
      {
        *(_QWORD *)(v9 + 16) = &v12;
        v7[1] = v8;
        *v8 = 0;
        v7[3] = 0;
        v6 = v15;
        if (!v15)
          std::__throw_bad_function_call[abi:fe180100]();
      }
      else
      {
        v11 = &v12;
      }
      (*(void (**)(_BYTE *, unsigned int ***))(*(_QWORD *)v6 + 48))(v6, &v11);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, v12);
      goto LABEL_20;
    }
    __break(1u);
  }
  (*v3)(v3);
LABEL_20:
  result = v15;
  if (v15 == v14)
  {
    v10 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v10))(result);
}

void sub_18CCB1EDC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 40);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS"
                     "1_4lessIvEENS6_INS1_4pairIKS8_S9_EEEEEEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEE"
                                "ENS_3AnyENS1_4lessIvEENS6_INS1_4pairIKS8_S9_EEEEEEvE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS6_INS1_4pairIKS8_S9_EEEEEEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS6_INS1_4pairIKS8_S9_EEEEEEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::MetricsProvider::postEvents(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  char *v8;
  AMSCore::MetricsEventModifier::MergedEventModifier *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  unsigned int v14;
  void (***v15)(uint64_t);
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  const AMSCore::IMetricsProvider::Event *v39;
  int v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  AMSCore::IMetricsProvider::Event *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  std::runtime_error *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  unsigned int ***v112;
  _QWORD *v113;
  uint64_t v114;
  _OWORD *v115;
  _OWORD *v116;
  _OWORD *v117;
  _OWORD *v118;
  unsigned int **v119;
  _QWORD *v120;
  std::runtime_error *v121;
  char *v122;
  char *v123;
  std::runtime_error *v124;
  _BYTE *v125;
  const AMSCore::IMetricsProvider::Event **v126;
  _OWORD v127[4];
  char v128;

  v6 = (char *)operator new(0x390uLL);
  v7 = (unint64_t)v6;
  v125 = v6 + 904;
  v8 = v6 + 440;
  *(_QWORD *)v6 = AMSCore::MetricsProvider::postEvents;
  *((_QWORD *)v6 + 1) = AMSCore::MetricsProvider::postEvents;
  v9 = (AMSCore::MetricsEventModifier::MergedEventModifier *)(v6 + 152);
  v108 = (std::runtime_error *)(v6 + 600);
  v123 = v6 + 744;
  v124 = (std::runtime_error *)(v6 + 672);
  *((_QWORD *)v6 + 104) = a1;
  v10 = *(uint64_t **)a2;
  v11 = *(uint64_t **)(a2 + 8);
  *((_QWORD *)v6 + 105) = *(_QWORD *)a2;
  v12 = v6 + 776;
  v121 = (std::runtime_error *)(v6 + 520);
  v122 = v6 + 792;
  v126 = (const AMSCore::IMetricsProvider::Event **)(v6 + 808);
  v13 = (uint64_t *)(v6 + 824);
  v114 = (uint64_t)(v6 + 16);
  *((_QWORD *)v6 + 106) = v11;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  do
    v14 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v14 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v15 = (void (***)(uint64_t))(v6 + 24);
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v127, v114);
  *a3 = v127[0];
  if (v10 == v11)
  {
LABEL_126:
    if (*(_BYTE *)(v7 + 104))
    {
      if (!*(_BYTE *)(v7 + 96))
        (**v15)(v7 + 24);
    }
    *(_BYTE *)(v7 + 96) = 1;
    *(_BYTE *)(v7 + 104) = 1;
LABEL_130:
    *(_QWORD *)(v7 + 896) = v7;
    *(_QWORD *)(v7 + 152) = v114;
    *(_QWORD *)v7 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v9);
    return;
  }
  v118 = (_OWORD *)(v7 + 536);
  v119 = (unsigned int **)(v7 + 480);
  v112 = (unsigned int ***)(v7 + 472);
  v113 = (_QWORD *)(v7 + 560);
  v120 = (_QWORD *)(v7 + 632);
  v116 = (_OWORD *)(v7 + 616);
  v117 = (_OWORD *)(v7 + 456);
  v110 = (_QWORD *)(v7 + 712);
  v111 = (_QWORD *)(v7 + 640);
  v109 = (_QWORD *)(v7 + 704);
  v115 = (_OWORD *)(v7 + 688);
  v16 = v8 + 288;
  v107 = v7 + 64;
  while (2)
  {
    *(_QWORD *)(v7 + 856) = v10;
    v17 = *v10;
    *(_QWORD *)(v7 + 808) = *v10;
    if (v17)
    {
      v18 = (_QWORD *)operator new();
      v19 = *(_QWORD *)(v7 + 832);
      v20 = *v10;
      v18[1] = 0;
      v21 = v18 + 1;
      *v18 = &off_1E25231F0;
      v18[2] = 0;
      v18[3] = v20;
      *(_QWORD *)(v7 + 816) = v18;
      *v10 = 0;
      v22 = *(_QWORD **)(v19 + 96);
      *(_QWORD *)(v7 + 776) = v17;
      *(_QWORD *)(v7 + 784) = v18;
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
    }
    else
    {
      v24 = *(_QWORD *)(v7 + 832);
      *(_QWORD *)(v7 + 816) = 0;
      *v10 = 0;
      v22 = *(_QWORD **)(v24 + 96);
      *v12 = 0;
      v12[1] = 0;
    }
    AMSCore::MetricsEventModifierProvider::getOverrideForEvent(v8, v22, (uint64_t)v12);
    v25 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 864) = *(_OWORD *)v8;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    if (!atomic_load((unint64_t *)(v25 + 304)))
    {
      *v125 = 0;
      v27 = (unint64_t *)(*(_QWORD *)(v7 + 864) + 304);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v7, v27));
      if (!v28)
        return;
    }
    AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume((uint64_t)v9, *(_QWORD *)(v7 + 864));
    v29 = *(_QWORD *)(v7 + 872);
    if (!v29)
      goto LABEL_18;
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      v35 = *(std::__shared_weak_count **)(v7 + 872);
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v32 = *(std::__shared_weak_count **)(v7 + 448);
      if (!v32)
        goto LABEL_24;
    }
    else
    {
LABEL_18:
      v32 = *(std::__shared_weak_count **)(v7 + 448);
      if (!v32)
        goto LABEL_24;
    }
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_24:
    v36 = *(std::__shared_weak_count **)(v7 + 784);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *v126;
    AMSCore::MetricsEventModifier::MergedEventModifier::shouldDropEvent(v9, *v126);
    if (v40)
    {
      AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)v127, (uint64_t *)v39 + 9, "topic", 5uLL);
      if (v128)
      {
        v41 = *(_QWORD *)&v127[0];
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v8);
        AMSCore::Logger::log<char [17],std::string>(*(_QWORD *)v8, v41);
        v42 = *(std::__shared_weak_count **)(v7 + 448);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = 7;
        if (!*(_BYTE *)(v7 + 424))
          goto LABEL_38;
        goto LABEL_37;
      }
LABEL_152:
      __break(1u);
      return;
    }
    v49 = (AMSCore::IMetricsProvider::Event *)operator new();
    AMSCore::IMetricsProvider::Event::Event(v49, v39);
    v50 = *(_QWORD **)(v7 + 832);
    *(_QWORD *)(v7 + 824) = v49;
    *(_QWORD *)(v7 + 744) = v50[3];
    v51 = v50[4];
    *(_QWORD *)(v7 + 752) = v51;
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      v50 = *(_QWORD **)(v7 + 832);
    }
    *(_QWORD *)(v7 + 760) = v50[5];
    v54 = v50[6];
    *(_QWORD *)(v7 + 768) = v54;
    if (v54)
    {
      v55 = (unint64_t *)(v54 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      v50 = *(_QWORD **)(v7 + 832);
    }
    *(_QWORD *)(v7 + 792) = v50[12];
    v57 = v50[13];
    *(_QWORD *)(v7 + 800) = v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      v50 = *(_QWORD **)(v7 + 832);
    }
    v60 = v50[17];
    if (!v60)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *, char *, char *))(*(_QWORD *)v60 + 48))(v60, v13, v123, v122);
    v61 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 880) = *(_OWORD *)v8;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    if (atomic_load((unint64_t *)(v61 + 96)))
      goto LABEL_63;
    *v125 = 1;
    v63 = (unint64_t *)(*(_QWORD *)(v7 + 880) + 96);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v7, v63));
    if (v64)
    {
LABEL_63:
      v65 = *(_QWORD *)(v7 + 880);
      if (!*(_BYTE *)(v65 + 88))
        goto LABEL_152;
      v66 = *(_BYTE *)(v65 + 80);
      if (!v66)
      {
        std::runtime_error::runtime_error(v121, (const std::runtime_error *)(v65 + 8));
        *v118 = *(_OWORD *)(v65 + 24);
        *(_QWORD *)(v7 + 520) = off_1E2521330;
        v67 = (_QWORD *)(v65 + 48);
        v68 = *(_QWORD *)(v65 + 48);
        *(_QWORD *)(v7 + 552) = *(_QWORD *)(v65 + 40);
        *(_QWORD *)(v7 + 560) = v68;
        v69 = *(_QWORD *)(v65 + 56);
        *(_QWORD *)(v7 + 568) = v69;
        if (v69)
        {
          *(_QWORD *)(v68 + 16) = v113;
          *(_QWORD *)(v65 + 40) = v67;
          *v67 = 0;
          *(_QWORD *)(v65 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 552) = v113;
        }
        v70 = *(_QWORD *)(v7 + 880);
        *(_OWORD *)(v7 + 576) = *(_OWORD *)(v70 + 64);
        *(_QWORD *)(v70 + 64) = 0;
        *(_QWORD *)(v70 + 72) = 0;
      }
      *(_BYTE *)(v7 + 592) = v66;
      v71 = *(_QWORD *)(v7 + 888);
      if (!v71)
        goto LABEL_73;
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        v77 = *(std::__shared_weak_count **)(v7 + 888);
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
        v74 = *(std::__shared_weak_count **)(v7 + 448);
        if (!v74)
          goto LABEL_79;
      }
      else
      {
LABEL_73:
        v74 = *(std::__shared_weak_count **)(v7 + 448);
        if (!v74)
          goto LABEL_79;
      }
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
LABEL_79:
      v78 = *(std::__shared_weak_count **)(v7 + 800);
      if (!v78)
        goto LABEL_83;
      v79 = (unint64_t *)&v78->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
        v81 = *(std::__shared_weak_count **)(v7 + 768);
        if (!v81)
          goto LABEL_89;
      }
      else
      {
LABEL_83:
        v81 = *(std::__shared_weak_count **)(v7 + 768);
        if (!v81)
          goto LABEL_89;
      }
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
LABEL_89:
      v84 = *(std::__shared_weak_count **)(v7 + 752);
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = *v13;
      *v13 = 0;
      if (v87)
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
      if (*(_BYTE *)(v7 + 592))
      {
        v45 = 0;
        if (!*(_BYTE *)(v7 + 424))
        {
LABEL_38:
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 240));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 216));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v7 + 192));
          v46 = *(std::__shared_weak_count **)(v7 + 816);
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          switch(v45)
          {
            case 0:
            case 7:
              v10 = (uint64_t *)(*(_QWORD *)(v7 + 856) + 8);
              if (v10 == *(uint64_t **)(v7 + 848))
                goto LABEL_126;
              continue;
            case 3:
              goto LABEL_130;
            case 6:
              goto LABEL_126;
            default:
              v99 = *(_QWORD **)(v7 + 144);
              if (v99 == (_QWORD *)(v7 + 120))
              {
                v100 = 4;
                v99 = (_QWORD *)(v7 + 120);
              }
              else
              {
                if (!v99)
                  goto LABEL_137;
                v100 = 5;
              }
              (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_137:
              if (*(_BYTE *)(v7 + 104) && !*(_BYTE *)(v7 + 96))
                (**v15)(v7 + 24);
              v101 = *(_QWORD *)(v7 + 840);
              do
              {
                v102 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
                v103 = v102 - 1;
              }
              while (__stlxr(v103, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
              if (!v103)
                MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
              if (v101)
              {
                v104 = *(_QWORD **)(v7 + 848);
                while (v104 != *(_QWORD **)(v7 + 840))
                {
                  v106 = *--v104;
                  v105 = v106;
                  *v104 = 0;
                  if (v106)
                    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
                }
                operator delete(v104);
              }
              operator delete((void *)v7);
              break;
          }
          return;
        }
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)v8, v121);
        *v117 = *v118;
        *(_QWORD *)(v7 + 440) = off_1E2521330;
        v88 = *(_QWORD *)(v7 + 560);
        *(_QWORD *)(v7 + 472) = *(_QWORD *)(v7 + 552);
        *(_QWORD *)(v7 + 480) = v88;
        v89 = *(_QWORD *)(v7 + 568);
        *(_QWORD *)(v7 + 488) = v89;
        if (v89)
        {
          *(_QWORD *)(v88 + 16) = v119;
          *(_QWORD *)(v7 + 552) = v113;
          *v113 = 0;
          *(_QWORD *)(v7 + 568) = 0;
        }
        else
        {
          *v112 = v119;
        }
        *(_OWORD *)(v7 + 496) = *(_OWORD *)(v7 + 576);
        *(_QWORD *)(v7 + 576) = 0;
        *(_QWORD *)(v7 + 584) = 0;
        *(_BYTE *)(v7 + 512) = 1;
        std::runtime_error::runtime_error(v108, (const std::runtime_error *)v8);
        *v116 = *v117;
        *(_QWORD *)(v7 + 600) = off_1E2521330;
        v90 = *(_QWORD *)(v7 + 480);
        *(_QWORD *)(v7 + 632) = *(_QWORD *)(v7 + 472);
        *(_QWORD *)(v7 + 640) = v90;
        v91 = *(_QWORD *)(v7 + 488);
        *(_QWORD *)(v7 + 648) = v91;
        if (v91)
        {
          *(_QWORD *)(v90 + 16) = v111;
          *v112 = v119;
          *v119 = 0;
          *(_QWORD *)(v7 + 488) = 0;
        }
        else
        {
          *v120 = v111;
        }
        *(_OWORD *)(v7 + 656) = *(_OWORD *)(v7 + 496);
        *(_QWORD *)(v7 + 496) = 0;
        *(_QWORD *)(v7 + 504) = 0;
        std::runtime_error::runtime_error(v124, v108);
        *v115 = *v116;
        *(_QWORD *)(v7 + 672) = off_1E2521330;
        *(_QWORD *)(v7 + 704) = *(_QWORD *)(v7 + 632);
        v92 = *(_QWORD *)(v7 + 640);
        *(_QWORD *)(v7 + 712) = v92;
        v93 = *(_QWORD *)(v7 + 648);
        *(_QWORD *)(v7 + 720) = v93;
        if (v93)
        {
          *(_QWORD *)(v92 + 16) = v110;
          v92 = 0;
          *v120 = v111;
          *v111 = 0;
          *(_QWORD *)(v7 + 648) = 0;
        }
        else
        {
          *v109 = v110;
        }
        *v16 = *(_OWORD *)(v7 + 656);
        *(_QWORD *)(v7 + 656) = 0;
        *(_QWORD *)(v7 + 664) = 0;
        *(_QWORD *)(v7 + 600) = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v120, (unsigned int *)v92);
        MEMORY[0x18D7898AC](v108);
        if (*(_BYTE *)(v7 + 104))
        {
          if (!*(_BYTE *)(v7 + 96))
            (**v15)(v7 + 24);
          *(_BYTE *)(v7 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), v124);
        *(_OWORD *)(v7 + 40) = *v115;
        *(_QWORD *)(v7 + 24) = off_1E2521330;
        v94 = *(_QWORD *)(v7 + 712);
        *(_QWORD *)(v7 + 56) = *(_QWORD *)(v7 + 704);
        *(_QWORD *)(v7 + 64) = v94;
        v95 = *(_QWORD *)(v7 + 720);
        *(_QWORD *)(v7 + 72) = v95;
        if (v95)
        {
          *(_QWORD *)(v94 + 16) = v107;
          v94 = 0;
          *v109 = v110;
          *v110 = 0;
          *(_QWORD *)(v7 + 720) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 56) = v107;
        }
        *(_OWORD *)(v7 + 80) = *v16;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v8 + 37) = 0;
        *(_BYTE *)(v7 + 96) = 0;
        *(_BYTE *)(v7 + 104) = 1;
        *(_QWORD *)(v7 + 672) = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v109, (unsigned int *)v94);
        MEMORY[0x18D7898AC](v124);
        if (*(_BYTE *)(v7 + 512))
        {
          *(_QWORD *)(v7 + 440) = off_1E2521330;
          v96 = *(std::__shared_weak_count **)(v7 + 504);
          if (v96)
          {
            v97 = (unint64_t *)&v96->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v112, *v119);
          MEMORY[0x18D7898AC](v8);
        }
        if (!*(_BYTE *)(v7 + 592))
          ((void (*)(std::runtime_error *))v121->~runtime_error)(v121);
        v45 = 3;
        if (!*(_BYTE *)(v7 + 424))
          goto LABEL_38;
      }
LABEL_37:
      AMSCore::URL::~URL((AMSCore::URL *)(v7 + 272));
      goto LABEL_38;
    }
    break;
  }
}

void sub_18CCB2B00(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  AMSCore::MetricsEventModifier::EventModifier *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a29);
  AMSCore::AppleHTTPProvider::submitRequest(std::shared_ptr<AMSCore::HTTPRequest const>,std::optional<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0::~$_0(a30);
  v34 = *v31;
  *v31 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v30);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](*(_QWORD *)(v32 - 184));
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCB2BA4()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCB29F4);
}

#error "18CCB2F70: call analysis failed (funcsize=558)"

void sub_18CCB34B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, void (***a11)(_QWORD), void (***a12)(_QWORD), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  _BYTE *v25;
  char **v26;

  if (a2)
  {
    if (*v25)
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*v26);
    else
      (**a12)(a12);
    if (!*(_BYTE *)(v24 + 320))
      (**a11)(a11);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsProvider::flushQueuedEvents(uint64_t a1@<X0>, uint64_t a2@<X1>, std::runtime_error *a3@<X8>)
{
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _OWORD *v10;
  __int128 *v11;
  void **v12;
  unsigned int v13;
  _QWORD *v14;
  int64x2_t v15;
  std::runtime_error_vtbl *v16;
  char v17;
  void *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  char v85;
  void **v86;
  void **i;
  char *v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int **v102;
  char *v103;
  unsigned int *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void (**v108)(_QWORD);
  void (**v109)(_QWORD);
  uint64_t v110;
  void **v111;
  char *v112;
  char *v113;
  unsigned int ***v114;
  unsigned int **v115;
  _QWORD *v116;
  _QWORD *v117;
  std::runtime_error *v118;
  _QWORD *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char v124;
  _OWORD *v125;
  void *v126;
  _OWORD *v127;
  std::runtime_error *v128;
  std::runtime_error *v129;
  std::runtime_error v130;
  __int128 v131;
  unsigned int **v132;
  unsigned int *v133;
  unsigned int *v134;
  __int128 v135;
  char v136;
  void (**v137)(_QWORD);
  _BYTE v138[24];
  unsigned int **v139;
  uint64_t v140;
  unsigned int *v141;
  __int128 v142;
  char v143;
  std::runtime_error v144;
  __int128 v145;
  unsigned int **v146;
  unsigned int *v147[2];
  __int128 v148;
  std::runtime_error v149;
  __int128 v150;
  unsigned int **v151;
  unsigned int *v152;
  unsigned int *v153;
  __int128 v154;
  std::runtime_error v155;
  __int128 v156;
  unsigned int **v157;
  unsigned int *v158;
  unsigned int *v159;
  __int128 v160;
  char v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v6 = (char *)operator new(0x298uLL);
  v7 = v6;
  *(_QWORD *)v6 = AMSCore::MetricsProvider::flushQueuedEvents;
  *((_QWORD *)v6 + 1) = AMSCore::MetricsProvider::flushQueuedEvents;
  v129 = (std::runtime_error *)(v6 + 384);
  v122 = v6 + 456;
  v123 = v6 + 536;
  v120 = v6 + 568;
  v121 = v6 + 552;
  v8 = v6 + 584;
  v110 = (uint64_t)(v6 + 16);
  *((_QWORD *)v6 + 75) = a1;
  v9 = *(unsigned __int8 *)(a2 + 24);
  v6[656] = v9;
  if (v9)
  {
    v126 = *(void **)a2;
    *(_QWORD *)v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v6 + 591) = *(_QWORD *)(a2 + 15);
    v124 = *(_BYTE *)(a2 + 23);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v126 = 0;
  }
  v10 = v6 + 440;
  v11 = (__int128 *)(v6 + 152);
  v128 = (std::runtime_error *)(v6 + 232);
  v12 = (void **)(v6 + 488);
  v111 = (void **)(v6 + 512);
  do
    v13 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v13 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  v118 = (std::runtime_error *)(v6 + 24);
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v155, v110);
  *a3 = v155;
  *v111 = 0;
  v111[1] = 0;
  v111[2] = 0;
  if (v9)
  {
    v155.__vftable = *(std::runtime_error_vtbl **)v8;
    *(std::runtime_error_vtbl **)((char *)&v155.__vftable + 7) = *(std::runtime_error_vtbl **)(v8 + 7);
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 7) = 0;
    v14 = operator new(0x18uLL);
    v15 = vaddq_s64(vdupq_n_s64((unint64_t)v14), vdupq_n_s64(0x18uLL));
    v16 = v155.__vftable;
    *v14 = v126;
    v14[1] = v16;
    *(_QWORD *)((char *)v14 + 15) = *(std::runtime_error_vtbl **)((char *)&v155.__vftable + 7);
    *((_BYTE *)v14 + 23) = v124;
    *((_QWORD *)v7 + 64) = v14;
    *(int64x2_t *)(v7 + 520) = v15;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v17 = v124;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 56) + 48))(&v137);
    if (v143)
    {
      LOBYTE(v130.__vftable) = 0;
      v136 = 0;
      v18 = v126;
    }
    else
    {
      std::runtime_error::runtime_error(&v155, (const std::runtime_error *)&v137);
      v156 = *(_OWORD *)&v138[8];
      v155.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v157 = v139;
      v158 = (unsigned int *)v140;
      v159 = v141;
      if (v141)
      {
        *(_QWORD *)(v140 + 16) = &v158;
        v139 = (unsigned int **)&v140;
        v140 = 0;
        v141 = 0;
      }
      else
      {
        v157 = &v158;
      }
      v160 = v142;
      v142 = 0uLL;
      v161 = 1;
      std::runtime_error::runtime_error(&v144, &v155);
      v145 = v156;
      v144.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v146 = v157;
      v147[0] = v158;
      v147[1] = v159;
      if (v159)
      {
        *((_QWORD *)v158 + 2) = v147;
        v157 = &v158;
        v158 = 0;
        v159 = 0;
      }
      else
      {
        v146 = v147;
      }
      v148 = v160;
      v160 = 0uLL;
      AMSCore::Error::Error<char [35]>((uint64_t)&v149, (uint64_t)&v144, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance, "failed to get topics from database");
      std::runtime_error::runtime_error(&v130, &v149);
      v131 = v150;
      v130.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v93 = v152;
      v132 = v151;
      v133 = v152;
      v134 = v153;
      v18 = v126;
      if (v153)
      {
        *((_QWORD *)v152 + 2) = &v133;
        v151 = &v152;
        v152 = 0;
        v153 = 0;
        v93 = 0;
      }
      else
      {
        v132 = &v133;
      }
      v135 = v154;
      v154 = 0uLL;
      v136 = 1;
      v149.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v93);
      MEMORY[0x18D7898AC](&v149);
      v144.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v94 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
      if (*((_QWORD *)&v148 + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v146, v147[0]);
      MEMORY[0x18D7898AC](&v144);
      if (v161)
      {
        v155.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
        if (*((_QWORD *)&v160 + 1))
        {
          v98 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v157, v158);
        MEMORY[0x18D7898AC](&v155);
      }
      v17 = v124;
      if (v136)
      {
        std::runtime_error::runtime_error(&v155, &v130);
        v156 = v131;
        v155.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v157 = v132;
        v158 = v133;
        v159 = v134;
        if (v134)
        {
          *((_QWORD *)v133 + 2) = &v158;
          v132 = &v133;
          v133 = 0;
          v134 = 0;
        }
        else
        {
          v157 = &v158;
        }
        v160 = v135;
        v135 = 0uLL;
        std::runtime_error::runtime_error(&v149, &v155);
        v150 = v156;
        v100 = v158;
        v149.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v151 = v157;
        v152 = v158;
        v153 = v159;
        if (v159)
        {
          *((_QWORD *)v158 + 2) = &v152;
          v100 = 0;
          v157 = &v158;
          v158 = 0;
          v159 = 0;
        }
        else
        {
          v151 = &v152;
        }
        v154 = v160;
        v160 = 0uLL;
        v155.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v157, v100);
        MEMORY[0x18D7898AC](&v155);
        v85 = v124;
        if (v7[104])
        {
          if (!v7[96])
            ((void (*)(std::runtime_error *))v118->~runtime_error)(v118);
          v7[104] = 0;
        }
        std::runtime_error::runtime_error(v118, &v149);
        v102 = v151;
        v101 = v152;
        *((_QWORD *)v7 + 8) = v152;
        v103 = v7 + 64;
        *(_OWORD *)(v7 + 40) = v150;
        *((_QWORD *)v7 + 3) = off_1E2521330;
        *((_QWORD *)v7 + 7) = v102;
        v104 = v153;
        *((_QWORD *)v7 + 9) = v153;
        if (v104)
        {
          *((_QWORD *)v101 + 2) = v103;
          v101 = 0;
          v151 = &v152;
          v152 = 0;
          v153 = 0;
        }
        else
        {
          *((_QWORD *)v7 + 7) = v103;
        }
        v84 = v126;
        *((_OWORD *)v7 + 5) = v154;
        v154 = 0uLL;
        v7[96] = 0;
        v7[104] = 1;
        v149.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v101);
        MEMORY[0x18D7898AC](&v149);
        if (v136)
        {
          v130.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v105 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
          if (*((_QWORD *)&v135 + 1))
          {
            v106 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v132, v133);
          MEMORY[0x18D7898AC](&v130);
        }
        v108 = v137;
        if (v143)
        {
          if (v137)
          {
            v109 = *(void (***)(_QWORD))v138;
            if (*(void (***)(_QWORD))v138 == v137)
            {
              *(_QWORD *)v138 = v137;
              operator delete(v137);
            }
            else
            {
              do
              {
                if (*((char *)v109 - 1) < 0)
                  operator delete(*(v109 - 3));
                v109 -= 3;
              }
              while (v109 != v108);
              *(_QWORD *)v138 = v108;
              operator delete(v137);
            }
          }
        }
        else
        {
          (*v137)(&v137);
        }
        goto LABEL_115;
      }
    }
    if (!v143)
LABEL_196:
      __break(1u);
    v14 = v137;
    *((_QWORD *)v7 + 64) = v137;
    v15.i64[0] = *(_QWORD *)v138;
    *(_OWORD *)(v7 + 520) = *(_OWORD *)v138;
  }
  *((_QWORD *)v7 + 77) = v18;
  v7[657] = v17;
  *((_QWORD *)v7 + 76) = v15.i64[0];
  if (v14 != (_QWORD *)v15.i64[0])
  {
    v112 = v7 + 272;
    v114 = (unsigned int ***)(v7 + 184);
    v115 = (unsigned int **)(v7 + 192);
    v119 = v7 + 352;
    v19 = v7 + 424;
    v116 = v7 + 416;
    v117 = v7 + 344;
    v125 = v7 + 400;
    v127 = v7 + 328;
    v113 = v7 + 64;
    do
    {
      *((_QWORD *)v7 + 78) = v14;
      v20 = *(std::__shared_weak_count **)(*((_QWORD *)v7 + 75) + 16);
      if (!v20 || (v21 = std::__shared_weak_count::lock(v20)) == 0)
        std::__throw_bad_weak_ptr[abi:fe180100]();
      v22 = (_QWORD *)*((_QWORD *)v7 + 75);
      *((_QWORD *)v7 + 67) = v22[7];
      *((_QWORD *)v7 + 68) = v21;
      *((_QWORD *)v7 + 39) = 0;
      *((_QWORD *)v7 + 40) = 0;
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v7 + 488), (const std::string::value_type *)*v14, v14[1]);
        v22 = (_QWORD *)*((_QWORD *)v7 + 75);
      }
      else
      {
        v23 = *(_OWORD *)v14;
        *((_QWORD *)v7 + 63) = v14[2];
        *(_OWORD *)v12 = v23;
      }
      *((_QWORD *)v7 + 57) = v22[3];
      v24 = v22[4];
      *((_QWORD *)v7 + 58) = v24;
      if (v24)
      {
        v25 = (unint64_t *)(v24 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v22 = (_QWORD *)*((_QWORD *)v7 + 75);
      }
      *((_QWORD *)v7 + 59) = v22[5];
      v27 = v22[6];
      *((_QWORD *)v7 + 60) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = operator new(0x20uLL);
      v31 = (_QWORD *)*((_QWORD *)v7 + 75);
      v30[1] = 0;
      v30[2] = 0;
      *v30 = &off_1E2523030;
      *((_BYTE *)v30 + 24) = 0;
      *((_QWORD *)v7 + 69) = v30 + 3;
      *((_QWORD *)v7 + 70) = v30;
      *((_QWORD *)v7 + 71) = v31[12];
      v32 = v31[13];
      *((_QWORD *)v7 + 72) = v32;
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        v31 = (_QWORD *)*((_QWORD *)v7 + 75);
      }
      v35 = v31[11];
      if (!v35)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t, char *, char *, char *, char *, char *))(*(_QWORD *)v35 + 48))(v35, v123, v7 + 488, v122, v121, v120);
      v36 = *v11;
      *(_OWORD *)(v7 + 632) = *v11;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v7 + 20) = 0;
      if (!atomic_load((unint64_t *)(v36 + 96)))
      {
        v7[599] = 0;
        v38 = (unint64_t *)(*((_QWORD *)v7 + 79) + 96);
        do
          v39 = __ldaxr(v38);
        while (__stlxr((unint64_t)v7, v38));
        if (!v39)
          return;
      }
      v40 = *((_QWORD *)v7 + 79);
      if (!*(_BYTE *)(v40 + 88))
        goto LABEL_196;
      v41 = *(_BYTE *)(v40 + 80);
      if (!v41)
      {
        std::runtime_error::runtime_error(v128, (const std::runtime_error *)(v40 + 8));
        *(_OWORD *)(v7 + 248) = *(_OWORD *)(v40 + 24);
        *((_QWORD *)v7 + 29) = off_1E2521330;
        v42 = (_QWORD *)(v40 + 48);
        v43 = *(_QWORD *)(v40 + 48);
        *((_QWORD *)v7 + 33) = *(_QWORD *)(v40 + 40);
        *((_QWORD *)v7 + 34) = v43;
        v44 = *(_QWORD *)(v40 + 56);
        *((_QWORD *)v7 + 35) = v44;
        if (v44)
        {
          *(_QWORD *)(v43 + 16) = v112;
          *(_QWORD *)(v40 + 40) = v42;
          *v42 = 0;
          *(_QWORD *)(v40 + 56) = 0;
        }
        else
        {
          *((_QWORD *)v7 + 33) = v112;
        }
        v45 = *((_QWORD *)v7 + 79);
        *((_OWORD *)v7 + 18) = *(_OWORD *)(v45 + 64);
        *(_QWORD *)(v45 + 64) = 0;
        *(_QWORD *)(v45 + 72) = 0;
      }
      v7[304] = v41;
      v46 = *((_QWORD *)v7 + 80);
      if (!v46)
        goto LABEL_45;
      v47 = (unint64_t *)(v46 + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        v52 = (std::__shared_weak_count *)*((_QWORD *)v7 + 80);
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
        v49 = (std::__shared_weak_count *)*((_QWORD *)v7 + 20);
        if (!v49)
          goto LABEL_51;
      }
      else
      {
LABEL_45:
        v49 = (std::__shared_weak_count *)*((_QWORD *)v7 + 20);
        if (!v49)
          goto LABEL_51;
      }
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(p_shared_owners);
      while (__stlxr(v51 - 1, p_shared_owners));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
LABEL_51:
      v53 = (std::__shared_weak_count *)*((_QWORD *)v7 + 72);
      if (!v53)
        goto LABEL_55;
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        v56 = (std::__shared_weak_count *)*((_QWORD *)v7 + 70);
        if (!v56)
          goto LABEL_61;
      }
      else
      {
LABEL_55:
        v56 = (std::__shared_weak_count *)*((_QWORD *)v7 + 70);
        if (!v56)
          goto LABEL_61;
      }
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
LABEL_61:
      v59 = (std::__shared_weak_count *)*((_QWORD *)v7 + 60);
      if (!v59)
        goto LABEL_65;
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
        v62 = (std::__shared_weak_count *)*((_QWORD *)v7 + 58);
        if (!v62)
          goto LABEL_71;
      }
      else
      {
LABEL_65:
        v62 = (std::__shared_weak_count *)*((_QWORD *)v7 + 58);
        if (!v62)
          goto LABEL_71;
      }
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
LABEL_71:
      if (v7[511] < 0)
      {
        operator delete(*v12);
        v65 = (std::__shared_weak_count *)*((_QWORD *)v7 + 68);
        if (!v65)
          goto LABEL_78;
      }
      else
      {
        v65 = (std::__shared_weak_count *)*((_QWORD *)v7 + 68);
        if (!v65)
          goto LABEL_78;
      }
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
        v68 = (std::__shared_weak_count *)*((_QWORD *)v7 + 40);
        if (!v68)
          goto LABEL_84;
        goto LABEL_79;
      }
LABEL_78:
      v68 = (std::__shared_weak_count *)*((_QWORD *)v7 + 40);
      if (!v68)
        goto LABEL_84;
LABEL_79:
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
LABEL_84:
      AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[35],std::string const&>(v7 + 152, (uint64_t)v128, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance, *((_QWORD *)v7 + 78));
      v71 = v7[224];
      if (!v7[224])
      {
        v74 = 0;
        if (v7[304])
          goto LABEL_109;
LABEL_108:
        ((void (*)(std::runtime_error *))v128->~runtime_error)(v128);
        goto LABEL_109;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(v7 + 312), (const std::runtime_error *)(v7 + 152));
      *v127 = *(_OWORD *)(v7 + 168);
      *((_QWORD *)v7 + 39) = off_1E2521330;
      v72 = *((_QWORD *)v7 + 24);
      *((_QWORD *)v7 + 43) = *((_QWORD *)v7 + 23);
      *((_QWORD *)v7 + 44) = v72;
      v73 = *((_QWORD *)v7 + 25);
      *((_QWORD *)v7 + 45) = v73;
      if (v73)
      {
        *(_QWORD *)(v72 + 16) = v119;
        *v114 = v115;
        *v115 = 0;
        *((_QWORD *)v7 + 25) = 0;
      }
      else
      {
        *v117 = v119;
      }
      *((_OWORD *)v7 + 23) = *((_OWORD *)v7 + 13);
      *((_QWORD *)v7 + 26) = 0;
      *((_QWORD *)v7 + 27) = 0;
      std::runtime_error::runtime_error(v129, (const std::runtime_error *)(v7 + 312));
      *v125 = *v127;
      *((_QWORD *)v7 + 48) = off_1E2521330;
      v75 = *((_QWORD *)v7 + 44);
      *((_QWORD *)v7 + 52) = *((_QWORD *)v7 + 43);
      *((_QWORD *)v7 + 53) = v75;
      v76 = *((_QWORD *)v7 + 45);
      *((_QWORD *)v7 + 54) = v76;
      if (v76)
      {
        *(_QWORD *)(v75 + 16) = v19;
        v75 = 0;
        v77 = (uint64_t)(v7 + 344);
        *v117 = v119;
        *v119 = 0;
        *((_QWORD *)v7 + 45) = 0;
      }
      else
      {
        v77 = (uint64_t)(v7 + 344);
        *v116 = v19;
      }
      *v10 = *((_OWORD *)v7 + 23);
      *((_QWORD *)v7 + 46) = 0;
      *((_QWORD *)v7 + 47) = 0;
      *((_QWORD *)v7 + 39) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v77, (unsigned int *)v75);
      MEMORY[0x18D7898AC](v7 + 312);
      if (v7[104])
      {
        if (!v7[96])
          ((void (*)(std::runtime_error *))v118->~runtime_error)(v118);
        v7[104] = 0;
      }
      std::runtime_error::runtime_error(v118, v129);
      *(_OWORD *)(v7 + 40) = *v125;
      *((_QWORD *)v7 + 3) = off_1E2521330;
      v78 = *((_QWORD *)v7 + 53);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v7 + 52);
      *((_QWORD *)v7 + 8) = v78;
      v79 = *((_QWORD *)v7 + 54);
      *((_QWORD *)v7 + 9) = v79;
      if (v79)
      {
        *(_QWORD *)(v78 + 16) = v113;
        v78 = 0;
        v80 = (uint64_t)(v7 + 416);
        *v116 = v19;
        *v19 = 0;
        *((_QWORD *)v7 + 54) = 0;
      }
      else
      {
        *((_QWORD *)v7 + 7) = v113;
        v80 = (uint64_t)(v7 + 416);
      }
      *((_OWORD *)v7 + 5) = *v10;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v7 + 56) = 0;
      v7[96] = 0;
      v7[104] = 1;
      *((_QWORD *)v7 + 48) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v80, (unsigned int *)v78);
      MEMORY[0x18D7898AC](v129);
      if (v7[224])
      {
        *((_QWORD *)v7 + 19) = off_1E2521330;
        v81 = (std::__shared_weak_count *)*((_QWORD *)v7 + 27);
        if (v81)
        {
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v114, *v115);
        MEMORY[0x18D7898AC](v7 + 152);
      }
      v74 = 3;
      if (!v7[304])
        goto LABEL_108;
LABEL_109:
      if (v71)
      {
        v84 = (void *)*((_QWORD *)v7 + 77);
        v85 = v7[657];
        goto LABEL_117;
      }
      v14 = (_QWORD *)(*((_QWORD *)v7 + 78) + 24);
    }
    while (v14 != *((_QWORD **)v7 + 76));
  }
  if (v7[104] && !v7[96])
    ((void (*)(std::runtime_error *))v118->~runtime_error)(v118);
  v7[96] = 1;
  v7[104] = 1;
  v84 = (void *)*((_QWORD *)v7 + 77);
  v85 = v7[657];
LABEL_115:
  v74 = 3;
LABEL_117:
  v86 = (void **)*v111;
  if (*v111)
  {
    for (i = (void **)*((_QWORD *)v7 + 65); i != v86; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v86);
  }
  if (v74 == 3)
  {
    *((_QWORD *)v7 + 81) = v84;
    v7[658] = v85;
    *((_QWORD *)v7 + 19) = v110;
    *(_QWORD *)v7 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v7 + 152);
    return;
  }
  v88 = (char *)*((_QWORD *)v7 + 18);
  if (v88 == v7 + 120)
  {
    v89 = 4;
    v88 = v7 + 120;
  }
  else
  {
    if (!v88)
      goto LABEL_131;
    v89 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
LABEL_131:
  if (v7[104] && !v7[96])
    ((void (*)(std::runtime_error *))v118->~runtime_error)(v118);
  v90 = v7[656];
  do
  {
    v91 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v92 = v91 - 1;
  }
  while (__stlxr(v92, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v92)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v90 && v85 < 0)
    operator delete(v84);
  operator delete(v7);
}

void sub_18CCB4464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a2)
    AMSCore::Error::~Error((AMSCore::Error *)&a53);
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsProvider::dropQueuedEvents(uint64_t a1@<X0>, uint64_t a2@<X1>, std::runtime_error *a3@<X8>)
{
  char *v6;
  char *v7;
  const void **v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void **v29;
  std::runtime_error v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  int v35;
  std::runtime_error v36[2];
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unsigned __int8 v41;

  v6 = (char *)operator new(0xE0uLL);
  v7 = v6;
  *(_QWORD *)v6 = AMSCore::MetricsProvider::dropQueuedEvents;
  *((_QWORD *)v6 + 1) = AMSCore::MetricsProvider::dropQueuedEvents;
  v6[152] = 0;
  v8 = (const void **)(v6 + 152);
  v9 = v6 + 184;
  v10 = (uint64_t)(v6 + 16);
  v6[176] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v6 + 21) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v6[176] = 1;
  }
  do
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v11 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v36, v10);
  *a3 = v36[0];
  if (v7[176])
  {
    std::mutex::lock((std::mutex *)(a1 + 144));
    if (!v7[176])
    {
      __break(1u);
      return;
    }
    v12 = (uint64_t **)(a1 + 208);
    v13 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 208, v8);
    if ((uint64_t *)(a1 + 216) != v13)
    {
      v14 = v13;
      v15 = (uint64_t *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        v22 = v13;
        do
        {
          v16 = (uint64_t *)v22[2];
          v21 = *v16 == (_QWORD)v22;
          v22 = v16;
        }
        while (!v21);
      }
      if (*v12 == v13)
        *v12 = v16;
      v23 = *(uint64_t **)(a1 + 216);
      --*(_QWORD *)(a1 + 224);
      std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v23, v14);
      if (v14)
      {
        atomic_store(1u, (unsigned __int8 *)v14[7]);
        v24 = (std::__shared_weak_count *)v14[8];
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        if (*((char *)v14 + 55) < 0)
          operator delete((void *)v14[4]);
        operator delete(v14);
      }
    }
  }
  else
  {
    std::mutex::lock((std::mutex *)(a1 + 144));
    v17 = *(_QWORD **)(a1 + 208);
    v18 = (_QWORD *)(a1 + 216);
    if (v17 != (_QWORD *)(a1 + 216))
    {
      do
      {
        atomic_store(1u, (unsigned __int8 *)v17[7]);
        v19 = (_QWORD *)v17[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v17[2];
            v21 = *v20 == (_QWORD)v17;
            v17 = v20;
          }
          while (!v21);
        }
        v17 = v20;
      }
      while (v20 != v18);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*(_QWORD *)(a1 + 216));
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = v18;
  }
  std::mutex::unlock((std::mutex *)(a1 + 144));
  v27 = *(_QWORD *)(a1 + 56);
  v7[184] = 0;
  v7[200] = 0;
  if (v7[176])
  {
    v28 = v7[175];
    if ((v28 & 0x80u) == 0)
      v29 = v8;
    else
      v29 = (const void **)*((_QWORD *)v7 + 19);
    if ((v28 & 0x80u) != 0)
      v28 = *((_QWORD *)v7 + 20);
    *((_QWORD *)v7 + 23) = v29;
    *((_QWORD *)v7 + 24) = v28;
    v7[200] = 1;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, char *))(*(_QWORD *)v27 + 32))(v36, v27, v9);
  if (v7[104])
  {
    if (!v7[96])
      (**((void (***)(uint64_t))v7 + 3))((uint64_t)(v7 + 24));
    v7[104] = 0;
  }
  if (v41)
  {
    v7[96] = 1;
    v7[104] = 1;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), v36);
    v30 = v36[1];
    v32 = v37;
    v31 = v38;
    *((_QWORD *)v7 + 8) = v38;
    v33 = v7 + 64;
    *(std::runtime_error *)(v7 + 40) = v30;
    *((_QWORD *)v7 + 3) = off_1E2521330;
    *((_QWORD *)v7 + 7) = v32;
    v34 = v39;
    *((_QWORD *)v7 + 9) = v39;
    if (v34)
    {
      *(_QWORD *)(v31 + 16) = v33;
      v37 = &v38;
      v38 = 0;
      v39 = 0;
    }
    else
    {
      *((_QWORD *)v7 + 7) = v33;
    }
    *((_OWORD *)v7 + 5) = v40;
    v40 = 0uLL;
    v35 = v41;
    v7[96] = 0;
    v7[104] = 1;
    if (!v35)
      ((void (*)(std::runtime_error *))v36[0].~runtime_error)(v36);
  }
  *((_QWORD *)v7 + 26) = v10;
  *(_QWORD *)v7 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v7 + 208);
}

void sub_18CCB491C(void *a1)
{
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCB492C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCB48E4);
}

void AMSCore::MetricsProvider::cancel(AMSCore::MetricsProvider *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (std::mutex *)((char *)this + 144);
  std::mutex::lock((std::mutex *)((char *)this + 144));
  v3 = (char *)*((_QWORD *)this + 26);
  v4 = (char *)this + 216;
  if (v3 != (char *)this + 216)
  {
    do
    {
      atomic_store(1u, *((unsigned __int8 **)v3 + 7));
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*((_QWORD *)this + 27));
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 26) = v4;
  std::mutex::unlock(v2);
}

void AMSCore::MetricsProvider::dropQueuedEvents(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
    v5 = __p[96] == 0;
  else
    v5 = 0;
  if (v5)
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (__p[176] && __p[175] < 0)
    operator delete(*((void **)__p + 19));
  operator delete(__p);
}

void AMSCore::MetricsProvider::flushQueuedEvents(char *a1)
{
  std::runtime_error_vtbl *v1;
  std::runtime_error *v3;
  std::runtime_error *v4;
  std::runtime_error *v5;
  std::runtime_error *v6;
  std::runtime_error *v7;
  std::string *v8;
  char v9;
  std::runtime_error_vtbl *v10;
  void (__cdecl *v11)(std::runtime_error *__hidden);
  void (__cdecl *v12)(std::runtime_error *__hidden);
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  __int128 *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::runtime_error v71;
  unint64_t *v73;
  unint64_t v74;
  void *v75;
  int v76;
  void **v77;
  void **i;
  char *v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  char *v84;
  _OWORD *v85;
  char *v86;
  char *v87;
  _OWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _OWORD *v91;
  _QWORD *v92;
  char *v93;
  std::runtime_error *v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  _QWORD *v101;
  _QWORD *v102;
  _OWORD *v103;
  _OWORD *v104;

  v1 = (std::runtime_error_vtbl *)*((_QWORD *)a1 + 79);
  if (!LOBYTE(v1[3].what))
  {
LABEL_132:
    __break(1u);
    return;
  }
  v3 = (std::runtime_error *)(a1 + 440);
  v4 = (std::runtime_error *)(a1 + 152);
  v5 = (std::runtime_error *)(a1 + 232);
  v6 = (std::runtime_error *)(a1 + 312);
  v7 = (std::runtime_error *)(a1 + 384);
  v99 = a1 + 456;
  v8 = (std::string *)(a1 + 488);
  v100 = a1 + 536;
  v97 = a1 + 568;
  v98 = a1 + 552;
  v86 = a1 + 272;
  v84 = a1 + 16;
  v85 = a1 + 248;
  v92 = a1 + 184;
  v93 = a1 + 192;
  v102 = a1 + 352;
  v96 = a1 + 344;
  v104 = a1 + 328;
  v91 = a1 + 168;
  v101 = a1 + 424;
  v95 = a1 + 416;
  v89 = a1 + 368;
  v90 = a1 + 208;
  v103 = a1 + 400;
  v94 = (std::runtime_error *)(a1 + 24);
  v87 = a1 + 64;
  v88 = a1 + 40;
  while (1)
  {
    v9 = (char)v1[3].~runtime_error_0;
    if (!v9)
    {
      std::runtime_error::runtime_error(v5, (const std::runtime_error *)&v1->~runtime_error_0);
      *v85 = *(_OWORD *)&v1[1].~runtime_error;
      v10 = v1 + 2;
      v11 = v1[2].~runtime_error;
      *((_QWORD *)a1 + 29) = off_1E2521330;
      *((_QWORD *)a1 + 33) = v1[1].what;
      *((_QWORD *)a1 + 34) = v11;
      v12 = v1[2].~runtime_error_0;
      *((_QWORD *)a1 + 35) = v12;
      if (v12)
      {
        *((_QWORD *)v11 + 2) = v86;
        v1[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v10;
        v10->~runtime_error = 0;
        v1[2].~runtime_error_0 = 0;
      }
      else
      {
        *((_QWORD *)a1 + 33) = v86;
      }
      v13 = *((_QWORD *)a1 + 79);
      *((_OWORD *)a1 + 18) = *(_OWORD *)(v13 + 64);
      *(_QWORD *)(v13 + 64) = 0;
      *(_QWORD *)(v13 + 72) = 0;
    }
    a1[304] = v9;
    v14 = *((_QWORD *)a1 + 80);
    if (!v14)
      goto LABEL_13;
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 80);
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 20);
      if (!v17)
        goto LABEL_19;
    }
    else
    {
LABEL_13:
      v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 20);
      if (!v17)
        goto LABEL_19;
    }
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)a1 + 72);
    if (!v21)
      goto LABEL_23;
LABEL_19:
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v24 = (std::__shared_weak_count *)*((_QWORD *)a1 + 70);
      if (!v24)
        goto LABEL_29;
    }
    else
    {
LABEL_23:
      v24 = (std::__shared_weak_count *)*((_QWORD *)a1 + 70);
      if (!v24)
        goto LABEL_29;
    }
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)a1 + 60);
    if (!v27)
      goto LABEL_33;
LABEL_29:
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      v30 = (std::__shared_weak_count *)*((_QWORD *)a1 + 58);
      if (!v30)
        goto LABEL_39;
    }
    else
    {
LABEL_33:
      v30 = (std::__shared_weak_count *)*((_QWORD *)a1 + 58);
      if (!v30)
        goto LABEL_39;
    }
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
LABEL_39:
    if (a1[511] < 0)
    {
      operator delete(v8->__r_.__value_.__l.__data_);
      v33 = (std::__shared_weak_count *)*((_QWORD *)a1 + 68);
      if (!v33)
        goto LABEL_46;
    }
    else
    {
      v33 = (std::__shared_weak_count *)*((_QWORD *)a1 + 68);
      if (!v33)
        goto LABEL_46;
    }
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      v36 = (std::__shared_weak_count *)*((_QWORD *)a1 + 40);
      if (!v36)
        goto LABEL_52;
      goto LABEL_47;
    }
LABEL_46:
    v36 = (std::__shared_weak_count *)*((_QWORD *)a1 + 40);
    if (!v36)
      goto LABEL_52;
LABEL_47:
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
LABEL_52:
    AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[35],std::string const&>(v4, (uint64_t)v5, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance, *((_QWORD *)a1 + 78));
    v39 = a1[224];
    if (!a1[224])
    {
      v42 = 0;
      if (a1[304])
        goto LABEL_77;
LABEL_76:
      ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
      goto LABEL_77;
    }
    std::runtime_error::runtime_error(v6, v4);
    *v104 = *v91;
    *((_QWORD *)a1 + 39) = off_1E2521330;
    v40 = *((_QWORD *)a1 + 24);
    *((_QWORD *)a1 + 43) = *((_QWORD *)a1 + 23);
    *((_QWORD *)a1 + 44) = v40;
    v41 = *((_QWORD *)a1 + 25);
    *((_QWORD *)a1 + 45) = v41;
    if (v41)
    {
      *(_QWORD *)(v40 + 16) = v102;
      *v92 = v93;
      *(_QWORD *)v93 = 0;
      *((_QWORD *)v93 + 1) = 0;
    }
    else
    {
      *v96 = v102;
    }
    *((_OWORD *)a1 + 23) = *((_OWORD *)a1 + 13);
    *v90 = 0;
    v90[1] = 0;
    std::runtime_error::runtime_error(v7, v6);
    *v103 = *v104;
    *((_QWORD *)a1 + 48) = off_1E2521330;
    v43 = *((_QWORD *)a1 + 44);
    *((_QWORD *)a1 + 52) = *((_QWORD *)a1 + 43);
    *((_QWORD *)a1 + 53) = v43;
    v44 = *((_QWORD *)a1 + 45);
    *((_QWORD *)a1 + 54) = v44;
    if (v44)
    {
      *(_QWORD *)(v43 + 16) = v101;
      v43 = 0;
      v45 = (uint64_t)v96;
      *v96 = v102;
      *v102 = 0;
      v102[1] = 0;
    }
    else
    {
      v45 = (uint64_t)v96;
      *v95 = v101;
    }
    *v3 = *((std::runtime_error *)a1 + 23);
    *v89 = 0;
    v89[1] = 0;
    *((_QWORD *)a1 + 39) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v45, (unsigned int *)v43);
    MEMORY[0x18D7898AC](v6);
    if (a1[104])
    {
      if (!a1[96])
        ((void (*)(std::runtime_error *))v94->~runtime_error)(v94);
      a1[104] = 0;
    }
    std::runtime_error::runtime_error(v94, v7);
    *v88 = *v103;
    *((_QWORD *)a1 + 3) = off_1E2521330;
    v46 = *((_QWORD *)a1 + 53);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a1 + 52);
    *((_QWORD *)a1 + 8) = v46;
    v47 = *((_QWORD *)a1 + 54);
    *((_QWORD *)a1 + 9) = v47;
    if (v47)
    {
      *(_QWORD *)(v46 + 16) = v87;
      v46 = 0;
      v48 = (uint64_t)v95;
      *v95 = v101;
      *v101 = 0;
      v101[1] = 0;
    }
    else
    {
      *((_QWORD *)a1 + 7) = v87;
      v48 = (uint64_t)v95;
    }
    *((std::runtime_error *)a1 + 5) = *v3;
    v3->__vftable = 0;
    v3->__imp_.__imp_ = 0;
    a1[96] = 0;
    a1[104] = 1;
    *((_QWORD *)a1 + 48) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v48, (unsigned int *)v46);
    MEMORY[0x18D7898AC](v7);
    if (a1[224])
    {
      *((_QWORD *)a1 + 19) = off_1E2521330;
      v49 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v92, *(unsigned int **)v93);
      MEMORY[0x18D7898AC](v4);
    }
    v42 = 3;
    if (!a1[304])
      goto LABEL_76;
LABEL_77:
    if (v39)
      goto LABEL_105;
    v52 = *((_QWORD *)a1 + 78);
    v53 = (__int128 *)(v52 + 24);
    if (v52 + 24 == *((_QWORD *)a1 + 76))
      break;
    *((_QWORD *)a1 + 78) = v53;
    v54 = *(std::__shared_weak_count **)(*((_QWORD *)a1 + 75) + 16);
    if (!v54 || (v55 = std::__shared_weak_count::lock(v54)) == 0)
      std::__throw_bad_weak_ptr[abi:fe180100]();
    v56 = (_QWORD *)*((_QWORD *)a1 + 75);
    *((_QWORD *)a1 + 67) = v56[7];
    *((_QWORD *)a1 + 68) = v55;
    v6->__vftable = 0;
    v6->__imp_.__imp_ = 0;
    if (*(char *)(v52 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(v52 + 24), *(_QWORD *)(v52 + 32));
      v56 = (_QWORD *)*((_QWORD *)a1 + 75);
    }
    else
    {
      v57 = *v53;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 40);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v57;
    }
    v58 = v56[4];
    *((_QWORD *)a1 + 57) = v56[3];
    *((_QWORD *)a1 + 58) = v58;
    if (v58)
    {
      v59 = (unint64_t *)(v58 + 8);
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
      v56 = (_QWORD *)*((_QWORD *)a1 + 75);
    }
    v62 = v56[5];
    v61 = v56[6];
    *((_QWORD *)a1 + 59) = v62;
    *((_QWORD *)a1 + 60) = v61;
    if (v61)
    {
      v63 = (unint64_t *)(v61 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = operator new(0x20uLL);
    v66 = (_QWORD *)*((_QWORD *)a1 + 75);
    v65[1] = 0;
    v65[2] = 0;
    *v65 = &off_1E2523030;
    *((_BYTE *)v65 + 24) = 0;
    *((_QWORD *)a1 + 69) = v65 + 3;
    *((_QWORD *)a1 + 70) = v65;
    v67 = v66[13];
    *((_QWORD *)a1 + 71) = v66[12];
    *((_QWORD *)a1 + 72) = v67;
    if (v67)
    {
      v68 = (unint64_t *)(v67 + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
      v66 = (_QWORD *)*((_QWORD *)a1 + 75);
    }
    v70 = v66[11];
    if (!v70)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, char *, std::string *, char *, char *, char *))(*(_QWORD *)v70 + 48))(v70, v100, v8, v99, v98, v97);
    v71 = *v4;
    v3[12] = *v4;
    v4->__vftable = 0;
    v4->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v71.__vftable[4]))
    {
      HIBYTE(v3[9].__imp_.__imp_) = 0;
      v73 = (unint64_t *)&v3[12].__vftable[4];
      do
        v74 = __ldaxr(v73);
      while (__stlxr((unint64_t)a1, v73));
      if (!v74)
        return;
    }
    v1 = v3[12].__vftable;
    if (!LOBYTE(v1[3].what))
      goto LABEL_132;
  }
  if (a1[104] && !a1[96])
    ((void (*)(std::runtime_error *))v94->~runtime_error)(v94);
  a1[96] = 1;
  a1[104] = 1;
  v42 = 3;
LABEL_105:
  v75 = (void *)*((_QWORD *)a1 + 77);
  v76 = a1[657];
  v77 = (void **)*((_QWORD *)a1 + 64);
  if (v77)
  {
    for (i = (void **)*((_QWORD *)a1 + 65); i != v77; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v77);
  }
  if (v42 == 3)
  {
    *((_QWORD *)a1 + 81) = v75;
    a1[658] = v76;
    *((_QWORD *)a1 + 19) = v84;
    *(_QWORD *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v4);
    return;
  }
  v79 = (char *)*((_QWORD *)a1 + 18);
  if (v79 == a1 + 120)
  {
    v80 = 4;
    v79 = a1 + 120;
LABEL_118:
    (*(void (**)(void))(*(_QWORD *)v79 + 8 * v80))();
  }
  else if (v79)
  {
    v80 = 5;
    goto LABEL_118;
  }
  if (a1[104] && !a1[96])
    ((void (*)(std::runtime_error *))v94->~runtime_error)(v94);
  v81 = a1[656];
  do
  {
    v82 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v83 = v82 - 1;
  }
  while (__stlxr(v83, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v83)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v81 && v76 < 0)
    operator delete(v75);
  operator delete(a1);
}

void sub_18CCB5350(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](*(_QWORD *)(v11 - 128));
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v10);
  std::vector<std::string>::~vector[abi:fe180100](a10);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCB53EC()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCB5258);
}

void AMSCore::MetricsProvider::flushQueuedEvents(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  char v28;
  void **v29;
  void **i;
  char *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;

  if (!*(_QWORD *)__p)
  {
    v27 = (void *)*((_QWORD *)__p + 81);
    v28 = __p[658];
    goto LABEL_51;
  }
  v2 = *((_QWORD *)__p + 80);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 80);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 72);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 70);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 60);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 58);
  if (!v18)
    goto LABEL_31;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_31:
    if ((__p[511] & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (__p[511] < 0)
LABEL_32:
    operator delete(*((void **)__p + 61));
LABEL_33:
  v21 = (std::__shared_weak_count *)*((_QWORD *)__p + 68);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 40);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (void *)*((_QWORD *)__p + 77);
  v28 = __p[657];
  v29 = (void **)*((_QWORD *)__p + 64);
  if (v29)
  {
    for (i = (void **)*((_QWORD *)__p + 65); i != v29; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v29);
  }
LABEL_51:
  v31 = (char *)*((_QWORD *)__p + 18);
  if (v31 == __p + 120)
  {
    v32 = 4;
    v31 = __p + 120;
    goto LABEL_55;
  }
  if (v31)
  {
    v32 = 5;
LABEL_55:
    (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  v33 = __p[656];
  do
  {
    v34 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v35)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v33 && v28 < 0)
    operator delete(v27);
  operator delete(__p);
}

uint64_t std::expected<std::vector<std::string>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  void (**v2)(uint64_t);
  void (**v3)(uint64_t);
  void (**v4)(uint64_t);

  v2 = *(void (***)(uint64_t))a1;
  if (*(_BYTE *)(a1 + 72))
  {
    if (v2)
    {
      v3 = *(void (***)(uint64_t))(a1 + 8);
      v4 = *(void (***)(uint64_t))a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*(v3 - 3));
          v3 -= 3;
        }
        while (v3 != v2);
        v4 = *(void (***)(uint64_t))a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  else
  {
    (*v2)(a1);
  }
  return a1;
}

_BYTE *AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[35],std::string const&>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4, uint64_t a5)
{
  _BYTE *v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::runtime_error *v22;
  unsigned int *v23;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error v37;
  std::runtime_error v38;
  unsigned int **v39;
  unsigned int *v40;
  std::runtime_error_vtbl *v41;
  __int128 v42;
  std::system_error v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  std::runtime_error v48;
  std::runtime_error v49;
  unsigned int **v50;
  unsigned int *v51;
  std::runtime_error_vtbl *v52;
  __int128 v53;
  char v54;
  std::string __what_arg;
  uint64_t v56;
  _QWORD v57[8];
  __int128 __p;
  __int128 v59;
  int v60;
  uint64_t v61[20];
  std::error_code v62;

  v5 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v48, (const std::runtime_error *)a2);
    v9 = (_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 40);
    v49 = *(std::runtime_error *)(a2 + 16);
    v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v50 = *(unsigned int ***)(a2 + 32);
    v51 = (unsigned int *)v10;
    v52 = *(std::runtime_error_vtbl **)(a2 + 48);
    if (v52)
    {
      *(_QWORD *)(v10 + 16) = &v51;
      *(_QWORD *)(a2 + 32) = v9;
      *v9 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v50 = &v51;
    }
    v53 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v54 = 1;
    std::runtime_error::runtime_error(&v37, &v48);
    v38 = v49;
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v39 = v50;
    v40 = v51;
    v41 = v52;
    if (v52)
    {
      *((_QWORD *)v51 + 2) = &v40;
      v50 = &v51;
      v51 = 0;
      v52 = 0;
    }
    else
    {
      v39 = &v40;
    }
    v42 = v53;
    v53 = 0uLL;
    v11 = MEMORY[0x1E0DE4FE0];
    v12 = MEMORY[0x1E0DE4FE0] + 64;
    v13 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v61[0] = MEMORY[0x1E0DE4FE0] + 64;
    v56 = v14;
    *(_QWORD *)((char *)&v57[-1] + *(_QWORD *)(v14 - 24)) = v15;
    v16 = (std::ios_base *)((char *)&v57[-1] + *(_QWORD *)(v56 - 24));
    std::ios_base::init(v16, v57);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v56 = v11 + 24;
    v61[0] = v12;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8];
    v57[0] = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v59 = 0u;
    v60 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v56, (uint64_t)"failed to flush events for topic: ", 34);
    v18 = *(char *)(a5 + 23);
    if (v18 >= 0)
      v19 = a5;
    else
      v19 = *(_QWORD *)a5;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a5 + 23);
    else
      v20 = *(_QWORD *)(a5 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v56, v19, v20);
    std::stringbuf::str[abi:fe180100]((uint64_t)v57, &__what_arg);
    v56 = *v13;
    *(_QWORD *)((char *)&v57[-1] + *(_QWORD *)(v56 - 24)) = v13[3];
    v57[0] = v17 + 16;
    if (SBYTE7(v59) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v61);
    *(_QWORD *)&v62.__val_ = a3;
    v62.__cat_ = a4;
    std::system_error::system_error(&v43, v62, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v45 = 0;
    v46 = 0;
    v43.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v44 = &v45;
    v21 = operator new();
    v22 = std::runtime_error::runtime_error((std::runtime_error *)v21, &v37);
    v22[1] = v38;
    v22->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v23 = v40;
    v22[2].__vftable = (std::runtime_error_vtbl *)v39;
    v22[2].__imp_.__imp_ = (const char *)v23;
    p_imp = &v22[2].__imp_;
    v25 = v41;
    v22[3].__vftable = v41;
    if (v25)
    {
      *((_QWORD *)v23 + 2) = p_imp;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      *(_QWORD *)(v21 + 32) = p_imp;
    }
    *(_OWORD *)(v21 + 56) = v42;
    v42 = 0uLL;
    *(_QWORD *)&v47 = v21;
    v26 = (_QWORD *)operator new();
    *v26 = &off_1E2523B58;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v21;
    *((_QWORD *)&v47 + 1) = v26;
    std::runtime_error::runtime_error((std::runtime_error *)v5, &v43);
    *((_OWORD *)v5 + 1) = v43.__ec_;
    *(_QWORD *)v5 = off_1E2521330;
    v27 = v45;
    *((_QWORD *)v5 + 4) = v44;
    *((_QWORD *)v5 + 5) = v27;
    v28 = v5 + 40;
    v29 = v46;
    *((_QWORD *)v5 + 6) = v46;
    if (v29)
    {
      *(_QWORD *)(v27 + 16) = v28;
      v27 = 0;
      v44 = &v45;
      v45 = 0;
      v46 = 0;
    }
    else
    {
      *((_QWORD *)v5 + 4) = v28;
    }
    *(_OWORD *)(v5 + 56) = v47;
    v47 = 0uLL;
    v5[72] = 1;
    v43.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v44, (unsigned int *)v27);
    MEMORY[0x18D7898AC](&v43);
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v37);
    if (v54)
    {
      v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (*((_QWORD *)&v53 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v51);
      return (_BYTE *)MEMORY[0x18D7898AC](&v48);
    }
  }
  return result;
}

void sub_18CCB5BF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v45, a26);
  MEMORY[0x18D7898AC](&a21);
  AMSCore::Error::~Error((AMSCore::Error *)&a12);
}

void sub_18CCB5C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Unwind_Exception *v30;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a30);
  _Unwind_Resume(v30);
}

void sub_18CCB5C50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::ostream::~ostream();
  MEMORY[0x18D789B58](a11);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMSCore::StopToken>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2523030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::StopToken>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2523030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

#error "18CCB637C: call analysis failed (funcsize=566)"

void sub_18CCB65BC(void *a1)
{
  uint64_t v1;
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);

  if (*(_BYTE *)(v1 + 224))
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*(char **)(v1 + 160));
  else
    (**v2)(v2);
  if (!*(_BYTE *)(v1 + 320))
    (**v3)(v3);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCB6634()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCB6584);
}

void AMSCore::MetricsProvider::enqueueEvents(_QWORD *__p)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v2 = (void (***)(_QWORD))(__p + 31);
  if (*__p)
  {
    if (*((_BYTE *)__p + 440))
    {
      v3 = __p[51];
      if (v3)
      {
        v4 = (unint64_t *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          v6 = (std::__shared_weak_count *)__p[51];
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v7 = (std::__shared_weak_count *)__p[45];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (_QWORD *)__p[41];
      if (v10)
      {
        v11 = (_QWORD *)__p[42];
        while (v11 != v10)
        {
          v13 = *--v11;
          v12 = v13;
          *v11 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        __p[42] = v10;
        operator delete(v10);
      }
      if (!*((_BYTE *)__p + 320))
        (**v2)(v2);
      v15 = 0;
      v14 = 0;
    }
    else
    {
      if (!*((_BYTE *)__p + 240))
        (*(void (**)(char *))__p[21])((char *)__p + 168);
      v16 = (std::__shared_weak_count *)__p[20];
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)__p[45];
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v14 = (_QWORD *)__p[47];
      v15 = (_QWORD *)__p[48];
    }
  }
  else
  {
    v15 = (_QWORD *)__p[53];
    v14 = (_QWORD *)__p[54];
  }
  v22 = (_QWORD *)__p[18];
  if (v22 == __p + 15)
  {
    v23 = 4;
    v22 = __p + 15;
    goto LABEL_40;
  }
  if (v22)
  {
    v23 = 5;
LABEL_40:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
  if (*((_BYTE *)__p + 104) && !*((_BYTE *)__p + 96))
    (*(void (**)(char *))__p[3])((char *)__p + 24);
  do
  {
    v24 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v25)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v14)
  {
    while (v15 != v14)
    {
      v27 = *--v15;
      v26 = v27;
      *v15 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    operator delete(v14);
  }
  operator delete(__p);
}

void AMSCore::MetricsProvider::saveToDatabase(_OWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,AMSCore::MetricsEventModifier::EventModifier *a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  unsigned int v68;
  _QWORD *v69;
  __int128 v70;
  BOOL v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  const AMSCore::IMetricsProvider::Event *v97;
  int v98;
  int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  int v104;
  __int128 v105;
  uint64_t *v106;
  __int128 v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void **v165;
  void **v166;
  void *v167;
  int v168;
  unsigned int *v169;
  unsigned int *v170;
  unsigned int **v171;
  char *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  std::runtime_error_vtbl *v178;
  uint64_t v179;
  void **v180;
  void **v181;
  void **v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  void **v191;
  char **v192;
  char *v193;
  _OWORD *v194;
  _OWORD *v195;
  char *v196;
  _OWORD *v197;
  _OWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  void **v202;
  unsigned int **v203;
  unsigned int ***v204;
  uint64_t v205;
  _QWORD *v206;
  std::runtime_error *v207;
  void **v208;
  char *v209;
  _QWORD *v210;
  _QWORD *v211;
  AMSCore::URL *v212;
  uint64_t **v213;
  _OWORD *v214;
  _BYTE *v215;
  _OWORD *v216;
  _OWORD *v217;
  std::string *v218;
  std::runtime_error *v219;
  std::runtime_error *v220;
  char **v221;
  char **v222;
  char **v223;
  uint64_t **v224;
  std::string *v225;
  _OWORD *v226;
  const AMSCore::IMetricsProvider::Event **v227;
  _QWORD *v228;
  char *v229;
  _QWORD *v230;
  AMSCore::URL *v231;
  std::string *v232;
  std::runtime_error v233;
  __int128 v234;
  unsigned int **v235;
  unsigned int *v236;
  uint64_t v237;
  __int128 v238;
  std::runtime_error v239;
  __int128 v240;
  unsigned int **v241;
  unsigned int *v242;
  uint64_t v243;
  __int128 v244;
  unsigned __int8 v245;
  std::runtime_error v246;
  __int128 v247;
  unsigned int **v248;
  unsigned int *v249;
  uint64_t v250;
  __int128 v251;
  _QWORD v252[3];
  char v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  char v257;

  v62 = (char *)operator new(0x510uLL);
  v63 = v62;
  v215 = v62 + 1288;
  v64 = v62 + 776;
  *(_QWORD *)v62 = AMSCore::MetricsProvider::saveToDatabase;
  *((_QWORD *)v62 + 1) = AMSCore::MetricsProvider::saveToDatabase;
  v229 = v62 + 152;
  v65 = (uint64_t)(v62 + 720);
  v225 = (std::string *)(v62 + 808);
  v226 = v62 + 440;
  v219 = (std::runtime_error *)(v62 + 960);
  v220 = (std::runtime_error *)(v62 + 888);
  v218 = (std::string *)(v62 + 1032);
  v205 = (uint64_t)(v62 + 1056);
  v232 = (std::string *)(v62 + 1080);
  *((_QWORD *)v62 + 151) = a2;
  v66 = *(uint64_t **)a3;
  v67 = *(uint64_t **)(a3 + 8);
  *((_QWORD *)v62 + 152) = *(_QWORD *)a3;
  v191 = (void **)(v62 + 1104);
  v213 = (uint64_t **)(v62 + 1128);
  v230 = v62 + 1152;
  *((_QWORD *)v62 + 153) = v67;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v227 = (const AMSCore::IMetricsProvider::Event **)(v62 + 1192);
  v228 = v62 + 1176;
  v193 = v62 + 16;
  *(_QWORD *)a3 = 0;
  do
    v68 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v68 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v62 + 14) = 0;
  v62[24] = 0;
  v207 = (std::runtime_error *)(v62 + 24);
  v62[104] = 0;
  *((_QWORD *)v62 + 18) = 0;
  v69 = (_QWORD *)operator new();
  *v69 = &off_1E2523998;
  v69[1] = 0;
  v69[2] = 0;
  v69[3] = v193;
  *(_QWORD *)&v70 = v193;
  *((_QWORD *)&v70 + 1) = v69;
  *a1 = v70;
  *((_QWORD *)v63 + 143) = 0;
  *((_QWORD *)v63 + 142) = 0;
  v192 = (char **)(v63 + 1136);
  *((_QWORD *)v63 + 141) = v63 + 1136;
  *(_QWORD *)(v205 + 8) = 0;
  *(_QWORD *)(v205 + 16) = 0;
  *(_QWORD *)v205 = 0;
  std::vector<AMSCore::IMetricsDataAccessObject::Event>::reserve(v205, v67 - v66);
  v71 = v66 == v67;
  v72 = (uint64_t)v229;
  if (!v71)
  {
    v203 = (unsigned int **)(v63 + 760);
    v204 = (unsigned int ***)(v63 + 752);
    v231 = (AMSCore::URL *)(v63 + 272);
    v201 = v63 + 192;
    v202 = (void **)(v63 + 744);
    v223 = (char **)(v63 + 480);
    v224 = (uint64_t **)(v63 + 256);
    v199 = v63 + 240;
    v200 = v63 + 216;
    v221 = (char **)(v63 + 528);
    v222 = (char **)(v63 + 504);
    v212 = (AMSCore::URL *)(v63 + 560);
    v195 = v63 + 304;
    v194 = v63 + 336;
    v73 = v63 + 664;
    v198 = v63 + 400;
    v209 = v63 + 1160;
    v214 = v63 + 792;
    v208 = (void **)(v63 + 768);
    v210 = v63 + 928;
    v211 = v63 + 1000;
    v206 = v63 + 920;
    v216 = v63 + 904;
    v217 = v63 + 976;
    v197 = v64 + 240;
    v196 = v63 + 64;
    do
    {
      *((_QWORD *)v63 + 154) = v66;
      v74 = *v66;
      *((_QWORD *)v63 + 149) = *v66;
      if (v74)
      {
        v75 = (_QWORD *)operator new();
        v76 = *((_QWORD *)v63 + 151);
        v77 = *v66;
        v75[1] = 0;
        v78 = v75 + 1;
        *v75 = &off_1E25231F0;
        v75[2] = 0;
        v75[3] = v77;
        *((_QWORD *)v63 + 150) = v75;
        *v66 = 0;
        v79 = *(_QWORD **)(v76 + 96);
        *((_QWORD *)v63 + 147) = v74;
        *((_QWORD *)v63 + 148) = v75;
        do
          v80 = __ldxr(v78);
        while (__stxr(v80 + 1, v78));
        v81 = (uint64_t)v228;
      }
      else
      {
        v82 = *((_QWORD *)v63 + 151);
        *((_QWORD *)v63 + 150) = 0;
        *v66 = 0;
        v79 = *(_QWORD **)(v82 + 96);
        v81 = (uint64_t)v228;
        *v228 = 0;
        v228[1] = 0;
      }
      AMSCore::MetricsEventModifierProvider::getOverrideForEvent((_OWORD *)v65, v79, v81);
      v83 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 29) = *(_OWORD *)v65;
      *(_QWORD *)v65 = 0;
      *(_QWORD *)(v65 + 8) = 0;
      if (!atomic_load((unint64_t *)(v83 + 304)))
      {
        *v215 = 0;
        v85 = (unint64_t *)(*((_QWORD *)v64 + 58) + 304);
        do
          v86 = __ldaxr(v85);
        while (__stlxr((unint64_t)v63, v85));
        if (!v86)
          return;
      }
      AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(v72, *((_QWORD *)v63 + 155));
      v87 = *((_QWORD *)v63 + 156);
      if (!v87)
        goto LABEL_19;
      v88 = (unint64_t *)(v87 + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        v93 = (std::__shared_weak_count *)*((_QWORD *)v63 + 156);
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        v90 = (std::__shared_weak_count *)*((_QWORD *)v63 + 91);
        if (!v90)
          goto LABEL_25;
      }
      else
      {
LABEL_19:
        v90 = (std::__shared_weak_count *)*((_QWORD *)v63 + 91);
        if (!v90)
          goto LABEL_25;
      }
      p_shared_owners = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldaxr(p_shared_owners);
      while (__stlxr(v92 - 1, p_shared_owners));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
LABEL_25:
      v94 = (std::__shared_weak_count *)*((_QWORD *)v63 + 148);
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = *v227;
      AMSCore::MetricsEventModifier::MergedEventModifier::shouldDropEvent((AMSCore::MetricsEventModifier::MergedEventModifier *)v72, *v227);
      v99 = v98;
      AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)v252, (uint64_t *)v97 + 9, "topic", 5uLL);
      if (!v257)
      {
LABEL_231:
        __break(1u);
        return;
      }
      v100 = v252[0];
      if (v99)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault((_QWORD *)v65);
        AMSCore::Logger::log<char [17],std::string>(*(_QWORD *)v65, v100);
        v101 = (std::__shared_weak_count *)*((_QWORD *)v63 + 91);
        if (!v101)
        {
          v104 = 5;
          v72 = (uint64_t)v229;
          if (!v63[424])
            goto LABEL_132;
          goto LABEL_131;
        }
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        v72 = (uint64_t)v229;
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
        v104 = 5;
        if (v63[424])
          goto LABEL_131;
        goto LABEL_132;
      }
      if (*(char *)(v252[0] + 23) < 0)
      {
        v72 = (uint64_t)v229;
        std::string::__init_copy_ctor_external(v232, *(const std::string::value_type **)v252[0], *(_QWORD *)(v252[0] + 8));
      }
      else
      {
        v105 = *(_OWORD *)v252[0];
        v232->__r_.__value_.__r.__words[2] = *(_QWORD *)(v252[0] + 16);
        *(_OWORD *)&v232->__r_.__value_.__l.__data_ = v105;
        v72 = (uint64_t)v229;
      }
      v106 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>((uint64_t)v97 + 72, "clientEventId");
      if (*((char *)v106 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(v218, (const std::string::value_type *)v106[7], v106[8]);
      }
      else
      {
        v107 = *(_OWORD *)(v106 + 7);
        v218->__r_.__value_.__r.__words[2] = v106[9];
        *(_OWORD *)&v218->__r_.__value_.__l.__data_ = v107;
      }
      AMSCore::MetricsEventModifier::MergedEventModifier::handleFieldModifiers((AMSCore::MetricsEventModifier::MergedEventModifier *)v72, v97);
      AMSCore::getValueByKey<BOOL,std::map<std::string,AMSCore::Any> const>((uint64_t)v252, (uint64_t *)v97 + 9, "anonymous", 9uLL);
      if (!v257)
      {
        (*(void (**)(_QWORD *))v252[0])(v252);
LABEL_51:
        LOBYTE(v252[0]) = 0;
        v253 = 0;
        v254 = -1;
        v255 = 7824750;
        v256 = 3;
        AMSCore::operator==((uint64_t)v97 + 8, (uint64_t)v252);
        if ((v111 & 1) != 0)
        {
          v109 = 0;
          v110 = 0;
          v63[720] = 0;
          v63[744] = 0;
          *((_QWORD *)v63 + 94) = 0;
          *((_QWORD *)v63 + 95) = 0x6C61636F6CLL;
          v108 = 1;
          v63[783] = 5;
        }
        else
        {
          v109 = *((_QWORD *)v97 + 5);
          v110 = v109 & 0xFFFFFFFFFFFFFF00;
          v108 = 1;
        }
        goto LABEL_54;
      }
      if (!LOBYTE(v252[0]))
        goto LABEL_51;
      v108 = 0;
      v109 = 0;
      v110 = 0;
LABEL_54:
      *((_QWORD *)v63 + 158) = v110;
      *((_QWORD *)v63 + 157) = v109;
      v63[1289] = v108;
      *((_QWORD *)v63 + 90) = v232;
      v112 = std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v213, (const void **)&v232->__r_.__value_.__l.__data_, (uint64_t)v232);
      v113 = *v224;
      *((_BYTE *)v112 + 64) = v63[264];
      v112[7] = v113;
      std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>((uint64_t)(v112 + 9), v231);
      *v226 = *(_OWORD *)v72;
      *(_OWORD *)((char *)v226 + 12) = *(_OWORD *)(v72 + 12);
      v114 = *((_QWORD *)v63 + 24);
      *((_QWORD *)v63 + 59) = *((_QWORD *)v63 + 23);
      *((_QWORD *)v63 + 60) = v114;
      v115 = *((_QWORD *)v63 + 25);
      *((_QWORD *)v63 + 61) = v115;
      if (v115)
      {
        *(_QWORD *)(v114 + 16) = v223;
        *((_QWORD *)v63 + 23) = v201;
        *v201 = 0;
        *((_QWORD *)v63 + 25) = 0;
      }
      else
      {
        *((_QWORD *)v63 + 59) = v223;
      }
      v116 = *((_QWORD *)v63 + 27);
      *((_QWORD *)v63 + 62) = *((_QWORD *)v63 + 26);
      *((_QWORD *)v63 + 63) = v116;
      v117 = *((_QWORD *)v63 + 28);
      *((_QWORD *)v63 + 64) = v117;
      if (v117)
      {
        *(_QWORD *)(v116 + 16) = v222;
        *((_QWORD *)v63 + 26) = v200;
        *v200 = 0;
        *((_QWORD *)v63 + 28) = 0;
      }
      else
      {
        *((_QWORD *)v63 + 62) = v222;
      }
      v118 = *((_QWORD *)v63 + 30);
      *((_QWORD *)v63 + 65) = *((_QWORD *)v63 + 29);
      *((_QWORD *)v63 + 66) = v118;
      v119 = *((_QWORD *)v63 + 31);
      *((_QWORD *)v63 + 67) = v119;
      if (v119)
      {
        *(_QWORD *)(v118 + 16) = v221;
        *((_QWORD *)v63 + 29) = v199;
        *v199 = 0;
        *((_QWORD *)v63 + 31) = 0;
      }
      else
      {
        *((_QWORD *)v63 + 65) = v221;
      }
      *((_OWORD *)v63 + 34) = *(_OWORD *)v224;
      v63[560] = 0;
      v63[712] = 0;
      if (v63[424])
      {
        v63[584] = 0;
        if (v63[296])
        {
          *(_OWORD *)v212 = *(_OWORD *)v231;
          *((_QWORD *)v63 + 72) = *((_QWORD *)v63 + 36);
          *((_QWORD *)v63 + 35) = 0;
          *((_QWORD *)v63 + 36) = 0;
          *(_QWORD *)v231 = 0;
          v63[584] = 1;
        }
        v63[592] = 0;
        v63[616] = 0;
        if (v63[328])
        {
          *((_OWORD *)v63 + 37) = *v195;
          *((_QWORD *)v63 + 76) = *((_QWORD *)v63 + 40);
          *((_QWORD *)v63 + 39) = 0;
          *((_QWORD *)v63 + 40) = 0;
          *(_QWORD *)v195 = 0;
          v63[616] = 1;
        }
        v63[624] = 0;
        v63[648] = 0;
        if (v63[360])
        {
          *((_OWORD *)v63 + 39) = *v194;
          *((_QWORD *)v63 + 80) = *((_QWORD *)v63 + 44);
          *((_QWORD *)v63 + 43) = 0;
          *((_QWORD *)v63 + 44) = 0;
          *(_QWORD *)v194 = 0;
          v63[648] = 1;
        }
        *((_DWORD *)v63 + 164) = *((_DWORD *)v63 + 92);
        *((_QWORD *)v63 + 83) = v63 + 664;
        *((_QWORD *)v63 + 84) = v73;
        *((_QWORD *)v63 + 85) = 0;
        v120 = *((_QWORD *)v63 + 49);
        if (v120)
        {
          v122 = *((_QWORD *)v63 + 47);
          v121 = (uint64_t *)*((_QWORD *)v63 + 48);
          v123 = *v121;
          *(_QWORD *)(v123 + 8) = *(_QWORD *)(v122 + 8);
          **(_QWORD **)(v122 + 8) = v123;
          v124 = *((_QWORD *)v63 + 83);
          *(_QWORD *)(v124 + 8) = v121;
          *v121 = v124;
          *((_QWORD *)v63 + 83) = v122;
          *(_QWORD *)(v122 + 8) = v73;
          *((_QWORD *)v63 + 85) = v120;
          *((_QWORD *)v63 + 49) = 0;
        }
        *((_OWORD *)v63 + 43) = *v198;
        *((_QWORD *)v63 + 88) = *((_QWORD *)v63 + 52);
        *((_QWORD *)v63 + 51) = 0;
        *((_QWORD *)v63 + 52) = 0;
        *(_QWORD *)v198 = 0;
        v63[712] = 1;
      }
      AMSCore::IMetricsProvider::Event::takeProperties((_OWORD *)v65, (uint64_t)v97, (uint64_t)v226);
      v125 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 31) = *(_OWORD *)v65;
      *(_QWORD *)v65 = 0;
      *(_QWORD *)(v65 + 8) = 0;
      if (!atomic_load((unint64_t *)(v125 + 40)))
      {
        *v215 = 1;
        v127 = (unint64_t *)(*((_QWORD *)v64 + 62) + 40);
        do
          v128 = __ldaxr(v127);
        while (__stlxr((unint64_t)v63, v127));
        if (!v128)
          return;
      }
      v129 = *((_QWORD *)v64 + 62);
      if (!*(_BYTE *)(v129 + 32))
        goto LABEL_231;
      v130 = (_QWORD *)(v129 + 16);
      v131 = *(_QWORD *)(v129 + 16);
      *((_QWORD *)v63 + 144) = *(_QWORD *)(v129 + 8);
      *((_QWORD *)v63 + 145) = v131;
      v132 = *(_QWORD *)(v129 + 24);
      *((_QWORD *)v63 + 146) = v132;
      if (v132)
      {
        *(_QWORD *)(v131 + 16) = v209;
        *(_QWORD *)(v129 + 8) = v130;
        *v130 = 0;
        *(_QWORD *)(v129 + 24) = 0;
        v133 = *((_QWORD *)v63 + 160);
        if (!v133)
          goto LABEL_85;
      }
      else
      {
        *v230 = v209;
        v133 = *((_QWORD *)v63 + 160);
        if (!v133)
          goto LABEL_85;
      }
      v134 = (unint64_t *)(v133 + 8);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        v139 = (std::__shared_weak_count *)*((_QWORD *)v63 + 160);
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
        v136 = (std::__shared_weak_count *)*((_QWORD *)v63 + 91);
        if (!v136)
          goto LABEL_91;
        goto LABEL_86;
      }
LABEL_85:
      v136 = (std::__shared_weak_count *)*((_QWORD *)v63 + 91);
      if (!v136)
        goto LABEL_91;
LABEL_86:
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
LABEL_91:
      if (v63[712])
        AMSCore::URL::~URL(v212);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v221);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v222);
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v223);
      AMSCore::serialize(v225, v230);
      AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &,char const(&)[27]>((_BYTE *)v65, (uint64_t)v225, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance);
      if (!*(_BYTE *)v214)
      {
        *(_OWORD *)v65 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
        *(_QWORD *)(v65 + 16) = *((_QWORD *)&v232->__r_.__value_.__l + 2);
        v232->__r_.__value_.__l.__size_ = 0;
        v232->__r_.__value_.__r.__words[2] = 0;
        v232->__r_.__value_.__r.__words[0] = 0;
        *(_OWORD *)v202 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
        *((_QWORD *)v63 + 95) = *((_QWORD *)&v218->__r_.__value_.__l + 2);
        v218->__r_.__value_.__r.__words[0] = 0;
        v218->__r_.__value_.__l.__size_ = 0;
        v218->__r_.__value_.__r.__words[2] = 0;
        if (!v63[880])
          goto LABEL_231;
        v143 = *((_QWORD *)v63 + 158);
        v144 = v63[1256];
        v145 = v63[1289];
        *(_OWORD *)v208 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
        *((_QWORD *)v63 + 98) = *((_QWORD *)&v225->__r_.__value_.__l + 2);
        v225->__r_.__value_.__r.__words[0] = 0;
        v225->__r_.__value_.__l.__size_ = 0;
        v225->__r_.__value_.__r.__words[2] = 0;
        *((_QWORD *)v63 + 99) = v144 | v143;
        v63[800] = v145;
        v146 = *((_QWORD *)v63 + 133);
        if (v146 >= *((_QWORD *)v63 + 134))
        {
          v152 = std::vector<AMSCore::IMetricsDataAccessObject::Event>::__emplace_back_slow_path<AMSCore::IMetricsDataAccessObject::Event>((void **)v205, v65);
          v153 = v63[791];
          *((_QWORD *)v63 + 133) = v152;
          if (v153 < 0)
          {
            operator delete(*v208);
            if ((v63[767] & 0x80000000) == 0)
              goto LABEL_110;
          }
          else if ((v63[767] & 0x80000000) == 0)
          {
            goto LABEL_110;
          }
LABEL_99:
          operator delete(*v202);
          if ((v63[743] & 0x80000000) == 0)
          {
LABEL_111:
            v104 = 0;
            if (v63[880])
              goto LABEL_126;
            goto LABEL_112;
          }
        }
        else
        {
          v147 = *(_OWORD *)v65;
          *(_QWORD *)(v146 + 16) = *(_QWORD *)(v65 + 16);
          *(_OWORD *)v146 = v147;
          *(_QWORD *)(v65 + 8) = 0;
          *(_QWORD *)(v65 + 16) = 0;
          *(_QWORD *)v65 = 0;
          v148 = *(_OWORD *)v202;
          *(_QWORD *)(v146 + 40) = *((_QWORD *)v63 + 95);
          *(_OWORD *)(v146 + 24) = v148;
          *((_QWORD *)v63 + 94) = 0;
          *((_QWORD *)v63 + 95) = 0;
          *v202 = 0;
          v149 = *(_OWORD *)v208;
          *(_QWORD *)(v146 + 64) = *((_QWORD *)v63 + 98);
          *(_OWORD *)(v146 + 48) = v149;
          *((_QWORD *)v63 + 97) = 0;
          *((_QWORD *)v63 + 98) = 0;
          *v208 = 0;
          *(_OWORD *)(v146 + 72) = *v214;
          *((_QWORD *)v63 + 133) = v146 + 88;
          if (v63[767] < 0)
            goto LABEL_99;
LABEL_110:
          if ((v63[743] & 0x80000000) == 0)
            goto LABEL_111;
        }
        operator delete(*(void **)v65);
        goto LABEL_111;
      }
      std::runtime_error::runtime_error(v219, (const std::runtime_error *)v65);
      *v217 = *((_OWORD *)v63 + 46);
      *((_QWORD *)v63 + 120) = off_1E2521330;
      *((_QWORD *)v63 + 124) = *((_QWORD *)v63 + 94);
      v140 = *((_QWORD *)v63 + 95);
      *((_QWORD *)v63 + 125) = v140;
      v141 = *((_QWORD *)v63 + 96);
      *((_QWORD *)v63 + 126) = v141;
      if (v141)
      {
        *(_QWORD *)(v140 + 16) = v211;
        *v204 = v203;
        *v203 = 0;
        *((_QWORD *)v63 + 96) = 0;
        v142 = v63 + 992;
      }
      else
      {
        v142 = v63 + 992;
        *((_QWORD *)v63 + 124) = v211;
      }
      *((_OWORD *)v64 + 15) = *(_OWORD *)v64;
      *(_QWORD *)v64 = 0;
      *((_QWORD *)v64 + 1) = 0;
      std::runtime_error::runtime_error(v220, v219);
      *v216 = *v217;
      *((_QWORD *)v63 + 111) = off_1E2521330;
      *((_QWORD *)v63 + 115) = *((_QWORD *)v63 + 124);
      v150 = *((_QWORD *)v63 + 125);
      *((_QWORD *)v63 + 116) = v150;
      v151 = *((_QWORD *)v63 + 126);
      *((_QWORD *)v63 + 117) = v151;
      if (v151)
      {
        *(_QWORD *)(v150 + 16) = v210;
        v150 = 0;
        *v142 = v211;
        *v211 = 0;
        *((_QWORD *)v63 + 126) = 0;
      }
      else
      {
        *v206 = v210;
      }
      *((_OWORD *)v63 + 59) = *v197;
      *(_QWORD *)v197 = 0;
      *((_QWORD *)v64 + 31) = 0;
      *((_QWORD *)v63 + 120) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v142, (unsigned int *)v150);
      MEMORY[0x18D7898AC](v219);
      if (v63[104])
      {
        if (v63[96])
          std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)v63 + 4));
        else
          ((void (*)(std::runtime_error *))v207->~runtime_error)(v207);
        v63[104] = 0;
      }
      std::runtime_error::runtime_error(v207, v220);
      *(_OWORD *)(v63 + 40) = *v216;
      *((_QWORD *)v63 + 3) = off_1E2521330;
      v154 = *((_QWORD *)v63 + 116);
      *((_QWORD *)v63 + 7) = *((_QWORD *)v63 + 115);
      *((_QWORD *)v63 + 8) = v154;
      v155 = *((_QWORD *)v63 + 117);
      *((_QWORD *)v63 + 9) = v155;
      if (v155)
      {
        *(_QWORD *)(v154 + 16) = v196;
        v154 = 0;
        *v206 = v210;
        *v210 = 0;
        *((_QWORD *)v63 + 117) = 0;
      }
      else
      {
        *((_QWORD *)v63 + 7) = v196;
      }
      *((_OWORD *)v63 + 5) = *((_OWORD *)v63 + 59);
      *((_QWORD *)v63 + 118) = 0;
      *((_QWORD *)v63 + 119) = 0;
      v63[96] = 0;
      v63[104] = 1;
      *((_QWORD *)v63 + 111) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v206, (unsigned int *)v154);
      MEMORY[0x18D7898AC](v220);
      if (v63[792])
      {
        *((_QWORD *)v63 + 90) = off_1E2521330;
        v156 = (std::__shared_weak_count *)*((_QWORD *)v63 + 98);
        if (v156)
        {
          v157 = (unint64_t *)&v156->__shared_owners_;
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v204, *v203);
        MEMORY[0x18D7898AC](v65);
      }
      v104 = 3;
      if (v63[880])
      {
LABEL_126:
        if (v63[831] < 0)
          operator delete(v225->__r_.__value_.__l.__data_);
        goto LABEL_128;
      }
LABEL_112:
      (*(void (**)(std::string *))v225->__r_.__value_.__l.__data_)(v225);
LABEL_128:
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v230, *((unsigned int **)v63 + 145));
      if (v63[1055] < 0)
      {
        operator delete(v218->__r_.__value_.__l.__data_);
        if (v63[1103] < 0)
        {
LABEL_142:
          operator delete(v232->__r_.__value_.__l.__data_);
          if (!v63[424])
            goto LABEL_132;
LABEL_131:
          AMSCore::URL::~URL(v231);
          goto LABEL_132;
        }
      }
      else if (v63[1103] < 0)
      {
        goto LABEL_142;
      }
      if (v63[424])
        goto LABEL_131;
LABEL_132:
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v63 + 30));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v63 + 27));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v63 + 24));
      v159 = (std::__shared_weak_count *)*((_QWORD *)v63 + 150);
      if (!v159)
        goto LABEL_136;
      v160 = (unint64_t *)&v159->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
        if (v104 == 5)
          goto LABEL_5;
      }
      else
      {
LABEL_136:
        if (v104 == 5)
          goto LABEL_5;
      }
      if (v104)
        goto LABEL_195;
LABEL_5:
      v66 = (uint64_t *)(*((_QWORD *)v63 + 154) + 8);
    }
    while (v66 != *((uint64_t **)v63 + 153));
  }
  v162 = *((_QWORD *)v63 + 132);
  v163 = *((_QWORD *)v63 + 133);
  if (v162 != v163)
  {
    v164 = *(_QWORD *)(*((_QWORD *)v63 + 151) + 56);
    *((_QWORD *)v63 + 138) = v162;
    *((_QWORD *)v63 + 139) = v163;
    *((_QWORD *)v63 + 140) = *((_QWORD *)v63 + 134);
    *(_QWORD *)v205 = 0;
    *(_QWORD *)(v205 + 8) = 0;
    *(_QWORD *)(v205 + 16) = 0;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, void **))(*(_QWORD *)v164 + 16))(v252, v164, v191);
    v165 = (void **)*v191;
    if (!*v191)
      goto LABEL_160;
    v166 = (void **)*((_QWORD *)v63 + 139);
    v167 = *v191;
    if (v166 == v165)
    {
LABEL_159:
      *((_QWORD *)v63 + 139) = v165;
      operator delete(v167);
LABEL_160:
      AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[33]>(&v239, (uint64_t)v252, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance);
      v168 = v245;
      if (v245)
      {
        std::runtime_error::runtime_error(&v246, &v239);
        v247 = v240;
        v246.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v248 = v241;
        v249 = v242;
        v250 = v243;
        if (v243)
        {
          *((_QWORD *)v242 + 2) = &v249;
          v241 = &v242;
          v242 = 0;
          v243 = 0;
        }
        else
        {
          v248 = &v249;
        }
        v251 = v244;
        v244 = 0uLL;
        std::runtime_error::runtime_error(&v233, &v246);
        v234 = v247;
        v233.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v169 = v249;
        v235 = v248;
        v236 = v249;
        v237 = v250;
        if (v250)
        {
          *((_QWORD *)v249 + 2) = &v236;
          v169 = 0;
          v248 = &v249;
          v249 = 0;
          v250 = 0;
        }
        else
        {
          v235 = &v236;
        }
        v238 = v251;
        v251 = 0uLL;
        v246.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v248, v169);
        MEMORY[0x18D7898AC](&v246);
        v72 = (uint64_t)v229;
        if (v63[104])
        {
          if (v63[96])
            std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)v63 + 4));
          else
            ((void (*)(std::runtime_error *))v207->~runtime_error)(v207);
          v63[104] = 0;
        }
        std::runtime_error::runtime_error(v207, &v233);
        v171 = v235;
        v170 = v236;
        *((_QWORD *)v63 + 8) = v236;
        v172 = v63 + 64;
        *(_OWORD *)(v63 + 40) = v234;
        *((_QWORD *)v63 + 3) = off_1E2521330;
        *((_QWORD *)v63 + 7) = v171;
        v173 = v237;
        *((_QWORD *)v63 + 9) = v237;
        if (v173)
        {
          *((_QWORD *)v170 + 2) = v172;
          v170 = 0;
          v235 = &v236;
          v236 = 0;
          v237 = 0;
        }
        else
        {
          *((_QWORD *)v63 + 7) = v172;
        }
        *((_OWORD *)v63 + 5) = v238;
        v238 = 0uLL;
        v63[96] = 0;
        v63[104] = 1;
        v233.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v235, v170);
        MEMORY[0x18D7898AC](&v233);
        if (v245)
        {
          v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v174 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
          if (*((_QWORD *)&v244 + 1))
          {
            v175 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
            do
              v176 = __ldaxr(v175);
            while (__stlxr(v176 - 1, v175));
            if (!v176)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v242);
          MEMORY[0x18D7898AC](&v239);
        }
        v104 = 3;
        if (v257)
        {
LABEL_186:
          if (v168)
            goto LABEL_195;
          goto LABEL_187;
        }
      }
      else
      {
        v104 = 0;
        if (v257)
          goto LABEL_186;
      }
      (*(void (**)(_QWORD *))v252[0])(v252);
      goto LABEL_186;
    }
    while (1)
    {
      if (*((char *)v166 - 17) < 0)
      {
        operator delete(*(v166 - 5));
        if (*((char *)v166 - 41) < 0)
        {
LABEL_150:
          operator delete(*(v166 - 8));
          if (*((char *)v166 - 65) < 0)
            goto LABEL_157;
          goto LABEL_151;
        }
      }
      else if (*((char *)v166 - 41) < 0)
      {
        goto LABEL_150;
      }
      if (*((char *)v166 - 65) < 0)
LABEL_157:
        operator delete(*(v166 - 11));
LABEL_151:
      v166 -= 11;
      if (v166 == v165)
      {
        v167 = *v191;
        goto LABEL_159;
      }
    }
  }
LABEL_187:
  if (v63[104])
  {
    if (v63[96])
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)v63 + 4));
    else
      ((void (*)(std::runtime_error *))v207->~runtime_error)(v207);
  }
  v177 = *((_QWORD *)v63 + 142);
  *((_QWORD *)v63 + 4) = v177;
  v178 = (std::runtime_error_vtbl *)(v63 + 32);
  *((_QWORD *)v63 + 3) = *((_QWORD *)v63 + 141);
  v179 = *((_QWORD *)v63 + 143);
  *((_QWORD *)v63 + 5) = v179;
  if (v179)
  {
    *(_QWORD *)(v177 + 16) = v178;
    *v213 = (uint64_t *)v192;
    *v192 = 0;
    *((_QWORD *)v63 + 143) = 0;
  }
  else
  {
    v207->__vftable = v178;
  }
  v63[96] = 1;
  v63[104] = 1;
  v104 = 3;
LABEL_195:
  v180 = *(void ***)v205;
  if (!*(_QWORD *)v205)
    goto LABEL_208;
  v181 = (void **)*((_QWORD *)v63 + 133);
  v182 = *(void ***)v205;
  if (v181 != v180)
  {
    while (1)
    {
      if (*((char *)v181 - 17) < 0)
      {
        operator delete(*(v181 - 5));
        if (*((char *)v181 - 41) < 0)
        {
LABEL_198:
          operator delete(*(v181 - 8));
          if (*((char *)v181 - 65) < 0)
            goto LABEL_205;
          goto LABEL_199;
        }
      }
      else if (*((char *)v181 - 41) < 0)
      {
        goto LABEL_198;
      }
      if (*((char *)v181 - 65) < 0)
LABEL_205:
        operator delete(*(v181 - 11));
LABEL_199:
      v181 -= 11;
      if (v181 == v180)
      {
        v182 = *(void ***)v205;
        break;
      }
    }
  }
  *((_QWORD *)v63 + 133) = v180;
  operator delete(v182);
LABEL_208:
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*v192);
  if (v104 == 3)
  {
    *((_QWORD *)v63 + 19) = v193;
    *(_QWORD *)v63 = 0;
    AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v72);
    return;
  }
  v183 = (char *)*((_QWORD *)v63 + 18);
  if (v183 == v63 + 120)
  {
    v184 = 4;
    v183 = v63 + 120;
    goto LABEL_214;
  }
  if (v183)
  {
    v184 = 5;
LABEL_214:
    (*(void (**)(void))(*(_QWORD *)v183 + 8 * v184))();
  }
  if (v63[104])
  {
    if (v63[96])
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)v63 + 4));
    else
      ((void (*)(std::runtime_error *))v207->~runtime_error)(v207);
  }
  v185 = *((_QWORD *)v63 + 152);
  do
  {
    v186 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v187 = v186 - 1;
  }
  while (__stlxr(v187, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v187)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v185)
  {
    v188 = (_QWORD *)*((_QWORD *)v63 + 153);
    while (v188 != *((_QWORD **)v63 + 152))
    {
      v190 = *--v188;
      v189 = v190;
      *v188 = 0;
      if (v190)
        (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
    }
    operator delete(v188);
  }
  operator delete(v63);
}

void sub_18CCB7C54(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_18CCB7C68()
{
  JUMPOUT(0x18CCB7CE0);
}

void sub_18CCB7C70()
{
  JUMPOUT(0x18CCB7CF4);
}

void sub_18CCB7C9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,AMSCore::MetricsEventModifier::EventModifier *a53,uint64_t a54,uint64_t a55,AMSCore::MetricsEventModifier::EventModifier *a56,uint64_t a57,uint64_t a58,void **a59)
{
  uint64_t v59;

  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(a53);
  if (*(char *)(v59 + 1055) < 0)
    operator delete(*a45);
  if (*(char *)(v59 + 1103) < 0)
    operator delete(*a59);
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(a56);
  JUMPOUT(0x18CCB7D10);
}

void sub_18CCB7CB0()
{
  uint64_t v0;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v0);
  JUMPOUT(0x18CCB7CF4);
}

void sub_18CCB7D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a55);
  JUMPOUT(0x18CCB7D10);
}

void sub_18CCB7D3C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCB7AE4);
}

_BYTE *AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CCB7FBC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CCB7FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

void AMSCore::MetricsProvider::startFlushTaskForTopic(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  char v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  uint64_t **v12;
  int v13;
  uint64_t *v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  size_t v23;
  size_t v24;
  int v25;
  _QWORD *v26;
  unint64_t *v27;
  _QWORD *v28;
  int v29;
  const std::string::value_type *v30;
  size_t v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  int v37;
  std::string *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  char *v50;
  std::__shared_weak_count *v51;
  char *v52;
  std::string *v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  std::ios_base *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::mutex *v85;
  const void **v86;
  std::string v87;
  std::__shared_weak_count *v88[2];
  char *v89;
  std::__shared_weak_count *v90;
  _QWORD v91[9];
  char v92;
  char *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  _QWORD v98[8];
  __int128 __p;
  __int128 v100;
  int v101;
  uint64_t v102[19];
  _BYTE v103[24];
  _BYTE *v104;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v93 = 0;
  v94 = 0;
  v85 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  v6 = (uint64_t **)(a1 + 216);
  v7 = *(_QWORD *)(a1 + 216);
  if (!v7)
    goto LABEL_40;
  v8 = *((_BYTE *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t **)(a1 + 216);
  v12 = *(uint64_t ***)(a1 + 216);
  do
  {
    while (1)
    {
      v13 = *((char *)v12 + 55);
      v14 = v13 >= 0 ? (uint64_t *)(v12 + 4) : v12[4];
      v15 = v13 >= 0 ? *((unsigned __int8 *)v12 + 55) : (size_t)v12[5];
      v16 = v10 >= v15 ? v15 : v10;
      v17 = memcmp(v14, v9, v16);
      if (v17)
        break;
      if (v15 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v12;
      v12 = (uint64_t **)*v12;
      if (!v12)
        goto LABEL_26;
    }
    if ((v17 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v12 = (uint64_t **)v12[1];
  }
  while (v12);
LABEL_26:
  if (v11 == v6)
    goto LABEL_40;
  v20 = v11[4];
  v19 = (uint64_t *)(v11 + 4);
  v18 = v20;
  v21 = *((char *)v19 + 23);
  if (v21 >= 0)
    v22 = v19;
  else
    v22 = v18;
  if (v21 >= 0)
    v23 = *((unsigned __int8 *)v19 + 23);
  else
    v23 = v19[1];
  if (v23 >= v10)
    v24 = v10;
  else
    v24 = v23;
  v25 = memcmp(v9, v22, v24);
  if (v25)
  {
    if ((v25 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_40:
    v86 = a2;
    v26 = operator new(0x20uLL);
    v26[1] = 0;
    v27 = v26 + 1;
    v26[2] = 0;
    *v26 = &off_1E2523030;
    *((_BYTE *)v26 + 24) = 0;
    v93 = (char *)(v26 + 3);
    v94 = (std::__shared_weak_count *)v26;
    v28 = (_QWORD *)(a1 + 216);
    if (v7)
    {
      v29 = *((char *)v86 + 23);
      if (v29 >= 0)
        v30 = (const std::string::value_type *)v86;
      else
        v30 = (const std::string::value_type *)*v86;
      if (v29 >= 0)
        v31 = *((unsigned __int8 *)v86 + 23);
      else
        v31 = (size_t)v86[1];
      while (1)
      {
        v28 = (_QWORD *)v7;
        v32 = *(char *)(v7 + 55);
        if (v32 >= 0)
          v33 = (const void *)(v7 + 32);
        else
          v33 = *(const void **)(v7 + 32);
        if (v32 >= 0)
          v34 = *(unsigned __int8 *)(v7 + 55);
        else
          v34 = *(_QWORD *)(v7 + 40);
        if (v34 >= v31)
          v35 = v31;
        else
          v35 = v34;
        v36 = memcmp(v30, v33, v35);
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_47;
LABEL_61:
          v37 = memcmp(v33, v30, v35);
          if (v37)
          {
            if ((v37 & 0x80000000) == 0)
            {
              v78 = v28;
              goto LABEL_73;
            }
          }
          else if (v34 >= v31)
          {
            v78 = v28;
            goto LABEL_73;
          }
          v7 = v28[1];
          if (!v7)
          {
            v6 = (uint64_t **)(v28 + 1);
            break;
          }
        }
        else
        {
          if (v31 >= v34)
            goto LABEL_61;
LABEL_47:
          v7 = *v28;
          v6 = (uint64_t **)v28;
          if (!*v28)
            break;
        }
      }
    }
    v78 = operator new(0x48uLL);
    v38 = (std::string *)(v78 + 4);
    if (*((char *)v86 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)*v86, (std::string::size_type)v86[1]);
    }
    else
    {
      *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)v86;
      v78[6] = v86[2];
    }
    v78[7] = 0;
    v78[8] = 0;
    *v78 = 0;
    v78[1] = 0;
    v78[2] = v28;
    *v6 = v78;
    v39 = **(_QWORD **)(a1 + 208);
    v40 = v78;
    if (v39)
    {
      *(_QWORD *)(a1 + 208) = v39;
      v40 = *v6;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), v40);
    ++*(_QWORD *)(a1 + 224);
    do
LABEL_73:
      v41 = __ldxr(v27);
    while (__stxr(v41 + 1, v27));
    v42 = (std::__shared_weak_count *)v78[8];
    v78[7] = v26 + 3;
    v78[8] = v26;
    v43 = (uint64_t)v86;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    std::mutex::unlock(v85);
    AMSCore::ServiceProvider<AMSCore::ISchedulingProvider>::getDefault(&v97);
    v46 = v97;
    if (*((char *)v86 + 23) < 0)
      std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)*v86, (std::string::size_type)v86[1]);
    else
      v87 = *(std::string *)v86;
    v47 = *(std::__shared_weak_count **)(a1 + 16);
    v88[0] = *(std::__shared_weak_count **)(a1 + 8);
    v88[1] = v47;
    if (v47)
    {
      p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
      do
        v49 = __ldxr(p_shared_weak_owners);
      while (__stxr(v49 + 1, p_shared_weak_owners));
    }
    v50 = v93;
    v51 = v94;
    v89 = v93;
    v90 = v94;
    v93 = 0;
    v94 = 0;
    v104 = 0;
    v52 = (char *)operator new(0x40uLL);
    *(_QWORD *)v52 = off_1E2521C30;
    v53 = (std::string *)(v52 + 8);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v53, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
      v50 = v89;
      v51 = v90;
    }
    else
    {
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
      *((_QWORD *)v52 + 3) = *((_QWORD *)&v87.__r_.__value_.__l + 2);
    }
    *((_OWORD *)v52 + 2) = *(_OWORD *)v88;
    v88[0] = 0;
    v88[1] = 0;
    *((_QWORD *)v52 + 6) = v50;
    *((_QWORD *)v52 + 7) = v51;
    v89 = 0;
    v90 = 0;
    v104 = v52;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v46 + 24))(v91, v46, a3, v103);
    v54 = v104;
    if (v104 == v103)
    {
      v55 = 4;
      v54 = v103;
LABEL_92:
      (*(void (**)(void))(*v54 + 8 * v55))();
    }
    else if (v104)
    {
      v55 = 5;
      goto LABEL_92;
    }
    v56 = v90;
    if (v90)
    {
      v57 = (unint64_t *)&v90->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v88[1])
      std::__shared_weak_count::__release_weak(v88[1]);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v87.__r_.__value_.__l.__data_);
      v59 = (std::__shared_weak_count *)v98[0];
      if (!v98[0])
        goto LABEL_107;
    }
    else
    {
      v59 = (std::__shared_weak_count *)v98[0];
      if (!v98[0])
        goto LABEL_107;
    }
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (v61)
    {
LABEL_107:
      if (!v92)
        goto LABEL_108;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      if (!v92)
      {
LABEL_108:
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v95);
        v62 = v95;
        if (*(int *)(v95 + 8) <= 4)
        {
          v63 = MEMORY[0x1E0DE4FE0];
          v64 = MEMORY[0x1E0DE4FE0] + 64;
          v65 = (uint64_t *)MEMORY[0x1E0DE4F60];
          v66 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
          v67 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
          v102[0] = MEMORY[0x1E0DE4FE0] + 64;
          v97 = v66;
          *(_QWORD *)((char *)&v98[-1] + *(_QWORD *)(v66 - 24)) = v67;
          v68 = (std::ios_base *)((char *)&v98[-1] + *(_QWORD *)(v97 - 24));
          std::ios_base::init(v68, v98);
          v68[1].__vftable = 0;
          v68[1].__fmtflags_ = -1;
          v97 = v63 + 24;
          v102[0] = v64;
          std::streambuf::basic_streambuf();
          v69 = MEMORY[0x1E0DE4FB8];
          v98[0] = MEMORY[0x1E0DE4FB8] + 16;
          __p = 0u;
          v100 = 0u;
          v101 = 16;
          v70 = *(_QWORD *)(v97 - 24);
          if ((v71 & 1) == 0
          {
            v43 = (uint64_t)v86;
          }
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v97, (uint64_t)"failed to schedule flush for topic: ", 36);
          v72 = *(char *)(v43 + 23);
          if (v72 >= 0)
            v73 = v43;
          else
            v73 = *(_QWORD *)v43;
          if (v72 >= 0)
            v74 = *(unsigned __int8 *)(v43 + 23);
          else
            v74 = *(_QWORD *)(v43 + 8);
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v97, v73, v74);
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v97, (uint64_t)" error: ", 8);
          AMSCore::operator<<(&v97, (uint64_t)v91);
          v75 = v98[5];
          v76 = (char *)&v98[-1] + *(_QWORD *)(v97 - 24);
          if ((v76[32] & 5) != 0)
          {
            v77 = -1;
          }
          else
          {
            (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v76 + 5) + 32))(&rep, *((_QWORD *)v76 + 5), 0, 1, 16);
            v77 = v109;
          }
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v106 = 4;
          v107 = v75;
          v108 = v77;
          (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v62 + 16) + 16))(*(_QWORD *)(v62 + 16), "metrics", 7, &rep);
          v97 = *v65;
          *(_QWORD *)((char *)&v98[-1] + *(_QWORD *)(v97 - 24)) = v65[3];
          v98[0] = v69 + 16;
          if (SBYTE7(v100) < 0)
            operator delete((void *)__p);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D789B58](v102);
        }
        v79 = v96;
        if (v96)
        {
          v80 = (unint64_t *)&v96->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        if (!v92)
          (*(void (**)(_QWORD *))v91[0])(v91);
      }
    }
    v82 = v94;
    if (v94)
    {
      v83 = (unint64_t *)&v94->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
  }
  else
  {
    if (v10 < v23)
      goto LABEL_40;
LABEL_38:
    std::mutex::unlock(v85);
  }
}

void sub_18CCB87B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[224])
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 72));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_1E2521C30;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_1E2521C30;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
    {
LABEL_7:
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)(a1 + 8));
      JUMPOUT(0x18D789BDCLL);
    }
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = operator new(0x40uLL);
  *v2 = off_1E2521C30;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  v4 = *(_QWORD *)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  v2[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a1 + 56);
  v2[6] = *(_QWORD *)(a1 + 48);
  v2[7] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return v2;
}

void sub_18CCB8B58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *a2 = off_1E2521C30;
  v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a1 + 40);
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a1 + 56);
  a2[6] = *(_QWORD *)(a1 + 48);
  a2[7] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::destroy_deallocate(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 5);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 5);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  if (__p[31] < 0)
    operator delete(*((void **)__p + 1));
  operator delete(__p);
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  std::string *v10;
  uint64_t v11;
  _OWORD *v12;
  char *v13;
  char *v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::mutex *v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  _OWORD *v92;
  _BYTE *v93;
  char *v94;
  std::runtime_error *v95;
  std::__shared_weak_count *v96;
  std::string *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t *v100;
  std::string v101;
  uint64_t v102;
  std::__shared_weak_count *v103;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD **)(a1 + 32);
      if (!v5)
      {
LABEL_127:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v91 = __ldaxr(p_shared_owners);
        while (__stlxr(v91 - 1, p_shared_owners));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      if (*(char *)(a1 + 31) < 0)
        std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
      else
        v101 = *(std::string *)(a1 + 8);
      v98 = *(_OWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      v6 = (char *)operator new(0x268uLL);
      v7 = (unint64_t)v6;
      v92 = v6 + 296;
      v93 = v6 + 608;
      *(_QWORD *)v6 = AMSCore::MetricsProvider::delayedFlushCallback;
      *((_QWORD *)v6 + 1) = AMSCore::MetricsProvider::delayedFlushCallback;
      v8 = v6 + 320;
      v9 = v6 + 400;
      v97 = (std::string *)(v6 + 432);
      v10 = (std::string *)(v6 + 456);
      *((_QWORD *)v6 + 71) = v5;
      *((std::string *)v6 + 20) = v101;
      v11 = (uint64_t)(v6 + 480);
      v12 = v6 + 504;
      v13 = v6 + 520;
      v14 = v6 + 536;
      v94 = v6 + 552;
      v95 = (std::runtime_error *)(v6 + 240);
      v99 = (uint64_t)(v6 + 16);
      v100 = (uint64_t *)(v6 + 64);
      memset(&v101, 0, sizeof(v101));
      do
        v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
      while (__stlxr(v15 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
      *(_WORD *)(v6 + 17) = 0;
      *((_QWORD *)v6 + 3) = 0;
      *((_QWORD *)v6 + 7) = 0;
      std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(&v102, v99);
      v16 = (std::__shared_weak_count *)v5[2];
      if (!v16 || (v96 = v103, (v17 = std::__shared_weak_count::lock(v16)) == 0))
        std::__throw_bad_weak_ptr[abi:fe180100]();
      *(_QWORD *)(v7 + 536) = v5[7];
      *(_QWORD *)(v7 + 544) = v17;
      *v100 = 0;
      v100[1] = 0;
      if (*(char *)(v7 + 503) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v7 + 480), *(_QWORD *)(v7 + 488));
      }
      else
      {
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
        v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
      }
      *(_QWORD *)(v7 + 400) = v5[3];
      v18 = v5[4];
      *(_QWORD *)(v7 + 408) = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      *(_QWORD *)(v7 + 416) = v5[5];
      v21 = v5[6];
      *(_QWORD *)(v7 + 424) = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      *v12 = v98;
      *(_QWORD *)(v7 + 520) = v5[12];
      v24 = v5[13];
      *(_QWORD *)(v7 + 528) = v24;
      if (v24)
      {
        v25 = (unint64_t *)(v24 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = v5[11];
      if (!v27)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t, char *, std::string *, char *, _OWORD *, char *))(*(_QWORD *)v27 + 48))(v27, v14, v10, v9, v12, v13);
      v28 = *(_OWORD *)(v7 + 320);
      *(_OWORD *)(v7 + 576) = v28;
      *v8 = 0;
      v8[1] = 0;
      if (!atomic_load((unint64_t *)(v28 + 96)))
      {
        *v93 = 0;
        v30 = (unint64_t *)(*(_QWORD *)(v7 + 576) + 96);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v7, v30));
        if (!v31)
        {
LABEL_120:
          if (v96)
          {
            v88 = (unint64_t *)&v96->__shared_owners_;
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
          goto LABEL_127;
        }
      }
      v32 = *(_QWORD *)(v7 + 576);
      if (!*(_BYTE *)(v32 + 88))
        goto LABEL_136;
      v33 = *(_BYTE *)(v32 + 80);
      if (!v33)
      {
        std::runtime_error::runtime_error(v95, (const std::runtime_error *)(v32 + 8));
        *(_OWORD *)(v7 + 256) = *(_OWORD *)(v32 + 24);
        *(_QWORD *)(v7 + 240) = off_1E2521330;
        v34 = (_QWORD *)(v32 + 48);
        v35 = *(_QWORD *)(v32 + 48);
        v36 = v7 + 280;
        *(_QWORD *)(v7 + 272) = *(_QWORD *)(v32 + 40);
        *(_QWORD *)(v7 + 280) = v35;
        v37 = *(_QWORD *)(v32 + 56);
        *(_QWORD *)(v7 + 288) = v37;
        if (v37)
        {
          *(_QWORD *)(v35 + 16) = v36;
          *(_QWORD *)(v32 + 40) = v34;
          *v34 = 0;
          *(_QWORD *)(v32 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 272) = v36;
        }
        v38 = *(_QWORD *)(v7 + 576);
        *v92 = *(_OWORD *)(v38 + 64);
        *(_QWORD *)(v38 + 64) = 0;
        *(_QWORD *)(v38 + 72) = 0;
      }
      *(_BYTE *)(v7 + 312) = v33;
      v39 = *(_QWORD *)(v7 + 584);
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          v42 = *(std::__shared_weak_count **)(v7 + 584);
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v43 = *(std::__shared_weak_count **)(v7 + 328);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = *(std::__shared_weak_count **)(v7 + 528);
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = *(std::__shared_weak_count **)(v7 + 512);
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = *(std::__shared_weak_count **)(v7 + 424);
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = *(std::__shared_weak_count **)(v7 + 408);
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (*(char *)(v7 + 479) < 0)
        operator delete(v10->__r_.__value_.__l.__data_);
      v58 = *(std::__shared_weak_count **)(v7 + 544);
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = *(std::__shared_weak_count **)(v7 + 72);
      if (!v61)
        goto LABEL_139;
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
        if (*(_BYTE *)(v7 + 312))
        {
LABEL_76:
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v102);
          AMSCore::Logger::log<char [22],std::string>(v102, v11);
          v64 = v103;
          if (v103)
          {
            v65 = (unint64_t *)&v103->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v67 = (std::mutex *)(*(_QWORD *)(v7 + 568) + 144);
          std::mutex::lock(v67);
          v68 = *(_QWORD *)(v7 + 568);
          v69 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v68 + 208, (const void **)v11);
          if ((uint64_t *)(v68 + 216) != v69)
          {
            std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase((_QWORD *)(v68 + 208), (uint64_t)v69);
            v68 = *(_QWORD *)(v7 + 568);
          }
          std::mutex::unlock(v67);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v68 + 56) + 64))(*(_QWORD *)(v68 + 56), v11);
          v70 = *(unsigned __int8 *)(v7 + 392);
          if (!*(_BYTE *)(v7 + 392) || !*(_QWORD *)(v7 + 320))
          {
LABEL_117:
            if (v70)
            {
              if (*(_BYTE *)(v7 + 312))
              {
LABEL_119:
                *(_BYTE *)(v7 + 18) = 1;
                *(_QWORD *)(v7 + 64) = v99;
                *(_QWORD *)v7 = 0;
                AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v100);
                goto LABEL_120;
              }
            }
            else
            {
              (*(void (**)(_QWORD *))*v8)(v8);
              if (*(_BYTE *)(v7 + 312))
                goto LABEL_119;
            }
            ((void (*)(std::runtime_error *))v95->~runtime_error)(v95);
            goto LABEL_119;
          }
          v71 = *(_QWORD **)(*(_QWORD *)(v7 + 568) + 96);
          if (*(char *)(v7 + 503) < 0)
          {
            std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)(v7 + 480), *(_QWORD *)(v7 + 488));
          }
          else
          {
            *(_OWORD *)&v97->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
            v97->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
          }
          AMSCore::MetricsEventModifierProvider::getOverrideForTopic(v94, v71, (uint64_t)v97);
          v75 = *(_OWORD *)v94;
          *(_OWORD *)(v7 + 592) = *(_OWORD *)v94;
          *(_QWORD *)v94 = 0;
          *((_QWORD *)v94 + 1) = 0;
          if (!atomic_load((unint64_t *)(v75 + 192)))
          {
            *v93 = 1;
            v77 = (unint64_t *)(*(_QWORD *)(v7 + 592) + 192);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v7, v77));
            if (!v78)
              goto LABEL_120;
          }
          v79 = *(_QWORD *)(v7 + 592);
          if (*(_BYTE *)(v79 + 184))
          {
            *(_OWORD *)v100 = *(_OWORD *)(v79 + 8);
            *(_BYTE *)(v7 + 80) = 0;
            *(_BYTE *)(v7 + 232) = 0;
            std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(v7 + 80, (__int128 *)(v79 + 24));
            v80 = *(_QWORD *)(v7 + 600);
            if (v80)
            {
              v81 = (unint64_t *)(v80 + 8);
              do
                v82 = __ldaxr(v81);
              while (__stlxr(v82 - 1, v81));
              if (!v82)
              {
                v83 = *(std::__shared_weak_count **)(v7 + 600);
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            v84 = *(std::__shared_weak_count **)(v7 + 560);
            if (v84)
            {
              v85 = (unint64_t *)&v84->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            if (*(char *)(v7 + 455) < 0)
              operator delete(v97->__r_.__value_.__l.__data_);
            if (*(_BYTE *)(v7 + 72))
              v87 = *v100;
            else
              v87 = 60000;
            AMSCore::MetricsProvider::startFlushTaskForTopic(*(_QWORD *)(v7 + 568), (const void **)v11, v87);
            if (*(_BYTE *)(v7 + 232))
              AMSCore::URL::~URL((AMSCore::URL *)(v7 + 80));
            v70 = *(unsigned __int8 *)(v7 + 392);
            goto LABEL_117;
          }
LABEL_136:
          __break(1u);
          return;
        }
      }
      else
      {
LABEL_139:
        if (*(_BYTE *)(v7 + 312))
          goto LABEL_76;
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v102);
      AMSCore::Logger::log<char [35],std::string,char [9],AMSCore::Error>(v102, v11, (uint64_t)v95);
      v72 = v103;
      if (v103)
      {
        v73 = (unint64_t *)&v103->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      goto LABEL_76;
    }
  }
}

void sub_18CCB9554(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void (***a12)(_QWORD), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void (***v26)(_QWORD);

  if (!*(_BYTE *)(v25 + 392))
    (**v26)(v26);
  if (!*(_BYTE *)(v25 + 312))
    (**a12)(a12);
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore15MetricsProvider22startFlushTaskForTopicERKNSt3__112basic_stringIcNS1_11char_traitsIcEEN"
                     "S1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore15MetricsProvider22startFlushTaskForTopicERKNSt3__112basic_stringIcNS1_11char_"
                                "traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore15MetricsProvider22startFlushTaskForTopicERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore15MetricsProvider22startFlushTaskForTopicERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::target_type()
{
}

void AMSCore::MetricsProvider::delayedFlushCallback(unint64_t a1)
{
  _QWORD *v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::mutex *v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v2 = (_QWORD *)(a1 + 64);
  v3 = (void (***)(_QWORD))(a1 + 240);
  v4 = (void (***)(_QWORD))(a1 + 320);
  v5 = (std::string *)(a1 + 432);
  v6 = a1 + 480;
  if (*(_BYTE *)(a1 + 608))
    goto LABEL_2;
  v17 = *(_QWORD *)(a1 + 576);
  if (!*(_BYTE *)(v17 + 88))
  {
LABEL_99:
    __break(1u);
    return;
  }
  v18 = *(_BYTE *)(v17 + 80);
  if (!v18)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 240), (const std::runtime_error *)(v17 + 8));
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(v17 + 24);
    *(_QWORD *)(a1 + 240) = off_1E2521330;
    v19 = (_QWORD *)(v17 + 48);
    v20 = *(_QWORD *)(v17 + 48);
    v21 = a1 + 280;
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(v17 + 40);
    *(_QWORD *)(a1 + 280) = v20;
    v22 = *(_QWORD *)(v17 + 56);
    *(_QWORD *)(a1 + 288) = v22;
    if (v22)
    {
      *(_QWORD *)(v20 + 16) = v21;
      *(_QWORD *)(v17 + 40) = v19;
      *v19 = 0;
      *(_QWORD *)(v17 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 272) = v21;
    }
    v23 = *(_QWORD *)(a1 + 576);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(v23 + 64);
    *(_QWORD *)(v23 + 64) = 0;
    *(_QWORD *)(v23 + 72) = 0;
  }
  *(_BYTE *)(a1 + 312) = v18;
  v24 = *(_QWORD *)(a1 + 584);
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      v27 = *(std::__shared_weak_count **)(a1 + 584);
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v28 = *(std::__shared_weak_count **)(a1 + 328);
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(std::__shared_weak_count **)(a1 + 528);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(std::__shared_weak_count **)(a1 + 512);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(std::__shared_weak_count **)(a1 + 424);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)(a1 + 408);
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if ((*(char *)(a1 + 479) & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_63;
    }
  }
  if (*(char *)(a1 + 479) < 0)
LABEL_63:
    operator delete(*(void **)(a1 + 456));
LABEL_64:
  v43 = *(std::__shared_weak_count **)(a1 + 544);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v46)
    goto LABEL_102;
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    if (*(_BYTE *)(a1 + 312))
      goto LABEL_74;
  }
  else
  {
LABEL_102:
    if (*(_BYTE *)(a1 + 312))
      goto LABEL_74;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v63);
  AMSCore::Logger::log<char [35],std::string,char [9],AMSCore::Error>(v63, v6, (uint64_t)v3);
  v56 = v64;
  if (v64)
  {
    v57 = (unint64_t *)&v64->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_74:
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v63);
  AMSCore::Logger::log<char [22],std::string>(v63, v6);
  v49 = v64;
  if (v64)
  {
    v50 = (unint64_t *)&v64->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (std::mutex *)(*(_QWORD *)(a1 + 568) + 144);
  std::mutex::lock(v52);
  v53 = *(_QWORD *)(a1 + 568);
  v54 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v53 + 208, (const void **)v6);
  if ((uint64_t *)(v53 + 216) != v54)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase((_QWORD *)(v53 + 208), (uint64_t)v54);
    v53 = *(_QWORD *)(a1 + 568);
  }
  std::mutex::unlock(v52);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v53 + 56) + 64))(*(_QWORD *)(v53 + 56), v6);
  v16 = *(unsigned __int8 *)(a1 + 392);
  if (!*(_BYTE *)(a1 + 392) || !*(_QWORD *)(a1 + 320))
  {
LABEL_20:
    if (v16)
    {
      if (*(_BYTE *)(a1 + 312))
      {
LABEL_22:
        *(_BYTE *)(a1 + 18) = 1;
        *(_QWORD *)(a1 + 64) = a1 + 16;
        *(_QWORD *)a1 = 0;
        AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v2);
        return;
      }
    }
    else
    {
      (**v4)(v4);
      if (*(_BYTE *)(a1 + 312))
        goto LABEL_22;
    }
    (**v3)(v3);
    goto LABEL_22;
  }
  v55 = *(_QWORD **)(*(_QWORD *)(a1 + 568) + 96);
  if (*(char *)(a1 + 503) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a1 + 480), *(_QWORD *)(a1 + 488));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
  }
  AMSCore::MetricsEventModifierProvider::getOverrideForTopic((_OWORD *)(a1 + 552), v55, (uint64_t)v5);
  v59 = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a1 + 592) = v59;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  if (atomic_load((unint64_t *)(v59 + 192)))
    goto LABEL_2;
  *(_BYTE *)(a1 + 608) = 1;
  v61 = (unint64_t *)(*(_QWORD *)(a1 + 592) + 192);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(a1, v61));
  if (v62)
  {
LABEL_2:
    v7 = *(_QWORD *)(a1 + 592);
    if (*(_BYTE *)(v7 + 184))
    {
      *(_OWORD *)v2 = *(_OWORD *)(v7 + 8);
      *(_BYTE *)(a1 + 80) = 0;
      *(_BYTE *)(a1 + 232) = 0;
      std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(a1 + 80, (__int128 *)(v7 + 24));
      v8 = *(_QWORD *)(a1 + 600);
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          v11 = *(std::__shared_weak_count **)(a1 + 600);
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v12 = *(std::__shared_weak_count **)(a1 + 560);
      if (!v12)
        goto LABEL_12;
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if ((*(char *)(a1 + 455) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else
      {
LABEL_12:
        if ((*(char *)(a1 + 455) & 0x80000000) == 0)
        {
LABEL_14:
          if (*(_BYTE *)(a1 + 72))
            v15 = *(_QWORD *)(a1 + 64);
          else
            v15 = 60000;
          AMSCore::MetricsProvider::startFlushTaskForTopic(*(_QWORD *)(a1 + 568), (const void **)v6, v15);
          if (*(_BYTE *)(a1 + 232))
            AMSCore::URL::~URL((AMSCore::URL *)(a1 + 80));
          v16 = *(unsigned __int8 *)(a1 + 392);
          goto LABEL_20;
        }
      }
      operator delete(v5->__r_.__value_.__l.__data_);
      goto LABEL_14;
    }
    goto LABEL_99;
  }
}

void sub_18CCB9CF0(void *a1)
{
  uint64_t v1;
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);

  if (!*(_BYTE *)(v1 + 392))
    (**v3)(v3);
  if (!*(_BYTE *)(v1 + 312))
    (**v2)(v2);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsProvider::delayedFlushCallback(char *__p)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;

  v2 = (void (***)(_QWORD))(__p + 240);
  if (*(_QWORD *)__p)
  {
    if (__p[608])
    {
      v3 = *((_QWORD *)__p + 75);
      if (v3)
      {
        v4 = (unint64_t *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 75);
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v7 = (std::__shared_weak_count *)*((_QWORD *)__p + 70);
      if (!v7)
        goto LABEL_12;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if ((__p[455] & 0x80000000) == 0)
        {
LABEL_13:
          if (__p[392])
            goto LABEL_14;
          goto LABEL_60;
        }
      }
      else
      {
LABEL_12:
        if ((__p[455] & 0x80000000) == 0)
          goto LABEL_13;
      }
      operator delete(*((void **)__p + 54));
      if (__p[392])
      {
LABEL_14:
        if (__p[312])
          goto LABEL_62;
LABEL_61:
        (**v2)(v2);
        goto LABEL_62;
      }
LABEL_60:
      (**((void (***)(char *))__p + 40))(__p + 320);
      if (__p[312])
        goto LABEL_62;
      goto LABEL_61;
    }
    v10 = *((_QWORD *)__p + 73);
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 73);
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)__p + 41);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 66);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 64);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 53);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 51);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (__p[479] < 0)
      operator delete(*((void **)__p + 57));
    v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 68);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)__p + 9);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
LABEL_62:
  v35 = (char *)*((_QWORD *)__p + 7);
  if (v35 == __p + 32)
  {
    v36 = 4;
    v35 = __p + 32;
  }
  else
  {
    if (!v35)
      goto LABEL_67;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
  do
  {
LABEL_67:
    v37 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v38)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (__p[503] < 0)
    operator delete(*((void **)__p + 60));
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [35],std::string,char [9],AMSCore::Error>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[8];
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v5 = result;
    v6 = MEMORY[0x1E0DE4FE0];
    v7 = MEMORY[0x1E0DE4FE0] + 64;
    v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v26[0] = MEMORY[0x1E0DE4FE0] + 64;
    v21 = v9;
    *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v9 - 24)) = v10;
    v11 = (std::ios_base *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24));
    std::ios_base::init(v11, v22);
    v11[1].__vftable = 0;
    v11[1].__fmtflags_ = -1;
    v21 = v6 + 24;
    v26[0] = v7;
    std::streambuf::basic_streambuf();
    v12 = MEMORY[0x1E0DE4FB8];
    v22[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v24 = 0u;
    v25 = 16;
    v13 = *(_QWORD *)(v21 - 24);
    if ((v14 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, (uint64_t)"failed to flush events for topic: ", 34);
    v15 = *(char *)(a2 + 23);
    if (v15 >= 0)
      v16 = a2;
    else
      v16 = *(_QWORD *)a2;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a2 + 23);
    else
      v17 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, v16, v17);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, (uint64_t)" error: ", 8);
    AMSCore::operator<<(&v21, a3);
    v18 = v22[5];
    v19 = (char *)&v22[-1] + *(_QWORD *)(v21 - 24);
    if ((v19[32] & 5) != 0)
    {
      v20 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v19 + 5) + 32))(&rep, *((_QWORD *)v19 + 5), 0, 1, 16);
      v20 = v31;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v28 = 4;
    v29 = v18;
    v30 = v20;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v5 + 16) + 16))(*(_QWORD *)(v5 + 16), "metrics", 7, &rep);
    v21 = *v8;
    *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24)) = v8[3];
    v22[0] = v12 + 16;
    if (SBYTE7(v24) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v26);
  }
  return result;
}

void sub_18CCBA374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [22],std::string>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v24[0] = MEMORY[0x1E0DE4FE0] + 64;
    v19 = v7;
    *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
    std::ios_base::init(v9, v20);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v19 = v4 + 24;
    v24[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v20[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v22 = 0u;
    v23 = 16;
    v11 = *(_QWORD *)(v19 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)"flush task finished: ", 21);
    v13 = *(char *)(a2 + 23);
    if (v13 >= 0)
      v14 = a2;
    else
      v14 = *(_QWORD *)a2;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 23);
    else
      v15 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, v14, v15);
    v16 = v20[5];
    v17 = (char *)&v20[-1] + *(_QWORD *)(v19 - 24);
    if ((v17[32] & 5) != 0)
    {
      v18 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5) + 32))(&rep, *((_QWORD *)v17 + 5), 0, 1, 16);
      v18 = v29;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v26 = 2;
    v27 = v16;
    v28 = v18;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "metrics", 7, &rep);
    v19 = *v6;
    *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v6[3];
    v20[0] = v10 + 16;
    if (SBYTE7(v22) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v24);
  }
  return result;
}

void sub_18CCBA630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [35],AMSCore::Error>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v11 = result;
    v12 = MEMORY[0x1E0DE4FE0];
    v13 = MEMORY[0x1E0DE4FE0] + 64;
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v29[0] = MEMORY[0x1E0DE4FE0] + 64;
    v24 = v14;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v14 - 24)) = v15;
    v16 = (std::ios_base *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24));
    std::ios_base::init(v16, v25);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v24 = v12 + 24;
    v29[0] = v13;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8];
    v25[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v27 = 0u;
    v28 = 16;
    v18 = *(_QWORD *)(v24 - 24);
    if ((v19 & 1) == 0
    {
    }
    v20 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)a5, v20);
    AMSCore::operator<<(&v24, a6);
    v21 = v25[5];
    v22 = (char *)&v25[-1] + *(_QWORD *)(v24 - 24);
    if ((v22[32] & 5) != 0)
    {
      v23 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(&rep, *((_QWORD *)v22 + 5), 0, 1, 16);
      v23 = v34;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v31 = a2;
    v32 = v21;
    v33 = v23;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), a3, a4, &rep);
    v24 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v25[0] = v17 + 16;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v29);
  }
  return result;
}

void sub_18CCBA8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsProvider::saveToDatabase(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  std::string *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unsigned int **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void **v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  const AMSCore::IMetricsProvider::Event *v69;
  int v70;
  int v71;
  std::runtime_error_vtbl *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  void **v84;
  void *v85;
  __int128 v86;
  uint64_t *v87;
  __int128 v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t **v93;
  _OWORD *v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  unint64_t *v115;
  unint64_t v116;
  int v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  void **v129;
  void **v130;
  void *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  void **v141;
  void **v142;
  uint64_t **v143;
  std::string *v144;
  AMSCore::MetricsEventModifier::EventModifier *v145;
  _BYTE *v146;
  void **v147;
  _OWORD *v148;
  const AMSCore::IMetricsProvider::Event **v149;
  std::string *v150;
  _QWORD *v151;
  char *v152;
  std::runtime_error *v153;
  std::runtime_error *v154;
  _QWORD *v155;
  char *v156;
  std::runtime_error v157;
  __int128 v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  _QWORD v163[9];
  char v164;
  std::runtime_error v165;
  __int128 v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  std::runtime_error v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  unsigned __int8 v177;

  v146 = a1 + 1288;
  v2 = (uint64_t)(a1 + 152);
  v148 = a1 + 440;
  v3 = (uint64_t)(a1 + 720);
  v4 = (std::string *)(a1 + 808);
  v153 = (std::runtime_error *)(a1 + 960);
  v154 = (std::runtime_error *)(a1 + 888);
  v5 = (std::string *)(a1 + 1080);
  v141 = (void **)(a1 + 1104);
  v142 = (void **)(a1 + 1056);
  v143 = (uint64_t **)(a1 + 1128);
  v144 = (std::string *)(a1 + 1080);
  v155 = a1 + 1152;
  v156 = a1 + 776;
  v150 = (std::string *)(a1 + 1032);
  v151 = a1 + 1176;
  v149 = (const AMSCore::IMetricsProvider::Event **)(a1 + 1192);
  v140 = a1 + 16;
  v145 = (AMSCore::MetricsEventModifier::EventModifier *)(a1 + 152);
  v152 = a1 + 720;
  v147 = (void **)(a1 + 808);
  if (!a1[1288])
    goto LABEL_70;
LABEL_2:
  v6 = *((_QWORD *)a1 + 159);
  if (!*(_BYTE *)(v6 + 32))
    goto LABEL_226;
  v7 = (_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v6 + 16);
  v9 = a1 + 1160;
  *((_QWORD *)a1 + 144) = *(_QWORD *)(v6 + 8);
  *((_QWORD *)a1 + 145) = v8;
  v10 = *(_QWORD *)(v6 + 24);
  *((_QWORD *)a1 + 146) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(v6 + 8) = v7;
    *v7 = 0;
    *(_QWORD *)(v6 + 24) = 0;
    v11 = *((_QWORD *)a1 + 160);
    if (!v11)
      goto LABEL_10;
  }
  else
  {
    *v155 = v9;
    v11 = *((_QWORD *)a1 + 160);
    if (!v11)
      goto LABEL_10;
  }
  v12 = (unint64_t *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 160);
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 91);
    if (!v14)
      goto LABEL_16;
    goto LABEL_11;
  }
LABEL_10:
  v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 91);
  if (!v14)
    goto LABEL_16;
LABEL_11:
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_16:
  if (a1[712])
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 560));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 66));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 63));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 60));
  AMSCore::serialize(v4, v155);
  AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &,char const(&)[27]>((_BYTE *)v3, (uint64_t)v4, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance);
  if (!a1[792])
  {
    v23 = (void **)(a1 + 744);
    *(_OWORD *)v3 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)(a1 + 744) = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
    *((_QWORD *)a1 + 95) = *((_QWORD *)&v150->__r_.__value_.__l + 2);
    v150->__r_.__value_.__r.__words[0] = 0;
    v150->__r_.__value_.__l.__size_ = 0;
    v150->__r_.__value_.__r.__words[2] = 0;
    if (!a1[880])
      goto LABEL_226;
    v24 = *((_QWORD *)a1 + 158);
    v25 = a1[1256];
    v26 = a1[1289];
    v27 = (void **)(a1 + 768);
    *((_OWORD *)a1 + 48) = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    *((_QWORD *)a1 + 98) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
    v4->__r_.__value_.__r.__words[0] = 0;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    *((_QWORD *)a1 + 99) = v25 | v24;
    a1[800] = v26;
    v28 = *((_QWORD *)a1 + 133);
    if (v28 >= *((_QWORD *)a1 + 134))
    {
      v37 = std::vector<AMSCore::IMetricsDataAccessObject::Event>::__emplace_back_slow_path<AMSCore::IMetricsDataAccessObject::Event>(v142, v3);
      v38 = a1[791];
      *((_QWORD *)a1 + 133) = v37;
      if (v38 < 0)
      {
        operator delete(*v27);
        if ((a1[767] & 0x80000000) == 0)
        {
LABEL_35:
          v39 = 0;
          if (a1[743] < 0)
          {
            operator delete(*(void **)v3);
            v39 = 0;
          }
          goto LABEL_49;
        }
      }
      else if ((a1[767] & 0x80000000) == 0)
      {
        goto LABEL_35;
      }
    }
    else
    {
      v29 = *(_OWORD *)v3;
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v28 = v29;
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v30 = *(_OWORD *)v23;
      *(_QWORD *)(v28 + 40) = *((_QWORD *)a1 + 95);
      *(_OWORD *)(v28 + 24) = v30;
      *((_QWORD *)a1 + 94) = 0;
      *((_QWORD *)a1 + 95) = 0;
      *v23 = 0;
      v31 = *(_OWORD *)v27;
      *(_QWORD *)(v28 + 64) = *((_QWORD *)a1 + 98);
      *(_OWORD *)(v28 + 48) = v31;
      *((_QWORD *)a1 + 97) = 0;
      *((_QWORD *)a1 + 98) = 0;
      *v27 = 0;
      *(_OWORD *)(v28 + 72) = *(_OWORD *)(a1 + 792);
      *((_QWORD *)a1 + 133) = v28 + 88;
      if ((a1[767] & 0x80000000) == 0)
        goto LABEL_35;
    }
    operator delete(*v23);
    goto LABEL_35;
  }
  v18 = a1 + 992;
  v19 = (unsigned int **)(a1 + 760);
  v20 = a1 + 1000;
  std::runtime_error::runtime_error(v153, (const std::runtime_error *)v3);
  *((_OWORD *)a1 + 61) = *((_OWORD *)a1 + 46);
  *((_QWORD *)a1 + 120) = off_1E2521330;
  *((_QWORD *)a1 + 124) = *((_QWORD *)a1 + 94);
  v21 = *((_QWORD *)a1 + 95);
  *((_QWORD *)a1 + 125) = v21;
  v22 = *((_QWORD *)a1 + 96);
  *((_QWORD *)a1 + 126) = v22;
  if (v22)
  {
    *(_QWORD *)(v21 + 16) = v20;
    *((_QWORD *)a1 + 94) = v19;
    *v19 = 0;
    *((_QWORD *)a1 + 96) = 0;
  }
  else
  {
    *v18 = v20;
  }
  *((_OWORD *)v156 + 15) = *(_OWORD *)v156;
  v32 = v156 + 240;
  v33 = a1 + 920;
  v34 = a1 + 928;
  *(_QWORD *)v156 = 0;
  *((_QWORD *)v156 + 1) = 0;
  std::runtime_error::runtime_error(v154, v153);
  *(_OWORD *)(a1 + 904) = *((_OWORD *)a1 + 61);
  *((_QWORD *)a1 + 111) = off_1E2521330;
  *((_QWORD *)a1 + 115) = *((_QWORD *)a1 + 124);
  v35 = *((_QWORD *)a1 + 125);
  *((_QWORD *)a1 + 116) = v35;
  v36 = *((_QWORD *)a1 + 126);
  *((_QWORD *)a1 + 117) = v36;
  if (v36)
  {
    *(_QWORD *)(v35 + 16) = v34;
    v35 = 0;
    *v18 = v20;
    *v20 = 0;
    *((_QWORD *)a1 + 126) = 0;
  }
  else
  {
    *v33 = v34;
  }
  v2 = (uint64_t)v145;
  *((_OWORD *)a1 + 59) = *v32;
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v156 + 31) = 0;
  *((_QWORD *)a1 + 120) = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 992), (unsigned int *)v35);
  MEMORY[0x18D7898AC](v153);
  if (a1[104])
  {
    if (a1[96])
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)a1 + 4));
    else
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    a1[104] = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v154);
  v40 = *((_QWORD *)a1 + 116);
  *((_QWORD *)a1 + 8) = v40;
  v41 = a1 + 64;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 904);
  *((_QWORD *)a1 + 3) = off_1E2521330;
  *((_QWORD *)a1 + 7) = *((_QWORD *)a1 + 115);
  v42 = *((_QWORD *)a1 + 117);
  *((_QWORD *)a1 + 9) = v42;
  if (v42)
  {
    *(_QWORD *)(v40 + 16) = v41;
    v40 = 0;
    *v33 = v34;
    *v34 = 0;
    *((_QWORD *)a1 + 117) = 0;
  }
  else
  {
    *((_QWORD *)a1 + 7) = v41;
  }
  v5 = v144;
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 59);
  *((_QWORD *)a1 + 118) = 0;
  *((_QWORD *)a1 + 119) = 0;
  a1[96] = 0;
  a1[104] = 1;
  *((_QWORD *)a1 + 111) = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 920), (unsigned int *)v40);
  MEMORY[0x18D7898AC](v154);
  v39 = 3;
  v3 = (uint64_t)v152;
  if (a1[792])
  {
    *((_QWORD *)a1 + 90) = off_1E2521330;
    v43 = (std::__shared_weak_count *)*((_QWORD *)a1 + 98);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 752), *v19);
    MEMORY[0x18D7898AC](v152);
    v39 = 3;
  }
LABEL_49:
  if (a1[880])
  {
    v4 = (std::string *)v147;
    if (a1[831] < 0)
      operator delete(*v147);
  }
  else
  {
    v4 = (std::string *)v147;
    (*(void (**)(void **))*v147)(v147);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v155, *((unsigned int **)a1 + 145));
  if (a1[1055] < 0)
  {
    operator delete(v150->__r_.__value_.__l.__data_);
    if (a1[1103] < 0)
    {
LABEL_57:
      operator delete(v5->__r_.__value_.__l.__data_);
      if (a1[424])
        goto LABEL_92;
      goto LABEL_93;
    }
  }
  else if (a1[1103] < 0)
  {
    goto LABEL_57;
  }
LABEL_91:
  if (a1[424])
  {
LABEL_92:
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 272));
    goto LABEL_93;
  }
  while (1)
  {
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 30));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 27));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 24));
    v76 = (std::__shared_weak_count *)*((_QWORD *)a1 + 150);
    if (!v76)
      goto LABEL_229;
LABEL_93:
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
      if (v39 == 5)
        goto LABEL_99;
    }
    else
    {
LABEL_229:
      if (v39 == 5)
        goto LABEL_99;
    }
    if (v39)
      goto LABEL_190;
LABEL_99:
    v79 = (uint64_t *)(*((_QWORD *)a1 + 154) + 8);
    if (v79 == *((uint64_t **)a1 + 153))
      break;
    *((_QWORD *)a1 + 154) = v79;
    v46 = *v79;
    *((_QWORD *)a1 + 149) = *v79;
    if (v46)
    {
      v47 = (_QWORD *)operator new();
      v48 = *((_QWORD *)a1 + 151);
      v49 = *v79;
      v47[1] = 0;
      v50 = v47 + 1;
      *v47 = &off_1E25231F0;
      v47[2] = 0;
      v47[3] = v49;
      *((_QWORD *)a1 + 150) = v47;
      *v79 = 0;
      v51 = *(_QWORD **)(v48 + 96);
      *((_QWORD *)a1 + 147) = v46;
      *((_QWORD *)a1 + 148) = v47;
      do
        v52 = __ldxr(v50);
      while (__stxr(v52 + 1, v50));
      v53 = (uint64_t)v151;
    }
    else
    {
      v54 = *((_QWORD *)a1 + 151);
      *((_QWORD *)a1 + 150) = 0;
      *v79 = 0;
      v51 = *(_QWORD **)(v54 + 96);
      v53 = (uint64_t)v151;
      *v151 = 0;
      v151[1] = 0;
    }
    AMSCore::MetricsEventModifierProvider::getOverrideForEvent((_OWORD *)v3, v51, v53);
    v55 = *((_OWORD *)a1 + 45);
    *((_OWORD *)v156 + 29) = v55;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if (!atomic_load((unint64_t *)(v55 + 304)))
    {
      *v146 = 0;
      v57 = (unint64_t *)(*((_QWORD *)a1 + 155) + 304);
      do
        v58 = __ldaxr(v57);
      while (__stlxr((unint64_t)a1, v57));
      if (!v58)
        return;
    }
LABEL_70:
    AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(v2, *((_QWORD *)a1 + 155));
    v59 = *((_QWORD *)a1 + 156);
    if (!v59)
      goto LABEL_74;
    v60 = (unint64_t *)(v59 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      v65 = (std::__shared_weak_count *)*((_QWORD *)a1 + 156);
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
      v62 = (std::__shared_weak_count *)*((_QWORD *)a1 + 91);
      if (!v62)
        goto LABEL_80;
    }
    else
    {
LABEL_74:
      v62 = (std::__shared_weak_count *)*((_QWORD *)a1 + 91);
      if (!v62)
        goto LABEL_80;
    }
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
LABEL_80:
    v66 = (std::__shared_weak_count *)*((_QWORD *)a1 + 148);
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = *v149;
    AMSCore::MetricsEventModifier::MergedEventModifier::shouldDropEvent((AMSCore::MetricsEventModifier::MergedEventModifier *)v2, *v149);
    v71 = v70;
    AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v171, (uint64_t *)v69 + 9, "topic", 5uLL);
    if (!v177)
    {
LABEL_226:
      __break(1u);
      return;
    }
    v72 = v171.__vftable;
    if (!v71)
    {
      if (SHIBYTE(v171.what) < 0)
      {
        std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v171.~runtime_error, (std::string::size_type)v171.~runtime_error_0);
      }
      else
      {
        v86 = *(_OWORD *)&v171.~runtime_error;
        v5->__r_.__value_.__r.__words[2] = (std::string::size_type)v171.what;
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v86;
      }
      v87 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>((uint64_t)v69 + 72, "clientEventId");
      if (*((char *)v87 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(v150, (const std::string::value_type *)v87[7], v87[8]);
      }
      else
      {
        v88 = *(_OWORD *)(v87 + 7);
        v150->__r_.__value_.__r.__words[2] = v87[9];
        *(_OWORD *)&v150->__r_.__value_.__l.__data_ = v88;
      }
      AMSCore::MetricsEventModifier::MergedEventModifier::handleFieldModifiers((AMSCore::MetricsEventModifier::MergedEventModifier *)v2, v69);
      AMSCore::getValueByKey<BOOL,std::map<std::string,AMSCore::Any> const>((uint64_t)&v171, (uint64_t *)v69 + 9, "anonymous", 9uLL);
      if (v177)
      {
        v89 = 0;
        v90 = 0;
        v91 = 0;
        if (!LOBYTE(v171.__vftable))
          goto LABEL_124;
      }
      else
      {
        ((void (*)(std::runtime_error *))v171.~runtime_error)(&v171);
LABEL_124:
        LOBYTE(v171.__vftable) = 0;
        BYTE8(v172) = 0;
        v173 = -1;
        v174 = 7824750;
        BYTE7(v176) = 3;
        AMSCore::operator==((uint64_t)v69 + 8, (uint64_t)&v171);
        if ((v92 & 1) != 0)
        {
          v90 = 0;
          v91 = 0;
          a1[720] = 0;
          a1[744] = 0;
          *((_QWORD *)a1 + 94) = 0;
          *((_QWORD *)a1 + 95) = 0x6C61636F6CLL;
          v89 = 1;
          a1[783] = 5;
        }
        else
        {
          v90 = *((_QWORD *)v69 + 5);
          v91 = v90 & 0xFFFFFFFFFFFFFF00;
          v89 = 1;
        }
      }
      *((_QWORD *)a1 + 158) = v91;
      *((_QWORD *)a1 + 157) = v90;
      a1[1289] = v89;
      *((_QWORD *)a1 + 90) = v5;
      v93 = std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, (const void **)&v5->__r_.__value_.__l.__data_, (uint64_t)v5);
      v94 = a1 + 272;
      v95 = (uint64_t *)*((_QWORD *)a1 + 32);
      *((_BYTE *)v93 + 64) = a1[264];
      v93[7] = v95;
      std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>((uint64_t)(v93 + 9), (AMSCore::URL *)(a1 + 272));
      v96 = a1 + 192;
      v97 = *((_QWORD *)a1 + 24);
      v98 = a1 + 480;
      *v148 = *(_OWORD *)v2;
      *(_OWORD *)((char *)v148 + 12) = *(_OWORD *)(v2 + 12);
      *((_QWORD *)a1 + 59) = *((_QWORD *)a1 + 23);
      *((_QWORD *)a1 + 60) = v97;
      v99 = *((_QWORD *)a1 + 25);
      *((_QWORD *)a1 + 61) = v99;
      if (v99)
      {
        *(_QWORD *)(v97 + 16) = v98;
        *((_QWORD *)a1 + 23) = v96;
        *v96 = 0;
        *((_QWORD *)a1 + 25) = 0;
      }
      else
      {
        *((_QWORD *)a1 + 59) = v98;
      }
      v100 = a1 + 216;
      v101 = *((_QWORD *)a1 + 27);
      v102 = a1 + 504;
      *((_QWORD *)a1 + 62) = *((_QWORD *)a1 + 26);
      *((_QWORD *)a1 + 63) = v101;
      v103 = *((_QWORD *)a1 + 28);
      *((_QWORD *)a1 + 64) = v103;
      if (v103)
      {
        *(_QWORD *)(v101 + 16) = v102;
        *((_QWORD *)a1 + 26) = v100;
        *v100 = 0;
        *((_QWORD *)a1 + 28) = 0;
      }
      else
      {
        *((_QWORD *)a1 + 62) = v102;
      }
      v104 = a1 + 240;
      v105 = *((_QWORD *)a1 + 30);
      v106 = a1 + 528;
      *((_QWORD *)a1 + 65) = *((_QWORD *)a1 + 29);
      *((_QWORD *)a1 + 66) = v105;
      v107 = *((_QWORD *)a1 + 31);
      *((_QWORD *)a1 + 67) = v107;
      if (v107)
      {
        *(_QWORD *)(v105 + 16) = v106;
        *((_QWORD *)a1 + 29) = v104;
        *v104 = 0;
        *((_QWORD *)a1 + 31) = 0;
      }
      else
      {
        *((_QWORD *)a1 + 65) = v106;
      }
      *((_OWORD *)a1 + 34) = *((_OWORD *)a1 + 16);
      a1[560] = 0;
      a1[712] = 0;
      if (a1[424])
      {
        a1[584] = 0;
        if (a1[296])
        {
          *((_OWORD *)a1 + 35) = *v94;
          *((_QWORD *)a1 + 72) = *((_QWORD *)a1 + 36);
          *((_QWORD *)a1 + 35) = 0;
          *((_QWORD *)a1 + 36) = 0;
          *(_QWORD *)v94 = 0;
          a1[584] = 1;
        }
        a1[592] = 0;
        a1[616] = 0;
        if (a1[328])
        {
          *((_OWORD *)a1 + 37) = *((_OWORD *)a1 + 19);
          *((_QWORD *)a1 + 76) = *((_QWORD *)a1 + 40);
          *((_QWORD *)a1 + 39) = 0;
          *((_QWORD *)a1 + 40) = 0;
          *((_QWORD *)a1 + 38) = 0;
          a1[616] = 1;
        }
        a1[624] = 0;
        a1[648] = 0;
        if (a1[360])
        {
          *((_OWORD *)a1 + 39) = *((_OWORD *)a1 + 21);
          *((_QWORD *)a1 + 80) = *((_QWORD *)a1 + 44);
          *((_QWORD *)a1 + 43) = 0;
          *((_QWORD *)a1 + 44) = 0;
          *((_QWORD *)a1 + 42) = 0;
          a1[648] = 1;
        }
        *((_DWORD *)a1 + 164) = *((_DWORD *)a1 + 92);
        *((_QWORD *)a1 + 83) = a1 + 664;
        *((_QWORD *)a1 + 84) = a1 + 664;
        *((_QWORD *)a1 + 85) = 0;
        v108 = *((_QWORD *)a1 + 49);
        if (v108)
        {
          v110 = *((_QWORD *)a1 + 47);
          v109 = (uint64_t *)*((_QWORD *)a1 + 48);
          v111 = *v109;
          *(_QWORD *)(v111 + 8) = *(_QWORD *)(v110 + 8);
          **(_QWORD **)(v110 + 8) = v111;
          v112 = *((_QWORD *)a1 + 83);
          *(_QWORD *)(v112 + 8) = v109;
          *v109 = v112;
          *((_QWORD *)a1 + 83) = v110;
          *(_QWORD *)(v110 + 8) = a1 + 664;
          *((_QWORD *)a1 + 85) = v108;
          *((_QWORD *)a1 + 49) = 0;
        }
        *((_OWORD *)a1 + 43) = *((_OWORD *)a1 + 25);
        *((_QWORD *)a1 + 88) = *((_QWORD *)a1 + 52);
        *((_QWORD *)a1 + 51) = 0;
        *((_QWORD *)a1 + 52) = 0;
        *((_QWORD *)a1 + 50) = 0;
        a1[712] = 1;
      }
      v3 = (uint64_t)v152;
      AMSCore::IMetricsProvider::Event::takeProperties(v152, (uint64_t)v69, (uint64_t)v148);
      v113 = *((_OWORD *)a1 + 45);
      *((_OWORD *)v156 + 31) = v113;
      *(_QWORD *)v152 = 0;
      *((_QWORD *)v152 + 1) = 0;
      if (!atomic_load((unint64_t *)(v113 + 40)))
      {
        *v146 = 1;
        v115 = (unint64_t *)(*((_QWORD *)a1 + 159) + 40);
        do
          v116 = __ldaxr(v115);
        while (__stlxr((unint64_t)a1, v115));
        if (!v116)
          return;
      }
      goto LABEL_2;
    }
    v3 = (uint64_t)v152;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v152);
    AMSCore::Logger::log<char [17],std::string>(*(_QWORD *)v152, (uint64_t)v72);
    v73 = (std::__shared_weak_count *)*((_QWORD *)a1 + 91);
    v39 = 5;
    if (!v73)
      goto LABEL_91;
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    v39 = 5;
    if (v75)
      goto LABEL_91;
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
    if (a1[424])
      goto LABEL_92;
  }
  v80 = *((_QWORD *)a1 + 132);
  v81 = *((_QWORD *)a1 + 133);
  if (v80 == v81)
    goto LABEL_182;
  v82 = *(_QWORD *)(*((_QWORD *)a1 + 151) + 56);
  *((_QWORD *)a1 + 138) = v80;
  *((_QWORD *)a1 + 139) = v81;
  *((_QWORD *)a1 + 140) = *((_QWORD *)a1 + 134);
  *v142 = 0;
  v142[1] = 0;
  v142[2] = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void **))(*(_QWORD *)v82 + 16))(v163, v82, v141);
  v83 = (void **)*v141;
  if (!*v141)
    goto LABEL_155;
  v84 = (void **)*((_QWORD *)a1 + 139);
  v85 = *v141;
  if (v84 != v83)
  {
    while (1)
    {
      if (*((char *)v84 - 17) < 0)
      {
        operator delete(*(v84 - 5));
        if ((*((char *)v84 - 41) & 0x80000000) == 0)
        {
LABEL_109:
          if (*((char *)v84 - 65) < 0)
            goto LABEL_113;
          goto LABEL_106;
        }
      }
      else if ((*((char *)v84 - 41) & 0x80000000) == 0)
      {
        goto LABEL_109;
      }
      operator delete(*(v84 - 8));
      if (*((char *)v84 - 65) < 0)
LABEL_113:
        operator delete(*(v84 - 11));
LABEL_106:
      v84 -= 11;
      if (v84 == v83)
      {
        v85 = *v141;
        break;
      }
    }
  }
  *((_QWORD *)a1 + 139) = v83;
  operator delete(v85);
LABEL_155:
  AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[33]>(&v171, (uint64_t)v163, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance);
  v117 = v177;
  if (v177)
  {
    std::runtime_error::runtime_error(&v157, &v171);
    v158 = v172;
    v157.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v159 = (uint64_t *)v173;
    v160 = v174;
    v161 = v175;
    if (v175)
    {
      *(_QWORD *)(v174 + 16) = &v160;
      v173 = (uint64_t)&v174;
      v174 = 0;
      v175 = 0;
    }
    else
    {
      v159 = &v160;
    }
    v162 = v176;
    v176 = 0uLL;
    std::runtime_error::runtime_error(&v165, &v157);
    v166 = v158;
    v118 = (unsigned int *)v160;
    v165.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v167 = v159;
    v168 = v160;
    v169 = v161;
    if (v161)
    {
      *(_QWORD *)(v160 + 16) = &v168;
      v118 = 0;
      v159 = &v160;
      v160 = 0;
      v161 = 0;
    }
    else
    {
      v167 = &v168;
    }
    v170 = v162;
    v162 = 0uLL;
    v157.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v159, v118);
    MEMORY[0x18D7898AC](&v157);
    if (a1[104])
    {
      if (a1[96])
        std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)a1 + 4));
      else
        (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
      a1[104] = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v165);
    v120 = v167;
    v119 = v168;
    *((_QWORD *)a1 + 8) = v168;
    v121 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v166;
    *((_QWORD *)a1 + 3) = off_1E2521330;
    *((_QWORD *)a1 + 7) = v120;
    v122 = v169;
    *((_QWORD *)a1 + 9) = v169;
    if (v122)
    {
      *(_QWORD *)(v119 + 16) = v121;
      v119 = 0;
      v167 = &v168;
      v168 = 0;
      v169 = 0;
    }
    else
    {
      *((_QWORD *)a1 + 7) = v121;
    }
    *((_OWORD *)a1 + 5) = v170;
    v170 = 0uLL;
    a1[96] = 0;
    a1[104] = 1;
    v165.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v167, (unsigned int *)v119);
    MEMORY[0x18D7898AC](&v165);
    if (v177)
    {
      v171.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
      if (*((_QWORD *)&v176 + 1))
      {
        v124 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v173, (unsigned int *)v174);
      MEMORY[0x18D7898AC](&v171);
    }
    v39 = 3;
    if (!v164)
LABEL_180:
      (*(void (**)(_QWORD *))v163[0])(v163);
  }
  else
  {
    v39 = 0;
    if (!v164)
      goto LABEL_180;
  }
  if (!v117)
  {
LABEL_182:
    if (a1[104])
    {
      if (a1[96])
        std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)a1 + 4));
      else
        (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    }
    v126 = *((_QWORD *)a1 + 142);
    *((_QWORD *)a1 + 4) = v126;
    v127 = a1 + 32;
    *((_QWORD *)a1 + 3) = *((_QWORD *)a1 + 141);
    v128 = *((_QWORD *)a1 + 143);
    *((_QWORD *)a1 + 5) = v128;
    if (v128)
    {
      *(_QWORD *)(v126 + 16) = v127;
      *v143 = (uint64_t *)(a1 + 1136);
      *((_QWORD *)a1 + 142) = 0;
      *((_QWORD *)a1 + 143) = 0;
    }
    else
    {
      *((_QWORD *)a1 + 3) = v127;
    }
    a1[96] = 1;
    a1[104] = 1;
    v39 = 3;
  }
LABEL_190:
  v129 = (void **)*v142;
  if (*v142)
  {
    v130 = (void **)*((_QWORD *)a1 + 133);
    v131 = *v142;
    if (v130 == v129)
    {
LABEL_202:
      *((_QWORD *)a1 + 133) = v129;
      operator delete(v131);
      goto LABEL_203;
    }
    while (2)
    {
      if (*((char *)v130 - 17) < 0)
      {
        operator delete(*(v130 - 5));
        if (*((char *)v130 - 41) < 0)
          goto LABEL_199;
LABEL_196:
        if (*((char *)v130 - 65) < 0)
LABEL_200:
          operator delete(*(v130 - 11));
      }
      else
      {
        if ((*((char *)v130 - 41) & 0x80000000) == 0)
          goto LABEL_196;
LABEL_199:
        operator delete(*(v130 - 8));
        if (*((char *)v130 - 65) < 0)
          goto LABEL_200;
      }
      v130 -= 11;
      if (v130 == v129)
      {
        v131 = *v142;
        goto LABEL_202;
      }
      continue;
    }
  }
LABEL_203:
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)a1 + 142));
  if (v39 == 3)
  {
    *((_QWORD *)a1 + 19) = v140;
    *(_QWORD *)a1 = 0;
    AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v2);
    return;
  }
  v132 = (char *)*((_QWORD *)a1 + 18);
  if (v132 == a1 + 120)
  {
    v133 = 4;
    v132 = a1 + 120;
LABEL_209:
    (*(void (**)(void))(*(_QWORD *)v132 + 8 * v133))();
  }
  else if (v132)
  {
    v133 = 5;
    goto LABEL_209;
  }
  if (a1[104])
  {
    if (a1[96])
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)a1 + 4));
    else
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  }
  v134 = *((_QWORD *)a1 + 152);
  do
  {
    v135 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v136 = v135 - 1;
  }
  while (__stlxr(v136, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v136)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v134)
  {
    v137 = (_QWORD *)*((_QWORD *)a1 + 153);
    while (v137 != *((_QWORD **)a1 + 152))
    {
      v139 = *--v137;
      v138 = v139;
      *v137 = 0;
      if (v139)
        (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
    }
    operator delete(v137);
  }
  operator delete(a1);
}

void sub_18CCBBABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void (**a37)(_QWORD),uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (!a46)
    (*a37)(&a37);
  JUMPOUT(0x18CCBBB7CLL);
}

void sub_18CCBBADC()
{
  void **v0;

  std::vector<AMSCore::IMetricsDataAccessObject::Event>::~vector[abi:fe180100](v0);
  JUMPOUT(0x18CCBBB7CLL);
}

void sub_18CCBBAEC()
{
  JUMPOUT(0x18CCBBB44);
}

void sub_18CCBBAF4()
{
  JUMPOUT(0x18CCBBB58);
}

void sub_18CCBBB00()
{
  uint64_t v0;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v0);
  JUMPOUT(0x18CCBBB58);
}

void sub_18CCBBB10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, AMSCore::MetricsEventModifier::EventModifier *a19)
{
  uint64_t v19;
  void **v20;
  AMSCore::MetricsEventModifier::EventModifier *v21;
  void **v22;

  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(a19);
  if (*(char *)(v19 + 1055) < 0)
    operator delete(*v22);
  if (*(char *)(v19 + 1103) < 0)
    operator delete(*v20);
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v21);
  JUMPOUT(0x18CCBBB74);
}

void sub_18CCBBB24()
{
  JUMPOUT(0x18CCBBB7CLL);
}

void sub_18CCBBB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a22);
  JUMPOUT(0x18CCBBB74);
}

void sub_18CCBBB9C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCBB9B4);
}

void AMSCore::MetricsProvider::saveToDatabase(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)__p)
  {
    if (!__p[1288])
    {
      v17 = *((_QWORD *)__p + 156);
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 156);
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)__p + 91);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 148);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      goto LABEL_20;
    }
    v2 = *((_QWORD *)__p + 160);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 160);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 91);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (__p[712])
      AMSCore::URL::~URL((AMSCore::URL *)(__p + 560));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 66));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 63));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 60));
    if (__p[1055] < 0)
    {
      operator delete(*((void **)__p + 129));
      if ((__p[1103] & 0x80000000) == 0)
      {
LABEL_17:
        if (!__p[424])
        {
LABEL_19:
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 30));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 27));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 24));
LABEL_20:
          v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 150);
          if (v9)
          {
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          v12 = *((_QWORD *)__p + 132);
          if (!v12)
            goto LABEL_38;
          v13 = *((_QWORD *)__p + 133);
          v14 = (void *)*((_QWORD *)__p + 132);
          if (v13 == v12)
          {
LABEL_37:
            *((_QWORD *)__p + 133) = v12;
            operator delete(v14);
LABEL_38:
            std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)__p + 142));
            goto LABEL_39;
          }
          while (1)
          {
            if (*(char *)(v13 - 17) < 0)
            {
              operator delete(*(void **)(v13 - 40));
              if ((*(char *)(v13 - 41) & 0x80000000) == 0)
              {
LABEL_31:
                if (*(char *)(v13 - 65) < 0)
                  goto LABEL_35;
                goto LABEL_28;
              }
            }
            else if ((*(char *)(v13 - 41) & 0x80000000) == 0)
            {
              goto LABEL_31;
            }
            operator delete(*(void **)(v13 - 64));
            if (*(char *)(v13 - 65) < 0)
LABEL_35:
              operator delete(*(void **)(v13 - 88));
LABEL_28:
            v13 -= 88;
            if (v13 == v12)
            {
              v14 = (void *)*((_QWORD *)__p + 132);
              goto LABEL_37;
            }
          }
        }
LABEL_18:
        AMSCore::URL::~URL((AMSCore::URL *)(__p + 272));
        goto LABEL_19;
      }
    }
    else if ((__p[1103] & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(*((void **)__p + 135));
    if (!__p[424])
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_39:
  v15 = (char *)*((_QWORD *)__p + 18);
  if (v15 == __p + 120)
  {
    v16 = 4;
    v15 = __p + 120;
  }
  else
  {
    if (!v15)
      goto LABEL_44;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_44:
  if (__p[104])
  {
    if (__p[96])
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)__p + 4));
    else
      (**((void (***)(char *))__p + 3))(__p + 24);
  }
  v27 = *((_QWORD *)__p + 152);
  do
  {
    v28 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v29)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v27)
  {
    v30 = (_QWORD *)*((_QWORD *)__p + 153);
    while (v30 != *((_QWORD **)__p + 152))
    {
      v32 = *--v30;
      v31 = v32;
      *v30 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    operator delete(v30);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [17],std::string>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v24[0] = MEMORY[0x1E0DE4FE0] + 64;
    v19 = v7;
    *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
    std::ios_base::init(v9, v20);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v19 = v4 + 24;
    v24[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v20[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v22 = 0u;
    v23 = 16;
    v11 = *(_QWORD *)(v19 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Dropping event: ", 16);
    v13 = *(char *)(a2 + 23);
    if (v13 >= 0)
      v14 = a2;
    else
      v14 = *(_QWORD *)a2;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 23);
    else
      v15 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, v14, v15);
    v16 = v20[5];
    v17 = (char *)&v20[-1] + *(_QWORD *)(v19 - 24);
    if ((v17[32] & 5) != 0)
    {
      v18 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5) + 32))(&rep, *((_QWORD *)v17 + 5), 0, 1, 16);
      v18 = v29;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v26 = 2;
    v27 = v16;
    v28 = v18;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "metrics", 7, &rep);
    v19 = *v6;
    *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v6[3];
    v20[0] = v10 + 16;
    if (SBYTE7(v22) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v24);
  }
  return result;
}

void sub_18CCBC178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = (char *)operator new(0xE8uLL);
  v21 = (std::string *)(v20 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v20 + 6) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v20 + 216) = 0u;
  *(_OWORD *)(v20 + 200) = 0u;
  *(_OWORD *)(v20 + 184) = 0u;
  *(_OWORD *)(v20 + 168) = 0u;
  *(_OWORD *)(v20 + 152) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v22 = (uint64_t *)v20;
  v23 = (uint64_t *)**a1;
  if (v23)
  {
    *a1 = v23;
    v22 = *v6;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_18CCBC360(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &,char const(&)[27]>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *v11;
  unsigned int *v12;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error v25;
  std::runtime_error v26;
  unsigned int **v27;
  unsigned int *v28;
  std::runtime_error_vtbl *v29;
  __int128 v30;
  std::system_error v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::runtime_error v36;
  std::runtime_error v37;
  unsigned int **v38;
  unsigned int *v39;
  std::runtime_error_vtbl *v40;
  __int128 v41;
  char v42;
  std::string __what_arg;
  std::error_code v44;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v36, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v37 = *(std::runtime_error *)(a2 + 16);
    v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v38 = *(unsigned int ***)(a2 + 32);
    v39 = (unsigned int *)v9;
    v40 = *(std::runtime_error_vtbl **)(a2 + 48);
    if (v40)
    {
      *(_QWORD *)(v9 + 16) = &v39;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v38 = &v39;
    }
    v41 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v42 = 1;
    std::runtime_error::runtime_error(&v25, &v36);
    v26 = v37;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v38;
    v28 = v39;
    v29 = v40;
    if (v40)
    {
      *((_QWORD *)v39 + 2) = &v28;
      v38 = &v39;
      v39 = 0;
      v40 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v41;
    v41 = 0uLL;
    AMSCore::StringUtils::join<char [27]>(&__what_arg, "failed to parse identifier");
    *(_QWORD *)&v44.__val_ = a3;
    v44.__cat_ = a4;
    std::system_error::system_error(&v31, v44, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v33 = 0;
    v34 = 0;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v32 = &v33;
    v10 = operator new();
    v11 = std::runtime_error::runtime_error((std::runtime_error *)v10, &v25);
    v11[1] = v26;
    v11->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = v28;
    v11[2].__vftable = (std::runtime_error_vtbl *)v27;
    v11[2].__imp_.__imp_ = (const char *)v12;
    p_imp = &v11[2].__imp_;
    v14 = v29;
    v11[3].__vftable = v29;
    if (v14)
    {
      *((_QWORD *)v12 + 2) = p_imp;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      *(_QWORD *)(v10 + 32) = p_imp;
    }
    *(_OWORD *)(v10 + 56) = v30;
    v30 = 0uLL;
    *(_QWORD *)&v35 = v10;
    v15 = (_QWORD *)operator new();
    *v15 = &off_1E2523B58;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v10;
    *((_QWORD *)&v35 + 1) = v15;
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v31);
    *((_OWORD *)v4 + 1) = v31.__ec_;
    *(_QWORD *)v4 = off_1E2521330;
    v16 = v33;
    *((_QWORD *)v4 + 4) = v32;
    *((_QWORD *)v4 + 5) = v16;
    v17 = v4 + 40;
    v18 = v34;
    *((_QWORD *)v4 + 6) = v34;
    if (v18)
    {
      *(_QWORD *)(v16 + 16) = v17;
      v16 = 0;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v17;
    }
    *(_OWORD *)(v4 + 56) = v35;
    v35 = 0uLL;
    v4[72] = 1;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, (unsigned int *)v16);
    MEMORY[0x18D7898AC](&v31);
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v28);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v25);
    if (v42)
    {
      v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v39);
      return (_BYTE *)MEMORY[0x18D7898AC](&v36);
    }
  }
  return result;
}

void sub_18CCBC6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned int *a23)
{
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v23, a23);
  MEMORY[0x18D7898AC](&a18);
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CCBC700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Exception *v27;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a27);
  _Unwind_Resume(v27);
}

void sub_18CCBC710()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x18CCBC6F8);
}

void AMSCore::IMetricsDataAccessObject::Event::~Event(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_7;
}

_BYTE *AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[33]>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *v11;
  unsigned int *v12;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error v25;
  std::runtime_error v26;
  unsigned int **v27;
  unsigned int *v28;
  std::runtime_error_vtbl *v29;
  __int128 v30;
  std::system_error v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::runtime_error v36;
  std::runtime_error v37;
  unsigned int **v38;
  unsigned int *v39;
  std::runtime_error_vtbl *v40;
  __int128 v41;
  char v42;
  std::string __what_arg;
  std::error_code v44;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v36, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v37 = *(std::runtime_error *)(a2 + 16);
    v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v38 = *(unsigned int ***)(a2 + 32);
    v39 = (unsigned int *)v9;
    v40 = *(std::runtime_error_vtbl **)(a2 + 48);
    if (v40)
    {
      *(_QWORD *)(v9 + 16) = &v39;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v38 = &v39;
    }
    v41 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v42 = 1;
    std::runtime_error::runtime_error(&v25, &v36);
    v26 = v37;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v38;
    v28 = v39;
    v29 = v40;
    if (v40)
    {
      *((_QWORD *)v39 + 2) = &v28;
      v38 = &v39;
      v39 = 0;
      v40 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v41;
    v41 = 0uLL;
    AMSCore::StringUtils::join<char [33]>(&__what_arg, "failed to add events to database");
    *(_QWORD *)&v44.__val_ = a3;
    v44.__cat_ = a4;
    std::system_error::system_error(&v31, v44, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v33 = 0;
    v34 = 0;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v32 = &v33;
    v10 = operator new();
    v11 = std::runtime_error::runtime_error((std::runtime_error *)v10, &v25);
    v11[1] = v26;
    v11->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = v28;
    v11[2].__vftable = (std::runtime_error_vtbl *)v27;
    v11[2].__imp_.__imp_ = (const char *)v12;
    p_imp = &v11[2].__imp_;
    v14 = v29;
    v11[3].__vftable = v29;
    if (v14)
    {
      *((_QWORD *)v12 + 2) = p_imp;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      *(_QWORD *)(v10 + 32) = p_imp;
    }
    *(_OWORD *)(v10 + 56) = v30;
    v30 = 0uLL;
    *(_QWORD *)&v35 = v10;
    v15 = (_QWORD *)operator new();
    *v15 = &off_1E2523B58;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v10;
    *((_QWORD *)&v35 + 1) = v15;
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v31);
    *((_OWORD *)v4 + 1) = v31.__ec_;
    *(_QWORD *)v4 = off_1E2521330;
    v16 = v33;
    *((_QWORD *)v4 + 4) = v32;
    *((_QWORD *)v4 + 5) = v16;
    v17 = v4 + 40;
    v18 = v34;
    *((_QWORD *)v4 + 6) = v34;
    if (v18)
    {
      *(_QWORD *)(v16 + 16) = v17;
      v16 = 0;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v17;
    }
    *(_OWORD *)(v4 + 56) = v35;
    v35 = 0uLL;
    v4[72] = 1;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, (unsigned int *)v16);
    MEMORY[0x18D7898AC](&v31);
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v28);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v25);
    if (v42)
    {
      v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v39);
      return (_BYTE *)MEMORY[0x18D7898AC](&v36);
    }
  }
  return result;
}

void sub_18CCBCAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned int *a23)
{
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v23, a23);
  MEMORY[0x18D7898AC](&a18);
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CCBCB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Exception *v27;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a27);
  _Unwind_Resume(v27);
}

void sub_18CCBCB28()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x18CCBCB10);
}

void AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  std::runtime_error *v6;
  char v7;
  const char *v8;
  std::runtime_error_vtbl *v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::runtime_error v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v1 = result;
  v23 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v22 = v21;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v21);
      }
      else
      {
        v22 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v22 = 0;
    }
    if (v22)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(v5 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v10 = *(const char **)(v5 + 16);
        v9 = (std::runtime_error_vtbl *)(v5 + 16);
        v8 = v10;
        v14.__vftable = (std::runtime_error_vtbl *)v9[-1].what;
        v14.__imp_.__imp_ = v10;
        *(_QWORD *)&v15 = v9->~runtime_error_0;
        if ((_QWORD)v15)
        {
          *((_QWORD *)v8 + 2) = &v14.__imp_;
          v6->__vftable = v9;
          v9->~runtime_error = 0;
          v9->~runtime_error_0 = 0;
        }
        else
        {
          v14.__vftable = (std::runtime_error_vtbl *)&v14.__imp_;
        }
      }
      else
      {
        std::runtime_error::runtime_error(&v14, v6);
        v11 = (_QWORD *)(v5 + 48);
        v12 = *(_QWORD *)(v5 + 48);
        v15 = *(_OWORD *)(v5 + 24);
        v14.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v16 = *(uint64_t **)(v5 + 40);
        v17 = v12;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v12 + 16) = &v17;
          *(_QWORD *)(v5 + 40) = v11;
          *v11 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v16 = &v17;
        }
        v19 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v20 = v7;
      if (!v22)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v22 + 48))(v22, &v14);
      if (v20)
        std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy((char *)v14.__imp_.__imp_);
      else
        ((void (*)(std::runtime_error *))v14.~runtime_error)(&v14);
    }
    else
    {
      (*v3)(v3);
    }
    result = v22;
    if (v22 == v21)
    {
      v13 = 4;
      result = v21;
    }
    else
    {
      if (!v22)
        return result;
      v13 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v13))();
  }
  return result;
}

void sub_18CCBCFA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::IMetricsProvider::Event  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::IMetricsProvider::Event  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::IMetricsProvider::Event  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore16IMetricsProvider5EventEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore16IMetricsProvider5EventEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore16IMetricsProvider5EventEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore16IMetricsProvider5EventEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_20Metri"
                     "csEventModifier13TopicModifierENS1_4lessIS8_EENS6_INS1_4pairIKS8_SA_EEEEEENS_5ErrorEE7Promise17get_"
                     "return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEE"
                                "ENS_20MetricsEventModifier13TopicModifierENS1_4lessIS8_EENS6_INS1_4pairIKS8_SA_EEEEEENS_"
                                "5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_20MetricsEventModifier13TopicModifierENS1_4lessIS8_EENS6_INS1_4pairIKS8_SA_EEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_20MetricsEventModifier13TopicModifierENS1_4lessIS8_EENS6_INS1_4pairIKS8_SA_EEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::MetricsProvider::postEvents(unint64_t a1)
{
  unint64_t v2;
  AMSCore::MetricsEventModifier::MergedEventModifier *v3;
  _QWORD *v4;
  const AMSCore::IMetricsProvider::Event **v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const AMSCore::IMetricsProvider::Event *v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  AMSCore::IMetricsProvider::Event *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  BOOL v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  const AMSCore::IMetricsProvider::Event **v109;
  AMSCore::MetricsEventModifier::MergedEventModifier *v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int **v113;
  unsigned int ***v114;
  _BYTE *v115;
  std::runtime_error *v116;
  std::runtime_error *v117;
  std::runtime_error *v118;
  uint64_t v119[9];
  char v120;

  v2 = a1 + 440;
  v3 = (AMSCore::MetricsEventModifier::MergedEventModifier *)(a1 + 152);
  v115 = (_BYTE *)(a1 + 904);
  v116 = (std::runtime_error *)(a1 + 520);
  v117 = (std::runtime_error *)(a1 + 672);
  v118 = (std::runtime_error *)(a1 + 600);
  v4 = (_QWORD *)(a1 + 776);
  v111 = a1 + 792;
  v112 = a1 + 744;
  v5 = (const AMSCore::IMetricsProvider::Event **)(a1 + 808);
  v6 = (uint64_t *)(a1 + 824);
  v107 = a1 + 16;
  v108 = (uint64_t *)(a1 + 824);
  v109 = (const AMSCore::IMetricsProvider::Event **)(a1 + 808);
  v110 = (AMSCore::MetricsEventModifier::MergedEventModifier *)(a1 + 152);
  if (*(_BYTE *)(a1 + 904))
    goto LABEL_42;
  while (2)
  {
    AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume((uint64_t)v3, *(_QWORD *)(a1 + 864));
    v7 = *(_QWORD *)(a1 + 872);
    if (!v7)
      goto LABEL_6;
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      v13 = *(std::__shared_weak_count **)(a1 + 872);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v10 = *(std::__shared_weak_count **)(a1 + 448);
      if (!v10)
        goto LABEL_12;
    }
    else
    {
LABEL_6:
      v10 = *(std::__shared_weak_count **)(a1 + 448);
      if (!v10)
        goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_12:
    v14 = *(std::__shared_weak_count **)(a1 + 784);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *v5;
    AMSCore::MetricsEventModifier::MergedEventModifier::shouldDropEvent(v3, *v5);
    if (v18)
    {
      AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)v119, (uint64_t *)v17 + 9, "topic", 5uLL);
      if (v120)
      {
        v19 = v119[0];
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault((_QWORD *)v2);
        AMSCore::Logger::log<char [17],std::string>(*(_QWORD *)v2, v19);
        v20 = *(std::__shared_weak_count **)(a1 + 448);
        v21 = 7;
        if (v20)
        {
          v22 = (unint64_t *)&v20->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          v21 = 7;
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
            if (!*(_BYTE *)(a1 + 424))
            {
LABEL_79:
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 240));
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 216));
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 192));
              v64 = *(std::__shared_weak_count **)(a1 + 816);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              switch(v21)
              {
                case 0:
                case 7:
                  v67 = (uint64_t *)(*(_QWORD *)(a1 + 856) + 8);
                  if (v67 == *(uint64_t **)(a1 + 848))
                    goto LABEL_123;
                  *(_QWORD *)(a1 + 856) = v67;
                  v68 = *v67;
                  *(_QWORD *)(a1 + 808) = *v67;
                  if (v68)
                  {
                    v69 = (_QWORD *)operator new();
                    v70 = *(_QWORD *)(a1 + 832);
                    v71 = *v67;
                    v69[1] = 0;
                    v72 = v69 + 1;
                    *v69 = &off_1E25231F0;
                    v69[2] = 0;
                    v69[3] = v71;
                    *(_QWORD *)(a1 + 816) = v69;
                    *v67 = 0;
                    v73 = *(_QWORD **)(v70 + 96);
                    *(_QWORD *)(a1 + 776) = v68;
                    *(_QWORD *)(a1 + 784) = v69;
                    do
                      v74 = __ldxr(v72);
                    while (__stxr(v74 + 1, v72));
                  }
                  else
                  {
                    v75 = *(_QWORD *)(a1 + 832);
                    *(_QWORD *)(a1 + 816) = 0;
                    *v67 = 0;
                    v73 = *(_QWORD **)(v75 + 96);
                    *v4 = 0;
                    v4[1] = 0;
                  }
                  AMSCore::MetricsEventModifierProvider::getOverrideForEvent((_OWORD *)v2, v73, (uint64_t)v4);
                  v76 = *(_OWORD *)v2;
                  *(_OWORD *)(a1 + 864) = *(_OWORD *)v2;
                  *(_QWORD *)v2 = 0;
                  *(_QWORD *)(v2 + 8) = 0;
                  if (!atomic_load((unint64_t *)(v76 + 304)))
                  {
                    *v115 = 0;
                    v78 = (unint64_t *)(*(_QWORD *)(a1 + 864) + 304);
                    do
                      v79 = __ldaxr(v78);
                    while (__stlxr(a1, v78));
                    if (!v79)
                      return;
                  }
                  continue;
                case 3:
                  goto LABEL_130;
                case 6:
LABEL_123:
                  if (*(_BYTE *)(a1 + 104))
                    v98 = *(_BYTE *)(a1 + 96) == 0;
                  else
                    v98 = 0;
                  if (v98)
                    (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                  *(_BYTE *)(a1 + 96) = 1;
                  *(_BYTE *)(a1 + 104) = 1;
LABEL_130:
                  *(_QWORD *)(a1 + 896) = a1;
                  *(_QWORD *)(a1 + 152) = v107;
                  *(_QWORD *)a1 = 0;
                  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
                  return;
                default:
                  v99 = *(_QWORD **)(a1 + 144);
                  if (v99 == (_QWORD *)(a1 + 120))
                  {
                    v100 = 4;
                    v99 = (_QWORD *)(a1 + 120);
                  }
                  else
                  {
                    if (!v99)
                      goto LABEL_136;
                    v100 = 5;
                  }
                  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_136:
                  if (*(_BYTE *)(a1 + 104) && !*(_BYTE *)(a1 + 96))
                    (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                  v101 = *(_QWORD *)(a1 + 840);
                  do
                  {
                    v102 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
                    v103 = v102 - 1;
                  }
                  while (__stlxr(v103, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
                  if (!v103)
                    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
                  if (v101)
                  {
                    v104 = *(_QWORD **)(a1 + 848);
                    while (v104 != *(_QWORD **)(a1 + 840))
                    {
                      v106 = *--v104;
                      v105 = v106;
                      *v104 = 0;
                      if (v106)
                        (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
                    }
                    operator delete(v104);
                  }
                  operator delete((void *)a1);
                  break;
              }
              return;
            }
LABEL_78:
            AMSCore::URL::~URL((AMSCore::URL *)(a1 + 272));
            goto LABEL_79;
          }
        }
        goto LABEL_77;
      }
LABEL_151:
      __break(1u);
      return;
    }
    break;
  }
  v24 = (AMSCore::IMetricsProvider::Event *)operator new();
  AMSCore::IMetricsProvider::Event::Event(v24, v17);
  v25 = *(_QWORD **)(a1 + 832);
  *(_QWORD *)(a1 + 824) = v24;
  *(_QWORD *)(a1 + 744) = v25[3];
  v26 = v25[4];
  *(_QWORD *)(a1 + 752) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v25 = *(_QWORD **)(a1 + 832);
  }
  *(_QWORD *)(a1 + 760) = v25[5];
  v29 = v25[6];
  *(_QWORD *)(a1 + 768) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v25 = *(_QWORD **)(a1 + 832);
  }
  *(_QWORD *)(a1 + 792) = v25[12];
  v32 = v25[13];
  *(_QWORD *)(a1 + 800) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v25 = *(_QWORD **)(a1 + 832);
  }
  v35 = v25[17];
  if (!v35)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t, uint64_t *, unint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v6, v112, v111);
  v36 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 880) = *(_OWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if (atomic_load((unint64_t *)(v36 + 96)))
    goto LABEL_42;
  *v115 = 1;
  v38 = (unint64_t *)(*(_QWORD *)(a1 + 880) + 96);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(a1, v38));
  if (v39)
  {
LABEL_42:
    v40 = *(_QWORD *)(a1 + 880);
    if (!*(_BYTE *)(v40 + 88))
      goto LABEL_151;
    v41 = *(_BYTE *)(v40 + 80);
    if (!v41)
    {
      v42 = a1 + 560;
      std::runtime_error::runtime_error(v116, (const std::runtime_error *)(v40 + 8));
      *(_OWORD *)(a1 + 536) = *(_OWORD *)(v40 + 24);
      *(_QWORD *)(a1 + 520) = off_1E2521330;
      v43 = (_QWORD *)(v40 + 48);
      v44 = *(_QWORD *)(v40 + 48);
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(v40 + 40);
      *(_QWORD *)(a1 + 560) = v44;
      v45 = *(_QWORD *)(v40 + 56);
      *(_QWORD *)(a1 + 568) = v45;
      if (v45)
      {
        *(_QWORD *)(v44 + 16) = v42;
        *(_QWORD *)(v40 + 40) = v43;
        *v43 = 0;
        *(_QWORD *)(v40 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 552) = v42;
      }
      v46 = *(_QWORD *)(a1 + 880);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(v46 + 64);
      *(_QWORD *)(v46 + 64) = 0;
      *(_QWORD *)(v46 + 72) = 0;
    }
    *(_BYTE *)(a1 + 592) = v41;
    v47 = *(_QWORD *)(a1 + 888);
    if (!v47)
      goto LABEL_52;
    v48 = (unint64_t *)(v47 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      v53 = *(std::__shared_weak_count **)(a1 + 888);
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      v50 = *(std::__shared_weak_count **)(a1 + 448);
      if (!v50)
        goto LABEL_58;
    }
    else
    {
LABEL_52:
      v50 = *(std::__shared_weak_count **)(a1 + 448);
      if (!v50)
        goto LABEL_58;
    }
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
LABEL_58:
    v54 = *(std::__shared_weak_count **)(a1 + 800);
    if (!v54)
      goto LABEL_62;
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      v57 = *(std::__shared_weak_count **)(a1 + 768);
      if (v57)
        goto LABEL_63;
    }
    else
    {
LABEL_62:
      v57 = *(std::__shared_weak_count **)(a1 + 768);
      if (v57)
      {
LABEL_63:
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
    v60 = *(std::__shared_weak_count **)(a1 + 752);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = *v6;
    *v6 = 0;
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    if (!*(_BYTE *)(a1 + 592))
    {
      v80 = a1 + 480;
      std::runtime_error::runtime_error((std::runtime_error *)v2, v116);
      *(_OWORD *)(a1 + 456) = *(_OWORD *)(a1 + 536);
      *(_QWORD *)(a1 + 440) = off_1E2521330;
      v81 = *(_QWORD *)(a1 + 560);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 552);
      *(_QWORD *)(a1 + 480) = v81;
      v82 = *(_QWORD *)(a1 + 568);
      *(_QWORD *)(a1 + 488) = v82;
      v113 = (unsigned int **)(a1 + 480);
      v114 = (unsigned int ***)(a1 + 472);
      if (v82)
      {
        *(_QWORD *)(v81 + 16) = v80;
        *(_QWORD *)(a1 + 552) = a1 + 560;
        *(_QWORD *)(a1 + 560) = 0;
        *(_QWORD *)(a1 + 568) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 472) = v80;
      }
      v83 = (_QWORD *)(a1 + 632);
      v84 = (_QWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 576);
      *(_QWORD *)(a1 + 584) = 0;
      *(_QWORD *)(a1 + 576) = 0;
      *(_BYTE *)(a1 + 512) = 1;
      std::runtime_error::runtime_error(v118, (const std::runtime_error *)v2);
      *(_OWORD *)(a1 + 616) = *(_OWORD *)(a1 + 456);
      *(_QWORD *)(a1 + 600) = off_1E2521330;
      v85 = *(_QWORD *)(a1 + 480);
      *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 472);
      *(_QWORD *)(a1 + 640) = v85;
      v86 = *(_QWORD *)(a1 + 488);
      *(_QWORD *)(a1 + 648) = v86;
      if (v86)
      {
        *(_QWORD *)(v85 + 16) = v84;
        *v114 = v113;
        *v113 = 0;
        *(_QWORD *)(a1 + 488) = 0;
      }
      else
      {
        *v83 = v84;
      }
      v87 = (_QWORD *)(a1 + 704);
      v88 = (_QWORD *)(a1 + 712);
      *(_OWORD *)(a1 + 656) = *(_OWORD *)(a1 + 496);
      *(_QWORD *)(a1 + 496) = 0;
      *(_QWORD *)(a1 + 504) = 0;
      std::runtime_error::runtime_error(v117, v118);
      *(_OWORD *)(a1 + 688) = *(_OWORD *)(a1 + 616);
      *(_QWORD *)(a1 + 672) = off_1E2521330;
      *(_QWORD *)(a1 + 704) = *(_QWORD *)(a1 + 632);
      v89 = *(_QWORD *)(a1 + 640);
      *(_QWORD *)(a1 + 712) = v89;
      v90 = *(_QWORD *)(a1 + 648);
      *(_QWORD *)(a1 + 720) = v90;
      if (v90)
      {
        *(_QWORD *)(v89 + 16) = v88;
        v89 = 0;
        *v83 = v84;
        *v84 = 0;
        *(_QWORD *)(a1 + 648) = 0;
      }
      else
      {
        *v87 = v88;
      }
      v3 = v110;
      v91 = (_OWORD *)(v2 + 288);
      *(_OWORD *)(v2 + 288) = *(_OWORD *)(a1 + 656);
      *(_QWORD *)(a1 + 656) = 0;
      *(_QWORD *)(a1 + 664) = 0;
      *(_QWORD *)(a1 + 600) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 632, (unsigned int *)v89);
      MEMORY[0x18D7898AC](v118);
      v6 = v108;
      if (*(_BYTE *)(a1 + 104))
      {
        if (!*(_BYTE *)(a1 + 96))
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        *(_BYTE *)(a1 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v117);
      v92 = *(_QWORD *)(a1 + 712);
      *(_QWORD *)(a1 + 64) = v92;
      v93 = a1 + 64;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 688);
      *(_QWORD *)(a1 + 24) = off_1E2521330;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 704);
      v94 = *(_QWORD *)(a1 + 720);
      *(_QWORD *)(a1 + 72) = v94;
      if (v94)
      {
        *(_QWORD *)(v92 + 16) = v93;
        v92 = 0;
        *v87 = v88;
        *v88 = 0;
        *(_QWORD *)(a1 + 720) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 56) = v93;
      }
      *(_OWORD *)(a1 + 80) = *v91;
      *(_QWORD *)v91 = 0;
      *(_QWORD *)(v2 + 296) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      *(_BYTE *)(a1 + 104) = 1;
      *(_QWORD *)(a1 + 672) = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 704, (unsigned int *)v92);
      MEMORY[0x18D7898AC](v117);
      v5 = v109;
      if (*(_BYTE *)(a1 + 512))
      {
        *(_QWORD *)(a1 + 440) = off_1E2521330;
        v95 = *(std::__shared_weak_count **)(a1 + 504);
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v114, *v113);
        MEMORY[0x18D7898AC](v2);
      }
      if (!*(_BYTE *)(a1 + 592))
        ((void (*)(std::runtime_error *))v116->~runtime_error)(v116);
      v21 = 3;
      if (!*(_BYTE *)(a1 + 424))
        goto LABEL_79;
      goto LABEL_78;
    }
    v21 = 0;
LABEL_77:
    if (!*(_BYTE *)(a1 + 424))
      goto LABEL_79;
    goto LABEL_78;
  }
}

void sub_18CCBDB5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, AMSCore::MetricsEventModifier::EventModifier *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v14);
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(a12);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a11);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCBDC04()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCBDA38);
}

void AMSCore::MetricsProvider::postEvents(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  if (*(_QWORD *)__p)
  {
    if (__p[904])
    {
      v2 = *((_QWORD *)__p + 111);
      if (v2)
      {
        v3 = (unint64_t *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 - 1, v3));
        if (!v4)
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 111);
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 56);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 100);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 96);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 94);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = *((_QWORD *)__p + 103);
      *((_QWORD *)__p + 103) = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if (__p[424])
        AMSCore::URL::~URL((AMSCore::URL *)(__p + 272));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 30));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 27));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 24));
    }
    else
    {
      v30 = *((_QWORD *)__p + 109);
      if (v30)
      {
        v31 = (unint64_t *)(v30 + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          v33 = (std::__shared_weak_count *)*((_QWORD *)__p + 109);
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)__p + 56);
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)__p + 98);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 102);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v22 = (char *)*((_QWORD *)__p + 18);
  if (v22 == __p + 120)
  {
    v23 = 4;
    v22 = __p + 120;
    goto LABEL_42;
  }
  if (v22)
  {
    v23 = 5;
LABEL_42:
    (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  v24 = *((_QWORD *)__p + 105);
  do
  {
    v25 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v26)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v24)
  {
    v27 = (_QWORD *)*((_QWORD *)__p + 106);
    while (v27 != *((_QWORD **)__p + 105))
    {
      v29 = *--v27;
      v28 = v29;
      *v27 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    operator delete(v27);
  }
  operator delete(__p);
}

void AMSCore::internal::MetricsSamplingProvider::~MetricsSamplingProvider(AMSCore::internal::MetricsSamplingProvider *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E25213F0;
  v2 = (char *)this + 16;
  v3 = (char *)*((_QWORD *)this + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E25213F0;
  v2 = (char *)this + 16;
  v3 = (char *)*((_QWORD *)this + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t AMSCore::internal::MetricsSamplingProvider::shouldSendMetrics(AMSCore::internal::MetricsSamplingProvider *this, const AMSCore::LoadURLMetricsEventConfig *a2)
{
  return AMSCore::internal::MetricsSamplingProvider::shouldSendLoadURLMetrics((uint64_t)this, *((_QWORD *)a2 + 11), (uint64_t)"AMSMetricsTimingWindowStartTime", 31, *((double *)a2 + 10));
}

uint64_t AMSCore::internal::MetricsSamplingProvider::shouldSendMetrics(uint64_t a1, uint64_t a2, unint64_t __val)
{
  int v5;
  void *v6;
  std::string *v7;
  size_t size;
  uint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  uint64_t v14;
  uint64_t shouldSendLoadURLMetrics;
  std::string v17;
  _BYTE v18[24];
  void *__p[2];
  uint64_t v20;

  strcpy(v18, "AMSSamplingSession-");
  v18[23] = 19;
  std::to_string(&v17, __val);
  v5 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  v6 = (void *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v17;
  else
    v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  else
    size = v17.__r_.__value_.__l.__size_;
  if (size <= 3)
  {
    if (!size)
      goto LABEL_18;
    memmove(&v18[19], v7, size);
    if ((v18[23] & 0x80000000) != 0)
      *(_QWORD *)&v18[8] = size + 19;
    else
      v18[23] = size + 19;
    v12 = &v18[size + 19];
  }
  else
  {
    if (size - 0x7FFFFFFFFFFFFFE4 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:fe180100]();
    v9 = 44;
    if (size + 19 > 0x2C)
      v9 = size + 19;
    v10 = (v9 | 7) + 1;
    v11 = (char *)operator new(v10);
    *(_OWORD *)v11 = *(_OWORD *)v18;
    *(_DWORD *)(v11 + 15) = *(_DWORD *)&v18[15];
    memcpy(v11 + 19, v7, size);
    *(_QWORD *)&v18[8] = size + 19;
    *(_QWORD *)&v18[16] = v10 | 0x8000000000000000;
    *(_QWORD *)v18 = v11;
    v12 = &v11[size + 19];
  }
  *v12 = 0;
LABEL_18:
  *(_OWORD *)__p = *(_OWORD *)v18;
  v20 = *(_QWORD *)&v18[16];
  memset(v18, 0, sizeof(v18));
  if (v5 < 0)
    operator delete(v6);
  if (v20 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v20 >= 0)
    v14 = HIBYTE(v20);
  else
    v14 = (uint64_t)__p[1];
  shouldSendLoadURLMetrics = AMSCore::internal::MetricsSamplingProvider::shouldSendLoadURLMetrics(a1, *(_QWORD *)a2, (uint64_t)v13, v14, *(double *)(a2 + 8));
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  return shouldSendLoadURLMetrics;
}

void sub_18CCBE22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::internal::MetricsSamplingProvider::shouldSendLoadURLMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[3];
  int v27;
  char v28;
  _QWORD v29[3];
  int v30;
  char v31;
  char v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v33);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v29, v33, a3, a4);
  if (v30 == -1)
    v11 = 0;
  else
    v11 = v30;
  if (v11 == 7)
  {
    v12 = 0;
    v13 = v29[0];
LABEL_8:
    v14 = v13 & 0xFFFFFFFFFFFFFF00;
    if (v30 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v11 == 3)
  {
    v12 = 0;
    v13 = 1000 * v29[0];
    goto LABEL_8;
  }
  LOBYTE(v13) = 0;
  v14 = 0;
  v12 = 1;
  if (v30 != -1)
LABEL_11:
    ((void (*)(char *, _QWORD *))off_1E253D240[v30])(&v32, v29);
LABEL_12:
  v30 = -1;
  v15 = v34;
  if (!v34)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((v12 & 1) == 0)
    {
LABEL_17:
      if (v10 <= (uint64_t)((v14 | v13) + 1000 * a2))
        return 1;
    }
  }
  else
  {
LABEL_16:
    if ((v12 & 1) == 0)
      goto LABEL_17;
  }
  if (a5 <= 0.0)
    return 0;
  v18 = *(_QWORD *)(a1 + 40);
  if (!v18)
    std::__throw_bad_function_call[abi:fe180100]();
  if ((*(double (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18) > a5)
    return 0;
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v33);
  v26[0] = v10;
  v27 = 7;
  v28 = 1;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v33 + 48))(v29, v33, a3, a4, v26);
  if (v28)
  {
    if (v27 != -1)
      ((void (*)(char *, _QWORD *))off_1E253D240[v27])(&v32, v26);
    v27 = -1;
  }
  v20 = v34;
  if (v34)
  {
    v21 = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!v31)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v33);
    AMSCore::Logger::log<char [41],AMSCore::Error>(v33, 4, (uint64_t)"bag", 3, "Failed to set timing window start time: ", (uint64_t)v29);
    v23 = v34;
    if (v34)
    {
      v24 = (unint64_t *)&v34->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (!v31)
      (*(void (**)(_QWORD *))v29[0])(v29);
  }
  return 1;
}

void sub_18CCBE540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(_QWORD), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v23 - 112);
  if (!a23)
  {
    (*a14)(&a14);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2521E40;
  return result;
}

void std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2521E40;
}

double std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::operator()()
{
  unsigned __int8 v0;
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned int v14;
  double v15;
  unsigned int v16;

  v0 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  if ((v0 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
    qword_1ECEABC88 = 0;
    qword_1ECEABC90 = 0;
    byte_1ECEABC98 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  if (!byte_1ECEABC98)
    std::terminate();
  v2 = qword_1ECEABC88;
  v1 = (std::__shared_weak_count *)qword_1ECEABC90;
  if (qword_1ECEABC90)
  {
    v3 = (unint64_t *)(qword_1ECEABC90 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  std::mutex::lock((std::mutex *)(v2 + 8));
  v5 = v2 + 72;
  v6 = *(_QWORD *)(v2 + 2568);
  v7 = (v6 + 1) % 0x270uLL;
  v8 = *(_DWORD *)(v2 + 72 + 4 * ((v6 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(v2 + 72 + 4 * v7) & 0x7FFFFFFE | *(_DWORD *)(v2 + 72 + 4 * v6) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 72 + 4 * v7) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 72 + 4 * v6) = v8;
  if (v7 == 623)
    v9 = 0;
  else
    v9 = v7 + 1;
  v10 = 397;
  if (v7 >= 0xE3)
    v10 = -227;
  v11 = *(_DWORD *)(v5 + 4 * (v10 + v7)) ^ ((*(_DWORD *)(v5 + 4 * v9) & 0x7FFFFFFE | *(_DWORD *)(v5 + 4 * v7) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v5 + 4 * v9) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v5 + 4 * v7) = v11;
  *(_QWORD *)(v2 + 2568) = v9;
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v14 = ((v11 ^ (v11 >> 11)) << 7) & 0x9D2C5680 ^ v11 ^ (v11 >> 11);
  v15 = (double)((v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18));
  v16 = ((v8 ^ (v8 >> 11)) << 7) & 0x9D2C5680 ^ v8 ^ (v8 >> 11);
  return ((double)((v16 << 15) & 0xEFC60000 ^ v16 ^ (((v16 << 15) & 0xEFC60000 ^ v16) >> 18)) + v15 * 4294967300.0)
       * 5.42101086e-20
       + 0.0;
}

void sub_18CCBE818(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore24IMetricsSamplingProvider11makeDefaultEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore24IMetricsSamplingProvider11makeDefaultEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore24IMetricsSamplingProvider11makeDefaultEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore24IMetricsSamplingProvider11makeDefaultEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<AMSCore::internal::MetricsSamplingProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::internal::MetricsSamplingProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::internal::MetricsSamplingProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMSCore::UploadMetricsEventTask::internal::perform(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_18CCBE9A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::string *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::runtime_error a26,__int128 a27,uint64_t a28,uint64_t a29,uint64_t a30,__int128 a31,std::runtime_error a32,__int128 a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  unint64_t v61;
  _QWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t *v66;
  std::string *v67;
  std::runtime_error *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  const std::runtime_error *v72;
  char v73;
  const char **v74;
  std::__libcpp_refstring *p_imp;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  const std::runtime_error *v80;
  std::runtime_error_vtbl *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::runtime_error_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::runtime_error *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void **p_data;
  __int128 *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  __int128 v120;
  unint64_t v121;
  uint64_t *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  const std::runtime_error *v190;
  char v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  uint64_t v234;
  uint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  int v268;
  __int128 *v269;
  uint64_t *v270;
  std::string *v271;
  _BYTE *v272;
  _QWORD *v273;
  _QWORD *v274;
  std::runtime_error *v275;
  _QWORD *v276;
  _OWORD *v277;
  _QWORD *v278;
  std::string *v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  std::runtime_error v284;
  __int128 v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  __int128 v289;
  std::runtime_error v290;
  __int128 v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;

  v271 = v67;
  v71 = *(_QWORD *)(v61 + 1560);
  if (!*(_BYTE *)(v71 + 88))
    goto LABEL_300;
  v270 = v66;
  v72 = (const std::runtime_error *)(v71 + 8);
  v73 = *(_BYTE *)(v71 + 80);
  if (v73)
  {
    *(_QWORD *)(v61 + 152) = *(_QWORD *)(v71 + 8);
    v74 = (const char **)(v61 + 160);
    p_imp = (std::__libcpp_refstring *)(v71 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v68, v72);
    *(_OWORD *)(v61 + 168) = *(_OWORD *)(v71 + 24);
    v76 = (_QWORD *)(v71 + 48);
    v77 = *(_QWORD *)(v71 + 48);
    *(_QWORD *)(v61 + 192) = v77;
    v78 = v61 + 192;
    *(_QWORD *)(v61 + 152) = off_1E2521330;
    *(_QWORD *)(v61 + 184) = *(_QWORD *)(v71 + 40);
    v79 = *(_QWORD *)(v71 + 56);
    *(_QWORD *)(v61 + 200) = v79;
    if (v79)
    {
      *(_QWORD *)(v77 + 16) = v78;
      *(_QWORD *)(v71 + 40) = v76;
      *v76 = 0;
      *(_QWORD *)(v71 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 184) = v78;
    }
    v80 = *(const std::runtime_error **)(v61 + 1560);
    v81 = v80[4].__vftable;
    v72 = v80 + 4;
    *(_QWORD *)(v61 + 208) = v81;
    v74 = (const char **)(v61 + 216);
    p_imp = &v72->__imp_;
  }
  *v74 = p_imp->__imp_;
  v72->__vftable = 0;
  v72->__imp_.__imp_ = 0;
  *(_BYTE *)(v61 + 224) = v73;
  v82 = *(_QWORD *)(v61 + 1568);
  if (v82)
  {
    v83 = (unint64_t *)(v82 + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      v85 = *(std::__shared_weak_count **)(v61 + 1568);
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v86 = *(std::__shared_weak_count **)(v61 + 728);
  if (v86)
  {
    p_shared_owners = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(p_shared_owners);
    while (__stlxr(v88 - 1, p_shared_owners));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (*(char *)(v61 + 1375) < 0)
    operator delete(*(void **)(v61 + 1352));
  v89 = *(std::__shared_weak_count **)(v61 + 1080);
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (*(char *)(v61 + 1215) < 0)
    operator delete(*(void **)(v61 + 1192));
  if (*(_BYTE *)(v61 + 1176) && *(char *)(v61 + 1175) < 0)
    operator delete(*(void **)(v61 + 1152));
  v269 = v65;
  if (*(_BYTE *)(v61 + 224) && (v92 = v68->__vftable) != 0)
  {
    v93 = *(_QWORD *)(v61 + 160);
    v68->__vftable = 0;
    v68->__imp_.__imp_ = 0;
    *(_QWORD *)(v61 + 1488) = v92;
    v94 = *(std::__shared_weak_count **)(v61 + 1496);
    *(_QWORD *)(v61 + 1496) = v93;
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      v97 = v68;
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    else
    {
      v97 = v68;
    }
    v104 = 0;
    v103 = 1;
    if (!*(_BYTE *)(v61 + 224))
      goto LABEL_294;
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::AccountsErrorCode,char const(&)[44]>(v70 - 168, 0x64u);
    if (*(_BYTE *)(v61 + 104))
    {
      if (!*(_BYTE *)(v61 + 96))
        (**(void (***)(uint64_t))(v61 + 24))(v61 + 24);
      *(_BYTE *)(v61 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v61 + 24), (const std::runtime_error *)(v70 - 168));
    v98 = *(_OWORD *)(v70 - 152);
    v100 = *(_QWORD *)(v70 - 136);
    v99 = *(_QWORD *)(v70 - 128);
    *(_QWORD *)(v61 + 64) = v99;
    v101 = v61 + 64;
    *(_OWORD *)(v61 + 40) = v98;
    *(_QWORD *)(v61 + 24) = off_1E2521330;
    *(_QWORD *)(v61 + 56) = v100;
    v102 = *(_QWORD *)(v70 - 120);
    *(_QWORD *)(v61 + 72) = v102;
    v97 = v68;
    if (v102)
    {
      *(_QWORD *)(v99 + 16) = v101;
      *(_QWORD *)(v70 - 136) = v70 - 128;
      *(_QWORD *)(v70 - 128) = 0;
      *(_QWORD *)(v70 - 120) = 0;
      v99 = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 56) = v101;
    }
    *(_OWORD *)(v61 + 80) = v296;
    *(_QWORD *)(v70 - 112) = 0;
    *(_QWORD *)(v70 - 104) = 0;
    *(_BYTE *)(v61 + 96) = 0;
    *(_BYTE *)(v61 + 104) = 1;
    *(_QWORD *)(v70 - 168) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v70 - 136, (unsigned int *)v99);
    MEMORY[0x18D7898AC](v70 - 168);
    v103 = 0;
    v104 = 3;
    if (!*(_BYTE *)(v61 + 224))
    {
LABEL_294:
      ((void (*)(std::runtime_error *))v97->~runtime_error)(v97);
      if ((v103 & 1) == 0)
        goto LABEL_295;
      goto LABEL_51;
    }
  }
  v105 = *(std::__shared_weak_count **)(v61 + 160);
  if (v105)
  {
    v106 = (unint64_t *)&v105->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if ((v103 & 1) == 0)
  {
LABEL_295:
    v249 = *(_QWORD *)(v61 + 1552);
    v250 = *(_QWORD *)(v61 + 1528);
    v111 = (uint64_t)v97;
    v222 = v280;
    v251 = *(std::__shared_weak_count **)(v61 + 1496);
    if (!v251)
      goto LABEL_258;
    goto LABEL_254;
  }
LABEL_51:
  AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>(v70 - 168, (uint64_t *)(*(_QWORD *)(v61 + 1528) + 72), "topic", 5uLL);
  p_data = (void **)&v271->__r_.__value_.__l.__data_;
  if (!*(_BYTE *)(v70 - 96))
    goto LABEL_300;
  v109 = *(__int128 **)(v70 - 168);
  if (*((char *)v109 + 23) < 0)
  {
    v111 = (uint64_t)v97;
    std::string::__init_copy_ctor_external(v279, *(const std::string::value_type **)v109, *((_QWORD *)v109 + 1));
  }
  else
  {
    v110 = *v109;
    v279->__r_.__value_.__r.__words[2] = *((_QWORD *)v109 + 2);
    *(_OWORD *)&v279->__r_.__value_.__l.__data_ = v110;
    v111 = (uint64_t)v97;
  }
  *(_QWORD *)v283 = 0;
  *(_QWORD *)(v283 + 8) = 0;
  *(_QWORD *)(v283 + 16) = 0;
  std::vector<AMSCore::Any>::reserve((char **)v283, 1uLL);
  v112 = *(_QWORD *)(v61 + 1528);
  *(_QWORD *)(v61 + 1456) = v112;
  if (v112)
  {
    v113 = (_QWORD *)operator new();
    v114 = *(_QWORD *)(v61 + 1528);
    v113[1] = 0;
    v115 = v113 + 1;
    *v113 = &off_1E25231F0;
    v113[2] = 0;
    v113[3] = v114;
    v116 = v61 + 1464;
    *(_QWORD *)(v61 + 1464) = v113;
    *(_QWORD *)(v61 + 1424) = v114;
    v117 = v61 + 1432;
    *(_QWORD *)(v61 + 1432) = v113;
    do
      v118 = __ldxr(v115);
    while (__stxr(v118 + 1, v115));
    v119 = v69;
  }
  else
  {
    v119 = v69;
    v116 = v61 + 1464;
    *(_QWORD *)(v61 + 1464) = 0;
    v117 = v61 + 1432;
    *v62 = 0;
    v62[1] = 0;
  }
  *(_QWORD *)(v61 + 1584) = v116;
  *(_QWORD *)(v61 + 1576) = v117;
  AMSCore::MetricsEventModifierProvider::getOverrideForEvent((_OWORD *)v281, *(_QWORD **)(v61 + 1536), (uint64_t)v62);
  v120 = *(_OWORD *)(v61 + 720);
  v269[29] = v120;
  *(_QWORD *)v281 = 0;
  *(_QWORD *)(v281 + 8) = 0;
  v121 = atomic_load((unint64_t *)(v120 + 304));
  v122 = v119;
  if (v121)
    goto LABEL_103;
  *v272 = 1;
  v123 = (unint64_t *)(*(_QWORD *)(v61 + 1592) + 304);
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v61, v123));
  if (v124)
  {
LABEL_103:
    AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(v111, *(_QWORD *)(v61 + 1592));
    v125 = *(_QWORD *)(v61 + 1600);
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        v128 = *(std::__shared_weak_count **)(v61 + 1600);
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    v129 = *(std::__shared_weak_count **)(v61 + 728);
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = **(std::__shared_weak_count ***)(v61 + 1576);
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    *(_OWORD *)v281 = *(_OWORD *)(v61 + 256);
    *(_BYTE *)(v61 + 736) = 0;
    *(_BYTE *)(v61 + 888) = 0;
    if (*(_BYTE *)(v61 + 424))
    {
      AMSCore::URL::URL((std::string *)(v61 + 736), (const AMSCore::URL *)(v61 + 272));
      *(_BYTE *)(v61 + 888) = 1;
    }
    v135 = (_QWORD *)(v61 + 192);
    v136 = *(_QWORD *)(v61 + 192);
    v137 = *(_QWORD *)(v61 + 1456);
    *v63 = *(_OWORD *)v111;
    *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(v111 + 12);
    v138 = v61 + 480;
    *(_QWORD *)(v61 + 472) = *(_QWORD *)(v61 + 184);
    *(_QWORD *)(v61 + 480) = v136;
    v139 = *(_QWORD *)(v61 + 200);
    *(_QWORD *)(v61 + 488) = v139;
    if (v139)
    {
      *(_QWORD *)(v136 + 16) = v138;
      *(_QWORD *)(v61 + 184) = v135;
      *v135 = 0;
      *(_QWORD *)(v61 + 200) = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 472) = v138;
    }
    v140 = (_QWORD *)(v61 + 216);
    v141 = *(_QWORD *)(v61 + 216);
    v142 = v61 + 504;
    *(_QWORD *)(v61 + 496) = *(_QWORD *)(v61 + 208);
    *(_QWORD *)(v61 + 504) = v141;
    v143 = *(_QWORD *)(v61 + 224);
    *(_QWORD *)(v61 + 512) = v143;
    if (v143)
    {
      *(_QWORD *)(v141 + 16) = v142;
      *(_QWORD *)(v61 + 208) = v140;
      *v140 = 0;
      *(_QWORD *)(v61 + 224) = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 496) = v142;
    }
    v144 = (_QWORD *)(v61 + 240);
    v145 = *(_QWORD *)(v61 + 240);
    v146 = v61 + 528;
    *(_QWORD *)(v61 + 520) = *(_QWORD *)(v61 + 232);
    *(_QWORD *)(v61 + 528) = v145;
    v147 = *(_QWORD *)(v61 + 248);
    *(_QWORD *)(v61 + 536) = v147;
    if (v147)
    {
      *(_QWORD *)(v145 + 16) = v146;
      *(_QWORD *)(v61 + 232) = v144;
      *v144 = 0;
      *(_QWORD *)(v61 + 248) = 0;
    }
    else
    {
      *(_QWORD *)(v61 + 520) = v146;
    }
    *(_OWORD *)(v61 + 544) = *(_OWORD *)(v61 + 256);
    *(_BYTE *)(v61 + 560) = 0;
    *(_BYTE *)(v61 + 712) = 0;
    if (*(_BYTE *)(v61 + 424))
    {
      *(_BYTE *)(v61 + 584) = 0;
      if (*(_BYTE *)(v61 + 296))
      {
        *(_OWORD *)(v61 + 560) = *(_OWORD *)(v61 + 272);
        *(_QWORD *)(v61 + 576) = *(_QWORD *)(v61 + 288);
        *(_QWORD *)(v61 + 280) = 0;
        *(_QWORD *)(v61 + 288) = 0;
        *(_QWORD *)(v61 + 272) = 0;
        *(_BYTE *)(v61 + 584) = 1;
      }
      *(_BYTE *)(v61 + 592) = 0;
      *(_BYTE *)(v61 + 616) = 0;
      if (*(_BYTE *)(v61 + 328))
      {
        *(_OWORD *)(v61 + 592) = *(_OWORD *)(v61 + 304);
        *(_QWORD *)(v61 + 608) = *(_QWORD *)(v61 + 320);
        *(_QWORD *)(v61 + 312) = 0;
        *(_QWORD *)(v61 + 320) = 0;
        *(_QWORD *)(v61 + 304) = 0;
        *(_BYTE *)(v61 + 616) = 1;
      }
      *(_BYTE *)(v61 + 624) = 0;
      *(_BYTE *)(v61 + 648) = 0;
      if (*(_BYTE *)(v61 + 360))
      {
        *(_OWORD *)(v61 + 624) = *(_OWORD *)(v61 + 336);
        *(_QWORD *)(v61 + 640) = *(_QWORD *)(v61 + 352);
        *(_QWORD *)(v61 + 344) = 0;
        *(_QWORD *)(v61 + 352) = 0;
        *(_QWORD *)(v61 + 336) = 0;
        *(_BYTE *)(v61 + 648) = 1;
      }
      *(_DWORD *)(v61 + 656) = *(_DWORD *)(v61 + 368);
      *(_QWORD *)(v61 + 664) = v61 + 664;
      *(_QWORD *)(v61 + 672) = v61 + 664;
      *(_QWORD *)(v61 + 680) = 0;
      v148 = *(_QWORD *)(v61 + 392);
      if (v148)
      {
        v150 = *(_QWORD *)(v61 + 376);
        v149 = *(uint64_t **)(v61 + 384);
        v151 = *v149;
        *(_QWORD *)(v151 + 8) = *(_QWORD *)(v150 + 8);
        **(_QWORD **)(v150 + 8) = v151;
        v152 = *(_QWORD *)(v61 + 664);
        *(_QWORD *)(v152 + 8) = v149;
        *v149 = v152;
        *(_QWORD *)(v61 + 664) = v150;
        *(_QWORD *)(v150 + 8) = v61 + 664;
        *(_QWORD *)(v61 + 680) = v148;
        *(_QWORD *)(v61 + 392) = 0;
      }
      *(_OWORD *)(v61 + 688) = *(_OWORD *)(v61 + 400);
      *(_QWORD *)(v61 + 704) = *(_QWORD *)(v61 + 416);
      *(_QWORD *)(v61 + 408) = 0;
      *(_QWORD *)(v61 + 416) = 0;
      *(_QWORD *)(v61 + 400) = 0;
      *(_BYTE *)(v61 + 712) = 1;
    }
    AMSCore::IMetricsProvider::Event::takeProperties((_OWORD *)v64, v137, (uint64_t)v63);
    v153 = *(_OWORD *)(v61 + 1072);
    v269[30] = v153;
    *(_QWORD *)v64 = 0;
    *(_QWORD *)(v64 + 8) = 0;
    if (atomic_load((unint64_t *)(v153 + 40)))
      goto LABEL_104;
    *v272 = 2;
    v155 = (unint64_t *)(*(_QWORD *)(v61 + 1608) + 40);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v61, v155));
    if (v156)
    {
LABEL_104:
      v157 = *(_QWORD *)(v61 + 1608);
      if (!*(_BYTE *)(v157 + 32))
        goto LABEL_300;
      v158 = (_QWORD *)(v157 + 16);
      v159 = *(_QWORD *)(v157 + 16);
      *(_QWORD *)(v61 + 1400) = *(_QWORD *)(v157 + 8);
      v160 = (_QWORD *)(v61 + 1408);
      *(_QWORD *)(v61 + 1408) = v159;
      v161 = *(_QWORD *)(v157 + 24);
      *(_QWORD *)(v61 + 1416) = v161;
      if (v161)
      {
        *(_QWORD *)(v159 + 16) = v160;
        *(_QWORD *)(v157 + 8) = v158;
        *v158 = 0;
        *(_QWORD *)(v157 + 24) = 0;
        v162 = *(_QWORD *)(v61 + 1616);
        if (!v162)
          goto LABEL_113;
      }
      else
      {
        *v282 = v160;
        v162 = *(_QWORD *)(v61 + 1616);
        if (!v162)
          goto LABEL_113;
      }
      v163 = (unint64_t *)(v162 + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        v165 = *(std::__shared_weak_count **)(v61 + 1616);
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
LABEL_113:
      v166 = *(std::__shared_weak_count **)(v61 + 1080);
      if (v166)
      {
        v167 = (unint64_t *)&v166->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      if (*(_BYTE *)(v61 + 712))
        AMSCore::URL::~URL((AMSCore::URL *)(v61 + 560));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v61 + 528));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v61 + 504));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v61 + 480));
      v169 = *(_QWORD *)(v61 + 1288);
      if (v169 >= *(_QWORD *)(v61 + 1296))
      {
        v173 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>((char **)v283, v282);
      }
      else
      {
        *(_QWORD *)v169 = *(_QWORD *)(v61 + 1400);
        v170 = *(_QWORD *)(v61 + 1408);
        *(_QWORD *)(v169 + 8) = v170;
        v171 = v169 + 8;
        v172 = *(_QWORD *)(v61 + 1416);
        *(_QWORD *)(v169 + 16) = v172;
        if (v172)
        {
          *(_QWORD *)(v170 + 16) = v171;
          *v282 = v160;
          *v160 = 0;
          *(_QWORD *)(v61 + 1416) = 0;
        }
        else
        {
          *(_QWORD *)v169 = v171;
        }
        *(_DWORD *)(v169 + 24) = 8;
        v173 = (char *)(v169 + 32);
      }
      *(_QWORD *)(v61 + 1288) = v173;
      if (*(char *)(v61 + 1399) < 0)
      {
        std::string::__init_copy_ctor_external(v271, *(const std::string::value_type **)(v61 + 1376), *(_QWORD *)(v61 + 1384));
        v173 = *(char **)(v61 + 1288);
      }
      else
      {
        *(_OWORD *)&v271->__r_.__value_.__l.__data_ = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
        v271->__r_.__value_.__r.__words[2] = v279->__r_.__value_.__r.__words[2];
      }
      *(_QWORD *)(v61 + 1304) = *(_QWORD *)(v61 + 1280);
      *(_QWORD *)(v61 + 1312) = v173;
      *(_QWORD *)(v61 + 1320) = *(_QWORD *)(v61 + 1296);
      *(_QWORD *)(v283 + 8) = 0;
      *(_QWORD *)(v283 + 16) = 0;
      *(_QWORD *)v283 = 0;
      *(_QWORD *)(v61 + 1248) = *(_QWORD *)(v61 + 1216);
      v174 = *(_QWORD *)(v61 + 1224);
      *(_QWORD *)(v61 + 1256) = v174;
      if (v174)
      {
        v175 = (unint64_t *)(v174 + 8);
        do
          v176 = __ldxr(v175);
        while (__stxr(v176 + 1, v175));
      }
      *(_QWORD *)(v61 + 1264) = *(_QWORD *)(v61 + 1232);
      v177 = *(_QWORD *)(v61 + 1240);
      *(_QWORD *)(v61 + 1272) = v177;
      if (v177)
      {
        v178 = (unint64_t *)(v177 + 8);
        do
          v179 = __ldxr(v178);
        while (__stxr(v179 + 1, v178));
      }
      *(_OWORD *)(v61 + 1472) = *(_OWORD *)(v61 + 1488);
      *v278 = 0;
      v278[1] = 0;
      *v277 = *(_OWORD *)v281;
      *(_BYTE *)(v61 + 912) = 0;
      *(_BYTE *)(v61 + 1064) = 0;
      if (*(_BYTE *)(v61 + 888))
      {
        *(_BYTE *)(v61 + 936) = 0;
        if (*(_BYTE *)(v61 + 760))
        {
          *(_OWORD *)(v61 + 912) = *(_OWORD *)(v61 + 736);
          *(_QWORD *)(v61 + 928) = *(_QWORD *)(v61 + 752);
          *(_QWORD *)(v61 + 736) = 0;
          *(_QWORD *)(v61 + 752) = 0;
          *(_QWORD *)(v61 + 744) = 0;
          *(_BYTE *)(v61 + 936) = 1;
        }
        *(_BYTE *)(v61 + 944) = 0;
        *(_BYTE *)(v61 + 968) = 0;
        if (*(_BYTE *)(v61 + 792))
        {
          *(_OWORD *)(v61 + 944) = *(_OWORD *)(v61 + 768);
          *(_QWORD *)(v61 + 960) = *(_QWORD *)(v61 + 784);
          *(_QWORD *)(v61 + 768) = 0;
          *(_QWORD *)(v61 + 784) = 0;
          *(_QWORD *)(v61 + 776) = 0;
          *(_BYTE *)(v61 + 968) = 1;
        }
        *(_BYTE *)(v61 + 976) = 0;
        *(_BYTE *)(v61 + 1000) = 0;
        if (*(_BYTE *)(v61 + 824))
        {
          *(_OWORD *)(v61 + 976) = *(_OWORD *)(v61 + 800);
          *(_QWORD *)(v61 + 992) = *(_QWORD *)(v61 + 816);
          *(_QWORD *)(v61 + 800) = 0;
          *(_QWORD *)(v61 + 816) = 0;
          *(_QWORD *)(v61 + 808) = 0;
          *(_BYTE *)(v61 + 1000) = 1;
        }
        *(_DWORD *)(v61 + 1008) = *(_DWORD *)(v61 + 832);
        *(_QWORD *)(v61 + 1016) = v61 + 1016;
        *(_QWORD *)(v61 + 1024) = v61 + 1016;
        *(_QWORD *)(v61 + 1032) = 0;
        v180 = *(_QWORD *)(v61 + 856);
        if (v180)
        {
          v181 = *(uint64_t **)(v61 + 848);
          v182 = *(_QWORD *)(v61 + 840);
          v183 = *v181;
          *(_QWORD *)(v183 + 8) = *(_QWORD *)(v182 + 8);
          **(_QWORD **)(v182 + 8) = v183;
          v184 = *(_QWORD *)(v61 + 1016);
          *(_QWORD *)(v184 + 8) = v181;
          *v181 = v184;
          *(_QWORD *)(v61 + 1016) = v182;
          *(_QWORD *)(v182 + 8) = v61 + 1016;
          *(_QWORD *)(v61 + 1032) = v180;
          *(_QWORD *)(v61 + 856) = 0;
        }
        *(_OWORD *)(v61 + 1040) = *(_OWORD *)(v61 + 864);
        *(_QWORD *)(v61 + 1056) = *(_QWORD *)(v61 + 880);
        *(_QWORD *)(v61 + 864) = 0;
        *(_QWORD *)(v61 + 880) = 0;
        *(_QWORD *)(v61 + 872) = 0;
        *(_BYTE *)(v61 + 1064) = 1;
      }
      *(_QWORD *)(v61 + 1520) = *(_QWORD *)(v61 + 1552);
      *v273 = 0;
      v273[1] = 0;
      v185 = *(_OWORD *)(v61 + 1440);
      v269[31] = v185;
      v275->__vftable = 0;
      v275->__imp_.__imp_ = 0;
      if (atomic_load((unint64_t *)(v185 + 96)))
        goto LABEL_149;
      *v272 = 3;
      v187 = (unint64_t *)(*(_QWORD *)(v61 + 1624) + 96);
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v61, v187));
      if (v188)
      {
LABEL_149:
        v189 = *(_QWORD *)(v61 + 1624);
        if (*(_BYTE *)(v189 + 88))
        {
          v190 = (const std::runtime_error *)(v189 + 8);
          v191 = *(_BYTE *)(v189 + 80);
          if (v191)
          {
            *(_DWORD *)v64 = v190->__vftable;
          }
          else
          {
            std::runtime_error::runtime_error((std::runtime_error *)v64, v190);
            *(_OWORD *)(v61 + 1088) = *(_OWORD *)(v189 + 24);
            *(_QWORD *)(v61 + 1072) = off_1E2521330;
            v192 = (_QWORD *)(v189 + 48);
            v193 = *(_QWORD *)(v189 + 48);
            *(_QWORD *)(v61 + 1104) = *(_QWORD *)(v189 + 40);
            v194 = v61 + 1112;
            *(_QWORD *)(v61 + 1112) = v193;
            v195 = *(_QWORD *)(v189 + 56);
            *(_QWORD *)(v61 + 1120) = v195;
            if (v195)
            {
              *(_QWORD *)(v193 + 16) = v194;
              *(_QWORD *)(v189 + 40) = v192;
              *v192 = 0;
              *(_QWORD *)(v189 + 56) = 0;
            }
            else
            {
              *(_QWORD *)(v61 + 1104) = v194;
            }
            v196 = *(_QWORD *)(v61 + 1624);
            *v269 = *(_OWORD *)(v196 + 64);
            *(_QWORD *)(v196 + 64) = 0;
            *(_QWORD *)(v196 + 72) = 0;
          }
          *(_BYTE *)(v61 + 1144) = v191;
          v197 = *(_QWORD *)(v61 + 1632);
          if (v197)
          {
            v198 = (unint64_t *)(v197 + 8);
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              v200 = *(std::__shared_weak_count **)(v61 + 1632);
              ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
              std::__shared_weak_count::__release_weak(v200);
            }
          }
          v201 = *(std::__shared_weak_count **)(v61 + 1448);
          if (v201)
          {
            v202 = (unint64_t *)&v201->__shared_owners_;
            do
              v203 = __ldaxr(v202);
            while (__stlxr(v203 - 1, v202));
            if (!v203)
            {
              ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
              std::__shared_weak_count::__release_weak(v201);
            }
          }
          v204 = *(std::__shared_weak_count **)(v61 + 1512);
          if (v204)
          {
            v205 = (unint64_t *)&v204->__shared_owners_;
            do
              v206 = __ldaxr(v205);
            while (__stlxr(v206 - 1, v205));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
            }
          }
          v207 = *v122;
          *v122 = 0;
          if (v207)
            (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
          if (*(_BYTE *)(v61 + 1064))
            AMSCore::URL::~URL((AMSCore::URL *)(v61 + 912));
          v208 = *(std::__shared_weak_count **)(v61 + 1480);
          if (v208)
          {
            v209 = (unint64_t *)&v208->__shared_owners_;
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
            }
          }
          v211 = *(std::__shared_weak_count **)(v61 + 1272);
          if (v211)
          {
            v212 = (unint64_t *)&v211->__shared_owners_;
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          v214 = *(std::__shared_weak_count **)(v61 + 1256);
          if (!v214)
            goto LABEL_189;
          v215 = (unint64_t *)&v214->__shared_owners_;
          do
            v216 = __ldaxr(v215);
          while (__stlxr(v216 - 1, v215));
          if (!v216)
          {
            ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
            std::__shared_weak_count::__release_weak(v214);
            v217 = *v270;
            if (!*v270)
              goto LABEL_197;
          }
          else
          {
LABEL_189:
            v217 = *v270;
            if (!*v270)
              goto LABEL_197;
          }
          v218 = *(_QWORD *)(v61 + 1312);
          v219 = (void *)v217;
          if (v218 != v217)
          {
            do
            {
              v220 = v218 - 32;
              v221 = *(unsigned int *)(v218 - 8);
              if ((_DWORD)v221 != -1)
                ((void (*)(uint64_t, uint64_t))off_1E253D240[v221])(v70 - 168, v218 - 32);
              *(_DWORD *)(v218 - 8) = -1;
              v218 -= 32;
            }
            while (v220 != v217);
            v219 = (void *)*v270;
            p_data = (void **)&v271->__r_.__value_.__l.__data_;
          }
          *(_QWORD *)(v61 + 1312) = v217;
          operator delete(v219);
LABEL_197:
          if (*(char *)(v61 + 1351) < 0)
          {
            operator delete(*p_data);
            if (*(_BYTE *)(v61 + 1144))
            {
LABEL_199:
              *(_BYTE *)(v70 - 96) = 1;
              v222 = v280;
              if (!*(_BYTE *)(v61 + 104) || *(_BYTE *)(v61 + 96))
              {
                LOBYTE(v223) = 1;
LABEL_202:
                *(_BYTE *)(v61 + 96) = v223;
                *(_BYTE *)(v61 + 104) = 1;
                goto LABEL_232;
              }
              (**(void (***)(uint64_t))(v61 + 24))(v61 + 24);
              v223 = *(unsigned __int8 *)(v70 - 96);
              *(_BYTE *)(v61 + 104) = 0;
              if (v223)
                goto LABEL_202;
              std::runtime_error::runtime_error((std::runtime_error *)(v61 + 24), (const std::runtime_error *)(v70 - 168));
              v227 = *(_OWORD *)(v70 - 152);
              v229 = *(_QWORD *)(v70 - 136);
              v228 = *(_QWORD *)(v70 - 128);
              *(_QWORD *)(v61 + 64) = v228;
              v230 = v61 + 64;
              *(_OWORD *)(v61 + 40) = v227;
              *(_QWORD *)(v61 + 24) = off_1E2521330;
              *(_QWORD *)(v61 + 56) = v229;
              v231 = *(_QWORD *)(v70 - 120);
              *(_QWORD *)(v61 + 72) = v231;
              if (v231)
              {
                *(_QWORD *)(v228 + 16) = v230;
                *(_QWORD *)(v70 - 136) = v70 - 128;
                *(_QWORD *)(v70 - 128) = 0;
                *(_QWORD *)(v70 - 120) = 0;
              }
              else
              {
                *(_QWORD *)(v61 + 56) = v230;
              }
              *(_OWORD *)(v61 + 80) = v296;
              *(_QWORD *)(v70 - 112) = 0;
              *(_QWORD *)(v70 - 104) = 0;
              v268 = *(unsigned __int8 *)(v70 - 96);
              *(_BYTE *)(v61 + 96) = 0;
              *(_BYTE *)(v61 + 104) = 1;
              if (!v268)
                (**(void (***)(uint64_t))(v70 - 168))(v70 - 168);
LABEL_232:
              if (!*(_BYTE *)(v61 + 1144))
                (**(void (***)(uint64_t))v64)(v64);
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v282, *(unsigned int **)(v61 + 1408));
              if (*(_BYTE *)(v61 + 888))
                AMSCore::URL::~URL((AMSCore::URL *)(v61 + 736));
              if (*(_BYTE *)(v61 + 424))
                AMSCore::URL::~URL((AMSCore::URL *)(v61 + 272));
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v61 + 240));
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v61 + 216));
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v61 + 192));
              v241 = **(std::__shared_weak_count ***)(v61 + 1584);
              if (v241)
              {
                v242 = (unint64_t *)&v241->__shared_owners_;
                do
                  v243 = __ldaxr(v242);
                while (__stlxr(v243 - 1, v242));
                if (!v243)
                {
                  ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                  std::__shared_weak_count::__release_weak(v241);
                }
              }
              v244 = *(char **)v283;
              if (*(_QWORD *)v283)
              {
                v245 = *(char **)(v61 + 1288);
                v246 = *(char **)v283;
                if (v245 != v244)
                {
                  do
                  {
                    v247 = v245 - 32;
                    v248 = *((unsigned int *)v245 - 2);
                    if ((_DWORD)v248 != -1)
                      ((void (*)(uint64_t, char *))off_1E253D240[v248])(v70 - 168, v245 - 32);
                    *((_DWORD *)v245 - 2) = -1;
                    v245 -= 32;
                  }
                  while (v247 != v244);
                  v246 = *(char **)v283;
                }
                *(_QWORD *)(v61 + 1288) = v244;
                operator delete(v246);
              }
              if (*(char *)(v61 + 1399) < 0)
                operator delete(v279->__r_.__value_.__l.__data_);
              v249 = 0;
              v250 = 0;
              v104 = 3;
              v251 = *(std::__shared_weak_count **)(v61 + 1496);
              if (!v251)
              {
LABEL_258:
                if (v104 == 3)
                {
                  *(_QWORD *)(v61 + 1648) = v250;
                  *(_QWORD *)(v61 + 1640) = v249;
                  *(_QWORD *)(v61 + 152) = v222;
                  *(_QWORD *)v61 = 0;
                  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v111);
                  return;
                }
                v254 = *(_QWORD **)(v61 + 144);
                if (v254 == (_QWORD *)(v61 + 120))
                {
                  v255 = 4;
                  v254 = (_QWORD *)(v61 + 120);
                }
                else
                {
                  if (!v254)
                    goto LABEL_265;
                  v255 = 5;
                }
                (*(void (**)(void))(*v254 + 8 * v255))();
LABEL_265:
                if (*(_BYTE *)(v61 + 104) && !*(_BYTE *)(v61 + 96))
                  (**(void (***)(uint64_t))(v61 + 24))(v61 + 24);
                do
                {
                  v256 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
                  v257 = v256 - 1;
                }
                while (__stlxr(v257, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
                if (!v257)
                  MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
                if (v249)
                  (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
                v258 = *(_QWORD *)(v61 + 1544);
                if (v258)
                {
                  v259 = (unint64_t *)(v258 + 8);
                  do
                    v260 = __ldaxr(v259);
                  while (__stlxr(v260 - 1, v259));
                  if (!v260)
                  {
                    v261 = *(std::__shared_weak_count **)(v61 + 1544);
                    ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                    std::__shared_weak_count::__release_weak(v261);
                  }
                }
                v262 = *(std::__shared_weak_count **)(v61 + 1240);
                if (v262)
                {
                  v263 = (unint64_t *)&v262->__shared_owners_;
                  do
                    v264 = __ldaxr(v263);
                  while (__stlxr(v264 - 1, v263));
                  if (!v264)
                  {
                    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                    std::__shared_weak_count::__release_weak(v262);
                  }
                }
                v265 = *(std::__shared_weak_count **)(v61 + 1224);
                if (v265)
                {
                  v266 = (unint64_t *)&v265->__shared_owners_;
                  do
                    v267 = __ldaxr(v266);
                  while (__stlxr(v267 - 1, v266));
                  if (!v267)
                  {
                    ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                    std::__shared_weak_count::__release_weak(v265);
                  }
                }
                if (v250)
                  (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
                operator delete((void *)v61);
                return;
              }
LABEL_254:
              v252 = (unint64_t *)&v251->__shared_owners_;
              do
                v253 = __ldaxr(v252);
              while (__stlxr(v253 - 1, v252));
              if (!v253)
              {
                ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                std::__shared_weak_count::__release_weak(v251);
              }
              goto LABEL_258;
            }
          }
          else if (*(_BYTE *)(v61 + 1144))
          {
            goto LABEL_199;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(v70 - 168), (const std::runtime_error *)v64);
          *(_OWORD *)(v70 - 152) = *(_OWORD *)(v61 + 1088);
          *(_QWORD *)(v70 - 168) = off_1E2521330;
          v224 = (_QWORD *)(v70 - 128);
          v225 = *(_QWORD *)(v61 + 1112);
          *(_QWORD *)(v70 - 136) = *(_QWORD *)(v61 + 1104);
          *(_QWORD *)(v70 - 128) = v225;
          v226 = *(_QWORD *)(v61 + 1120);
          *(_QWORD *)(v70 - 120) = v226;
          if (v226)
          {
            *(_QWORD *)(v225 + 16) = v224;
            *(_QWORD *)(v61 + 1104) = v61 + 1112;
            *(_QWORD *)(v61 + 1112) = 0;
            *(_QWORD *)(v61 + 1120) = 0;
          }
          else
          {
            *(_QWORD *)(v70 - 136) = v224;
          }
          v296 = *v269;
          *(_QWORD *)v269 = 0;
          *((_QWORD *)v269 + 1) = 0;
          *(_BYTE *)(v70 - 96) = 1;
          std::runtime_error::runtime_error(&v284, (const std::runtime_error *)(v70 - 168));
          v285 = *(_OWORD *)(v70 - 152);
          v284.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v232 = *(_QWORD *)(v70 - 128);
          v286 = *(uint64_t **)(v70 - 136);
          v287 = v232;
          v288 = *(_QWORD *)(v70 - 120);
          if (v288)
          {
            *(_QWORD *)(v232 + 16) = &v287;
            *(_QWORD *)(v70 - 136) = v224;
            *v224 = 0;
            *(_QWORD *)(v70 - 120) = 0;
          }
          else
          {
            v286 = &v287;
          }
          v289 = v296;
          *(_QWORD *)(v70 - 112) = 0;
          *(_QWORD *)(v70 - 104) = 0;
          std::runtime_error::runtime_error(&v290, &v284);
          v291 = v285;
          v290.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v233 = (unsigned int *)v287;
          v292 = v286;
          v293 = v287;
          v294 = v288;
          if (v288)
          {
            *(_QWORD *)(v287 + 16) = &v293;
            v233 = 0;
            v286 = &v287;
            v287 = 0;
            v288 = 0;
          }
          else
          {
            v292 = &v293;
          }
          v295 = v289;
          v289 = 0uLL;
          v284.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v286, v233);
          MEMORY[0x18D7898AC](&v284);
          if (*(_BYTE *)(v61 + 104))
          {
            if (!*(_BYTE *)(v61 + 96))
              (**(void (***)(uint64_t))(v61 + 24))(v61 + 24);
            *(_BYTE *)(v61 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(v61 + 24), &v290);
          v235 = v292;
          v234 = v293;
          *(_QWORD *)(v61 + 64) = v293;
          v236 = v61 + 64;
          *(_OWORD *)(v61 + 40) = v291;
          *(_QWORD *)(v61 + 24) = off_1E2521330;
          *(_QWORD *)(v61 + 56) = v235;
          v237 = v294;
          *(_QWORD *)(v61 + 72) = v294;
          if (v237)
          {
            *(_QWORD *)(v234 + 16) = v236;
            v234 = 0;
            v292 = &v293;
            v293 = 0;
            v294 = 0;
          }
          else
          {
            *(_QWORD *)(v61 + 56) = v236;
          }
          v222 = v280;
          *(_OWORD *)(v61 + 80) = v295;
          v295 = 0uLL;
          *(_BYTE *)(v61 + 96) = 0;
          *(_BYTE *)(v61 + 104) = 1;
          v290.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v292, (unsigned int *)v234);
          MEMORY[0x18D7898AC](&v290);
          if (*(_BYTE *)(v70 - 96))
          {
            *(_QWORD *)(v70 - 168) = off_1E2521330;
            v238 = *(std::__shared_weak_count **)(v70 - 104);
            if (v238)
            {
              v239 = (unint64_t *)&v238->__shared_owners_;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 - 1, v239));
              if (!v240)
              {
                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                std::__shared_weak_count::__release_weak(v238);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v70 - 136, *(unsigned int **)(v70 - 128));
            MEMORY[0x18D7898AC](v70 - 168);
          }
          goto LABEL_232;
        }
LABEL_300:
        __break(1u);
      }
    }
  }
}

void sub_18CCBFE18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a20);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCBFEFC()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCBFC04);
}

void AMSCore::UploadMetricsEventTask::internal::perform(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  if (*(_QWORD *)a1)
    __asm { BR              X10 }
  v2 = *((_QWORD *)a1 + 206);
  v3 = *((_QWORD *)a1 + 205);
  v4 = (char *)*((_QWORD *)a1 + 18);
  if (v4 == a1 + 120)
  {
    v5 = 4;
    v4 = a1 + 120;
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  if (a1[104] && !a1[96])
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v8 = *((_QWORD *)a1 + 193);
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 193);
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 155);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)a1 + 153);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(a1);
}

void sub_18CCC0440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  v15 = *(_QWORD *)(v13 + 1632);
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      v18 = *(std::__shared_weak_count **)(v13 + 1632);
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v19 = *(std::__shared_weak_count **)(v13 + 1448);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(std::__shared_weak_count **)(v13 + 1512);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(_QWORD *)(v13 + 1520);
  *(_QWORD *)(v13 + 1520) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (*(_BYTE *)(v13 + 1064))
    AMSCore::URL::~URL((AMSCore::URL *)(v13 + 912));
  v26 = *(std::__shared_weak_count **)(v13 + 1480);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(std::__shared_weak_count **)(v13 + 1272);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(std::__shared_weak_count **)(v13 + 1256);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(_QWORD *)(v13 + 1304);
  if (v35)
  {
    v36 = *(_QWORD *)(v13 + 1312);
    v37 = *(void **)(v13 + 1304);
    if (v36 != v35)
    {
      do
      {
        v38 = v36 - 32;
        v39 = *(unsigned int *)(v36 - 8);
        if ((_DWORD)v39 != -1)
          ((void (*)(char *, uint64_t))off_1E253D240[v39])(&a13, v36 - 32);
        *(_DWORD *)(v36 - 8) = -1;
        v36 -= 32;
      }
      while (v38 != v35);
      v37 = *(void **)(v13 + 1304);
    }
    *(_QWORD *)(v13 + 1312) = v35;
    operator delete(v37);
  }
  if (*(char *)(v13 + 1351) < 0)
    operator delete(*(void **)(v13 + 1328));
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v14, *(unsigned int **)(v13 + 1408));
  if (!*(_BYTE *)(v13 + 888))
    JUMPOUT(0x18CCC01D0);
  JUMPOUT(0x18CCC01C8);
}

_BYTE *AMSCore::UploadMetricsEventTask::`anonymous namespace'::getAccount(std::runtime_error *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  _DWORD *v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  std::runtime_error *v18;
  std::runtime_error *v19;
  std::string *v20;
  uint64_t *v21;
  void **p_data;
  _BYTE *result;
  __int128 v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  const std::runtime_error *v29;
  char v30;
  std::runtime_error_vtbl *v31;
  _BYTE *v32;
  _QWORD *v33;
  std::runtime_error_vtbl *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void **v39;
  __int128 v40;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  const std::runtime_error *v45;
  char v46;
  std::runtime_error_vtbl *v47;
  _BYTE *v48;
  _QWORD *v49;
  std::runtime_error_vtbl *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  std::runtime_error *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::runtime_error_vtbl *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *imp;
  unint64_t *v87;
  unint64_t v88;
  unsigned int *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *v101;
  std::string *v102;
  uint64_t *v103;
  std::runtime_error *v104;
  uint64_t v105;
  std::runtime_error *v106;
  uint64_t v107;
  std::runtime_error *v108;
  std::runtime_error v109;
  __int128 v110;
  unsigned int **v111;
  unsigned int *v112[2];
  __int128 v113;
  std::runtime_error v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  __int128 v119;
  char v120;
  std::runtime_error v121;
  __int128 v122;
  unsigned int **v123;
  unsigned int *v124;
  unsigned int *v125;
  __int128 v126;

  v6 = (char *)operator new(0x268uLL);
  v7 = (unint64_t)v6;
  v8 = v6 + 600;
  v107 = (uint64_t)(v6 + 16);
  v6[392] = 0;
  v6[416] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)(v6 + 392) = *(_OWORD *)a2;
    *((_QWORD *)v6 + 51) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v6[416] = 1;
  }
  v105 = (uint64_t)(v6 + 392);
  v108 = (std::runtime_error *)(v6 + 232);
  *((_QWORD *)v6 + 53) = *(_QWORD *)(a2 + 32);
  v106 = (std::runtime_error *)(v6 + 312);
  v101 = (std::string *)(v6 + 520);
  v102 = (std::string *)(v6 + 456);
  v9 = v6 + 544;
  *((_OWORD *)v6 + 27) = *(_OWORD *)(a2 + 40);
  v10 = v6 + 560;
  v103 = (uint64_t *)(v6 + 576);
  v104 = (std::runtime_error *)(v6 + 152);
  v11 = v6 + 432;
  *((_QWORD *)v6 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = *(const std::string::value_type **)a3;
  v12 = *(_QWORD *)(a3 + 8);
  *((_QWORD *)v6 + 74) = *(_QWORD *)a3;
  *v8 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v6 + 603) = *(_DWORD *)(a3 + 19);
  v14 = *(char *)(a3 + 23);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v6[608] = v14;
  do
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v15 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v114, v107);
  *a1 = v114;
  v108->__vftable = 0;
  v108->__imp_.__imp_ = 0;
  *(_BYTE *)(v7 + 304) = 1;
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v103);
  LOBYTE(v114.__vftable) = 0;
  BYTE8(v115) = 0;
  v116 = -1;
  v117 = 7824750;
  BYTE7(v119) = 3;
  AMSCore::operator==(v105, (uint64_t)&v114);
  v16 = *v103;
  if (!v17)
  {
    *(_BYTE *)(v7 + 456) = 0;
    *(_BYTE *)(v7 + 480) = 0;
    v21 = (uint64_t *)v106;
    p_data = (void **)&v102->__r_.__value_.__l.__data_;
    if (*(_BYTE *)(v7 + 416))
    {
      if (*(char *)(v7 + 415) < 0)
      {
        std::string::__init_copy_ctor_external(v102, *(const std::string::value_type **)(v7 + 392), *(_QWORD *)(v7 + 400));
      }
      else
      {
        *(_OWORD *)&v102->__r_.__value_.__l.__data_ = *(_OWORD *)v105;
        v102->__r_.__value_.__r.__words[2] = *(_QWORD *)(v105 + 16);
      }
      *(_BYTE *)(v7 + 480) = 1;
    }
    *(_QWORD *)(v7 + 488) = *(_QWORD *)(v7 + 424);
    v39 = (void **)(v7 + 496);
    if (*(char *)(v7 + 455) < 0)
    {
      v18 = v104;
      std::string::__init_copy_ctor_external((std::string *)(v7 + 496), *(const std::string::value_type **)(v7 + 432), *(_QWORD *)(v7 + 440));
    }
    else
    {
      *(_OWORD *)v39 = *v11;
      *(_QWORD *)(v7 + 512) = *(_QWORD *)(v7 + 448);
      v18 = v104;
    }
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 56))(v16, v102);
    v40 = *(_OWORD *)(v7 + 560);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v7 + 568) = 0;
    *(_OWORD *)(v7 + 544) = v40;
    if (!atomic_load((unint64_t *)(v40 + 96)))
    {
      *(_BYTE *)(v7 + 607) = 1;
      v42 = (unint64_t *)(*(_QWORD *)(v7 + 544) + 96);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v7, v42));
      if (!v43)
        return result;
    }
    v44 = *(_QWORD *)v9;
    if (!*(_BYTE *)(*(_QWORD *)v9 + 88))
      goto LABEL_148;
    v45 = (const std::runtime_error *)(v44 + 8);
    v46 = *(_BYTE *)(v44 + 80);
    if (v46)
    {
      v47 = v45->__vftable;
      v45->__vftable = 0;
      *(_QWORD *)(v7 + 312) = v47;
      v48 = (_BYTE *)(v7 + 384);
      *(_BYTE *)(v7 + 384) = 1;
      *(_QWORD *)(v7 + 152) = v47;
      if (v47)
      {
        v49 = (_QWORD *)operator new();
        v50 = v106->__vftable;
        *v49 = &off_1E2523180;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = v50;
      }
      else
      {
        v49 = 0;
      }
      *(_QWORD *)(v7 + 160) = v49;
      *(_QWORD *)(v7 + 312) = 0;
    }
    else
    {
      std::runtime_error::runtime_error(v106, v45);
      *(_OWORD *)(v7 + 328) = *(_OWORD *)(v44 + 24);
      *(_QWORD *)(v7 + 312) = off_1E2521330;
      v51 = (_QWORD *)(v44 + 48);
      v52 = *(_QWORD *)(v44 + 48);
      v53 = (_QWORD *)(v7 + 352);
      *(_QWORD *)(v7 + 344) = *(_QWORD *)(v44 + 40);
      *(_QWORD *)(v7 + 352) = v52;
      v54 = *(_QWORD *)(v44 + 56);
      *(_QWORD *)(v7 + 360) = v54;
      if (v54)
      {
        *(_QWORD *)(v52 + 16) = v53;
        *(_QWORD *)(v44 + 40) = v51;
        *v51 = 0;
        *(_QWORD *)(v44 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 344) = v53;
      }
      *(_OWORD *)(v7 + 368) = *(_OWORD *)(v44 + 64);
      *(_QWORD *)(v44 + 64) = 0;
      *(_QWORD *)(v44 + 72) = 0;
      v48 = (_BYTE *)(v7 + 384);
      *(_BYTE *)(v7 + 384) = 0;
      std::runtime_error::runtime_error(v18, v106);
      v70 = *(_OWORD *)(v7 + 328);
      v71 = *(_QWORD *)(v7 + 352);
      *(_QWORD *)(v7 + 192) = v71;
      v72 = v7 + 192;
      *(_OWORD *)(v7 + 168) = v70;
      *(_QWORD *)(v7 + 152) = off_1E2521330;
      *(_QWORD *)(v7 + 184) = *(_QWORD *)(v7 + 344);
      v73 = *(_QWORD *)(v7 + 360);
      *(_QWORD *)(v7 + 200) = v73;
      if (v73)
      {
        *(_QWORD *)(v71 + 16) = v72;
        *(_QWORD *)(v7 + 344) = v53;
        *v53 = 0;
        *(_QWORD *)(v7 + 360) = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 184) = v72;
      }
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(v7 + 368);
      *(_QWORD *)(v7 + 368) = 0;
      *(_QWORD *)(v7 + 376) = 0;
      v21 = (uint64_t *)v106;
      p_data = (void **)&v102->__r_.__value_.__l.__data_;
    }
    *(_BYTE *)(v7 + 224) = v46;
    v59 = v108;
    std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v108, v18);
    if (*(_BYTE *)(v7 + 224))
    {
      v74 = *(std::__shared_weak_count **)(v7 + 160);
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(p_shared_owners);
        while (__stlxr(v76 - 1, p_shared_owners));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v18->~runtime_error)(v18);
    }
    v77 = *v21;
    if (*v48)
    {
      *v21 = 0;
      if (v77)
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
      v78 = *(std::__shared_weak_count **)(v7 + 552);
      if (!v78)
      {
LABEL_93:
        v81 = *(std::__shared_weak_count **)(v7 + 568);
        if (!v81)
          goto LABEL_97;
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
          if ((*(char *)(v7 + 519) & 0x80000000) == 0)
            goto LABEL_99;
        }
        else
        {
LABEL_97:
          if ((*(char *)(v7 + 519) & 0x80000000) == 0)
          {
LABEL_99:
            if (!*(_BYTE *)(v7 + 480) || (*(char *)(v7 + 479) & 0x80000000) == 0)
            {
LABEL_102:
              if (*(_BYTE *)(v7 + 304))
              {
                if (!v59->__vftable)
                {
                  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v114);
                  AMSCore::Logger::log<char [55],AMSCore::AccountIdentity>((uint64_t)v114.__vftable, v105);
                  imp = (std::__shared_weak_count *)v114.__imp_.__imp_;
                  if (v114.__imp_.__imp_)
                  {
                    v87 = (unint64_t *)(v114.__imp_.__imp_ + 8);
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
                      std::__shared_weak_count::__release_weak(imp);
                    }
                  }
                }
                std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v7 + 24), v59);
                v84 = *(std::__shared_weak_count **)(v7 + 584);
                if (!v84)
                  goto LABEL_136;
              }
              else
              {
                std::runtime_error::runtime_error(&v114, v59);
                v115 = *(_OWORD *)(v7 + 248);
                v114.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v85 = *(_QWORD *)(v7 + 272);
                v116 = *(_QWORD *)(v7 + 264);
                v117 = v85;
                v118 = *(unsigned int **)(v7 + 280);
                if (v118)
                {
                  *(_QWORD *)(v85 + 16) = &v117;
                  *(_QWORD *)(v7 + 264) = v7 + 272;
                  *(_QWORD *)(v7 + 272) = 0;
                  *(_QWORD *)(v7 + 280) = 0;
                }
                else
                {
                  v116 = (uint64_t)&v117;
                }
                v119 = *(_OWORD *)(v7 + 288);
                *(_QWORD *)(v7 + 288) = 0;
                *(_QWORD *)(v7 + 296) = 0;
                v120 = 1;
                std::runtime_error::runtime_error(&v121, &v114);
                v122 = v115;
                v121.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v123 = (unsigned int **)v116;
                v124 = (unsigned int *)v117;
                v125 = v118;
                if (v118)
                {
                  *(_QWORD *)(v117 + 16) = &v124;
                  v116 = (uint64_t)&v117;
                  v117 = 0;
                  v118 = 0;
                }
                else
                {
                  v123 = &v124;
                }
                v126 = v119;
                v119 = 0uLL;
                std::runtime_error::runtime_error(&v109, &v121);
                v110 = v122;
                v109.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v89 = v124;
                v111 = v123;
                v112[0] = v124;
                v112[1] = v125;
                if (v125)
                {
                  *((_QWORD *)v124 + 2) = v112;
                  v89 = 0;
                  v123 = &v124;
                  v124 = 0;
                  v125 = 0;
                }
                else
                {
                  v111 = v112;
                }
                v18 = v104;
                v113 = v126;
                v126 = 0uLL;
                v121.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v123, v89);
                MEMORY[0x18D7898AC](&v121);
                std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v7 + 24), &v109);
                v109.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v90 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
                if (*((_QWORD *)&v113 + 1))
                {
                  v91 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                  do
                    v92 = __ldaxr(v91);
                  while (__stlxr(v92 - 1, v91));
                  if (!v92)
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v111, v112[0]);
                MEMORY[0x18D7898AC](&v109);
                if (v120)
                {
                  v114.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  v93 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
                  if (*((_QWORD *)&v119 + 1))
                  {
                    v94 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 - 1, v94));
                    if (!v95)
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v116, (unsigned int *)v117);
                  MEMORY[0x18D7898AC](&v114);
                }
                v59 = v108;
                v84 = *(std::__shared_weak_count **)(v7 + 584);
                if (!v84)
                  goto LABEL_136;
              }
              v96 = (unint64_t *)&v84->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
                if (*(_BYTE *)(v7 + 304))
                {
LABEL_137:
                  v98 = *(std::__shared_weak_count **)(v7 + 240);
                  if (v98)
                  {
                    v99 = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  goto LABEL_144;
                }
LABEL_143:
                ((void (*)(std::runtime_error *))v59->~runtime_error)(v59);
LABEL_144:
                *(_QWORD *)(v7 + 152) = v107;
                *(_QWORD *)v7 = 0;
                return AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v18);
              }
LABEL_136:
              if (*(_BYTE *)(v7 + 304))
                goto LABEL_137;
              goto LABEL_143;
            }
LABEL_101:
            operator delete(*p_data);
            goto LABEL_102;
          }
        }
        operator delete(*v39);
        goto LABEL_99;
      }
    }
    else
    {
      (*(void (**)(uint64_t *))v77)(v21);
      v78 = *(std::__shared_weak_count **)(v7 + 552);
      if (!v78)
        goto LABEL_93;
    }
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    goto LABEL_93;
  }
  if (v14 < 0)
  {
    v20 = v101;
    v18 = v104;
    std::string::__init_copy_ctor_external(v101, v13, v12);
    v19 = v106;
  }
  else
  {
    *(_QWORD *)(v7 + 520) = v13;
    *(_QWORD *)(v7 + 528) = v12;
    *(_DWORD *)(v7 + 536) = *v8;
    *(_DWORD *)(v7 + 539) = *(_DWORD *)((char *)v8 + 3);
    *(_BYTE *)(v7 + 543) = v14;
    v18 = v104;
    v19 = v106;
    v20 = v101;
  }
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 48))(v16, v20);
  v24 = *(_OWORD *)(v7 + 544);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v7 + 552) = 0;
  *(_OWORD *)(v7 + 560) = v24;
  v25 = atomic_load((unint64_t *)(v24 + 96));
  p_data = (void **)&v20->__r_.__value_.__l.__data_;
  if (v25)
    goto LABEL_16;
  *(_BYTE *)(v7 + 607) = 0;
  v26 = (unint64_t *)(*(_QWORD *)(v7 + 560) + 96);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v7, v26));
  if (v27)
  {
LABEL_16:
    v28 = *(_QWORD *)v10;
    if (*(_BYTE *)(*(_QWORD *)v10 + 88))
    {
      v29 = (const std::runtime_error *)(v28 + 8);
      v30 = *(_BYTE *)(v28 + 80);
      if (v30)
      {
        v31 = v29->__vftable;
        v29->__vftable = 0;
        *(_QWORD *)(v7 + 312) = v31;
        v32 = (_BYTE *)(v7 + 384);
        *(_BYTE *)(v7 + 384) = 1;
        *(_QWORD *)(v7 + 152) = v31;
        if (v31)
        {
          v33 = (_QWORD *)operator new();
          v34 = v19->__vftable;
          *v33 = &off_1E2523180;
          v33[1] = 0;
          v33[2] = 0;
          v33[3] = v34;
        }
        else
        {
          v33 = 0;
        }
        *(_QWORD *)(v7 + 160) = v33;
        *(_QWORD *)(v7 + 312) = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v19, v29);
        *(_OWORD *)(v7 + 328) = *(_OWORD *)(v28 + 24);
        *(_QWORD *)(v7 + 312) = off_1E2521330;
        v35 = (_QWORD *)(v28 + 48);
        v36 = *(_QWORD *)(v28 + 48);
        v37 = (_QWORD *)(v7 + 352);
        *(_QWORD *)(v7 + 344) = *(_QWORD *)(v28 + 40);
        *(_QWORD *)(v7 + 352) = v36;
        v38 = *(_QWORD *)(v28 + 56);
        *(_QWORD *)(v7 + 360) = v38;
        if (v38)
        {
          *(_QWORD *)(v36 + 16) = v37;
          *(_QWORD *)(v28 + 40) = v35;
          *v35 = 0;
          *(_QWORD *)(v28 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 344) = v37;
        }
        *(_OWORD *)(v7 + 368) = *(_OWORD *)(v28 + 64);
        *(_QWORD *)(v28 + 64) = 0;
        *(_QWORD *)(v28 + 72) = 0;
        v32 = (_BYTE *)(v7 + 384);
        *(_BYTE *)(v7 + 384) = 0;
        std::runtime_error::runtime_error(v18, v106);
        v55 = *(_OWORD *)(v7 + 328);
        v56 = *(_QWORD *)(v7 + 352);
        *(_QWORD *)(v7 + 192) = v56;
        v57 = v7 + 192;
        *(_OWORD *)(v7 + 168) = v55;
        *(_QWORD *)(v7 + 152) = off_1E2521330;
        *(_QWORD *)(v7 + 184) = *(_QWORD *)(v7 + 344);
        v58 = *(_QWORD *)(v7 + 360);
        *(_QWORD *)(v7 + 200) = v58;
        if (v58)
        {
          *(_QWORD *)(v56 + 16) = v57;
          *(_QWORD *)(v7 + 344) = v37;
          *v37 = 0;
          *(_QWORD *)(v7 + 360) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 184) = v57;
        }
        *(_OWORD *)(v7 + 208) = *(_OWORD *)(v7 + 368);
        *(_QWORD *)(v7 + 368) = 0;
        *(_QWORD *)(v7 + 376) = 0;
        v19 = v106;
        p_data = (void **)&v101->__r_.__value_.__l.__data_;
      }
      *(_BYTE *)(v7 + 224) = v30;
      v59 = v108;
      std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v108, v18);
      if (*(_BYTE *)(v7 + 224))
      {
        v60 = *(std::__shared_weak_count **)(v7 + 160);
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v18->~runtime_error)(v18);
      }
      v63 = v19->__vftable;
      if (*v32)
      {
        v19->__vftable = 0;
        if (v63)
          (*((void (**)(std::runtime_error_vtbl *))v63->~runtime_error + 1))(v63);
        v64 = *(std::__shared_weak_count **)(v7 + 568);
        if (!v64)
        {
LABEL_63:
          v67 = *(std::__shared_weak_count **)(v7 + 552);
          if (!v67)
            goto LABEL_67;
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
            if ((*(char *)(v7 + 543) & 0x80000000) == 0)
              goto LABEL_102;
          }
          else
          {
LABEL_67:
            if ((*(char *)(v7 + 543) & 0x80000000) == 0)
              goto LABEL_102;
          }
          goto LABEL_101;
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v63->~runtime_error)(v19);
        v64 = *(std::__shared_weak_count **)(v7 + 568);
        if (!v64)
          goto LABEL_63;
      }
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      goto LABEL_63;
    }
LABEL_148:
    __break(1u);
  }
  return result;
}

void sub_18CCC11F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  if (*(_BYTE *)(v17 + 480))
  {
    if (*(char *)(v17 + 479) < 0)
      operator delete(*a11);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a12);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a17);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCC1310()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCC1198);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::AccountsErrorCode,char const(&)[44]>(uint64_t a1, unsigned int a2)
{
  std::system_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error_vtbl *v7;
  std::system_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::system_error v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::error_code v25;

  v4 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = MEMORY[0x1E0DE4F60];
  v7 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16.__vftable = v7;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v7[-1].~system_error) = v8;
  v9 = (std::ios_base *)((char *)&v16 + (unint64_t)v16.__vftable[-1].~system_error);
  std::ios_base::init(v9, &v16.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16.__vftable = v4 + 1;
  v24[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Failed to fetch the correct account object.", 43);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v16.__imp_, &v15);
  v16.__vftable = *(std::system_error_vtbl **)v6;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v16.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v6 + 24);
  v16.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v24);
  *(_QWORD *)&v25.__val_ = a2;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::accounts(void)::instance;
  std::system_error::system_error(&v16, v25, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v18 = 0;
  v19 = 0;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v17 = &v18;
  v20 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(std::error_code *)(a1 + 16) = v16.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v11 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = a1 + 40;
  v13 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v11 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
  return MEMORY[0x18D7898AC](&v16);
}

void sub_18CCC1528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CCC1544(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::UploadMetricsEventTask::`anonymous namespace'::performInternal(std::runtime_error *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, _QWORD *a7, uint64_t a8)
{
  char *v13;
  const std::string::value_type *v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  unsigned int v22;
  std::runtime_error *v23;
  char *v24;
  AMSCore::URL *v25;
  uint64_t v26;
  _OWORD *v27;
  unsigned int v28;
  void (***v29)(uint64_t);
  int v30;
  _OWORD *v31;
  int v32;
  _OWORD *v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BYTE *v46;
  unint64_t v47;
  std::runtime_error_vtbl *v48;
  uint64_t v49;
  uint64_t v50;
  std::runtime_error_vtbl *v51;
  std::runtime_error_vtbl *v52;
  std::ios_base *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  AMSCore::URL *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int **v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  char *v70;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  const std::runtime_error *v95;
  char v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  unsigned int **v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int **v109;
  char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  void *v139;
  char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  __n128 v159;
  _DWORD *v160;
  uint64_t v161;
  std::__shared_weak_count *imp;
  unint64_t *v163;
  unint64_t v164;
  BOOL v165;
  _QWORD *v166;
  __n128 v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  char *v177;
  std::runtime_error *v178;
  _QWORD *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  __int128 v183;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  const std::runtime_error *v188;
  char v189;
  _QWORD *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  _QWORD *v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  int v226;
  _QWORD *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  BOOL v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  BOOL v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  unsigned int *v243;
  unsigned int *v244;
  unsigned int **v245;
  char *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::error_code v257;
  unsigned int *v258;
  unsigned int **v259;
  char *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  __n128 *v265;
  __n128 *v266;
  AMSCore::ExecuteHTTPRequestTask::Options *v267;
  _BYTE *v268;
  std::runtime_error *v269;
  AMSCore::ExecuteHTTPRequestTask::Options *v270;
  void **v271;
  uint64_t *v272;
  uint64_t v273;
  std::string::size_type __sz;
  uint64_t v277;
  void **v278;
  AMSCore::URL *v279;
  std::runtime_error *v280;
  std::string *v281;
  uint64_t v283;
  _OWORD *v284;
  std::runtime_error *v285;
  _BYTE __what_arg[32];
  unsigned int **v287;
  unsigned int *v288;
  uint64_t v289;
  __int128 v290;
  std::runtime_error v291;
  std::error_code ec;
  unsigned int **v293;
  unsigned int *v294;
  uint64_t v295;
  __int128 v296;
  std::system_error v297;
  unsigned int **v298;
  uint64_t v299;
  uint64_t v300;
  __int128 v301;
  std::runtime_error v302;
  std::error_code v303;
  unsigned int **v304;
  unsigned int *v305;
  uint64_t v306;
  __int128 v307;
  void *__p[4];
  _BYTE v309[32];
  _BYTE v310[32];
  _BYTE v311[32];
  _BYTE v312[24];
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  _OWORD v321[2];
  __int128 v322;
  uint64_t v323;
  char v324;
  char v325;
  uint64_t v326;
  std::error_code v327;

  v326 = *MEMORY[0x1E0C80C00];
  v13 = (char *)operator new(0xAE8uLL);
  v14 = *(const std::string::value_type **)a2;
  __sz = *(_QWORD *)(a2 + 8);
  v271 = (void **)(v13 + 976);
  *((_DWORD *)v13 + 694) = *(_DWORD *)(a2 + 16);
  v284 = v13 + 1368;
  v267 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v13 + 1720);
  v268 = v13 + 2783;
  *(_DWORD *)(v13 + 2779) = *(_DWORD *)(a2 + 19);
  v270 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v13 + 1888);
  v285 = (std::runtime_error *)(v13 + 2056);
  v15 = *(char *)(a2 + 23);
  v279 = (AMSCore::URL *)(v13 + 2216);
  v280 = (std::runtime_error *)(v13 + 576);
  v278 = (void **)(v13 + 2400);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v281 = (std::string *)(v13 + 2448);
  *(_QWORD *)(a2 + 16) = 0;
  v265 = (__n128 *)(v13 + 2472);
  v266 = (__n128 *)(v13 + 2424);
  v16 = *a3;
  v17 = *(_OWORD *)(a3 + 1);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v18 = a4[1];
  *((_QWORD *)v13 + 328) = *a4;
  *a4 = 0;
  a4[1] = 0;
  v19 = a4[3];
  *((_QWORD *)v13 + 330) = a4[2];
  a4[2] = 0;
  a4[3] = 0;
  v20 = a5[1];
  *((_QWORD *)v13 + 332) = *a5;
  *a5 = 0;
  a5[1] = 0;
  *((_QWORD *)v13 + 324) = v14;
  v13[2784] = v15;
  v277 = v16;
  *((_QWORD *)v13 + 325) = v16;
  v273 = v17;
  *((_OWORD *)v13 + 163) = v17;
  *((_QWORD *)v13 + 329) = v18;
  *((_QWORD *)v13 + 331) = v19;
  *((_QWORD *)v13 + 333) = v20;
  v21 = a6 + 1;
  *(_OWORD *)(v13 + 1544) = *a6;
  v13[1560] = 0;
  v13[1712] = 0;
  v272 = (uint64_t *)(v13 + 2576);
  v283 = (uint64_t)(v13 + 16);
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(v13 + 1560), v21);
  *((_QWORD *)v13 + 334) = *a7;
  *a7 = 0;
  *((_OWORD *)v13 + 157) = *(_OWORD *)a8;
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  do
    v22 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v22 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v13[24] = 0;
  v13[104] = 0;
  *((_QWORD *)v13 + 14) = 0;
  v269 = (std::runtime_error *)(v13 + 24);
  *((_QWORD *)v13 + 18) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v302, v283);
  *a1 = v302;
  *((_QWORD *)v13 + 323) = (v273 - v277) >> 5;
  if (v15 < 0)
  {
    std::string::__init_copy_ctor_external(v281, v14, __sz);
  }
  else
  {
    *((_QWORD *)v13 + 306) = v14;
    *((_QWORD *)v13 + 307) = __sz;
    *((_DWORD *)v13 + 616) = *((_DWORD *)v13 + 694);
    *(_DWORD *)(v13 + 2467) = *(_DWORD *)(v13 + 2779);
    v13[2471] = v15;
  }
  *v284 = *(_OWORD *)(v13 + 1544);
  v13[1384] = 0;
  v13[1536] = 0;
  v23 = (std::runtime_error *)(v13 + 152);
  if (v13[1712])
  {
    AMSCore::URL::URL((std::string *)(v13 + 1384), (const AMSCore::URL *)(v13 + 1560));
    v13[1536] = 1;
  }
  v24 = (char *)operator new(0x258uLL);
  v25 = (AMSCore::URL *)(v24 + 408);
  v26 = (uint64_t)(v24 + 16);
  *((_OWORD *)v24 + 35) = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
  *((_QWORD *)v24 + 72) = *((_QWORD *)v13 + 308);
  v281->__r_.__value_.__r.__words[0] = 0;
  *((_QWORD *)v13 + 307) = 0;
  *((_QWORD *)v13 + 308) = 0;
  *(_OWORD *)(v24 + 232) = *v284;
  v24[248] = 0;
  v27 = v24 + 248;
  v24[400] = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(v24 + 248), (__int128 *)(v13 + 1384));
  do
    v28 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v28 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v24[24] = 0;
  v29 = (void (***)(uint64_t))(v24 + 24);
  v24[184] = 0;
  *((_QWORD *)v24 + 24) = 0;
  *((_QWORD *)v24 + 28) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v302, v26);
  *(std::runtime_error *)(v13 + 152) = v302;
  if (v24[400])
  {
    v24[408] = 0;
    v24[432] = 0;
    v30 = v24[272];
    if (v24[272])
    {
      *(_OWORD *)v25 = *v27;
      *((_QWORD *)v24 + 53) = *((_QWORD *)v24 + 33);
      *((_QWORD *)v24 + 32) = 0;
      *((_QWORD *)v24 + 33) = 0;
      *(_QWORD *)v27 = 0;
      v24[432] = 1;
    }
    v31 = v24 + 440;
    v24[440] = 0;
    v24[464] = 0;
    v32 = v24[304];
    if (v24[304])
    {
      *((_QWORD *)v24 + 57) = *((_QWORD *)v24 + 37);
      *v31 = *(_OWORD *)(v24 + 280);
      *((_QWORD *)v24 + 36) = 0;
      *((_QWORD *)v24 + 37) = 0;
      *((_QWORD *)v24 + 35) = 0;
      v24[464] = 1;
    }
    v33 = v24 + 472;
    v24[472] = 0;
    v24[496] = 0;
    v34 = v24[336];
    if (v24[336])
    {
      *((_QWORD *)v24 + 61) = *((_QWORD *)v24 + 41);
      *v33 = *(_OWORD *)(v24 + 312);
      *((_QWORD *)v24 + 40) = 0;
      *((_QWORD *)v24 + 41) = 0;
      *((_QWORD *)v24 + 39) = 0;
      v24[496] = 1;
    }
    *((_DWORD *)v24 + 126) = *((_DWORD *)v24 + 86);
    v35 = v24 + 512;
    *((_QWORD *)v24 + 64) = v24 + 512;
    *((_QWORD *)v24 + 65) = v24 + 512;
    *((_QWORD *)v24 + 66) = 0;
    v36 = *((_QWORD *)v24 + 46);
    if (v36)
    {
      v38 = (char *)*((_QWORD *)v24 + 44);
      v37 = (uint64_t *)*((_QWORD *)v24 + 45);
      v39 = *v37;
      *(_QWORD *)(v39 + 8) = *((_QWORD *)v38 + 1);
      **((_QWORD **)v38 + 1) = v39;
      v40 = *((_QWORD *)v24 + 64);
      *(_QWORD *)(v40 + 8) = v37;
      *v37 = v40;
      *((_QWORD *)v24 + 64) = v38;
      *((_QWORD *)v38 + 1) = v35;
      *((_QWORD *)v24 + 66) = v36;
      *((_QWORD *)v24 + 46) = 0;
      v35 = v38;
    }
    v41 = v24 + 536;
    *((_QWORD *)v24 + 69) = *((_QWORD *)v24 + 49);
    *(_OWORD *)(v24 + 536) = *(_OWORD *)(v24 + 376);
    *((_QWORD *)v24 + 48) = 0;
    *((_QWORD *)v24 + 49) = 0;
    *((_QWORD *)v24 + 47) = 0;
    LOBYTE(v302.__vftable) = 0;
    LOBYTE(__p[0]) = 0;
    LOBYTE(__p[1]) = 0;
    v309[0] = 0;
    if (v30)
    {
      *(_OWORD *)&__p[1] = *(_OWORD *)v25;
      __p[3] = *((void **)v24 + 53);
      *((_QWORD *)v24 + 52) = 0;
      *((_QWORD *)v24 + 53) = 0;
      *(_QWORD *)v25 = 0;
      v309[0] = 1;
    }
    v309[8] = 0;
    v310[0] = 0;
    if (v32)
    {
      *(_OWORD *)&v309[8] = *v31;
      *(_QWORD *)&v309[24] = *((_QWORD *)v24 + 57);
      *((_QWORD *)v24 + 56) = 0;
      *((_QWORD *)v24 + 57) = 0;
      *(_QWORD *)v31 = 0;
      v310[0] = 1;
    }
    v310[8] = 0;
    v311[0] = 0;
    if (v34)
    {
      *(_OWORD *)&v310[8] = *v33;
      *(_QWORD *)&v310[24] = *((_QWORD *)v24 + 61);
      *((_QWORD *)v24 + 60) = 0;
      *((_QWORD *)v24 + 61) = 0;
      *(_QWORD *)v33 = 0;
      v311[0] = 1;
    }
    *(_DWORD *)&v311[8] = *((_DWORD *)v24 + 126);
    *(_QWORD *)&v311[16] = &v311[16];
    *(_QWORD *)&v311[24] = &v311[16];
    *(_QWORD *)v312 = 0;
    if (v36)
    {
      v42 = (uint64_t *)*((_QWORD *)v24 + 65);
      v43 = *v42;
      *(_QWORD *)(v43 + 8) = *((_QWORD *)v35 + 1);
      **((_QWORD **)v35 + 1) = v43;
      v44 = *(_QWORD *)&v311[16];
      *(_QWORD *)(*(_QWORD *)&v311[16] + 8) = v42;
      *v42 = v44;
      *(_QWORD *)&v311[16] = v35;
      *((_QWORD *)v35 + 1) = &v311[16];
      *(_QWORD *)v312 = v36;
      *((_QWORD *)v24 + 66) = 0;
    }
    *(_OWORD *)&v312[8] = *v41;
    *(_QWORD *)&v313 = *((_QWORD *)v24 + 69);
    *((_QWORD *)v24 + 68) = 0;
    *((_QWORD *)v24 + 69) = 0;
    *(_QWORD *)v41 = 0;
    AMSCore::URLBuilder::withPathSegment((uint64_t)&v302, "2", 1uLL);
    v45 = v24[583];
    if (v45 >= 0)
      v46 = v24 + 560;
    else
      v46 = (_BYTE *)*((_QWORD *)v24 + 70);
    if (v45 >= 0)
      v47 = v24[583];
    else
      v47 = *((_QWORD *)v24 + 71);
    AMSCore::URLBuilder::withPathSegment((uint64_t)&v302, v46, v47);
    if (v24[184])
    {
      if (v24[176])
        AMSCore::URL::~URL((AMSCore::URL *)(v24 + 24));
      else
        (**v29)((uint64_t)(v24 + 24));
      v24[184] = 0;
    }
    v24[24] = 0;
    v24[48] = 0;
    if (v309[0])
    {
      *(_OWORD *)v29 = *(_OWORD *)&__p[1];
      *((void **)v24 + 5) = __p[3];
      memset(&__p[1], 0, 24);
      v24[48] = 1;
    }
    v24[56] = 0;
    v24[80] = 0;
    if (v310[0])
    {
      *(_OWORD *)(v24 + 56) = *(_OWORD *)&v309[8];
      *((_QWORD *)v24 + 9) = *(_QWORD *)&v309[24];
      memset(&v309[8], 0, 24);
      v24[80] = 1;
    }
    v24[88] = 0;
    v24[112] = 0;
    if (v311[0])
    {
      *(_OWORD *)(v24 + 88) = *(_OWORD *)&v310[8];
      *((_QWORD *)v24 + 13) = *(_QWORD *)&v310[24];
      memset(&v310[8], 0, 24);
      v24[112] = 1;
    }
    *((_DWORD *)v24 + 30) = *(_DWORD *)&v311[8];
    *((_QWORD *)v24 + 16) = v24 + 128;
    *((_QWORD *)v24 + 17) = v24 + 128;
    *((_QWORD *)v24 + 18) = 0;
    v56 = *(_QWORD *)v312;
    if (*(_QWORD *)v312)
    {
      v57 = *(_QWORD **)&v311[24];
      v58 = *(_QWORD *)&v311[16];
      v59 = **(_QWORD **)&v311[24];
      *(_QWORD *)(v59 + 8) = *(_QWORD *)(*(_QWORD *)&v311[16] + 8);
      **(_QWORD **)(v58 + 8) = v59;
      v60 = *((_QWORD *)v24 + 16);
      *(_QWORD *)(v60 + 8) = v57;
      *v57 = v60;
      *((_QWORD *)v24 + 16) = v58;
      *(_QWORD *)(v58 + 8) = v24 + 128;
      *((_QWORD *)v24 + 18) = v56;
      *(_QWORD *)v312 = 0;
    }
    *(_OWORD *)(v24 + 152) = *(_OWORD *)&v312[8];
    *((_QWORD *)v24 + 21) = v313;
    *(_QWORD *)&v312[16] = 0;
    *(_QWORD *)&v313 = 0;
    *(_QWORD *)&v312[8] = 0;
    v24[176] = 1;
    v24[184] = 1;
    AMSCore::URL::~URL((AMSCore::URL *)&__p[1]);
    v61 = (AMSCore::URL *)(v13 + 1384);
    if (LOBYTE(__p[0]))
    {
      v302.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v62 = (std::__shared_weak_count *)*((_QWORD *)&v307 + 1);
      if (*((_QWORD *)&v307 + 1))
      {
        v63 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v304, v305);
      MEMORY[0x18D7898AC](&v302);
    }
    AMSCore::URL::~URL(v25);
  }
  else
  {
    v48 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v49 = MEMORY[0x1E0DE4FE0] + 64;
    v50 = MEMORY[0x1E0DE4F60];
    v51 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v52 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    *(_QWORD *)&v309[8] = MEMORY[0x1E0DE4FE0] + 64;
    v302.__vftable = v51;
    *(std::runtime_error_vtbl **)((char *)&v302.__vftable + (unint64_t)v51[-1].~runtime_error) = v52;
    v53 = (std::ios_base *)((char *)&v302 + (unint64_t)v302.__vftable[-1].~runtime_error);
    std::ios_base::init(v53, &v302.__imp_);
    v53[1].__vftable = 0;
    v53[1].__fmtflags_ = -1;
    v302.__vftable = v48 + 1;
    *(_QWORD *)&v309[8] = v49;
    std::streambuf::basic_streambuf();
    v54 = MEMORY[0x1E0DE4FB8];
    v302.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    memset(__p, 0, sizeof(__p));
    *(_DWORD *)v309 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v302, (uint64_t)"No metrics URL was found in the bag", 35);
    std::stringbuf::str[abi:fe180100]((uint64_t)&v302.__imp_, (std::string *)__what_arg);
    v302.__vftable = *(std::runtime_error_vtbl **)v50;
    *(std::runtime_error_vtbl **)((char *)&v302.__vftable + (unint64_t)v302.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v50 + 24);
    v302.__imp_.__imp_ = (const char *)(v54 + 16);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](&v309[8]);
    v327.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
    *(_QWORD *)&v327.__val_ = 204;
    std::system_error::system_error(&v297, v327, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    v299 = 0;
    v300 = 0;
    v297.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v298 = (unsigned int **)&v299;
    v301 = 0uLL;
    std::runtime_error::runtime_error(&v291, &v297);
    ec = v297.__ec_;
    v291.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v55 = (unsigned int *)v299;
    v293 = v298;
    v294 = (unsigned int *)v299;
    v295 = v300;
    if (v300)
    {
      *(_QWORD *)(v299 + 16) = &v294;
      v55 = 0;
      v298 = (unsigned int **)&v299;
      v299 = 0;
      v300 = 0;
    }
    else
    {
      v293 = &v294;
    }
    v296 = v301;
    v301 = 0uLL;
    v297.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v298, v55);
    MEMORY[0x18D7898AC](&v297);
    v26 = (uint64_t)(v24 + 16);
    if (v24[184])
    {
      if (v24[176])
        AMSCore::URL::~URL((AMSCore::URL *)(v24 + 24));
      else
        (**v29)((uint64_t)(v24 + 24));
      v24[184] = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v24 + 24), &v291);
    v66 = v293;
    v65 = v294;
    *((_QWORD *)v24 + 8) = v294;
    v67 = v24 + 64;
    *(std::error_code *)(v24 + 40) = ec;
    *((_QWORD *)v24 + 3) = off_1E2521330;
    *((_QWORD *)v24 + 7) = v66;
    v68 = v295;
    *((_QWORD *)v24 + 9) = v295;
    if (v68)
    {
      *((_QWORD *)v65 + 2) = v67;
      v65 = 0;
      v293 = &v294;
      v294 = 0;
      v295 = 0;
    }
    else
    {
      *((_QWORD *)v24 + 7) = v67;
    }
    v23 = (std::runtime_error *)(v13 + 152);
    v61 = (AMSCore::URL *)(v13 + 1384);
    *((_OWORD *)v24 + 5) = v296;
    v296 = 0uLL;
    v24[176] = 0;
    v24[184] = 1;
    v291.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v293, v65);
    MEMORY[0x18D7898AC](&v291);
  }
  *((_QWORD *)v24 + 73) = v26;
  *(_QWORD *)v24 = 0;
  AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::Awaiter::await_suspend(v24 + 584);
  v69 = *(_OWORD *)(v13 + 152);
  v70 = v13 + 952;
  *(_OWORD *)(v13 + 2680) = v69;
  v23->__vftable = 0;
  v23->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v69 + 176)))
  {
    *v268 = 0;
    v72 = (unint64_t *)(*((_QWORD *)v13 + 335) + 176);
    do
      v73 = __ldaxr(v72);
    while (__stlxr((unint64_t)v13, v72));
    if (!v73)
      return;
  }
  v74 = *((_QWORD *)v13 + 335);
  if (!*(_BYTE *)(v74 + 168))
    goto LABEL_362;
  v75 = *(_BYTE *)(v74 + 160);
  std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>(v285, v75, (std::runtime_error *)(v74 + 8));
  v13[2208] = v75;
  v76 = *((_QWORD *)v13 + 336);
  if (v76)
  {
    v77 = (unint64_t *)(v76 + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      v79 = (std::__shared_weak_count *)*((_QWORD *)v13 + 336);
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)v13 + 20);
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v13[1536])
    AMSCore::URL::~URL(v61);
  if ((v13[2471] & 0x80000000) == 0)
  {
    if (v13[2208])
      goto LABEL_89;
LABEL_105:
    std::runtime_error::runtime_error(&v302, v285);
    v303 = *(std::error_code *)(v13 + 2072);
    v100 = (unsigned int **)*((_QWORD *)v13 + 261);
    v302.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v304 = v100;
    v101 = *((_QWORD *)v13 + 262);
    v102 = *((_QWORD *)v13 + 263);
    v305 = (unsigned int *)v101;
    v306 = v102;
    if (v102)
    {
      *(_QWORD *)(v101 + 16) = &v305;
      *((_QWORD *)v13 + 261) = v13 + 2096;
      *((_QWORD *)v13 + 262) = 0;
      *((_QWORD *)v13 + 263) = 0;
    }
    else
    {
      v304 = &v305;
    }
    v307 = *((_OWORD *)v13 + 132);
    *((_QWORD *)v13 + 265) = 0;
    *((_QWORD *)v13 + 264) = 0;
    LOBYTE(__p[0]) = 1;
    std::runtime_error::runtime_error(&v291, &v302);
    ec = v303;
    v291.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v293 = v304;
    v294 = v305;
    v295 = v306;
    if (v306)
    {
      *((_QWORD *)v305 + 2) = &v294;
      v304 = &v305;
      v305 = 0;
      v306 = 0;
    }
    else
    {
      v293 = &v294;
    }
    v296 = v307;
    v307 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v291);
    *(std::error_code *)&__what_arg[16] = ec;
    *(_QWORD *)__what_arg = off_1E2521330;
    v107 = v294;
    v287 = v293;
    v288 = v294;
    v289 = v295;
    if (v295)
    {
      *((_QWORD *)v294 + 2) = &v288;
      v107 = 0;
      v293 = &v294;
      v294 = 0;
      v295 = 0;
    }
    else
    {
      v287 = &v288;
    }
    v290 = v296;
    v296 = 0uLL;
    v291.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v293, v107);
    MEMORY[0x18D7898AC](&v291);
    v23 = (std::runtime_error *)(v13 + 152);
    if (v13[104])
    {
      if (!v13[96])
        ((void (*)(std::runtime_error *))v269->~runtime_error)(v269);
      v13[104] = 0;
    }
    std::runtime_error::runtime_error(v269, (const std::runtime_error *)__what_arg);
    v109 = v287;
    v108 = v288;
    *((_QWORD *)v13 + 8) = v288;
    v110 = v13 + 64;
    *(_OWORD *)(v13 + 40) = *(_OWORD *)&__what_arg[16];
    *((_QWORD *)v13 + 3) = off_1E2521330;
    *((_QWORD *)v13 + 7) = v109;
    v111 = v289;
    *((_QWORD *)v13 + 9) = v289;
    if (v111)
    {
      *((_QWORD *)v108 + 2) = v110;
      v108 = 0;
      v287 = &v288;
      v288 = 0;
      v289 = 0;
    }
    else
    {
      *((_QWORD *)v13 + 7) = v110;
    }
    *((_OWORD *)v13 + 5) = v290;
    v290 = 0uLL;
    v13[96] = 0;
    v13[104] = 1;
    *(_QWORD *)__what_arg = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v287, v108);
    MEMORY[0x18D7898AC](__what_arg);
    if (LOBYTE(__p[0]))
    {
      v302.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v112 = (std::__shared_weak_count *)*((_QWORD *)&v307 + 1);
      if (*((_QWORD *)&v307 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v304, v305);
      MEMORY[0x18D7898AC](&v302);
    }
    v115 = *((_QWORD *)v13 + 334);
    v116 = *((_QWORD *)v13 + 333);
    v117 = *((_QWORD *)v13 + 331);
    v118 = *((_QWORD *)v13 + 329);
    v119 = *((_QWORD *)v13 + 326);
    v120 = *((_QWORD *)v13 + 325);
    if (v13[2208])
      goto LABEL_359;
    goto LABEL_131;
  }
  operator delete(v281->__r_.__value_.__l.__data_);
  if (!v13[2208])
    goto LABEL_105;
LABEL_89:
  *((_OWORD *)v13 + 160) = *((_OWORD *)v13 + 166);
  v13[2216] = 0;
  v13[2240] = 0;
  if (v13[2080])
  {
    *(std::runtime_error *)v279 = *v285;
    *((_QWORD *)v13 + 279) = *((_QWORD *)v13 + 259);
    *((_QWORD *)v13 + 258) = 0;
    *((_QWORD *)v13 + 259) = 0;
    v285->__vftable = 0;
    v13[2240] = 1;
  }
  v13[2248] = 0;
  v13[2272] = 0;
  if (v13[2112])
  {
    *((_QWORD *)v13 + 283) = *((_QWORD *)v13 + 263);
    *(_OWORD *)(v13 + 2248) = *(_OWORD *)(v13 + 2088);
    *((_QWORD *)v13 + 263) = 0;
    *((_QWORD *)v13 + 261) = 0;
    *((_QWORD *)v13 + 262) = 0;
    v13[2272] = 1;
  }
  v13[2280] = 0;
  v13[2304] = 0;
  if (v13[2144])
  {
    *((_QWORD *)v13 + 287) = *((_QWORD *)v13 + 267);
    *(_OWORD *)(v13 + 2280) = *(_OWORD *)(v13 + 2120);
    *((_QWORD *)v13 + 267) = 0;
    *((_QWORD *)v13 + 265) = 0;
    *((_QWORD *)v13 + 266) = 0;
    v13[2304] = 1;
  }
  *((_DWORD *)v13 + 578) = *((_DWORD *)v13 + 538);
  *((_QWORD *)v13 + 290) = v13 + 2320;
  *((_QWORD *)v13 + 291) = v13 + 2320;
  *((_QWORD *)v13 + 292) = 0;
  v83 = *((_QWORD *)v13 + 272);
  if (v83)
  {
    v84 = (uint64_t *)*((_QWORD *)v13 + 271);
    v85 = *((_QWORD *)v13 + 270);
    v86 = *v84;
    *(_QWORD *)(v86 + 8) = *(_QWORD *)(v85 + 8);
    **(_QWORD **)(v85 + 8) = v86;
    v87 = *((_QWORD *)v13 + 290);
    *(_QWORD *)(v87 + 8) = v84;
    *v84 = v87;
    *((_QWORD *)v13 + 290) = v85;
    *(_QWORD *)(v85 + 8) = v13 + 2320;
    *((_QWORD *)v13 + 292) = v83;
    *((_QWORD *)v13 + 272) = 0;
  }
  v88 = *((_QWORD *)v13 + 334);
  v89 = *((_QWORD *)v13 + 327);
  *((_QWORD *)v13 + 295) = *((_QWORD *)v13 + 275);
  *(_OWORD *)(v13 + 2344) = *(_OWORD *)(v13 + 2184);
  *((_QWORD *)v13 + 275) = 0;
  *((_QWORD *)v13 + 274) = 0;
  *((_QWORD *)v13 + 273) = 0;
  *((_OWORD *)v13 + 150) = *(_OWORD *)(v13 + 2600);
  *((_QWORD *)v13 + 302) = v89;
  *((_OWORD *)v13 + 148) = *((_OWORD *)v13 + 164);
  *((_OWORD *)v13 + 149) = *((_OWORD *)v13 + 165);
  *((_QWORD *)v13 + 322) = v88;
  v90 = *(_OWORD *)(v13 + 152);
  *(_OWORD *)(v13 + 2696) = v90;
  v23->__vftable = 0;
  v23->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v90 + 416)))
  {
    *v268 = 1;
    v92 = (unint64_t *)(*((_QWORD *)v13 + 337) + 416);
    do
      v93 = __ldaxr(v92);
    while (__stlxr((unint64_t)v13, v92));
    if (!v93)
      return;
  }
  v94 = *((_QWORD *)v13 + 337);
  if (!*(_BYTE *)(v94 + 408))
    goto LABEL_362;
  v95 = (const std::runtime_error *)(v94 + 8);
  v96 = *(_BYTE *)(v94 + 400);
  if (v96)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v280, (uint64_t)v95);
    v97 = (_QWORD *)(v94 + 384);
    *((_QWORD *)v13 + 119) = *(_QWORD *)(v94 + 384);
    v98 = v13 + 960;
    v99 = (_QWORD *)(v94 + 392);
  }
  else
  {
    std::runtime_error::runtime_error(v280, v95);
    *((_OWORD *)v13 + 37) = *(_OWORD *)(v94 + 24);
    *((_QWORD *)v13 + 72) = off_1E2521330;
    v103 = (_QWORD *)(v94 + 48);
    v104 = *(_QWORD *)(v94 + 48);
    *((_QWORD *)v13 + 76) = *(_QWORD *)(v94 + 40);
    v105 = v13 + 616;
    *((_QWORD *)v13 + 77) = v104;
    v106 = *(_QWORD *)(v94 + 56);
    *((_QWORD *)v13 + 78) = v106;
    if (v106)
    {
      *(_QWORD *)(v104 + 16) = v105;
      *(_QWORD *)(v94 + 40) = v103;
      *v103 = 0;
      *(_QWORD *)(v94 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v13 + 76) = v105;
    }
    v121 = *((_QWORD *)v13 + 337);
    v122 = *(_QWORD *)(v121 + 64);
    v97 = (_QWORD *)(v121 + 64);
    *((_QWORD *)v13 + 79) = v122;
    v98 = v13 + 640;
    v99 = v97 + 1;
  }
  *v98 = *v99;
  *v97 = 0;
  v97[1] = 0;
  v13[968] = v96;
  v123 = *((_QWORD *)v13 + 338);
  if (v123)
  {
    v124 = (unint64_t *)(v123 + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      v126 = (std::__shared_weak_count *)*((_QWORD *)v13 + 338);
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v127 = (std::__shared_weak_count *)*((_QWORD *)v13 + 20);
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = *v272;
  *v272 = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = (std::__shared_weak_count *)*((_QWORD *)v13 + 299);
  if (v131)
  {
    v132 = (unint64_t *)&v131->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)v13 + 297);
  if (v134)
  {
    v135 = (unint64_t *)&v134->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (char *)*v278;
  if (*v278)
  {
    v138 = (char *)*((_QWORD *)v13 + 301);
    v139 = *v278;
    if (v138 != v137)
    {
      do
      {
        v140 = v138 - 32;
        v141 = *((unsigned int *)v138 - 2);
        if ((_DWORD)v141 != -1)
          ((void (*)(std::runtime_error *, char *))off_1E253D240[v141])(&v302, v138 - 32);
        *((_DWORD *)v138 - 2) = -1;
        v138 -= 32;
      }
      while (v140 != v137);
      v139 = *v278;
    }
    *((_QWORD *)v13 + 301) = v137;
    operator delete(v139);
    v70 = v13 + 952;
  }
  AMSCore::URL::~URL(v279);
  v142 = (std::__shared_weak_count *)*((_QWORD *)v13 + 321);
  if (!v142)
    goto LABEL_365;
  v143 = (unint64_t *)&v142->__shared_owners_;
  do
    v144 = __ldaxr(v143);
  while (__stlxr(v144 - 1, v143));
  if (v144)
  {
LABEL_365:
    if (v13[968])
      goto LABEL_169;
LABEL_189:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v302);
    AMSCore::Logger::log<char [31],AMSCore::Error>((uint64_t)v302.__vftable, 4, (uint64_t)"metrics", 7, "Failed to encode metrics batch", (uint64_t)v280);
    imp = (std::__shared_weak_count *)v302.__imp_.__imp_;
    if (v302.__imp_.__imp_)
    {
      v163 = (unint64_t *)(v302.__imp_.__imp_ + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    if (v13[104])
      v165 = v13[96] == 0;
    else
      v165 = 0;
    if (v165)
      ((void (*)(std::runtime_error *))v269->~runtime_error)(v269);
    *((_DWORD *)v13 + 6) = 1;
    v13[96] = 1;
    v13[104] = 1;
    if (v13[968])
      goto LABEL_352;
    goto LABEL_201;
  }
  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
  std::__shared_weak_count::__release_weak(v142);
  if (!v13[968])
    goto LABEL_189;
LABEL_169:
  *((_QWORD *)v13 + 316) = *((_QWORD *)v13 + 75);
  v145 = *((_QWORD *)v13 + 76);
  *((_QWORD *)v13 + 317) = v145;
  if (v145)
  {
    v146 = (unint64_t *)(v145 + 8);
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
  *((_QWORD *)v13 + 318) = *((_QWORD *)v13 + 77);
  v148 = *((_QWORD *)v13 + 78);
  *((_QWORD *)v13 + 319) = v148;
  if (v148)
  {
    v149 = (unint64_t *)(v148 + 8);
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
  }
  AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)&v302, (__int128 *)v13 + 158, (__int128 *)v13 + 159);
  *(_WORD *)&v309[26] = 256;
  AMSCore::ExecuteHTTPRequestTask::Options::Options(v270, (const AMSCore::ExecuteHTTPRequestTask::Options *)&v302);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v302);
  v151 = (std::__shared_weak_count *)*((_QWORD *)v13 + 319);
  if (v151)
  {
    v152 = (unint64_t *)&v151->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = (std::__shared_weak_count *)*((_QWORD *)v13 + 317);
  if (v154)
  {
    v155 = (unint64_t *)&v154->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
      if (*((_QWORD *)v13 + 314))
        goto LABEL_185;
LABEL_222:
      v179 = operator new(0x20uLL);
      v179[1] = 0;
      v179[2] = 0;
      *v179 = &off_1E2523030;
      *((_BYTE *)v179 + 24) = 0;
      *((_QWORD *)v13 + 314) = v179 + 3;
      v180 = (std::__shared_weak_count *)*((_QWORD *)v13 + 315);
      *((_QWORD *)v13 + 315) = v179;
      if (v180)
      {
        v181 = (unint64_t *)&v180->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      goto LABEL_185;
    }
  }
  if (!*((_QWORD *)v13 + 314))
    goto LABEL_222;
LABEL_185:
  v157 = *((_QWORD *)v13 + 314);
  if (*((_QWORD *)v13 + 332))
  {
    v158 = operator new(0x30uLL);
    v158[1] = 0;
    v158[2] = 0;
    *v158 = &off_1E2522E00;
    *((_BYTE *)v158 + 32) = 0;
    *((_BYTE *)v158 + 36) = 0;
    v158[3] = &off_1E2521180;
    v158[5] = v157;
    *((_QWORD *)v13 + 303) = v158 + 3;
    *((_QWORD *)v13 + 304) = v158;
    *((_DWORD *)v13 + 610) = 0;
    v302.__vftable = (std::runtime_error_vtbl *)(v13 + 1976);
    v159 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v302, (__n128 *)(v13 + 1976), v266);
    v160 = v13 + 2440;
    v161 = *((unsigned int *)v13 + 610);
    if ((_DWORD)v161 != -1)
      ((void (*)(std::runtime_error *, __n128 *, __n128))off_1E253D230[v161])(&v302, v266, v159);
  }
  else
  {
    v166 = operator new(0x28uLL);
    v166[1] = 0;
    v166[2] = 0;
    *v166 = &off_1E2522E70;
    v166[3] = &off_1E2521298;
    v166[4] = v157;
    *((_QWORD *)v13 + 309) = v166 + 3;
    *((_QWORD *)v13 + 310) = v166;
    *((_DWORD *)v13 + 622) = 1;
    v302.__vftable = (std::runtime_error_vtbl *)(v13 + 1976);
    v167 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v302, (__n128 *)(v13 + 1976), v265);
    v160 = v13 + 2488;
    v168 = *((unsigned int *)v13 + 622);
    if ((_DWORD)v168 != -1)
      ((void (*)(std::runtime_error *, __n128 *, __n128))off_1E253D230[v168])(&v302, v265, v167);
  }
  *v160 = -1;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v302);
  AMSCore::Logger::log<char [11],unsigned long,char [16]>((uint64_t)v302.__vftable);
  v169 = (std::__shared_weak_count *)v302.__imp_.__imp_;
  if (v302.__imp_.__imp_)
  {
    v170 = (unint64_t *)(v302.__imp_.__imp_ + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  if (!v13[968])
    goto LABEL_362;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v271, (uint64_t)v280);
  *((_OWORD *)v70 + 25) = *(_OWORD *)v70;
  *(_QWORD *)v70 = 0;
  *((_QWORD *)v70 + 1) = 0;
  *((_QWORD *)v13 + 215) = *((_QWORD *)v13 + 236);
  v172 = v13 + 1728;
  v173 = *((_QWORD *)v13 + 237);
  *((_QWORD *)v13 + 216) = v173;
  v174 = *((_QWORD *)v13 + 238);
  *((_QWORD *)v13 + 217) = v174;
  if (v174)
  {
    *(_QWORD *)(v173 + 16) = v172;
    *(_QWORD *)v270 = v13 + 1896;
    *((_QWORD *)v13 + 237) = 0;
    *((_QWORD *)v13 + 238) = 0;
  }
  else
  {
    *(_QWORD *)v267 = v172;
  }
  v175 = *((_OWORD *)v70 + 61);
  *((_OWORD *)v13 + 109) = *((_OWORD *)v70 + 60);
  *((_OWORD *)v13 + 110) = v175;
  *((_OWORD *)v70 + 60) = 0u;
  *((_OWORD *)v70 + 61) = 0u;
  v13[1776] = 0;
  v13[1800] = 0;
  if (v13[1968])
  {
    *((_QWORD *)v13 + 224) = *((_QWORD *)v13 + 245);
    *((_OWORD *)v13 + 111) = *(_OWORD *)(v13 + 1944);
    *((_QWORD *)v13 + 245) = 0;
    *((_QWORD *)v13 + 243) = 0;
    *((_QWORD *)v13 + 244) = 0;
    v13[1800] = 1;
  }
  v13[1808] = 0;
  *((_DWORD *)v13 + 456) = -1;
  v176 = *((unsigned int *)v13 + 498);
  if ((_DWORD)v176 != -1)
  {
    ((void (*)(std::runtime_error *, char *, char *))off_1E253CA98[v176])(&v302, v13 + 1808, v13 + 1976);
    *((_DWORD *)v13 + 456) = v176;
  }
  *(_OWORD *)(v13 + 1832) = *((_OWORD *)v13 + 125);
  *((_DWORD *)v13 + 462) = *((_DWORD *)v13 + 504);
  v177 = (char *)*((_QWORD *)v13 + 256);
  if (v177)
  {
    v178 = (std::runtime_error *)(v13 + 2496);
    if (v177 == v13 + 2024)
    {
      *((_QWORD *)v13 + 235) = v13 + 1856;
      (*(void (**)(char *))(*(_QWORD *)v177 + 24))(v177);
    }
    else
    {
      *((_QWORD *)v13 + 235) = v177;
      *((_QWORD *)v13 + 256) = 0;
    }
  }
  else
  {
    v178 = (std::runtime_error *)(v13 + 2496);
    *((_QWORD *)v13 + 235) = 0;
  }
  AMSCore::ExecuteHTTPRequestTask::perform(v178, (uint64_t)v271, (uint64_t)v267);
  v183 = *((_OWORD *)v13 + 156);
  *((_OWORD *)v70 + 110) = v183;
  v178->__vftable = 0;
  v178->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v183 + 440)))
    goto LABEL_232;
  *v268 = 2;
  v185 = (unint64_t *)(*((_QWORD *)v13 + 339) + 440);
  do
    v186 = __ldaxr(v185);
  while (__stlxr((unint64_t)v13, v185));
  if (v186)
  {
LABEL_232:
    v187 = *((_QWORD *)v70 + 220);
    if (*(_BYTE *)(v187 + 432))
    {
      v188 = (const std::runtime_error *)(v187 + 8);
      v189 = *(_BYTE *)(v187 + 424);
      if (v189)
      {
        *(_OWORD *)(v13 + 152) = *(_OWORD *)(v187 + 8);
        v188->__vftable = 0;
        *(_QWORD *)(v187 + 16) = 0;
        *((_QWORD *)v13 + 21) = *(_QWORD *)(v187 + 24);
        v190 = (_QWORD *)(v187 + 32);
        v191 = *(_QWORD *)(v187 + 32);
        *((_QWORD *)v13 + 22) = v191;
        v192 = v13 + 176;
        v193 = *(_QWORD *)(v187 + 40);
        *((_QWORD *)v13 + 23) = v193;
        if (v193)
        {
          *(_QWORD *)(v191 + 16) = v192;
          *(_QWORD *)(v187 + 24) = v190;
          *v190 = 0;
          *(_QWORD *)(v187 + 40) = 0;
        }
        else
        {
          *((_QWORD *)v13 + 21) = v192;
        }
        *((_OWORD *)v13 + 12) = *(_OWORD *)(v187 + 48);
        *(_QWORD *)(v187 + 48) = 0;
        *(_QWORD *)(v187 + 56) = 0;
        *((_OWORD *)v13 + 13) = *(_OWORD *)(v187 + 64);
        *(_QWORD *)(v187 + 64) = 0;
        *(_QWORD *)(v187 + 72) = 0;
        v13[224] = 0;
        v13[248] = 0;
        if (*(_BYTE *)(v187 + 104))
        {
          v198 = *(_OWORD *)(v187 + 80);
          *((_QWORD *)v13 + 30) = *(_QWORD *)(v187 + 96);
          *((_OWORD *)v13 + 14) = v198;
          *(_QWORD *)(v187 + 88) = 0;
          *(_QWORD *)(v187 + 96) = 0;
          *(_QWORD *)(v187 + 80) = 0;
          v13[248] = 1;
        }
        v13[256] = 0;
        *((_DWORD *)v13 + 68) = -1;
        v199 = *(unsigned int *)(v187 + 128);
        if ((_DWORD)v199 != -1)
        {
          ((void (*)(std::runtime_error *, char *, uint64_t))off_1E253CA98[v199])(&v302, v13 + 256, v187 + 112);
          *((_DWORD *)v13 + 68) = v199;
        }
        v200 = *(_OWORD *)(v187 + 136);
        *((_DWORD *)v13 + 74) = *(_DWORD *)(v187 + 152);
        *(_OWORD *)(v13 + 280) = v200;
        v201 = (_QWORD *)(v187 + 184);
        v202 = *(_QWORD *)(v187 + 184);
        if (v202)
        {
          if (v202 == v187 + 160)
          {
            *((_QWORD *)v13 + 41) = v13 + 304;
            (*(void (**)(_QWORD))(*(_QWORD *)*v201 + 24))(*v201);
          }
          else
          {
            *((_QWORD *)v13 + 41) = v202;
            *v201 = 0;
          }
        }
        else
        {
          *((_QWORD *)v13 + 41) = 0;
        }
        *((_OWORD *)v13 + 21) = *(_OWORD *)(v187 + 192);
        *(_QWORD *)(v187 + 192) = 0;
        *(_QWORD *)(v187 + 200) = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v23, v188);
        *((_QWORD *)v13 + 19) = MEMORY[0x1E0DE4F90] + 16;
        *(_OWORD *)(v13 + 168) = *(_OWORD *)(v187 + 24);
        *((_QWORD *)v13 + 19) = off_1E2521330;
        *((_QWORD *)v13 + 23) = *(_QWORD *)(v187 + 40);
        v194 = (_QWORD *)(v187 + 48);
        v195 = *(_QWORD *)(v187 + 48);
        *((_QWORD *)v13 + 24) = v195;
        v196 = v13 + 192;
        v197 = *(_QWORD *)(v187 + 56);
        *((_QWORD *)v13 + 25) = v197;
        if (v197)
        {
          *(_QWORD *)(v195 + 16) = v196;
          *(_QWORD *)(v187 + 40) = v194;
          *v194 = 0;
          *(_QWORD *)(v187 + 56) = 0;
        }
        else
        {
          *((_QWORD *)v13 + 23) = v196;
        }
        *((_OWORD *)v13 + 13) = *(_OWORD *)(v187 + 64);
        *(_QWORD *)(v187 + 64) = 0;
        *(_QWORD *)(v187 + 72) = 0;
        v13[224] = 0;
        *((_QWORD *)v13 + 19) = &off_1E2521420;
        v13[248] = 0;
        if (*(_BYTE *)(v187 + 104))
        {
          v203 = *(_OWORD *)(v187 + 80);
          *((_QWORD *)v13 + 30) = *(_QWORD *)(v187 + 96);
          *((_OWORD *)v13 + 14) = v203;
          *(_QWORD *)(v187 + 88) = 0;
          *(_QWORD *)(v187 + 96) = 0;
          *(_QWORD *)(v187 + 80) = 0;
          v13[248] = 1;
        }
        v204 = *(_OWORD *)(v187 + 128);
        *((_OWORD *)v13 + 16) = *(_OWORD *)(v187 + 112);
        *((_OWORD *)v13 + 17) = v204;
        v205 = *(_OWORD *)(v187 + 144);
        v206 = *(_OWORD *)(v187 + 160);
        v207 = *(_OWORD *)(v187 + 176);
        *(_OWORD *)(v13 + 329) = *(_OWORD *)(v187 + 185);
        *((_OWORD *)v13 + 19) = v206;
        *((_OWORD *)v13 + 20) = v207;
        *((_OWORD *)v13 + 18) = v205;
        *((_QWORD *)v13 + 45) = 0;
        *((_QWORD *)v13 + 46) = 0;
        *((_QWORD *)v13 + 44) = 0;
        *((_OWORD *)v13 + 22) = *(_OWORD *)(v187 + 208);
        *((_QWORD *)v13 + 46) = *(_QWORD *)(v187 + 224);
        *(_QWORD *)(v187 + 216) = 0;
        *(_QWORD *)(v187 + 224) = 0;
        *(_QWORD *)(v187 + 208) = 0;
        v208 = *(_OWORD *)(v187 + 248);
        *(_OWORD *)(v13 + 376) = *(_OWORD *)(v187 + 232);
        *(_OWORD *)(v13 + 392) = v208;
        v209 = *(_OWORD *)(v187 + 264);
        v210 = *(_OWORD *)(v187 + 280);
        v211 = *(_OWORD *)(v187 + 312);
        *(_OWORD *)(v13 + 440) = *(_OWORD *)(v187 + 296);
        *(_OWORD *)(v13 + 456) = v211;
        *(_OWORD *)(v13 + 408) = v209;
        *(_OWORD *)(v13 + 424) = v210;
        v212 = *(_OWORD *)(v187 + 328);
        v213 = *(_OWORD *)(v187 + 344);
        v214 = *(_OWORD *)(v187 + 360);
        *(_OWORD *)(v13 + 514) = *(_OWORD *)(v187 + 370);
        *(_OWORD *)(v13 + 488) = v213;
        *(_OWORD *)(v13 + 504) = v214;
        *(_OWORD *)(v13 + 472) = v212;
        v13[536] = 0;
        v13[560] = 0;
        if (*(_BYTE *)(v187 + 416))
        {
          v215 = *(_OWORD *)(v187 + 392);
          *((_QWORD *)v13 + 69) = *(_QWORD *)(v187 + 408);
          *(_OWORD *)(v13 + 536) = v215;
          *(_QWORD *)(v187 + 400) = 0;
          *(_QWORD *)(v187 + 408) = 0;
          *(_QWORD *)(v187 + 392) = 0;
          v13[560] = 1;
        }
      }
      v13[568] = v189;
      v216 = *((_QWORD *)v13 + 340);
      if (v216)
      {
        v217 = (unint64_t *)(v216 + 8);
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          v219 = (std::__shared_weak_count *)*((_QWORD *)v13 + 340);
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      v220 = (std::__shared_weak_count *)*((_QWORD *)v13 + 313);
      if (v220)
      {
        v221 = (unint64_t *)&v220->__shared_owners_;
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v267);
      v223 = (std::__shared_weak_count *)*((_QWORD *)v13 + 170);
      if (v223)
      {
        v224 = (unint64_t *)&v223->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v271);
      if (!v13[568])
      {
        std::runtime_error::runtime_error(&v302, v23);
        v227 = v13 + 192;
        v228 = *((_QWORD *)v13 + 24);
        v303 = *(std::error_code *)(v13 + 168);
        v304 = (unsigned int **)*((_QWORD *)v13 + 23);
        v305 = (unsigned int *)v228;
        v306 = *((_QWORD *)v13 + 25);
        if (v306)
        {
          *(_QWORD *)(v228 + 16) = &v305;
          *((_QWORD *)v13 + 23) = v227;
          *v227 = 0;
          *((_QWORD *)v13 + 25) = 0;
        }
        else
        {
          v304 = &v305;
        }
        v307 = *((_OWORD *)v13 + 13);
        *((_QWORD *)v13 + 26) = 0;
        *((_QWORD *)v13 + 27) = 0;
        v302.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
        LOBYTE(__p[0]) = 0;
        LOBYTE(__p[3]) = 0;
        if (v13[248])
        {
          *(_OWORD *)__p = *((_OWORD *)v13 + 14);
          __p[2] = *((void **)v13 + 30);
          *((_QWORD *)v13 + 29) = 0;
          *((_QWORD *)v13 + 30) = 0;
          *((_QWORD *)v13 + 28) = 0;
          LOBYTE(__p[3]) = 1;
        }
        v237 = *((_OWORD *)v13 + 19);
        *(_OWORD *)v310 = *((_OWORD *)v13 + 18);
        *(_OWORD *)&v310[16] = v237;
        *(_OWORD *)v311 = *((_OWORD *)v13 + 20);
        v238 = *((_OWORD *)v13 + 17);
        *(_OWORD *)v309 = *((_OWORD *)v13 + 16);
        *(_OWORD *)&v309[16] = v238;
        *(_OWORD *)&v311[9] = *(_OWORD *)(v13 + 329);
        *(_OWORD *)v312 = *((_OWORD *)v13 + 22);
        *(_QWORD *)&v312[16] = *((_QWORD *)v13 + 46);
        *((_QWORD *)v13 + 44) = 0;
        *((_QWORD *)v13 + 45) = 0;
        *((_QWORD *)v13 + 46) = 0;
        *(_OWORD *)((char *)v321 + 10) = *(_OWORD *)(v13 + 514);
        v239 = *(_OWORD *)(v13 + 488);
        v319 = *(_OWORD *)(v13 + 472);
        v320 = v239;
        v321[0] = *(_OWORD *)(v13 + 504);
        v240 = *(_OWORD *)(v13 + 424);
        v315 = *(_OWORD *)(v13 + 408);
        v316 = v240;
        v241 = *(_OWORD *)(v13 + 456);
        v317 = *(_OWORD *)(v13 + 440);
        v318 = v241;
        v242 = *(_OWORD *)(v13 + 392);
        v313 = *(_OWORD *)(v13 + 376);
        v314 = v242;
        LOBYTE(v322) = 0;
        v324 = 0;
        if (v13[560])
        {
          v323 = *((_QWORD *)v13 + 69);
          v322 = *(_OWORD *)(v13 + 536);
          *((_QWORD *)v13 + 69) = 0;
          *((_QWORD *)v13 + 67) = 0;
          *((_QWORD *)v13 + 68) = 0;
          v324 = 1;
        }
        v325 = 1;
        std::runtime_error::runtime_error(&v291, &v302);
        ec = v303;
        v291.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v293 = v304;
        v294 = v305;
        v295 = v306;
        if (v306)
        {
          *((_QWORD *)v305 + 2) = &v294;
          v304 = &v305;
          v305 = 0;
          v306 = 0;
        }
        else
        {
          v293 = &v294;
        }
        v296 = v307;
        v307 = 0uLL;
        std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v291);
        *(std::error_code *)&__what_arg[16] = ec;
        *(_QWORD *)__what_arg = off_1E2521330;
        v243 = v294;
        v287 = v293;
        v288 = v294;
        v289 = v295;
        if (v295)
        {
          *((_QWORD *)v294 + 2) = &v288;
          v243 = 0;
          v293 = &v294;
          v294 = 0;
          v295 = 0;
        }
        else
        {
          v287 = &v288;
        }
        v290 = v296;
        v296 = 0uLL;
        v291.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v293, v243);
        MEMORY[0x18D7898AC](&v291);
        if (v13[104])
        {
          if (!v13[96])
            ((void (*)(std::runtime_error *))v269->~runtime_error)(v269);
          v13[104] = 0;
        }
        std::runtime_error::runtime_error(v269, (const std::runtime_error *)__what_arg);
        v245 = v287;
        v244 = v288;
        *((_QWORD *)v13 + 8) = v288;
        v246 = v13 + 64;
        *(_OWORD *)(v13 + 40) = *(_OWORD *)&__what_arg[16];
        *((_QWORD *)v13 + 3) = off_1E2521330;
        *((_QWORD *)v13 + 7) = v245;
        v247 = v289;
        *((_QWORD *)v13 + 9) = v289;
        if (v247)
        {
          *((_QWORD *)v244 + 2) = v246;
          v244 = 0;
          v287 = &v288;
          v288 = 0;
          v289 = 0;
        }
        else
        {
          *((_QWORD *)v13 + 7) = v246;
        }
        *((_OWORD *)v13 + 5) = v290;
        v290 = 0uLL;
        v13[96] = 0;
        v13[104] = 1;
        *(_QWORD *)__what_arg = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v287, v244);
        MEMORY[0x18D7898AC](__what_arg);
        if (v325)
          AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v302);
        if (!v13[568])
          goto LABEL_350;
        goto LABEL_327;
      }
      v226 = *(unsigned __int16 *)(*((_QWORD *)v13 + 42) + 152);
      if ((v226 - 200) > 0x63)
      {
        if ((v226 - 400) > 0x63)
        {
          if ((v226 - 500) > 0x63)
          {
            LOWORD(v291.__vftable) = *(_WORD *)(*((_QWORD *)v13 + 42) + 152);
            AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v302);
            AMSCore::Logger::log<char [48],AMSCore::HTTPResponse::StatusCode>((uint64_t)v302.__vftable);
            v254 = (std::__shared_weak_count *)v302.__imp_.__imp_;
            if (v302.__imp_.__imp_)
            {
              v255 = (unint64_t *)(v302.__imp_.__imp_ + 8);
              do
                v256 = __ldaxr(v255);
              while (__stlxr(v256 - 1, v255));
              if (!v256)
              {
                ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                std::__shared_weak_count::__release_weak(v254);
              }
            }
            AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[46]>((uint64_t)&v302, 0x12Du, "The server returned an unexpected status code");
            if (v13[104])
            {
              if (!v13[96])
                ((void (*)(std::runtime_error *))v269->~runtime_error)(v269);
              v13[104] = 0;
            }
            std::runtime_error::runtime_error(v269, &v302);
            v257 = v303;
            v258 = v305;
            v259 = v304;
            *((_QWORD *)v13 + 8) = v305;
            v260 = v13 + 64;
            *(std::error_code *)(v13 + 40) = v257;
            *((_QWORD *)v13 + 3) = off_1E2521330;
            *((_QWORD *)v13 + 7) = v259;
            v261 = v306;
            *((_QWORD *)v13 + 9) = v306;
            if (v261)
            {
              *((_QWORD *)v258 + 2) = v260;
              v304 = &v305;
              v305 = 0;
              v306 = 0;
              v258 = 0;
            }
            else
            {
              *((_QWORD *)v13 + 7) = v260;
            }
            *((_OWORD *)v13 + 5) = v307;
            *((_QWORD *)&v307 + 1) = 0;
            v13[96] = 0;
            v13[104] = 1;
            *(_QWORD *)&v307 = 0;
            v302.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v304, v258);
            MEMORY[0x18D7898AC](&v302);
            if (!v13[568])
              goto LABEL_350;
            goto LABEL_327;
          }
          LOWORD(v291.__vftable) = *(_WORD *)(*((_QWORD *)v13 + 42) + 152);
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v302);
          AMSCore::Logger::log<char [37],AMSCore::HTTPResponse::StatusCode>((uint64_t)v302.__vftable);
          v233 = (std::__shared_weak_count *)v302.__imp_.__imp_;
          if (v302.__imp_.__imp_)
          {
            v234 = (unint64_t *)(v302.__imp_.__imp_ + 8);
            do
              v235 = __ldaxr(v234);
            while (__stlxr(v235 - 1, v234));
            if (!v235)
            {
              ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
              std::__shared_weak_count::__release_weak(v233);
            }
          }
          if (v13[104])
            v236 = v13[96] == 0;
          else
            v236 = 0;
          if (v236)
            ((void (*)(std::runtime_error *))v269->~runtime_error)(v269);
          *((_DWORD *)v13 + 6) = 2;
        }
        else
        {
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v302);
          AMSCore::Logger::log<char [65]>((uint64_t)v302.__vftable);
          v229 = (std::__shared_weak_count *)v302.__imp_.__imp_;
          if (v302.__imp_.__imp_)
          {
            v230 = (unint64_t *)(v302.__imp_.__imp_ + 8);
            do
              v231 = __ldaxr(v230);
            while (__stlxr(v231 - 1, v230));
            if (!v231)
            {
              ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
              std::__shared_weak_count::__release_weak(v229);
            }
          }
          if (v13[104])
            v232 = v13[96] == 0;
          else
            v232 = 0;
          if (v232)
            ((void (*)(std::runtime_error *))v269->~runtime_error)(v269);
          *((_DWORD *)v13 + 6) = 1;
        }
      }
      else
      {
        if (v13[104] && !v13[96])
          ((void (*)(std::runtime_error *))v269->~runtime_error)(v269);
        *((_DWORD *)v13 + 6) = 0;
      }
      v13[96] = 1;
      v13[104] = 1;
      if (!v13[568])
      {
LABEL_350:
        ((void (*)(std::runtime_error *))v23->~runtime_error)(v23);
        goto LABEL_351;
      }
LABEL_327:
      v248 = (std::__shared_weak_count *)*((_QWORD *)v13 + 43);
      if (v248)
      {
        v249 = (unint64_t *)&v248->__shared_owners_;
        do
          v250 = __ldaxr(v249);
        while (__stlxr(v250 - 1, v249));
        if (!v250)
        {
          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
          std::__shared_weak_count::__release_weak(v248);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v13 + 168));
      v251 = (std::__shared_weak_count *)*((_QWORD *)v13 + 20);
      if (v251)
      {
        v252 = (unint64_t *)&v251->__shared_owners_;
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
LABEL_351:
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v270);
      if (v13[968])
      {
LABEL_352:
        v262 = (std::__shared_weak_count *)*((_QWORD *)v13 + 120);
        if (v262)
        {
          v263 = (unint64_t *)&v262->__shared_owners_;
          do
            v264 = __ldaxr(v263);
          while (__stlxr(v264 - 1, v263));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
            std::__shared_weak_count::__release_weak(v262);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v280->__vftable);
LABEL_358:
        v115 = 0;
        v116 = 0;
        v118 = 0;
        v117 = 0;
        v119 = 0;
        v120 = 0;
        if (v13[2208])
        {
LABEL_359:
          AMSCore::URL::~URL((AMSCore::URL *)v285);
          goto LABEL_360;
        }
LABEL_131:
        ((void (*)(std::runtime_error *))v285->~runtime_error)(v285);
LABEL_360:
        *((_QWORD *)v13 + 346) = v120;
        *((_QWORD *)v13 + 345) = v119;
        *((_QWORD *)v13 + 344) = v117;
        *((_QWORD *)v13 + 343) = v118;
        *((_QWORD *)v13 + 342) = v116;
        *((_QWORD *)v13 + 341) = v115;
        *((_QWORD *)v13 + 19) = v283;
        *(_QWORD *)v13 = 0;
        AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v23);
        return;
      }
LABEL_201:
      ((void (*)(std::runtime_error *))v280->~runtime_error)(v280);
      goto LABEL_358;
    }
LABEL_362:
    __break(1u);
  }
}

void sub_18CCC3720(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, AMSCore::ExecuteHTTPRequestTask::Options *a19, uint64_t a20,uint64_t a21,AMSCore::ExecuteHTTPRequestTask::Options *a22,AMSCore::EncodeHTTPRequestTask::Result *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,AMSCore::EncodeHTTPRequestTask::Options *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,AMSCore::URL *a41)
{
  uint64_t v41;

  if (a2)
  {
    std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](a38);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(a22);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](a36);
    if (*(_BYTE *)(v41 + 2208))
      AMSCore::URL::~URL(a41);
    else
      (**(void (***)(AMSCore::URL *))a41)(a41);
    __cxa_begin_catch(a1);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(a1);
}

void AMSCore::UploadMetricsEventTask::`anonymous namespace'::performInternal(unint64_t a1)
{
  std::runtime_error *v2;
  std::runtime_error *v3;
  void **v4;
  AMSCore::ExecuteHTTPRequestTask::Options *v5;
  AMSCore::ExecuteHTTPRequestTask::Options *v6;
  int v7;
  uint64_t *v8;
  AMSCore::ExecuteHTTPRequestTask::Options *v9;
  AMSCore::ExecuteHTTPRequestTask::Options *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const std::runtime_error *v32;
  char v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  __n128 v80;
  _DWORD *v81;
  uint64_t v82;
  std::__shared_weak_count *imp;
  unint64_t *v84;
  unint64_t v85;
  BOOL v86;
  _QWORD *v87;
  __n128 v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  const std::runtime_error *v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  _QWORD *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int v146;
  _QWORD *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  BOOL v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  BOOL v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  unsigned int *v163;
  unsigned int *v164;
  unsigned int **v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  __int128 v177;
  unsigned int *v178;
  unsigned int **v179;
  unint64_t v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int **v184;
  unint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  _BYTE *v199;
  unint64_t v200;
  AMSCore::URL *v201;
  void **v202;
  unint64_t v203;
  std::runtime_error *v204;
  std::runtime_error v205;
  __int128 v206;
  unsigned int **v207;
  unsigned int *v208;
  uint64_t v209;
  __int128 v210;
  std::runtime_error v211;
  __int128 v212;
  unsigned int **v213;
  unsigned int *v214;
  uint64_t v215;
  __int128 v216;
  std::runtime_error v217;
  __int128 v218;
  unsigned int **v219;
  unsigned int *v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  char v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  _OWORD v230[3];
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  _OWORD v240[2];
  __int128 v241;
  uint64_t v242;
  char v243;
  char v244;
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v2 = (std::runtime_error *)(a1 + 152);
  v3 = (std::runtime_error *)(a1 + 576);
  v4 = (void **)(a1 + 976);
  v5 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1720);
  v6 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1888);
  v203 = a1 + 16;
  v204 = (std::runtime_error *)(a1 + 2056);
  v7 = *(unsigned __int8 *)(a1 + 2783);
  if (v7 == 2)
    goto LABEL_138;
  v199 = (_BYTE *)(a1 + 2783);
  v200 = a1 + 1912;
  v201 = (AMSCore::URL *)(a1 + 2216);
  v202 = (void **)(a1 + 2400);
  v8 = (uint64_t *)(a1 + 2576);
  if (v7 == 1)
    goto LABEL_30;
  v9 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1720);
  v10 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1888);
  v11 = *(_QWORD *)(a1 + 2680);
  if (!*(_BYTE *)(v11 + 168))
    goto LABEL_290;
  v12 = *(_BYTE *)(v11 + 160);
  std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>(v204, v12, (std::runtime_error *)(v11 + 8));
  *(_BYTE *)(a1 + 2208) = v12;
  v13 = *(_QWORD *)(a1 + 2688);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      v16 = *(std::__shared_weak_count **)(a1 + 2688);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 160);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (*(_BYTE *)(a1 + 1536))
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1384));
  if ((*(char *)(a1 + 2471) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 2208))
      goto LABEL_18;
LABEL_36:
    std::runtime_error::runtime_error(&v217, v204);
    v218 = *(_OWORD *)(a1 + 2072);
    v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v41 = *(_QWORD *)(a1 + 2096);
    v219 = *(unsigned int ***)(a1 + 2088);
    v220 = (unsigned int *)v41;
    v221 = *(_QWORD *)(a1 + 2104);
    if (v221)
    {
      *(_QWORD *)(v41 + 16) = &v220;
      *(_QWORD *)(a1 + 2088) = a1 + 2096;
      *(_QWORD *)(a1 + 2096) = 0;
      *(_QWORD *)(a1 + 2104) = 0;
    }
    else
    {
      v219 = &v220;
    }
    v222 = *(_OWORD *)(a1 + 2112);
    *(_QWORD *)(a1 + 2120) = 0;
    *(_QWORD *)(a1 + 2112) = 0;
    LOBYTE(v223) = 1;
    std::runtime_error::runtime_error(&v205, &v217);
    v206 = v218;
    v205.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v207 = v219;
    v208 = v220;
    v209 = v221;
    if (v221)
    {
      *((_QWORD *)v220 + 2) = &v208;
      v219 = &v220;
      v220 = 0;
      v221 = 0;
    }
    else
    {
      v207 = &v208;
    }
    v210 = v222;
    v222 = 0uLL;
    std::runtime_error::runtime_error(&v211, &v205);
    v212 = v206;
    v211.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v182 = v208;
    v213 = v207;
    v214 = v208;
    v215 = v209;
    if (v209)
    {
      *((_QWORD *)v208 + 2) = &v214;
      v182 = 0;
      v207 = &v208;
      v208 = 0;
      v209 = 0;
    }
    else
    {
      v213 = &v214;
    }
    v216 = v210;
    v210 = 0uLL;
    v205.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v207, v182);
    MEMORY[0x18D7898AC](&v205);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v211);
    v184 = v213;
    v183 = v214;
    *(_QWORD *)(a1 + 64) = v214;
    v185 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v212;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v184;
    v186 = v215;
    *(_QWORD *)(a1 + 72) = v215;
    if (v186)
    {
      *((_QWORD *)v183 + 2) = v185;
      v183 = 0;
      v213 = &v214;
      v214 = 0;
      v215 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v185;
    }
    *(_OWORD *)(a1 + 80) = v216;
    v216 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v211.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v213, v183);
    MEMORY[0x18D7898AC](&v211);
    if ((_BYTE)v223)
    {
      v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v187 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
      if (*((_QWORD *)&v222 + 1))
      {
        v188 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v219, v220);
      MEMORY[0x18D7898AC](&v217);
    }
    v190 = *(_QWORD *)(a1 + 2672);
    v191 = *(_QWORD *)(a1 + 2664);
    v192 = *(_QWORD *)(a1 + 2648);
    v193 = *(_QWORD *)(a1 + 2632);
    v194 = *(_QWORD *)(a1 + 2608);
    v195 = *(_QWORD *)(a1 + 2600);
    if (*(_BYTE *)(a1 + 2208))
      goto LABEL_287;
    goto LABEL_275;
  }
  operator delete(*(void **)(a1 + 2448));
  if (!*(_BYTE *)(a1 + 2208))
    goto LABEL_36;
LABEL_18:
  *(_OWORD *)(a1 + 2560) = *(_OWORD *)(a1 + 2656);
  *(_BYTE *)(a1 + 2216) = 0;
  *(_BYTE *)(a1 + 2240) = 0;
  if (*(_BYTE *)(a1 + 2080))
  {
    *(std::runtime_error *)v201 = *v204;
    *((_QWORD *)v201 + 2) = v204[1].__vftable;
    v204->__imp_.__imp_ = 0;
    v204[1].__vftable = 0;
    v204->__vftable = 0;
    *(_BYTE *)(a1 + 2240) = 1;
  }
  *(_BYTE *)(a1 + 2248) = 0;
  *(_BYTE *)(a1 + 2272) = 0;
  if (*(_BYTE *)(a1 + 2112))
  {
    *(_QWORD *)(a1 + 2264) = *(_QWORD *)(a1 + 2104);
    *(_OWORD *)(a1 + 2248) = *(_OWORD *)(a1 + 2088);
    *(_QWORD *)(a1 + 2104) = 0;
    *(_QWORD *)(a1 + 2088) = 0;
    *(_QWORD *)(a1 + 2096) = 0;
    *(_BYTE *)(a1 + 2272) = 1;
  }
  *(_BYTE *)(a1 + 2280) = 0;
  *(_BYTE *)(a1 + 2304) = 0;
  if (*(_BYTE *)(a1 + 2144))
  {
    *(_QWORD *)(a1 + 2296) = *(_QWORD *)(a1 + 2136);
    *(_OWORD *)(a1 + 2280) = *(_OWORD *)(a1 + 2120);
    *(_QWORD *)(a1 + 2136) = 0;
    *(_QWORD *)(a1 + 2120) = 0;
    *(_QWORD *)(a1 + 2128) = 0;
    *(_BYTE *)(a1 + 2304) = 1;
  }
  *(_DWORD *)(a1 + 2312) = *(_DWORD *)(a1 + 2152);
  *(_QWORD *)(a1 + 2320) = a1 + 2320;
  *(_QWORD *)(a1 + 2328) = a1 + 2320;
  *(_QWORD *)(a1 + 2336) = 0;
  v20 = *(_QWORD *)(a1 + 2176);
  if (v20)
  {
    v21 = *(uint64_t **)(a1 + 2168);
    v22 = *(_QWORD *)(a1 + 2160);
    v23 = *v21;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v22 + 8);
    **(_QWORD **)(v22 + 8) = v23;
    v24 = *(_QWORD *)(a1 + 2320);
    *(_QWORD *)(v24 + 8) = v21;
    *v21 = v24;
    *(_QWORD *)(a1 + 2320) = v22;
    *(_QWORD *)(v22 + 8) = a1 + 2320;
    *(_QWORD *)(a1 + 2336) = v20;
    *(_QWORD *)(a1 + 2176) = 0;
  }
  v25 = *(_QWORD *)(a1 + 2672);
  v26 = *(_QWORD *)(a1 + 2616);
  *(_QWORD *)(a1 + 2360) = *(_QWORD *)(a1 + 2200);
  *(_OWORD *)(a1 + 2344) = *(_OWORD *)(a1 + 2184);
  *(_QWORD *)(a1 + 2200) = 0;
  *(_QWORD *)(a1 + 2192) = 0;
  *(_QWORD *)(a1 + 2184) = 0;
  *(_OWORD *)(a1 + 2400) = *(_OWORD *)(v200 + 688);
  *(_QWORD *)(a1 + 2416) = v26;
  *(_OWORD *)(a1 + 2368) = *(_OWORD *)(a1 + 2624);
  *(_OWORD *)(a1 + 2384) = *(_OWORD *)(a1 + 2640);
  *(_QWORD *)(a1 + 2576) = v25;
  v27 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v200 + 784) = v27;
  v2->__vftable = 0;
  v2->__imp_.__imp_ = 0;
  v28 = atomic_load((unint64_t *)(v27 + 416));
  v6 = v10;
  v5 = v9;
  if (!v28)
  {
    *v199 = 1;
    v29 = (unint64_t *)(*(_QWORD *)(a1 + 2696) + 416);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(a1, v29));
    if (!v30)
      return;
  }
LABEL_30:
  v31 = *(_QWORD *)(a1 + 2696);
  if (!*(_BYTE *)(v31 + 408))
    goto LABEL_290;
  v32 = (const std::runtime_error *)(v31 + 8);
  v33 = *(_BYTE *)(v31 + 400);
  if (v33)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v32);
    v34 = (_QWORD *)(v31 + 384);
    *(_QWORD *)(a1 + 952) = *(_QWORD *)(v31 + 384);
    v35 = (_QWORD *)(a1 + 960);
    v36 = (_QWORD *)(v31 + 392);
  }
  else
  {
    std::runtime_error::runtime_error(v3, v32);
    *(_OWORD *)(a1 + 592) = *(_OWORD *)(v31 + 24);
    *(_QWORD *)(a1 + 576) = off_1E2521330;
    v37 = (_QWORD *)(v31 + 48);
    v38 = *(_QWORD *)(v31 + 48);
    *(_QWORD *)(a1 + 608) = *(_QWORD *)(v31 + 40);
    v39 = a1 + 616;
    *(_QWORD *)(a1 + 616) = v38;
    v40 = *(_QWORD *)(v31 + 56);
    *(_QWORD *)(a1 + 624) = v40;
    if (v40)
    {
      *(_QWORD *)(v38 + 16) = v39;
      *(_QWORD *)(v31 + 40) = v37;
      *v37 = 0;
      *(_QWORD *)(v31 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 608) = v39;
    }
    v42 = *(_QWORD *)(a1 + 2696);
    v43 = *(_QWORD *)(v42 + 64);
    v34 = (_QWORD *)(v42 + 64);
    *(_QWORD *)(a1 + 632) = v43;
    v35 = (_QWORD *)(a1 + 640);
    v36 = v34 + 1;
  }
  *v35 = *v36;
  *v34 = 0;
  v34[1] = 0;
  *(_BYTE *)(a1 + 968) = v33;
  v44 = *(_QWORD *)(a1 + 2704);
  if (v44)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      v47 = *(std::__shared_weak_count **)(a1 + 2704);
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v48 = *(std::__shared_weak_count **)(a1 + 160);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *v8;
  *v8 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(std::__shared_weak_count **)(a1 + 2392);
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = *(std::__shared_weak_count **)(a1 + 2376);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (char *)*v202;
  if (*v202)
  {
    v59 = *(char **)(a1 + 2408);
    v60 = *v202;
    if (v59 != v58)
    {
      do
      {
        v61 = v59 - 32;
        v62 = *((unsigned int *)v59 - 2);
        if ((_DWORD)v62 != -1)
          ((void (*)(std::runtime_error *, char *))off_1E253D240[v62])(&v217, v59 - 32);
        *((_DWORD *)v59 - 2) = -1;
        v59 -= 32;
      }
      while (v61 != v58);
      v60 = *v202;
    }
    *(_QWORD *)(a1 + 2408) = v58;
    operator delete(v60);
  }
  AMSCore::URL::~URL(v201);
  v63 = *(std::__shared_weak_count **)(a1 + 2568);
  if (!v63)
    goto LABEL_293;
  v64 = (unint64_t *)&v63->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (v65)
  {
LABEL_293:
    if (*(_BYTE *)(a1 + 968))
      goto LABEL_75;
LABEL_95:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v217);
    AMSCore::Logger::log<char [31],AMSCore::Error>((uint64_t)v217.__vftable, 4, (uint64_t)"metrics", 7, "Failed to encode metrics batch", (uint64_t)v3);
    imp = (std::__shared_weak_count *)v217.__imp_.__imp_;
    if (v217.__imp_.__imp_)
    {
      v84 = (unint64_t *)(v217.__imp_.__imp_ + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    if (*(_BYTE *)(a1 + 104))
      v86 = *(_BYTE *)(a1 + 96) == 0;
    else
      v86 = 0;
    if (v86)
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    *(_DWORD *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 96) = 1;
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)(a1 + 968))
      goto LABEL_280;
    goto LABEL_107;
  }
  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
  std::__shared_weak_count::__release_weak(v63);
  if (!*(_BYTE *)(a1 + 968))
    goto LABEL_95;
LABEL_75:
  *(_QWORD *)(a1 + 2528) = *(_QWORD *)(a1 + 600);
  v66 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 2536) = v66;
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  *(_QWORD *)(a1 + 2544) = *(_QWORD *)(a1 + 616);
  v69 = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(a1 + 2552) = v69;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)&v217, (__int128 *)(a1 + 2528), (__int128 *)(a1 + 2544));
  WORD5(v227) = 256;
  AMSCore::ExecuteHTTPRequestTask::Options::Options(v6, (const AMSCore::ExecuteHTTPRequestTask::Options *)&v217);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v217);
  v72 = *(std::__shared_weak_count **)(a1 + 2552);
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(std::__shared_weak_count **)(a1 + 2536);
  if (!v75)
    goto LABEL_294;
  v76 = (unint64_t *)&v75->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
    if (*(_QWORD *)(a1 + 2512))
      goto LABEL_91;
  }
  else
  {
LABEL_294:
    if (*(_QWORD *)(a1 + 2512))
      goto LABEL_91;
  }
  v99 = operator new(0x20uLL);
  v99[1] = 0;
  v99[2] = 0;
  *v99 = &off_1E2523030;
  *((_BYTE *)v99 + 24) = 0;
  *(_QWORD *)(a1 + 2512) = v99 + 3;
  v100 = *(std::__shared_weak_count **)(a1 + 2520);
  *(_QWORD *)(a1 + 2520) = v99;
  if (v100)
  {
    v101 = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
LABEL_91:
  v78 = *(_QWORD *)(a1 + 2512);
  if (*(_QWORD *)(a1 + 2656))
  {
    v79 = operator new(0x30uLL);
    v79[1] = 0;
    v79[2] = 0;
    *v79 = &off_1E2522E00;
    *((_BYTE *)v79 + 32) = 0;
    *((_BYTE *)v79 + 36) = 0;
    v79[3] = &off_1E2521180;
    v79[5] = v78;
    *(_QWORD *)(a1 + 2424) = v79 + 3;
    *(_QWORD *)(a1 + 2432) = v79;
    *(_DWORD *)(a1 + 2440) = 0;
    v217.__vftable = (std::runtime_error_vtbl *)(a1 + 1976);
    v80 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v217, (__n128 *)(a1 + 1976), (__n128 *)(a1 + 2424));
    v81 = (_DWORD *)(a1 + 2440);
    v82 = *(unsigned int *)(a1 + 2440);
    if ((_DWORD)v82 != -1)
      ((void (*)(std::runtime_error *, unint64_t, __n128))off_1E253D230[v82])(&v217, a1 + 2424, v80);
  }
  else
  {
    v87 = operator new(0x28uLL);
    v87[1] = 0;
    v87[2] = 0;
    *v87 = &off_1E2522E70;
    v87[3] = &off_1E2521298;
    v87[4] = v78;
    *(_QWORD *)(a1 + 2472) = v87 + 3;
    *(_QWORD *)(a1 + 2480) = v87;
    *(_DWORD *)(a1 + 2488) = 1;
    v217.__vftable = (std::runtime_error_vtbl *)(a1 + 1976);
    v88 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v217, (__n128 *)(a1 + 1976), (__n128 *)(a1 + 2472));
    v81 = (_DWORD *)(a1 + 2488);
    v89 = *(unsigned int *)(a1 + 2488);
    if ((_DWORD)v89 != -1)
      ((void (*)(std::runtime_error *, unint64_t, __n128))off_1E253D230[v89])(&v217, a1 + 2472, v88);
  }
  *v81 = -1;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v217);
  AMSCore::Logger::log<char [11],unsigned long,char [16]>((uint64_t)v217.__vftable);
  v90 = (std::__shared_weak_count *)v217.__imp_.__imp_;
  if (v217.__imp_.__imp_)
  {
    v91 = (unint64_t *)(v217.__imp_.__imp_ + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (!*(_BYTE *)(a1 + 968))
    goto LABEL_290;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v4, (uint64_t)v3);
  *(_QWORD *)(a1 + 1352) = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 1720) = *(_QWORD *)(a1 + 1888);
  v93 = a1 + 1728;
  v94 = *(_QWORD *)(a1 + 1896);
  *(_QWORD *)(a1 + 1728) = v94;
  v95 = *(_QWORD *)(a1 + 1904);
  *(_QWORD *)(a1 + 1736) = v95;
  if (v95)
  {
    *(_QWORD *)(v94 + 16) = v93;
    *(_QWORD *)v6 = a1 + 1896;
    *(_QWORD *)(a1 + 1896) = 0;
    *(_QWORD *)(a1 + 1904) = 0;
  }
  else
  {
    *(_QWORD *)v5 = v93;
  }
  v96 = *(_OWORD *)(v200 + 16);
  *(_OWORD *)(a1 + 1744) = *(_OWORD *)v200;
  *(_QWORD *)v200 = 0;
  *(_QWORD *)(v200 + 8) = 0;
  *(_OWORD *)(a1 + 1760) = v96;
  *(_QWORD *)(v200 + 16) = 0;
  *(_QWORD *)(v200 + 24) = 0;
  *(_BYTE *)(a1 + 1776) = 0;
  *(_BYTE *)(a1 + 1800) = 0;
  if (*(_BYTE *)(a1 + 1968))
  {
    *(_QWORD *)(a1 + 1792) = *(_QWORD *)(a1 + 1960);
    *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a1 + 1944);
    *(_QWORD *)(a1 + 1960) = 0;
    *(_QWORD *)(a1 + 1944) = 0;
    *(_QWORD *)(a1 + 1952) = 0;
    *(_BYTE *)(a1 + 1800) = 1;
  }
  *(_BYTE *)(a1 + 1808) = 0;
  *(_DWORD *)(a1 + 1824) = -1;
  v97 = *(unsigned int *)(a1 + 1992);
  if ((_DWORD)v97 != -1)
  {
    ((void (*)(std::runtime_error *, unint64_t, unint64_t))off_1E253CA98[v97])(&v217, a1 + 1808, a1 + 1976);
    *(_DWORD *)(a1 + 1824) = v97;
  }
  *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a1 + 2000);
  *(_DWORD *)(a1 + 1848) = *(_DWORD *)(a1 + 2016);
  v98 = *(_QWORD *)(a1 + 2048);
  if (v98)
  {
    if (v98 == a1 + 2024)
    {
      *(_QWORD *)(a1 + 1880) = a1 + 1856;
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 24))(v98);
    }
    else
    {
      *(_QWORD *)(a1 + 1880) = v98;
      *(_QWORD *)(a1 + 2048) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1880) = 0;
  }
  AMSCore::ExecuteHTTPRequestTask::perform((std::runtime_error *)(a1 + 2496), (uint64_t)v4, (uint64_t)v5);
  v103 = *(_OWORD *)(a1 + 2496);
  *(_OWORD *)(v200 + 800) = v103;
  *(_QWORD *)(a1 + 2496) = 0;
  *(_QWORD *)(a1 + 2504) = 0;
  if (atomic_load((unint64_t *)(v103 + 440)))
    goto LABEL_138;
  *v199 = 2;
  v105 = (unint64_t *)(*(_QWORD *)(a1 + 2712) + 440);
  do
    v106 = __ldaxr(v105);
  while (__stlxr(a1, v105));
  if (v106)
  {
LABEL_138:
    v107 = *(_QWORD *)(a1 + 2712);
    if (*(_BYTE *)(v107 + 432))
    {
      v108 = (const std::runtime_error *)(v107 + 8);
      v109 = *(_BYTE *)(v107 + 424);
      if (v109)
      {
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(v107 + 8);
        v108->__vftable = 0;
        *(_QWORD *)(v107 + 16) = 0;
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(v107 + 24);
        v110 = (_QWORD *)(v107 + 32);
        v111 = *(_QWORD *)(v107 + 32);
        *(_QWORD *)(a1 + 176) = v111;
        v112 = a1 + 176;
        v113 = *(_QWORD *)(v107 + 40);
        *(_QWORD *)(a1 + 184) = v113;
        if (v113)
        {
          *(_QWORD *)(v111 + 16) = v112;
          *(_QWORD *)(v107 + 24) = v110;
          *v110 = 0;
          *(_QWORD *)(v107 + 40) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 168) = v112;
        }
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(v107 + 48);
        *(_QWORD *)(v107 + 48) = 0;
        *(_QWORD *)(v107 + 56) = 0;
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v107 + 64);
        *(_QWORD *)(v107 + 64) = 0;
        *(_QWORD *)(v107 + 72) = 0;
        *(_BYTE *)(a1 + 224) = 0;
        *(_BYTE *)(a1 + 248) = 0;
        if (*(_BYTE *)(v107 + 104))
        {
          v118 = *(_OWORD *)(v107 + 80);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(v107 + 96);
          *(_OWORD *)(a1 + 224) = v118;
          *(_QWORD *)(v107 + 88) = 0;
          *(_QWORD *)(v107 + 96) = 0;
          *(_QWORD *)(v107 + 80) = 0;
          *(_BYTE *)(a1 + 248) = 1;
        }
        *(_BYTE *)(a1 + 256) = 0;
        *(_DWORD *)(a1 + 272) = -1;
        v119 = *(unsigned int *)(v107 + 128);
        if ((_DWORD)v119 != -1)
        {
          ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v119])(&v217, a1 + 256, v107 + 112);
          *(_DWORD *)(a1 + 272) = v119;
        }
        v120 = *(_OWORD *)(v107 + 136);
        *(_DWORD *)(a1 + 296) = *(_DWORD *)(v107 + 152);
        *(_OWORD *)(a1 + 280) = v120;
        v121 = (_QWORD *)(v107 + 184);
        v122 = *(_QWORD *)(v107 + 184);
        if (v122)
        {
          if (v122 == v107 + 160)
          {
            *(_QWORD *)(a1 + 328) = a1 + 304;
            (*(void (**)(_QWORD))(*(_QWORD *)*v121 + 24))(*v121);
          }
          else
          {
            *(_QWORD *)(a1 + 328) = v122;
            *v121 = 0;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 328) = 0;
        }
        *(_OWORD *)(a1 + 336) = *(_OWORD *)(v107 + 192);
        *(_QWORD *)(v107 + 192) = 0;
        *(_QWORD *)(v107 + 200) = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v2, v108);
        *(_QWORD *)(a1 + 152) = MEMORY[0x1E0DE4F90] + 16;
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v107 + 24);
        *(_QWORD *)(a1 + 152) = off_1E2521330;
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(v107 + 40);
        v114 = (_QWORD *)(v107 + 48);
        v115 = *(_QWORD *)(v107 + 48);
        *(_QWORD *)(a1 + 192) = v115;
        v116 = a1 + 192;
        v117 = *(_QWORD *)(v107 + 56);
        *(_QWORD *)(a1 + 200) = v117;
        if (v117)
        {
          *(_QWORD *)(v115 + 16) = v116;
          *(_QWORD *)(v107 + 40) = v114;
          *v114 = 0;
          *(_QWORD *)(v107 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 184) = v116;
        }
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v107 + 64);
        *(_QWORD *)(v107 + 64) = 0;
        *(_QWORD *)(v107 + 72) = 0;
        *(_BYTE *)(a1 + 224) = 0;
        *(_QWORD *)(a1 + 152) = &off_1E2521420;
        *(_BYTE *)(a1 + 248) = 0;
        if (*(_BYTE *)(v107 + 104))
        {
          v123 = *(_OWORD *)(v107 + 80);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(v107 + 96);
          *(_OWORD *)(a1 + 224) = v123;
          *(_QWORD *)(v107 + 88) = 0;
          *(_QWORD *)(v107 + 96) = 0;
          *(_QWORD *)(v107 + 80) = 0;
          *(_BYTE *)(a1 + 248) = 1;
        }
        v124 = *(_OWORD *)(v107 + 128);
        *(_OWORD *)(a1 + 256) = *(_OWORD *)(v107 + 112);
        *(_OWORD *)(a1 + 272) = v124;
        v125 = *(_OWORD *)(v107 + 144);
        v126 = *(_OWORD *)(v107 + 160);
        v127 = *(_OWORD *)(v107 + 176);
        *(_OWORD *)(a1 + 329) = *(_OWORD *)(v107 + 185);
        *(_OWORD *)(a1 + 304) = v126;
        *(_OWORD *)(a1 + 320) = v127;
        *(_OWORD *)(a1 + 288) = v125;
        *(_QWORD *)(a1 + 360) = 0;
        *(_QWORD *)(a1 + 368) = 0;
        *(_QWORD *)(a1 + 352) = 0;
        *(_OWORD *)(a1 + 352) = *(_OWORD *)(v107 + 208);
        *(_QWORD *)(a1 + 368) = *(_QWORD *)(v107 + 224);
        *(_QWORD *)(v107 + 216) = 0;
        *(_QWORD *)(v107 + 224) = 0;
        *(_QWORD *)(v107 + 208) = 0;
        v128 = *(_OWORD *)(v107 + 248);
        *(_OWORD *)(a1 + 376) = *(_OWORD *)(v107 + 232);
        *(_OWORD *)(a1 + 392) = v128;
        v129 = *(_OWORD *)(v107 + 264);
        v130 = *(_OWORD *)(v107 + 280);
        v131 = *(_OWORD *)(v107 + 312);
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(v107 + 296);
        *(_OWORD *)(a1 + 456) = v131;
        *(_OWORD *)(a1 + 408) = v129;
        *(_OWORD *)(a1 + 424) = v130;
        v132 = *(_OWORD *)(v107 + 328);
        v133 = *(_OWORD *)(v107 + 344);
        v134 = *(_OWORD *)(v107 + 360);
        *(_OWORD *)(a1 + 514) = *(_OWORD *)(v107 + 370);
        *(_OWORD *)(a1 + 488) = v133;
        *(_OWORD *)(a1 + 504) = v134;
        *(_OWORD *)(a1 + 472) = v132;
        *(_BYTE *)(a1 + 536) = 0;
        *(_BYTE *)(a1 + 560) = 0;
        if (*(_BYTE *)(v107 + 416))
        {
          v135 = *(_OWORD *)(v107 + 392);
          *(_QWORD *)(a1 + 552) = *(_QWORD *)(v107 + 408);
          *(_OWORD *)(a1 + 536) = v135;
          *(_QWORD *)(v107 + 400) = 0;
          *(_QWORD *)(v107 + 408) = 0;
          *(_QWORD *)(v107 + 392) = 0;
          *(_BYTE *)(a1 + 560) = 1;
        }
      }
      *(_BYTE *)(a1 + 568) = v109;
      v136 = *(_QWORD *)(a1 + 2720);
      if (v136)
      {
        v137 = (unint64_t *)(v136 + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          v139 = *(std::__shared_weak_count **)(a1 + 2720);
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v140 = *(std::__shared_weak_count **)(a1 + 2504);
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v5);
      v143 = *(std::__shared_weak_count **)(a1 + 1360);
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
      if (!*(_BYTE *)(a1 + 568))
      {
        std::runtime_error::runtime_error(&v217, v2);
        v147 = (_QWORD *)(a1 + 192);
        v148 = *(_QWORD *)(a1 + 192);
        v218 = *(_OWORD *)(a1 + 168);
        v219 = *(unsigned int ***)(a1 + 184);
        v220 = (unsigned int *)v148;
        v221 = *(_QWORD *)(a1 + 200);
        if (v221)
        {
          *(_QWORD *)(v148 + 16) = &v220;
          *(_QWORD *)(a1 + 184) = v147;
          *v147 = 0;
          *(_QWORD *)(a1 + 200) = 0;
        }
        else
        {
          v219 = &v220;
        }
        v222 = *(_OWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        v217.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
        LOBYTE(v223) = 0;
        v225 = 0;
        if (*(_BYTE *)(a1 + 248))
        {
          v223 = *(_OWORD *)(a1 + 224);
          v224 = *(_QWORD *)(a1 + 240);
          *(_QWORD *)(a1 + 232) = 0;
          *(_QWORD *)(a1 + 240) = 0;
          *(_QWORD *)(a1 + 224) = 0;
          v225 = 1;
        }
        v157 = *(_OWORD *)(a1 + 304);
        v228 = *(_OWORD *)(a1 + 288);
        v229 = v157;
        v230[0] = *(_OWORD *)(a1 + 320);
        v158 = *(_OWORD *)(a1 + 272);
        v226 = *(_OWORD *)(a1 + 256);
        v227 = v158;
        *(_OWORD *)((char *)v230 + 9) = *(_OWORD *)(a1 + 329);
        v230[2] = *(_OWORD *)(a1 + 352);
        v231 = *(_QWORD *)(a1 + 368);
        *(_QWORD *)(a1 + 352) = 0;
        *(_QWORD *)(a1 + 360) = 0;
        *(_QWORD *)(a1 + 368) = 0;
        *(_OWORD *)((char *)v240 + 10) = *(_OWORD *)(a1 + 514);
        v159 = *(_OWORD *)(a1 + 488);
        v238 = *(_OWORD *)(a1 + 472);
        v239 = v159;
        v240[0] = *(_OWORD *)(a1 + 504);
        v160 = *(_OWORD *)(a1 + 424);
        v234 = *(_OWORD *)(a1 + 408);
        v235 = v160;
        v161 = *(_OWORD *)(a1 + 456);
        v236 = *(_OWORD *)(a1 + 440);
        v237 = v161;
        v162 = *(_OWORD *)(a1 + 392);
        v232 = *(_OWORD *)(a1 + 376);
        v233 = v162;
        LOBYTE(v241) = 0;
        v243 = 0;
        if (*(_BYTE *)(a1 + 560))
        {
          v242 = *(_QWORD *)(a1 + 552);
          v241 = *(_OWORD *)(a1 + 536);
          *(_QWORD *)(a1 + 552) = 0;
          *(_QWORD *)(a1 + 536) = 0;
          *(_QWORD *)(a1 + 544) = 0;
          v243 = 1;
        }
        v244 = 1;
        std::runtime_error::runtime_error(&v211, &v217);
        v212 = v218;
        v211.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v213 = v219;
        v214 = v220;
        v215 = v221;
        if (v221)
        {
          *((_QWORD *)v220 + 2) = &v214;
          v219 = &v220;
          v220 = 0;
          v221 = 0;
        }
        else
        {
          v213 = &v214;
        }
        v216 = v222;
        v222 = 0uLL;
        std::runtime_error::runtime_error(&v205, &v211);
        v206 = v212;
        v205.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v163 = v214;
        v207 = v213;
        v208 = v214;
        v209 = v215;
        if (v215)
        {
          *((_QWORD *)v214 + 2) = &v208;
          v163 = 0;
          v213 = &v214;
          v214 = 0;
          v215 = 0;
        }
        else
        {
          v207 = &v208;
        }
        v210 = v216;
        v216 = 0uLL;
        v211.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v213, v163);
        MEMORY[0x18D7898AC](&v211);
        if (*(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(a1 + 96))
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v205);
        v165 = v207;
        v164 = v208;
        *(_QWORD *)(a1 + 64) = v208;
        v166 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v206;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v165;
        v167 = v209;
        *(_QWORD *)(a1 + 72) = v209;
        if (v167)
        {
          *((_QWORD *)v164 + 2) = v166;
          v164 = 0;
          v207 = &v208;
          v208 = 0;
          v209 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v166;
        }
        *(_OWORD *)(a1 + 80) = v210;
        v210 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v205.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v207, v164);
        MEMORY[0x18D7898AC](&v205);
        if (v244)
          AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v217);
        if (!*(_BYTE *)(a1 + 568))
          goto LABEL_278;
        goto LABEL_232;
      }
      v146 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 336) + 152);
      if ((v146 - 200) > 0x63)
      {
        if ((v146 - 400) > 0x63)
        {
          if ((v146 - 500) > 0x63)
          {
            LOWORD(v211.__vftable) = *(_WORD *)(*(_QWORD *)(a1 + 336) + 152);
            AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v217);
            AMSCore::Logger::log<char [48],AMSCore::HTTPResponse::StatusCode>((uint64_t)v217.__vftable);
            v174 = (std::__shared_weak_count *)v217.__imp_.__imp_;
            if (v217.__imp_.__imp_)
            {
              v175 = (unint64_t *)(v217.__imp_.__imp_ + 8);
              do
                v176 = __ldaxr(v175);
              while (__stlxr(v176 - 1, v175));
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                std::__shared_weak_count::__release_weak(v174);
              }
            }
            AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[46]>((uint64_t)&v217, 0x12Du, "The server returned an unexpected status code");
            if (*(_BYTE *)(a1 + 104))
            {
              if (!*(_BYTE *)(a1 + 96))
                (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
              *(_BYTE *)(a1 + 104) = 0;
            }
            std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v217);
            v177 = v218;
            v179 = v219;
            v178 = v220;
            *(_QWORD *)(a1 + 64) = v220;
            v180 = a1 + 64;
            *(_OWORD *)(a1 + 40) = v177;
            *(_QWORD *)(a1 + 24) = off_1E2521330;
            *(_QWORD *)(a1 + 56) = v179;
            v181 = v221;
            *(_QWORD *)(a1 + 72) = v221;
            if (v181)
            {
              *((_QWORD *)v178 + 2) = v180;
              v219 = &v220;
              v220 = 0;
              v221 = 0;
              v178 = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 56) = v180;
            }
            *(_OWORD *)(a1 + 80) = v222;
            v222 = 0uLL;
            *(_BYTE *)(a1 + 96) = 0;
            *(_BYTE *)(a1 + 104) = 1;
            v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v219, v178);
            MEMORY[0x18D7898AC](&v217);
            if (!*(_BYTE *)(a1 + 568))
              goto LABEL_278;
            goto LABEL_232;
          }
          LOWORD(v211.__vftable) = *(_WORD *)(*(_QWORD *)(a1 + 336) + 152);
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v217);
          AMSCore::Logger::log<char [37],AMSCore::HTTPResponse::StatusCode>((uint64_t)v217.__vftable);
          v153 = (std::__shared_weak_count *)v217.__imp_.__imp_;
          if (v217.__imp_.__imp_)
          {
            v154 = (unint64_t *)(v217.__imp_.__imp_ + 8);
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          if (*(_BYTE *)(a1 + 104))
            v156 = *(_BYTE *)(a1 + 96) == 0;
          else
            v156 = 0;
          if (v156)
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_DWORD *)(a1 + 24) = 2;
        }
        else
        {
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v217);
          AMSCore::Logger::log<char [65]>((uint64_t)v217.__vftable);
          v149 = (std::__shared_weak_count *)v217.__imp_.__imp_;
          if (v217.__imp_.__imp_)
          {
            v150 = (unint64_t *)(v217.__imp_.__imp_ + 8);
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          if (*(_BYTE *)(a1 + 104))
            v152 = *(_BYTE *)(a1 + 96) == 0;
          else
            v152 = 0;
          if (v152)
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_DWORD *)(a1 + 24) = 1;
        }
      }
      else
      {
        if (*(_BYTE *)(a1 + 104) && !*(_BYTE *)(a1 + 96))
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        *(_DWORD *)(a1 + 24) = 0;
      }
      *(_BYTE *)(a1 + 96) = 1;
      *(_BYTE *)(a1 + 104) = 1;
      if (!*(_BYTE *)(a1 + 568))
      {
LABEL_278:
        ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
        goto LABEL_279;
      }
LABEL_232:
      v168 = *(std::__shared_weak_count **)(a1 + 344);
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 168));
      v171 = *(std::__shared_weak_count **)(a1 + 160);
      if (v171)
      {
        v172 = (unint64_t *)&v171->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
LABEL_279:
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v6);
      if (*(_BYTE *)(a1 + 968))
      {
LABEL_280:
        v196 = *(std::__shared_weak_count **)(a1 + 960);
        if (v196)
        {
          v197 = (unint64_t *)&v196->__shared_owners_;
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
            std::__shared_weak_count::__release_weak(v196);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
LABEL_286:
        v190 = 0;
        v191 = 0;
        v193 = 0;
        v192 = 0;
        v194 = 0;
        v195 = 0;
        if (*(_BYTE *)(a1 + 2208))
        {
LABEL_287:
          AMSCore::URL::~URL((AMSCore::URL *)v204);
          goto LABEL_288;
        }
LABEL_275:
        ((void (*)(std::runtime_error *))v204->~runtime_error)(v204);
LABEL_288:
        *(_QWORD *)(a1 + 2768) = v195;
        *(_QWORD *)(a1 + 2760) = v194;
        *(_QWORD *)(a1 + 2752) = v192;
        *(_QWORD *)(a1 + 2744) = v193;
        *(_QWORD *)(a1 + 2736) = v191;
        *(_QWORD *)(a1 + 2728) = v190;
        *(_QWORD *)(a1 + 152) = v203;
        *(_QWORD *)a1 = 0;
        AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
        return;
      }
LABEL_107:
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
      goto LABEL_286;
    }
LABEL_290:
    __break(1u);
  }
}

void sub_18CCC519C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, AMSCore::URL *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  AMSCore::EncodeHTTPRequestTask::Options *v35;
  uint64_t v36;
  AMSCore::ExecuteHTTPRequestTask::Options *v37;

  if (a2)
  {
    std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](v36);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v37);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v35);
    if (*(_BYTE *)(v34 + 2208))
      AMSCore::URL::~URL(a15);
    else
      (**(void (***)(AMSCore::URL *))a15)(a15);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::UploadMetricsEventTask::`anonymous namespace'::performInternal(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  AMSCore::URL *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  char v67;

  if (!*(_QWORD *)__p)
  {
    v21 = (char *)*((_QWORD *)__p + 346);
    v22 = (char *)*((_QWORD *)__p + 345);
    v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 344);
    v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 343);
    v25 = (std::__shared_weak_count *)*((_QWORD *)__p + 342);
    v26 = *((_QWORD *)__p + 341);
    goto LABEL_81;
  }
  if (__p[2783])
  {
    if (__p[2783] != 1)
    {
      v34 = *((_QWORD *)__p + 340);
      if (v34)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          v37 = (std::__shared_weak_count *)*((_QWORD *)__p + 340);
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v38 = (std::__shared_weak_count *)*((_QWORD *)__p + 313);
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1720));
      v41 = (std::__shared_weak_count *)*((_QWORD *)__p + 170);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 122);
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1888));
      if (__p[968])
      {
        v44 = (std::__shared_weak_count *)*((_QWORD *)__p + 120);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 72);
      }
      else
      {
        (**((void (***)(char *))__p + 72))(__p + 576);
      }
      goto LABEL_77;
    }
    v2 = *((_QWORD *)__p + 338);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 338);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *((_QWORD *)__p + 322);
    *((_QWORD *)__p + 322) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 299);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 297);
    if (!v13)
      goto LABEL_25;
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = (char *)*((_QWORD *)__p + 300);
      if (v16)
        goto LABEL_26;
    }
    else
    {
LABEL_25:
      v16 = (char *)*((_QWORD *)__p + 300);
      if (v16)
      {
LABEL_26:
        v17 = (char *)*((_QWORD *)__p + 301);
        v18 = v16;
        if (v17 != v16)
        {
          do
          {
            v19 = v17 - 32;
            v20 = *((unsigned int *)v17 - 2);
            if ((_DWORD)v20 != -1)
              ((void (*)(char *, char *))off_1E253D240[v20])(&v67, v17 - 32);
            *((_DWORD *)v17 - 2) = -1;
            v17 -= 32;
          }
          while (v19 != v16);
          v18 = (char *)*((_QWORD *)__p + 300);
        }
        *((_QWORD *)__p + 301) = v16;
        operator delete(v18);
      }
    }
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 2216));
    v47 = (std::__shared_weak_count *)*((_QWORD *)__p + 321);
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
LABEL_77:
    v50 = (AMSCore::URL *)(__p + 2056);
    if (__p[2208])
      AMSCore::URL::~URL(v50);
    else
      (**(void (***)(AMSCore::URL *))v50)(v50);
    v26 = 0;
    v25 = 0;
    v24 = 0;
    v23 = 0;
    v22 = 0;
    v21 = 0;
    goto LABEL_81;
  }
  v27 = *((_QWORD *)__p + 336);
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      v30 = (std::__shared_weak_count *)*((_QWORD *)__p + 336);
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p[1536])
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 1384));
  if (__p[2471] < 0)
    operator delete(*((void **)__p + 306));
  v26 = *((_QWORD *)__p + 334);
  v25 = (std::__shared_weak_count *)*((_QWORD *)__p + 333);
  v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 331);
  v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 329);
  v22 = (char *)*((_QWORD *)__p + 326);
  v21 = (char *)*((_QWORD *)__p + 325);
LABEL_81:
  v51 = (char *)*((_QWORD *)__p + 18);
  if (v51 == __p + 120)
  {
    v52 = 4;
    v51 = __p + 120;
    goto LABEL_85;
  }
  if (v51)
  {
    v52 = 5;
LABEL_85:
    (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v53 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v54 = v53 - 1;
  }
  while (__stlxr(v54, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v54)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v55 = (std::__shared_weak_count *)*((_QWORD *)__p + 315);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (__p[1712])
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 1560));
  if (v25)
  {
    v58 = (unint64_t *)&v25->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v23)
  {
    v60 = (unint64_t *)&v23->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (!v24)
    goto LABEL_115;
  v62 = (unint64_t *)&v24->__shared_owners_;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v21)
      goto LABEL_122;
  }
  else
  {
LABEL_115:
    if (!v21)
      goto LABEL_122;
  }
  if (v22 != v21)
  {
    do
    {
      v64 = v22 - 32;
      v65 = *((unsigned int *)v22 - 2);
      if ((_DWORD)v65 != -1)
        ((void (*)(char *, char *))off_1E253D240[v65])(&v66, v22 - 32);
      *((_DWORD *)v22 - 2) = -1;
      v22 -= 32;
    }
    while (v64 != v21);
  }
  operator delete(v21);
LABEL_122:
  if (__p[2784] < 0)
    operator delete(*((void **)__p + 324));
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523730;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CCC5974(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CCC59A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMSCore::UploadMetricsEventTask::`anonymous namespace'::encodeReportingRequest(std::runtime_error *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, _QWORD *a6)
{
  char *v12;
  unint64_t v13;
  char *v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unsigned int v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  AMSCore::URL *v33;
  _OWORD *v34;
  uint64_t *v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  _QWORD *v46;
  __int128 v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  __int128 v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  std::runtime_error *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  const std::runtime_error *v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  _QWORD *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned __int8 v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unsigned int *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned __int8 v128;
  _QWORD *v129;
  std::mutex *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  std::runtime_error_vtbl *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  __int128 v151;
  unint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  const std::runtime_error *v158;
  char v159;
  const char **v160;
  std::__libcpp_refstring *p_imp;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  const std::runtime_error *v167;
  std::runtime_error_vtbl *v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *imp;
  unint64_t *v193;
  unint64_t v194;
  unsigned int *v195;
  unsigned int *v196;
  unsigned int **v197;
  unint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  __int128 v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  const std::runtime_error *v212;
  char v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::runtime_error v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::chrono::system_clock::time_point v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unsigned int *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  unsigned int *v254;
  unsigned int *v255;
  unint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  __int128 v261;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  const std::runtime_error *v266;
  char v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  std::runtime_error *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  __int128 *v296;
  unsigned __int8 *v297;
  char *v298;
  _OWORD *v299;
  _OWORD *v300;
  AMSCore::URL *v301;
  std::runtime_error *v302;
  _BYTE *v303;
  _OWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  char *v307;
  std::runtime_error *v308;
  void **v309;
  AMSCore::EncodeHTTPRequestTask::Options *v310;
  char *v311;
  std::runtime_error *v312;
  char *v313;
  std::runtime_error *v314;
  std::runtime_error *v315;
  char *v316;
  char *v317;
  std::runtime_error *v318[2];
  __int128 v319;
  _OWORD *v320;
  uint64_t *v321;
  AMSCore::URL *v322;
  void *v323[2];
  __int16 v324;
  void *v325[4];
  void *v326[2];
  char v327;
  char *v328;
  _BYTE v329[24];
  unsigned int **v330;
  unsigned int *v331;
  uint64_t v332;
  __int128 v333;
  std::runtime_error v334;
  __int128 v335;
  unsigned int **v336;
  unsigned int *v337;
  uint64_t v338;
  __int128 v339;
  char v340;
  std::runtime_error v341;
  __int128 v342;
  unsigned int **v343;
  unsigned int *v344;
  uint64_t v345;
  __int128 v346;
  std::runtime_error v347;
  __int128 v348;
  unsigned int **v349;
  unsigned int *v350;
  uint64_t v351;
  __int128 v352;
  char v353;
  char v354;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v355[3];
  int v356;
  void *__p[2];
  char v358;
  __int128 v359;
  uint64_t v360;
  int v361;
  uint64_t v362;

  v362 = *MEMORY[0x1E0C80C00];
  v12 = (char *)operator new(0x878uLL);
  v13 = (unint64_t)v12;
  v14 = v12 + 1784;
  v314 = (std::runtime_error *)(v12 + 872);
  *(_OWORD *)(v12 + 2104) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12[1784] = 0;
  v12[1808] = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(_OWORD *)v14 = *(_OWORD *)a3;
    *((_QWORD *)v12 + 225) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v12[1808] = 1;
  }
  v15 = v12 + 1816;
  v12[1816] = 0;
  v12[1840] = 0;
  if (*(_BYTE *)(a3 + 56))
  {
    *v15 = *(_OWORD *)(a3 + 32);
    *((_QWORD *)v12 + 229) = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v12[1840] = 1;
  }
  v16 = v12 + 1848;
  v12[1848] = 0;
  v12[1872] = 0;
  if (*(_BYTE *)(a3 + 88))
  {
    *v16 = *(_OWORD *)(a3 + 64);
    *((_QWORD *)v12 + 233) = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    v12[1872] = 1;
  }
  *((_DWORD *)v12 + 470) = *(_DWORD *)(a3 + 96);
  *((_QWORD *)v12 + 236) = v12 + 1888;
  *((_QWORD *)v12 + 237) = v12 + 1888;
  *((_QWORD *)v12 + 238) = 0;
  if (v14 == (char *)a3)
    goto LABEL_446;
  v309 = (void **)(v12 + 1256);
  v322 = (AMSCore::URL *)(v12 + 1632);
  v17 = *(_QWORD *)(a3 + 120);
  if (v17)
  {
    v19 = *(_QWORD *)(a3 + 104);
    v18 = *(uint64_t **)(a3 + 112);
    v20 = *v18;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v19 + 8);
    **(_QWORD **)(v19 + 8) = v20;
    v21 = *((_QWORD *)v12 + 236);
    *(_QWORD *)(v21 + 8) = v18;
    *v18 = v21;
    *((_QWORD *)v12 + 236) = v19;
    *(_QWORD *)(v19 + 8) = v12 + 1888;
    *((_QWORD *)v12 + 238) = v17;
    *(_QWORD *)(a3 + 120) = 0;
  }
  v22 = v12 + 1912;
  *(_OWORD *)(v12 + 1912) = *(_OWORD *)(a3 + 128);
  v303 = v12 + 2160;
  v321 = (uint64_t *)(v12 + 472);
  v308 = (std::runtime_error *)(v12 + 1936);
  v316 = v12 + 2016;
  *((_QWORD *)v12 + 241) = *(_QWORD *)(a3 + 144);
  v305 = v12 + 2048;
  v306 = v12 + 2072;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  v298 = v12 + 2088;
  *(_QWORD *)(a3 + 128) = 0;
  *((_OWORD *)v12 + 128) = *(_OWORD *)a4;
  *((_QWORD *)v12 + 258) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_OWORD *)v318 = a5[1];
  v319 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *((_QWORD *)a5 + 3) = 0;
  *((_QWORD *)v12 + 265) = *a6;
  *a6 = 0;
  do
    v23 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v23 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v12[24] = 0;
  v12[424] = 0;
  *((_QWORD *)v12 + 54) = 0;
  v310 = (AMSCore::EncodeHTTPRequestTask::Options *)(v12 + 24);
  v311 = v12 + 16;
  *((_QWORD *)v12 + 58) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v347, (uint64_t)(v12 + 16));
  *a1 = v347;
  *(_BYTE *)(v13 + 1632) = 0;
  *(_BYTE *)(v13 + 1656) = 0;
  if (*(_BYTE *)(v13 + 1808))
  {
    *(_OWORD *)v322 = *(_OWORD *)v14;
    *((_QWORD *)v322 + 2) = *((_QWORD *)v14 + 2);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_BYTE *)(v13 + 1656) = 1;
  }
  v24 = (_OWORD *)(v13 + 1664);
  *(_BYTE *)(v13 + 1664) = 0;
  *(_BYTE *)(v13 + 1688) = 0;
  if (*(_BYTE *)(v13 + 1840))
  {
    *v24 = *v15;
    *(_QWORD *)(v13 + 1680) = *(_QWORD *)(v13 + 1832);
    *(_QWORD *)(v13 + 1824) = 0;
    *(_QWORD *)(v13 + 1832) = 0;
    *(_QWORD *)v15 = 0;
    *(_BYTE *)(v13 + 1688) = 1;
  }
  v25 = (_OWORD *)(v13 + 1696);
  *(_BYTE *)(v13 + 1696) = 0;
  *(_BYTE *)(v13 + 1720) = 0;
  if (*(_BYTE *)(v13 + 1872))
  {
    *v25 = *v16;
    *(_QWORD *)(v13 + 1712) = *(_QWORD *)(v13 + 1864);
    *(_QWORD *)(v13 + 1856) = 0;
    *(_QWORD *)(v13 + 1864) = 0;
    *(_QWORD *)v16 = 0;
    *(_BYTE *)(v13 + 1720) = 1;
  }
  *(_DWORD *)(v13 + 1728) = *(_DWORD *)(v13 + 1880);
  *(_QWORD *)(v13 + 1736) = v13 + 1736;
  *(_QWORD *)(v13 + 1744) = v13 + 1736;
  *(_QWORD *)(v13 + 1752) = 0;
  v26 = *(_QWORD *)(v13 + 1904);
  if (v26)
  {
    v27 = *(uint64_t **)(v13 + 1896);
    v28 = *(_QWORD *)(v13 + 1888);
    v29 = *v27;
    *(_QWORD *)(v29 + 8) = *(_QWORD *)(v28 + 8);
    **(_QWORD **)(v28 + 8) = v29;
    v30 = *(_QWORD *)(v13 + 1736);
    *(_QWORD *)(v30 + 8) = v27;
    *v27 = v30;
    *(_QWORD *)(v13 + 1736) = v28;
    *(_QWORD *)(v28 + 8) = v13 + 1736;
    *(_QWORD *)(v13 + 1752) = v26;
    *(_QWORD *)(v13 + 1904) = 0;
  }
  *(_OWORD *)(v13 + 1760) = *v22;
  *(_QWORD *)(v13 + 1776) = *(_QWORD *)(v13 + 1928);
  *(_QWORD *)(v13 + 1920) = 0;
  *(_QWORD *)(v13 + 1928) = 0;
  *(_QWORD *)v22 = 0;
  *(_OWORD *)(v13 + 2016) = v319;
  *(_OWORD *)(v13 + 2032) = *(_OWORD *)v318;
  v31 = (char *)operator new(0x3E0uLL);
  v32 = (unint64_t)v31;
  *(_QWORD *)v31 = AMSCore::EncodeHTTPRequestTask::OptionsBuilder::make;
  *((_QWORD *)v31 + 1) = AMSCore::EncodeHTTPRequestTask::OptionsBuilder::make;
  v33 = (AMSCore::URL *)(v31 + 456);
  v31[456] = 0;
  v31[480] = 0;
  if (*(_BYTE *)(v13 + 1656))
  {
    *(_OWORD *)v33 = *(_OWORD *)v322;
    *((_QWORD *)v31 + 59) = *((_QWORD *)v322 + 2);
    *((_QWORD *)v322 + 1) = 0;
    *((_QWORD *)v322 + 2) = 0;
    *(_QWORD *)v322 = 0;
    v31[480] = 1;
  }
  v31[488] = 0;
  v31[512] = 0;
  if (*(_BYTE *)(v13 + 1688))
  {
    *(_OWORD *)(v31 + 488) = *v24;
    *((_QWORD *)v31 + 63) = *(_QWORD *)(v13 + 1680);
    *(_QWORD *)(v13 + 1672) = 0;
    *(_QWORD *)(v13 + 1680) = 0;
    *(_QWORD *)v24 = 0;
    v31[512] = 1;
  }
  v34 = v31 + 520;
  *(_BYTE *)(v32 + 520) = 0;
  *(_BYTE *)(v32 + 544) = 0;
  if (*(_BYTE *)(v13 + 1720))
  {
    *v34 = *v25;
    *(_QWORD *)(v32 + 536) = *(_QWORD *)(v13 + 1712);
    *(_QWORD *)(v13 + 1704) = 0;
    *(_QWORD *)(v13 + 1712) = 0;
    *(_QWORD *)v25 = 0;
    *(_BYTE *)(v32 + 544) = 1;
  }
  *(_DWORD *)(v32 + 552) = *(_DWORD *)(v13 + 1728);
  *(_QWORD *)(v32 + 560) = v32 + 560;
  *(_QWORD *)(v32 + 568) = v32 + 560;
  *(_QWORD *)(v32 + 576) = 0;
  if (v33 == v322)
    goto LABEL_446;
  v35 = (uint64_t *)(v32 + 888);
  v36 = (_OWORD *)(v13 + 1760);
  v37 = (__int128 *)(v13 + 2032);
  v38 = *(_QWORD *)(v13 + 1752);
  if (v38)
  {
    v39 = *(uint64_t **)(v13 + 1744);
    v40 = *(_QWORD *)(v13 + 1736);
    v41 = *v39;
    *(_QWORD *)(v41 + 8) = *(_QWORD *)(v40 + 8);
    **(_QWORD **)(v40 + 8) = v41;
    v42 = *(_QWORD *)(v32 + 560);
    *(_QWORD *)(v42 + 8) = v39;
    *v39 = v42;
    *(_QWORD *)(v32 + 560) = v40;
    *(_QWORD *)(v40 + 8) = v32 + 560;
    *(_QWORD *)(v32 + 576) = v38;
    *(_QWORD *)(v13 + 1752) = 0;
  }
  v299 = (_OWORD *)(v32 + 520);
  v300 = (_OWORD *)(v32 + 488);
  v301 = v33;
  v304 = (_OWORD *)(v32 + 584);
  *(_OWORD *)(v32 + 584) = *v36;
  v320 = (_OWORD *)(v32 + 920);
  *(_QWORD *)(v32 + 600) = *(_QWORD *)(v13 + 1776);
  *(_QWORD *)(v13 + 1768) = 0;
  *(_QWORD *)(v13 + 1776) = 0;
  *(_QWORD *)v36 = 0;
  v43 = *(_OWORD *)v316;
  *(_QWORD *)v316 = 0;
  *((_QWORD *)v316 + 1) = 0;
  v44 = *v37;
  *(_OWORD *)(v32 + 888) = v43;
  *(_OWORD *)(v32 + 904) = v44;
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v13 + 2040) = 0;
  do
    v45 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v45 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_BYTE *)(v32 + 24) = 0;
  *(_BYTE *)(v32 + 408) = 0;
  *(_QWORD *)(v32 + 416) = 0;
  v312 = (std::runtime_error *)(v32 + 24);
  *(_QWORD *)(v32 + 448) = 0;
  v46 = (_QWORD *)operator new();
  *v46 = &off_1E2523618;
  v46[1] = 0;
  v46[2] = 0;
  v46[3] = v32 + 16;
  *(_QWORD *)&v47 = v32 + 16;
  *((_QWORD *)&v47 + 1) = v46;
  *(_OWORD *)v321 = v47;
  *(_BYTE *)(v32 + 840) = 1;
  *(_BYTE *)(v32 + 856) = 0;
  *(_BYTE *)(v32 + 864) = 0;
  *(_DWORD *)(v32 + 872) = 1;
  *(_DWORD *)(v32 + 880) = 0;
  v48 = operator new(0x20uLL);
  v48[1] = 0;
  v48[2] = 0;
  *v48 = &off_1E2522888;
  v48[3] = &off_1E2520798;
  *(_QWORD *)(v32 + 936) = v48 + 3;
  *(_QWORD *)(v32 + 944) = v48;
  v49 = (char *)operator new(0x1D8uLL);
  v50 = (unint64_t)v49;
  v51 = *(_OWORD *)(v32 + 856);
  *(_OWORD *)(v49 + 232) = *(_OWORD *)(v32 + 840);
  v307 = v49 + 280;
  *(_QWORD *)v49 = AMSCore::BagService::getSynchronousBag;
  *((_QWORD *)v49 + 1) = AMSCore::BagService::getSynchronousBag;
  v52 = v49 + 328;
  v53 = v49 + 360;
  v313 = v49 + 376;
  v296 = (__int128 *)(v49 + 392);
  v297 = (unsigned __int8 *)(v49 + 232);
  v315 = (std::runtime_error *)(v49 + 152);
  v317 = v49 + 16;
  *(_OWORD *)(v49 + 248) = v51;
  *(_OWORD *)(v49 + 264) = *(_OWORD *)(v32 + 872);
  v54 = *(_QWORD *)(v32 + 936);
  *((_QWORD *)v49 + 51) = v35;
  *((_QWORD *)v49 + 52) = v54;
  v55 = *(_QWORD *)(v32 + 944);
  *((_QWORD *)v49 + 53) = v55;
  *(_QWORD *)(v32 + 936) = 0;
  *(_QWORD *)(v32 + 944) = 0;
  do
    v56 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v56 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v49 + 14) = 0;
  v49[24] = 0;
  v302 = (std::runtime_error *)(v49 + 24);
  v49[104] = 0;
  *((_QWORD *)v49 + 18) = 0;
  v57 = (_QWORD *)operator new();
  *v57 = &off_1E25238F0;
  v57[1] = 0;
  v57[2] = 0;
  v57[3] = v317;
  *(_QWORD *)&v58 = v317;
  *((_QWORD *)&v58 + 1) = v57;
  *v320 = v58;
  v59 = *v35;
  v60 = *(unsigned __int8 *)(v50 + 232);
  v61 = *(_OWORD *)(v50 + 256);
  *v52 = *(_OWORD *)(v50 + 240);
  v52[1] = v61;
  *(_QWORD *)(v50 + 360) = v54;
  *(_QWORD *)(v50 + 368) = v55;
  if (v55)
  {
    v62 = (unint64_t *)(v55 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  (*(void (**)(uint64_t, BOOL, _OWORD *, char *))(*(_QWORD *)v59 + 24))(v59, v60 != 0, v52, v53);
  v64 = *(_OWORD *)v313;
  *(_OWORD *)(v50 + 432) = *(_OWORD *)v313;
  *(_QWORD *)v313 = 0;
  *((_QWORD *)v313 + 1) = 0;
  v65 = atomic_load((unint64_t *)(v64 + 96));
  v66 = v32 + 760;
  v67 = v315;
  if (!v65)
  {
    v307[184] = 0;
    v68 = (unint64_t *)(*(_QWORD *)(v50 + 432) + 96);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v50, v68));
    if (!v69)
      goto LABEL_159;
  }
  v70 = *(_QWORD *)(v50 + 432);
  if (!*(_BYTE *)(v70 + 88))
    goto LABEL_446;
  v71 = (const std::runtime_error *)(v70 + 8);
  v72 = *(_BYTE *)(v70 + 80);
  if (v72)
  {
    *(_OWORD *)(v50 + 152) = *(_OWORD *)(v70 + 8);
    v71->__vftable = 0;
    *(_QWORD *)(v70 + 16) = 0;
    *(_OWORD *)(v50 + 168) = *(_OWORD *)(v70 + 24);
    *(_QWORD *)(v50 + 184) = *(_QWORD *)(v70 + 40);
    *(_QWORD *)(v70 + 32) = 0;
    *(_QWORD *)(v70 + 40) = 0;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v50 + 192) = *(_QWORD *)(v70 + 48);
  }
  else
  {
    std::runtime_error::runtime_error(v315, v71);
    *(_OWORD *)(v50 + 168) = *(_OWORD *)(v70 + 24);
    v73 = (_QWORD *)(v70 + 48);
    v74 = *(_QWORD *)(v70 + 48);
    *(_QWORD *)(v50 + 192) = v74;
    v75 = v50 + 192;
    *(_QWORD *)(v50 + 152) = off_1E2521330;
    *(_QWORD *)(v50 + 184) = *(_QWORD *)(v70 + 40);
    v76 = *(_QWORD *)(v70 + 56);
    *(_QWORD *)(v50 + 200) = v76;
    if (v76)
    {
      *(_QWORD *)(v74 + 16) = v75;
      *(_QWORD *)(v70 + 40) = v73;
      *v73 = 0;
      *(_QWORD *)(v70 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v50 + 184) = v75;
    }
    v77 = *(_QWORD *)(v50 + 432);
    *(_OWORD *)(v50 + 208) = *(_OWORD *)(v77 + 64);
    *(_QWORD *)(v77 + 64) = 0;
    *(_QWORD *)(v77 + 72) = 0;
  }
  *(_BYTE *)(v50 + 224) = v72;
  v78 = *(_QWORD *)(v50 + 440);
  if (v78)
  {
    v79 = (unint64_t *)(v78 + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      v81 = *(std::__shared_weak_count **)(v50 + 440);
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v82 = *(std::__shared_weak_count **)(v50 + 384);
  if (!v82)
    goto LABEL_56;
  p_shared_owners = (unint64_t *)&v82->__shared_owners_;
  do
    v84 = __ldaxr(p_shared_owners);
  while (__stlxr(v84 - 1, p_shared_owners));
  if (!v84)
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
    v85 = *(std::__shared_weak_count **)(v50 + 368);
    if (!v85)
      goto LABEL_60;
  }
  else
  {
LABEL_56:
    v85 = *(std::__shared_weak_count **)(v50 + 368);
    if (!v85)
      goto LABEL_60;
  }
  v86 = (unint64_t *)&v85->__shared_owners_;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (!v87)
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
    if (*(_BYTE *)(v50 + 224))
      goto LABEL_61;
LABEL_73:
    std::runtime_error::runtime_error(&v347, v315);
    v97 = (_QWORD *)(v50 + 192);
    v98 = *(_QWORD *)(v50 + 192);
    v348 = *(_OWORD *)(v50 + 168);
    v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v349 = *(unsigned int ***)(v50 + 184);
    v350 = (unsigned int *)v98;
    v351 = *(_QWORD *)(v50 + 200);
    if (v351)
    {
      *(_QWORD *)(v98 + 16) = &v350;
      *(_QWORD *)(v50 + 184) = v97;
      *v97 = 0;
      *(_QWORD *)(v50 + 200) = 0;
    }
    else
    {
      v349 = &v350;
    }
    v352 = *(_OWORD *)(v50 + 208);
    *(_QWORD *)(v50 + 208) = 0;
    *(_QWORD *)(v50 + 216) = 0;
    v353 = 1;
    std::runtime_error::runtime_error(&v334, &v347);
    v335 = v348;
    v334.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v336 = v349;
    v337 = v350;
    v338 = v351;
    if (v351)
    {
      *((_QWORD *)v350 + 2) = &v337;
      v349 = &v350;
      v350 = 0;
      v351 = 0;
    }
    else
    {
      v336 = &v337;
    }
    v339 = v352;
    v352 = 0uLL;
    std::runtime_error::runtime_error(&v341, &v334);
    v342 = v335;
    v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v119 = v337;
    v343 = v336;
    v344 = v337;
    v345 = v338;
    if (v338)
    {
      *((_QWORD *)v337 + 2) = &v344;
      v119 = 0;
      v336 = &v337;
      v337 = 0;
      v338 = 0;
    }
    else
    {
      v343 = &v344;
    }
    v66 = v32 + 760;
    v67 = v315;
    v346 = v339;
    v339 = 0uLL;
    v334.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v336, v119);
    MEMORY[0x18D7898AC](&v334);
    std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v302, &v341);
    v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
    if (*((_QWORD *)&v346 + 1))
    {
      v121 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v343, v344);
    MEMORY[0x18D7898AC](&v341);
    if (v353)
    {
      v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v124 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v349, v350);
      MEMORY[0x18D7898AC](&v347);
    }
LABEL_125:
    v132 = *(_QWORD *)(v50 + 424);
    if (*(_BYTE *)(v50 + 224))
    {
LABEL_126:
      v133 = *(uint64_t **)(v50 + 168);
      if (v133)
      {
        v134 = *(uint64_t **)(v50 + 176);
        v135 = *(void **)(v50 + 168);
        if (v134 != v133)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v134, 0);
          while (v134 != v133);
          v135 = *(void **)(v50 + 168);
        }
        *(_QWORD *)(v50 + 176) = v133;
        operator delete(v135);
      }
      v136 = *(std::__shared_weak_count **)(v50 + 160);
      if (v136)
      {
        v137 = (unint64_t *)&v136->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      goto LABEL_158;
    }
LABEL_157:
    ((void (*)(std::runtime_error *))v67->~runtime_error)(v67);
LABEL_158:
    *(_QWORD *)(v50 + 456) = v132;
    *(_QWORD *)(v50 + 152) = v317;
    *(_QWORD *)v50 = 0;
    AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::Awaiter::await_suspend(v67);
    goto LABEL_159;
  }
LABEL_60:
  if (!*(_BYTE *)(v50 + 224))
    goto LABEL_73;
LABEL_61:
  v88 = *(_DWORD *)(v50 + 272);
  if (v88 != 1)
  {
    if (!v88)
    {
      v89 = operator new(0x50uLL);
      v89[1] = 0;
      v89[2] = 0;
      *v89 = &off_1E2522818;
      v89[3] = off_1E25205C0;
      v90 = *(_OWORD *)(v50 + 152);
      v315->__vftable = 0;
      v315->__imp_.__imp_ = 0;
      v91 = *(_OWORD *)(v50 + 168);
      v92 = *(_QWORD *)(v50 + 184);
      v93 = *(_QWORD *)(v50 + 192);
      *(_QWORD *)(v50 + 176) = 0;
      *(_QWORD *)(v50 + 184) = 0;
      *(_QWORD *)(v50 + 168) = 0;
      *((_OWORD *)v89 + 2) = v90;
      *((_OWORD *)v89 + 3) = v91;
      v89[8] = v92;
      v89[9] = v93;
      if (*(_BYTE *)(v50 + 104))
      {
        if (*(_BYTE *)(v50 + 96))
        {
          v94 = *(std::__shared_weak_count **)(v50 + 32);
          if (v94)
          {
            v95 = (unint64_t *)&v94->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
        }
        else
        {
          ((void (*)(std::runtime_error *))v302->~runtime_error)(v302);
        }
      }
      *(_QWORD *)(v50 + 24) = v89 + 3;
      *(_QWORD *)(v50 + 32) = v89;
      *(_BYTE *)(v50 + 96) = 1;
      *(_BYTE *)(v50 + 104) = 1;
    }
    goto LABEL_125;
  }
  v99 = *(_QWORD *)(*(_QWORD *)(v50 + 408) + 16);
  *(_QWORD *)(v50 + 448) = v99;
  v100 = (unsigned __int8 *)(v99 + 128);
  do
    v101 = __ldaxr(v100);
  while (__stxr(1u, v100));
  if ((v101 & 1) == 0)
  {
LABEL_78:
    v102 = *(_QWORD **)(v50 + 448);
    *(_QWORD *)(v50 + 376) = v102 + 8;
    *(_BYTE *)(v50 + 384) = 1;
    v103 = std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::find<AMSCore::SynchronousBagPolicy>(v102, v297);
    v104 = v103;
    if (v103)
    {
      if (!*(_BYTE *)(v50 + 224))
        goto LABEL_446;
      v105 = v103[8];
      v106 = *(_OWORD *)(v50 + 152);
      v315->__vftable = 0;
      v315->__imp_.__imp_ = 0;
      v107 = *(_OWORD *)(v50 + 168);
      *(_OWORD *)v307 = v106;
      *((_OWORD *)v307 + 1) = v107;
      *(_QWORD *)(v50 + 168) = 0;
      *(_QWORD *)(v50 + 176) = 0;
      v108 = *(_QWORD *)(v50 + 184);
      v109 = *(_QWORD *)(v50 + 192);
      *(_QWORD *)(v50 + 184) = 0;
      *(_QWORD *)(v50 + 312) = v108;
      *(_QWORD *)(v50 + 320) = v109;
      AMSCore::MutableBag::setBagData(v105, (__int128 *)v307);
      v110 = *(uint64_t **)(v50 + 296);
      if (v110)
      {
        v111 = *(uint64_t **)(v50 + 304);
        v112 = *(void **)(v50 + 296);
        if (v111 != v110)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v111, 0);
          while (v111 != v110);
          v112 = (void *)*((_QWORD *)v307 + 2);
        }
        *(_QWORD *)(v50 + 304) = v110;
        operator delete(v112);
      }
      v113 = *(std::__shared_weak_count **)(v50 + 288);
      if (v113)
      {
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      if (*(_BYTE *)(v50 + 104))
      {
        if (*(_BYTE *)(v50 + 96))
        {
          v116 = *(std::__shared_weak_count **)(v50 + 32);
          if (v116)
          {
            v117 = (unint64_t *)&v116->__shared_owners_;
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
        }
        else
        {
          ((void (*)(std::runtime_error *))v302->~runtime_error)(v302);
        }
        *(_BYTE *)(v50 + 104) = 0;
      }
      *(_QWORD *)(v50 + 24) = v104[8];
      v148 = v104[9];
      *(_QWORD *)(v50 + 32) = v148;
      if (v148)
      {
        v149 = (unint64_t *)(v148 + 8);
        do
          v150 = __ldxr(v149);
        while (__stxr(v150 + 1, v149));
      }
      *(_BYTE *)(v50 + 96) = 1;
      *(_BYTE *)(v50 + 104) = 1;
      v132 = *(_QWORD *)(v50 + 424);
      if (!*(_BYTE *)(v50 + 384))
      {
LABEL_156:
        if (*(_BYTE *)(v50 + 224))
          goto LABEL_126;
        goto LABEL_157;
      }
    }
    else
    {
      if (!*(_BYTE *)(v50 + 224))
        goto LABEL_446;
      v139 = (char *)operator new(0xD8uLL);
      *((_QWORD *)v139 + 1) = 0;
      *((_QWORD *)v139 + 2) = 0;
      *(_QWORD *)v139 = &off_1E2522738;
      v140 = (std::runtime_error_vtbl *)std::construct_at[abi:fe180100]<AMSCore::MutableBag,AMSCore::SynchronousBagData,AMSCore::MutableBag*>((uint64_t)(v139 + 24), (uint64_t *)v315);
      v141 = *(uint64_t **)(v50 + 448);
      v347.__vftable = v140;
      v347.__imp_.__imp_ = v139;
      std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::__emplace_unique_key_args<AMSCore::SynchronousBagPolicy,AMSCore::SynchronousBagPolicy&,std::shared_ptr<AMSCore::MutableBag>&>(v141, v297, v297, &v347);
      v142 = *(_QWORD *)(v50 + 448);
      v132 = *(_QWORD *)(v50 + 424);
      if (!*(_BYTE *)(v142 + 56))
      {
        v143 = *(uint64_t **)(v50 + 408);
        v144 = v142 + 40;
        *(_QWORD *)(v50 + 392) = *(_QWORD *)(v50 + 416);
        *(_QWORD *)(v50 + 400) = v132;
        AMSCore::BagService::configureMutableBagUpdateObservation(&v334, v143, v296);
        std::optional<AMSCore::Subject<AMSCore::MapUtils::UpdateDiff<std::string>>::ObserverToken>::operator=[abi:fe180100]<AMSCore::Subject<AMSCore::MapUtils::UpdateDiff<std::string>>::ObserverToken,void>(v144, (uint64_t *)&v334);
        std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&v334);
        std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)v296);
        v132 = 0;
      }
      if (*(_BYTE *)(v50 + 104))
      {
        if (*(_BYTE *)(v50 + 96))
        {
          v145 = *(std::__shared_weak_count **)(v50 + 32);
          if (v145)
          {
            v146 = (unint64_t *)&v145->__shared_owners_;
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
          }
        }
        else
        {
          ((void (*)(std::runtime_error *))v302->~runtime_error)(v302);
        }
      }
      *(std::runtime_error *)(v50 + 24) = v347;
      *(_BYTE *)(v50 + 96) = 1;
      *(_BYTE *)(v50 + 104) = 1;
      if (!*(_BYTE *)(v50 + 384))
        goto LABEL_156;
    }
    AMSCore::AwaitableMutex::unlock(*(std::mutex **)v313);
    goto LABEL_156;
  }
  v307[184] = 1;
  std::mutex::lock((std::mutex *)(*(_QWORD *)(v50 + 448) + 64));
  v126 = *(_QWORD *)(v50 + 448);
  if (!*(_QWORD *)(v126 + 152))
  {
    v127 = (unsigned __int8 *)(v126 + 128);
    do
      v128 = __ldxr(v127);
    while (__stlxr(1u, v127));
    if ((v128 & 1) == 0)
    {
      std::mutex::unlock((std::mutex *)(*(_QWORD *)(v50 + 448) + 64));
      goto LABEL_78;
    }
  }
  v129 = operator new(0x18uLL);
  v130 = (std::mutex *)(*(_QWORD *)(v50 + 448) + 64);
  v129[1] = v126 + 136;
  v129[2] = v50;
  v131 = *(_QWORD *)(v126 + 136);
  *v129 = v131;
  *(_QWORD *)(v131 + 8) = v129;
  *(_QWORD *)(v126 + 136) = v129;
  ++*(_QWORD *)(v126 + 152);
  std::mutex::unlock(v130);
LABEL_159:
  v151 = *(_OWORD *)(v66 + 160);
  *(_OWORD *)(v66 + 208) = v151;
  *(_QWORD *)v320 = 0;
  *(_QWORD *)(v32 + 928) = 0;
  v152 = atomic_load((unint64_t *)(v151 + 96));
  v153 = v321;
  v154 = v32 + 16;
  if (!v152)
  {
    *(_BYTE *)(v66 + 224) = 0;
    v155 = (unint64_t *)(*(_QWORD *)(v32 + 968) + 96);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v32, v155));
    if (!v156)
      goto LABEL_246;
  }
  v157 = *(_QWORD *)(v66 + 208);
  if (!*(_BYTE *)(v157 + 88))
    goto LABEL_446;
  v158 = (const std::runtime_error *)(v157 + 8);
  v159 = *(_BYTE *)(v157 + 80);
  if (v159)
  {
    *(_QWORD *)(v32 + 760) = *(_QWORD *)(v157 + 8);
    v160 = (const char **)(v32 + 768);
    p_imp = (std::__libcpp_refstring *)(v157 + 16);
    v162 = v32 + 608;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)v66, v158);
    *(_OWORD *)(v32 + 776) = *(_OWORD *)(v157 + 24);
    *(_QWORD *)(v32 + 760) = off_1E2521330;
    v163 = (_QWORD *)(v157 + 48);
    v164 = *(_QWORD *)(v157 + 48);
    *(_QWORD *)(v32 + 792) = *(_QWORD *)(v157 + 40);
    v165 = v32 + 800;
    *(_QWORD *)(v32 + 800) = v164;
    v166 = *(_QWORD *)(v157 + 56);
    *(_QWORD *)(v32 + 808) = v166;
    if (v166)
    {
      *(_QWORD *)(v164 + 16) = v165;
      *(_QWORD *)(v157 + 40) = v163;
      *v163 = 0;
      *(_QWORD *)(v157 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v32 + 792) = v165;
    }
    v162 = v32 + 608;
    v167 = *(const std::runtime_error **)(v32 + 968);
    v168 = v167[4].__vftable;
    v158 = v167 + 4;
    *(_QWORD *)(v32 + 816) = v168;
    v160 = (const char **)(v32 + 824);
    p_imp = &v158->__imp_;
  }
  *v160 = p_imp->__imp_;
  v158->__vftable = 0;
  v158->__imp_.__imp_ = 0;
  *(_BYTE *)(v32 + 832) = v159;
  v169 = *(_QWORD *)(v32 + 976);
  if (v169)
  {
    v170 = (unint64_t *)(v169 + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      v172 = *(std::__shared_weak_count **)(v32 + 976);
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v173 = *(std::__shared_weak_count **)(v32 + 928);
  if (!v173)
    goto LABEL_179;
  v174 = (unint64_t *)&v173->__shared_owners_;
  do
    v175 = __ldaxr(v174);
  while (__stlxr(v175 - 1, v174));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
    v176 = *(std::__shared_weak_count **)(v32 + 944);
    if (!v176)
      goto LABEL_183;
  }
  else
  {
LABEL_179:
    v176 = *(std::__shared_weak_count **)(v32 + 944);
    if (!v176)
      goto LABEL_183;
  }
  v177 = (unint64_t *)&v176->__shared_owners_;
  do
    v178 = __ldaxr(v177);
  while (__stlxr(v178 - 1, v177));
  if (!v178)
  {
    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
    std::__shared_weak_count::__release_weak(v176);
    if (*(_BYTE *)(v32 + 832))
      goto LABEL_184;
LABEL_201:
    std::runtime_error::runtime_error(&v347, (const std::runtime_error *)v66);
    v348 = *(_OWORD *)(v32 + 776);
    v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v188 = *(_QWORD *)(v32 + 800);
    v349 = *(unsigned int ***)(v32 + 792);
    v350 = (unsigned int *)v188;
    v351 = *(_QWORD *)(v32 + 808);
    if (v351)
    {
      *(_QWORD *)(v188 + 16) = &v350;
      *(_QWORD *)(v32 + 792) = v32 + 800;
      *(_QWORD *)(v32 + 800) = 0;
      *(_QWORD *)(v32 + 808) = 0;
    }
    else
    {
      v349 = &v350;
    }
    v352 = *(_OWORD *)(v32 + 816);
    *(_QWORD *)(v32 + 824) = 0;
    *(_QWORD *)(v32 + 816) = 0;
    v353 = 1;
    std::runtime_error::runtime_error(&v334, &v347);
    v335 = v348;
    v334.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v336 = v349;
    v337 = v350;
    v338 = v351;
    if (v351)
    {
      *((_QWORD *)v350 + 2) = &v337;
      v349 = &v350;
      v350 = 0;
      v351 = 0;
    }
    else
    {
      v336 = &v337;
    }
    v339 = v352;
    v352 = 0uLL;
    std::runtime_error::runtime_error(&v341, &v334);
    v342 = v335;
    v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v195 = v337;
    v343 = v336;
    v344 = v337;
    v345 = v338;
    if (v338)
    {
      *((_QWORD *)v337 + 2) = &v344;
      v195 = 0;
      v336 = &v337;
      v337 = 0;
      v338 = 0;
    }
    else
    {
      v343 = &v344;
    }
    v346 = v339;
    v339 = 0uLL;
    v334.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v336, v195);
    MEMORY[0x18D7898AC](&v334);
    v153 = v321;
    v154 = v32 + 16;
    if (*(_BYTE *)(v32 + 408))
    {
      if (*(_BYTE *)(v32 + 400))
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v312->__vftable);
      else
        ((void (*)(std::runtime_error *))v312->~runtime_error)(v312);
      *(_BYTE *)(v32 + 408) = 0;
    }
    std::runtime_error::runtime_error(v312, &v341);
    v196 = v344;
    v197 = v343;
    *(_QWORD *)(v32 + 64) = v344;
    v198 = v32 + 64;
    *(_OWORD *)(v32 + 40) = v342;
    *(_QWORD *)(v32 + 24) = off_1E2521330;
    *(_QWORD *)(v32 + 56) = v197;
    v199 = v345;
    *(_QWORD *)(v32 + 72) = v345;
    if (v199)
    {
      *((_QWORD *)v196 + 2) = v198;
      v196 = 0;
      v343 = &v344;
      v344 = 0;
      v345 = 0;
    }
    else
    {
      *(_QWORD *)(v32 + 56) = v198;
    }
    v66 = v32 + 760;
    *(_OWORD *)(v32 + 80) = v346;
    v346 = 0uLL;
    *(_BYTE *)(v32 + 400) = 0;
    *(_BYTE *)(v32 + 408) = 1;
    v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v343, v196);
    MEMORY[0x18D7898AC](&v341);
    if (v353)
    {
      v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v200 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v201 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v349, v350);
      MEMORY[0x18D7898AC](&v347);
    }
    goto LABEL_238;
  }
LABEL_183:
  if (!*(_BYTE *)(v32 + 832))
    goto LABEL_201;
LABEL_184:
  *(_BYTE *)(v32 + 608) = 0;
  *(_BYTE *)(v32 + 632) = 0;
  if (*(_BYTE *)(v32 + 480))
  {
    *(_OWORD *)v162 = *(_OWORD *)v301;
    *(_QWORD *)(v162 + 16) = *((_QWORD *)v301 + 2);
    *((_QWORD *)v301 + 1) = 0;
    *((_QWORD *)v301 + 2) = 0;
    *(_QWORD *)v301 = 0;
    *(_BYTE *)(v32 + 632) = 1;
  }
  *(_BYTE *)(v32 + 640) = 0;
  *(_BYTE *)(v32 + 664) = 0;
  if (*(_BYTE *)(v32 + 512))
  {
    *(_OWORD *)(v32 + 640) = *v300;
    *(_QWORD *)(v32 + 656) = *(_QWORD *)(v32 + 504);
    *(_QWORD *)(v32 + 496) = 0;
    *(_QWORD *)(v32 + 504) = 0;
    *(_QWORD *)v300 = 0;
    *(_BYTE *)(v32 + 664) = 1;
  }
  *(_BYTE *)(v32 + 672) = 0;
  *(_BYTE *)(v32 + 696) = 0;
  if (*(_BYTE *)(v32 + 544))
  {
    *(_OWORD *)(v32 + 672) = *v299;
    *(_QWORD *)(v32 + 688) = *(_QWORD *)(v32 + 536);
    *(_QWORD *)(v32 + 528) = 0;
    *(_QWORD *)(v32 + 536) = 0;
    *(_QWORD *)v299 = 0;
    *(_BYTE *)(v32 + 696) = 1;
  }
  *(_DWORD *)(v32 + 704) = *(_DWORD *)(v32 + 552);
  *(_QWORD *)(v32 + 712) = v32 + 712;
  *(_QWORD *)(v32 + 720) = v32 + 712;
  *(_QWORD *)(v32 + 728) = 0;
  v179 = *(_QWORD *)(v32 + 576);
  if (v179)
  {
    v180 = *(uint64_t **)(v32 + 568);
    v181 = *(_QWORD *)(v32 + 560);
    v182 = *v180;
    *(_QWORD *)(v182 + 8) = *(_QWORD *)(v181 + 8);
    **(_QWORD **)(v181 + 8) = v182;
    v183 = *(_QWORD *)(v32 + 712);
    *(_QWORD *)(v183 + 8) = v180;
    *v180 = v183;
    *(_QWORD *)(v32 + 712) = v181;
    *(_QWORD *)(v181 + 8) = v32 + 712;
    *(_QWORD *)(v32 + 728) = v179;
    *(_QWORD *)(v32 + 576) = 0;
  }
  *(_OWORD *)(v32 + 736) = *v304;
  *(_QWORD *)(v32 + 752) = *(_QWORD *)(v32 + 600);
  *(_QWORD *)(v32 + 592) = 0;
  *(_QWORD *)(v32 + 600) = 0;
  *(_QWORD *)v304 = 0;
  v334 = *(std::runtime_error *)v66;
  *(_QWORD *)v66 = 0;
  *(_QWORD *)(v66 + 8) = 0;
  v184 = *(_QWORD *)(v32 + 888);
  *(_QWORD *)(v32 + 952) = *(_QWORD *)(v184 + 56);
  v185 = *(_QWORD *)(v184 + 64);
  *(_QWORD *)(v32 + 960) = v185;
  if (v185)
  {
    v186 = (unint64_t *)(v185 + 8);
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
  }
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)&v347, (__int128 *)v162, (__int128 *)&v334, (__int128 *)(v32 + 952));
  if (*(_BYTE *)(v32 + 408))
  {
    if (*(_BYTE *)(v32 + 400))
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v312->__vftable);
    else
      ((void (*)(std::runtime_error *))v312->~runtime_error)(v312);
    *(_BYTE *)(v32 + 408) = 0;
  }
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v312, (uint64_t)&v347);
  *(_BYTE *)(v32 + 400) = 1;
  *(_BYTE *)(v32 + 408) = 1;
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v347.__vftable);
  v189 = *(std::__shared_weak_count **)(v32 + 960);
  if (v189)
  {
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  imp = (std::__shared_weak_count *)v334.__imp_.__imp_;
  if (v334.__imp_.__imp_)
  {
    v193 = (unint64_t *)(v334.__imp_.__imp_ + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)v162);
LABEL_238:
  if (*(_BYTE *)(v32 + 832))
  {
    v203 = *(std::__shared_weak_count **)(v32 + 768);
    if (v203)
    {
      v204 = (unint64_t *)&v203->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
  }
  else
  {
    (**(void (***)(unint64_t))v66)(v66);
  }
  *(_QWORD *)(v32 + 760) = v154;
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v66 + 224) = 1;
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v66);
LABEL_246:
  v206 = *(_OWORD *)v153;
  *(_OWORD *)(v13 + 2128) = *(_OWORD *)v153;
  *v153 = 0;
  v153[1] = 0;
  v207 = atomic_load((unint64_t *)(v206 + 400));
  v208 = (uint64_t)v314;
  if (!v207)
  {
    *v303 = 0;
    v209 = (unint64_t *)(*(_QWORD *)(v13 + 2128) + 400);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v13, v209));
    if (!v210)
      return;
  }
  v211 = *(_QWORD *)(v13 + 2128);
  if (!*(_BYTE *)(v211 + 392))
    goto LABEL_446;
  v212 = (const std::runtime_error *)(v211 + 8);
  v213 = *(_BYTE *)(v211 + 384);
  if (v213)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v314, (uint64_t)v212);
  }
  else
  {
    std::runtime_error::runtime_error(v314, v212);
    *(_OWORD *)(v13 + 888) = *(_OWORD *)(v211 + 24);
    *(_QWORD *)(v13 + 872) = off_1E2521330;
    v214 = (_QWORD *)(v211 + 48);
    v215 = *(_QWORD *)(v211 + 48);
    *(_QWORD *)(v13 + 904) = *(_QWORD *)(v211 + 40);
    v216 = v13 + 912;
    *(_QWORD *)(v13 + 912) = v215;
    v217 = *(_QWORD *)(v211 + 56);
    *(_QWORD *)(v13 + 920) = v217;
    if (v217)
    {
      *(_QWORD *)(v215 + 16) = v216;
      *(_QWORD *)(v211 + 40) = v214;
      *v214 = 0;
      *(_QWORD *)(v211 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v13 + 904) = v216;
    }
    v218 = *(_QWORD *)(v13 + 2128);
    *(_OWORD *)(v13 + 928) = *(_OWORD *)(v218 + 64);
    *(_QWORD *)(v218 + 64) = 0;
    *(_QWORD *)(v218 + 72) = 0;
  }
  *(_BYTE *)(v13 + 1248) = v213;
  v219 = *(_QWORD *)(v13 + 2136);
  if (v219)
  {
    v220 = (unint64_t *)(v219 + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      v222 = *(std::__shared_weak_count **)(v13 + 2136);
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v223 = *(std::__shared_weak_count **)(v13 + 480);
  if (v223)
  {
    v224 = (unint64_t *)&v223->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = *(std::__shared_weak_count **)(v13 + 2040);
  if (v226)
  {
    v227 = (unint64_t *)&v226->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = *(std::__shared_weak_count **)(v13 + 2024);
  if (v229)
  {
    v230 = (unint64_t *)&v229->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  AMSCore::URL::~URL(v322);
  if (!*(_BYTE *)(v13 + 1248))
  {
    std::runtime_error::runtime_error(&v347, v314);
    v348 = *(_OWORD *)(v13 + 888);
    v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v243 = *(_QWORD *)(v13 + 912);
    v349 = *(unsigned int ***)(v13 + 904);
    v350 = (unsigned int *)v243;
    v351 = *(_QWORD *)(v13 + 920);
    if (v351)
    {
      *(_QWORD *)(v243 + 16) = &v350;
      *(_QWORD *)(v13 + 904) = v13 + 912;
      *(_QWORD *)(v13 + 912) = 0;
      *(_QWORD *)(v13 + 920) = 0;
    }
    else
    {
      v349 = &v350;
    }
    v352 = *(_OWORD *)(v13 + 928);
    *(_QWORD *)(v13 + 936) = 0;
    *(_QWORD *)(v13 + 928) = 0;
    v353 = 1;
    std::runtime_error::runtime_error(&v334, &v347);
    v335 = v348;
    v334.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v336 = v349;
    v337 = v350;
    v338 = v351;
    if (v351)
    {
      *((_QWORD *)v350 + 2) = &v337;
      v349 = &v350;
      v350 = 0;
      v351 = 0;
    }
    else
    {
      v336 = &v337;
    }
    v339 = v352;
    v352 = 0uLL;
    std::runtime_error::runtime_error(&v341, &v334);
    v342 = v335;
    v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v247 = v337;
    v343 = v336;
    v344 = v337;
    v345 = v338;
    if (v338)
    {
      *((_QWORD *)v337 + 2) = &v344;
      v247 = 0;
      v336 = &v337;
      v337 = 0;
      v338 = 0;
    }
    else
    {
      v343 = &v344;
    }
    v346 = v339;
    v339 = 0uLL;
    v334.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v336, v247);
    MEMORY[0x18D7898AC](&v334);
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v310, &v341);
    v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v248 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
    v153 = v321;
    if (*((_QWORD *)&v346 + 1))
    {
      v249 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
      do
        v250 = __ldaxr(v249);
      while (__stlxr(v250 - 1, v249));
      if (!v250)
      {
        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
        std::__shared_weak_count::__release_weak(v248);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v343, v344);
    MEMORY[0x18D7898AC](&v341);
    if (v353)
    {
      v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v251 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v252 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v349, v350);
      MEMORY[0x18D7898AC](&v347);
      if (!*(_BYTE *)(v13 + 1248))
        goto LABEL_363;
      goto LABEL_420;
    }
    goto LABEL_419;
  }
  *(_DWORD *)(v13 + 1044) = 1;
  v232 = *(_QWORD *)(v13 + 2112);
  *(_QWORD *)(v13 + 2072) = *(_QWORD *)(v13 + 2104);
  *(_QWORD *)(v13 + 2080) = v232;
  if (v232)
  {
    v233 = (unint64_t *)(v232 + 8);
    do
      v234 = __ldxr(v233);
    while (__stxr(v234 + 1, v233));
  }
  v235 = v314[75];
  *v306 = 0;
  v306[1] = 0;
  v236 = *(std::__shared_weak_count **)(v13 + 880);
  *v314 = v235;
  if (v236)
  {
    v237 = (unint64_t *)&v236->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  *(_DWORD *)(v13 + 1048) = 6;
  v239 = *(std::__shared_weak_count **)(v13 + 2080);
  if (v239)
  {
    v240 = (unint64_t *)&v239->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  if (!*(_BYTE *)(v13 + 1248))
    goto LABEL_446;
  v334.__vftable = 0;
  v334.__imp_.__imp_ = 0;
  *(_QWORD *)&v335 = 0;
  v340 = 1;
  v242.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  BYTE7(v348) = 14;
  strcpy((char *)&v347, "deliverVersion");
  *((_QWORD *)&v348 + 1) = 1;
  LODWORD(v351) = 3;
  v354 = 8;
  strcpy((char *)&v352, "postTime");
  v355[0] = 60000 * (v242.__d_.__rep_ / 1000 / 60000);
  v358 = 6;
  v356 = 3;
  strcpy((char *)__p, "events");
  v359 = *(_OWORD *)(v13 + 2048);
  v360 = *(_QWORD *)(v13 + 2064);
  *v305 = 0;
  v305[1] = 0;
  v305[2] = 0;
  v361 = 9;
  v341.__imp_.__imp_ = 0;
  *(_QWORD *)&v342 = 0;
  v341.__vftable = (std::runtime_error_vtbl *)&v341.__imp_;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v341, (uint64_t *)&v341.__imp_, (const void **)&v347.__vftable, (__int128 *)&v347);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v341, (uint64_t *)&v341.__imp_, (const void **)&v352, &v352);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v341, (uint64_t *)&v341.__imp_, (const void **)__p, (__int128 *)__p);
  if (v361 != -1)
    ((void (*)(char **, __int128 *))off_1E253D240[v361])(&v328, &v359);
  v361 = -1;
  if (v358 < 0)
    operator delete(__p[0]);
  if (v356 != -1)
    ((void (*)(char **, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))off_1E253D240[v356])(&v328, v355);
  v356 = -1;
  if (v354 < 0)
    operator delete((void *)v352);
  if ((_DWORD)v351 != -1)
    ((void (*)(char **, char *))off_1E253D240[v351])(&v328, (char *)&v348 + 8);
  LODWORD(v351) = -1;
  if (SBYTE7(v348) < 0)
    operator delete(v347.__vftable);
  AMSCore::serialize((std::string *)&v347, &v341);
  std::expected<AMSCore::DataBuffer,AMSCore::Error>::operator=[abi:fe180100](&v334, &v347);
  if (v353)
  {
    if (SBYTE7(v348) < 0)
      operator delete(v347.__vftable);
  }
  else
  {
    ((void (*)(std::runtime_error *))v347.~runtime_error)(&v347);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v341, (unsigned int *)v341.__imp_.__imp_);
  if (v340)
  {
    (*(void (**)(std::runtime_error *__return_ptr))(**(_QWORD **)(v13 + 2120) + 24))(&v347);
    if (v353)
    {
      v341 = v347;
      *(_QWORD *)&v342 = v348;
      *(_QWORD *)&v348 = 0;
      v347.__vftable = 0;
      v347.__imp_.__imp_ = 0;
      DWORD2(v342) = 5;
      AMSCore::Any::operator=(v13 + 928, (uint64_t)&v341);
      *(_DWORD *)(v13 + 960) = 3;
      v327 = 12;
      strcpy((char *)v326, "Content-Type");
      v328 = (char *)operator new(0x20uLL);
      *(_OWORD *)v329 = xmmword_18CF51BB0;
      strcpy(v328, "application/json; charset=UTF-8");
      v329[16] = 1;
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v314, (uint64_t)v326, (uint64_t)&v328);
      HIBYTE(v325[2]) = 16;
      strcpy((char *)v325, "Content-Encoding");
      v324 = 260;
      strcpy((char *)v323, "gzip");
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v314, (uint64_t)v325, (uint64_t)v323);
      if (HIBYTE(v324) && (char)v324 < 0)
        operator delete(v323[0]);
      if (SHIBYTE(v325[2]) < 0)
        operator delete(v325[0]);
      if (v329[16] && (v329[15] & 0x80000000) != 0)
        operator delete(v328);
      if (v327 < 0)
        operator delete(v326[0]);
      if (DWORD2(v342) != -1)
        ((void (*)(void **, std::runtime_error *))off_1E253D240[DWORD2(v342)])(v326, &v341);
    }
    else
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v341);
      AMSCore::Logger::log<char [35],AMSCore::Error>((uint64_t)v341.__vftable, 2, (uint64_t)"metrics", 7, "Failed to compress metrics event: ", (uint64_t)&v347);
      v244 = (std::__shared_weak_count *)v341.__imp_.__imp_;
      if (v341.__imp_.__imp_)
      {
        v245 = (unint64_t *)(v341.__imp_.__imp_ + 8);
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
      if (!v340)
        goto LABEL_446;
      v341 = v334;
      *(_QWORD *)&v342 = v335;
      v334.__imp_.__imp_ = 0;
      *(_QWORD *)&v335 = 0;
      v334.__vftable = 0;
      DWORD2(v342) = 5;
      AMSCore::Any::operator=(v13 + 928, (uint64_t)&v341);
      *(_DWORD *)(v13 + 960) = 3;
      LOBYTE(v324) = 12;
      strcpy((char *)v323, "Content-Type");
      v328 = (char *)operator new(0x20uLL);
      *(_OWORD *)v329 = xmmword_18CF51BB0;
      strcpy(v328, "application/json; charset=UTF-8");
      v329[16] = 1;
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v314, (uint64_t)v323, (uint64_t)&v328);
      if (v329[16] && (v329[15] & 0x80000000) != 0)
        operator delete(v328);
      if ((char)v324 < 0)
        operator delete(v323[0]);
      if (DWORD2(v342) != -1)
        ((void (*)(void **, std::runtime_error *))off_1E253D240[DWORD2(v342)])(v323, &v341);
    }
    DWORD2(v342) = -1;
    if (v353)
    {
      if (SBYTE7(v348) < 0)
        operator delete(v347.__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))v347.~runtime_error)(&v347);
    }
    *(_BYTE *)(v13 + 2008) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v347, &v334);
    v348 = v335;
    v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v349 = v336;
    v350 = v337;
    v351 = v338;
    if (v338)
    {
      *((_QWORD *)v337 + 2) = &v350;
      v336 = &v337;
      v337 = 0;
      v338 = 0;
    }
    else
    {
      v349 = &v350;
    }
    v352 = v339;
    v339 = 0uLL;
    v353 = 1;
    std::runtime_error::runtime_error(&v341, &v347);
    v342 = v348;
    v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v343 = v349;
    v344 = v350;
    v345 = v351;
    if (v351)
    {
      *((_QWORD *)v350 + 2) = &v344;
      v349 = &v350;
      v350 = 0;
      v351 = 0;
    }
    else
    {
      v343 = &v344;
    }
    v346 = v352;
    v352 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)&v328, &v341);
    *(_OWORD *)&v329[8] = v342;
    v328 = (char *)off_1E2521330;
    v254 = v344;
    v330 = v343;
    v331 = v344;
    v332 = v345;
    if (v345)
    {
      *((_QWORD *)v344 + 2) = &v331;
      v254 = 0;
      v343 = &v344;
      v344 = 0;
      v345 = 0;
    }
    else
    {
      v330 = &v331;
    }
    v208 = (uint64_t)v314;
    v333 = v346;
    v346 = 0uLL;
    v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v343, v254);
    MEMORY[0x18D7898AC](&v341);
    std::runtime_error::runtime_error(v308, (const std::runtime_error *)&v328);
    *(_OWORD *)(v13 + 1952) = *(_OWORD *)&v329[8];
    *(_QWORD *)(v13 + 1936) = off_1E2521330;
    v255 = v331;
    *(_QWORD *)(v13 + 1968) = v330;
    v256 = v13 + 1976;
    *(_QWORD *)(v13 + 1976) = v255;
    v257 = v332;
    *(_QWORD *)(v13 + 1984) = v332;
    if (v257)
    {
      *((_QWORD *)v255 + 2) = v256;
      v255 = 0;
      v330 = &v331;
      v331 = 0;
      v332 = 0;
    }
    else
    {
      *(_QWORD *)(v13 + 1968) = v256;
    }
    v314[70] = (std::runtime_error)v333;
    v333 = 0uLL;
    *(_BYTE *)(v13 + 2008) = 0;
    v328 = (char *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v330, v255);
    MEMORY[0x18D7898AC](&v328);
    v153 = v321;
    if (v353)
    {
      v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v258 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
      if (*((_QWORD *)&v352 + 1))
      {
        v259 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
        do
          v260 = __ldaxr(v259);
        while (__stlxr(v260 - 1, v259));
        if (!v260)
        {
          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
          std::__shared_weak_count::__release_weak(v258);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v349, v350);
      MEMORY[0x18D7898AC](&v347);
    }
  }
  if (v340)
  {
    if ((SBYTE7(v335) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(v13 + 2008))
        goto LABEL_384;
LABEL_393:
      std::runtime_error::runtime_error(&v347, v308);
      v348 = *(_OWORD *)(v13 + 1952);
      v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v272 = *(_QWORD *)(v13 + 1976);
      v349 = *(unsigned int ***)(v13 + 1968);
      v350 = (unsigned int *)v272;
      v351 = *(_QWORD *)(v13 + 1984);
      if (v351)
      {
        *(_QWORD *)(v272 + 16) = &v350;
        *(_QWORD *)(v13 + 1968) = v13 + 1976;
        *(_QWORD *)(v13 + 1976) = 0;
        *(_QWORD *)(v13 + 1984) = 0;
      }
      else
      {
        v349 = &v350;
      }
      v352 = *(_OWORD *)(v208 + 1120);
      *(_OWORD *)(v208 + 1120) = 0u;
      v353 = 1;
      std::runtime_error::runtime_error(&v334, &v347);
      v335 = v348;
      v334.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v336 = v349;
      v337 = v350;
      v338 = v351;
      if (v351)
      {
        *((_QWORD *)v350 + 2) = &v337;
        v349 = &v350;
        v350 = 0;
        v351 = 0;
      }
      else
      {
        v336 = &v337;
      }
      v339 = v352;
      v352 = 0uLL;
      std::runtime_error::runtime_error(&v341, &v334);
      v342 = v335;
      v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v277 = v337;
      v343 = v336;
      v344 = v337;
      v345 = v338;
      if (v338)
      {
        *((_QWORD *)v337 + 2) = &v344;
        v277 = 0;
        v336 = &v337;
        v337 = 0;
        v338 = 0;
      }
      else
      {
        v343 = &v344;
      }
      v346 = v339;
      v339 = 0uLL;
      v334.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v336, v277);
      MEMORY[0x18D7898AC](&v334);
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v310, &v341);
      v341.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v278 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
      v153 = v321;
      if (*((_QWORD *)&v346 + 1))
      {
        v279 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
        do
          v280 = __ldaxr(v279);
        while (__stlxr(v280 - 1, v279));
        if (!v280)
        {
          ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
          std::__shared_weak_count::__release_weak(v278);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v343, v344);
      MEMORY[0x18D7898AC](&v341);
      if (v353)
      {
        v347.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v281 = (std::__shared_weak_count *)*((_QWORD *)&v352 + 1);
        if (*((_QWORD *)&v352 + 1))
        {
          v282 = (unint64_t *)(*((_QWORD *)&v352 + 1) + 8);
          do
            v283 = __ldaxr(v282);
          while (__stlxr(v283 - 1, v282));
          if (!v283)
          {
            ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
            std::__shared_weak_count::__release_weak(v281);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v349, v350);
        MEMORY[0x18D7898AC](&v347);
      }
      if (!*(_BYTE *)(v13 + 2008))
      {
LABEL_444:
        ((void (*)(std::runtime_error *))v308->~runtime_error)(v308);
        if (!*(_BYTE *)(v13 + 1248))
          goto LABEL_363;
        goto LABEL_420;
      }
LABEL_419:
      if (!*(_BYTE *)(v13 + 1248))
      {
LABEL_363:
        (**(void (***)(uint64_t))v208)(v208);
LABEL_421:
        *(_QWORD *)(v13 + 472) = v311;
        *(_QWORD *)v13 = 0;
        AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend(v153);
        return;
      }
LABEL_420:
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v208);
      goto LABEL_421;
    }
    operator delete(v334.__vftable);
    if (!*(_BYTE *)(v13 + 2008))
      goto LABEL_393;
  }
  else
  {
    ((void (*)(std::runtime_error *))v334.~runtime_error)(&v334);
    if (!*(_BYTE *)(v13 + 2008))
      goto LABEL_393;
  }
LABEL_384:
  if (!*(_BYTE *)(v13 + 1248))
    goto LABEL_446;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v309, v208);
  AMSCore::EncodeHTTPRequestTask::perform(v298, (uint64_t)v309);
  v261 = *(_OWORD *)(v208 + 1216);
  *(_OWORD *)(v13 + 2144) = v261;
  *(_QWORD *)v298 = 0;
  *((_QWORD *)v298 + 1) = 0;
  if (atomic_load((unint64_t *)(v261 + 416)))
    goto LABEL_389;
  *v303 = 1;
  v263 = (unint64_t *)(*(_QWORD *)(v13 + 2144) + 416);
  do
    v264 = __ldaxr(v263);
  while (__stlxr(v13, v263));
  if (v264)
  {
LABEL_389:
    v265 = *(_QWORD *)(v13 + 2144);
    if (*(_BYTE *)(v265 + 408))
    {
      v266 = (const std::runtime_error *)(v265 + 8);
      v267 = *(_BYTE *)(v265 + 400);
      if (v267)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v153, (uint64_t)v266);
        v268 = (_QWORD *)(v265 + 384);
        *(_QWORD *)(v13 + 848) = *(_QWORD *)(v265 + 384);
        v269 = (_QWORD *)(v13 + 856);
        v270 = (_QWORD *)(v265 + 392);
        v271 = (std::runtime_error *)v310;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)v153, v266);
        *(_OWORD *)(v13 + 488) = *(_OWORD *)(v265 + 24);
        *(_QWORD *)(v13 + 472) = off_1E2521330;
        v273 = (_QWORD *)(v265 + 48);
        v274 = *(_QWORD *)(v265 + 48);
        v275 = v13 + 512;
        *(_QWORD *)(v13 + 504) = *(_QWORD *)(v265 + 40);
        *(_QWORD *)(v13 + 512) = v274;
        v276 = *(_QWORD *)(v265 + 56);
        *(_QWORD *)(v13 + 520) = v276;
        if (v276)
        {
          *(_QWORD *)(v274 + 16) = v275;
          *(_QWORD *)(v265 + 40) = v273;
          *v273 = 0;
          *(_QWORD *)(v265 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v13 + 504) = v275;
        }
        v271 = (std::runtime_error *)v310;
        v284 = *(_QWORD *)(v13 + 2144);
        v285 = *(_QWORD *)(v284 + 64);
        v268 = (_QWORD *)(v284 + 64);
        *(_QWORD *)(v13 + 528) = v285;
        v269 = (_QWORD *)(v13 + 536);
        v270 = v268 + 1;
      }
      *v269 = *v270;
      *v268 = 0;
      v268[1] = 0;
      *(_BYTE *)(v13 + 864) = v267;
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>(v271, (std::runtime_error *)v153);
      if (*(_BYTE *)(v13 + 864))
      {
        v286 = *(std::__shared_weak_count **)(v13 + 856);
        if (v286)
        {
          v287 = (unint64_t *)&v286->__shared_owners_;
          do
            v288 = __ldaxr(v287);
          while (__stlxr(v288 - 1, v287));
          if (!v288)
          {
            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
            std::__shared_weak_count::__release_weak(v286);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v153);
        v289 = *(_QWORD *)(v13 + 2152);
        if (!v289)
        {
LABEL_438:
          v293 = *(std::__shared_weak_count **)(v13 + 2096);
          if (v293)
          {
            v294 = (unint64_t *)&v293->__shared_owners_;
            do
              v295 = __ldaxr(v294);
            while (__stlxr(v295 - 1, v294));
            if (!v295)
            {
              ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
              std::__shared_weak_count::__release_weak(v293);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v309);
          if (!*(_BYTE *)(v13 + 2008))
            goto LABEL_444;
          goto LABEL_419;
        }
      }
      else
      {
        (*(void (**)(uint64_t *))*v153)(v153);
        v289 = *(_QWORD *)(v13 + 2152);
        if (!v289)
          goto LABEL_438;
      }
      v290 = (unint64_t *)(v289 + 8);
      do
        v291 = __ldaxr(v290);
      while (__stlxr(v291 - 1, v290));
      if (!v291)
      {
        v292 = *(std::__shared_weak_count **)(v13 + 2152);
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
      goto LABEL_438;
    }
LABEL_446:
    __break(1u);
  }
}

void sub_18CCC8588(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18CCC8644);
  }
  JUMPOUT(0x18CCC863CLL);
}

void sub_18CCC859C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x18CCC85A4);
  JUMPOUT(0x18CCC863CLL);
}

void sub_18CCC85C0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  unsigned int *a70;
  uint64_t v70;
  uint64_t v71;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a69, a70);
    std::pair<std::string const,AMSCore::Any>::~pair(v71);
    std::pair<std::string const,AMSCore::Any>::~pair(v70);
    std::pair<std::string const,AMSCore::Any>::~pair((uint64_t)&STACK[0x230]);
    JUMPOUT(0x18CCC85ECLL);
  }
  JUMPOUT(0x18CCC863CLL);
}

void sub_18CCC8628()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCC8180);
}

void sub_18CCC8634(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::Logger::log<char [11],unsigned long,char [16]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Uploading ", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)" metrics events", 15);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "metrics", 7, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CCC88B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [65]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"The server returned a 4xx status code. Events should be deleted.", 64);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 4;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "metrics", 7, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CCC8B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [37],AMSCore::HTTPResponse::StatusCode>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"The server returned an status code: ", 36);
    std::ostream::operator<<();
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 4;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "metrics", 7, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CCC8DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [48],AMSCore::HTTPResponse::StatusCode>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"The server returned an unexpected status code: ", 47);
    std::ostream::operator<<();
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 4;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "metrics", 7, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CCC9098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[46]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [46]>(a3, &__what_arg);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CCC91EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const std::runtime_error *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v1 = result;
  v20 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v5 = (uint64_t *)(*(_QWORD *)result + 128);
    v4 = *v5;
    if (*v5)
    {
      if (v4 == *(_QWORD *)v1 + 104)
      {
        v19 = v18;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 24))(v4, v18);
      }
      else
      {
        v19 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v5 = 0;
      }
    }
    else
    {
      v19 = 0;
    }
    result = v19;
    if (v19)
    {
      v6 = *(_QWORD *)v1;
      if (!*(_BYTE *)(v6 + 88))
      {
        __break(1u);
        return result;
      }
      v7 = (const std::runtime_error *)(v6 + 8);
      if (*(_BYTE *)(v6 + 80))
      {
        LODWORD(v11.__vftable) = v7->__vftable;
        v17 = 1;
      }
      else
      {
        std::runtime_error::runtime_error(&v11, v7);
        v8 = (_QWORD *)(v6 + 48);
        v9 = *(_QWORD *)(v6 + 48);
        v12 = *(_OWORD *)(v6 + 24);
        v11.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v13 = *(uint64_t **)(v6 + 40);
        v14 = v9;
        if (*(_QWORD *)(v6 + 56))
        {
          *(_QWORD *)(v9 + 16) = &v14;
          *(_QWORD *)(v6 + 40) = v8;
          *v8 = 0;
          *(_QWORD *)(v6 + 56) = 0;
        }
        else
        {
          v13 = &v14;
        }
        v16 = *(_OWORD *)(v6 + 64);
        *(_QWORD *)(v6 + 64) = 0;
        *(_QWORD *)(v6 + 72) = 0;
        result = v19;
        v17 = 0;
        if (!v19)
          std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)result + 48))(result, &v11);
      if (!v17)
        ((void (*)(std::runtime_error *))v11.~runtime_error)(&v11);
    }
    else
    {
      (*v3)(v3);
    }
    result = v19;
    if (v19 == v18)
    {
      v10 = 4;
      result = v18;
    }
    else
    {
      if (!v19)
        return result;
      v10 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v10))();
  }
  return result;
}

void sub_18CCC93EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMSCore::CancellableRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::CancellableRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::CancellableRequestHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMSCore::AnonymousCancellableRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::AnonymousCancellableRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::AnonymousCancellableRequestHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMSCore::UploadMetricsEventTask::`anonymous namespace'::encodeReportingRequest(unint64_t a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  void **v4;
  const std::runtime_error *v5;
  unint64_t v6;
  uint64_t v7;
  const std::runtime_error *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  const std::runtime_error *v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  int *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t *v67;
  unint64_t v68;
  unsigned int *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  std::runtime_error *v92;
  _BYTE v93[32];
  unsigned int **v94;
  unsigned int *v95;
  uint64_t v96;
  __int128 v97;
  std::runtime_error v98;
  __int128 v99;
  unsigned int **v100;
  unsigned int *v101;
  uint64_t v102;
  __int128 v103;
  char v104;
  void *v105[2];
  uint64_t v106;
  int v107;
  void *v108[2];
  char v109;
  void *v110[3];
  void (**v111)(AMSCore::Error *__hidden);
  _BYTE v112[24];
  unsigned int **v113;
  unsigned int *v114;
  uint64_t v115;
  __int128 v116;
  std::runtime_error v117;
  __int128 v118;
  unsigned int **v119;
  unsigned int *v120;
  uint64_t v121;
  __int128 v122;
  char v123;
  char v124;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v125[3];
  int v126;
  void *__p[2];
  char v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 872;
  v3 = (std::runtime_error *)(a1 + 472);
  v4 = (void **)(a1 + 1256);
  v5 = (const std::runtime_error *)(a1 + 1936);
  v6 = a1 + 16;
  if (*(_BYTE *)(a1 + 2160))
  {
LABEL_2:
    v7 = *(_QWORD *)(a1 + 2144);
    if (*(_BYTE *)(v7 + 408))
    {
      v8 = (const std::runtime_error *)(v7 + 8);
      v9 = *(_BYTE *)(v7 + 400);
      if (v9)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v8);
        v10 = (_QWORD *)(v7 + 384);
        *(_QWORD *)(a1 + 848) = *(_QWORD *)(v7 + 384);
        v11 = (_QWORD *)(a1 + 856);
        v12 = (_QWORD *)(v7 + 392);
      }
      else
      {
        std::runtime_error::runtime_error(v3, v8);
        *(_OWORD *)(a1 + 488) = *(_OWORD *)(v7 + 24);
        *(_QWORD *)(a1 + 472) = off_1E2521330;
        v16 = (_QWORD *)(v7 + 48);
        v17 = *(_QWORD *)(v7 + 48);
        v18 = a1 + 512;
        *(_QWORD *)(a1 + 504) = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(a1 + 512) = v17;
        v19 = *(_QWORD *)(v7 + 56);
        *(_QWORD *)(a1 + 520) = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 16) = v18;
          *(_QWORD *)(v7 + 40) = v16;
          *v16 = 0;
          *(_QWORD *)(v7 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 504) = v18;
        }
        v24 = *(_QWORD *)(a1 + 2144);
        v25 = *(_QWORD *)(v24 + 64);
        v10 = (_QWORD *)(v24 + 64);
        *(_QWORD *)(a1 + 528) = v25;
        v11 = (_QWORD *)(a1 + 536);
        v12 = v10 + 1;
      }
      *v11 = *v12;
      *v10 = 0;
      v10[1] = 0;
      *(_BYTE *)(a1 + 864) = v9;
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), v3);
      if (*(_BYTE *)(a1 + 864))
      {
        v26 = *(std::__shared_weak_count **)(a1 + 856);
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
        v29 = *(_QWORD *)(a1 + 2152);
        if (!v29)
        {
LABEL_27:
          v33 = *(std::__shared_weak_count **)(a1 + 2096);
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
          if (*(_BYTE *)(a1 + 2008))
            goto LABEL_193;
          goto LABEL_33;
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
        v29 = *(_QWORD *)(a1 + 2152);
        if (!v29)
          goto LABEL_27;
      }
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        v32 = *(std::__shared_weak_count **)(a1 + 2152);
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      goto LABEL_27;
    }
LABEL_197:
    __break(1u);
  }
  v13 = *(_QWORD *)(a1 + 2128);
  if (!*(_BYTE *)(v13 + 392))
    goto LABEL_197;
  v14 = (const std::runtime_error *)(v13 + 8);
  v15 = *(_BYTE *)(v13 + 384);
  if (v15)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 872, (uint64_t)v14);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 872), v14);
    *(_OWORD *)(a1 + 888) = *(_OWORD *)(v13 + 24);
    *(_QWORD *)(a1 + 872) = off_1E2521330;
    v20 = (_QWORD *)(v13 + 48);
    v21 = *(_QWORD *)(v13 + 48);
    *(_QWORD *)(a1 + 904) = *(_QWORD *)(v13 + 40);
    v22 = a1 + 912;
    *(_QWORD *)(a1 + 912) = v21;
    v23 = *(_QWORD *)(v13 + 56);
    *(_QWORD *)(a1 + 920) = v23;
    if (v23)
    {
      *(_QWORD *)(v21 + 16) = v22;
      *(_QWORD *)(v13 + 40) = v20;
      *v20 = 0;
      *(_QWORD *)(v13 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 904) = v22;
    }
    v36 = *(_QWORD *)(a1 + 2128);
    *(_OWORD *)(a1 + 928) = *(_OWORD *)(v36 + 64);
    *(_QWORD *)(v36 + 64) = 0;
    *(_QWORD *)(v36 + 72) = 0;
  }
  *(_BYTE *)(a1 + 1248) = v15;
  v37 = *(_QWORD *)(a1 + 2136);
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      v40 = *(std::__shared_weak_count **)(a1 + 2136);
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v41 = *(std::__shared_weak_count **)(a1 + 480);
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v92 = (std::runtime_error *)v5;
  v44 = *(std::__shared_weak_count **)(a1 + 2040);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *(std::__shared_weak_count **)(a1 + 2024);
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1632));
  if (!*(_BYTE *)(a1 + 1248))
  {
    v91 = v6;
    std::runtime_error::runtime_error(&v117, (const std::runtime_error *)v2);
    v118 = *(_OWORD *)(a1 + 888);
    v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v60 = *(_QWORD *)(a1 + 912);
    v119 = *(unsigned int ***)(a1 + 904);
    v120 = (unsigned int *)v60;
    v121 = *(_QWORD *)(a1 + 920);
    if (v121)
    {
      *(_QWORD *)(v60 + 16) = &v120;
      *(_QWORD *)(a1 + 904) = a1 + 912;
      *(_QWORD *)(a1 + 912) = 0;
      *(_QWORD *)(a1 + 920) = 0;
    }
    else
    {
      v119 = &v120;
    }
    v122 = *(_OWORD *)(a1 + 928);
    *(_QWORD *)(a1 + 936) = 0;
    *(_QWORD *)(a1 + 928) = 0;
    v123 = 1;
    std::runtime_error::runtime_error((std::runtime_error *)&v111, &v117);
    *(_OWORD *)&v112[8] = v118;
    v111 = off_1E2521330;
    v113 = v119;
    v114 = v120;
    v115 = v121;
    if (v121)
    {
      *((_QWORD *)v120 + 2) = &v114;
      v119 = &v120;
      v120 = 0;
      v121 = 0;
    }
    else
    {
      v113 = &v114;
    }
    v116 = v122;
    v122 = 0uLL;
    std::runtime_error::runtime_error(&v98, (const std::runtime_error *)&v111);
    v99 = *(_OWORD *)&v112[8];
    v98.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v69 = v114;
    v100 = v113;
    v101 = v114;
    v102 = v115;
    if (v115)
    {
      *((_QWORD *)v114 + 2) = &v101;
      v69 = 0;
      v113 = &v114;
      v114 = 0;
      v115 = 0;
    }
    else
    {
      v100 = &v101;
    }
    v103 = v116;
    v116 = 0uLL;
    v111 = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v113, v69);
    MEMORY[0x18D7898AC](&v111);
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), &v98);
    v98.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v100, v101);
    MEMORY[0x18D7898AC](&v98);
    if (v123)
    {
      v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      if (*((_QWORD *)&v122 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v119, v120);
      MEMORY[0x18D7898AC](&v117);
    }
    v6 = v91;
    goto LABEL_193;
  }
  *(_DWORD *)(a1 + 1044) = 1;
  v50 = *(_QWORD *)(a1 + 2112);
  *(_QWORD *)(a1 + 2072) = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 2080) = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = *(_OWORD *)(v2 + 1200);
  *(_QWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2080) = 0;
  v54 = *(std::__shared_weak_count **)(a1 + 880);
  *(_OWORD *)v2 = v53;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  *(_DWORD *)(a1 + 1048) = 6;
  v57 = *(std::__shared_weak_count **)(a1 + 2080);
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (!*(_BYTE *)(a1 + 1248))
    goto LABEL_197;
  v98.__vftable = 0;
  v98.__imp_.__imp_ = 0;
  *(_QWORD *)&v99 = 0;
  v104 = 1;
  BYTE7(v118) = 14;
  strcpy((char *)&v117, "deliverVersion");
  *((_QWORD *)&v118 + 1) = 1;
  LODWORD(v121) = 3;
  v124 = 8;
  strcpy((char *)&v122, "postTime");
  v125[0] = 60000 * (std::chrono::system_clock::now().__d_.__rep_ / 1000 / 60000);
  v128 = 6;
  v126 = 3;
  strcpy((char *)__p, "events");
  v129 = *(_OWORD *)(a1 + 2048);
  v130 = *(_QWORD *)(a1 + 2064);
  *(_QWORD *)(a1 + 2048) = 0;
  *(_QWORD *)(a1 + 2056) = 0;
  *(_QWORD *)(a1 + 2064) = 0;
  v131 = 9;
  *(_QWORD *)v112 = 0;
  *(_QWORD *)&v112[8] = 0;
  v111 = (void (**)(AMSCore::Error *__hidden))v112;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v111, (uint64_t *)v112, (const void **)&v117.__vftable, (__int128 *)&v117);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v111, (uint64_t *)v112, (const void **)&v122, &v122);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v111, (uint64_t *)v112, (const void **)__p, (__int128 *)__p);
  if (v131 != -1)
    ((void (*)(_BYTE *, __int128 *))off_1E253D240[v131])(v93, &v129);
  v131 = -1;
  if (v128 < 0)
    operator delete(__p[0]);
  if (v126 != -1)
    ((void (*)(_BYTE *, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))off_1E253D240[v126])(v93, v125);
  v126 = -1;
  if (v124 < 0)
    operator delete((void *)v122);
  if ((_DWORD)v121 != -1)
    ((void (*)(_BYTE *, char *))off_1E253D240[v121])(v93, (char *)&v118 + 8);
  LODWORD(v121) = -1;
  if (SBYTE7(v118) < 0)
    operator delete(v117.__vftable);
  AMSCore::serialize((std::string *)&v117, &v111);
  std::expected<AMSCore::DataBuffer,AMSCore::Error>::operator=[abi:fe180100](&v98, &v117);
  if (v123)
  {
    if (SBYTE7(v118) < 0)
      operator delete(v117.__vftable);
  }
  else
  {
    ((void (*)(std::runtime_error *))v117.~runtime_error)(&v117);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v111, *(unsigned int **)v112);
  if (v104)
  {
    (*(void (**)(std::runtime_error *__return_ptr))(**(_QWORD **)(a1 + 2120) + 24))(&v117);
    if (v123)
    {
      *(std::runtime_error *)v105 = v117;
      v106 = v118;
      v117.__imp_.__imp_ = 0;
      *(_QWORD *)&v118 = 0;
      v117.__vftable = 0;
      v107 = 5;
      AMSCore::Any::operator=(a1 + 928, (uint64_t)v105);
      *(_DWORD *)(a1 + 960) = 3;
      v109 = 12;
      strcpy((char *)v108, "Content-Type");
      *(_QWORD *)v93 = operator new(0x20uLL);
      *(_OWORD *)&v93[8] = xmmword_18CF51BB0;
      strcpy(*(char **)v93, "application/json; charset=UTF-8");
      v93[24] = 1;
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader(v2, (uint64_t)v108, (uint64_t)v93);
      HIBYTE(v110[2]) = 16;
      strcpy((char *)v110, "Content-Encoding");
      *(_WORD *)&v112[15] = 260;
      strcpy((char *)&v111, "gzip");
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader(v2, (uint64_t)v110, (uint64_t)&v111);
      if (v112[16] && (v112[15] & 0x80000000) != 0)
        operator delete(v111);
      if (SHIBYTE(v110[2]) < 0)
        operator delete(v110[0]);
      if (v93[24] && (v93[23] & 0x80000000) != 0)
        operator delete(*(void **)v93);
      v61 = &v107;
      if (v109 < 0)
        operator delete(v108[0]);
      if (v107 != -1)
        ((void (*)(void **, void **))off_1E253D240[v107])(v110, v105);
    }
    else
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v111);
      AMSCore::Logger::log<char [35],AMSCore::Error>((uint64_t)v111, 2, (uint64_t)"metrics", 7, "Failed to compress metrics event: ", (uint64_t)&v117);
      v62 = *(std::__shared_weak_count **)v112;
      if (*(_QWORD *)v112)
      {
        v63 = (unint64_t *)(*(_QWORD *)v112 + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (!v104)
        goto LABEL_197;
      *(std::runtime_error *)v93 = v98;
      *(_QWORD *)&v93[16] = v99;
      v98.__imp_.__imp_ = 0;
      *(_QWORD *)&v99 = 0;
      v98.__vftable = 0;
      *(_DWORD *)&v93[24] = 5;
      AMSCore::Any::operator=(a1 + 928, (uint64_t)v93);
      *(_DWORD *)(a1 + 960) = 3;
      HIBYTE(v106) = 12;
      strcpy((char *)v105, "Content-Type");
      v111 = (void (**)(AMSCore::Error *__hidden))operator new(0x20uLL);
      *(_OWORD *)v112 = xmmword_18CF51BB0;
      strcpy((char *)v111, "application/json; charset=UTF-8");
      v112[16] = 1;
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader(v2, (uint64_t)v105, (uint64_t)&v111);
      if (v112[16] && (v112[15] & 0x80000000) != 0)
        operator delete(v111);
      v61 = (int *)&v93[24];
      if (SHIBYTE(v106) < 0)
        operator delete(v105[0]);
      if (*(_DWORD *)&v93[24] != -1)
        ((void (*)(void **, _BYTE *))off_1E253D240[*(unsigned int *)&v93[24]])(v105, v93);
    }
    v5 = v92;
    *v61 = -1;
    if (v123)
    {
      if (SBYTE7(v118) < 0)
        operator delete(v117.__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))v117.~runtime_error)(&v117);
    }
    *(_BYTE *)(a1 + 2008) = 1;
    if (v104)
    {
LABEL_123:
      if (SBYTE7(v99) < 0)
        operator delete(v98.__vftable);
      if (*(_BYTE *)(a1 + 2008))
        goto LABEL_126;
      goto LABEL_171;
    }
  }
  else
  {
    std::runtime_error::runtime_error(&v117, &v98);
    v118 = v99;
    v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v119 = v100;
    v120 = v101;
    v121 = v102;
    if (v102)
    {
      *((_QWORD *)v101 + 2) = &v120;
      v100 = &v101;
      v101 = 0;
      v102 = 0;
    }
    else
    {
      v119 = &v120;
    }
    v122 = v103;
    v103 = 0uLL;
    v123 = 1;
    std::runtime_error::runtime_error((std::runtime_error *)v93, &v117);
    *(_OWORD *)&v93[16] = v118;
    *(_QWORD *)v93 = off_1E2521330;
    v94 = v119;
    v95 = v120;
    v96 = v121;
    if (v121)
    {
      *((_QWORD *)v120 + 2) = &v95;
      v119 = &v120;
      v120 = 0;
      v121 = 0;
    }
    else
    {
      v94 = &v95;
    }
    v97 = v122;
    v122 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)&v111, (const std::runtime_error *)v93);
    *(_OWORD *)&v112[8] = *(_OWORD *)&v93[16];
    v76 = v95;
    v111 = off_1E2521330;
    v113 = v94;
    v114 = v95;
    v115 = v96;
    if (v96)
    {
      *((_QWORD *)v95 + 2) = &v114;
      v76 = 0;
      v94 = &v95;
      v95 = 0;
      v96 = 0;
    }
    else
    {
      v113 = &v114;
    }
    v116 = v97;
    v97 = 0uLL;
    *(_QWORD *)v93 = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v94, v76);
    MEMORY[0x18D7898AC](v93);
    v5 = v92;
    std::runtime_error::runtime_error(v92, (const std::runtime_error *)&v111);
    *(_OWORD *)(a1 + 1952) = *(_OWORD *)&v112[8];
    *(_QWORD *)(a1 + 1936) = off_1E2521330;
    v77 = v114;
    *(_QWORD *)(a1 + 1968) = v113;
    v78 = a1 + 1976;
    *(_QWORD *)(a1 + 1976) = v77;
    v79 = v115;
    *(_QWORD *)(a1 + 1984) = v115;
    if (v79)
    {
      *((_QWORD *)v77 + 2) = v78;
      v77 = 0;
      v113 = &v114;
      v114 = 0;
      v115 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 1968) = v78;
    }
    *(_OWORD *)(v2 + 1120) = v116;
    v116 = 0uLL;
    *(_BYTE *)(a1 + 2008) = 0;
    v111 = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v113, v77);
    MEMORY[0x18D7898AC](&v111);
    if (v123)
    {
      v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      if (*((_QWORD *)&v122 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v119, v120);
      MEMORY[0x18D7898AC](&v117);
      v5 = v92;
    }
    if (v104)
      goto LABEL_123;
  }
  ((void (*)(std::runtime_error *))v98.~runtime_error)(&v98);
  if (*(_BYTE *)(a1 + 2008))
  {
LABEL_126:
    if (!*(_BYTE *)(a1 + 1248))
      goto LABEL_197;
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v4, v2);
    AMSCore::EncodeHTTPRequestTask::perform((_OWORD *)(a1 + 2088), (uint64_t)v4);
    v65 = *(_OWORD *)(v2 + 1216);
    *(_OWORD *)(a1 + 2144) = v65;
    *(_QWORD *)(a1 + 2088) = 0;
    *(_QWORD *)(a1 + 2096) = 0;
    if (!atomic_load((unint64_t *)(v65 + 416)))
    {
      *(_BYTE *)(a1 + 2160) = 1;
      v67 = (unint64_t *)(*(_QWORD *)(a1 + 2144) + 416);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(a1, v67));
      if (!v68)
        return;
    }
    goto LABEL_2;
  }
LABEL_171:
  std::runtime_error::runtime_error(&v117, v5);
  v118 = *(_OWORD *)(a1 + 1952);
  v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v83 = *(_QWORD *)(a1 + 1976);
  v119 = *(unsigned int ***)(a1 + 1968);
  v120 = (unsigned int *)v83;
  v121 = *(_QWORD *)(a1 + 1984);
  if (v121)
  {
    *(_QWORD *)(v83 + 16) = &v120;
    *(_QWORD *)(a1 + 1968) = a1 + 1976;
    *(_QWORD *)(a1 + 1976) = 0;
    *(_QWORD *)(a1 + 1984) = 0;
  }
  else
  {
    v119 = &v120;
  }
  v122 = *(_OWORD *)(v2 + 1120);
  *(_OWORD *)(v2 + 1120) = 0u;
  v123 = 1;
  std::runtime_error::runtime_error((std::runtime_error *)&v111, &v117);
  *(_OWORD *)&v112[8] = v118;
  v111 = off_1E2521330;
  v113 = v119;
  v114 = v120;
  v115 = v121;
  if (v121)
  {
    *((_QWORD *)v120 + 2) = &v114;
    v119 = &v120;
    v120 = 0;
    v121 = 0;
  }
  else
  {
    v113 = &v114;
  }
  v116 = v122;
  v122 = 0uLL;
  std::runtime_error::runtime_error(&v98, (const std::runtime_error *)&v111);
  v99 = *(_OWORD *)&v112[8];
  v98.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v84 = v114;
  v100 = v113;
  v101 = v114;
  v102 = v115;
  if (v115)
  {
    *((_QWORD *)v114 + 2) = &v101;
    v84 = 0;
    v113 = &v114;
    v114 = 0;
    v115 = 0;
  }
  else
  {
    v100 = &v101;
  }
  v103 = v116;
  v116 = 0uLL;
  v111 = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v113, v84);
  MEMORY[0x18D7898AC](&v111);
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), &v98);
  v98.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  v5 = v92;
  if (*((_QWORD *)&v103 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v100, v101);
  MEMORY[0x18D7898AC](&v98);
  if (v123)
  {
    v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
    if (*((_QWORD *)&v122 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v119, v120);
    MEMORY[0x18D7898AC](&v117);
  }
  if (*(_BYTE *)(a1 + 2008))
    goto LABEL_193;
LABEL_33:
  ((void (*)(const std::runtime_error *))v5->~runtime_error)(v5);
LABEL_193:
  if (*(_BYTE *)(a1 + 1248))
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2);
  else
    (**(void (***)(uint64_t))v2)(v2);
  *(_QWORD *)(a1 + 472) = v6;
  *(_QWORD *)a1 = 0;
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v3);
}

void sub_18CCCA674(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::UploadMetricsEventTask::`anonymous namespace'::encodeReportingRequest(char *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  char v40;

  if (*(_QWORD *)a1)
  {
    if (a1[2160])
    {
      v2 = *((_QWORD *)a1 + 269);
      if (v2)
      {
        v3 = (unint64_t *)(v2 + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 - 1, v3));
        if (!v4)
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 269);
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 262);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 157);
      if (!a1[2008])
        (**((void (***)(uint64_t))a1 + 242))((uint64_t)(a1 + 1936));
      v9 = (void **)(a1 + 872);
      if (a1[1248])
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v9);
      else
        (*(void (**)(void **))*v9)(v9);
    }
    else
    {
      v10 = *((_QWORD *)a1 + 267);
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 267);
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 60);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 255);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 253);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1632));
    }
  }
  v23 = (char *)*((_QWORD *)a1 + 58);
  if (v23 == a1 + 440)
  {
    v24 = 4;
    v23 = a1 + 440;
  }
  else
  {
    if (!v23)
      goto LABEL_44;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_44:
  if (a1[424])
  {
    if (a1[416])
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)a1 + 51);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 3);
    }
    else
    {
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    }
  }
  v28 = *((_QWORD *)a1 + 265);
  do
  {
    v29 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v30)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v28)
    (*(void (**)(_QWORD))(**((_QWORD **)a1 + 265) + 8))(*((_QWORD *)a1 + 265));
  v31 = *((_QWORD *)a1 + 256);
  if (v31)
  {
    v32 = *((_QWORD *)a1 + 257);
    v33 = (void *)*((_QWORD *)a1 + 256);
    if (v32 != v31)
    {
      do
      {
        v34 = v32 - 32;
        v35 = *(unsigned int *)(v32 - 8);
        if ((_DWORD)v35 != -1)
          ((void (*)(char *, uint64_t))off_1E253D240[v35])(&v40, v32 - 32);
        *(_DWORD *)(v32 - 8) = -1;
        v32 -= 32;
      }
      while (v34 != v31);
      v33 = (void *)*((_QWORD *)a1 + 256);
    }
    *((_QWORD *)a1 + 257) = v31;
    operator delete(v33);
  }
  v36 = *((_QWORD *)a1 + 264);
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1784));
  if (v36)
  {
    v37 = (unint64_t *)(*((_QWORD *)a1 + 264) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 264);
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(a1);
}

std::runtime_error *std::expected<AMSCore::DataBuffer,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  int v4;
  std::runtime_error v5;
  std::runtime_error_vtbl *v6;
  std::runtime_error_vtbl *p_imp;
  const char *imp;
  std::runtime_error_vtbl *v9;
  std::runtime_error_vtbl *v10;
  unsigned int *v11;
  std::runtime_error_vtbl *v12;
  std::runtime_error_vtbl *v13;
  const char *v14;
  std::runtime_error_vtbl *v15;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (LOBYTE(this[4].__imp_.__imp_))
  {
    v4 = SHIBYTE(this[1].__vftable);
    if (LOBYTE(a2[4].__imp_.__imp_))
    {
      if (v4 < 0)
        operator delete(this->__vftable);
      v5 = *a2;
      this[1].__vftable = a2[1].__vftable;
      *this = v5;
      HIBYTE(a2[1].__vftable) = 0;
      LOBYTE(a2->__vftable) = 0;
    }
    else
    {
      if (v4 < 0)
        operator delete(this->__vftable);
      std::runtime_error::runtime_error(this, a2);
      this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
      this[1] = a2[1];
      this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      this[2].__vftable = a2[2].__vftable;
      p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
      imp = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = imp;
      v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
      v10 = a2[3].__vftable;
      this[3].__vftable = v10;
      if (v10)
      {
        *((_QWORD *)imp + 2) = v9;
        a2[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = v9;
      }
      *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      LOBYTE(this[4].__imp_.__imp_) = 0;
    }
  }
  else if (LOBYTE(a2[4].__imp_.__imp_))
  {
    ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    v6 = a2[1].__vftable;
    *this = *a2;
    this[1].__vftable = v6;
    a2->__imp_.__imp_ = 0;
    a2[1].__vftable = 0;
    a2->__vftable = 0;
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    std::runtime_error::operator=(this, a2);
    v12 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v11 = (unsigned int *)this[2].__imp_.__imp_;
    this[1] = a2[1];
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&this[2], v11);
    this[2].__vftable = a2[2].__vftable;
    v13 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v14 = a2[2].__imp_.__imp_;
    this[2].__imp_.__imp_ = v14;
    v15 = a2[3].__vftable;
    this[3].__vftable = v15;
    if (v15)
    {
      *((_QWORD *)v14 + 2) = v12;
      a2[2].__vftable = v13;
      v13->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v12;
    }
    v17 = *(_OWORD *)&a2[3].__imp_.__imp_;
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    v18 = (std::__shared_weak_count *)this[4].__vftable;
    *(_OWORD *)&this[3].__imp_.__imp_ = v17;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  return this;
}

void AMSCore::UploadMetricsEventTask::`anonymous namespace'::getReportingURL(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  AMSCore::URL *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = __p + 200;
  v3 = (char *)*((_QWORD *)__p + 28);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[184])
  {
    v5 = (AMSCore::URL *)(__p + 24);
    if (__p[176])
      AMSCore::URL::~URL(v5);
    else
      (**(void (***)(AMSCore::URL *))v5)(v5);
  }
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (__p[400])
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 248));
  if (__p[583] < 0)
    operator delete(*((void **)__p + 70));
  operator delete(__p);
}

void AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEE7Promise17get_return_ob"
                     "jectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEE7Promise17ge"
                                "t_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_BYTE *AMSCore::UploadMetricsEventTask::`anonymous namespace'::getAccount(_BYTE *result)
{
  _BYTE *v1;
  std::runtime_error *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  void **v9;
  const std::runtime_error *v10;
  char v11;
  std::runtime_error_vtbl *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::runtime_error_vtbl *v15;
  uint64_t v16;
  const std::runtime_error *v17;
  char v18;
  std::runtime_error_vtbl *v19;
  _BYTE *v20;
  _QWORD *v21;
  std::runtime_error_vtbl *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error_vtbl *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *imp;
  unint64_t *v48;
  unint64_t v49;
  unsigned int *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  std::runtime_error_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _BYTE *v77;
  void **v78;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error v81;
  __int128 v82;
  unsigned int **v83;
  unsigned int *v84;
  unsigned int *v85;
  __int128 v86;
  std::runtime_error v87;
  __int128 v88;
  unsigned int **v89;
  unsigned int *v90;
  unsigned int *v91;
  __int128 v92;
  char v93;
  std::runtime_error v94;
  __int128 v95;
  unsigned int **v96;
  unsigned int *v97[2];
  __int128 v98;

  v1 = result;
  v2 = (std::runtime_error *)(result + 152);
  v3 = (std::runtime_error *)(result + 232);
  v4 = (const std::runtime_error *)(result + 312);
  v5 = result + 544;
  v6 = result + 560;
  v7 = result + 16;
  if (!result[607])
  {
    v16 = *(_QWORD *)v6;
    if (!*(_BYTE *)(*(_QWORD *)v6 + 88))
      goto LABEL_123;
    v9 = (void **)(result + 520);
    v17 = (const std::runtime_error *)(v16 + 8);
    v18 = *(_BYTE *)(v16 + 80);
    if (v18)
    {
      v19 = v17->__vftable;
      v17->__vftable = 0;
      *((_QWORD *)result + 39) = v19;
      v20 = result + 384;
      result[384] = 1;
      *((_QWORD *)result + 19) = v19;
      if (v19)
      {
        v21 = (_QWORD *)operator new();
        v22 = v4->__vftable;
        *v21 = &off_1E2523180;
        v21[1] = 0;
        v21[2] = 0;
        v21[3] = v22;
      }
      else
      {
        v21 = 0;
      }
      *((_QWORD *)v1 + 20) = v21;
      *((_QWORD *)v1 + 39) = 0;
    }
    else
    {
      v78 = (void **)(result + 520);
      v80 = (std::runtime_error *)(result + 232);
      v27 = result + 16;
      std::runtime_error::runtime_error((std::runtime_error *)(result + 312), v17);
      *(_OWORD *)(v1 + 328) = *(_OWORD *)(v16 + 24);
      *((_QWORD *)v1 + 39) = off_1E2521330;
      v28 = (_QWORD *)(v16 + 48);
      v29 = *(_QWORD *)(v16 + 48);
      v30 = v1 + 352;
      *((_QWORD *)v1 + 43) = *(_QWORD *)(v16 + 40);
      *((_QWORD *)v1 + 44) = v29;
      v31 = *(_QWORD *)(v16 + 56);
      *((_QWORD *)v1 + 45) = v31;
      if (v31)
      {
        *(_QWORD *)(v29 + 16) = v30;
        *(_QWORD *)(v16 + 40) = v28;
        *v28 = 0;
        *(_QWORD *)(v16 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v1 + 43) = v30;
      }
      *((_OWORD *)v1 + 23) = *(_OWORD *)(v16 + 64);
      *(_QWORD *)(v16 + 64) = 0;
      *(_QWORD *)(v16 + 72) = 0;
      v20 = v1 + 384;
      v1[384] = 0;
      std::runtime_error::runtime_error(v2, v4);
      v63 = *(_OWORD *)(v1 + 328);
      v64 = *((_QWORD *)v1 + 44);
      *((_QWORD *)v1 + 24) = v64;
      v65 = v1 + 192;
      *(_OWORD *)(v1 + 168) = v63;
      *((_QWORD *)v1 + 19) = off_1E2521330;
      *((_QWORD *)v1 + 23) = *((_QWORD *)v1 + 43);
      v66 = *((_QWORD *)v1 + 45);
      *((_QWORD *)v1 + 25) = v66;
      if (v66)
      {
        *(_QWORD *)(v64 + 16) = v65;
        *((_QWORD *)v1 + 43) = v30;
        *v30 = 0;
        *((_QWORD *)v1 + 45) = 0;
      }
      else
      {
        *((_QWORD *)v1 + 23) = v65;
      }
      v7 = v27;
      v9 = v78;
      v3 = v80;
      *((_OWORD *)v1 + 13) = *((_OWORD *)v1 + 23);
      *((_QWORD *)v1 + 46) = 0;
      *((_QWORD *)v1 + 47) = 0;
    }
    v1[224] = v18;
    std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v3, v2);
    if (v1[224])
    {
      v67 = (std::__shared_weak_count *)*((_QWORD *)v1 + 20);
      if (v67)
      {
        p_shared_owners = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(p_shared_owners);
        while (__stlxr(v69 - 1, p_shared_owners));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
    }
    v70 = v4->__vftable;
    if (*v20)
    {
      v4->__vftable = 0;
      if (v70)
        (*((void (**)(std::runtime_error_vtbl *))v70->~runtime_error + 1))(v70);
      v71 = (std::__shared_weak_count *)*((_QWORD *)v1 + 71);
      if (!v71)
      {
LABEL_115:
        v74 = (std::__shared_weak_count *)*((_QWORD *)v1 + 69);
        if (!v74)
          goto LABEL_119;
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
          if (((char)v1[543] & 0x80000000) == 0)
            goto LABEL_49;
        }
        else
        {
LABEL_119:
          if (((char)v1[543] & 0x80000000) == 0)
            goto LABEL_49;
        }
LABEL_48:
        operator delete(*v9);
        goto LABEL_49;
      }
    }
    else
    {
      ((void (*)(const std::runtime_error *))v70->~runtime_error)(v4);
      v71 = (std::__shared_weak_count *)*((_QWORD *)v1 + 71);
      if (!v71)
        goto LABEL_115;
    }
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    goto LABEL_115;
  }
  v8 = *(_QWORD *)v5;
  if (*(_BYTE *)(*(_QWORD *)v5 + 88))
  {
    v9 = (void **)(result + 456);
    v10 = (const std::runtime_error *)(v8 + 8);
    v11 = *(_BYTE *)(v8 + 80);
    if (v11)
    {
      v12 = v10->__vftable;
      v10->__vftable = 0;
      *((_QWORD *)result + 39) = v12;
      v13 = result + 384;
      result[384] = 1;
      *((_QWORD *)result + 19) = v12;
      if (v12)
      {
        v14 = (_QWORD *)operator new();
        v15 = v4->__vftable;
        *v14 = &off_1E2523180;
        v14[1] = 0;
        v14[2] = 0;
        v14[3] = v15;
      }
      else
      {
        v14 = 0;
      }
      *((_QWORD *)v1 + 20) = v14;
      *((_QWORD *)v1 + 39) = 0;
    }
    else
    {
      v77 = result + 16;
      v79 = (std::runtime_error *)(result + 232);
      std::runtime_error::runtime_error((std::runtime_error *)(result + 312), v10);
      *(_OWORD *)(v1 + 328) = *(_OWORD *)(v8 + 24);
      *((_QWORD *)v1 + 39) = off_1E2521330;
      v23 = (_QWORD *)(v8 + 48);
      v24 = *(_QWORD *)(v8 + 48);
      v25 = v1 + 352;
      *((_QWORD *)v1 + 43) = *(_QWORD *)(v8 + 40);
      *((_QWORD *)v1 + 44) = v24;
      v26 = *(_QWORD *)(v8 + 56);
      *((_QWORD *)v1 + 45) = v26;
      if (v26)
      {
        *(_QWORD *)(v24 + 16) = v25;
        *(_QWORD *)(v8 + 40) = v23;
        *v23 = 0;
        *(_QWORD *)(v8 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v1 + 43) = v25;
      }
      *((_OWORD *)v1 + 23) = *(_OWORD *)(v8 + 64);
      *(_QWORD *)(v8 + 64) = 0;
      *(_QWORD *)(v8 + 72) = 0;
      v13 = v1 + 384;
      v1[384] = 0;
      std::runtime_error::runtime_error(v2, v4);
      v32 = *(_OWORD *)(v1 + 328);
      v33 = *((_QWORD *)v1 + 44);
      *((_QWORD *)v1 + 24) = v33;
      v34 = v1 + 192;
      *(_OWORD *)(v1 + 168) = v32;
      *((_QWORD *)v1 + 19) = off_1E2521330;
      *((_QWORD *)v1 + 23) = *((_QWORD *)v1 + 43);
      v35 = *((_QWORD *)v1 + 45);
      *((_QWORD *)v1 + 25) = v35;
      if (v35)
      {
        *(_QWORD *)(v33 + 16) = v34;
        *((_QWORD *)v1 + 43) = v25;
        *v25 = 0;
        *((_QWORD *)v1 + 45) = 0;
      }
      else
      {
        *((_QWORD *)v1 + 23) = v34;
      }
      v3 = v79;
      *((_OWORD *)v1 + 13) = *((_OWORD *)v1 + 23);
      *((_QWORD *)v1 + 46) = 0;
      *((_QWORD *)v1 + 47) = 0;
      v7 = v77;
    }
    v1[224] = v11;
    std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v3, v2);
    if (v1[224])
    {
      v36 = (std::__shared_weak_count *)*((_QWORD *)v1 + 20);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
    }
    v39 = v4->__vftable;
    if (*v13)
    {
      v4->__vftable = 0;
      if (v39)
        (*((void (**)(std::runtime_error_vtbl *))v39->~runtime_error + 1))(v39);
      v40 = (std::__shared_weak_count *)*((_QWORD *)v1 + 69);
      if (!v40)
      {
LABEL_40:
        v43 = (std::__shared_weak_count *)*((_QWORD *)v1 + 71);
        if (!v43)
          goto LABEL_44;
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
          if (((char)v1[519] & 0x80000000) == 0)
            goto LABEL_46;
        }
        else
        {
LABEL_44:
          if (((char)v1[519] & 0x80000000) == 0)
          {
LABEL_46:
            if (v1[480] && (char)v1[479] < 0)
              goto LABEL_48;
LABEL_49:
            if (v1[304])
            {
              if (!v3->__vftable)
              {
                AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v87);
                AMSCore::Logger::log<char [55],AMSCore::AccountIdentity>((uint64_t)v87.__vftable, (uint64_t)(v1 + 392));
                imp = (std::__shared_weak_count *)v87.__imp_.__imp_;
                if (v87.__imp_.__imp_)
                {
                  v48 = (unint64_t *)(v87.__imp_.__imp_ + 8);
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
                    std::__shared_weak_count::__release_weak(imp);
                  }
                }
              }
              std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), v3);
            }
            else
            {
              std::runtime_error::runtime_error(&v87, v3);
              v88 = *(_OWORD *)(v1 + 248);
              v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v46 = *((_QWORD *)v1 + 34);
              v89 = (unsigned int **)*((_QWORD *)v1 + 33);
              v90 = (unsigned int *)v46;
              v91 = (unsigned int *)*((_QWORD *)v1 + 35);
              if (v91)
              {
                *(_QWORD *)(v46 + 16) = &v90;
                *((_QWORD *)v1 + 33) = v1 + 272;
                *((_QWORD *)v1 + 34) = 0;
                *((_QWORD *)v1 + 35) = 0;
              }
              else
              {
                v89 = &v90;
              }
              v92 = *((_OWORD *)v1 + 18);
              *((_QWORD *)v1 + 36) = 0;
              *((_QWORD *)v1 + 37) = 0;
              v93 = 1;
              std::runtime_error::runtime_error(&v81, &v87);
              v82 = v88;
              v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v83 = v89;
              v84 = v90;
              v85 = v91;
              if (v91)
              {
                *((_QWORD *)v90 + 2) = &v84;
                v89 = &v90;
                v90 = 0;
                v91 = 0;
              }
              else
              {
                v83 = &v84;
              }
              v86 = v92;
              v92 = 0uLL;
              std::runtime_error::runtime_error(&v94, &v81);
              v95 = v82;
              v50 = v84;
              v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v96 = v83;
              v97[0] = v84;
              v97[1] = v85;
              if (v85)
              {
                *((_QWORD *)v84 + 2) = v97;
                v50 = 0;
                v83 = &v84;
                v84 = 0;
                v85 = 0;
              }
              else
              {
                v96 = v97;
              }
              v98 = v86;
              v86 = 0uLL;
              v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, v50);
              MEMORY[0x18D7898AC](&v81);
              std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), &v94);
              v94.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v51 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
              if (*((_QWORD *)&v98 + 1))
              {
                v52 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v96, v97[0]);
              MEMORY[0x18D7898AC](&v94);
              if (v93)
              {
                v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v54 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
                if (*((_QWORD *)&v92 + 1))
                {
                  v55 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v89, v90);
                MEMORY[0x18D7898AC](&v87);
              }
            }
            v57 = (std::__shared_weak_count *)*((_QWORD *)v1 + 73);
            if (!v57)
              goto LABEL_126;
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
              if (v1[304])
              {
LABEL_85:
                v60 = (std::__shared_weak_count *)*((_QWORD *)v1 + 30);
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                goto LABEL_92;
              }
            }
            else
            {
LABEL_126:
              if (v1[304])
                goto LABEL_85;
            }
            ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
LABEL_92:
            *((_QWORD *)v1 + 19) = v7;
            *(_QWORD *)v1 = 0;
            return AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
          }
        }
        operator delete(*((void **)v1 + 62));
        goto LABEL_46;
      }
    }
    else
    {
      ((void (*)(const std::runtime_error *))v39->~runtime_error)(v4);
      v40 = (std::__shared_weak_count *)*((_QWORD *)v1 + 69);
      if (!v40)
        goto LABEL_40;
    }
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    goto LABEL_40;
  }
LABEL_123:
  __break(1u);
  return result;
}

void sub_18CCCB9C8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v9;

  v9 = *v4;
  if (*v7)
  {
    *v4 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    (*(void (**)(uint64_t *))v9)(v4);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v6);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v5);
  if (*(char *)(v1 + 543) < 0)
    operator delete(*v3);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1 + 576);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v2);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCCBA9C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCCB7F4);
}

void AMSCore::UploadMetricsEventTask::`anonymous namespace'::getAccount(char *__p)
{
  void (***v2)(_QWORD);
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;

  v2 = (void (***)(_QWORD))(__p + 232);
  if (!*(_QWORD *)__p)
    goto LABEL_42;
  if (__p[607])
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 69);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 71);
    if (!v6)
      goto LABEL_12;
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((__p[519] & 0x80000000) == 0)
        goto LABEL_14;
    }
    else
    {
LABEL_12:
      if ((__p[519] & 0x80000000) == 0)
      {
LABEL_14:
        if (__p[480] && __p[479] < 0)
        {
          v9 = (void **)(__p + 456);
LABEL_29:
          operator delete(*v9);
          goto LABEL_30;
        }
        goto LABEL_30;
      }
    }
    operator delete(*((void **)__p + 62));
    goto LABEL_14;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 71);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 69);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p[543] < 0)
  {
    v9 = (void **)(__p + 520);
    goto LABEL_29;
  }
LABEL_30:
  v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 73);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (__p[304])
        goto LABEL_35;
LABEL_41:
      (**v2)(v2);
      goto LABEL_42;
    }
  }
  if (!__p[304])
    goto LABEL_41;
LABEL_35:
  v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 30);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_42:
  v22 = (char *)*((_QWORD *)__p + 18);
  if (v22 == __p + 120)
  {
    v23 = 4;
    v22 = __p + 120;
  }
  else
  {
    if (!v22)
      goto LABEL_47;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_47:
  if (__p[104])
  {
    if (__p[96])
    {
      v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 4);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  v27 = __p[608];
  do
  {
    v28 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v29)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if ((v27 & 0x80000000) == 0)
  {
    if ((__p[455] & 0x80000000) == 0)
      goto LABEL_61;
LABEL_64:
    operator delete(*((void **)__p + 54));
    if (!__p[416])
      goto LABEL_67;
    goto LABEL_65;
  }
  operator delete(*((void **)__p + 74));
  if (__p[455] < 0)
    goto LABEL_64;
LABEL_61:
  if (!__p[416])
    goto LABEL_67;
LABEL_65:
  if (__p[415] < 0)
    operator delete(*((void **)__p + 49));
LABEL_67:
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [55],AMSCore::AccountIdentity>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"The event had an unknown account identity. identity = ", 54);
    AMSCore::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 4;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "metrics", 7, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CCCC004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::UploadMetricsEventTask::internal::performMultiple(unint64_t a1)
{
  unint64_t v2;
  std::runtime_error *v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  void **p_data;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  const std::runtime_error *v11;
  char v12;
  const char **v13;
  std::__libcpp_refstring *p_imp;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const std::runtime_error *v19;
  std::runtime_error_vtbl *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  std::string::size_type v47;
  const std::string::value_type *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  char *v51;
  char *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  std::string::size_type v69;
  const std::string::value_type *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  const std::runtime_error *v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  std::string *v144;
  unint64_t v145;
  unint64_t v146;
  std::string *v147;
  std::runtime_error v148;
  __int128 v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;

  v2 = a1 + 152;
  v3 = (std::runtime_error *)(a1 + 504);
  v4 = (uint64_t *)(a1 + 712);
  v5 = (uint64_t *)(a1 + 912);
  v146 = a1 + 16;
  v147 = (std::string *)(a1 + 760);
  v6 = *(unsigned __int8 *)(a1 + 1087);
  if (v6 == 2)
    goto LABEL_106;
  v145 = a1 + 1032;
  p_data = (void **)(a1 + 808);
  v8 = (_QWORD *)(a1 + 880);
  v9 = (_DWORD *)(a1 + 1080);
  if (v6 == 1)
    goto LABEL_71;
  v144 = (std::string *)(a1 + 808);
  v10 = *(_QWORD *)(a1 + 1000);
  if (!*(_BYTE *)(v10 + 88))
    goto LABEL_225;
  v11 = (const std::runtime_error *)(v10 + 8);
  v12 = *(_BYTE *)(v10 + 80);
  if (v12)
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(v10 + 8);
    v13 = (const char **)(a1 + 160);
    p_imp = (std::__libcpp_refstring *)(v10 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v11);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v10 + 24);
    v15 = (_QWORD *)(v10 + 48);
    v16 = *(_QWORD *)(v10 + 48);
    *(_QWORD *)(a1 + 192) = v16;
    v17 = a1 + 192;
    *(_QWORD *)(a1 + 152) = off_1E2521330;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(v10 + 40);
    v18 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(a1 + 200) = v18;
    if (v18)
    {
      *(_QWORD *)(v16 + 16) = v17;
      *(_QWORD *)(v10 + 40) = v15;
      *v15 = 0;
      *(_QWORD *)(v10 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 184) = v17;
    }
    v19 = *(const std::runtime_error **)(a1 + 1000);
    v20 = v19[4].__vftable;
    v11 = v19 + 4;
    *(_QWORD *)(a1 + 208) = v20;
    v13 = (const char **)(a1 + 216);
    p_imp = &v11->__imp_;
  }
  *v13 = p_imp->__imp_;
  v11->__vftable = 0;
  v11->__imp_.__imp_ = 0;
  *(_BYTE *)(a1 + 224) = v12;
  v21 = *(_QWORD *)(a1 + 1008);
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      v24 = *(std::__shared_weak_count **)(a1 + 1008);
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v25 = *(std::__shared_weak_count **)(a1 + 872);
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if ((*(char *)(a1 + 759) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  if (*(char *)(a1 + 759) < 0)
LABEL_20:
    operator delete(*(void **)(a1 + 736));
LABEL_21:
  v28 = *(std::__shared_weak_count **)(a1 + 856);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if ((*(char *)(a1 + 647) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  if (*(char *)(a1 + 647) < 0)
LABEL_26:
    operator delete(*(void **)(a1 + 624));
LABEL_27:
  if (*(_BYTE *)(a1 + 608) && *(char *)(a1 + 607) < 0)
    operator delete(*(void **)(a1 + 584));
  if (*(_BYTE *)(a1 + 224) && (v31 = *(_QWORD *)v2) != 0)
  {
    v32 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(a1 + 880) = v31;
    v33 = *(std::__shared_weak_count **)(a1 + 888);
    *(_QWORD *)(a1 + 888) = v32;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = 0;
    v37 = 1;
    if (!*(_BYTE *)(a1 + 224))
    {
LABEL_38:
      (**(void (***)(unint64_t))v2)(v2);
      goto LABEL_56;
    }
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::AccountsErrorCode,char const(&)[44]>((uint64_t)&v148, 0x64u);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v148);
    v38 = v149;
    v40 = v150;
    v39 = v151;
    *(_QWORD *)(a1 + 64) = v151;
    v41 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v38;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v40;
    v42 = v152;
    *(_QWORD *)(a1 + 72) = v152;
    if (v42)
    {
      *(_QWORD *)(v39 + 16) = v41;
      v150 = &v151;
      v151 = 0;
      v152 = 0;
      v39 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v41;
    }
    *(_OWORD *)(a1 + 80) = v153;
    v153 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v148.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v150, (unsigned int *)v39);
    MEMORY[0x18D7898AC](&v148);
    v37 = 0;
    v36 = 3;
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_38;
  }
  v43 = *(std::__shared_weak_count **)(a1 + 160);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
LABEL_56:
  if (*(char *)(a1 + 567) < 0)
    operator delete(*(void **)(a1 + 544));
  if (*(_BYTE *)(a1 + 528) && *(char *)(a1 + 527) < 0)
    operator delete(v3->__vftable);
  if ((v37 & 1) == 0)
  {
    v49 = *(_QWORD *)(a1 + 992);
    v50 = *(std::__shared_weak_count **)(a1 + 968);
    v51 = *(char **)(a1 + 944);
    v52 = *(char **)(a1 + 936);
    v53 = *(std::__shared_weak_count **)(a1 + 888);
    if (!v53)
      goto LABEL_175;
LABEL_172:
    v124 = (unint64_t *)&v53->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      if (v36 == 3)
        goto LABEL_176;
      goto LABEL_178;
    }
LABEL_175:
    if (v36 == 3)
    {
LABEL_176:
      *(_QWORD *)(a1 + 1072) = v52;
      *(_QWORD *)(a1 + 1064) = v51;
      *(_QWORD *)(a1 + 1056) = v50;
      *(_QWORD *)(a1 + 1048) = v49;
      *(_QWORD *)(a1 + 152) = v146;
      *(_QWORD *)a1 = 0;
      AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)v2);
      return;
    }
LABEL_178:
    v126 = *(_QWORD **)(a1 + 144);
    if (v126 == (_QWORD *)(a1 + 120))
    {
      v127 = 4;
      v126 = (_QWORD *)(a1 + 120);
    }
    else
    {
      if (!v126)
      {
LABEL_185:
        if (*(_BYTE *)(a1 + 104) && !*(_BYTE *)(a1 + 96))
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        do
        {
          v128 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
        if (!v129)
          MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        v130 = *(_QWORD *)(a1 + 984);
        if (v130)
        {
          v131 = (unint64_t *)(v130 + 8);
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            v133 = *(std::__shared_weak_count **)(a1 + 984);
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        if (v50)
        {
          v134 = (unint64_t *)&v50->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v136 = *(std::__shared_weak_count **)(a1 + 704);
        if (v136)
        {
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        v139 = *(std::__shared_weak_count **)(a1 + 688);
        if (!v139)
          goto LABEL_212;
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
          if (v52)
            goto LABEL_213;
        }
        else
        {
LABEL_212:
          if (v52)
          {
LABEL_213:
            if (v51 != v52)
            {
              do
              {
                v142 = v51 - 32;
                v143 = *((unsigned int *)v51 - 2);
                if ((_DWORD)v143 != -1)
                  ((void (*)(std::runtime_error *, char *))off_1E253D240[v143])(&v148, v51 - 32);
                *((_DWORD *)v51 - 2) = -1;
                v51 -= 32;
              }
              while (v142 != v52);
            }
            operator delete(v52);
          }
        }
        if (*(char *)(a1 + 1088) < 0)
          operator delete(*(void **)(a1 + 920));
        operator delete((void *)a1);
        return;
      }
      v127 = 5;
    }
    (*(void (**)(void))(*v126 + 8 * v127))();
    goto LABEL_185;
  }
  v46 = *(char *)(a1 + 1088);
  v47 = *(_QWORD *)(a1 + 928);
  v48 = *(const std::string::value_type **)(a1 + 920);
  if (v46 < 0)
  {
    p_data = (void **)&v144->__r_.__value_.__l.__data_;
    std::string::__init_copy_ctor_external(v144, v48, v47);
  }
  else
  {
    *(_QWORD *)(a1 + 808) = v48;
    *(_QWORD *)(a1 + 816) = v47;
    *(_DWORD *)(a1 + 824) = *v9;
    *(_DWORD *)(a1 + 827) = *(_DWORD *)(a1 + 1083);
    *(_BYTE *)(a1 + 831) = v46;
    p_data = (void **)&v144->__r_.__value_.__l.__data_;
  }
  AMSCore::MetricsEventModifierProvider::getOverrideForTopic(v3, *(_QWORD **)(a1 + 976), (uint64_t)p_data);
  v54 = *(_QWORD *)(a1 + 504);
  v55 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 1016) = v54;
  *(_QWORD *)(a1 + 1024) = v55;
  v3->__vftable = 0;
  v3->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v54 + 192)))
  {
    *(_BYTE *)(v145 + 55) = 1;
    v57 = (unint64_t *)(*(_QWORD *)(a1 + 1016) + 192);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(a1, v57));
    if (!v58)
      return;
  }
LABEL_71:
  v59 = *(_QWORD *)(a1 + 1016);
  if (!*(_BYTE *)(v59 + 184))
    goto LABEL_225;
  *(_OWORD *)v2 = *(_OWORD *)(v59 + 8);
  *(_BYTE *)(a1 + 168) = 0;
  v60 = (_OWORD *)(a1 + 168);
  *(_BYTE *)(a1 + 320) = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(a1 + 168, (__int128 *)(v59 + 24));
  v61 = *(_QWORD *)(a1 + 1024);
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      v64 = *(std::__shared_weak_count **)(a1 + 1024);
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v65 = *(std::__shared_weak_count **)(a1 + 512);
  if (!v65)
    goto LABEL_81;
  v66 = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (v67)
  {
LABEL_81:
    if ((*(char *)(a1 + 831) & 0x80000000) == 0)
      goto LABEL_83;
    goto LABEL_82;
  }
  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
  std::__shared_weak_count::__release_weak(v65);
  if (*(char *)(a1 + 831) < 0)
LABEL_82:
    operator delete(*p_data);
LABEL_83:
  v68 = *(char *)(a1 + 1088);
  v69 = *(_QWORD *)(a1 + 928);
  v70 = *(const std::string::value_type **)(a1 + 920);
  if (v68 < 0)
  {
    std::string::__init_copy_ctor_external(v147, v70, v69);
  }
  else
  {
    *(_QWORD *)(a1 + 760) = v70;
    *(_QWORD *)(a1 + 768) = v69;
    *(_DWORD *)(a1 + 776) = *v9;
    *(_DWORD *)(a1 + 779) = *(_DWORD *)(a1 + 1083);
    *(_BYTE *)(a1 + 783) = v68;
  }
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a1 + 936);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a1 + 680);
  v71 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 656) = v71;
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = (_OWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 696);
  v75 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 672) = v75;
  if (v75)
  {
    v76 = (unint64_t *)(v75 + 8);
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a1 + 880);
  *v8 = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *v74 = *(_OWORD *)v2;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  if (*(_BYTE *)(a1 + 320))
  {
    *(_BYTE *)(a1 + 368) = 0;
    if (*(_BYTE *)(a1 + 192))
    {
      *(_OWORD *)(a1 + 344) = *v60;
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      *(_QWORD *)v60 = 0;
      *(_BYTE *)(a1 + 368) = 1;
    }
    *(_BYTE *)(a1 + 376) = 0;
    *(_BYTE *)(a1 + 400) = 0;
    if (*(_BYTE *)(a1 + 224))
    {
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 208) = 0;
      *(_QWORD *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      *(_BYTE *)(a1 + 400) = 1;
    }
    *(_BYTE *)(a1 + 408) = 0;
    *(_BYTE *)(a1 + 432) = 0;
    if (*(_BYTE *)(a1 + 256))
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a1 + 248);
      *(_QWORD *)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
      *(_QWORD *)(a1 + 232) = 0;
      *(_BYTE *)(a1 + 432) = 1;
    }
    *(_DWORD *)(a1 + 440) = *(_DWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 448) = a1 + 448;
    *(_QWORD *)(a1 + 456) = a1 + 448;
    *(_QWORD *)(a1 + 464) = 0;
    v78 = *(_QWORD *)(a1 + 288);
    if (v78)
    {
      v80 = *(_QWORD *)(a1 + 272);
      v79 = *(uint64_t **)(a1 + 280);
      v81 = *v79;
      *(_QWORD *)(v81 + 8) = *(_QWORD *)(v80 + 8);
      **(_QWORD **)(v80 + 8) = v81;
      v82 = *(_QWORD *)(a1 + 448);
      *(_QWORD *)(v82 + 8) = v79;
      *v79 = v82;
      *(_QWORD *)(a1 + 448) = v80;
      *(_QWORD *)(v80 + 8) = a1 + 448;
      *(_QWORD *)(a1 + 464) = v78;
      *(_QWORD *)(a1 + 288) = 0;
    }
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 312);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_BYTE *)(a1 + 496) = 1;
  }
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a1 + 992);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a1 + 960);
  v83 = *(_OWORD *)(a1 + 848);
  *(_OWORD *)v145 = v83;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  if (atomic_load((unint64_t *)(v83 + 96)))
    goto LABEL_106;
  *(_BYTE *)(v145 + 55) = 2;
  v85 = (unint64_t *)(*(_QWORD *)(a1 + 1032) + 96);
  do
    v86 = __ldaxr(v85);
  while (__stlxr(a1, v85));
  if (v86)
  {
LABEL_106:
    v87 = *(_QWORD *)(a1 + 1032);
    if (*(_BYTE *)(v87 + 88))
    {
      v88 = (const std::runtime_error *)(v87 + 8);
      v89 = *(unsigned __int8 *)(v87 + 80);
      if (*(_BYTE *)(v87 + 80))
      {
        LODWORD(v3->__vftable) = v88->__vftable;
      }
      else
      {
        std::runtime_error::runtime_error(v3, v88);
        *(_OWORD *)(a1 + 520) = *(_OWORD *)(v87 + 24);
        *(_QWORD *)(a1 + 504) = off_1E2521330;
        v90 = (_QWORD *)(v87 + 48);
        v91 = *(_QWORD *)(v87 + 48);
        *(_QWORD *)(a1 + 536) = *(_QWORD *)(v87 + 40);
        v92 = a1 + 544;
        *(_QWORD *)(a1 + 544) = v91;
        v93 = *(_QWORD *)(v87 + 56);
        *(_QWORD *)(a1 + 552) = v93;
        if (v93)
        {
          *(_QWORD *)(v91 + 16) = v92;
          *(_QWORD *)(v87 + 40) = v90;
          *v90 = 0;
          *(_QWORD *)(v87 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 536) = v92;
        }
        v94 = *(_QWORD *)(a1 + 1032);
        *(_OWORD *)(a1 + 560) = *(_OWORD *)(v94 + 64);
        *(_QWORD *)(v94 + 64) = 0;
        *(_QWORD *)(v94 + 72) = 0;
      }
      *(_BYTE *)(a1 + 576) = v89;
      if (*(_BYTE *)(a1 + 104))
      {
        if (!*(_BYTE *)(a1 + 96))
        {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          v89 = *(unsigned __int8 *)(a1 + 576);
        }
        *(_BYTE *)(a1 + 104) = 0;
      }
      if (v89)
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 504);
        *(_BYTE *)(a1 + 96) = v89;
        *(_BYTE *)(a1 + 104) = 1;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v3);
        v95 = *(_QWORD *)(a1 + 544);
        *(_QWORD *)(a1 + 64) = v95;
        v96 = a1 + 64;
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 520);
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 536);
        v97 = *(_QWORD *)(a1 + 552);
        *(_QWORD *)(a1 + 72) = v97;
        if (v97)
        {
          *(_QWORD *)(v95 + 16) = v96;
          *(_QWORD *)(a1 + 536) = a1 + 544;
          *(_QWORD *)(a1 + 544) = 0;
          *(_QWORD *)(a1 + 552) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v96;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 560);
        *(_QWORD *)(a1 + 568) = 0;
        *(_QWORD *)(a1 + 560) = 0;
        v98 = *(unsigned __int8 *)(a1 + 576);
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        if (!v98)
          ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
      }
      v99 = *(_QWORD *)(a1 + 1040);
      if (v99)
      {
        v100 = (unint64_t *)(v99 + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          v102 = *(std::__shared_weak_count **)(a1 + 1040);
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v103 = *(std::__shared_weak_count **)(a1 + 856);
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = *(std::__shared_weak_count **)(a1 + 840);
      if (v106)
      {
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = *v5;
      *v5 = 0;
      if (v109)
        (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
      if (*(_BYTE *)(a1 + 496))
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 344));
      v110 = *(std::__shared_weak_count **)(a1 + 904);
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v113 = *(std::__shared_weak_count **)(a1 + 672);
      if (v113)
      {
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v116 = *(std::__shared_weak_count **)(a1 + 656);
      if (!v116)
        goto LABEL_159;
      v117 = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
        v119 = *v4;
        if (!*v4)
          goto LABEL_167;
      }
      else
      {
LABEL_159:
        v119 = *v4;
        if (!*v4)
          goto LABEL_167;
      }
      v120 = *(_QWORD *)(a1 + 720);
      v121 = (void *)v119;
      if (v120 != v119)
      {
        do
        {
          v122 = v120 - 32;
          v123 = *(unsigned int *)(v120 - 8);
          if ((_DWORD)v123 != -1)
            ((void (*)(std::runtime_error *, uint64_t))off_1E253D240[v123])(&v148, v120 - 32);
          *(_DWORD *)(v120 - 8) = -1;
          v120 -= 32;
        }
        while (v122 != v119);
        v121 = (void *)*v4;
      }
      *(_QWORD *)(a1 + 720) = v119;
      operator delete(v121);
LABEL_167:
      if (*(char *)(a1 + 783) < 0)
        operator delete(v147->__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 320))
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 168));
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v36 = 3;
      v53 = *(std::__shared_weak_count **)(a1 + 888);
      if (!v53)
        goto LABEL_175;
      goto LABEL_172;
    }
LABEL_225:
    __break(1u);
  }
}

void sub_18CCCCDC8(void *a1)
{
  uint64_t v1;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCCCE30()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCCCB54);
}

void AMSCore::UploadMetricsEventTask::internal::performMultiple(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char v70;
  char v71;

  if (!*(_QWORD *)__p)
  {
    v10 = (char *)*((_QWORD *)__p + 134);
    v11 = (char *)*((_QWORD *)__p + 133);
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 132);
    v13 = *((_QWORD *)__p + 131);
    goto LABEL_97;
  }
  if (!__p[1087])
  {
    v14 = *((_QWORD *)__p + 126);
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 126);
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)__p + 109);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (__p[759] < 0)
      operator delete(*((void **)__p + 92));
    v21 = (std::__shared_weak_count *)*((_QWORD *)__p + 107);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (__p[647] < 0)
      operator delete(*((void **)__p + 78));
    if (__p[608] && __p[607] < 0)
      operator delete(*((void **)__p + 73));
    if (__p[567] < 0)
      operator delete(*((void **)__p + 68));
    if (__p[528] && __p[527] < 0)
    {
      v9 = (void *)*((_QWORD *)__p + 63);
      goto LABEL_44;
    }
LABEL_45:
    v13 = *((_QWORD *)__p + 124);
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 121);
    v11 = (char *)*((_QWORD *)__p + 118);
    v10 = (char *)*((_QWORD *)__p + 117);
    v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 111);
    if (!v24)
      goto LABEL_97;
    goto LABEL_93;
  }
  if (__p[1087] == 1)
  {
    v2 = *((_QWORD *)__p + 128);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 128);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 64);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (__p[831] < 0)
    {
      v9 = (void *)*((_QWORD *)__p + 101);
LABEL_44:
      operator delete(v9);
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  v25 = *((_QWORD *)__p + 130);
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      v28 = (std::__shared_weak_count *)*((_QWORD *)__p + 130);
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 107);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)__p + 105);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *((_QWORD *)__p + 114);
  *((_QWORD *)__p + 114) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (__p[496])
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 344));
  v36 = (std::__shared_weak_count *)*((_QWORD *)__p + 113);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)__p + 84);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)__p + 82);
  if (!v42)
    goto LABEL_80;
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = (char *)*((_QWORD *)__p + 89);
    if (!v45)
      goto LABEL_88;
  }
  else
  {
LABEL_80:
    v45 = (char *)*((_QWORD *)__p + 89);
    if (!v45)
      goto LABEL_88;
  }
  v46 = (char *)*((_QWORD *)__p + 90);
  v47 = v45;
  if (v46 != v45)
  {
    do
    {
      v48 = v46 - 32;
      v49 = *((unsigned int *)v46 - 2);
      if ((_DWORD)v49 != -1)
        ((void (*)(char *, char *))off_1E253D240[v49])(&v71, v46 - 32);
      *((_DWORD *)v46 - 2) = -1;
      v46 -= 32;
    }
    while (v48 != v45);
    v47 = (char *)*((_QWORD *)__p + 89);
  }
  *((_QWORD *)__p + 90) = v45;
  operator delete(v47);
LABEL_88:
  if (__p[783] < 0)
    operator delete(*((void **)__p + 95));
  if (__p[320])
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 168));
  v13 = 0;
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 111);
  if (v24)
  {
LABEL_93:
    v50 = (unint64_t *)&v24->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_97:
  v52 = (char *)*((_QWORD *)__p + 18);
  if (v52 == __p + 120)
  {
    v53 = 4;
    v52 = __p + 120;
    goto LABEL_101;
  }
  if (v52)
  {
    v53 = 5;
LABEL_101:
    (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v54 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v55 = v54 - 1;
  }
  while (__stlxr(v55, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v55)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v56 = *((_QWORD *)__p + 123);
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      v59 = (std::__shared_weak_count *)*((_QWORD *)__p + 123);
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v12)
  {
    v60 = (unint64_t *)&v12->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)__p + 88);
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)__p + 86);
  if (!v65)
    goto LABEL_129;
  v66 = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    if (!v10)
      goto LABEL_136;
  }
  else
  {
LABEL_129:
    if (!v10)
      goto LABEL_136;
  }
  if (v11 != v10)
  {
    do
    {
      v68 = v11 - 32;
      v69 = *((unsigned int *)v11 - 2);
      if ((_DWORD)v69 != -1)
        ((void (*)(char *, char *))off_1E253D240[v69])(&v70, v11 - 32);
      *((_DWORD *)v11 - 2) = -1;
      v11 -= 32;
    }
    while (v68 != v10);
  }
  operator delete(v10);
LABEL_136:
  if (__p[1088] < 0)
    operator delete(*((void **)__p + 115));
  operator delete(__p);
}

void AMSCore::UploadMetricsEventTask::perform(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::runtime_error *a4@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  std::runtime_error *v10;
  std::string *v11;
  void **v12;
  _QWORD *v13;
  unsigned int v14;
  void (***v15)(uint64_t);
  _QWORD *v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  uint64_t v20;
  void (**v21)(_QWORD);
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  const std::runtime_error *v30;
  char v31;
  const char **v32;
  std::__libcpp_refstring *p_imp;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const std::runtime_error *v38;
  std::runtime_error_vtbl *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error_vtbl *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  char v56;
  __int128 v57;
  unsigned int *v58;
  unsigned int **v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void (***v65)(_QWORD);
  __int128 v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  AMSCore::URL *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  const std::runtime_error *v144;
  char v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  __int128 v181;
  unsigned int *v182;
  unsigned int **v183;
  unint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int *v187;
  unsigned int **v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  int v218;
  _QWORD *v219;
  _QWORD *v220;
  std::runtime_error *v221;
  _QWORD *v222;
  std::runtime_error *v223;
  _OWORD *v224;
  _BYTE *v225;
  uint64_t *v226;
  _QWORD *v227;
  AMSCore::URL *v228[2];
  AMSCore::URL *v229;
  uint64_t *v230;
  std::string *v231;
  std::string *v232;
  uint64_t v233;
  std::runtime_error *v234[2];
  std::runtime_error *v235;
  char *v236;
  std::runtime_error *v237[2];
  _QWORD *v238;
  std::runtime_error *v239;
  char *v240;
  char *v241;
  std::runtime_error v242;
  __int128 v243;
  unsigned int **v244;
  unsigned int *v245;
  uint64_t v246;
  __int128 v247;
  std::runtime_error v248;
  __int128 v249;
  unsigned int **v250;
  unsigned int *v251;
  uint64_t v252;
  __int128 v253;
  std::runtime_error v254;
  __int128 v255;
  unsigned int **v256;
  unsigned int *v257;
  uint64_t v258;
  __int128 v259;
  unsigned __int8 v260;

  v5 = *a1;
  *a1 = 0;
  *(_OWORD *)v237 = *(_OWORD *)a2;
  *(_OWORD *)v234 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)v228 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E2521300;
  v7 = (char *)operator new(0x680uLL);
  v8 = (unint64_t)v7;
  *(_QWORD *)v7 = AMSCore::UploadMetricsEventTask::internal::perform;
  *((_QWORD *)v7 + 1) = AMSCore::UploadMetricsEventTask::internal::perform;
  v9 = (uint64_t)(v7 + 152);
  v224 = v7 + 440;
  v225 = v7 + 1656;
  v10 = (std::runtime_error *)(v7 + 720);
  v236 = v7 + 1072;
  v11 = (std::string *)(v7 + 1152);
  v222 = v7 + 1248;
  v223 = (std::runtime_error *)(v7 + 896);
  v240 = v7 + 1280;
  v241 = v7 + 1128;
  v232 = (std::string *)(v7 + 1328);
  v12 = (void **)(v7 + 1352);
  v230 = (uint64_t *)(v7 + 1304);
  v231 = (std::string *)(v7 + 1376);
  v13 = v7 + 1424;
  *((_QWORD *)v7 + 191) = v5;
  *((_OWORD *)v7 + 76) = *(_OWORD *)v237;
  v219 = v7 + 1472;
  v238 = v7 + 1488;
  *((_OWORD *)v7 + 77) = *(_OWORD *)v234;
  v220 = v7 + 1504;
  v221 = (std::runtime_error *)(v7 + 1440);
  v226 = (uint64_t *)(v7 + 1520);
  v227 = v7 + 1400;
  v233 = (uint64_t)(v7 + 16);
  *((_OWORD *)v7 + 96) = *(_OWORD *)v228;
  *((_QWORD *)v7 + 194) = v6;
  do
    v14 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v14 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v7[24] = 0;
  v15 = (void (***)(uint64_t))(v7 + 24);
  v7[104] = 0;
  *((_QWORD *)v7 + 14) = 0;
  *((_QWORD *)v7 + 18) = 0;
  v16 = std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v254, v233);
  *a4 = v254;
  *v238 = 0;
  v238[1] = 0;
  AMSCore::getValueByKey<BOOL,std::map<std::string,AMSCore::Any> const>((uint64_t)v16, (uint64_t *)(v5 + 72), "anonymous", 9uLL);
  v235 = (std::runtime_error *)v9;
  if (v260)
  {
    if (LOBYTE(v254.__vftable))
      goto LABEL_77;
  }
  else
  {
    ((void (*)(std::runtime_error *))v254.~runtime_error)(&v254);
  }
  *(_BYTE *)(v8 + 1152) = 0;
  *(_BYTE *)(v8 + 1176) = 0;
  if (*(_BYTE *)(v5 + 32))
  {
    if (*(char *)(v5 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
    }
    else
    {
      v17 = *(_OWORD *)(v5 + 8);
      v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v17;
    }
    *(_BYTE *)(v8 + 1176) = 1;
  }
  *(_QWORD *)(v8 + 1184) = *(_QWORD *)(v5 + 40);
  v18 = (void **)(v8 + 1192);
  if (*(char *)(v5 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 1192), *(const std::string::value_type **)(v5 + 48), *(_QWORD *)(v5 + 56));
  }
  else
  {
    v19 = *(_OWORD *)(v5 + 48);
    *(_QWORD *)(v8 + 1208) = *(_QWORD *)(v5 + 64);
    *(_OWORD *)v18 = v19;
  }
  v20 = *(_QWORD *)(v8 + 1216);
  v21 = *(void (***)(_QWORD))(v20 + 56);
  *(_QWORD *)(v8 + 1072) = v21;
  v22 = *(_QWORD *)(v20 + 64);
  *(_QWORD *)(v8 + 1080) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v21 = *(void (***)(_QWORD))v236;
  }
  (*((void (**)(_QWORD))*v21 + 2))(v21);
  v25 = *(_OWORD *)(v8 + 720);
  *((_OWORD *)v241 + 27) = v25;
  v10->__vftable = 0;
  v10->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v25 + 96)))
  {
    *v225 = 0;
    v27 = (unint64_t *)(*(_QWORD *)(v8 + 1560) + 96);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v8, v27));
    if (!v28)
      return;
  }
  v29 = *((_QWORD *)v241 + 54);
  if (!*(_BYTE *)(v29 + 88))
    goto LABEL_324;
  v30 = (const std::runtime_error *)(v29 + 8);
  v31 = *(_BYTE *)(v29 + 80);
  if (v31)
  {
    *(_QWORD *)(v8 + 152) = *(_QWORD *)(v29 + 8);
    v32 = (const char **)(v8 + 160);
    p_imp = (std::__libcpp_refstring *)(v29 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v235, v30);
    *(_OWORD *)(v8 + 168) = *(_OWORD *)(v29 + 24);
    v34 = (_QWORD *)(v29 + 48);
    v35 = *(_QWORD *)(v29 + 48);
    *(_QWORD *)(v8 + 192) = v35;
    v36 = v8 + 192;
    *(_QWORD *)(v8 + 152) = off_1E2521330;
    *(_QWORD *)(v8 + 184) = *(_QWORD *)(v29 + 40);
    v37 = *(_QWORD *)(v29 + 56);
    *(_QWORD *)(v8 + 200) = v37;
    if (v37)
    {
      *(_QWORD *)(v35 + 16) = v36;
      *(_QWORD *)(v29 + 40) = v34;
      *v34 = 0;
      *(_QWORD *)(v29 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v8 + 184) = v36;
    }
    v38 = *(const std::runtime_error **)(v8 + 1560);
    v39 = v38[4].__vftable;
    v30 = v38 + 4;
    *(_QWORD *)(v8 + 208) = v39;
    v32 = (const char **)(v8 + 216);
    p_imp = &v30->__imp_;
  }
  v9 = (uint64_t)v235;
  *v32 = p_imp->__imp_;
  v30->__vftable = 0;
  v30->__imp_.__imp_ = 0;
  *(_BYTE *)(v8 + 224) = v31;
  v40 = *(_QWORD *)(v8 + 1568);
  if (v40)
  {
    v41 = (unint64_t *)(v40 + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      v43 = *(std::__shared_weak_count **)(v8 + 1568);
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v44 = *(std::__shared_weak_count **)(v8 + 728);
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      if ((*(char *)(v8 + 1375) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_40;
    }
  }
  if (*(char *)(v8 + 1375) < 0)
LABEL_40:
    operator delete(*v12);
LABEL_41:
  v47 = *(std::__shared_weak_count **)(v8 + 1080);
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if ((*(char *)(v8 + 1215) & 0x80000000) == 0)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (*(char *)(v8 + 1215) < 0)
LABEL_46:
    operator delete(*v18);
LABEL_47:
  if (*(_BYTE *)(v8 + 1176) && *(char *)(v8 + 1175) < 0)
    operator delete(v11->__r_.__value_.__l.__data_);
  if (*(_BYTE *)(v8 + 224))
  {
    v50 = v235->__vftable;
    if (v235->__vftable)
    {
      v51 = *(_QWORD *)(v8 + 160);
      v235->__vftable = 0;
      v235->__imp_.__imp_ = 0;
      *(_QWORD *)(v8 + 1488) = v50;
      v52 = *(std::__shared_weak_count **)(v8 + 1496);
      *(_QWORD *)(v8 + 1496) = v51;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = 0;
      v56 = 1;
      if (!*(_BYTE *)(v8 + 224))
        goto LABEL_58;
LABEL_72:
      v62 = *(std::__shared_weak_count **)(v8 + 160);
      if (!v62)
        goto LABEL_76;
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
        if ((v56 & 1) == 0)
          goto LABEL_181;
      }
      else
      {
LABEL_76:
        if ((v56 & 1) == 0)
          goto LABEL_181;
      }
      goto LABEL_77;
    }
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::AccountsErrorCode,char const(&)[44]>((uint64_t)&v254, 0x64u);
  if (*(_BYTE *)(v8 + 104))
  {
    if (!*(_BYTE *)(v8 + 96))
      (**v15)(v8 + 24);
    *(_BYTE *)(v8 + 104) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v8 + 24), &v254);
  v57 = v255;
  v59 = v256;
  v58 = v257;
  *(_QWORD *)(v8 + 64) = v257;
  v60 = v8 + 64;
  *(_OWORD *)(v8 + 40) = v57;
  *(_QWORD *)(v8 + 24) = off_1E2521330;
  *(_QWORD *)(v8 + 56) = v59;
  v61 = v258;
  *(_QWORD *)(v8 + 72) = v258;
  if (v61)
  {
    *((_QWORD *)v58 + 2) = v60;
    v256 = &v257;
    v257 = 0;
    v258 = 0;
    v58 = 0;
  }
  else
  {
    *(_QWORD *)(v8 + 56) = v60;
  }
  v9 = (uint64_t)v235;
  *(_OWORD *)(v8 + 80) = v259;
  v259 = 0uLL;
  *(_BYTE *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 104) = 1;
  v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v256, v58);
  MEMORY[0x18D7898AC](&v254);
  v56 = 0;
  v55 = 3;
  if (*(_BYTE *)(v8 + 224))
    goto LABEL_72;
LABEL_58:
  (**(void (***)(uint64_t))v9)(v9);
  if ((v56 & 1) == 0)
  {
LABEL_181:
    v150 = *(_QWORD *)(v8 + 1552);
    v151 = *(_QWORD *)(v8 + 1528);
    v152 = *(std::__shared_weak_count **)(v8 + 1496);
    if (!v152)
      goto LABEL_286;
LABEL_283:
    v202 = (unint64_t *)&v152->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
      if (v55 == 3)
        goto LABEL_287;
      goto LABEL_289;
    }
LABEL_286:
    if (v55 == 3)
    {
LABEL_287:
      *(_QWORD *)(v8 + 1648) = v151;
      *(_QWORD *)(v8 + 1640) = v150;
      *(_QWORD *)(v8 + 152) = v233;
      *(_QWORD *)v8 = 0;
      AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v235);
      return;
    }
LABEL_289:
    v204 = *(_QWORD **)(v8 + 144);
    if (v204 == (_QWORD *)(v8 + 120))
    {
      v205 = 4;
      v204 = (_QWORD *)(v8 + 120);
    }
    else
    {
      if (!v204)
        goto LABEL_294;
      v205 = 5;
    }
    (*(void (**)(void))(*v204 + 8 * v205))();
LABEL_294:
    if (*(_BYTE *)(v8 + 104) && !*(_BYTE *)(v8 + 96))
      (**v15)((uint64_t)v15);
    do
    {
      v206 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
      v207 = v206 - 1;
    }
    while (__stlxr(v207, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
    if (!v207)
      MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
    if (v150)
      (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
    v208 = *(_QWORD *)(v8 + 1544);
    if (v208)
    {
      v209 = (unint64_t *)(v208 + 8);
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        v211 = *(std::__shared_weak_count **)(v8 + 1544);
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
    }
    v212 = *(std::__shared_weak_count **)(v8 + 1240);
    if (v212)
    {
      v213 = (unint64_t *)&v212->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    v215 = *(std::__shared_weak_count **)(v8 + 1224);
    if (v215)
    {
      v216 = (unint64_t *)&v215->__shared_owners_;
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 - 1, v216));
      if (!v217)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
      }
    }
    if (v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
    operator delete((void *)v8);
    return;
  }
LABEL_77:
  AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v254, (uint64_t *)(*(_QWORD *)(v8 + 1528) + 72), "topic", 5uLL);
  v65 = (void (***)(_QWORD))v236;
  if (!v260)
    goto LABEL_324;
  if (SHIBYTE(v254.what) < 0)
  {
    std::string::__init_copy_ctor_external(v231, (const std::string::value_type *)v254.~runtime_error, (std::string::size_type)v254.~runtime_error_0);
  }
  else
  {
    v66 = *(_OWORD *)&v254.~runtime_error;
    v231->__r_.__value_.__r.__words[2] = (std::string::size_type)v254.what;
    *(_OWORD *)&v231->__r_.__value_.__l.__data_ = v66;
  }
  *(_QWORD *)v240 = 0;
  *((_QWORD *)v240 + 1) = 0;
  *((_QWORD *)v240 + 2) = 0;
  std::vector<AMSCore::Any>::reserve((char **)v240, 1uLL);
  v67 = *(_QWORD *)(v8 + 1528);
  *(_QWORD *)(v8 + 1456) = v67;
  if (v67)
  {
    v68 = (_QWORD *)operator new();
    v69 = *(_QWORD *)(v8 + 1528);
    v68[1] = 0;
    v70 = v68 + 1;
    *v68 = &off_1E25231F0;
    v68[2] = 0;
    v68[3] = v69;
    v71 = v8 + 1464;
    *(_QWORD *)(v8 + 1464) = v68;
    *(_QWORD *)(v8 + 1424) = v69;
    v72 = v8 + 1432;
    *(_QWORD *)(v8 + 1432) = v68;
    do
      v73 = __ldxr(v70);
    while (__stxr(v73 + 1, v70));
  }
  else
  {
    v71 = v8 + 1464;
    *(_QWORD *)(v8 + 1464) = 0;
    v72 = v8 + 1432;
    *v13 = 0;
    v13[1] = 0;
  }
  *(_QWORD *)(v8 + 1584) = v71;
  *(_QWORD *)(v8 + 1576) = v72;
  AMSCore::MetricsEventModifierProvider::getOverrideForEvent(v10, *(_QWORD **)(v8 + 1536), (uint64_t)v13);
  v74 = *(_OWORD *)(v8 + 720);
  *((_OWORD *)v241 + 29) = v74;
  v10->__vftable = 0;
  v10->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v74 + 304)))
  {
    *v225 = 1;
    v76 = (unint64_t *)(*(_QWORD *)(v8 + 1592) + 304);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v8, v76));
    if (!v77)
      return;
  }
  AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(v9, *(_QWORD *)(v8 + 1592));
  v78 = *(_QWORD *)(v8 + 1600);
  if (v78)
  {
    v79 = (unint64_t *)(v78 + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      v81 = *(std::__shared_weak_count **)(v8 + 1600);
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v82 = *(std::__shared_weak_count **)(v8 + 728);
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = **(std::__shared_weak_count ***)(v8 + 1576);
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  *v10 = *(std::runtime_error *)(v8 + 256);
  v88 = (AMSCore::URL *)(v8 + 736);
  *(_BYTE *)(v8 + 736) = 0;
  *(_BYTE *)(v8 + 888) = 0;
  if (*(_BYTE *)(v8 + 424))
  {
    AMSCore::URL::URL((std::string *)(v8 + 736), (const AMSCore::URL *)(v8 + 272));
    *(_BYTE *)(v8 + 888) = 1;
  }
  v89 = (_QWORD *)(v8 + 192);
  v90 = *(_QWORD *)(v8 + 192);
  v91 = *(_QWORD *)(v8 + 1456);
  *v224 = *(_OWORD *)v9;
  *(_OWORD *)((char *)v224 + 12) = *(_OWORD *)(v9 + 12);
  v92 = v8 + 480;
  *(_QWORD *)(v8 + 472) = *(_QWORD *)(v8 + 184);
  *(_QWORD *)(v8 + 480) = v90;
  v93 = *(_QWORD *)(v8 + 200);
  *(_QWORD *)(v8 + 488) = v93;
  if (v93)
  {
    *(_QWORD *)(v90 + 16) = v92;
    *(_QWORD *)(v8 + 184) = v89;
    *v89 = 0;
    *(_QWORD *)(v8 + 200) = 0;
  }
  else
  {
    *(_QWORD *)(v8 + 472) = v92;
  }
  v94 = (_QWORD *)(v8 + 216);
  v95 = *(_QWORD *)(v8 + 216);
  v96 = v8 + 504;
  *(_QWORD *)(v8 + 496) = *(_QWORD *)(v8 + 208);
  *(_QWORD *)(v8 + 504) = v95;
  v97 = *(_QWORD *)(v8 + 224);
  *(_QWORD *)(v8 + 512) = v97;
  if (v97)
  {
    *(_QWORD *)(v95 + 16) = v96;
    *(_QWORD *)(v8 + 208) = v94;
    *v94 = 0;
    *(_QWORD *)(v8 + 224) = 0;
  }
  else
  {
    *(_QWORD *)(v8 + 496) = v96;
  }
  v98 = (_QWORD *)(v8 + 240);
  v99 = *(_QWORD *)(v8 + 240);
  v100 = v8 + 528;
  *(_QWORD *)(v8 + 520) = *(_QWORD *)(v8 + 232);
  *(_QWORD *)(v8 + 528) = v99;
  v101 = *(_QWORD *)(v8 + 248);
  *(_QWORD *)(v8 + 536) = v101;
  if (v101)
  {
    *(_QWORD *)(v99 + 16) = v100;
    *(_QWORD *)(v8 + 232) = v98;
    *v98 = 0;
    *(_QWORD *)(v8 + 248) = 0;
  }
  else
  {
    *(_QWORD *)(v8 + 520) = v100;
  }
  *(_OWORD *)(v8 + 544) = *(_OWORD *)(v8 + 256);
  v229 = (AMSCore::URL *)(v8 + 272);
  *(_BYTE *)(v8 + 560) = 0;
  *(_BYTE *)(v8 + 712) = 0;
  if (*(_BYTE *)(v8 + 424))
  {
    *(_BYTE *)(v8 + 584) = 0;
    if (*(_BYTE *)(v8 + 296))
    {
      *(_OWORD *)(v8 + 560) = *(_OWORD *)v229;
      *(_QWORD *)(v8 + 576) = *(_QWORD *)(v8 + 288);
      *(_QWORD *)(v8 + 280) = 0;
      *(_QWORD *)(v8 + 288) = 0;
      *(_QWORD *)v229 = 0;
      *(_BYTE *)(v8 + 584) = 1;
    }
    *(_BYTE *)(v8 + 592) = 0;
    *(_BYTE *)(v8 + 616) = 0;
    if (*(_BYTE *)(v8 + 328))
    {
      *(_OWORD *)(v8 + 592) = *(_OWORD *)(v8 + 304);
      *(_QWORD *)(v8 + 608) = *(_QWORD *)(v8 + 320);
      *(_QWORD *)(v8 + 312) = 0;
      *(_QWORD *)(v8 + 320) = 0;
      *(_QWORD *)(v8 + 304) = 0;
      *(_BYTE *)(v8 + 616) = 1;
    }
    *(_BYTE *)(v8 + 624) = 0;
    *(_BYTE *)(v8 + 648) = 0;
    if (*(_BYTE *)(v8 + 360))
    {
      *(_OWORD *)(v8 + 624) = *(_OWORD *)(v8 + 336);
      *(_QWORD *)(v8 + 640) = *(_QWORD *)(v8 + 352);
      *(_QWORD *)(v8 + 344) = 0;
      *(_QWORD *)(v8 + 352) = 0;
      *(_QWORD *)(v8 + 336) = 0;
      *(_BYTE *)(v8 + 648) = 1;
    }
    *(_DWORD *)(v8 + 656) = *(_DWORD *)(v8 + 368);
    *(_QWORD *)(v8 + 664) = v8 + 664;
    *(_QWORD *)(v8 + 672) = v8 + 664;
    *(_QWORD *)(v8 + 680) = 0;
    v102 = *(_QWORD *)(v8 + 392);
    if (v102)
    {
      v104 = *(_QWORD *)(v8 + 376);
      v103 = *(uint64_t **)(v8 + 384);
      v105 = *v103;
      *(_QWORD *)(v105 + 8) = *(_QWORD *)(v104 + 8);
      **(_QWORD **)(v104 + 8) = v105;
      v106 = *(_QWORD *)(v8 + 664);
      *(_QWORD *)(v106 + 8) = v103;
      *v103 = v106;
      *(_QWORD *)(v8 + 664) = v104;
      *(_QWORD *)(v104 + 8) = v8 + 664;
      *(_QWORD *)(v8 + 680) = v102;
      *(_QWORD *)(v8 + 392) = 0;
    }
    *(_OWORD *)(v8 + 688) = *(_OWORD *)(v8 + 400);
    *(_QWORD *)(v8 + 704) = *(_QWORD *)(v8 + 416);
    *(_QWORD *)(v8 + 408) = 0;
    *(_QWORD *)(v8 + 416) = 0;
    *(_QWORD *)(v8 + 400) = 0;
    *(_BYTE *)(v8 + 712) = 1;
  }
  AMSCore::IMetricsProvider::Event::takeProperties(v236, v91, (uint64_t)v224);
  v107 = *(_OWORD *)(v8 + 1072);
  *((_OWORD *)v241 + 30) = v107;
  *(_QWORD *)v236 = 0;
  *((_QWORD *)v236 + 1) = 0;
  if (!atomic_load((unint64_t *)(v107 + 40)))
  {
    *v225 = 2;
    v109 = (unint64_t *)(*(_QWORD *)(v8 + 1608) + 40);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v8, v109));
    if (!v110)
      return;
  }
  v111 = *((_QWORD *)v241 + 60);
  if (!*(_BYTE *)(v111 + 32))
    goto LABEL_324;
  v112 = (_QWORD *)(v111 + 16);
  v113 = *(_QWORD *)(v111 + 16);
  *(_QWORD *)(v8 + 1400) = *(_QWORD *)(v111 + 8);
  v114 = (_QWORD *)(v8 + 1408);
  *(_QWORD *)(v8 + 1408) = v113;
  v115 = *(_QWORD *)(v111 + 24);
  *(_QWORD *)(v8 + 1416) = v115;
  if (v115)
  {
    *(_QWORD *)(v113 + 16) = v114;
    *(_QWORD *)(v111 + 8) = v112;
    *v112 = 0;
    *(_QWORD *)(v111 + 24) = 0;
    v116 = *(_QWORD *)(v8 + 1616);
    if (!v116)
      goto LABEL_139;
  }
  else
  {
    *v227 = v114;
    v116 = *(_QWORD *)(v8 + 1616);
    if (!v116)
      goto LABEL_139;
  }
  v117 = (unint64_t *)(v116 + 8);
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    v119 = *(std::__shared_weak_count **)(v8 + 1616);
    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
    std::__shared_weak_count::__release_weak(v119);
  }
LABEL_139:
  v120 = *(std::__shared_weak_count **)(v8 + 1080);
  if (v120)
  {
    v121 = (unint64_t *)&v120->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (*(_BYTE *)(v8 + 712))
    AMSCore::URL::~URL((AMSCore::URL *)(v8 + 560));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v8 + 528));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v8 + 504));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v8 + 480));
  v123 = *(_QWORD *)(v8 + 1288);
  if (v123 >= *(_QWORD *)(v8 + 1296))
  {
    v127 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>((char **)v240, v227);
  }
  else
  {
    *(_QWORD *)v123 = *(_QWORD *)(v8 + 1400);
    v124 = *(_QWORD *)(v8 + 1408);
    *(_QWORD *)(v123 + 8) = v124;
    v125 = v123 + 8;
    v126 = *(_QWORD *)(v8 + 1416);
    *(_QWORD *)(v123 + 16) = v126;
    if (v126)
    {
      *(_QWORD *)(v124 + 16) = v125;
      *v227 = v114;
      *v114 = 0;
      *(_QWORD *)(v8 + 1416) = 0;
    }
    else
    {
      *(_QWORD *)v123 = v125;
    }
    *(_DWORD *)(v123 + 24) = 8;
    v127 = (char *)(v123 + 32);
  }
  *(_QWORD *)(v8 + 1288) = v127;
  if (*(char *)(v8 + 1399) < 0)
  {
    std::string::__init_copy_ctor_external(v232, *(const std::string::value_type **)(v8 + 1376), *(_QWORD *)(v8 + 1384));
    v127 = *(char **)(v8 + 1288);
  }
  else
  {
    *(_OWORD *)&v232->__r_.__value_.__l.__data_ = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
    v232->__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
  }
  *(_QWORD *)(v8 + 1304) = *(_QWORD *)(v8 + 1280);
  *(_QWORD *)(v8 + 1312) = v127;
  *(_QWORD *)(v8 + 1320) = *(_QWORD *)(v8 + 1296);
  *((_QWORD *)v240 + 1) = 0;
  *((_QWORD *)v240 + 2) = 0;
  *(_QWORD *)v240 = 0;
  *(_QWORD *)(v8 + 1248) = *(_QWORD *)(v8 + 1216);
  v128 = *(_QWORD *)(v8 + 1224);
  *(_QWORD *)(v8 + 1256) = v128;
  if (v128)
  {
    v129 = (unint64_t *)(v128 + 8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 1, v129));
  }
  *(_QWORD *)(v8 + 1264) = *(_QWORD *)(v8 + 1232);
  v131 = *(_QWORD *)(v8 + 1240);
  *(_QWORD *)(v8 + 1272) = v131;
  if (v131)
  {
    v132 = (unint64_t *)(v131 + 8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
  *(_OWORD *)(v8 + 1472) = *(_OWORD *)(v8 + 1488);
  *v238 = 0;
  v238[1] = 0;
  *v223 = *v10;
  *(_BYTE *)(v8 + 912) = 0;
  *(_BYTE *)(v8 + 1064) = 0;
  if (*(_BYTE *)(v8 + 888))
  {
    *(_BYTE *)(v8 + 936) = 0;
    if (*(_BYTE *)(v8 + 760))
    {
      *(_OWORD *)(v8 + 912) = *(_OWORD *)v88;
      *(_QWORD *)(v8 + 928) = *(_QWORD *)(v8 + 752);
      *(_QWORD *)(v8 + 744) = 0;
      *(_QWORD *)(v8 + 752) = 0;
      *(_QWORD *)v88 = 0;
      *(_BYTE *)(v8 + 936) = 1;
    }
    *(_BYTE *)(v8 + 944) = 0;
    *(_BYTE *)(v8 + 968) = 0;
    if (*(_BYTE *)(v8 + 792))
    {
      *(_OWORD *)(v8 + 944) = *(_OWORD *)(v8 + 768);
      *(_QWORD *)(v8 + 960) = *(_QWORD *)(v8 + 784);
      *(_QWORD *)(v8 + 768) = 0;
      *(_QWORD *)(v8 + 784) = 0;
      *(_QWORD *)(v8 + 776) = 0;
      *(_BYTE *)(v8 + 968) = 1;
    }
    *(_BYTE *)(v8 + 976) = 0;
    *(_BYTE *)(v8 + 1000) = 0;
    if (*(_BYTE *)(v8 + 824))
    {
      *(_OWORD *)(v8 + 976) = *(_OWORD *)(v8 + 800);
      *(_QWORD *)(v8 + 992) = *(_QWORD *)(v8 + 816);
      *(_QWORD *)(v8 + 800) = 0;
      *(_QWORD *)(v8 + 816) = 0;
      *(_QWORD *)(v8 + 808) = 0;
      *(_BYTE *)(v8 + 1000) = 1;
    }
    *(_DWORD *)(v8 + 1008) = *(_DWORD *)(v8 + 832);
    *(_QWORD *)(v8 + 1016) = v8 + 1016;
    *(_QWORD *)(v8 + 1024) = v8 + 1016;
    *(_QWORD *)(v8 + 1032) = 0;
    v134 = *(_QWORD *)(v8 + 856);
    if (v134)
    {
      v135 = *(uint64_t **)(v8 + 848);
      v136 = *(_QWORD *)(v8 + 840);
      v137 = *v135;
      *(_QWORD *)(v137 + 8) = *(_QWORD *)(v136 + 8);
      **(_QWORD **)(v136 + 8) = v137;
      v138 = *(_QWORD *)(v8 + 1016);
      *(_QWORD *)(v138 + 8) = v135;
      *v135 = v138;
      *(_QWORD *)(v8 + 1016) = v136;
      *(_QWORD *)(v136 + 8) = v8 + 1016;
      *(_QWORD *)(v8 + 1032) = v134;
      *(_QWORD *)(v8 + 856) = 0;
    }
    *(_OWORD *)(v8 + 1040) = *(_OWORD *)(v8 + 864);
    *(_QWORD *)(v8 + 1056) = *(_QWORD *)(v8 + 880);
    *(_QWORD *)(v8 + 864) = 0;
    *(_QWORD *)(v8 + 880) = 0;
    *(_QWORD *)(v8 + 872) = 0;
    *(_BYTE *)(v8 + 1064) = 1;
  }
  *(_QWORD *)(v8 + 1520) = *(_QWORD *)(v8 + 1552);
  *v220 = 0;
  v220[1] = 0;
  v139 = *(_OWORD *)(v8 + 1440);
  *((_OWORD *)v241 + 31) = v139;
  v221->__vftable = 0;
  v221->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v139 + 96)))
    goto LABEL_175;
  *v225 = 3;
  v141 = (unint64_t *)(*(_QWORD *)(v8 + 1624) + 96);
  do
    v142 = __ldaxr(v141);
  while (__stlxr(v8, v141));
  if (v142)
  {
LABEL_175:
    v143 = *((_QWORD *)v241 + 62);
    if (*(_BYTE *)(v143 + 88))
    {
      v144 = (const std::runtime_error *)(v143 + 8);
      v145 = *(_BYTE *)(v143 + 80);
      if (v145)
      {
        *(_DWORD *)v236 = v144->__vftable;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)v236, v144);
        *(_OWORD *)(v8 + 1088) = *(_OWORD *)(v143 + 24);
        *(_QWORD *)(v8 + 1072) = off_1E2521330;
        v146 = (_QWORD *)(v143 + 48);
        v147 = *(_QWORD *)(v143 + 48);
        *(_QWORD *)(v8 + 1104) = *(_QWORD *)(v143 + 40);
        v148 = v8 + 1112;
        *(_QWORD *)(v8 + 1112) = v147;
        v149 = *(_QWORD *)(v143 + 56);
        *(_QWORD *)(v8 + 1120) = v149;
        if (v149)
        {
          *(_QWORD *)(v147 + 16) = v148;
          *(_QWORD *)(v143 + 40) = v146;
          *v146 = 0;
          *(_QWORD *)(v143 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v8 + 1104) = v148;
        }
        v153 = *(_QWORD *)(v8 + 1624);
        *(_OWORD *)v241 = *(_OWORD *)(v153 + 64);
        *(_QWORD *)(v153 + 64) = 0;
        *(_QWORD *)(v153 + 72) = 0;
      }
      *(_BYTE *)(v8 + 1144) = v145;
      v154 = *(_QWORD *)(v8 + 1632);
      if (v154)
      {
        v155 = (unint64_t *)(v154 + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          v157 = *(std::__shared_weak_count **)(v8 + 1632);
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v158 = *(std::__shared_weak_count **)(v8 + 1448);
      if (v158)
      {
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      v161 = *(std::__shared_weak_count **)(v8 + 1512);
      if (v161)
      {
        v162 = (unint64_t *)&v161->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      v164 = *v226;
      *v226 = 0;
      if (v164)
        (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
      if (*(_BYTE *)(v8 + 1064))
        AMSCore::URL::~URL((AMSCore::URL *)(v8 + 912));
      v165 = *(std::__shared_weak_count **)(v8 + 1480);
      if (v165)
      {
        v166 = (unint64_t *)&v165->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      v168 = *(std::__shared_weak_count **)(v8 + 1272);
      if (v168)
      {
        v169 = (unint64_t *)&v168->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v171 = *(std::__shared_weak_count **)(v8 + 1256);
      if (v171)
      {
        v172 = (unint64_t *)&v171->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v174 = *v230;
      if (*v230)
      {
        v175 = *(_QWORD *)(v8 + 1312);
        v176 = (void *)*v230;
        if (v175 != v174)
        {
          do
          {
            v177 = v175 - 32;
            v178 = *(unsigned int *)(v175 - 8);
            if ((_DWORD)v178 != -1)
              ((void (*)(std::runtime_error *, uint64_t))off_1E253D240[v178])(&v254, v175 - 32);
            *(_DWORD *)(v175 - 8) = -1;
            v175 -= 32;
          }
          while (v177 != v174);
          v176 = (void *)*v230;
        }
        *(_QWORD *)(v8 + 1312) = v174;
        operator delete(v176);
      }
      if (*(char *)(v8 + 1351) < 0)
      {
        operator delete(v232->__r_.__value_.__l.__data_);
        if (*(_BYTE *)(v8 + 1144))
        {
LABEL_229:
          v260 = 1;
          if (!*(_BYTE *)(v8 + 104) || *(_BYTE *)(v8 + 96))
          {
            LOBYTE(v179) = 1;
LABEL_232:
            *(_BYTE *)(v8 + 96) = v179;
            *(_BYTE *)(v8 + 104) = 1;
            goto LABEL_261;
          }
          (**(void (***)(uint64_t))(v8 + 24))(v8 + 24);
          v179 = v260;
          *(_BYTE *)(v8 + 104) = 0;
          if (v179)
            goto LABEL_232;
          std::runtime_error::runtime_error((std::runtime_error *)(v8 + 24), &v254);
          v181 = v255;
          v183 = v256;
          v182 = v257;
          *(_QWORD *)(v8 + 64) = v257;
          v184 = v8 + 64;
          *(_OWORD *)(v8 + 40) = v181;
          *(_QWORD *)(v8 + 24) = off_1E2521330;
          *(_QWORD *)(v8 + 56) = v183;
          v185 = v258;
          *(_QWORD *)(v8 + 72) = v258;
          if (v185)
          {
            *((_QWORD *)v182 + 2) = v184;
            v256 = &v257;
            v257 = 0;
            v258 = 0;
          }
          else
          {
            *(_QWORD *)(v8 + 56) = v184;
          }
          *(_OWORD *)(v8 + 80) = v259;
          v259 = 0uLL;
          v218 = v260;
          *(_BYTE *)(v8 + 96) = 0;
          *(_BYTE *)(v8 + 104) = 1;
          if (!v218)
            ((void (*)(std::runtime_error *))v254.~runtime_error)(&v254);
LABEL_261:
          if (!*(_BYTE *)(v8 + 1144))
            (**v65)(v65);
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v227, *(unsigned int **)(v8 + 1408));
          if (*(_BYTE *)(v8 + 888))
            AMSCore::URL::~URL(v88);
          if (*(_BYTE *)(v8 + 424))
            AMSCore::URL::~URL(v229);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v8 + 240));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v8 + 216));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v8 + 192));
          v194 = **(std::__shared_weak_count ***)(v8 + 1584);
          if (v194)
          {
            v195 = (unint64_t *)&v194->__shared_owners_;
            do
              v196 = __ldaxr(v195);
            while (__stlxr(v196 - 1, v195));
            if (!v196)
            {
              ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
              std::__shared_weak_count::__release_weak(v194);
            }
          }
          v197 = *(char **)v240;
          if (*(_QWORD *)v240)
          {
            v198 = *(char **)(v8 + 1288);
            v199 = *(char **)v240;
            if (v198 != v197)
            {
              do
              {
                v200 = v198 - 32;
                v201 = *((unsigned int *)v198 - 2);
                if ((_DWORD)v201 != -1)
                  ((void (*)(std::runtime_error *, char *))off_1E253D240[v201])(&v254, v198 - 32);
                *((_DWORD *)v198 - 2) = -1;
                v198 -= 32;
              }
              while (v200 != v197);
              v199 = *(char **)v240;
            }
            *(_QWORD *)(v8 + 1288) = v197;
            operator delete(v199);
          }
          if (*(char *)(v8 + 1399) < 0)
            operator delete(v231->__r_.__value_.__l.__data_);
          v150 = 0;
          v151 = 0;
          v55 = 3;
          v152 = *(std::__shared_weak_count **)(v8 + 1496);
          if (!v152)
            goto LABEL_286;
          goto LABEL_283;
        }
      }
      else if (*(_BYTE *)(v8 + 1144))
      {
        goto LABEL_229;
      }
      std::runtime_error::runtime_error(&v254, (const std::runtime_error *)v236);
      v255 = *(_OWORD *)(v8 + 1088);
      v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v180 = *(_QWORD *)(v8 + 1112);
      v256 = *(unsigned int ***)(v8 + 1104);
      v257 = (unsigned int *)v180;
      v258 = *(_QWORD *)(v8 + 1120);
      if (v258)
      {
        *(_QWORD *)(v180 + 16) = &v257;
        *(_QWORD *)(v8 + 1104) = v8 + 1112;
        *(_QWORD *)(v8 + 1112) = 0;
        *(_QWORD *)(v8 + 1120) = 0;
      }
      else
      {
        v256 = &v257;
      }
      v239 = (std::runtime_error *)(v8 + 24);
      v259 = *(_OWORD *)v241;
      *(_QWORD *)v241 = 0;
      *((_QWORD *)v241 + 1) = 0;
      v260 = 1;
      std::runtime_error::runtime_error(&v248, &v254);
      v249 = v255;
      v248.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v250 = v256;
      v251 = v257;
      v252 = v258;
      if (v258)
      {
        *((_QWORD *)v257 + 2) = &v251;
        v256 = &v257;
        v257 = 0;
        v258 = 0;
      }
      else
      {
        v250 = &v251;
      }
      v253 = v259;
      v259 = 0uLL;
      std::runtime_error::runtime_error(&v242, &v248);
      v243 = v249;
      v242.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v186 = v251;
      v244 = v250;
      v245 = v251;
      v246 = v252;
      if (v252)
      {
        *((_QWORD *)v251 + 2) = &v245;
        v186 = 0;
        v250 = &v251;
        v251 = 0;
        v252 = 0;
      }
      else
      {
        v244 = &v245;
      }
      v247 = v253;
      v253 = 0uLL;
      v248.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v250, v186);
      MEMORY[0x18D7898AC](&v248);
      v88 = (AMSCore::URL *)(v8 + 736);
      if (*(_BYTE *)(v8 + 104))
      {
        if (!*(_BYTE *)(v8 + 96))
          ((void (*)(std::runtime_error *))v239->~runtime_error)(v239);
        *(_BYTE *)(v8 + 104) = 0;
      }
      std::runtime_error::runtime_error(v239, &v242);
      v188 = v244;
      v187 = v245;
      *(_QWORD *)(v8 + 64) = v245;
      v189 = v8 + 64;
      *(_OWORD *)(v8 + 40) = v243;
      *(_QWORD *)(v8 + 24) = off_1E2521330;
      *(_QWORD *)(v8 + 56) = v188;
      v190 = v246;
      *(_QWORD *)(v8 + 72) = v246;
      if (v190)
      {
        *((_QWORD *)v187 + 2) = v189;
        v187 = 0;
        v244 = &v245;
        v245 = 0;
        v246 = 0;
      }
      else
      {
        *(_QWORD *)(v8 + 56) = v189;
      }
      v65 = (void (***)(_QWORD))v236;
      *(_OWORD *)(v8 + 80) = v247;
      v247 = 0uLL;
      *(_BYTE *)(v8 + 96) = 0;
      *(_BYTE *)(v8 + 104) = 1;
      v242.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v244, v187);
      MEMORY[0x18D7898AC](&v242);
      if (v260)
      {
        v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v191 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
        if (*((_QWORD *)&v259 + 1))
        {
          v192 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v256, v257);
        MEMORY[0x18D7898AC](&v254);
      }
      v15 = (void (***)(uint64_t))(v8 + 24);
      goto LABEL_261;
    }
LABEL_324:
    __break(1u);
  }
}

void sub_18CCCEBE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,AMSCore::MetricsEventModifier::EventModifier *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  void **v34;

  if (*(_BYTE *)(v33 + 1176))
  {
    if (*(char *)(v33 + 1175) < 0)
      operator delete(*v34);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a31);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCCECD0()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCCEA00);
}

void AMSCore::GZip::Provider::~Provider(AMSCore::GZip::Provider *this)
{
  JUMPOUT(0x18D789BDCLL);
}

uint64_t AMSCore::GZip::Provider::decompress@<X0>(uint64_t a1@<X8>)
{
  return AMSCore::GZip::decompress(a1);
}

uint64_t AMSCore::GZip::Provider::compress@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::runtime_error v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[51]>((uint64_t)&v6, 8u, "Gzip compression is not supported on this platform");
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v6);
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)a1 = off_1E2521330;
  v2 = v9;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v2;
  v3 = a1 + 40;
  v4 = v10;
  *(_QWORD *)(a1 + 48) = v10;
  if (v4)
  {
    *(_QWORD *)(v2 + 16) = v3;
    v8 = &v9;
    v9 = 0;
    v10 = 0;
    v2 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v3;
  }
  *(_OWORD *)(a1 + 56) = v11;
  v11 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v6.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v8, (unsigned int *)v2);
  return MEMORY[0x18D7898AC](&v6);
}

void AMSCore::UploadMetricsEventTask::performMultiple(uint64_t *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, __int128 *a6@<X5>, __int128 *a7@<X6>, std::runtime_error *a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  std::runtime_error *v20;
  void **v21;
  _QWORD *v22;
  std::runtime_error *v23;
  char *v24;
  unsigned int v25;
  void (***v26)(uint64_t);
  BOOL v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  std::runtime_error_vtbl *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  const std::runtime_error *v41;
  char v42;
  const char **v43;
  std::__libcpp_refstring *p_imp;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  const std::runtime_error *v49;
  std::runtime_error_vtbl *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::runtime_error_vtbl *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  std::string::size_type v77;
  const std::string::value_type *v78;
  void **p_data;
  __int128 v80;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  std::string::size_type v94;
  const std::string::value_type *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  const std::runtime_error *v113;
  int v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  char *v117;
  char *v118;
  std::__shared_weak_count *v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  _BYTE *v178;
  void **v179;
  std::string *v180;
  _DWORD *v181;
  std::runtime_error *v182;
  std::runtime_error *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  std::string *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  std::runtime_error v195;
  __int128 v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;

  v11 = *a1;
  v12 = a1[1];
  LODWORD(v194) = *((_DWORD *)a1 + 4);
  *(_DWORD *)((char *)&v194 + 3) = *(_DWORD *)((char *)a1 + 19);
  v13 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v187 = *a3;
  v188 = v14;
  v16 = a3[1];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v185 = *a6;
  v186 = v16;
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  v184 = *a7;
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  v17 = (_QWORD *)operator new();
  v174 = a4;
  *v17 = &off_1E2521300;
  v18 = (char *)operator new(0x448uLL);
  v19 = (unint64_t)v18;
  *(_QWORD *)v18 = AMSCore::UploadMetricsEventTask::internal::performMultiple;
  *((_QWORD *)v18 + 1) = AMSCore::UploadMetricsEventTask::internal::performMultiple;
  *((_QWORD *)v18 + 115) = v11;
  v183 = (std::runtime_error *)(v18 + 152);
  *((_QWORD *)v18 + 116) = v12;
  v20 = (std::runtime_error *)(v18 + 328);
  v178 = v18 + 1087;
  v179 = (void **)(v18 + 584);
  v191 = (uint64_t *)(v18 + 712);
  *((_DWORD *)v18 + 270) = v194;
  v21 = (void **)(v18 + 736);
  v189 = (std::string *)(v18 + 760);
  v22 = v18 + 784;
  *(_DWORD *)(v18 + 1083) = *(_DWORD *)((char *)&v194 + 3);
  v180 = (std::string *)(v18 + 808);
  v181 = v18 + 1080;
  v176 = v18 + 648;
  v177 = (uint64_t)(v18 + 832);
  v18[1088] = v13;
  v182 = (std::runtime_error *)(v18 + 848);
  v23 = (std::runtime_error *)(v18 + 864);
  v193 = v18 + 880;
  v175 = v18 + 896;
  v190 = (uint64_t *)(v18 + 912);
  v192 = (uint64_t)(v18 + 16);
  *(_OWORD *)(v18 + 936) = v188;
  *((_QWORD *)v18 + 119) = v15;
  v24 = v18 + 504;
  *(_OWORD *)(v18 + 680) = v187;
  *(_OWORD *)(v18 + 696) = v186;
  *((_OWORD *)v18 + 60) = v185;
  *((_OWORD *)v18 + 61) = v184;
  *((_QWORD *)v18 + 124) = v17;
  do
    v25 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v25 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v18[24] = 0;
  v26 = (void (***)(uint64_t))(v18 + 24);
  v18[104] = 0;
  *((_QWORD *)v18 + 14) = 0;
  *((_QWORD *)v18 + 18) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v195, v192);
  *a8 = v195;
  *v193 = 0;
  v193[1] = 0;
  v27 = a5 == 1;
  v28 = v24;
  if (!v27)
    goto LABEL_72;
  *(_BYTE *)(v19 + 807) = 0;
  *(_BYTE *)(v19 + 784) = 0;
  v29 = *(_QWORD *)(v19 + 784);
  *(_QWORD *)(v19 + 552) = *(_QWORD *)(v19 + 792);
  *(_QWORD *)(v19 + 559) = *(_QWORD *)(v19 + 799);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = 0;
  *(_BYTE *)(v19 + 504) = 0;
  *(_BYTE *)(v19 + 528) = 0;
  *(_QWORD *)(v19 + 536) = v174;
  *(_QWORD *)(v19 + 544) = v29;
  *(_BYTE *)(v19 + 567) = 0;
  *(_BYTE *)(v19 + 584) = 0;
  *(_BYTE *)(v19 + 608) = 0;
  *(_QWORD *)(v19 + 616) = v174;
  v30 = *(_OWORD *)(v19 + 544);
  *(_QWORD *)(v19 + 640) = *(_QWORD *)(v19 + 560);
  *(_OWORD *)(v19 + 624) = v30;
  v31 = *(_QWORD *)(v19 + 680);
  v32 = *(std::runtime_error_vtbl **)(v31 + 56);
  v33 = *(_QWORD *)(v31 + 64);
  *(_QWORD *)(v19 + 848) = v32;
  *(_QWORD *)(v19 + 856) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    v32 = v182->__vftable;
  }
  (*((void (**)(std::runtime_error_vtbl *))v32->~runtime_error + 2))(v32);
  v36 = *(_OWORD *)(v19 + 864);
  *((_OWORD *)v24 + 31) = v36;
  v23->__vftable = 0;
  v23->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v36 + 96)))
  {
    *v178 = 0;
    v38 = (unint64_t *)(*(_QWORD *)(v19 + 1000) + 96);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v19, v38));
    if (!v39)
      return;
  }
  v40 = *((_QWORD *)v24 + 62);
  if (!*(_BYTE *)(v40 + 88))
    goto LABEL_234;
  v41 = (const std::runtime_error *)(v40 + 8);
  v42 = *(_BYTE *)(v40 + 80);
  if (v42)
  {
    *(_QWORD *)(v19 + 152) = *(_QWORD *)(v40 + 8);
    v43 = (const char **)(v19 + 160);
    p_imp = (std::__libcpp_refstring *)(v40 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v183, v41);
    *(_OWORD *)(v19 + 168) = *(_OWORD *)(v40 + 24);
    v45 = (_QWORD *)(v40 + 48);
    v46 = *(_QWORD *)(v40 + 48);
    *(_QWORD *)(v19 + 192) = v46;
    v47 = v19 + 192;
    *(_QWORD *)(v19 + 152) = off_1E2521330;
    *(_QWORD *)(v19 + 184) = *(_QWORD *)(v40 + 40);
    v48 = *(_QWORD *)(v40 + 56);
    *(_QWORD *)(v19 + 200) = v48;
    if (v48)
    {
      *(_QWORD *)(v46 + 16) = v47;
      *(_QWORD *)(v40 + 40) = v45;
      *v45 = 0;
      *(_QWORD *)(v40 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v19 + 184) = v47;
    }
    v49 = *(const std::runtime_error **)(v19 + 1000);
    v50 = v49[4].__vftable;
    v41 = v49 + 4;
    *(_QWORD *)(v19 + 208) = v50;
    v43 = (const char **)(v19 + 216);
    p_imp = &v41->__imp_;
  }
  *v43 = p_imp->__imp_;
  v41->__vftable = 0;
  v41->__imp_.__imp_ = 0;
  *(_BYTE *)(v19 + 224) = v42;
  v51 = *(_QWORD *)(v19 + 1008);
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      v54 = *(std::__shared_weak_count **)(v19 + 1008);
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v55 = *(std::__shared_weak_count **)(v19 + 872);
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      if ((*(char *)(v19 + 759) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  if (*(char *)(v19 + 759) < 0)
LABEL_30:
    operator delete(*v21);
LABEL_31:
  v58 = *(std::__shared_weak_count **)(v19 + 856);
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      if ((*(char *)(v19 + 647) & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_36;
    }
  }
  if (*(char *)(v19 + 647) < 0)
LABEL_36:
    operator delete(*(void **)(v19 + 624));
LABEL_37:
  if (*(_BYTE *)(v19 + 608) && *(char *)(v19 + 607) < 0)
    operator delete(*v179);
  if (*(_BYTE *)(v19 + 224) && (v61 = v183->__vftable) != 0)
  {
    v62 = *(_QWORD *)(v19 + 160);
    v183->__vftable = 0;
    v183->__imp_.__imp_ = 0;
    *(_QWORD *)(v19 + 880) = v61;
    v63 = *(std::__shared_weak_count **)(v19 + 888);
    *(_QWORD *)(v19 + 888) = v62;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = 0;
    v67 = 1;
    if (!*(_BYTE *)(v19 + 224))
    {
LABEL_48:
      ((void (*)(std::runtime_error *))v183->~runtime_error)(v183);
      goto LABEL_66;
    }
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::AccountsErrorCode,char const(&)[44]>((uint64_t)&v195, 0x64u);
    if (*(_BYTE *)(v19 + 104))
    {
      if (!*(_BYTE *)(v19 + 96))
        (**v26)(v19 + 24);
      *(_BYTE *)(v19 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v19 + 24), &v195);
    v68 = v196;
    v70 = v197;
    v69 = v198;
    *(_QWORD *)(v19 + 64) = v198;
    v71 = v19 + 64;
    *(_OWORD *)(v19 + 40) = v68;
    *(_QWORD *)(v19 + 24) = off_1E2521330;
    *(_QWORD *)(v19 + 56) = v70;
    v72 = v199;
    *(_QWORD *)(v19 + 72) = v199;
    if (v72)
    {
      *(_QWORD *)(v69 + 16) = v71;
      v197 = &v198;
      v198 = 0;
      v199 = 0;
      v69 = 0;
    }
    else
    {
      *(_QWORD *)(v19 + 56) = v71;
    }
    *(_OWORD *)(v19 + 80) = v200;
    v200 = 0uLL;
    *(_BYTE *)(v19 + 96) = 0;
    *(_BYTE *)(v19 + 104) = 1;
    v195.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v197, (unsigned int *)v69);
    MEMORY[0x18D7898AC](&v195);
    v67 = 0;
    v66 = 3;
    if (!*(_BYTE *)(v19 + 224))
      goto LABEL_48;
  }
  v73 = *(std::__shared_weak_count **)(v19 + 160);
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
LABEL_66:
  if (*(char *)(v19 + 567) < 0)
    operator delete(*(void **)(v19 + 544));
  if (*(_BYTE *)(v19 + 528) && *(char *)(v19 + 527) < 0)
    operator delete(*(void **)v28);
  if ((v67 & 1) == 0)
  {
    v115 = *(_QWORD *)(v19 + 992);
    v116 = *(std::__shared_weak_count **)(v19 + 968);
    v117 = *(char **)(v19 + 944);
    v118 = *(char **)(v19 + 936);
    v119 = *(std::__shared_weak_count **)(v19 + 888);
    if (!v119)
      goto LABEL_186;
LABEL_183:
    v154 = (unint64_t *)&v119->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
      if (v66 == 3)
        goto LABEL_187;
      goto LABEL_189;
    }
LABEL_186:
    if (v66 == 3)
    {
LABEL_187:
      *(_QWORD *)(v19 + 1072) = v118;
      *(_QWORD *)(v19 + 1064) = v117;
      *(_QWORD *)(v19 + 1056) = v116;
      *(_QWORD *)(v19 + 1048) = v115;
      *(_QWORD *)(v19 + 152) = v192;
      *(_QWORD *)v19 = 0;
      AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v183);
      return;
    }
LABEL_189:
    v156 = *(_QWORD **)(v19 + 144);
    if (v156 == (_QWORD *)(v19 + 120))
    {
      v157 = 4;
      v156 = (_QWORD *)(v19 + 120);
    }
    else
    {
      if (!v156)
      {
LABEL_194:
        if (*(_BYTE *)(v19 + 104) && !*(_BYTE *)(v19 + 96))
          (**v26)(v19 + 24);
        do
        {
          v158 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
          v159 = v158 - 1;
        }
        while (__stlxr(v159, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
        if (!v159)
          MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
        if (v115)
          (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
        v160 = *(_QWORD *)(v19 + 984);
        if (v160)
        {
          v161 = (unint64_t *)(v160 + 8);
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            v163 = *(std::__shared_weak_count **)(v19 + 984);
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        if (v116)
        {
          v164 = (unint64_t *)&v116->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        v166 = *(std::__shared_weak_count **)(v19 + 704);
        if (v166)
        {
          v167 = (unint64_t *)&v166->__shared_owners_;
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        v169 = *(std::__shared_weak_count **)(v19 + 688);
        if (!v169)
          goto LABEL_221;
        v170 = (unint64_t *)&v169->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
          if (v118)
            goto LABEL_222;
        }
        else
        {
LABEL_221:
          if (v118)
          {
LABEL_222:
            if (v117 != v118)
            {
              do
              {
                v172 = v117 - 32;
                v173 = *((unsigned int *)v117 - 2);
                if ((_DWORD)v173 != -1)
                  ((void (*)(std::runtime_error *, char *))off_1E253D240[v173])(&v195, v117 - 32);
                *((_DWORD *)v117 - 2) = -1;
                v117 -= 32;
              }
              while (v172 != v118);
            }
            operator delete(v118);
          }
        }
        if (*(char *)(v19 + 1088) < 0)
          operator delete(*(void **)(v19 + 920));
        operator delete((void *)v19);
        return;
      }
      v157 = 5;
    }
    (*(void (**)(void))(*v156 + 8 * v157))();
    goto LABEL_194;
  }
LABEL_72:
  v76 = *(char *)(v19 + 1088);
  v77 = *(_QWORD *)(v19 + 928);
  v78 = *(const std::string::value_type **)(v19 + 920);
  if (v76 < 0)
  {
    p_data = (void **)&v180->__r_.__value_.__l.__data_;
    std::string::__init_copy_ctor_external(v180, v78, v77);
  }
  else
  {
    *(_QWORD *)(v19 + 808) = v78;
    *(_QWORD *)(v19 + 816) = v77;
    p_data = (void **)&v180->__r_.__value_.__l.__data_;
    *(_DWORD *)(v19 + 824) = *v181;
    *(_DWORD *)(v19 + 827) = *(_DWORD *)((char *)v181 + 3);
    *(_BYTE *)(v19 + 831) = v76;
  }
  AMSCore::MetricsEventModifierProvider::getOverrideForTopic(v28, *(_QWORD **)(v19 + 976), (uint64_t)p_data);
  v80 = *(_OWORD *)v28;
  *((_OWORD *)v28 + 32) = *(_OWORD *)v28;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  if (!atomic_load((unint64_t *)(v80 + 192)))
  {
    *v178 = 1;
    v82 = (unint64_t *)(*(_QWORD *)(v19 + 1016) + 192);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v19, v82));
    if (!v83)
      return;
  }
  v84 = *((_QWORD *)v28 + 64);
  if (!*(_BYTE *)(v84 + 184))
    goto LABEL_234;
  *v183 = *(std::runtime_error *)(v84 + 8);
  *(_BYTE *)(v19 + 168) = 0;
  v85 = (_OWORD *)(v19 + 168);
  *(_BYTE *)(v19 + 320) = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(v19 + 168, (__int128 *)(v84 + 24));
  v86 = *(_QWORD *)(v19 + 1024);
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      v89 = *(std::__shared_weak_count **)(v19 + 1024);
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v90 = *(std::__shared_weak_count **)(v19 + 512);
  if (!v90)
    goto LABEL_89;
  v91 = (unint64_t *)&v90->__shared_owners_;
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v92 - 1, v91));
  if (v92)
  {
LABEL_89:
    if ((*(char *)(v19 + 831) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_90;
  }
  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
  std::__shared_weak_count::__release_weak(v90);
  if (*(char *)(v19 + 831) < 0)
LABEL_90:
    operator delete(*p_data);
LABEL_91:
  v93 = *(char *)(v19 + 1088);
  v94 = *(_QWORD *)(v19 + 928);
  v95 = *(const std::string::value_type **)(v19 + 920);
  if (v93 < 0)
  {
    std::string::__init_copy_ctor_external(v189, v95, v94);
  }
  else
  {
    *(_QWORD *)(v19 + 760) = v95;
    *(_QWORD *)(v19 + 768) = v94;
    *(_DWORD *)(v19 + 776) = *v181;
    *(_DWORD *)(v19 + 779) = *(_DWORD *)((char *)v181 + 3);
    *(_BYTE *)(v19 + 783) = v93;
  }
  v96 = *(_QWORD *)(v19 + 952);
  *((_OWORD *)v28 + 13) = *((_OWORD *)v28 + 27);
  *(_QWORD *)(v19 + 728) = v96;
  *(_QWORD *)(v19 + 648) = *(_QWORD *)(v19 + 680);
  v97 = *(_QWORD *)(v19 + 688);
  *(_QWORD *)(v19 + 656) = v97;
  if (v97)
  {
    v98 = (unint64_t *)(v97 + 8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  *(_QWORD *)(v19 + 664) = *(_QWORD *)(v19 + 696);
  v100 = *(_QWORD *)(v19 + 704);
  *(_QWORD *)(v19 + 672) = v100;
  if (v100)
  {
    v101 = (unint64_t *)(v100 + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  *(_OWORD *)(v19 + 896) = *(_OWORD *)(v19 + 880);
  *v193 = 0;
  v193[1] = 0;
  *v20 = *v183;
  *(_BYTE *)(v19 + 344) = 0;
  *(_BYTE *)(v19 + 496) = 0;
  if (*(_BYTE *)(v19 + 320))
  {
    *(_BYTE *)(v19 + 368) = 0;
    if (*(_BYTE *)(v19 + 192))
    {
      *(_OWORD *)(v19 + 344) = *v85;
      *(_QWORD *)(v19 + 360) = *(_QWORD *)(v19 + 184);
      *(_QWORD *)(v19 + 176) = 0;
      *(_QWORD *)(v19 + 184) = 0;
      *(_QWORD *)v85 = 0;
      *(_BYTE *)(v19 + 368) = 1;
    }
    *(_BYTE *)(v19 + 376) = 0;
    *(_BYTE *)(v19 + 400) = 0;
    if (*(_BYTE *)(v19 + 224))
    {
      *(_OWORD *)(v19 + 376) = *(_OWORD *)(v19 + 200);
      *(_QWORD *)(v19 + 392) = *(_QWORD *)(v19 + 216);
      *(_QWORD *)(v19 + 208) = 0;
      *(_QWORD *)(v19 + 216) = 0;
      *(_QWORD *)(v19 + 200) = 0;
      *(_BYTE *)(v19 + 400) = 1;
    }
    *(_BYTE *)(v19 + 408) = 0;
    *(_BYTE *)(v19 + 432) = 0;
    if (*(_BYTE *)(v19 + 256))
    {
      *(_OWORD *)(v19 + 408) = *(_OWORD *)(v19 + 232);
      *(_QWORD *)(v19 + 424) = *(_QWORD *)(v19 + 248);
      *(_QWORD *)(v19 + 240) = 0;
      *(_QWORD *)(v19 + 248) = 0;
      *(_QWORD *)(v19 + 232) = 0;
      *(_BYTE *)(v19 + 432) = 1;
    }
    *(_DWORD *)(v19 + 440) = *(_DWORD *)(v19 + 264);
    *(_QWORD *)(v19 + 448) = v19 + 448;
    *(_QWORD *)(v19 + 456) = v19 + 448;
    *(_QWORD *)(v19 + 464) = 0;
    v103 = *(_QWORD *)(v19 + 288);
    if (v103)
    {
      v105 = *(_QWORD *)(v19 + 272);
      v104 = *(uint64_t **)(v19 + 280);
      v106 = *v104;
      *(_QWORD *)(v106 + 8) = *(_QWORD *)(v105 + 8);
      **(_QWORD **)(v105 + 8) = v106;
      v107 = *(_QWORD *)(v19 + 448);
      *(_QWORD *)(v107 + 8) = v104;
      *v104 = v107;
      *(_QWORD *)(v19 + 448) = v105;
      *(_QWORD *)(v105 + 8) = v19 + 448;
      *(_QWORD *)(v19 + 464) = v103;
      *(_QWORD *)(v19 + 288) = 0;
    }
    *(_QWORD *)(v19 + 488) = *(_QWORD *)(v19 + 312);
    *(_OWORD *)(v19 + 472) = *(_OWORD *)(v19 + 296);
    *(_QWORD *)(v19 + 304) = 0;
    *(_QWORD *)(v19 + 312) = 0;
    *(_QWORD *)(v19 + 296) = 0;
    *(_BYTE *)(v19 + 496) = 1;
  }
  *(_QWORD *)(v19 + 912) = *(_QWORD *)(v19 + 992);
  *(_OWORD *)(v19 + 832) = *(_OWORD *)(v19 + 960);
  v108 = *(_OWORD *)(v19 + 848);
  *((_OWORD *)v28 + 33) = v108;
  v182->__vftable = 0;
  v182->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v108 + 96)))
    goto LABEL_114;
  *v178 = 2;
  v110 = (unint64_t *)(*(_QWORD *)(v19 + 1032) + 96);
  do
    v111 = __ldaxr(v110);
  while (__stlxr(v19, v110));
  if (v111)
  {
LABEL_114:
    v112 = *((_QWORD *)v28 + 66);
    if (*(_BYTE *)(v112 + 88))
    {
      v113 = (const std::runtime_error *)(v112 + 8);
      v114 = *(unsigned __int8 *)(v112 + 80);
      if (*(_BYTE *)(v112 + 80))
      {
        *(_DWORD *)v28 = v113->__vftable;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)v28, v113);
        *(_OWORD *)(v19 + 520) = *(_OWORD *)(v112 + 24);
        *(_QWORD *)(v19 + 504) = off_1E2521330;
        v120 = (_QWORD *)(v112 + 48);
        v121 = *(_QWORD *)(v112 + 48);
        *(_QWORD *)(v19 + 536) = *(_QWORD *)(v112 + 40);
        v122 = v19 + 544;
        *(_QWORD *)(v19 + 544) = v121;
        v123 = *(_QWORD *)(v112 + 56);
        *(_QWORD *)(v19 + 552) = v123;
        if (v123)
        {
          *(_QWORD *)(v121 + 16) = v122;
          *(_QWORD *)(v112 + 40) = v120;
          *v120 = 0;
          *(_QWORD *)(v112 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v19 + 536) = v122;
        }
        v124 = *(_QWORD *)(v19 + 1032);
        *(_OWORD *)(v19 + 560) = *(_OWORD *)(v124 + 64);
        *(_QWORD *)(v124 + 64) = 0;
        *(_QWORD *)(v124 + 72) = 0;
      }
      *(_BYTE *)(v19 + 576) = v114;
      if (*(_BYTE *)(v19 + 104))
      {
        if (!*(_BYTE *)(v19 + 96))
        {
          (**(void (***)(uint64_t))(v19 + 24))(v19 + 24);
          v114 = *(unsigned __int8 *)(v19 + 576);
        }
        *(_BYTE *)(v19 + 104) = 0;
      }
      if (v114)
      {
        *(_DWORD *)(v19 + 24) = *(_DWORD *)(v19 + 504);
        *(_BYTE *)(v19 + 96) = v114;
        *(_BYTE *)(v19 + 104) = 1;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(v19 + 24), (const std::runtime_error *)v28);
        v125 = *(_QWORD *)(v19 + 544);
        *(_QWORD *)(v19 + 64) = v125;
        v126 = v19 + 64;
        *(_OWORD *)(v19 + 40) = *(_OWORD *)(v19 + 520);
        *(_QWORD *)(v19 + 24) = off_1E2521330;
        *(_QWORD *)(v19 + 56) = *(_QWORD *)(v19 + 536);
        v127 = *(_QWORD *)(v19 + 552);
        *(_QWORD *)(v19 + 72) = v127;
        if (v127)
        {
          *(_QWORD *)(v125 + 16) = v126;
          *(_QWORD *)(v19 + 536) = v19 + 544;
          *(_QWORD *)(v19 + 544) = 0;
          *(_QWORD *)(v19 + 552) = 0;
        }
        else
        {
          *(_QWORD *)(v19 + 56) = v126;
        }
        *(_OWORD *)(v19 + 80) = *(_OWORD *)(v19 + 560);
        *(_QWORD *)(v19 + 568) = 0;
        *(_QWORD *)(v19 + 560) = 0;
        v128 = *(unsigned __int8 *)(v19 + 576);
        *(_BYTE *)(v19 + 96) = 0;
        *(_BYTE *)(v19 + 104) = 1;
        if (!v128)
          (**(void (***)(char *))v28)(v28);
      }
      v129 = *(_QWORD *)(v19 + 1040);
      if (v129)
      {
        v130 = (unint64_t *)(v129 + 8);
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          v132 = *(std::__shared_weak_count **)(v19 + 1040);
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v133 = *(std::__shared_weak_count **)(v19 + 856);
      if (v133)
      {
        v134 = (unint64_t *)&v133->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v136 = *(std::__shared_weak_count **)(v19 + 840);
      if (v136)
      {
        v137 = (unint64_t *)&v136->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      v139 = *v190;
      *v190 = 0;
      if (v139)
        (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
      if (*(_BYTE *)(v19 + 496))
        AMSCore::URL::~URL((AMSCore::URL *)(v19 + 344));
      v140 = *(std::__shared_weak_count **)(v19 + 904);
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      v143 = *(std::__shared_weak_count **)(v19 + 672);
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v146 = *(std::__shared_weak_count **)(v19 + 656);
      if (v146)
      {
        v147 = (unint64_t *)&v146->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      v149 = *v191;
      if (*v191)
      {
        v150 = *(_QWORD *)(v19 + 720);
        v151 = (void *)*v191;
        if (v150 != v149)
        {
          do
          {
            v152 = v150 - 32;
            v153 = *(unsigned int *)(v150 - 8);
            if ((_DWORD)v153 != -1)
              ((void (*)(std::runtime_error *, uint64_t))off_1E253D240[v153])(&v195, v150 - 32);
            *(_DWORD *)(v150 - 8) = -1;
            v150 -= 32;
          }
          while (v152 != v149);
          v151 = (void *)*v191;
        }
        *(_QWORD *)(v19 + 720) = v149;
        operator delete(v151);
      }
      if (*(char *)(v19 + 783) < 0)
        operator delete(v189->__r_.__value_.__l.__data_);
      if (*(_BYTE *)(v19 + 320))
        AMSCore::URL::~URL((AMSCore::URL *)(v19 + 168));
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v66 = 3;
      v119 = *(std::__shared_weak_count **)(v19 + 888);
      if (!v119)
        goto LABEL_186;
      goto LABEL_183;
    }
LABEL_234:
    __break(1u);
  }
}

void sub_18CCCFDBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  AMSCore::URL *v33;
  uint64_t v34;

  if (*(_BYTE *)(v32 + 320))
    AMSCore::URL::~URL(v33);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](*(_QWORD *)(v34 - 176));
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCCFE24()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCCFB70);
}

void AMSCore::PrivacyProvider::~PrivacyProvider(AMSCore::PrivacyProvider *this)
{
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::PrivacyProvider::getBundle(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v6 = *(std::string *)a1;
  v7[0] = v6.__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v6.__r_.__value_.__r.__words[1] + 7);
  v5 = v7[0];
  *(_QWORD *)(v4 + 8) = v6.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 23) = *(_QWORD *)((char *)v7 + 7);
  *(_BYTE *)(v4 + 31) = *((_BYTE *)&v6.__r_.__value_.__s + 23);
  *(_QWORD *)v4 = off_1E25207C0;
  *(_QWORD *)(v4 + 32) = 0;
  *a2 = v4;
}

void sub_18CCCFF54(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x18D789BDC](v2, 0x1093C4057897759);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::PrivacyBundle::~PrivacyBundle(void **this)
{
  *this = off_1E25207F0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E25207F0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t AMSCore::PrivacyBundle::clone@<X0>(AMSCore::PrivacyBundle *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v7, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v7 = *(std::string *)((char *)this + 8);
  result = operator new();
  v8[0] = v7.__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v8 + 7) = *(std::string::size_type *)((char *)&v7.__r_.__value_.__r.__words[1] + 7);
  v5 = v8[0];
  *(_QWORD *)(result + 8) = v7.__r_.__value_.__r.__words[0];
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 23) = *(_QWORD *)((char *)v8 + 7);
  LOBYTE(v5) = *((_BYTE *)&v7.__r_.__value_.__s + 23);
  memset(&v7, 0, sizeof(v7));
  v6 = *((_QWORD *)this + 4);
  *(_BYTE *)(result + 31) = v5;
  *(_QWORD *)result = off_1E25207C0;
  *(_QWORD *)(result + 32) = v6;
  *a2 = result;
  return result;
}

void sub_18CCD00F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18CCD0104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::PrivacyBundle::getContentVersion(AMSCore::PrivacyBundle *this)
{
  return *((_QWORD *)this + 4);
}

void std::__shared_ptr_emplace<AMSCore::PrivacyProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25229D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::PrivacyProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25229D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::PrivacyProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AMSCore::Trace::JSONTraceCollector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::Trace::JSONTraceCollector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::Trace::JSONTraceCollector>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMSCore::Trace::JSONTraceCollector::~JSONTraceCollector(AMSCore::Trace::JSONTraceCollector *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)MEMORY[0x1E0DE4F50];
  *(_QWORD *)this = off_1E2521358;
  v3 = *v2;
  *((_QWORD *)this + 11) = *v2;
  v4 = v2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 88) = v2[8];
  *((_QWORD *)this + 14) = MEMORY[0x1E0DE4FB8] + 16;
  *((_QWORD *)this + 13) = v4;
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D789B58]((char *)this + 216);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)MEMORY[0x1E0DE4F50];
  *(_QWORD *)this = off_1E2521358;
  v3 = *v2;
  *((_QWORD *)this + 11) = *v2;
  v4 = v2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 88) = v2[8];
  *((_QWORD *)this + 14) = MEMORY[0x1E0DE4FB8] + 16;
  *((_QWORD *)this + 13) = v4;
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D789B58]((char *)this + 216);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::Trace::JSONTraceCollector::durationBegin(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  char v9;
  char v10;

  v2 = atomic_load((unsigned __int8 *)(a1 + 8));
  if ((v2 & 1) != 0)
  {
    v5 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 368))
    {
      v8 = 44;
      v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 104), (uint64_t)&v8, 1);
      v9 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
    }
    *(_BYTE *)(a1 + 368) = 0;
    v7 = (_QWORD *)(a1 + 104);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)"{\"ph\":\"B\",", 10);
    v10 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
    std::mutex::unlock(v5);
  }
}

void sub_18CCD03E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::durationEnd(AMSCore::Trace::JSONTraceCollector *this)
{
  unsigned __int8 v1;
  std::mutex *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v1 = atomic_load((unsigned __int8 *)this + 8);
  if ((v1 & 1) != 0)
  {
    v3 = (std::mutex *)((char *)this + 16);
    std::mutex::lock((std::mutex *)((char *)this + 16));
    if (!*((_BYTE *)this + 368))
    {
      v17 = 44;
      v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)this + 13, (uint64_t)&v17, 1);
      v18 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, (uint64_t)&v18, 1);
    }
    *((_BYTE *)this + 368) = 0;
    v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)this + 13, (uint64_t)"{\"ph\":\"E\",", 10);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, (uint64_t)"\"ts\":", 5);
    std::chrono::steady_clock::now();
    v6 = (_QWORD *)std::ostream::operator<<();
    v19 = 44;
    v7 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)&v19, 1);
    v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"pid\":", 6);
    v20 = 49;
    v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v20, 1);
    v21 = 44;
    v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)&v21, 1);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"tid\":", 6);
    {
    }
    else
    {
      do
      *v13 = v14;
      *(_BYTE *)v16(v15) = 1;
    }
    v11 = (_QWORD *)std::ostream::operator<<();
    v22 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)&v22, 1);
    std::mutex::unlock(v3);
  }
}

void sub_18CCD05B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::completion(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v2 = atomic_load((unsigned __int8 *)(a1 + 8));
  if ((v2 & 1) != 0)
  {
    v5 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 368))
    {
      v9 = 44;
      v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 104), (uint64_t)&v9, 1);
      v10 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)&v10, 1);
    }
    *(_BYTE *)(a1 + 368) = 0;
    v7 = (_QWORD *)(a1 + 104);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)"{\"ph\":\"X\",\"dur\":", 16);
    v8 = (_QWORD *)std::ostream::operator<<();
    v11 = 44;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v11, 1);
    v12 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)&v12, 1);
    std::mutex::unlock(v5);
  }
}

void sub_18CCD06C4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::counter(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  std::mutex *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  char v9;
  char v10;

  v2 = atomic_load((unsigned __int8 *)(a1 + 8));
  if ((v2 & 1) != 0)
  {
    v5 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 368))
    {
      v8 = 44;
      v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 104), (uint64_t)&v8, 1);
      v9 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
    }
    *(_BYTE *)(a1 + 368) = 0;
    v7 = (_QWORD *)(a1 + 104);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)"{\"ph\":\"C\",", 10);
    v10 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
    std::mutex::unlock(v5);
  }
}

void sub_18CCD07A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::instant(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v3;
  std::mutex *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if ((v3 & 1) != 0)
  {
    v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 368))
    {
      v12 = 44;
      v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 104), (uint64_t)&v12, 1);
      v13 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v13, 1);
    }
    *(_BYTE *)(a1 + 368) = 0;
    v9 = (_QWORD *)(a1 + 104);
    v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)"{\"ph\":\"i\",\"s\":\"", 15);
    if (a3 == 2)
    {
      v16 = 116;
      v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
    }
    else if (a3 == 1)
    {
      v15 = 112;
      v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)&v15, 1);
    }
    else
    {
      v14 = 103;
      v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)&v14, 1);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)"\",", 2);
    v17 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)&v17, 1);
    std::mutex::unlock(v7);
  }
}

void sub_18CCD08E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::asyncBegin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  std::mutex *v7;
  _QWORD *v8;
  char v9;
  char v10;

  v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if ((v3 & 1) != 0)
  {
    v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 368))
    {
      v9 = 44;
      v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 104), (uint64_t)&v9, 1);
      v10 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v10, 1);
    }
    *(_BYTE *)(a1 + 368) = 0;
    std::mutex::unlock(v7);
  }
}

void sub_18CCD099C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::asyncNext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  std::mutex *v7;
  _QWORD *v8;
  char v9;
  char v10;

  v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if ((v3 & 1) != 0)
  {
    v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 368))
    {
      v9 = 44;
      v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 104), (uint64_t)&v9, 1);
      v10 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v10, 1);
    }
    *(_BYTE *)(a1 + 368) = 0;
    std::mutex::unlock(v7);
  }
}

void sub_18CCD0A54(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::asyncEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  std::mutex *v7;
  _QWORD *v8;
  char v9;
  char v10;

  v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if ((v3 & 1) != 0)
  {
    v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 368))
    {
      v9 = 44;
      v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 104), (uint64_t)&v9, 1);
      v10 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v10, 1);
    }
    *(_BYTE *)(a1 + 368) = 0;
    std::mutex::unlock(v7);
  }
}

void sub_18CCD0B0C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::start(AMSCore::Trace::JSONTraceCollector *this)
{
  std::mutex *v2;
  void **v3;
  char v4;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = (void **)((char *)this + 176);
  if (*((char *)this + 199) < 0)
    operator delete(*v3);
  *v3 = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  std::stringbuf::__init_buf_ptrs[abi:fe180100]((uint64_t)this + 112);
  v4 = 91;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)this + 13, (uint64_t)&v4, 1);
  *((_BYTE *)this + 368) = 1;
  atomic_store(1u, (unsigned __int8 *)this + 8);
  std::mutex::unlock(v2);
}

void AMSCore::Trace::JSONTraceCollector::stop(AMSCore::Trace::JSONTraceCollector *this)
{
  unsigned __int8 v1;
  std::mutex *v3;
  _QWORD *v4;
  char v5;
  char v6;

  v1 = atomic_load((unsigned __int8 *)this + 8);
  if ((v1 & 1) != 0)
  {
    v3 = (std::mutex *)((char *)this + 16);
    std::mutex::lock((std::mutex *)((char *)this + 16));
    v5 = 93;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((_QWORD *)this + 13, (uint64_t)&v5, 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v6 = 10;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, (uint64_t)&v6, 1);
    *((_BYTE *)this + 368) = 1;
    atomic_store(0, (unsigned __int8 *)this + 8);
    std::mutex::unlock(v3);
  }
}

uint64_t AMSCore::Trace::JSONTraceCollector::completeSupported(AMSCore::Trace::JSONTraceCollector *this)
{
  return 1;
}

_QWORD *AMSCore::Trace::`anonymous namespace'::writeAsync(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;

  v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"ph\":\"", 7);
  v15 = a4;
  v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v15, 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)"\",", 2);
  if (!*(_BYTE *)(a3 + 24))
  {
LABEL_10:
    v16 = 125;
    return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v16, 1);
  }
  result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"scope\":\"", 9);
  if (*(_BYTE *)(a3 + 24))
  {
    v11 = *(char *)(a3 + 23);
    if (v11 >= 0)
      v12 = a3;
    else
      v12 = *(_QWORD *)a3;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a3 + 23);
    else
      v13 = *(_QWORD *)(a3 + 8);
    v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(result, v12, v13);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"\",", 2);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

_QWORD *AMSCore::Trace::`anonymous namespace'::writeEvent(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"name\":\"", 8);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, v6, v7);
  v27 = 34;
  v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v27, 1);
  v28 = 44;
  v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)&v28, 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"ts\":", 5);
  v11 = (_QWORD *)std::ostream::operator<<();
  v29 = 44;
  v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)&v29, 1);
  v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"pid\":", 6);
  v30 = 49;
  v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)&v30, 1);
  v31 = 44;
  v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)&v31, 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"tid\":", 6);
  {
  }
  else
  {
    do
    *v23 = v24;
    *(_BYTE *)v26(v25) = 1;
  }
  result = (_QWORD *)std::ostream::operator<<();
  if (*(_BYTE *)(a2 + 52))
  {
    result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)",\"id\":", 6);
    if (!*(_BYTE *)(a2 + 52))
      goto LABEL_26;
    result = (_QWORD *)std::ostream::operator<<();
  }
  if (*(_BYTE *)(a2 + 80))
  {
    result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)",\"cat\":\"", 8);
    if (*(_BYTE *)(a2 + 80))
    {
      v17 = *(char *)(a2 + 79);
      if (v17 >= 0)
        v18 = a2 + 56;
      else
        v18 = *(_QWORD *)(a2 + 56);
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(a2 + 79);
      else
        v19 = *(_QWORD *)(a2 + 64);
      v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(result, v18, v19);
      v32 = 34;
      result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)&v32, 1);
      goto LABEL_21;
    }
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_21:
  if (*(_QWORD *)(a2 + 40))
  {
    v21 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)",\"args\":", 8);
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:fe180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_18CCD106C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x18D789B58](v1);
  _Unwind_Resume(a1);
}

void AMSCore::HTTPCacheProvider::~HTTPCacheProvider(AMSCore::HTTPCacheProvider *this)
{
  AMSCore::HTTPCacheProvider::~HTTPCacheProvider(this);
  JUMPOUT(0x18D789BDCLL);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  AMSCore::HTTPCacheProvider *v5;
  uint64_t v6;
  uint64_t v7;
  AMSCore::HTTPCacheProvider *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)this = &off_1E2520B60;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*((_QWORD *)this + 18));
  if (*((_QWORD *)this + 16))
  {
    v6 = *((_QWORD *)this + 14);
    v5 = (AMSCore::HTTPCacheProvider *)*((_QWORD *)this + 15);
    v7 = *(_QWORD *)v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    *((_QWORD *)this + 16) = 0;
    if (v5 != (AMSCore::HTTPCacheProvider *)((char *)this + 112))
    {
      do
      {
        v8 = (AMSCore::HTTPCacheProvider *)*((_QWORD *)v5 + 1);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != (AMSCore::HTTPCacheProvider *)((char *)this + 112));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v12)
      return;
  }
  else
  {
LABEL_13:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v12)
      return;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __n128 *a6@<X5>, _OWORD *a7@<X8>)
{
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void **v22;
  unsigned int v23;
  void (***v24)(uint64_t);
  int *v25;
  int v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  void *v31;
  std::string *v32;
  std::string::size_type size;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  std::__shared_weak_count *imp;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  __int128 v74;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  const std::runtime_error *v79;
  char v80;
  const char **v81;
  std::__libcpp_refstring *p_imp;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  const std::runtime_error *v87;
  std::runtime_error_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char *v116;
  char *v117;
  _OWORD *v118;
  _QWORD *v119;
  __n128 v120;
  void **v121;
  _BYTE *v122;
  uint64_t *v123;
  AMSCore::ExecuteHTTPRequestTask::Options *v124;
  _OWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  AMSCore::ExecuteHTTPRequestTask::Options *v128;
  AMSCore::ExecuteHTTPRequestTask::Options *v129;
  void **v130;
  void **v131;
  std::runtime_error *v132;
  void **v133;
  int **v135;
  void **v136;
  std::runtime_error v137;
  __int128 v138;
  unsigned int **v139;
  unsigned int *v140[2];
  __int128 v141;
  void *__p[2];
  uint64_t v143;
  char v144;
  void *v145[2];
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  std::string v149;
  _UNKNOWN **v150;
  _QWORD v151[63];
  char v152;
  std::runtime_error v153;
  __int128 v154;
  unsigned int **v155;
  uint64_t v156;
  unsigned int *v157;
  __int128 v158;
  char v159;
  char v160[17];

  v12 = (char *)operator new(0x830uLL);
  *(_QWORD *)v12 = AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache;
  *((_QWORD *)v12 + 1) = AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v12 + 152), a2);
  *((_OWORD *)v12 + 33) = *(_OWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  *((_QWORD *)v12 + 166) = *(_QWORD *)a3;
  v13 = v12 + 1336;
  v14 = (_QWORD *)(a3 + 8);
  v15 = *(_QWORD *)(a3 + 8);
  *((_QWORD *)v12 + 167) = v15;
  v16 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)v12 + 168) = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)a3 = v14;
    *v14 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *((_QWORD *)v12 + 166) = v13;
  }
  v119 = v12 + 1336;
  v17 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v18 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v12 + 1352) = v17;
  *(_OWORD *)(v12 + 1368) = v18;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v12[1384] = 0;
  v12[1408] = 0;
  if (*(_BYTE *)(a3 + 80))
  {
    *(_OWORD *)(v12 + 1384) = *(_OWORD *)(a3 + 56);
    *((_QWORD *)v12 + 175) = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    v12[1408] = 1;
  }
  v118 = v12 + 1384;
  v12[1416] = 0;
  *((_DWORD *)v12 + 358) = -1;
  v19 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v19 != -1)
  {
    ((void (*)(std::string *, char *, uint64_t))off_1E253CA98[v19])(&v149, v12 + 1416, a3 + 88);
    *((_DWORD *)v12 + 358) = v19;
  }
  v21 = (_QWORD *)(a3 + 160);
  v20 = *(_QWORD *)(a3 + 160);
  *((_OWORD *)v12 + 90) = *(_OWORD *)(a3 + 112);
  *((_DWORD *)v12 + 364) = *(_DWORD *)(a3 + 128);
  v116 = v12 + 1464;
  v117 = v12 + 1416;
  if (v20)
  {
    if (v20 == a3 + 136)
    {
      *((_QWORD *)v12 + 186) = v12 + 1464;
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      goto LABEL_14;
    }
    *((_QWORD *)v12 + 186) = v20;
  }
  else
  {
    v21 = v12 + 1488;
  }
  *v21 = 0;
LABEL_14:
  v121 = (void **)(v12 + 936);
  v122 = v12 + 2088;
  v132 = (std::runtime_error *)(v12 + 1832);
  v133 = (void **)(v12 + 544);
  v123 = (uint64_t *)(v12 + 1912);
  v124 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v12 + 1664);
  v22 = (void **)(v12 + 1944);
  v131 = (void **)(v12 + 1968);
  v129 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v12 + 1496);
  v130 = (void **)(v12 + 1992);
  v135 = (int **)(v12 + 528);
  v136 = (void **)(v12 + 2016);
  v126 = v12 + 1352;
  v127 = v12 + 1368;
  v125 = v12 + 1440;
  *((_OWORD *)v12 + 126) = *(_OWORD *)a4;
  *((_QWORD *)v12 + 254) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v120 = *a6;
  *(__n128 *)(v12 + 2040) = *a6;
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  do
    v23 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v23 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v12[24] = 0;
  v24 = (void (***)(uint64_t))(v12 + 24);
  v12[104] = 0;
  *((_QWORD *)v12 + 14) = 0;
  *((_QWORD *)v12 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v149, (uint64_t)(v12 + 16));
  v128 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v12 + 1328);
  *a7 = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
  v25 = *v135;
  v26 = *((char *)*v135 + 223);
  if (v26 >= 0)
    v27 = (uint64_t *)(*v135 + 50);
  else
    v27 = (uint64_t *)*((_QWORD *)*v135 + 25);
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)*v135 + 223);
  else
    v28 = *((_QWORD *)*v135 + 26);
  v29 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v27, v28);
  AMSCore::URL::getStringRepresentation((AMSCore::URL *)v25, &v149);
  v30 = SHIBYTE(v149.__r_.__value_.__r.__words[2]);
  v31 = (void *)v149.__r_.__value_.__r.__words[0];
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v149;
  else
    v32 = (std::string *)v149.__r_.__value_.__r.__words[0];
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  else
    size = v149.__r_.__value_.__l.__size_;
  v34 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)v32, size);
  if (v30 < 0)
    operator delete(v31);
  std::to_string((std::string *)v12 + 81, v29 ^ (2 * (v34 ^ v25[38])));
  (*(void (**)(std::string *__return_ptr, _QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 16))(&v149, *(_QWORD *)(a1 + 8), v136, v12 + 1944);
  if (v152)
  {
    BYTE7(v154) = 4;
    strcpy((char *)&v153, "ETag");
    v35 = (void **)(v12 + 152);
    AMSCore::IHTTPHeaderMap::getSingleValueOrNone((std::string *)&v137, v151, (char *)&v153);
    if (SBYTE7(v154) < 0)
      operator delete(v153.__vftable);
    if (!v152)
      goto LABEL_200;
    AMSCore::HTTPResponse::getCacheControlTimePointIfDefined((uint64_t)&v153, (uint64_t)&v149, 0, 0);
    if (v159)
    {
      v36 = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v120.n128_u64[0] + 16))(v120.n128_u64[0], v120);
      v37 = (uint64_t)v153.__vftable <= v36;
    }
    else
    {
      if (!v152)
        goto LABEL_200;
      v40 = v151[62] + 1000000 * a5;
      v37 = v40 <= (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v120.n128_u64[0] + 16))(v120.n128_u64[0], v120);
    }
    v41 = v37;
    if (v159)
    {
      if (!v41)
      {
LABEL_89:
        if (!v152)
          goto LABEL_200;
        goto LABEL_90;
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v153.~runtime_error)(&v153);
      if (!v41)
        goto LABEL_89;
    }
    v147 = *(_OWORD *)v22;
    v148 = *((_QWORD *)v12 + 245);
    *((_QWORD *)v12 + 244) = 0;
    *((_QWORD *)v12 + 245) = 0;
    *v22 = 0;
    *(_OWORD *)v145 = *(_OWORD *)v136;
    v146 = *((_QWORD *)v12 + 254);
    *v136 = 0;
    *((_QWORD *)v12 + 253) = 0;
    *((_QWORD *)v12 + 254) = 0;
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v121, (uint64_t)(v12 + 152));
    *((_OWORD *)v12 + 82) = *((_OWORD *)v12 + 33);
    *v135 = 0;
    *((_QWORD *)v12 + 67) = 0;
    *((_QWORD *)v12 + 208) = *((_QWORD *)v12 + 166);
    v42 = v12 + 1672;
    v43 = *((_QWORD *)v12 + 167);
    *((_QWORD *)v12 + 209) = v43;
    v44 = *((_QWORD *)v12 + 168);
    *((_QWORD *)v12 + 210) = v44;
    if (v44)
    {
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)v128 = v119;
      *v119 = 0;
      *((_QWORD *)v12 + 168) = 0;
    }
    else
    {
      *(_QWORD *)v124 = v42;
    }
    v46 = *(_OWORD *)(v12 + 1352);
    v47 = *(_OWORD *)(v12 + 1368);
    *v126 = 0;
    *((_QWORD *)v12 + 170) = 0;
    *(_OWORD *)(v12 + 1688) = v46;
    *(_OWORD *)(v12 + 1704) = v47;
    *v127 = 0;
    *((_QWORD *)v12 + 172) = 0;
    v12[1720] = 0;
    v12[1744] = 0;
    if (v12[1408])
    {
      *(_OWORD *)(v12 + 1720) = *v118;
      *((_QWORD *)v12 + 217) = *((_QWORD *)v12 + 175);
      *((_QWORD *)v12 + 174) = 0;
      *((_QWORD *)v12 + 175) = 0;
      *(_QWORD *)v118 = 0;
      v12[1744] = 1;
    }
    v12[1752] = 0;
    *((_DWORD *)v12 + 442) = -1;
    v48 = *((unsigned int *)v12 + 358);
    if ((_DWORD)v48 != -1)
    {
      ((void (*)(char *, char *, char *))off_1E253CA98[v48])(v160, v12 + 1752, v117);
      *((_DWORD *)v12 + 442) = v48;
    }
    *((_OWORD *)v12 + 111) = *v125;
    *((_DWORD *)v12 + 448) = *((_DWORD *)v12 + 364);
    v49 = (char *)*((_QWORD *)v12 + 186);
    if (v49)
    {
      if (v49 == v116)
      {
        *((_QWORD *)v12 + 228) = v12 + 1800;
        (*(void (**)(char *))(*((_QWORD *)v12 + 183) + 24))(v116);
LABEL_67:
        LOBYTE(__p[0]) = 0;
        v144 = 0;
        if (BYTE8(v138))
        {
          *(std::runtime_error *)__p = v137;
          v143 = v138;
          v137.__imp_.__imp_ = 0;
          *(_QWORD *)&v138 = 0;
          v137.__vftable = 0;
          v144 = 1;
        }
        AMSCore::HTTPCacheProvider::downloadAndUpdateCache(&v153, a1, (uint64_t)&v147, (uint64_t)v145, (uint64_t)v121, (uint64_t)v124, (uint64_t *)__p);
        imp = (std::__shared_weak_count *)v153.__imp_.__imp_;
        v153.__vftable = 0;
        v153.__imp_.__imp_ = 0;
        if (imp)
        {
          p_shared_owners = (unint64_t *)&imp->__shared_owners_;
          do
            v53 = __ldaxr(p_shared_owners);
          while (__stlxr(v53 - 1, p_shared_owners));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
        v54 = (std::__shared_weak_count *)v153.__imp_.__imp_;
        if (v153.__imp_.__imp_)
        {
          v55 = (unint64_t *)(v153.__imp_.__imp_ + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (v144 && SHIBYTE(v143) < 0)
          operator delete(__p[0]);
        AMSCore::ExecuteHTTPRequestTask::Options::~Options(v124);
        v57 = (std::__shared_weak_count *)*((_QWORD *)v12 + 165);
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v121);
        if (SHIBYTE(v146) < 0)
        {
          operator delete(v145[0]);
          if ((SHIBYTE(v148) & 0x80000000) == 0)
            goto LABEL_89;
        }
        else if ((SHIBYTE(v148) & 0x80000000) == 0)
        {
          goto LABEL_89;
        }
        operator delete((void *)v147);
        if (!v152)
          goto LABEL_200;
LABEL_90:
        v60 = operator new(0x2A8uLL);
        v60[1] = 0;
        v60[2] = 0;
        *v60 = &off_1E25227E0;
        AMSCore::HTTPResponse::HTTPResponse((uint64_t)(v60 + 3), (__int128 *)&v149);
        if (v12[104])
        {
          if (v12[96])
          {
            v61 = (std::__shared_weak_count *)*((_QWORD *)v12 + 4);
            if (v61)
            {
              v62 = (unint64_t *)&v61->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
          }
          else
          {
            (**v24)((uint64_t)(v12 + 24));
          }
        }
        *((_QWORD *)v12 + 3) = v60 + 3;
        *((_QWORD *)v12 + 4) = v60;
        v12[96] = 1;
        v12[104] = 1;
        if (BYTE8(v138) && SBYTE7(v138) < 0)
          operator delete(v137.__vftable);
        goto LABEL_111;
      }
      v50 = v12 + 1488;
      *((_QWORD *)v12 + 228) = v49;
    }
    else
    {
      v50 = v12 + 1824;
    }
    *v50 = 0;
    goto LABEL_67;
  }
  v35 = (void **)(v12 + 152);
  if (v150 == &AMSCore::Error::Category::generic(void)::instance && LODWORD(v149.__r_.__value_.__r.__words[2]) == 7)
  {
    v38 = 0;
    v39 = 1;
    goto LABEL_39;
  }
  AMSCore::Error::Error(&v153, (const std::runtime_error *)&v149);
  std::runtime_error::runtime_error(&v137, &v153);
  v138 = v154;
  v137.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v45 = (unsigned int *)v156;
  v139 = v155;
  v140[0] = (unsigned int *)v156;
  v140[1] = v157;
  if (v157)
  {
    *(_QWORD *)(v156 + 16) = v140;
    v155 = (unsigned int **)&v156;
    v156 = 0;
    v157 = 0;
    v45 = 0;
  }
  else
  {
    v139 = v140;
  }
  v141 = v158;
  v158 = 0uLL;
  v153.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, v45);
  MEMORY[0x18D7898AC](&v153);
  std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v12 + 24), &v137);
  v137.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v140[0]);
  MEMORY[0x18D7898AC](&v137);
LABEL_111:
  v39 = 0;
  v38 = 3;
  if (v152)
  {
    AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v149);
LABEL_40:
    if ((v12[1967] & 0x80000000) == 0)
      goto LABEL_41;
LABEL_165:
    operator delete(*v22);
    if (v38 != 3)
      goto LABEL_167;
LABEL_166:
    *((_QWORD *)v12 + 229) = v12 + 16;
    *(_QWORD *)v12 = 0;
    *v122 = 1;
    AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v132);
    return;
  }
LABEL_39:
  (*(void (**)(std::string *))v149.__r_.__value_.__l.__data_)(&v149);
  if (!v39)
    goto LABEL_40;
  *(_OWORD *)v131 = *(_OWORD *)v22;
  *((_QWORD *)v12 + 248) = *((_QWORD *)v12 + 245);
  *((_QWORD *)v12 + 244) = 0;
  *((_QWORD *)v12 + 245) = 0;
  *v22 = 0;
  *(_OWORD *)v130 = *(_OWORD *)v136;
  *((_QWORD *)v12 + 251) = *((_QWORD *)v12 + 254);
  *v136 = 0;
  *((_QWORD *)v12 + 253) = 0;
  *((_QWORD *)v12 + 254) = 0;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v133, (uint64_t)v35);
  *(_OWORD *)(v12 + 920) = *((_OWORD *)v12 + 33);
  *v135 = 0;
  *((_QWORD *)v12 + 67) = 0;
  *((_QWORD *)v12 + 187) = *((_QWORD *)v12 + 166);
  v67 = v12 + 1504;
  v68 = *((_QWORD *)v12 + 167);
  *((_QWORD *)v12 + 188) = v68;
  v69 = *((_QWORD *)v12 + 168);
  *((_QWORD *)v12 + 189) = v69;
  if (v69)
  {
    *(_QWORD *)(v68 + 16) = v67;
    *(_QWORD *)v128 = v119;
    *v119 = 0;
    *((_QWORD *)v12 + 168) = 0;
  }
  else
  {
    *(_QWORD *)v129 = v67;
  }
  *((_OWORD *)v12 + 95) = *(_OWORD *)v126;
  *v126 = 0;
  *((_QWORD *)v12 + 170) = 0;
  *((_OWORD *)v12 + 96) = *(_OWORD *)v127;
  *v127 = 0;
  *((_QWORD *)v12 + 172) = 0;
  v12[1552] = 0;
  v12[1576] = 0;
  if (v12[1408])
  {
    *((_OWORD *)v12 + 97) = *v118;
    *((_QWORD *)v12 + 196) = *((_QWORD *)v12 + 175);
    *((_QWORD *)v12 + 174) = 0;
    *((_QWORD *)v12 + 175) = 0;
    *(_QWORD *)v118 = 0;
    v12[1576] = 1;
  }
  v12[1584] = 0;
  *((_DWORD *)v12 + 400) = -1;
  v70 = *((unsigned int *)v12 + 358);
  if ((_DWORD)v70 != -1)
  {
    ((void (*)(std::string *, char *, char *))off_1E253CA98[v70])(&v149, v12 + 1584, v117);
    *((_DWORD *)v12 + 400) = v70;
  }
  *(_OWORD *)(v12 + 1608) = *v125;
  *((_DWORD *)v12 + 406) = *((_DWORD *)v12 + 364);
  v71 = (char *)*((_QWORD *)v12 + 186);
  if (v71)
  {
    v72 = v12 + 2056;
    if (v71 == v116)
    {
      *((_QWORD *)v12 + 207) = v12 + 1632;
      (*(void (**)(char *))(*((_QWORD *)v12 + 183) + 24))(v116);
      goto LABEL_126;
    }
    v73 = v12 + 1488;
    *((_QWORD *)v12 + 207) = v71;
  }
  else
  {
    v73 = v12 + 1656;
    v72 = v12 + 2056;
  }
  *v73 = 0;
LABEL_126:
  v12[1912] = 0;
  v12[1936] = 0;
  AMSCore::HTTPCacheProvider::downloadAndUpdateCache(v72, a1, (uint64_t)v131, (uint64_t)v130, (uint64_t)v133, (uint64_t)v129, v123);
  v74 = *(_OWORD *)(v12 + 2056);
  *(_OWORD *)(v12 + 2072) = v74;
  *(_QWORD *)v72 = 0;
  *((_QWORD *)v72 + 1) = 0;
  if (!atomic_load((unint64_t *)(v74 + 96)))
  {
    *v122 = 0;
    v76 = (unint64_t *)(*((_QWORD *)v12 + 259) + 96);
    do
      v77 = __ldaxr(v76);
    while (__stlxr((unint64_t)v12, v76));
    if (!v77)
      return;
  }
  v78 = *((_QWORD *)v12 + 259);
  if (!*(_BYTE *)(v78 + 88))
  {
LABEL_200:
    __break(1u);
    return;
  }
  v79 = (const std::runtime_error *)(v78 + 8);
  v80 = *(_BYTE *)(v78 + 80);
  if (v80)
  {
    *((_QWORD *)v12 + 229) = *(_QWORD *)(v78 + 8);
    v81 = (const char **)(v12 + 1840);
    p_imp = (std::__libcpp_refstring *)(v78 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v132, v79);
    *(_OWORD *)(v12 + 1848) = *(_OWORD *)(v78 + 24);
    *((_QWORD *)v12 + 229) = off_1E2521330;
    v83 = (_QWORD *)(v78 + 48);
    v84 = *(_QWORD *)(v78 + 48);
    *((_QWORD *)v12 + 233) = *(_QWORD *)(v78 + 40);
    v85 = v12 + 1872;
    *((_QWORD *)v12 + 234) = v84;
    v86 = *(_QWORD *)(v78 + 56);
    *((_QWORD *)v12 + 235) = v86;
    if (v86)
    {
      *(_QWORD *)(v84 + 16) = v85;
      *(_QWORD *)(v78 + 40) = v83;
      *v83 = 0;
      *(_QWORD *)(v78 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v12 + 233) = v85;
    }
    v87 = (const std::runtime_error *)*((_QWORD *)v12 + 259);
    v88 = v87[4].__vftable;
    v79 = v87 + 4;
    *((_QWORD *)v12 + 236) = v88;
    v81 = (const char **)(v12 + 1896);
    p_imp = &v79->__imp_;
  }
  *v81 = p_imp->__imp_;
  v79->__vftable = 0;
  v79->__imp_.__imp_ = 0;
  v12[1904] = v80;
  std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v12 + 24), v132);
  if (v12[1904])
  {
    v89 = (std::__shared_weak_count *)*((_QWORD *)v12 + 230);
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v132->~runtime_error)(v132);
  }
  v92 = *((_QWORD *)v12 + 260);
  if (v92)
  {
    v93 = (unint64_t *)(v92 + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      v95 = (std::__shared_weak_count *)*((_QWORD *)v12 + 260);
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v96 = (std::__shared_weak_count *)*((_QWORD *)v12 + 258);
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (v12[1936] && v12[1935] < 0)
    operator delete((void *)*v123);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v129);
  v99 = (std::__shared_weak_count *)*((_QWORD *)v12 + 116);
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v133);
  if (v12[2015] < 0)
  {
    operator delete(*v130);
    if ((v12[1991] & 0x80000000) == 0)
      goto LABEL_164;
  }
  else if ((v12[1991] & 0x80000000) == 0)
  {
    goto LABEL_164;
  }
  operator delete(*v131);
LABEL_164:
  v38 = 3;
  if (v12[1967] < 0)
    goto LABEL_165;
LABEL_41:
  if (v38 == 3)
    goto LABEL_166;
LABEL_167:
  v102 = (char *)*((_QWORD *)v12 + 18);
  if (v102 == v12 + 120)
  {
    v103 = 4;
    v102 = v12 + 120;
  }
  else
  {
    if (!v102)
      goto LABEL_172;
    v103 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v102 + 8 * v103))(v102);
LABEL_172:
  if (v12[104])
  {
    if (v12[96])
    {
      v104 = (std::__shared_weak_count *)*((_QWORD *)v12 + 4);
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
    }
    else
    {
      (**v24)((uint64_t)(v12 + 24));
    }
  }
  do
  {
    v107 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v108 = v107 - 1;
  }
  while (__stlxr(v108, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v108)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v109 = (std::__shared_weak_count *)*((_QWORD *)v12 + 256);
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
      if ((v12[2039] & 0x80000000) == 0)
        goto LABEL_191;
      goto LABEL_190;
    }
  }
  if (v12[2039] < 0)
LABEL_190:
    operator delete(*v136);
LABEL_191:
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v128);
  v112 = (std::__shared_weak_count *)*((_QWORD *)v12 + 67);
  if (v112)
  {
    v113 = (unint64_t *)&v112->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v35);
  operator delete(v12);
}

void sub_18CCD1F60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, AMSCore::EncodeHTTPRequestTask::Result *a19, uint64_t a20,uint64_t a21,AMSCore::ExecuteHTTPRequestTask::Options *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,AMSCore::ExecuteHTTPRequestTask::Options *a28,uint64_t a29,uint64_t a30,uint64_t a31,AMSCore::EncodeHTTPRequestTask::Result *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  void **v58;

  if (LOBYTE(STACK[0x418]))
  {
    AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&a57);
    if ((*(char *)(v57 + 1967) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    (*(void (**)(uint64_t *))a57)(&a57);
    if ((*(char *)(v57 + 1967) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*v58);
LABEL_6:
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCD20E4()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCD1D94);
}

void sub_18CCD20EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,AMSCore::ExecuteHTTPRequestTask::Options *a26,AMSCore::EncodeHTTPRequestTask::Result *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  char *v35;

  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::ValuePromise::~ValuePromise(a11);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a9);
  if (v35[2039] < 0)
    operator delete(*a35);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(a26);
  AMSCore::EncodeHTTPRequestTask::Result::~Result(a27);
  operator delete(v35);
  _Unwind_Resume(a1);
}

void AMSCore::HTTPCacheProvider::shutdown(AMSCore::HTTPCacheProvider *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_BYTE *AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  const char **v6;
  std::__libcpp_refstring *p_imp;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  const std::runtime_error *v12;
  std::runtime_error_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;

  v1 = *((_QWORD *)result + 259);
  if (*(_BYTE *)(v1 + 88))
  {
    v2 = result;
    v3 = (std::runtime_error *)(result + 1832);
    v4 = (const std::runtime_error *)(v1 + 8);
    v5 = *(_BYTE *)(v1 + 80);
    if (v5)
    {
      *((_QWORD *)result + 229) = *(_QWORD *)(v1 + 8);
      v6 = (const char **)(result + 1840);
      p_imp = (std::__libcpp_refstring *)(v1 + 16);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 1832), v4);
      *(_OWORD *)(v2 + 1848) = *(_OWORD *)(v1 + 24);
      *((_QWORD *)v2 + 229) = off_1E2521330;
      v8 = (_QWORD *)(v1 + 48);
      v9 = *(_QWORD *)(v1 + 48);
      *((_QWORD *)v2 + 233) = *(_QWORD *)(v1 + 40);
      v10 = v2 + 1872;
      *((_QWORD *)v2 + 234) = v9;
      v11 = *(_QWORD *)(v1 + 56);
      *((_QWORD *)v2 + 235) = v11;
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v1 + 40) = v8;
        *v8 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 233) = v10;
      }
      v12 = (const std::runtime_error *)*((_QWORD *)v2 + 259);
      v13 = v12[4].__vftable;
      v4 = v12 + 4;
      *((_QWORD *)v2 + 236) = v13;
      v6 = (const char **)(v2 + 1896);
      p_imp = &v4->__imp_;
    }
    *v6 = p_imp->__imp_;
    v4->__vftable = 0;
    v4->__imp_.__imp_ = 0;
    v2[1904] = v5;
    std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v2 + 24), v3);
    if (v2[1904])
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 230);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    }
    v17 = *((_QWORD *)v2 + 260);
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v2 + 260);
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)v2 + 258);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v2[1936] && (char)v2[1935] < 0)
      operator delete(*((void **)v2 + 239));
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v2 + 1496));
    v24 = (std::__shared_weak_count *)*((_QWORD *)v2 + 116);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2 + 68);
    if ((char)v2[2015] < 0)
    {
      operator delete(*((void **)v2 + 249));
      if (((char)v2[1991] & 0x80000000) == 0)
      {
LABEL_35:
        if (((char)v2[1967] & 0x80000000) == 0)
        {
LABEL_36:
          *((_QWORD *)v2 + 229) = v2 + 16;
          *(_QWORD *)v2 = 0;
          v2[2088] = 1;
          return AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
        }
LABEL_39:
        operator delete(*((void **)v2 + 243));
        goto LABEL_36;
      }
    }
    else if (((char)v2[1991] & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(*((void **)v2 + 246));
    if (((char)v2[1967] & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_39;
  }
  __break(1u);
  return result;
}

void AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  if ((*(_BYTE *)(a1 + 2088) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 2080);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = *(std::__shared_weak_count **)(a1 + 2080);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = *(std::__shared_weak_count **)(a1 + 2064);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (*(_BYTE *)(a1 + 1936) && *(char *)(a1 + 1935) < 0)
      operator delete(*(void **)(a1 + 1912));
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1496));
    v9 = *(std::__shared_weak_count **)(a1 + 928);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 544));
    if (*(char *)(a1 + 2015) < 0)
    {
      operator delete(*(void **)(a1 + 1992));
      if ((*(char *)(a1 + 1991) & 0x80000000) == 0)
      {
LABEL_22:
        if ((*(char *)(a1 + 1967) & 0x80000000) == 0)
          goto LABEL_23;
LABEL_55:
        operator delete(*(void **)(a1 + 1944));
        goto LABEL_23;
      }
    }
    else if ((*(char *)(a1 + 1991) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(*(void **)(a1 + 1968));
    if ((*(char *)(a1 + 1967) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_23:
  v12 = *(_QWORD **)(a1 + 144);
  if (v12 == (_QWORD *)(a1 + 120))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 120);
  }
  else
  {
    if (!v12)
      goto LABEL_28;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_28:
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      v14 = *(std::__shared_weak_count **)(a1 + 32);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    }
  }
  do
  {
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v18)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v19 = *(std::__shared_weak_count **)(a1 + 2048);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if ((*(char *)(a1 + 2039) & 0x80000000) == 0)
        goto LABEL_45;
      goto LABEL_44;
    }
  }
  if (*(char *)(a1 + 2039) < 0)
LABEL_44:
    operator delete(*(void **)(a1 + 2016));
LABEL_45:
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1328));
  v22 = *(std::__shared_weak_count **)(a1 + 536);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 152));
  operator delete((void *)a1);
}

_QWORD *std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E25237D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CCD26FC(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CCD2730(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMSCore::HTTPCacheProvider::downloadAndUpdateCache(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  _BYTE *v36;
  std::mutex **v37;
  char *v38;
  uint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  std::mutex *v42;
  int v43;
  std::mutex *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 v52;
  _QWORD *v53;
  std::mutex *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  std::string::size_type v63;
  const std::string::value_type *v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  char *v73;
  void **v74;
  char *v75;
  void *v76;
  char v77;
  uint64_t v78;
  char *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  std::mutex *v90;
  int v91;
  std::mutex *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;
  std::string *v115;
  AMSCore::ExecuteHTTPRequestTask::Options *v116;
  std::string *v117;
  uint64_t *v118;
  std::mutex **v119;
  std::runtime_error *v120;
  void **v121;
  const void **v122;
  _BYTE *v123;
  void *__p;
  _BYTE v125[15];
  char v126;
  char v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  __int128 *v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v14 = (char *)operator new(0x608uLL);
  *(_QWORD *)v14 = AMSCore::HTTPCacheProvider::downloadAndUpdateCache;
  *((_QWORD *)v14 + 1) = AMSCore::HTTPCacheProvider::downloadAndUpdateCache;
  *((_QWORD *)v14 + 184) = a2;
  v122 = (const void **)(v14 + 1352);
  *(_OWORD *)(v14 + 1352) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 171) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v15 = *(_QWORD *)(a4 + 8);
  *((_QWORD *)v14 + 185) = *(_QWORD *)a4;
  *((_QWORD *)v14 + 186) = v15;
  *((_DWORD *)v14 + 382) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(v14 + 1531) = *(_DWORD *)(a4 + 19);
  v14[1535] = *(_BYTE *)(a4 + 23);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v14 + 152), a5);
  *((_OWORD *)v14 + 33) = *(_OWORD *)(a5 + 376);
  *(_QWORD *)(a5 + 376) = 0;
  *(_QWORD *)(a5 + 384) = 0;
  *((_QWORD *)v14 + 117) = *(_QWORD *)a6;
  v16 = v14 + 944;
  v17 = (_QWORD *)(a6 + 8);
  v18 = *(_QWORD *)(a6 + 8);
  *((_QWORD *)v14 + 118) = v18;
  v19 = *(_QWORD *)(a6 + 16);
  *((_QWORD *)v14 + 119) = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)a6 = v17;
    *v17 = 0;
    *(_QWORD *)(a6 + 16) = 0;
  }
  else
  {
    *((_QWORD *)v14 + 117) = v16;
  }
  v114 = v14 + 944;
  v20 = *(_OWORD *)(a6 + 24);
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  v21 = *(_OWORD *)(a6 + 40);
  *((_OWORD *)v14 + 60) = v20;
  *((_OWORD *)v14 + 61) = v21;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  v22 = v14 + 992;
  v14[992] = 0;
  v14[1016] = 0;
  if (*(_BYTE *)(a6 + 80))
  {
    *v22 = *(_OWORD *)(a6 + 56);
    *((_QWORD *)v14 + 126) = *(_QWORD *)(a6 + 72);
    *(_QWORD *)(a6 + 64) = 0;
    *(_QWORD *)(a6 + 72) = 0;
    *(_QWORD *)(a6 + 56) = 0;
    v14[1016] = 1;
  }
  v14[1024] = 0;
  *((_DWORD *)v14 + 260) = -1;
  v23 = *(unsigned int *)(a6 + 104);
  if ((_DWORD)v23 != -1)
  {
    ((void (*)(__int128 *, char *, uint64_t))off_1E253CA98[v23])(&v129, v14 + 1024, a6 + 88);
    *((_DWORD *)v14 + 260) = v23;
  }
  v24 = *(_QWORD *)(a6 + 160);
  *(_OWORD *)(v14 + 1048) = *(_OWORD *)(a6 + 112);
  v25 = *(_DWORD *)(a6 + 128);
  *((_DWORD *)v14 + 266) = v25;
  if (v24)
  {
    LOBYTE(v25) = a6 - 120;
    if (v24 == a6 + 136)
    {
      *((_QWORD *)v14 + 137) = v14 + 1072;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v24 + 24))(v24, v14 + 1072);
    }
    else
    {
      *((_QWORD *)v14 + 137) = v24;
      *(_QWORD *)(a6 + 160) = 0;
    }
  }
  else
  {
    *((_QWORD *)v14 + 137) = 0;
  }
  v121 = (void **)(v14 + 544);
  v26 = (uint64_t *)(v14 + 1456);
  v27 = *((unsigned __int8 *)a7 + 24);
  v14[1536] = v27;
  if (v27)
  {
    v28 = *a7;
    *v26 = a7[1];
    *(_QWORD *)(v14 + 1463) = *(uint64_t *)((char *)a7 + 15);
    LOBYTE(v25) = *((_BYTE *)a7 + 23);
    a7[1] = 0;
    a7[2] = 0;
    *a7 = 0;
  }
  else
  {
    v28 = 0;
  }
  v123 = v14 + 1471;
  v120 = (std::runtime_error *)(v14 + 1272);
  v115 = (std::string *)(v14 + 1376);
  v116 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v14 + 1104);
  v117 = (std::string *)(v14 + 1400);
  v118 = (uint64_t *)(v14 + 1424);
  v119 = (std::mutex **)(v14 + 1440);
  *((_QWORD *)v14 + 187) = v28;
  v14[1537] = v25;
  do
    v29 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v29 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v14[24] = 0;
  v14[104] = 0;
  *((_QWORD *)v14 + 14) = 0;
  *((_QWORD *)v14 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v129, (uint64_t)(v14 + 16));
  *a1 = v129;
  v30 = (unsigned __int8 *)(a2 + 104);
  do
    v31 = __ldaxr(v30);
  while (__stxr(1u, v30));
  if ((v31 & 1) != 0)
  {
    *v123 = 0;
    std::mutex::lock((std::mutex *)(*((_QWORD *)v14 + 184) + 40));
    v50 = *((_QWORD *)v14 + 184);
    if (*(_QWORD *)(v50 + 128))
      goto LABEL_39;
    v51 = (unsigned __int8 *)(v50 + 104);
    do
      v52 = __ldxr(v51);
    while (__stlxr(1u, v51));
    if ((v52 & 1) != 0)
    {
LABEL_39:
      v53 = operator new(0x18uLL);
      v54 = (std::mutex *)(*((_QWORD *)v14 + 184) + 40);
      v53[1] = v50 + 112;
      v53[2] = v14;
      v55 = *(_QWORD *)(v50 + 112);
      *v53 = v55;
      *(_QWORD *)(v55 + 8) = v53;
      *(_QWORD *)(v50 + 112) = v53;
      ++*(_QWORD *)(v50 + 128);
      goto LABEL_40;
    }
    std::mutex::unlock((std::mutex *)(*((_QWORD *)v14 + 184) + 40));
  }
  v32 = *((_QWORD *)v14 + 184);
  *((_QWORD *)v14 + 180) = v32 + 40;
  v14[1448] = 1;
  v33 = (uint64_t **)(v32 + 136);
  v34 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v32 + 136, v122);
  *((_QWORD *)v14 + 188) = v34;
  if ((uint64_t *)(v32 + 144) == v34)
  {
    if (v14[1375] < 0)
    {
      std::string::__init_copy_ctor_external(v117, *((const std::string::value_type **)v14 + 169), *((_QWORD *)v14 + 170));
    }
    else
    {
      *(_OWORD *)&v117->__r_.__value_.__l.__data_ = *(_OWORD *)v122;
      *((_QWORD *)v14 + 177) = *((_QWORD *)v14 + 171);
    }
    v62 = v14[1535];
    v63 = *((_QWORD *)v14 + 186);
    v64 = (const std::string::value_type *)*((_QWORD *)v14 + 185);
    if (v62 < 0)
    {
      std::string::__init_copy_ctor_external(v115, v64, v63);
    }
    else
    {
      *((_QWORD *)v14 + 172) = v64;
      *((_QWORD *)v14 + 173) = v63;
      *((_DWORD *)v14 + 348) = *((_DWORD *)v14 + 382);
      *(_DWORD *)(v14 + 1395) = *(_DWORD *)(v14 + 1531);
      v14[1399] = v62;
    }
    v65 = v14[1536];
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v121, (uint64_t)(v14 + 152));
    *(_OWORD *)(v14 + 920) = *((_OWORD *)v14 + 33);
    *((_QWORD *)v14 + 66) = 0;
    *((_QWORD *)v14 + 67) = 0;
    *((_QWORD *)v14 + 138) = *((_QWORD *)v14 + 117);
    v66 = v14 + 1112;
    v67 = *((_QWORD *)v14 + 118);
    *((_QWORD *)v14 + 139) = v67;
    v68 = *((_QWORD *)v14 + 119);
    *((_QWORD *)v14 + 140) = v68;
    if (v68)
    {
      *(_QWORD *)(v67 + 16) = v66;
      *((_QWORD *)v14 + 117) = v114;
      *v114 = 0;
      *((_QWORD *)v14 + 119) = 0;
    }
    else
    {
      *(_QWORD *)v116 = v66;
    }
    v69 = *((_OWORD *)v14 + 60);
    v70 = *((_OWORD *)v14 + 61);
    *((_QWORD *)v14 + 120) = 0;
    *((_QWORD *)v14 + 121) = 0;
    *(_OWORD *)(v14 + 1128) = v69;
    *(_OWORD *)(v14 + 1144) = v70;
    *((_QWORD *)v14 + 122) = 0;
    *((_QWORD *)v14 + 123) = 0;
    v14[1160] = 0;
    v14[1184] = 0;
    if (v14[1016])
    {
      *(_OWORD *)(v14 + 1160) = *v22;
      *((_QWORD *)v14 + 147) = *((_QWORD *)v14 + 126);
      *((_QWORD *)v14 + 125) = 0;
      *((_QWORD *)v14 + 126) = 0;
      *(_QWORD *)v22 = 0;
      v14[1184] = 1;
    }
    v14[1192] = 0;
    *((_DWORD *)v14 + 302) = -1;
    v71 = *((unsigned int *)v14 + 260);
    if ((_DWORD)v71 != -1)
    {
      ((void (*)(__int128 *, char *, char *))off_1E253CA98[v71])(&v129, v14 + 1192, v14 + 1024);
      *((_DWORD *)v14 + 302) = v71;
    }
    v72 = v65;
    *((_OWORD *)v14 + 76) = *(_OWORD *)(v14 + 1048);
    *((_DWORD *)v14 + 308) = *((_DWORD *)v14 + 266);
    v73 = (char *)*((_QWORD *)v14 + 137);
    if (v73)
    {
      v74 = (void **)(v14 + 1496);
      v75 = v14 + 1537;
      if (v73 == v14 + 1072)
      {
        *((_QWORD *)v14 + 158) = v14 + 1240;
        (*(void (**)(void))(*((_QWORD *)v14 + 134) + 24))();
      }
      else
      {
        *((_QWORD *)v14 + 158) = v73;
        *((_QWORD *)v14 + 137) = 0;
      }
    }
    else
    {
      v74 = (void **)(v14 + 1496);
      v75 = v14 + 1537;
      *((_QWORD *)v14 + 158) = 0;
    }
    LOBYTE(__p) = 0;
    v127 = 0;
    v76 = *v74;
    v77 = *v75;
    if (v72)
    {
      v78 = *v26;
      __p = v76;
      *(_QWORD *)v125 = v78;
      *(_QWORD *)&v125[7] = *(_QWORD *)(v14 + 1463);
      v126 = v77;
      *v26 = 0;
      *(_QWORD *)(v14 + 1463) = 0;
      v127 = 1;
      v77 = 0;
      v76 = 0;
    }
    v37 = (std::mutex **)(v14 + 1440);
    v36 = v14 + 1272;
    *((_QWORD *)v14 + 189) = v76;
    v14[1538] = v77;
    AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner(&v128, *((_QWORD *)v14 + 184), (uint64_t)v117, (uint64_t)v115, (uint64_t)v121, (uint64_t)v116, (uint64_t)&__p);
    v79 = (char *)operator new(0xC8uLL);
    *((_QWORD *)v79 + 1) = 0;
    v80 = (unint64_t *)(v79 + 8);
    *((_QWORD *)v79 + 2) = 0;
    *(_QWORD *)v79 = &off_1E2522F18;
    *((_QWORD *)v79 + 3) = 850045863;
    v39 = (uint64_t *)(v14 + 1512);
    *(_OWORD *)(v79 + 88) = 0u;
    v38 = v14 + 1538;
    *(_OWORD *)(v79 + 104) = 0u;
    *(_OWORD *)(v79 + 120) = 0u;
    *(_OWORD *)(v79 + 136) = 0u;
    *(_OWORD *)(v79 + 152) = 0u;
    *((_QWORD *)v79 + 21) = 0;
    *((_QWORD *)v79 + 22) = 0;
    *((_QWORD *)v79 + 23) = 0;
    *((_QWORD *)v79 + 24) = 0;
    *((_OWORD *)v79 + 2) = 0u;
    *((_OWORD *)v79 + 3) = 0u;
    *((_OWORD *)v79 + 4) = 0u;
    *(_OWORD *)(v79 + 73) = 0u;
    *((_QWORD *)v14 + 178) = v79 + 24;
    *((_QWORD *)v14 + 179) = v79;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    *(_QWORD *)&v129 = &off_1E2521FA0;
    *((_QWORD *)&v129 + 1) = v79 + 24;
    v130 = v79;
    v131 = &v129;
    AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then((uint64_t *)&v128, &v129);
    v82 = v131;
    if (v131 == &v129)
    {
      v83 = 4;
      v82 = &v129;
    }
    else
    {
      if (!v131)
      {
LABEL_80:
        v84 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        if (*((_QWORD *)&v128 + 1))
        {
          v85 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        if (v127 && v126 < 0)
          operator delete(__p);
        AMSCore::ExecuteHTTPRequestTask::Options::~Options(v116);
        v87 = (std::__shared_weak_count *)*((_QWORD *)v14 + 116);
        if (v87)
        {
          p_shared_owners = (unint64_t *)&v87->__shared_owners_;
          do
            v89 = __ldaxr(p_shared_owners);
          while (__stlxr(v89 - 1, p_shared_owners));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v121);
        if (v14[1399] < 0)
        {
          operator delete(v115->__r_.__value_.__l.__data_);
          if ((v14[1423] & 0x80000000) == 0)
            goto LABEL_95;
        }
        else if ((v14[1423] & 0x80000000) == 0)
        {
LABEL_95:
          std::__tree<std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::__emplace_unique_key_args<std::string,std::string&,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared&>(v33, v122, (uint64_t)v122, v118);
          if (!v14[1448])
          {
LABEL_138:
            std::__throw_system_error(1, "unique_lock::unlock: not locked");
            goto LABEL_139;
          }
          AMSCore::AwaitableMutex::unlock(*v119);
          v14[1448] = 0;
          v90 = (std::mutex *)*((_QWORD *)v14 + 178);
          std::mutex::lock(v90);
          v91 = *(unsigned __int8 *)(*v118 + 144);
          std::mutex::unlock(v90);
          if (!v91)
          {
            *v123 = 2;
            if (AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::await_suspend((std::mutex **)v118, (uint64_t)v14))
            {
              return;
            }
          }
          v92 = (std::mutex *)*v118;
          std::mutex::lock((std::mutex *)*v118);
          v93 = *v118;
          if (!*(_BYTE *)(*v118 + 144))
            goto LABEL_139;
          v94 = *(_BYTE *)(v93 + 136);
          if (v94)
          {
            *((_QWORD *)v14 + 159) = *(_QWORD *)(v93 + 64);
            v95 = *(_QWORD *)(v93 + 72);
            *((_QWORD *)v14 + 160) = v95;
            if (v95)
            {
              v96 = (unint64_t *)(v95 + 8);
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
            }
          }
          else
          {
            AMSCore::Error::Error(v120, (const std::runtime_error *)(v93 + 64));
          }
          v98 = (unsigned __int8 *)(*((_QWORD *)v14 + 184) + 104);
          v14[1344] = v94;
          std::mutex::unlock(v92);
          do
            v99 = __ldaxr(v98);
          while (__stxr(1u, v98));
          if ((v99 & 1) == 0)
          {
            if (!v14[1448])
            {
LABEL_112:
              v100 = *((_QWORD *)v14 + 184);
              v101 = (_QWORD *)(v100 + 136);
              *((_QWORD *)v14 + 180) = v100 + 40;
              v14[1448] = 1;
              v102 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v100 + 136, v122);
              if (*((uint64_t **)v14 + 188) == v102
                || (std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase(v101, (uint64_t)v102), v14[1448]))
              {
                AMSCore::AwaitableMutex::unlock(*v119);
                v14[1448] = 0;
                std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v14 + 24), v120);
                if (v14[1344])
                {
                  v103 = (std::__shared_weak_count *)*((_QWORD *)v14 + 160);
                  if (v103)
                  {
                    v104 = (unint64_t *)&v103->__shared_owners_;
                    do
                      v105 = __ldaxr(v104);
                    while (__stlxr(v105 - 1, v104));
                    if (!v105)
                    {
                      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                      std::__shared_weak_count::__release_weak(v103);
                    }
                  }
                }
                else
                {
                  ((void (*)(std::runtime_error *))v120->~runtime_error)(v120);
                }
                v59 = (std::__shared_weak_count *)*((_QWORD *)v14 + 179);
                if (!v59)
                  goto LABEL_133;
                v111 = (unint64_t *)&v59->__shared_owners_;
                do
                  v61 = __ldaxr(v111);
                while (__stlxr(v61 - 1, v111));
                goto LABEL_131;
              }
              goto LABEL_138;
            }
LABEL_111:
            AMSCore::AwaitableMutex::unlock(*v119);
            goto LABEL_112;
          }
          *v123 = 3;
          std::mutex::lock((std::mutex *)(*((_QWORD *)v14 + 184) + 40));
          v106 = *((_QWORD *)v14 + 184);
          if (!*(_QWORD *)(v106 + 128))
          {
            v107 = (unsigned __int8 *)(v106 + 104);
            do
              v108 = __ldxr(v107);
            while (__stlxr(1u, v107));
            if ((v108 & 1) == 0)
            {
              std::mutex::unlock((std::mutex *)(*((_QWORD *)v14 + 184) + 40));
              if (!v14[1448])
                goto LABEL_112;
              goto LABEL_111;
            }
          }
          v109 = operator new(0x18uLL);
          v54 = (std::mutex *)(*((_QWORD *)v14 + 184) + 40);
          v109[1] = v106 + 112;
          v109[2] = v14;
          v110 = *(_QWORD *)(v106 + 112);
          *v109 = v110;
          *(_QWORD *)(v110 + 8) = v109;
          *(_QWORD *)(v106 + 112) = v109;
          ++*(_QWORD *)(v106 + 128);
LABEL_40:
          std::mutex::unlock(v54);
          return;
        }
        operator delete(v117->__r_.__value_.__l.__data_);
        goto LABEL_95;
      }
      v83 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
    goto LABEL_80;
  }
  *((_QWORD *)v14 + 178) = v34[7];
  v35 = v34[8];
  *((_QWORD *)v14 + 179) = v35;
  v37 = (std::mutex **)(v14 + 1440);
  v36 = v14 + 1272;
  v39 = (uint64_t *)(v14 + 1496);
  v38 = v14 + 1537;
  if (v35)
  {
    v40 = (unint64_t *)(v35 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    if (!v14[1448])
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      goto LABEL_139;
    }
  }
  AMSCore::AwaitableMutex::unlock(*v119);
  v14[1448] = 0;
  v42 = (std::mutex *)*((_QWORD *)v14 + 178);
  std::mutex::lock(v42);
  v43 = *(unsigned __int8 *)(*v118 + 144);
  std::mutex::unlock(v42);
  if (!v43)
  {
    *v123 = 1;
    if (AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::await_suspend((std::mutex **)v118, (uint64_t)v14))
    {
      return;
    }
  }
  v44 = (std::mutex *)*v118;
  std::mutex::lock((std::mutex *)*v118);
  v45 = *v118;
  if (!*(_BYTE *)(*v118 + 144))
  {
LABEL_139:
    __break(1u);
    return;
  }
  v46 = *(_BYTE *)(v45 + 136);
  if (v46)
  {
    *((_QWORD *)v14 + 159) = *(_QWORD *)(v45 + 64);
    v47 = *(_QWORD *)(v45 + 72);
    *((_QWORD *)v14 + 160) = v47;
    if (v47)
    {
      v48 = (unint64_t *)(v47 + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
  }
  else
  {
    AMSCore::Error::Error(v120, (const std::runtime_error *)(v45 + 64));
  }
  v14[1344] = v46;
  std::mutex::unlock(v44);
  std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v14 + 24), v120);
  if (v14[1344])
  {
    v56 = (std::__shared_weak_count *)*((_QWORD *)v14 + 160);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v120->~runtime_error)(v120);
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)v14 + 179);
  if (!v59)
    goto LABEL_133;
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
LABEL_131:
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
LABEL_133:
  v112 = *v39;
  v113 = *v38;
  if (v14[1448])
    AMSCore::AwaitableMutex::unlock(*v37);
  *((_QWORD *)v14 + 190) = v112;
  v14[1539] = v113;
  *((_QWORD *)v14 + 159) = v14 + 16;
  *(_QWORD *)v14 = 0;
  *v123 = 4;
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v36);
}

void sub_18CCD3340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, void *a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, AMSCore::ExecuteHTTPRequestTask::Options *a17, uint64_t a18, uint64_t a19, AMSCore::EncodeHTTPRequestTask::Result *a20,uint64_t a21,uint64_t a22,AMSCore::ExecuteHTTPRequestTask::Options *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,AMSCore::EncodeHTTPRequestTask::Result *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::__libcpp_refstring *p_imp;
  const char **v9;
  _QWORD *v10;
  uint64_t v11;
  const std::runtime_error *v12;
  uint64_t v13;
  std::__shared_weak_count *imp;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v1 = result;
  v28 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v27 = v26;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v26);
      }
      else
      {
        v27 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v27 = 0;
    }
    if (v27)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v18.__vftable = *(std::runtime_error_vtbl **)(v5 + 8);
        p_imp = &v18.__imp_;
        v9 = (const char **)(v5 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v18, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v19 = *(_OWORD *)(v5 + 24);
        v18.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v20 = *(uint64_t **)(v5 + 40);
        v21 = v11;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v11 + 16) = &v21;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v20 = &v21;
        }
        v13 = *(_QWORD *)(v5 + 64);
        v12 = (const std::runtime_error *)(v5 + 64);
        v23 = v13;
        p_imp = (std::__libcpp_refstring *)&v24;
        v9 = &v12->__imp_.__imp_;
        v6 = v12;
      }
      p_imp->__imp_ = *v9;
      v6->__vftable = 0;
      v6->__imp_.__imp_ = 0;
      v25 = v7;
      if (!v27)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v27 + 48))(v27, &v18);
      if (v25)
      {
        imp = (std::__shared_weak_count *)v18.__imp_.__imp_;
        if (v18.__imp_.__imp_)
        {
          v15 = (unint64_t *)(v18.__imp_.__imp_ + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v18.~runtime_error)(&v18);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v27;
    if (v27 == v26)
    {
      v17 = 4;
      result = v26;
    }
    else
    {
      if (!v27)
        return result;
      v17 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
  }
  return result;
}

void sub_18CCD3954(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
    }
  }
  do
  {
    v8 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v9)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void std::__shared_ptr_emplace<AMSCore::HTTPResponse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25227E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::HTTPResponse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25227E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::HTTPResponse>::__on_zero_shared(uint64_t a1)
{
  AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)(a1 + 24));
}

void AMSCore::HTTPCacheProvider::downloadAndUpdateCache(uint64_t a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

void sub_18CCD3B20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, std::string *a11, uint64_t a12, uint64_t a13, AMSCore::ExecuteHTTPRequestTask::Options *a14, uint64_t a15, uint64_t a16, AMSCore::Error *a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  std::string *v44;
  std::string *v45;
  AMSCore::ExecuteHTTPRequestTask::Options *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  _DWORD *v52;
  _OWORD *v53;
  void **v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::mutex *v60;
  int v61;
  std::mutex *v62;
  uint64_t v63;
  std::runtime_error *v64;
  char v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::mutex **v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  char *v77;
  int v78;
  std::string::size_type v79;
  const std::string::value_type *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  AMSCore::ExecuteHTTPRequestTask::Options *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  std::mutex *v104;
  int v105;
  std::mutex *v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 v127;
  _QWORD *v128;
  std::mutex *v129;
  uint64_t v130;
  int v131;
  std::string *v132;
  std::string *v133;
  AMSCore::ExecuteHTTPRequestTask::Options *v134;
  uint64_t v135;
  std::mutex **v136;
  std::runtime_error *v137;
  __int128 v138;
  void *v139;
  _BYTE v140[15];
  char v141;
  char v142;
  _QWORD v143[3];
  _QWORD *v144;

  v134 = v46;
  v132 = v45;
  v133 = v44;
  v55 = *(_QWORD *)(v47 + 1472);
  *(_QWORD *)(v47 + 1440) = v55 + 40;
  *(_BYTE *)(v47 + 1448) = 1;
  v56 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v55 + 136, (const void **)v51);
  *(_QWORD *)(v47 + 1504) = v56;
  if ((uint64_t *)(v55 + 144) == v56)
  {
    if (*(char *)(v47 + 1375) < 0)
    {
      std::string::__init_copy_ctor_external(v133, *(const std::string::value_type **)(v47 + 1352), *(_QWORD *)(v47 + 1360));
    }
    else
    {
      *(_OWORD *)&v133->__r_.__value_.__l.__data_ = *(_OWORD *)v51;
      v133->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 16);
    }
    v78 = *(char *)(v47 + 1535);
    v79 = *(_QWORD *)(v47 + 1488);
    v80 = *(const std::string::value_type **)(v47 + 1480);
    if (v78 < 0)
    {
      std::string::__init_copy_ctor_external(v132, v80, v79);
    }
    else
    {
      *(_QWORD *)(v47 + 1376) = v80;
      *(_QWORD *)(v47 + 1384) = v79;
      *(_DWORD *)(v47 + 1392) = *v52;
      *(_DWORD *)(v47 + 1395) = *(_DWORD *)((char *)v52 + 3);
      *(_BYTE *)(v47 + 1399) = v78;
    }
    v131 = *(unsigned __int8 *)(v47 + 1536);
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v54, v48);
    *v53 = *(_OWORD *)(v47 + 528);
    *(_QWORD *)(v47 + 536) = 0;
    *(_QWORD *)(v47 + 528) = 0;
    *(_QWORD *)(v47 + 1104) = *(_QWORD *)(v47 + 936);
    v81 = v47 + 1112;
    v82 = *(_QWORD *)(v47 + 944);
    *(_QWORD *)(v47 + 1112) = v82;
    v83 = *(_QWORD *)(v47 + 952);
    *(_QWORD *)(v47 + 1120) = v83;
    if (v83)
    {
      *(_QWORD *)(v82 + 16) = v81;
      *(_QWORD *)(v47 + 936) = v47 + 944;
      *(_QWORD *)(v47 + 944) = 0;
      *(_QWORD *)(v47 + 952) = 0;
      v84 = (uint64_t)v134;
    }
    else
    {
      v84 = (uint64_t)v134;
      *(_QWORD *)v134 = v81;
    }
    v85 = *(_OWORD *)(v47 + 960);
    v86 = *(_OWORD *)(v47 + 976);
    *(_QWORD *)(v47 + 968) = 0;
    *(_QWORD *)(v47 + 960) = 0;
    v53[13] = v85;
    v53[14] = v86;
    *(_QWORD *)(v47 + 976) = 0;
    *(_QWORD *)(v47 + 984) = 0;
    *(_BYTE *)(v47 + 1160) = 0;
    *(_BYTE *)(v47 + 1184) = 0;
    if (*(_BYTE *)(v47 + 1016))
    {
      *(_OWORD *)(v47 + 1160) = *(_OWORD *)(v47 + 992);
      *(_QWORD *)(v47 + 1176) = *(_QWORD *)(v47 + 1008);
      *(_QWORD *)(v47 + 992) = 0;
      *(_QWORD *)(v47 + 1008) = 0;
      *(_QWORD *)(v47 + 1000) = 0;
      *(_BYTE *)(v47 + 1184) = 1;
    }
    *(_BYTE *)(v47 + 1192) = 0;
    *(_DWORD *)(v47 + 1208) = -1;
    v87 = *(unsigned int *)(v47 + 1040);
    if ((_DWORD)v87 != -1)
    {
      ((void (*)(_QWORD *, uint64_t, uint64_t))off_1E253CA98[v87])(v143, v47 + 1192, v47 + 1024);
      *(_DWORD *)(v47 + 1208) = v87;
      v84 = (uint64_t)v134;
    }
    *(_DWORD *)(v47 + 1232) = *(_DWORD *)(v47 + 1064);
    *(_OWORD *)(v47 + 1216) = *(_OWORD *)(v47 + 1048);
    v88 = *(_QWORD *)(v47 + 1096);
    if (v88)
    {
      if (v88 == v47 + 1072)
      {
        *(_QWORD *)(v47 + 1264) = v47 + 1240;
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88);
        v84 = (uint64_t)v134;
      }
      else
      {
        *(_QWORD *)(v47 + 1264) = v88;
        *(_QWORD *)(v47 + 1096) = 0;
      }
    }
    else
    {
      *(_QWORD *)(v47 + 1264) = 0;
    }
    LOBYTE(v139) = 0;
    v142 = 0;
    v89 = *(_QWORD *)(v47 + 1496);
    v90 = *(_BYTE *)(v47 + 1537);
    if (v131)
    {
      v91 = *v49;
      v139 = *(void **)(v47 + 1496);
      *(_QWORD *)v140 = v91;
      *(_QWORD *)&v140[7] = *(uint64_t *)((char *)v49 + 7);
      v141 = v90;
      *v49 = 0;
      *(uint64_t *)((char *)v49 + 7) = 0;
      v142 = 1;
      v90 = 0;
      v89 = 0;
    }
    *(_QWORD *)(v47 + 1512) = v89;
    *(_BYTE *)(v47 + 1538) = v90;
    AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner(&v138, *(_QWORD *)(v47 + 1472), (uint64_t)v133, (uint64_t)v132, (uint64_t)v54, v84, (uint64_t)&v139);
    v92 = (char *)operator new(0xC8uLL);
    *((_QWORD *)v92 + 1) = 0;
    v93 = (unint64_t *)(v92 + 8);
    *((_QWORD *)v92 + 2) = 0;
    *(_QWORD *)v92 = &off_1E2522F18;
    *((_QWORD *)v92 + 3) = 850045863;
    *(_OWORD *)(v92 + 88) = 0u;
    *(_OWORD *)(v92 + 104) = 0u;
    *(_OWORD *)(v92 + 120) = 0u;
    *(_OWORD *)(v92 + 136) = 0u;
    *(_OWORD *)(v92 + 152) = 0u;
    *((_QWORD *)v92 + 21) = 0;
    *((_QWORD *)v92 + 22) = 0;
    *((_QWORD *)v92 + 23) = 0;
    *((_QWORD *)v92 + 24) = 0;
    *((_OWORD *)v92 + 2) = 0u;
    *((_OWORD *)v92 + 3) = 0u;
    *((_OWORD *)v92 + 4) = 0u;
    *(_OWORD *)(v92 + 73) = 0u;
    *(_QWORD *)(v47 + 1424) = v92 + 24;
    *(_QWORD *)(v47 + 1432) = v92;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    v143[0] = &off_1E2521FA0;
    v143[1] = v92 + 24;
    v143[2] = v92;
    v144 = v143;
    AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then((uint64_t *)&v138, v143);
    v95 = v144;
    if (v144 == v143)
    {
      v96 = 4;
      v95 = v143;
    }
    else
    {
      if (!v144)
      {
LABEL_55:
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
        v98 = v134;
        if (*((_QWORD *)&v138 + 1))
        {
          v99 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
            v98 = v134;
          }
        }
        if (v142 && v141 < 0)
        {
          operator delete(v139);
          v98 = v134;
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options(v98);
        v101 = *(std::__shared_weak_count **)(v47 + 928);
        if (v101)
        {
          p_shared_owners = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(p_shared_owners);
          while (__stlxr(v103 - 1, p_shared_owners));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v54);
        if (*(char *)(v47 + 1399) < 0)
          operator delete(v132->__r_.__value_.__l.__data_);
        if (*(char *)(v47 + 1423) < 0)
          operator delete(v133->__r_.__value_.__l.__data_);
        std::__tree<std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::__emplace_unique_key_args<std::string,std::string&,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared&>((uint64_t **)(v55 + 136), (const void **)v51, v51, v50);
        if (*(_BYTE *)(v47 + 1448))
        {
          AMSCore::AwaitableMutex::unlock(*v136);
          *(_BYTE *)(v47 + 1448) = 0;
          v104 = *(std::mutex **)(v47 + 1424);
          std::mutex::lock(v104);
          v105 = *(unsigned __int8 *)(*v50 + 144);
          std::mutex::unlock(v104);
          if (!v105)
          {
            *(_BYTE *)v55 = 2;
            if (AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::await_suspend((std::mutex **)v50, v47))
            {
              return;
            }
          }
          v106 = (std::mutex *)*v50;
          std::mutex::lock((std::mutex *)*v50);
          v107 = *v50;
          if (!*(_BYTE *)(*v50 + 144))
            goto LABEL_115;
          v108 = *(_BYTE *)(v107 + 136);
          if (v108)
          {
            *(_QWORD *)(v47 + 1272) = *(_QWORD *)(v107 + 64);
            v109 = *(_QWORD *)(v107 + 72);
            *(_QWORD *)(v47 + 1280) = v109;
            if (v109)
            {
              v110 = (unint64_t *)(v109 + 8);
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
            }
          }
          else
          {
            AMSCore::Error::Error(v137, (const std::runtime_error *)(v107 + 64));
          }
          v112 = (unsigned __int8 *)(*(_QWORD *)(v47 + 1472) + 104);
          *(_BYTE *)(v47 + 1344) = v108;
          std::mutex::unlock(v106);
          do
            v113 = __ldaxr(v112);
          while (__stxr(1u, v112));
          if ((v113 & 1) != 0)
          {
            *(_BYTE *)v55 = 3;
            std::mutex::lock((std::mutex *)(*(_QWORD *)(v47 + 1472) + 40));
            v125 = *(_QWORD *)(v47 + 1472);
            if (*(_QWORD *)(v125 + 128))
              goto LABEL_111;
            v126 = (unsigned __int8 *)(v125 + 104);
            do
              v127 = __ldxr(v126);
            while (__stlxr(1u, v126));
            if ((v127 & 1) != 0)
            {
LABEL_111:
              v128 = operator new(0x18uLL);
              v129 = (std::mutex *)(*(_QWORD *)(v47 + 1472) + 40);
              v128[1] = v125 + 112;
              v128[2] = v47;
              v130 = *(_QWORD *)(v125 + 112);
              *v128 = v130;
              *(_QWORD *)(v130 + 8) = v128;
              *(_QWORD *)(v125 + 112) = v128;
              ++*(_QWORD *)(v125 + 128);
              std::mutex::unlock(v129);
              return;
            }
            std::mutex::unlock((std::mutex *)(*(_QWORD *)(v47 + 1472) + 40));
          }
          v69 = v136;
          if (*(_BYTE *)(v47 + 1448))
            AMSCore::AwaitableMutex::unlock(*v136);
          v114 = *(_QWORD *)(v47 + 1472);
          v115 = (_QWORD *)(v114 + 136);
          *(_QWORD *)(v47 + 1440) = v114 + 40;
          *(_BYTE *)(v47 + 1448) = 1;
          v116 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v114 + 136, (const void **)v51);
          v64 = v137;
          if (*(uint64_t **)(v47 + 1504) == v116
            || (std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase(v115, (uint64_t)v116), *(_BYTE *)(v47 + 1448)))
          {
            AMSCore::AwaitableMutex::unlock(*v136);
            *(_BYTE *)(v47 + 1448) = 0;
            std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v47 + 24), v137);
            if (*(_BYTE *)(v47 + 1344))
            {
              v117 = *(std::__shared_weak_count **)(v47 + 1280);
              if (v117)
              {
                v118 = (unint64_t *)&v117->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
            }
            else
            {
              ((void (*)())v137->~runtime_error)();
            }
            v120 = *(std::__shared_weak_count **)(v47 + 1432);
            if (v120)
            {
              v121 = (unint64_t *)&v120->__shared_owners_;
              do
                v122 = __ldaxr(v121);
              while (__stlxr(v122 - 1, v121));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
            }
            v76 = (uint64_t *)(v47 + 1512);
            v77 = (char *)(v47 + 1538);
            goto LABEL_102;
          }
        }
        std::__throw_system_error(1, "unique_lock::unlock: not locked");
        goto LABEL_115;
      }
      v96 = 5;
    }
    (*(void (**)(void))(*v95 + 8 * v96))();
    goto LABEL_55;
  }
  *(_QWORD *)(v47 + 1424) = v56[7];
  v57 = v56[8];
  *(_QWORD *)(v47 + 1432) = v57;
  if (v57)
  {
    v58 = (unint64_t *)(v57 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    if (!*(_BYTE *)(v47 + 1448))
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      goto LABEL_115;
    }
  }
  AMSCore::AwaitableMutex::unlock(*v136);
  *(_BYTE *)(v47 + 1448) = 0;
  v60 = *(std::mutex **)(v47 + 1424);
  std::mutex::lock(v60);
  v61 = *(unsigned __int8 *)(*v50 + 144);
  std::mutex::unlock(v60);
  if (!v61)
  {
    *(_BYTE *)v55 = 1;
    if (AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::await_suspend((std::mutex **)v50, v47))
    {
      return;
    }
  }
  v62 = (std::mutex *)*v50;
  std::mutex::lock((std::mutex *)*v50);
  v63 = *v50;
  v64 = v137;
  if (!*(_BYTE *)(*v50 + 144))
  {
LABEL_115:
    __break(1u);
    return;
  }
  v65 = *(_BYTE *)(v63 + 136);
  if (v65)
  {
    *(_QWORD *)(v47 + 1272) = *(_QWORD *)(v63 + 64);
    v66 = *(_QWORD *)(v63 + 72);
    *(_QWORD *)(v47 + 1280) = v66;
    if (v66)
    {
      v67 = (unint64_t *)(v66 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
  }
  else
  {
    AMSCore::Error::Error(v137, (const std::runtime_error *)(v63 + 64));
  }
  *(_BYTE *)(v47 + 1344) = v65;
  std::mutex::unlock(v62);
  std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v47 + 24), v137);
  v69 = v136;
  if (*(_BYTE *)(v47 + 1344))
  {
    v70 = *(std::__shared_weak_count **)(v47 + 1280);
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }
  else
  {
    ((void (*)())v137->~runtime_error)();
  }
  v73 = *(std::__shared_weak_count **)(v47 + 1432);
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (uint64_t *)(v47 + 1496);
  v77 = (char *)(v47 + 1537);
LABEL_102:
  v123 = *v76;
  v124 = *v77;
  if (*(_BYTE *)(v47 + 1448))
    AMSCore::AwaitableMutex::unlock(*v69);
  *(_QWORD *)(v47 + 1520) = v123;
  *(_BYTE *)(v47 + 1539) = v124;
  *(_QWORD *)(v47 + 1272) = v135;
  *(_QWORD *)v47 = 0;
  *(_BYTE *)v55 = 4;
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v64);
}

void sub_18CCD43BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, AMSCore::ExecuteHTTPRequestTask::Options *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_18CCD44EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
  {
    std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a16);
    JUMPOUT(0x18CCD4500);
  }
  JUMPOUT(0x18CCD44DCLL);
}

void sub_18CCD4528()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCD4298);
}

void sub_18CCD4538(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _BYTE *v2;

  *v1 = 0;
  *v2 = 4;
  _Unwind_Resume(exception_object);
}

void sub_18CCD4590(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void **v17;
  AMSCore::ExecuteHTTPRequestTask::Options *v18;
  void *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;

  v19 = *(void **)(v16 + 1496);
  v20 = *(_BYTE *)(v16 + 1537);
  v21 = *(_QWORD **)(v16 + 144);
  if (v21 == (_QWORD *)(v16 + 120))
  {
    v22 = 4;
    v21 = (_QWORD *)(v16 + 120);
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:
  if (*(_BYTE *)(v16 + 104))
  {
    if (*(_BYTE *)(v16 + 96))
    {
      v23 = *(std::__shared_weak_count **)(v16 + 32);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(v16 + 24))(v16 + 24);
    }
  }
  v26 = *(unsigned __int8 *)(v16 + 1536);
  do
  {
    v27 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v28)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v26 && v20 < 0)
    operator delete(v19);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v18);
  v29 = *(std::__shared_weak_count **)(v16 + 536);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(char *)(v16 + 1535);
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v17);
  if (v32 < 0)
  {
    operator delete(*(void **)(v16 + 1480));
    if ((*(char *)(v16 + 1375) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_30:
    operator delete(*(void **)(v16 + 1352));
    goto LABEL_28;
  }
  if (*(char *)(v16 + 1375) < 0)
    goto LABEL_30;
LABEL_28:
  operator delete((void *)v16);
}

BOOL AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::await_suspend(std::mutex **a1, uint64_t a2)
{
  std::mutex *v4;
  std::mutex *v5;
  int v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  std::mutex::lock(*a1);
  v5 = *a1;
  v6 = (*a1)[2].__m_.__opaque[8];
  if (!(*a1)[2].__m_.__opaque[8])
  {
    v8 = *(char **)&v5[2].__m_.__opaque[24];
    v7 = *(_QWORD *)&v5[2].__m_.__opaque[32];
    if ((unint64_t)v8 >= v7)
    {
      v10 = *(char **)&v5[2].__m_.__opaque[16];
      v11 = (v8 - v10) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:fe180100]();
        v15 = operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = a2;
      v9 = v16 + 1;
      if (v8 == v10)
      {
        v10 = v8;
      }
      else
      {
        v18 = v8 - v10 - 8;
        if (v18 < 0x58)
          goto LABEL_31;
        if ((unint64_t)(v10 - v15) < 0x20)
          goto LABEL_31;
        v19 = (v18 >> 3) + 1;
        v20 = &v15[8 * v11 - 16];
        v21 = v8 - 16;
        v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *v20 = v23;
          v20 -= 2;
          v21 -= 32;
          v22 -= 4;
        }
        while (v22);
        v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_31:
          do
          {
            v24 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *--v16 = v24;
          }
          while (v8 != v10);
          v10 = *(char **)&v5[2].__m_.__opaque[16];
        }
      }
      *(_QWORD *)&v5[2].__m_.__opaque[16] = v16;
      *(_QWORD *)&v5[2].__m_.__opaque[24] = v9;
      *(_QWORD *)&v5[2].__m_.__opaque[32] = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_QWORD *)v8 = a2;
      v9 = v8 + 8;
    }
    *(_QWORD *)&v5[2].__m_.__opaque[24] = v9;
  }
  std::mutex::unlock(v4);
  return v6 == 0;
}

void AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v14;
  _OWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  _QWORD *v33;
  __int128 v34;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  const std::runtime_error *v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  const char *imp;
  char v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unsigned int *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::chrono::system_clock::time_point v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::runtime_error *v118;
  char *v119;
  std::runtime_error *v120;
  void **v121;
  std::runtime_error v122;
  __int128 v123;
  unsigned int **v124;
  unsigned int *v125[2];
  __int128 v126;
  void *__p[2];
  __int128 v128;
  unsigned int **v129;
  uint64_t v130;
  unsigned int *v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD v140[3];
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _OWORD v150[2];
  __int128 v151;
  uint64_t v152;
  char v153;
  char v154;
  std::runtime_error v155;
  __int128 v156;
  unsigned int **v157;
  uint64_t v158;
  unsigned int *v159;
  __int128 v160;

  v14 = (char *)operator new(0x720uLL);
  *(_QWORD *)v14 = AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner;
  *((_QWORD *)v14 + 1) = AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner;
  *((_QWORD *)v14 + 224) = a2;
  v15 = v14 + 952;
  *((_OWORD *)v14 + 108) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 218) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)(v14 + 1752) = *(_OWORD *)a4;
  *((_QWORD *)v14 + 221) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v14 + 576), a5);
  *(_OWORD *)(v14 + 952) = *(_OWORD *)(a5 + 376);
  *(_QWORD *)(a5 + 376) = 0;
  *(_QWORD *)(a5 + 384) = 0;
  *((_QWORD *)v14 + 191) = *(_QWORD *)a6;
  v16 = v14 + 1536;
  v17 = (_QWORD *)(a6 + 8);
  v18 = *(_QWORD *)(a6 + 8);
  *((_QWORD *)v14 + 192) = v18;
  v19 = *(_QWORD *)(a6 + 16);
  *((_QWORD *)v14 + 193) = v19;
  if (v19)
  {
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)a6 = v17;
    *v17 = 0;
    *(_QWORD *)(a6 + 16) = 0;
  }
  else
  {
    *((_QWORD *)v14 + 191) = v16;
  }
  *((_OWORD *)v14 + 97) = *(_OWORD *)(a6 + 24);
  *(_QWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = 0;
  *((_OWORD *)v14 + 98) = *(_OWORD *)(a6 + 40);
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  v20 = v14 + 1584;
  v14[1584] = 0;
  v14[1608] = 0;
  if (*(_BYTE *)(a6 + 80))
  {
    *v20 = *(_OWORD *)(a6 + 56);
    *((_QWORD *)v14 + 200) = *(_QWORD *)(a6 + 72);
    *(_QWORD *)(a6 + 64) = 0;
    *(_QWORD *)(a6 + 72) = 0;
    *(_QWORD *)(a6 + 56) = 0;
    v14[1608] = 1;
  }
  v14[1616] = 0;
  *((_DWORD *)v14 + 408) = -1;
  v21 = *(unsigned int *)(a6 + 104);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(void **, char *, uint64_t))off_1E253CA98[v21])(__p, v14 + 1616, a6 + 88);
    *((_DWORD *)v14 + 408) = v21;
  }
  v23 = (_QWORD *)(a6 + 160);
  v22 = *(_QWORD *)(a6 + 160);
  *(_OWORD *)(v14 + 1640) = *(_OWORD *)(a6 + 112);
  *((_DWORD *)v14 + 414) = *(_DWORD *)(a6 + 128);
  v119 = v14 + 1664;
  if (!v22)
  {
    v23 = v14 + 1688;
    goto LABEL_12;
  }
  if (v22 != a6 + 136)
  {
    *((_QWORD *)v14 + 211) = v22;
LABEL_12:
    *v23 = 0;
    goto LABEL_14;
  }
  *((_QWORD *)v14 + 211) = v14 + 1664;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
LABEL_14:
  v121 = (void **)(v14 + 968);
  v14[1696] = 0;
  v14[1720] = 0;
  if (*(_BYTE *)(a7 + 24))
  {
    *((_OWORD *)v14 + 106) = *(_OWORD *)a7;
    *((_QWORD *)v14 + 214) = *(_QWORD *)(a7 + 16);
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    *(_QWORD *)a7 = 0;
    v14[1720] = 1;
  }
  v120 = (std::runtime_error *)(v14 + 152);
  do
    v24 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v24 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v14[24] = 0;
  v14[104] = 0;
  *((_QWORD *)v14 + 14) = 0;
  v118 = (std::runtime_error *)(v14 + 24);
  *((_QWORD *)v14 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(__p, (uint64_t)(v14 + 16));
  *a1 = *(_OWORD *)__p;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v121, (uint64_t)(v14 + 576));
  *((_OWORD *)v14 + 84) = *v15;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v14 + 120) = 0;
  *((_QWORD *)v14 + 170) = *((_QWORD *)v14 + 191);
  v25 = v14 + 1368;
  v26 = *((_QWORD *)v14 + 192);
  *((_QWORD *)v14 + 171) = v26;
  v27 = *((_QWORD *)v14 + 193);
  *((_QWORD *)v14 + 172) = v27;
  if (v27)
  {
    *(_QWORD *)(v26 + 16) = v25;
    *((_QWORD *)v14 + 191) = v16;
    *v16 = 0;
    *((_QWORD *)v14 + 193) = 0;
  }
  else
  {
    *((_QWORD *)v14 + 170) = v25;
  }
  v28 = *((_OWORD *)v14 + 97);
  *((_QWORD *)v14 + 194) = 0;
  *((_QWORD *)v14 + 195) = 0;
  v29 = *((_OWORD *)v14 + 98);
  *(_OWORD *)(v14 + 1384) = v28;
  *(_OWORD *)(v14 + 1400) = v29;
  *((_QWORD *)v14 + 196) = 0;
  *((_QWORD *)v14 + 197) = 0;
  v14[1416] = 0;
  v14[1440] = 0;
  if (v14[1608])
  {
    *(_OWORD *)(v14 + 1416) = *v20;
    *((_QWORD *)v14 + 179) = *((_QWORD *)v14 + 200);
    *((_QWORD *)v14 + 199) = 0;
    *((_QWORD *)v14 + 200) = 0;
    *(_QWORD *)v20 = 0;
    v14[1440] = 1;
  }
  v14[1448] = 0;
  *((_DWORD *)v14 + 366) = -1;
  v30 = *((unsigned int *)v14 + 408);
  if ((_DWORD)v30 != -1)
  {
    ((void (*)(void **, char *, char *))off_1E253CA98[v30])(__p, v14 + 1448, v14 + 1616);
    *((_DWORD *)v14 + 366) = v30;
  }
  *((_OWORD *)v14 + 92) = *(_OWORD *)(v14 + 1640);
  *((_DWORD *)v14 + 372) = *((_DWORD *)v14 + 414);
  v31 = (char *)*((_QWORD *)v14 + 211);
  if (v31)
  {
    v32 = v14 + 1816;
    if (v31 == v119)
    {
      *((_QWORD *)v14 + 190) = v14 + 1496;
      (*(void (**)(char *))(*((_QWORD *)v14 + 208) + 24))(v119);
      goto LABEL_31;
    }
    v33 = v14 + 1688;
    *((_QWORD *)v14 + 190) = v31;
  }
  else
  {
    v33 = v14 + 1520;
    v32 = v14 + 1816;
  }
  *v33 = 0;
LABEL_31:
  AMSCore::ExecuteHTTPRequestTask::perform((std::runtime_error *)v14 + 111, (uint64_t)v121, (uint64_t)(v14 + 1360));
  v34 = *((_OWORD *)v14 + 111);
  *(_OWORD *)(v14 + 1800) = v34;
  *((_QWORD *)v14 + 222) = 0;
  *((_QWORD *)v14 + 223) = 0;
  if (atomic_load((unint64_t *)(v34 + 440)))
    goto LABEL_35;
  *v32 = 0;
  v36 = (unint64_t *)(*((_QWORD *)v14 + 225) + 440);
  do
    v37 = __ldaxr(v36);
  while (__stlxr((unint64_t)v14, v36));
  if (v37)
  {
LABEL_35:
    v38 = *((_QWORD *)v14 + 225);
    if (!*(_BYTE *)(v38 + 432))
    {
      __break(1u);
      return;
    }
    v39 = (const std::runtime_error *)(v38 + 8);
    v40 = *(_BYTE *)(v38 + 424);
    if (!v40)
    {
      std::runtime_error::runtime_error(v120, v39);
      *((_QWORD *)v14 + 19) = MEMORY[0x1E0DE4F90] + 16;
      *(_OWORD *)(v14 + 168) = *(_OWORD *)(v38 + 24);
      *((_QWORD *)v14 + 19) = off_1E2521330;
      *((_QWORD *)v14 + 23) = *(_QWORD *)(v38 + 40);
      v46 = (_QWORD *)(v38 + 48);
      v47 = *(_QWORD *)(v38 + 48);
      *((_QWORD *)v14 + 24) = v47;
      v48 = v14 + 192;
      v49 = *(_QWORD *)(v38 + 56);
      *((_QWORD *)v14 + 25) = v49;
      v45 = v14 + 1728;
      if (v49)
      {
        *(_QWORD *)(v47 + 16) = v48;
        *(_QWORD *)(v38 + 40) = v46;
        *v46 = 0;
        *(_QWORD *)(v38 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v14 + 23) = v48;
      }
      *((_OWORD *)v14 + 13) = *(_OWORD *)(v38 + 64);
      *(_QWORD *)(v38 + 64) = 0;
      *(_QWORD *)(v38 + 72) = 0;
      v14[224] = 0;
      *((_QWORD *)v14 + 19) = &off_1E2521420;
      v14[248] = 0;
      if (*(_BYTE *)(v38 + 104))
      {
        v55 = *(_OWORD *)(v38 + 80);
        *((_QWORD *)v14 + 30) = *(_QWORD *)(v38 + 96);
        *((_OWORD *)v14 + 14) = v55;
        *(_QWORD *)(v38 + 88) = 0;
        *(_QWORD *)(v38 + 96) = 0;
        *(_QWORD *)(v38 + 80) = 0;
        v14[248] = 1;
      }
      v56 = *(_OWORD *)(v38 + 128);
      *((_OWORD *)v14 + 16) = *(_OWORD *)(v38 + 112);
      *((_OWORD *)v14 + 17) = v56;
      v57 = *(_OWORD *)(v38 + 144);
      v58 = *(_OWORD *)(v38 + 160);
      v59 = *(_OWORD *)(v38 + 176);
      *(_OWORD *)(v14 + 329) = *(_OWORD *)(v38 + 185);
      *((_OWORD *)v14 + 19) = v58;
      *((_OWORD *)v14 + 20) = v59;
      *((_OWORD *)v14 + 18) = v57;
      *((_QWORD *)v14 + 45) = 0;
      *((_QWORD *)v14 + 46) = 0;
      *((_QWORD *)v14 + 44) = 0;
      *((_OWORD *)v14 + 22) = *(_OWORD *)(v38 + 208);
      *((_QWORD *)v14 + 46) = *(_QWORD *)(v38 + 224);
      *(_QWORD *)(v38 + 216) = 0;
      *(_QWORD *)(v38 + 224) = 0;
      *(_QWORD *)(v38 + 208) = 0;
      v60 = *(_OWORD *)(v38 + 248);
      *(_OWORD *)(v14 + 376) = *(_OWORD *)(v38 + 232);
      *(_OWORD *)(v14 + 392) = v60;
      v61 = *(_OWORD *)(v38 + 264);
      v62 = *(_OWORD *)(v38 + 280);
      v63 = *(_OWORD *)(v38 + 312);
      *(_OWORD *)(v14 + 440) = *(_OWORD *)(v38 + 296);
      *(_OWORD *)(v14 + 456) = v63;
      *(_OWORD *)(v14 + 408) = v61;
      *(_OWORD *)(v14 + 424) = v62;
      v64 = *(_OWORD *)(v38 + 328);
      v65 = *(_OWORD *)(v38 + 344);
      v66 = *(_OWORD *)(v38 + 360);
      *(_OWORD *)(v14 + 514) = *(_OWORD *)(v38 + 370);
      *(_OWORD *)(v14 + 488) = v65;
      *(_OWORD *)(v14 + 504) = v66;
      *(_OWORD *)(v14 + 472) = v64;
      v14[536] = 0;
      v14[560] = 0;
      if (*(_BYTE *)(v38 + 416))
      {
        v67 = *(_OWORD *)(v38 + 392);
        *((_QWORD *)v14 + 69) = *(_QWORD *)(v38 + 408);
        *(_OWORD *)(v14 + 536) = v67;
        *(_QWORD *)(v38 + 400) = 0;
        *(_QWORD *)(v38 + 408) = 0;
        *(_QWORD *)(v38 + 392) = 0;
        v14[560] = 1;
      }
LABEL_58:
      v14[568] = v40;
      v68 = *((_QWORD *)v14 + 226);
      if (v68)
      {
        v69 = (unint64_t *)(v68 + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          v71 = (std::__shared_weak_count *)*((_QWORD *)v14 + 226);
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v72 = (std::__shared_weak_count *)*((_QWORD *)v14 + 223);
      if (v72)
      {
        p_shared_owners = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(p_shared_owners);
        while (__stlxr(v74 - 1, p_shared_owners));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v14 + 1360));
      v75 = (std::__shared_weak_count *)*((_QWORD *)v14 + 169);
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v121);
      if (!v14[568])
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v120);
        v85 = v14 + 192;
        v86 = *((_QWORD *)v14 + 24);
        v128 = *(_OWORD *)(v14 + 168);
        v129 = (unsigned int **)*((_QWORD *)v14 + 23);
        v130 = v86;
        v131 = (unsigned int *)*((_QWORD *)v14 + 25);
        if (v131)
        {
          *(_QWORD *)(v86 + 16) = &v130;
          *((_QWORD *)v14 + 23) = v85;
          *v85 = 0;
          *((_QWORD *)v14 + 25) = 0;
        }
        else
        {
          v129 = (unsigned int **)&v130;
        }
        v132 = *((_OWORD *)v14 + 13);
        *((_QWORD *)v14 + 26) = 0;
        *((_QWORD *)v14 + 27) = 0;
        __p[0] = &off_1E2521420;
        LOBYTE(v133) = 0;
        v135 = 0;
        if (v14[248])
        {
          v133 = *((_OWORD *)v14 + 14);
          v134 = *((_QWORD *)v14 + 30);
          *((_QWORD *)v14 + 29) = 0;
          *((_QWORD *)v14 + 30) = 0;
          *((_QWORD *)v14 + 28) = 0;
          v135 = 1;
        }
        v90 = *((_OWORD *)v14 + 19);
        v138 = *((_OWORD *)v14 + 18);
        v139 = v90;
        v140[0] = *((_OWORD *)v14 + 20);
        v91 = *((_OWORD *)v14 + 17);
        v136 = *((_OWORD *)v14 + 16);
        v137 = v91;
        *(_OWORD *)((char *)v140 + 9) = *(_OWORD *)(v14 + 329);
        v140[2] = *((_OWORD *)v14 + 22);
        v141 = *((_QWORD *)v14 + 46);
        *((_QWORD *)v14 + 44) = 0;
        *((_QWORD *)v14 + 45) = 0;
        *((_QWORD *)v14 + 46) = 0;
        *(_OWORD *)((char *)v150 + 10) = *(_OWORD *)(v14 + 514);
        v92 = *(_OWORD *)(v14 + 488);
        v148 = *(_OWORD *)(v14 + 472);
        v149 = v92;
        v150[0] = *(_OWORD *)(v14 + 504);
        v93 = *(_OWORD *)(v14 + 424);
        v144 = *(_OWORD *)(v14 + 408);
        v145 = v93;
        v94 = *(_OWORD *)(v14 + 456);
        v146 = *(_OWORD *)(v14 + 440);
        v147 = v94;
        v95 = *(_OWORD *)(v14 + 392);
        v142 = *(_OWORD *)(v14 + 376);
        v143 = v95;
        LOBYTE(v151) = 0;
        v153 = 0;
        if (v14[560])
        {
          v152 = *((_QWORD *)v14 + 69);
          v151 = *(_OWORD *)(v14 + 536);
          *((_QWORD *)v14 + 69) = 0;
          *((_QWORD *)v14 + 67) = 0;
          *((_QWORD *)v14 + 68) = 0;
          v153 = 1;
        }
        v154 = 1;
        std::runtime_error::runtime_error(&v155, (const std::runtime_error *)__p);
        v156 = v128;
        v155.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v157 = v129;
        v158 = v130;
        v159 = v131;
        if (v131)
        {
          *(_QWORD *)(v130 + 16) = &v158;
          v129 = (unsigned int **)&v130;
          v130 = 0;
          v131 = 0;
        }
        else
        {
          v157 = (unsigned int **)&v158;
        }
        v160 = v132;
        v132 = 0uLL;
        std::runtime_error::runtime_error(&v122, &v155);
        v123 = v156;
        v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v96 = (unsigned int *)v158;
        v124 = v157;
        v125[0] = (unsigned int *)v158;
        v125[1] = v159;
        if (v159)
        {
          *(_QWORD *)(v158 + 16) = v125;
          v96 = 0;
          v157 = (unsigned int **)&v158;
          v158 = 0;
          v159 = 0;
        }
        else
        {
          v124 = v125;
        }
        v126 = v160;
        v160 = 0uLL;
        v155.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v157, v96);
        MEMORY[0x18D7898AC](&v155);
        std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v118, &v122);
        v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
        if (*((_QWORD *)&v126 + 1))
        {
          v98 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, v125[0]);
        MEMORY[0x18D7898AC](&v122);
        if (v154)
          AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)__p);
        if (!v14[568])
          goto LABEL_155;
        goto LABEL_120;
      }
      v78 = *((_QWORD *)v14 + 42);
      if (*(_WORD *)(v78 + 152) != 200)
      {
        LOWORD(v155.__vftable) = *(_WORD *)(v78 + 152);
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(__p);
        AMSCore::Logger::log<char [49],AMSCore::HTTPResponse::StatusCode>((uint64_t)__p[0]);
        v87 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v88 = (unint64_t *)((char *)__p[1] + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        goto LABEL_142;
      }
      BYTE7(v128) = 4;
      strcpy((char *)__p, "ETag");
      AMSCore::IHTTPHeaderMap::getSingleValueOrNone((std::string *)&v155, (_QWORD *)(v78 + 160), (char *)__p);
      if (SBYTE7(v128) < 0)
        operator delete(__p[0]);
      if (v14[1720] && BYTE8(v156))
      {
        v79 = v14[1719];
        if ((v79 & 0x80u) == 0)
          v80 = v14[1719];
        else
          v80 = *((_QWORD *)v14 + 213);
        imp = (const char *)BYTE7(v156);
        v82 = BYTE7(v156);
        if (SBYTE7(v156) < 0)
          imp = v155.__imp_.__imp_;
        if ((const char *)v80 == imp)
        {
          if ((SBYTE7(v156) & 0x80u) == 0)
            v83 = (unsigned __int8 *)&v155;
          else
            v83 = (unsigned __int8 *)v155.__vftable;
          if ((v79 & 0x80) != 0)
          {
            if (memcmp(*((const void **)v14 + 212), v83, *((_QWORD *)v14 + 213)))
              goto LABEL_131;
          }
          else if (v14[1719])
          {
            v84 = (unsigned __int8 *)(v14 + 1696);
            while (*v84 == *v83)
            {
              ++v84;
              ++v83;
              if (!--v79)
                goto LABEL_140;
            }
            goto LABEL_131;
          }
LABEL_140:
          if (v82 < 0)
            operator delete(v155.__vftable);
          goto LABEL_142;
        }
      }
LABEL_131:
      v106 = *(_QWORD *)(*((_QWORD *)v14 + 224) + 8);
      v107 = *((_QWORD *)v14 + 42);
      v108.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      (*(void (**)(void **__return_ptr, uint64_t, char *, char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep))(*(_QWORD *)v106 + 24))(__p, v106, v14 + 1752, v45, v107, v108.__d_.__rep_);
      if (!(_BYTE)v133)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v122);
        AMSCore::Logger::log<char [26],AMSCore::Error>((uint64_t)v122.__vftable, (uint64_t)__p);
        v109 = (std::__shared_weak_count *)v122.__imp_.__imp_;
        if (v122.__imp_.__imp_)
        {
          v110 = (unint64_t *)(v122.__imp_.__imp_ + 8);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        if (!(_BYTE)v133)
          (*(void (**)(void **))__p[0])(__p);
      }
      v82 = BYTE7(v156);
      if (BYTE8(v156))
        goto LABEL_140;
LABEL_142:
      if (v14[104])
      {
        if (v14[96])
        {
          v112 = (std::__shared_weak_count *)*((_QWORD *)v14 + 4);
          if (v112)
          {
            v113 = (unint64_t *)&v112->__shared_owners_;
            do
              v114 = __ldaxr(v113);
            while (__stlxr(v114 - 1, v113));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
        }
        else
        {
          ((void (*)(std::runtime_error *))v118->~runtime_error)(v118);
        }
        v14[104] = 0;
      }
      v115 = *((_QWORD *)v14 + 43);
      *((_QWORD *)v14 + 3) = *((_QWORD *)v14 + 42);
      *((_QWORD *)v14 + 4) = v115;
      if (v115)
      {
        v116 = (unint64_t *)(v115 + 8);
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }
      v14[96] = 1;
      v14[104] = 1;
      if (!v14[568])
      {
LABEL_155:
        ((void (*)(std::runtime_error *))v120->~runtime_error)(v120);
LABEL_156:
        *((_QWORD *)v14 + 19) = v14 + 16;
        *(_QWORD *)v14 = 0;
        *v32 = 1;
        AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v120);
        return;
      }
LABEL_120:
      v100 = (std::__shared_weak_count *)*((_QWORD *)v14 + 43);
      if (v100)
      {
        v101 = (unint64_t *)&v100->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v14 + 168));
      v103 = (std::__shared_weak_count *)*((_QWORD *)v14 + 20);
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      goto LABEL_156;
    }
    *(_OWORD *)(v14 + 152) = *(_OWORD *)(v38 + 8);
    v39->__vftable = 0;
    *(_QWORD *)(v38 + 16) = 0;
    *((_QWORD *)v14 + 21) = *(_QWORD *)(v38 + 24);
    v41 = (_QWORD *)(v38 + 32);
    v42 = *(_QWORD *)(v38 + 32);
    *((_QWORD *)v14 + 22) = v42;
    v43 = v14 + 176;
    v44 = *(_QWORD *)(v38 + 40);
    *((_QWORD *)v14 + 23) = v44;
    v45 = v14 + 1728;
    if (v44)
    {
      *(_QWORD *)(v42 + 16) = v43;
      *(_QWORD *)(v38 + 24) = v41;
      *v41 = 0;
      *(_QWORD *)(v38 + 40) = 0;
    }
    else
    {
      *((_QWORD *)v14 + 21) = v43;
    }
    *((_OWORD *)v14 + 12) = *(_OWORD *)(v38 + 48);
    *(_QWORD *)(v38 + 48) = 0;
    *(_QWORD *)(v38 + 56) = 0;
    *((_OWORD *)v14 + 13) = *(_OWORD *)(v38 + 64);
    *(_QWORD *)(v38 + 64) = 0;
    *(_QWORD *)(v38 + 72) = 0;
    v14[224] = 0;
    v14[248] = 0;
    if (*(_BYTE *)(v38 + 104))
    {
      v50 = *(_OWORD *)(v38 + 80);
      *((_QWORD *)v14 + 30) = *(_QWORD *)(v38 + 96);
      *((_OWORD *)v14 + 14) = v50;
      *(_QWORD *)(v38 + 88) = 0;
      *(_QWORD *)(v38 + 96) = 0;
      *(_QWORD *)(v38 + 80) = 0;
      v14[248] = 1;
    }
    v14[256] = 0;
    *((_DWORD *)v14 + 68) = -1;
    v51 = *(unsigned int *)(v38 + 128);
    if ((_DWORD)v51 != -1)
    {
      ((void (*)(void **, char *, uint64_t))off_1E253CA98[v51])(__p, v14 + 256, v38 + 112);
      *((_DWORD *)v14 + 68) = v51;
    }
    v52 = *(_OWORD *)(v38 + 136);
    *((_DWORD *)v14 + 74) = *(_DWORD *)(v38 + 152);
    *(_OWORD *)(v14 + 280) = v52;
    v53 = (_QWORD *)(v38 + 184);
    v54 = *(_QWORD *)(v38 + 184);
    if (v54)
    {
      if (v54 == v38 + 160)
      {
        *((_QWORD *)v14 + 41) = v14 + 304;
        (*(void (**)(_QWORD))(*(_QWORD *)*v53 + 24))(*v53);
        goto LABEL_52;
      }
      *((_QWORD *)v14 + 41) = v54;
    }
    else
    {
      v53 = v14 + 328;
    }
    *v53 = 0;
LABEL_52:
    *((_OWORD *)v14 + 21) = *(_OWORD *)(v38 + 192);
    *(_QWORD *)(v38 + 192) = 0;
    *(_QWORD *)(v38 + 200) = 0;
    goto LABEL_58;
  }
}

void sub_18CCD5738(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,AMSCore::EncodeHTTPRequestTask::Result *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void (**a31)(_QWORD),uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  int v43;
  uint64_t v44;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a22);
  if (!a43)
    (*a31)(&a31);
  if (v43)
  {
    if (*(char *)(v44 - 145) < 0)
      operator delete(*(void **)(v44 - 168));
  }
  std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](a20);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCD57E0()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCD56ECLL);
}

void sub_18CCD57EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, AMSCore::ExecuteHTTPRequestTask::Options *a14, void **a15, uint64_t a16, uint64_t a17, AMSCore::EncodeHTTPRequestTask::Result *a18)
{
  char *v18;

  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::ValuePromise::~ValuePromise(a16);
  if (v18[1720] && v18[1719] < 0)
    operator delete(*a10);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(a14);
  AMSCore::EncodeHTTPRequestTask::Result::~Result(a18);
  if (v18[1775] < 0)
    operator delete(*a11);
  if (v18[1751] < 0)
    operator delete(*a15);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *v5;
  const std::runtime_error *v7;
  char v8;
  std::__libcpp_refstring *p_imp;
  const char **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  const std::runtime_error *v25;
  char v26;
  std::__libcpp_refstring *v27;
  const char **v28;
  const std::runtime_error *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *imp;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  const std::runtime_error *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  std::runtime_error v48;
  __int128 v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD v60[2];

  v60[1] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  v5 = (unint64_t *)(v4 + 96);
  if (atomic_load((unint64_t *)(v4 + 96)))
  {
    if (*(_BYTE *)(v4 + 88))
    {
      v7 = (const std::runtime_error *)(v4 + 8);
      v8 = *(_BYTE *)(v4 + 80);
      if (v8)
      {
        v48.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
        p_imp = &v48.__imp_;
        v10 = (const char **)(v4 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v48, v7);
        v15 = (_QWORD *)(v4 + 48);
        v16 = *(_QWORD *)(v4 + 48);
        v49 = *(_OWORD *)(v4 + 24);
        v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v50 = *(uint64_t **)(v4 + 40);
        v51 = v16;
        v52 = *(_QWORD *)(v4 + 56);
        if (v52)
        {
          *(_QWORD *)(v16 + 16) = &v51;
          *(_QWORD *)(v4 + 40) = v15;
          *v15 = 0;
          *(_QWORD *)(v4 + 56) = 0;
        }
        else
        {
          v50 = &v51;
        }
        v30 = *(_QWORD *)(v4 + 64);
        v29 = (const std::runtime_error *)(v4 + 64);
        v53 = v30;
        p_imp = (std::__libcpp_refstring *)&v54;
        v10 = &v29->__imp_.__imp_;
        v7 = v29;
      }
      p_imp->__imp_ = *v10;
      v7->__vftable = 0;
      v7->__imp_.__imp_ = 0;
      v55 = v8;
      v31 = a2[3];
      if (!v31)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t, std::runtime_error *))(*(_QWORD *)v31 + 48))(v31, &v48);
      if (v55)
      {
        imp = (std::__shared_weak_count *)v48.__imp_.__imp_;
        if (v48.__imp_.__imp_)
        {
          v33 = (unint64_t *)(v48.__imp_.__imp_ + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          goto LABEL_68;
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v48.~runtime_error)(&v48);
      }
      goto LABEL_70;
    }
LABEL_78:
    __break(1u);
    return;
  }
  *(_QWORD *)&v56 = v4;
  *((_QWORD *)&v56 + 1) = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = v57;
  v14 = (_QWORD *)a2[3];
  if (v14)
  {
    if (v14 == a2)
    {
      v58 = v57;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v57);
    }
    else
    {
      v58 = (_QWORD *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v58 = 0;
  }
  v60[0] = 0;
  v17 = (char *)operator new(0x38uLL);
  v18 = v17;
  *(_QWORD *)v17 = &off_1E2522050;
  *(_OWORD *)(v17 + 8) = v56;
  v56 = 0uLL;
  if (v58)
  {
    if (v58 == v57)
    {
      *((_QWORD *)v17 + 6) = v17 + 24;
      (*(void (**)(_QWORD *))(v57[0] + 24))(v57);
    }
    else
    {
      *((_QWORD *)v17 + 6) = v58;
      v58 = 0;
    }
  }
  else
  {
    *((_QWORD *)v17 + 6) = 0;
  }
  v60[0] = v18;
  v20 = (unint64_t *)(v4 + 128);
  v19 = *(_QWORD **)(v4 + 128);
  v21 = v4 + 104;
  *(_QWORD *)(v4 + 128) = 0;
  if (v19 == (_QWORD *)(v4 + 104))
  {
    v22 = 4;
    v19 = (_QWORD *)(v4 + 104);
  }
  else
  {
    if (!v19)
      goto LABEL_26;
    v22 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v22))();
  v18 = (char *)v60[0];
  v23 = (_QWORD *)(v4 + 128);
  if (!v60[0])
  {
LABEL_27:
    *v23 = 0;
    goto LABEL_28;
  }
  if ((_QWORD *)v60[0] != v59)
  {
LABEL_26:
    v23 = v60;
    *v20 = (unint64_t)v18;
    goto LABEL_27;
  }
  *v20 = v21;
  (*(void (**)(_QWORD *, uint64_t))(v59[0] + 24))(v59, v4 + 104);
  do
LABEL_28:
    v24 = __ldaxr(v5);
  while (__stlxr(v21, v5));
  if (v24)
  {
    if (!*(_BYTE *)(v4 + 88))
      goto LABEL_78;
    v25 = (const std::runtime_error *)(v4 + 8);
    v26 = *(_BYTE *)(v4 + 80);
    if (v26)
    {
      v48.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
      v27 = &v48.__imp_;
      v28 = (const char **)(v4 + 16);
    }
    else
    {
      std::runtime_error::runtime_error(&v48, v25);
      v35 = (_QWORD *)(v4 + 48);
      v36 = *(_QWORD *)(v4 + 48);
      v49 = *(_OWORD *)(v4 + 24);
      v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v50 = *(uint64_t **)(v4 + 40);
      v51 = v36;
      v52 = *(_QWORD *)(v4 + 56);
      if (v52)
      {
        *(_QWORD *)(v36 + 16) = &v51;
        *(_QWORD *)(v4 + 40) = v35;
        *v35 = 0;
        *(_QWORD *)(v4 + 56) = 0;
      }
      else
      {
        v50 = &v51;
      }
      v38 = *(_QWORD *)(v4 + 64);
      v37 = (const std::runtime_error *)(v4 + 64);
      v53 = v38;
      v27 = (std::__libcpp_refstring *)&v54;
      v28 = &v37->__imp_.__imp_;
      v25 = v37;
    }
    v27->__imp_ = *v28;
    v25->__vftable = 0;
    v25->__imp_.__imp_ = 0;
    v55 = v26;
    if (!*v20)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(unint64_t, std::runtime_error *))(*(_QWORD *)*v20 + 48))(*v20, &v48);
    if (v55)
    {
      v39 = (std::__shared_weak_count *)v48.__imp_.__imp_;
      if (v48.__imp_.__imp_)
      {
        v40 = (unint64_t *)(v48.__imp_.__imp_ + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v48.~runtime_error)(&v48);
    }
  }
  v42 = (_QWORD *)v60[0];
  if ((_QWORD *)v60[0] == v59)
  {
    v43 = 4;
    v42 = v59;
  }
  else
  {
    if (!v60[0])
      goto LABEL_60;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_60:
  if (v58 == v57)
  {
    v44 = 4;
  }
  else
  {
    if (!v58)
      goto LABEL_65;
    v44 = 5;
    v13 = v58;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v44))(v13);
LABEL_65:
  imp = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v34 = __ldaxr(v45);
    while (__stlxr(v34 - 1, v45));
LABEL_68:
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
LABEL_70:
  if (v3)
  {
    v46 = (unint64_t *)&v3->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_18CCD5D2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::__emplace_unique_key_args<std::string,std::string&,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared&>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  const void *v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  const void *v18;
  size_t v19;
  int v20;
  uint64_t *result;
  uint64_t *v22;
  std::string *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;

  v8 = a1 + 1;
  v7 = a1[1];
  if (!v7)
  {
    v12 = a1 + 1;
    goto LABEL_29;
  }
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v11 = a2[1];
  do
  {
    while (1)
    {
      v12 = (uint64_t **)v7;
      v15 = v7[4];
      v13 = v7 + 4;
      v14 = (_QWORD *)v15;
      v16 = *((char *)v13 + 23);
      v17 = v16 >= 0 ? v13 : v14;
      v18 = v16 >= 0 ? (const void *)*((unsigned __int8 *)v13 + 23) : (const void *)v13[1];
      v19 = (size_t)(v18 >= v11 ? v11 : v18);
      v20 = memcmp(v10, v17, v19);
      if (v20)
        break;
      if (v11 >= v18)
        goto LABEL_22;
LABEL_8:
      v7 = *v12;
      v8 = v12;
      if (!*v12)
        goto LABEL_29;
    }
    if (v20 < 0)
      goto LABEL_8;
LABEL_22:
    result = (uint64_t *)memcmp(v17, v10, v19);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v18 >= v11)
    {
      return result;
    }
    v7 = v12[1];
  }
  while (v7);
  v8 = v12 + 1;
LABEL_29:
  v22 = (uint64_t *)operator new(0x48uLL);
  v23 = (std::string *)(v22 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v22[6] = *(_QWORD *)(a3 + 16);
  }
  v24 = a4[1];
  v22[7] = *a4;
  v22[8] = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v12;
  *v8 = v22;
  v27 = (uint64_t *)**a1;
  if (v27)
  {
    *a1 = v27;
    v22 = *v8;
  }
  result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_18CCD5EDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E2522050;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E2522050;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v2 = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *v2 = &off_1E2522050;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[6];
  if (v7)
  {
    if ((_QWORD *)v7 == a1 + 3)
    {
      v2[6] = v2 + 3;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      return v2;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  v2[6] = v7;
  return v2;
}

void sub_18CCD60C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::__clone(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v4 = a1[1];
  v3 = a1[2];
  *a2 = &off_1E2522050;
  a2[1] = v4;
  a2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)a1[6];
  if (v7)
  {
    if (v7 == a1 + 3)
    {
      a2[6] = a2 + 3;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*v7 + 16))(a1[6]);
      a2[6] = result;
    }
  }
  else
  {
    result = 0;
    a2[6] = 0;
  }
  return result;
}

void sub_18CCD61A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::destroy(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::operator()(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = a1[6];
  if (!v2)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  a1[1] = 0;
  a1[2] = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNO7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE4thenEONS1_8functionIFvONS1_8e"
                     "xpectedIS5_S6_EEEEEEUlSB_E_"
    || ((v3 & (unint64_t)"ZNO7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE4thenEONS1_8functio"
                                "nIFvONS1_8expectedIS5_S6_EEEEEEUlSB_E_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNO7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE4thenEONS1_8functionIFvONS1_8expectedIS5_S6_EEEEEEUlSB_E_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNO7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE4thenEONS1_8functionIFvONS1_8expectedIS5_S6_EEEEEEUlSB_E_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::target_type()
{
}

_QWORD *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E2521FA0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E2521FA0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E2521FA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E2521FA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::operator()(uint64_t a1, std::runtime_error *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  void (***v6)(void);
  void (***v7)(void);
  void (***v8)(void);

  v4 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v4);
  std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(*(_QWORD *)(a1 + 8) + 64), a2);
  v5 = *(_QWORD **)(a1 + 8);
  v6 = (void (***)(void))v5[19];
  v7 = (void (***)(void))v5[20];
  v5[20] = 0;
  v5[21] = 0;
  v5[19] = 0;
  std::mutex::unlock(v4);
  if (v6 != v7)
  {
    v8 = v6;
    do
      (**v8++)();
    while (v8 != v7);
  }
  if (v6)
    operator delete(v6);
}

uint64_t std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE6SharedC1EOS7_EUlONS1_8expectedIS5_S6_EEE_"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE6SharedC1EOS7_EUlONS"
                                "1_8expectedIS5_S6_EEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE6SharedC1EOS7_EUlONS1_8expectedIS5_S6_EEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE6SharedC1EOS7_EUlONS1_8expectedIS5_S6_EEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::target_type()
{
}

void std::__shared_ptr_emplace<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context>>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(_QWORD *)(a1 + 184) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 168))
  {
    if (*(_BYTE *)(a1 + 160))
    {
      v3 = *(std::__shared_weak_count **)(a1 + 96);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 88))(a1 + 88);
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

_BYTE *AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _BYTE *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const char *v46;
  char v47;
  const void **v48;
  unsigned __int8 *v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *imp;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unsigned int *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::chrono::system_clock::time_point v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::runtime_error v83;
  __int128 v84;
  unsigned int **v85;
  uint64_t v86;
  unsigned int *v87;
  __int128 v88;
  std::runtime_error __p;
  __int128 v90;
  unsigned int **v91;
  uint64_t v92;
  unsigned int *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[3];
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _OWORD v112[2];
  __int128 v113;
  uint64_t v114;
  char v115;
  char v116;
  std::runtime_error v117;
  __int128 v118;
  unsigned int **v119;
  unsigned int *v120[2];
  __int128 v121;

  v1 = *((_QWORD *)result + 225);
  if (*(_BYTE *)(v1 + 432))
  {
    v2 = result;
    v3 = (std::runtime_error *)(result + 152);
    v4 = (const std::runtime_error *)(v1 + 8);
    v5 = *(_BYTE *)(v1 + 424);
    if (!v5)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 152), v4);
      *((_QWORD *)v2 + 19) = MEMORY[0x1E0DE4F90] + 16;
      *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
      *((_QWORD *)v2 + 19) = off_1E2521330;
      *((_QWORD *)v2 + 23) = *(_QWORD *)(v1 + 40);
      v10 = (_QWORD *)(v1 + 48);
      v11 = *(_QWORD *)(v1 + 48);
      *((_QWORD *)v2 + 24) = v11;
      v12 = v2 + 192;
      v13 = *(_QWORD *)(v1 + 56);
      *((_QWORD *)v2 + 25) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(v1 + 40) = v10;
        *v10 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 23) = v12;
      }
      *((_OWORD *)v2 + 13) = *(_OWORD *)(v1 + 64);
      *(_QWORD *)(v1 + 64) = 0;
      *(_QWORD *)(v1 + 72) = 0;
      v2[224] = 0;
      *((_QWORD *)v2 + 19) = &off_1E2521420;
      v2[248] = 0;
      if (*(_BYTE *)(v1 + 104))
      {
        v19 = *(_OWORD *)(v1 + 80);
        *((_QWORD *)v2 + 30) = *(_QWORD *)(v1 + 96);
        *((_OWORD *)v2 + 14) = v19;
        *(_QWORD *)(v1 + 88) = 0;
        *(_QWORD *)(v1 + 96) = 0;
        *(_QWORD *)(v1 + 80) = 0;
        v2[248] = 1;
      }
      v20 = *(_OWORD *)(v1 + 128);
      *((_OWORD *)v2 + 16) = *(_OWORD *)(v1 + 112);
      *((_OWORD *)v2 + 17) = v20;
      v21 = *(_OWORD *)(v1 + 144);
      v22 = *(_OWORD *)(v1 + 160);
      v23 = *(_OWORD *)(v1 + 176);
      *(_OWORD *)(v2 + 329) = *(_OWORD *)(v1 + 185);
      *((_OWORD *)v2 + 19) = v22;
      *((_OWORD *)v2 + 20) = v23;
      *((_OWORD *)v2 + 18) = v21;
      *((_QWORD *)v2 + 45) = 0;
      *((_QWORD *)v2 + 46) = 0;
      *((_QWORD *)v2 + 44) = 0;
      *((_OWORD *)v2 + 22) = *(_OWORD *)(v1 + 208);
      *((_QWORD *)v2 + 46) = *(_QWORD *)(v1 + 224);
      *(_QWORD *)(v1 + 216) = 0;
      *(_QWORD *)(v1 + 224) = 0;
      *(_QWORD *)(v1 + 208) = 0;
      v24 = *(_OWORD *)(v1 + 248);
      *(_OWORD *)(v2 + 376) = *(_OWORD *)(v1 + 232);
      *(_OWORD *)(v2 + 392) = v24;
      v25 = *(_OWORD *)(v1 + 264);
      v26 = *(_OWORD *)(v1 + 280);
      v27 = *(_OWORD *)(v1 + 312);
      *(_OWORD *)(v2 + 440) = *(_OWORD *)(v1 + 296);
      *(_OWORD *)(v2 + 456) = v27;
      *(_OWORD *)(v2 + 408) = v25;
      *(_OWORD *)(v2 + 424) = v26;
      v28 = *(_OWORD *)(v1 + 328);
      v29 = *(_OWORD *)(v1 + 344);
      v30 = *(_OWORD *)(v1 + 360);
      *(_OWORD *)(v2 + 514) = *(_OWORD *)(v1 + 370);
      *(_OWORD *)(v2 + 488) = v29;
      *(_OWORD *)(v2 + 504) = v30;
      *(_OWORD *)(v2 + 472) = v28;
      v2[536] = 0;
      v2[560] = 0;
      if (*(_BYTE *)(v1 + 416))
      {
        v31 = *(_OWORD *)(v1 + 392);
        *((_QWORD *)v2 + 69) = *(_QWORD *)(v1 + 408);
        *(_OWORD *)(v2 + 536) = v31;
        *(_QWORD *)(v1 + 400) = 0;
        *(_QWORD *)(v1 + 408) = 0;
        *(_QWORD *)(v1 + 392) = 0;
        v2[560] = 1;
      }
LABEL_24:
      v2[568] = v5;
      v32 = *((_QWORD *)v2 + 226);
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          v35 = (std::__shared_weak_count *)*((_QWORD *)v2 + 226);
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v36 = (std::__shared_weak_count *)*((_QWORD *)v2 + 223);
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = v2 + 16;
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v2 + 1360));
      v40 = (std::__shared_weak_count *)*((_QWORD *)v2 + 169);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2 + 121);
      if (!v2[568])
      {
        std::runtime_error::runtime_error(&__p, v3);
        v50 = v2 + 192;
        v51 = *((_QWORD *)v2 + 24);
        v90 = *(_OWORD *)(v2 + 168);
        v91 = (unsigned int **)*((_QWORD *)v2 + 23);
        v92 = v51;
        v93 = (unsigned int *)*((_QWORD *)v2 + 25);
        if (v93)
        {
          *(_QWORD *)(v51 + 16) = &v92;
          *((_QWORD *)v2 + 23) = v50;
          *v50 = 0;
          *((_QWORD *)v2 + 25) = 0;
        }
        else
        {
          v91 = (unsigned int **)&v92;
        }
        v94 = *((_OWORD *)v2 + 13);
        *((_QWORD *)v2 + 26) = 0;
        *((_QWORD *)v2 + 27) = 0;
        __p.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
        LOBYTE(v95) = 0;
        v97 = 0;
        if (v2[248])
        {
          v95 = *((_OWORD *)v2 + 14);
          v96 = *((_QWORD *)v2 + 30);
          *((_QWORD *)v2 + 29) = 0;
          *((_QWORD *)v2 + 30) = 0;
          *((_QWORD *)v2 + 28) = 0;
          v97 = 1;
        }
        v55 = *((_OWORD *)v2 + 19);
        v100 = *((_OWORD *)v2 + 18);
        v101 = v55;
        v102[0] = *((_OWORD *)v2 + 20);
        v56 = *((_OWORD *)v2 + 17);
        v98 = *((_OWORD *)v2 + 16);
        v99 = v56;
        *(_OWORD *)((char *)v102 + 9) = *(_OWORD *)(v2 + 329);
        v102[2] = *((_OWORD *)v2 + 22);
        v103 = *((_QWORD *)v2 + 46);
        *((_QWORD *)v2 + 44) = 0;
        *((_QWORD *)v2 + 45) = 0;
        *((_QWORD *)v2 + 46) = 0;
        *(_OWORD *)((char *)v112 + 10) = *(_OWORD *)(v2 + 514);
        v57 = *(_OWORD *)(v2 + 488);
        v110 = *(_OWORD *)(v2 + 472);
        v111 = v57;
        v112[0] = *(_OWORD *)(v2 + 504);
        v58 = *(_OWORD *)(v2 + 424);
        v106 = *(_OWORD *)(v2 + 408);
        v107 = v58;
        v59 = *(_OWORD *)(v2 + 456);
        v108 = *(_OWORD *)(v2 + 440);
        v109 = v59;
        v60 = *(_OWORD *)(v2 + 392);
        v104 = *(_OWORD *)(v2 + 376);
        v105 = v60;
        LOBYTE(v113) = 0;
        v115 = 0;
        if (v2[560])
        {
          v114 = *((_QWORD *)v2 + 69);
          v113 = *(_OWORD *)(v2 + 536);
          *((_QWORD *)v2 + 69) = 0;
          *((_QWORD *)v2 + 67) = 0;
          *((_QWORD *)v2 + 68) = 0;
          v115 = 1;
        }
        v116 = 1;
        std::runtime_error::runtime_error(&v83, &__p);
        v84 = v90;
        v83.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v85 = v91;
        v86 = v92;
        v87 = v93;
        if (v93)
        {
          *(_QWORD *)(v92 + 16) = &v86;
          v91 = (unsigned int **)&v92;
          v92 = 0;
          v93 = 0;
        }
        else
        {
          v85 = (unsigned int **)&v86;
        }
        v88 = v94;
        v94 = 0uLL;
        std::runtime_error::runtime_error(&v117, &v83);
        v118 = v84;
        v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v61 = (unsigned int *)v86;
        v119 = v85;
        v120[0] = (unsigned int *)v86;
        v120[1] = v87;
        if (v87)
        {
          *(_QWORD *)(v86 + 16) = v120;
          v61 = 0;
          v85 = (unsigned int **)&v86;
          v86 = 0;
          v87 = 0;
        }
        else
        {
          v119 = v120;
        }
        v121 = v88;
        v88 = 0uLL;
        v83.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v85, v61);
        MEMORY[0x18D7898AC](&v83);
        std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v2 + 24), &v117);
        v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v62 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
        v39 = v2 + 16;
        if (*((_QWORD *)&v121 + 1))
        {
          v63 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v119, v120[0]);
        MEMORY[0x18D7898AC](&v117);
        if (v116)
          AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&__p);
        if (!v2[568])
          goto LABEL_120;
        goto LABEL_85;
      }
      v43 = *((_QWORD *)v2 + 42);
      if (*(_WORD *)(v43 + 152) != 200)
      {
        LOWORD(v117.__vftable) = *(_WORD *)(v43 + 152);
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__p);
        AMSCore::Logger::log<char [49],AMSCore::HTTPResponse::StatusCode>((uint64_t)__p.__vftable);
        imp = (std::__shared_weak_count *)__p.__imp_.__imp_;
        if (__p.__imp_.__imp_)
        {
          v53 = (unint64_t *)(__p.__imp_.__imp_ + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
        goto LABEL_107;
      }
      BYTE7(v90) = 4;
      strcpy((char *)&__p, "ETag");
      AMSCore::IHTTPHeaderMap::getSingleValueOrNone((std::string *)&v117, (_QWORD *)(v43 + 160), (char *)&__p);
      if (SBYTE7(v90) < 0)
        operator delete(__p.__vftable);
      if (v2[1720] && BYTE8(v118))
      {
        v44 = v2[1719];
        if ((v44 & 0x80u) == 0)
          v45 = v2[1719];
        else
          v45 = *((_QWORD *)v2 + 213);
        v46 = (const char *)BYTE7(v118);
        v47 = BYTE7(v118);
        if (SBYTE7(v118) < 0)
          v46 = v117.__imp_.__imp_;
        if ((const char *)v45 == v46)
        {
          v48 = (const void **)(v2 + 1696);
          if ((SBYTE7(v118) & 0x80u) == 0)
            v49 = (unsigned __int8 *)&v117;
          else
            v49 = (unsigned __int8 *)v117.__vftable;
          if ((v44 & 0x80) != 0)
          {
            if (memcmp(*v48, v49, *((_QWORD *)v2 + 213)))
              goto LABEL_96;
          }
          else if (v2[1719])
          {
            while (*(unsigned __int8 *)v48 == *v49)
            {
              v48 = (const void **)((char *)v48 + 1);
              ++v49;
              if (!--v44)
                goto LABEL_105;
            }
            goto LABEL_96;
          }
LABEL_105:
          if (v47 < 0)
            operator delete(v117.__vftable);
          goto LABEL_107;
        }
      }
LABEL_96:
      v71 = *(_QWORD *)(*((_QWORD *)v2 + 224) + 8);
      v72 = *((_QWORD *)v2 + 42);
      v73.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      (*(void (**)(std::runtime_error *__return_ptr, uint64_t, _BYTE *, _BYTE *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep))(*(_QWORD *)v71 + 24))(&__p, v71, v2 + 1752, v2 + 1728, v72, v73.__d_.__rep_);
      if (!(_BYTE)v95)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v83);
        AMSCore::Logger::log<char [26],AMSCore::Error>((uint64_t)v83.__vftable, (uint64_t)&__p);
        v74 = (std::__shared_weak_count *)v83.__imp_.__imp_;
        if (v83.__imp_.__imp_)
        {
          v75 = (unint64_t *)(v83.__imp_.__imp_ + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        if (!(_BYTE)v95)
          ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
      }
      v47 = BYTE7(v118);
      if (BYTE8(v118))
        goto LABEL_105;
LABEL_107:
      if (v2[104])
      {
        if (v2[96])
        {
          v77 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
          if (v77)
          {
            v78 = (unint64_t *)&v77->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
        }
        else
        {
          (**((void (***)(uint64_t))v2 + 3))((uint64_t)(v2 + 24));
        }
        v2[104] = 0;
      }
      v80 = *((_QWORD *)v2 + 43);
      *((_QWORD *)v2 + 3) = *((_QWORD *)v2 + 42);
      *((_QWORD *)v2 + 4) = v80;
      if (v80)
      {
        v81 = (unint64_t *)(v80 + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      v2[96] = 1;
      v2[104] = 1;
      if (!v2[568])
      {
LABEL_120:
        ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
LABEL_121:
        *((_QWORD *)v2 + 19) = v39;
        *(_QWORD *)v2 = 0;
        v2[1816] = 1;
        return AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
      }
LABEL_85:
      v65 = (std::__shared_weak_count *)*((_QWORD *)v2 + 43);
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v2 + 168));
      v68 = (std::__shared_weak_count *)*((_QWORD *)v2 + 20);
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      goto LABEL_121;
    }
    *(_OWORD *)(result + 152) = *(_OWORD *)(v1 + 8);
    v4->__vftable = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *((_QWORD *)result + 21) = *(_QWORD *)(v1 + 24);
    v6 = (_QWORD *)(v1 + 32);
    v7 = *(_QWORD *)(v1 + 32);
    *((_QWORD *)result + 22) = v7;
    v8 = result + 176;
    v9 = *(_QWORD *)(v1 + 40);
    *((_QWORD *)result + 23) = v9;
    if (v9)
    {
      *(_QWORD *)(v7 + 16) = v8;
      *(_QWORD *)(v1 + 24) = v6;
      *v6 = 0;
      *(_QWORD *)(v1 + 40) = 0;
    }
    else
    {
      *((_QWORD *)result + 21) = v8;
    }
    *((_OWORD *)result + 12) = *(_OWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *((_OWORD *)result + 13) = *(_OWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    result[224] = 0;
    result[248] = 0;
    if (*(_BYTE *)(v1 + 104))
    {
      v14 = *(_OWORD *)(v1 + 80);
      *((_QWORD *)result + 30) = *(_QWORD *)(v1 + 96);
      *((_OWORD *)result + 14) = v14;
      *(_QWORD *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 96) = 0;
      *(_QWORD *)(v1 + 80) = 0;
      result[248] = 1;
    }
    result[256] = 0;
    *((_DWORD *)result + 68) = -1;
    v15 = *(unsigned int *)(v1 + 128);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(std::runtime_error *, _BYTE *, uint64_t))off_1E253CA98[v15])(&__p, result + 256, v1 + 112);
      *((_DWORD *)v2 + 68) = v15;
    }
    v16 = *(_OWORD *)(v1 + 136);
    *((_DWORD *)v2 + 74) = *(_DWORD *)(v1 + 152);
    *(_OWORD *)(v2 + 280) = v16;
    v17 = (_QWORD *)(v1 + 184);
    v18 = *(_QWORD *)(v1 + 184);
    if (v18)
    {
      if (v18 == v1 + 160)
      {
        *((_QWORD *)v2 + 41) = v2 + 304;
        (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 24))(*v17);
        goto LABEL_18;
      }
      *((_QWORD *)v2 + 41) = v18;
    }
    else
    {
      v17 = v2 + 328;
    }
    *v17 = 0;
LABEL_18:
    *((_OWORD *)v2 + 21) = *(_OWORD *)(v1 + 192);
    *(_QWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 200) = 0;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

void sub_18CCD718C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)(_QWORD),uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  int v30;
  uint64_t v31;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a11);
  if (!a29)
    (*a20)(&a20);
  if (v30)
  {
    if (*(char *)(v31 - 137) < 0)
      operator delete(*(void **)(v31 - 160));
  }
  std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::~expected[abi:fe180100](v29);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCD7204()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCD7144);
}

void sub_18CCD720C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 1816) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  if ((*(_BYTE *)(a1 + 1816) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 1808);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = *(std::__shared_weak_count **)(a1 + 1808);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = *(std::__shared_weak_count **)(a1 + 1784);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1360));
    v9 = *(std::__shared_weak_count **)(a1 + 1352);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 968));
  }
  v12 = *(_QWORD **)(a1 + 144);
  if (v12 == (_QWORD *)(a1 + 120))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 120);
  }
  else
  {
    if (!v12)
      goto LABEL_23;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_23:
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      v14 = *(std::__shared_weak_count **)(a1 + 32);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    }
  }
  do
  {
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v18)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (*(_BYTE *)(a1 + 1720) && *(char *)(a1 + 1719) < 0)
    operator delete(*(void **)(a1 + 1696));
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1528));
  v19 = *(std::__shared_weak_count **)(a1 + 960);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 576));
  if (*(char *)(a1 + 1775) < 0)
  {
    operator delete(*(void **)(a1 + 1752));
    if ((*(char *)(a1 + 1751) & 0x80000000) == 0)
      goto LABEL_44;
LABEL_46:
    operator delete(*(void **)(a1 + 1728));
    goto LABEL_44;
  }
  if (*(char *)(a1 + 1751) < 0)
    goto LABEL_46;
LABEL_44:
  operator delete((void *)a1);
}

uint64_t AMSCore::Logger::log<char [26],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"failed to update database", 25);
    AMSCore::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 4;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "data", 4, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CCD76BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [49],AMSCore::HTTPResponse::StatusCode>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"failed to update http cache due to status code: ", 48);
    std::ostream::operator<<();
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 4;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "data", 4, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CCD7964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE7Promise17get_return"
                                "_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E2521868;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E2521868;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E2521868;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E2521868;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[9];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (*a3 == 2)
  {
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(v7);
    if (!v8)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v9);
      AMSCore::Logger::log<char [36],std::string>(v9, 4, (uint64_t)"accounts", 8, "failed to delete account image for ", a2);
      v4 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (!v8)
        (*(void (**)(_QWORD *))v7[0])(v7);
    }
  }
}

void sub_18CCD7E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(_QWORD), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v20 = *(std::__shared_weak_count **)(v18 - 24);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!a18)
    (*a9)(&a9);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore12_GLOBAL__N_112makeObserverENSt3__110shared_ptrINS_26IHTTPCacheDataAccessObjectEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore12_GLOBAL__N_112makeObserverENSt3__110shared_ptrINS_26IHTTPCacheDataAccessObjectEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore12_GLOBAL__N_112makeObserverENSt3__110shared_ptrINS_26IHTTPCacheDataAccessObjectEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore12_GLOBAL__N_112makeObserverENSt3__110shared_ptrINS_26IHTTPCacheDataAccessObjectEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::`anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::target_type()
{
}

uint64_t AMSCore::Logger::log<char [36],std::string>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  void *__p[2];
  __int128 v30;
  int v31;
  uint64_t v32[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v11 = result;
    v12 = MEMORY[0x1E0DE4FE0];
    v13 = MEMORY[0x1E0DE4FE0] + 64;
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v32[0] = MEMORY[0x1E0DE4FE0] + 64;
    v27 = v14;
    *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v14 - 24)) = v15;
    v16 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
    std::ios_base::init(v16, v28);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v27 = v12 + 24;
    v32[0] = v13;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8];
    v28[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    v31 = 16;
    v18 = *(_QWORD *)(v27 - 24);
    if ((v19 & 1) == 0
    {
    }
    v20 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)a5, v20);
    v21 = *(char *)(a6 + 23);
    if (v21 >= 0)
      v22 = a6;
    else
      v22 = *(_QWORD *)a6;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a6 + 23);
    else
      v23 = *(_QWORD *)(a6 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, v22, v23);
    v24 = v28[5];
    v25 = (char *)&v28[-1] + *(_QWORD *)(v27 - 24);
    if ((v25[32] & 5) != 0)
    {
      v26 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v25 + 5) + 32))(&rep, *((_QWORD *)v25 + 5), 0, 1, 16);
      v26 = v37;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v34 = a2;
    v35 = v24;
    v36 = v26;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), a3, a4, &rep);
    v27 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v28[0] = v17 + 16;
    if (SBYTE7(v30) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v32);
  }
  return result;
}

void sub_18CCD81C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<AMSCore::IHTTPCacheDataAccessObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::IHTTPCacheDataAccessObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::IHTTPCacheDataAccessObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore26IHTTPCacheDataAccessObjectEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore26IHTTPCacheDataAccessObjectEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore26IHTTPCacheDataAccessObjectEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore26IHTTPCacheDataAccessObjectEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<AMSCore::HTTPCacheProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::HTTPCacheProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::HTTPCacheProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMSCore::CookieUtils::parseResponseHeaderFields(std::runtime_error *this, const AMSCore::IHTTPHeaderMap *a2, const AMSCore::URL *a3)
{
  std::system_error_vtbl *v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error_vtbl *v8;
  std::system_error_vtbl *v9;
  std::ios_base *v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type size;
  unsigned int *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string *v17;
  unint64_t v18;
  int v19;
  size_t v20;
  std::system_error_vtbl *p_dst;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  int v30;
  char *v31;
  const char *v32;
  const char *v33;
  const char *imp;
  const std::locale *v35;
  const std::locale::facet *v36;
  const std::locale::facet *v37;
  const char *v38;
  char *v39;
  const char *v40;
  const char *v41;
  char v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  std::ios_base *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  std::runtime_error_vtbl *v50;
  int v51;
  int v52;
  int v53;
  void *v54;
  _BYTE *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  _BOOL4 v60;
  size_t v61;
  char *v62;
  _BYTE *v63;
  std::string::size_type v64;
  _BYTE *v65;
  uint64_t v66;
  void *v67;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  std::string::size_type v74;
  std::string *v75;
  uint64_t v76;
  const void *cat;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  __int128 v81;
  _OWORD *v82;
  std::runtime_error v83;
  char *v84;
  char *v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  unsigned int *v93;
  void *v94;
  const char *v95;
  std::runtime_error_vtbl *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unint64_t v102;
  unsigned int *v104;
  unint64_t v105;
  BOOL v106;
  char *v107;
  unint64_t v108;
  unint64_t v109;
  size_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unint64_t v119;
  unint64_t v121;
  unsigned __int8 *v122;
  unint64_t v123;
  unint64_t v124;
  size_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  char v132;
  void *v133;
  char v134;
  std::string::size_type v135;
  char v136;
  std::string *v137;
  std::string::size_type v138;
  std::system_error_vtbl *v139;
  uint64_t v140;
  uint64_t v141;
  std::string::size_type v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  unint64_t v152;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v159;
  char *v160;
  const std::locale *v161;
  const std::locale::facet *v162;
  const std::locale::facet *v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unint64_t v170;
  unsigned __int8 *v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unint64_t v174;
  unint64_t v176;
  unsigned __int8 *v177;
  unint64_t v178;
  unint64_t v179;
  std::string::size_type v181;
  std::string *v182;
  uint64_t v183;
  uint64_t v184;
  std::string::size_type v185;
  const std::locale *v186;
  const std::locale::facet *v187;
  const std::locale::facet *v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  std::string *v196;
  const std::locale *v197;
  const std::locale::facet *v198;
  const std::locale::facet *v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  const std::locale *v207;
  const std::locale::facet *v208;
  const std::locale::facet *v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  std::string::size_type v217;
  std::string *v218;
  _BOOL4 v219;
  const std::locale *v220;
  const std::locale::facet *v221;
  const std::locale::facet *v222;
  int v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  void **v228;
  std::string *v229;
  std::string::size_type v230;
  uint64_t v231;
  uint64_t v232;
  std::string *v233;
  std::string::size_type v234;
  void **v235;
  _BYTE *v236;
  _BYTE *v237;
  int v238;
  uint64_t v239;
  std::system_error_vtbl *v240;
  unsigned int *v241;
  uint64_t v242;
  std::chrono::system_clock::time_point v243;
  char *v244;
  void *v245;
  std::runtime_error *v246;
  uint64_t v247;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v249;
  void *v250;
  uint64_t *v252;
  char v253;
  std::system_error_vtbl *v254;
  std::system_error_vtbl *v255;
  char *v256;
  const char *v257;
  std::system_error_vtbl *v258;
  uint64_t v259;
  std::system_error_vtbl *v260;
  char *v261;
  uint64_t *v262;
  const char *v263;
  std::string v264;
  std::runtime_error v265;
  std::error_code ec;
  std::runtime_error_vtbl *v267;
  uint64_t v268;
  std::runtime_error_vtbl *v269;
  __int128 v270;
  char v271;
  std::runtime_error v272;
  std::runtime_error_vtbl *v273;
  void *v274;
  char *v275;
  unint64_t v276;
  std::string v277;
  std::string v278;
  char v279;
  std::string v280;
  std::string v281;
  uint64_t v282;
  void *v283;
  __int128 v284;
  void *v285;
  __int128 v286;
  char *v287;
  char *v288;
  std::string v289;
  uint64_t v290[2];
  std::system_error __dst;
  std::runtime_error_vtbl *v292;
  uint64_t v293;
  void *__src;
  __int128 v295;
  __int128 __p;
  __int128 v297;
  int v298;
  _QWORD v299[19];
  __int128 v300;
  _BYTE __what_arg[32];
  std::runtime_error_vtbl *v302;
  uint64_t v303;
  void *v304;
  __int128 v305;
  uint64_t v306;
  std::error_code v307;

  v306 = *MEMORY[0x1E0C80C00];
  v278.__r_.__value_.__s.__data_[0] = 0;
  v279 = 0;
  if (!*((_BYTE *)a3 + 56))
  {
    AMSCore::URL::getStringRepresentation(a3, &v289);
    v5 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v6 = MEMORY[0x1E0DE4FE0] + 64;
    v7 = MEMORY[0x1E0DE4F60];
    v8 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v299[0] = MEMORY[0x1E0DE4FE0] + 64;
    __dst.__vftable = v8;
    *(std::system_error_vtbl **)((char *)&__dst.__vftable + (unint64_t)v8[-1].~system_error) = v9;
    v10 = (std::ios_base *)((char *)&__dst + (unint64_t)__dst.__vftable[-1].~system_error);
    std::ios_base::init(v10, &__dst.__imp_);
    v10[1].__vftable = 0;
    v10[1].__fmtflags_ = -1;
    __dst.__vftable = v5 + 1;
    v299[0] = v6;
    std::streambuf::basic_streambuf();
    v11 = MEMORY[0x1E0DE4FB8];
    __dst.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    __p = 0u;
    v297 = 0u;
    v298 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"Received an invalid URL. url = ", 31);
    if ((v289.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v289;
    else
      v12 = (std::string *)v289.__r_.__value_.__r.__words[0];
    if ((v289.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v289.__r_.__value_.__r.__words[2]);
    else
      size = v289.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v12, size);
    std::stringbuf::str[abi:fe180100]((uint64_t)&__dst.__imp_, (std::string *)__what_arg);
    __dst.__vftable = *(std::system_error_vtbl **)v7;
    *(std::system_error_vtbl **)((char *)&__dst.__vftable + (unint64_t)__dst.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v7 + 24);
    __dst.__imp_.__imp_ = (const char *)(v11 + 16);
    if (SBYTE7(v297) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v299);
    v307.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
    *(_QWORD *)&v307.__val_ = 311;
    std::system_error::system_error(&__dst, v307, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    __src = 0;
    v293 = 0;
    __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v292 = (std::runtime_error_vtbl *)&v293;
    v295 = 0uLL;
    std::runtime_error::runtime_error(&v265, &__dst);
    ec = __dst.__ec_;
    v265.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v14 = (unsigned int *)v293;
    v267 = v292;
    v268 = v293;
    v269 = (std::runtime_error_vtbl *)__src;
    if (__src)
    {
      *(_QWORD *)(v293 + 16) = &v268;
      v14 = 0;
      v292 = (std::runtime_error_vtbl *)&v293;
      v293 = 0;
      __src = 0;
    }
    else
    {
      v267 = (std::runtime_error_vtbl *)&v268;
    }
    v270 = v295;
    v295 = 0uLL;
    __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v292, v14);
    MEMORY[0x18D7898AC](&__dst);
    v246 = std::runtime_error::runtime_error(this, &v265);
    v246[1] = (std::runtime_error)ec;
    v246->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v247 = v268;
    v246[2].__vftable = v267;
    v246[2].__imp_.__imp_ = (const char *)v247;
    p_imp = (std::runtime_error_vtbl *)&v246[2].__imp_;
    v249 = v269;
    v246[3].__vftable = v269;
    if (v249)
    {
      *(_QWORD *)(v247 + 16) = p_imp;
      v247 = 0;
      v267 = (std::runtime_error_vtbl *)&v268;
      v268 = 0;
      v269 = 0;
    }
    else
    {
      v246[2].__vftable = p_imp;
    }
    *(_OWORD *)&v246[3].__imp_.__imp_ = v270;
    v270 = 0uLL;
    LOBYTE(v246[4].__imp_.__imp_) = 0;
    v265.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v267, (unsigned int *)v247);
    MEMORY[0x18D7898AC](&v265);
    if ((SHIBYTE(v289.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_487;
    v250 = (void *)v289.__r_.__value_.__r.__words[0];
    goto LABEL_486;
  }
  if (*((char *)a3 + 55) < 0)
    std::string::__init_copy_ctor_external(&v278, *((const std::string::value_type **)a3 + 4), *((_QWORD *)a3 + 5));
  else
    v278 = *(std::string *)((char *)a3 + 32);
  v279 = 1;
  std::optional<std::string>::value_or[abi:fe180100]<char const(&)[2]>(&v277, (uint64_t)a3 + 64, "/");
  v15 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
  v16 = (std::string *)v277.__r_.__value_.__r.__words[0];
  if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v277;
  else
    v17 = (std::string *)v277.__r_.__value_.__r.__words[0];
  if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = v277.__r_.__value_.__l.__size_;
  if (v15)
  {
    v18 = v15;
    while (v18)
    {
      v19 = v17->__r_.__value_.__s.__data_[--v18];
      if (v19 == 47)
      {
        if (v18)
          goto LABEL_30;
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
        {
          v277.__r_.__value_.__l.__size_ = 1;
        }
        else
        {
          *((_BYTE *)&v277.__r_.__value_.__s + 23) = 1;
          v16 = &v277;
        }
        LOWORD(v16->__r_.__value_.__l.__data_) = 47;
        goto LABEL_44;
      }
    }
  }
  v18 = -1;
LABEL_30:
  if (v15 >= v18)
    v20 = v18;
  else
    v20 = v15;
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:fe180100]();
  if (v20 >= 0x17)
  {
    v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v22 = v20 | 7;
    v23 = v22 + 1;
    p_dst = (std::system_error_vtbl *)operator new(v22 + 1);
    *(_QWORD *)&__dst.__ec_.__val_ = v23 | 0x8000000000000000;
    __dst.__vftable = p_dst;
    __dst.__imp_.__imp_ = (const char *)v20;
  }
  else
  {
    *((_BYTE *)&__dst.__ec_.__val_ + 7) = v20;
    p_dst = (std::system_error_vtbl *)&__dst;
    if (!v20)
      goto LABEL_41;
  }
  memmove(p_dst, v17, v20);
LABEL_41:
  *((_BYTE *)&p_dst->~system_error + v20) = 0;
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  *(std::runtime_error *)&v277.__r_.__value_.__l.__data_ = __dst.std::runtime_error;
  v277.__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst.__ec_.__val_;
LABEL_44:
  *((_BYTE *)&__dst.__ec_.__val_ + 7) = 10;
  strcpy((char *)&__dst, "Set-Cookie");
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, (char *)&__dst);
  if (v24)
  {
    v25 = v24;
    v252 = v24;
    while (1)
    {
      v26 = (uint64_t *)*v252;
      if (!*v252)
        break;
      v252 = (uint64_t *)*v252;
      v29 = v26[2];
      v27 = v26 + 2;
      v28 = (char *)v29;
      v30 = *((char *)v27 + 23);
      if (v30 >= 0)
        v31 = (char *)v27;
      else
        v31 = v28;
      if (v30 >= 0)
        v32 = (const char *)*((unsigned __int8 *)v27 + 23);
      else
        v32 = (const char *)v27[1];
      if (*((char *)&__dst.__ec_.__val_ + 7) >= 0)
        v33 = (const char *)&__dst;
      else
        v33 = (const char *)__dst.__vftable;
      if (*((char *)&__dst.__ec_.__val_ + 7) >= 0)
        imp = (const char *)*((unsigned __int8 *)&__dst.__ec_.__val_ + 7);
      else
        imp = __dst.__imp_.__imp_;
      v35 = std::locale::classic();
      v36 = std::locale::use_facet(v35, MEMORY[0x1E0DE4A90]);
      if (v32 != imp)
        goto LABEL_70;
      if (v32)
      {
        v37 = v36;
        v38 = v32 - 1;
        v39 = v31;
        v40 = v33;
        while (1)
        {
          v41 = v38;
          v42 = *v40;
          v43 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v37->__vftable[1].__on_zero_shared)(v37, *v39);
          if (v43 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v37->__vftable[1].__on_zero_shared)(v37, v42))goto LABEL_70;
          ++v39;
          ++v40;
          v38 = v41 - 1;
          if (!v41)
            goto LABEL_66;
        }
      }
      v40 = v33;
      v39 = v31;
LABEL_66:
      if (v39 != &v32[(_QWORD)v31] || v40 != &v32[(_QWORD)v33])
        goto LABEL_70;
    }
    v252 = 0;
    if ((*((char *)&__dst.__ec_.__val_ + 7) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
  v25 = 0;
  v252 = 0;
LABEL_70:
  if (*((char *)&__dst.__ec_.__val_ + 7) < 0)
LABEL_71:
    operator delete(__dst.__vftable);
LABEL_72:
  v44 = v25;
  v45 = v252;
  if (v252 == v44)
  {
    this->__vftable = 0;
    this->__imp_.__imp_ = 0;
    this[1].__vftable = 0;
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    v274 = 0;
    v275 = 0;
    v276 = 0;
    v255 = (std::system_error_vtbl *)*MEMORY[0x1E0DE4F60];
    v259 = MEMORY[0x1E0DE4FE0] + 64;
    v260 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v257 = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    v258 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v254 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
    do
    {
      v299[0] = v259;
      __dst.__vftable = v260;
      *(std::system_error_vtbl **)((char *)&__dst.__vftable + (unint64_t)v260[-1].~system_error) = v258;
      v46 = (std::ios_base *)((char *)&__dst + (unint64_t)__dst.__vftable[-1].~system_error);
      std::ios_base::init(v46, &__dst.__imp_);
      v46[1].__vftable = 0;
      v46[1].__fmtflags_ = -1;
      __dst.__vftable = (std::system_error_vtbl *)(MEMORY[0x1E0DE4FE0] + 24);
      v299[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      __dst.__imp_.__imp_ = v257;
      __p = 0u;
      v297 = 0u;
      v298 = 16;
      v47 = *((char *)v44 + 63);
      if (v47 >= 0)
        v48 = (uint64_t)(v44 + 5);
      else
        v48 = v44[5];
      if (v47 >= 0)
        v49 = *((unsigned __int8 *)v44 + 63);
      else
        v49 = v44[6];
      AMSCore::StringUtils::split((char **)&v265, v48, v49, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
      v50 = v265.__vftable;
      v263 = v265.__imp_.__imp_;
      if (v265.__vftable != (std::runtime_error_vtbl *)v265.__imp_.__imp_)
      {
        v262 = v44;
        v51 = 0;
        v52 = 0;
        while (1)
        {
          AMSCore::StringUtils::lowercase((uint64_t)__what_arg, (char *)v50->~runtime_error, (std::string::size_type)v50->~runtime_error_0);
          v53 = __what_arg[23];
          v54 = *(void **)__what_arg;
          if (__what_arg[23] >= 0)
            v55 = __what_arg;
          else
            v55 = *(_BYTE **)__what_arg;
          if (__what_arg[23] >= 0)
            v56 = __what_arg[23];
          else
            v56 = *(_QWORD *)&__what_arg[8];
          v57 = &v55[v56];
          if (v56 >= 7)
          {
            v66 = v56;
            v67 = v55;
            do
            {
              if (v66 == 6)
                break;
              v58 = (char *)memchr(v67, 101, v66 - 6);
              if (!v58)
                break;
              if (*(_DWORD *)v58 == 1768978533 && *(_DWORD *)(v58 + 3) == 1936028265)
              {
                v56 = v58 - v55;
                goto LABEL_93;
              }
              v67 = v58 + 1;
              v66 = v57 - (_BYTE *)v67;
            }
            while (v57 - (_BYTE *)v67 > 6);
          }
          v58 = &v55[v56];
LABEL_93:
          v60 = v58 != v57 && v56 != -1;
          if (v53 < 0)
            operator delete(v54);
          v51 |= v60;
          v61 = (size_t)v50->~runtime_error_0;
          if (v61)
          {
            v62 = (char *)v50->~runtime_error;
            v63 = memchr(v50->~runtime_error, 44, (size_t)v50->~runtime_error_0);
            if (v63)
              v64 = v63 - v62;
            else
              v64 = -1;
            if (v64 != -1 && ((v52 ^ v51) & 1) == 0)
            {
              if (v61 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:fe180100]();
              if (v61 >= 0x17)
              {
                v70 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v61 | 7) != 0x17)
                  v70 = v61 | 7;
                v71 = v70 + 1;
                v65 = operator new(v70 + 1);
                *(_QWORD *)&__what_arg[8] = v61;
                *(_QWORD *)&__what_arg[16] = v71 | 0x8000000000000000;
                *(_QWORD *)__what_arg = v65;
              }
              else
              {
                __what_arg[23] = v61;
                v65 = __what_arg;
              }
              memmove(v65, v62, v61);
              v65[v61] = 0;
              std::string::replace((std::string *)__what_arg, v64, 1uLL, "", 0);
              if (__what_arg[23] >= 0)
                v72 = __what_arg;
              else
                v72 = *(_BYTE **)__what_arg;
              if (__what_arg[23] >= 0)
                v73 = __what_arg[23];
              else
                v73 = *(_QWORD *)&__what_arg[8];
              std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v72, v73);
              if ((v298 & 0x10) != 0)
              {
                v76 = *((_QWORD *)&v297 + 1);
                if (*((_QWORD *)&v297 + 1) < (unint64_t)v295)
                {
                  *((_QWORD *)&v297 + 1) = v295;
                  v76 = v295;
                }
                cat = __src;
                v74 = v76 - (_QWORD)__src;
                if (v76 - (uint64_t)__src < 0)
                {
LABEL_501:
                  __break(1u);
                  return;
                }
              }
              else
              {
                if ((v298 & 8) == 0)
                {
                  v74 = 0;
                  *((_BYTE *)&v289.__r_.__value_.__s + 23) = 0;
                  v75 = &v289;
                  goto LABEL_149;
                }
                cat = __dst.__ec_.__cat_;
                v74 = v293 - (unint64_t)__dst.__ec_.__cat_;
                if ((int64_t)(v293 - (unint64_t)__dst.__ec_.__cat_) < 0)
                  goto LABEL_501;
              }
              if (v74 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:fe180100]();
              if (v74 >= 0x17)
              {
                v78 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v74 | 7) != 0x17)
                  v78 = v74 | 7;
                v79 = v78 + 1;
                v75 = (std::string *)operator new(v78 + 1);
                v289.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
                v289.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
                v289.__r_.__value_.__l.__size_ = v74;
              }
              else
              {
                *((_BYTE *)&v289.__r_.__value_.__s + 23) = v74;
                v75 = &v289;
                if (!v74)
                {
LABEL_149:
                  v75->__r_.__value_.__s.__data_[v74] = 0;
                  v80 = v275;
                  if ((unint64_t)v275 >= v276)
                  {
                    v275 = std::vector<std::string>::__emplace_back_slow_path<std::string>(&v274, (uint64_t)&v289);
                    if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v289.__r_.__value_.__l.__data_);
                      if ((SBYTE7(v297) & 0x80000000) == 0)
                        goto LABEL_154;
                    }
                    else if ((SBYTE7(v297) & 0x80000000) == 0)
                    {
                      goto LABEL_154;
                    }
LABEL_151:
                    operator delete((void *)__p);
                  }
                  else
                  {
                    v81 = *(_OWORD *)&v289.__r_.__value_.__l.__data_;
                    *((_QWORD *)v275 + 2) = *((_QWORD *)&v289.__r_.__value_.__l + 2);
                    *v80 = v81;
                    v275 = (char *)v80 + 24;
                    if (SBYTE7(v297) < 0)
                      goto LABEL_151;
                  }
LABEL_154:
                  __p = 0uLL;
                  *(_QWORD *)&v297 = 0;
                  std::stringbuf::__init_buf_ptrs[abi:fe180100]((uint64_t)&__dst.__imp_);
                  if ((__what_arg[23] & 0x80000000) != 0)
                    operator delete(*(void **)__what_arg);
                  v52 = 0;
                  v51 = 0;
                  goto LABEL_84;
                }
              }
              memmove(v75, cat, v74);
              goto LABEL_149;
            }
            if (v64 != -1)
              v52 |= v51;
          }
          else
          {
            v62 = (char *)v50->~runtime_error;
          }
          v69 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v62, v61);
          __what_arg[0] = 32;
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v69, (uint64_t)__what_arg, 1);
LABEL_84:
          v50 = (std::runtime_error_vtbl *)((char *)v50 + 16);
          if (v50 == (std::runtime_error_vtbl *)v263)
          {
            v50 = v265.__vftable;
            v44 = v262;
            v45 = v252;
            break;
          }
        }
      }
      if (v50)
        operator delete(v50);
      std::stringbuf::str[abi:fe180100]((uint64_t)&__dst.__imp_, (std::string *)&v265);
      v82 = v275;
      if ((unint64_t)v275 >= v276)
      {
        v275 = std::vector<std::string>::__emplace_back_slow_path<std::string>(&v274, (uint64_t)&v265);
        if (*((char *)&ec.__val_ + 7) < 0)
          operator delete(v265.__vftable);
      }
      else
      {
        v83 = v265;
        *((_QWORD *)v275 + 2) = *(_QWORD *)&ec.__val_;
        *v82 = v83;
        v275 = (char *)v82 + 24;
      }
      __dst.__vftable = v255;
      *(std::system_error_vtbl **)((char *)&__dst.__vftable + (unint64_t)v255[-1].~system_error) = v254;
      __dst.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      if (SBYTE7(v297) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v299);
      v44 = (uint64_t *)*v44;
    }
    while (v44 != v45);
    v272 = (std::runtime_error)0;
    v273 = 0;
    std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::reserve((uint64_t)&v272, 0xAAAAAAAAAAAAAAABLL * ((v275 - (_BYTE *)v274) >> 3));
    v84 = (char *)v274;
    v85 = v275;
    if (v274 != v275)
    {
      v256 = v275;
      while (1)
      {
        if (!v279)
          goto LABEL_501;
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v264, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
        else
          v264 = v277;
        v86 = v84[23];
        v87 = v86 >= 0 ? (uint64_t)v84 : *(_QWORD *)v84;
        v88 = v86 >= 0 ? v84[23] : *((_QWORD *)v84 + 1);
        AMSCore::StringUtils::split(&v289.__r_.__value_.__l.__data_, v87, v88, ";", 1, 0xFFFFFFFFFFFFFFFFLL);
        if (v289.__r_.__value_.__r.__words[0] != v289.__r_.__value_.__l.__size_)
        {
          v89 = *(_QWORD *)(v289.__r_.__value_.__r.__words[0] + 8);
          if (v89)
          {
            v90 = *(_QWORD *)v289.__r_.__value_.__l.__data_;
            v91 = (char *)memchr(*(void **)v289.__r_.__value_.__l.__data_, 61, *(_QWORD *)(v289.__r_.__value_.__r.__words[0] + 8));
            if (v91 && &v91[-v90 + 1] != 0)
              break;
          }
        }
        AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[51],std::string const&>((uint64_t)&__dst, 0x137u, (uint64_t)v84);
        std::runtime_error::runtime_error(&v265, &__dst);
        ec = __dst.__ec_;
        v93 = (unsigned int *)v293;
        v265.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v267 = v292;
        v268 = v293;
        v269 = (std::runtime_error_vtbl *)__src;
        if (__src)
        {
          *(_QWORD *)(v293 + 16) = &v268;
          v93 = 0;
          v292 = (std::runtime_error_vtbl *)&v293;
          v293 = 0;
          __src = 0;
        }
        else
        {
          v267 = (std::runtime_error_vtbl *)&v268;
        }
        v270 = v295;
        v295 = 0uLL;
        v271 = 0;
        __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v292, v93);
        MEMORY[0x18D7898AC](&__dst);
        v94 = (void *)v289.__r_.__value_.__r.__words[0];
        if (v289.__r_.__value_.__r.__words[0])
LABEL_192:
          operator delete(v94);
LABEL_193:
        if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v264.__r_.__value_.__l.__data_);
          if (!v271)
            goto LABEL_169;
        }
        else if (!v271)
        {
          goto LABEL_169;
        }
        v95 = v272.__imp_.__imp_;
        if (v272.__imp_.__imp_ < (const char *)v273)
        {
          v96 = v265.__vftable;
          v265.__vftable = 0;
          *(_QWORD *)v272.__imp_.__imp_ = v96;
          v272.__imp_.__imp_ = v95 + 8;
LABEL_200:
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)&v265, 0);
          goto LABEL_170;
        }
        v272.__imp_.__imp_ = (const char *)std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v272, (uint64_t *)&v265);
        if (v271)
          goto LABEL_200;
LABEL_169:
        ((void (*)(std::runtime_error *))v265.~runtime_error)(&v265);
LABEL_170:
        v84 += 24;
        if (v84 == v85)
        {
          v84 = (char *)v274;
          goto LABEL_470;
        }
      }
      AMSCore::StringUtils::split(&v287, v90, v89, "=", 1, 1uLL);
      v97 = v287;
      if (v287 == v288)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[51],std::string const&>((uint64_t)&__dst, 0x137u, (uint64_t)v84);
        std::runtime_error::runtime_error(&v265, &__dst);
        ec = __dst.__ec_;
        v104 = (unsigned int *)v293;
        v265.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v267 = v292;
        v268 = v293;
        v269 = (std::runtime_error_vtbl *)__src;
        if (__src)
        {
          *(_QWORD *)(v293 + 16) = &v268;
          v104 = 0;
          v292 = (std::runtime_error_vtbl *)&v293;
          v293 = 0;
          __src = 0;
        }
        else
        {
          v267 = (std::runtime_error_vtbl *)&v268;
        }
        v270 = v295;
        v295 = 0uLL;
        v271 = 0;
        __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v292, v104);
        MEMORY[0x18D7898AC](&__dst);
        if (!v97)
          goto LABEL_463;
        goto LABEL_462;
      }
      v98 = *((_QWORD *)v287 + 1);
      if (v98)
      {
        v99 = *(_QWORD *)v287;
        v100 = *((_QWORD *)v287 + 1);
        v101 = *(unsigned __int8 **)v287;
        while (1)
        {
          v102 = *v101;
          if (v102 > 0x3F || ((1 << v102) & 0x100003E00) == 0)
            break;
          ++v101;
          if (!--v100)
            goto LABEL_216;
        }
        v105 = (unint64_t)&v101[-v99];
        if (v105 == -1)
        {
LABEL_216:
          v98 = 0;
          goto LABEL_217;
        }
        v106 = v98 >= v105;
        v98 -= v105;
        if (!v106)
          std::__throw_out_of_range[abi:fe180100]("string_view::substr");
        v107 = (char *)(v99 + v105);
      }
      else
      {
LABEL_217:
        v107 = 0;
      }
      v108 = v98;
      do
      {
        if (!v108)
          goto LABEL_233;
        v109 = v107[--v108];
      }
      while (v109 <= 0x3F && ((1 << v109) & 0x100003E00) != 0);
      if (v108 == -1)
      {
LABEL_233:
        v111 = 0;
        HIBYTE(v286) = 0;
        v112 = &v285;
        goto LABEL_241;
      }
      if (v98 >= v108 + 1)
        v111 = v108 + 1;
      else
        v111 = v98;
      if (v111 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:fe180100]();
      if (v111 >= 0x17)
      {
        v113 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v111 | 7) != 0x17)
          v113 = v111 | 7;
        v114 = v113 + 1;
        v112 = operator new(v113 + 1);
        *(_QWORD *)&v286 = v111;
        *((_QWORD *)&v286 + 1) = v114 | 0x8000000000000000;
        v285 = v112;
      }
      else
      {
        HIBYTE(v286) = v111;
        v112 = &v285;
        if (!v111)
          goto LABEL_241;
      }
      memmove(v112, v107, v111);
LABEL_241:
      *((_BYTE *)v112 + v111) = 0;
      if ((unint64_t)(v288 - v287) < 0x11)
      {
        HIBYTE(v284) = 0;
        LOBYTE(v283) = 0;
        goto LABEL_278;
      }
      v115 = *((_QWORD *)v287 + 3);
      if (v115)
      {
        v116 = (unsigned __int8 *)*((_QWORD *)v287 + 2);
        v117 = *((_QWORD *)v287 + 3);
        v118 = v116;
        while (1)
        {
          v119 = *v118;
          if (v119 > 0x3F || ((1 << v119) & 0x100003E00) == 0)
            break;
          ++v118;
          if (!--v117)
            goto LABEL_255;
        }
        v121 = v118 - v116;
        if (v121 == -1)
        {
LABEL_255:
          v115 = 0;
          goto LABEL_256;
        }
        v106 = v115 >= v121;
        v115 -= v121;
        if (!v106)
          std::__throw_out_of_range[abi:fe180100]("string_view::substr");
        v122 = &v116[v121];
      }
      else
      {
LABEL_256:
        v122 = 0;
      }
      v123 = v115;
      do
      {
        if (!v123)
          goto LABEL_272;
        v124 = v122[--v123];
      }
      while (v124 <= 0x3F && ((1 << v124) & 0x100003E00) != 0);
      if (v123 == -1)
      {
LABEL_272:
        HIBYTE(v284) = 0;
        LOBYTE(v283) = 0;
        goto LABEL_278;
      }
      if (v115 >= v123 + 1)
        v126 = v123 + 1;
      else
        v126 = v115;
      if (v126 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:fe180100]();
      if (v126 >= 0x17)
      {
        v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v126 | 7) != 0x17)
          v128 = v126 | 7;
        v129 = v128 + 1;
        v127 = operator new(v128 + 1);
        *(_QWORD *)&v284 = v126;
        *((_QWORD *)&v284 + 1) = v129 | 0x8000000000000000;
        v283 = v127;
      }
      else
      {
        HIBYTE(v284) = v126;
        v127 = &v283;
        if (!v126)
          goto LABEL_277;
      }
      memmove(v127, v122, v126);
LABEL_277:
      *((_BYTE *)v127 + v126) = 0;
LABEL_278:
      v261 = v84;
      v130 = operator new();
      v131 = v285;
      __dst.__vftable = (std::system_error_vtbl *)v286;
      *(std::system_error_vtbl **)((char *)&__dst.__vftable + 7) = *(std::system_error_vtbl **)((char *)&v286 + 7);
      v132 = HIBYTE(v286);
      v285 = 0;
      v286 = 0uLL;
      v133 = v283;
      *(_QWORD *)__what_arg = v284;
      *(_QWORD *)&__what_arg[7] = *(_QWORD *)((char *)&v284 + 7);
      v134 = HIBYTE(v284);
      v284 = 0uLL;
      v283 = 0;
      v135 = v264.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)&v300 + 7) = *(std::string::size_type *)((char *)&v264.__r_.__value_.__r.__words[1] + 7);
      *(_QWORD *)&v300 = v264.__r_.__value_.__l.__size_;
      v136 = HIBYTE(v264.__r_.__value_.__r.__words[2]);
      memset(&v264, 0, sizeof(v264));
      *(_BYTE *)v130 = 0;
      if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = &v278;
      else
        v137 = (std::string *)v278.__r_.__value_.__r.__words[0];
      if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v138 = HIBYTE(v278.__r_.__value_.__r.__words[2]);
      else
        v138 = v278.__r_.__value_.__l.__size_;
      *(_BYTE *)(v130 + 8) = 0;
      AMSCore::StringUtils::lowercase(v130 + 16, (char *)v137, v138);
      *(_WORD *)(v130 + 40) = 256;
      v139 = __dst.__vftable;
      *(_QWORD *)(v130 + 48) = v131;
      *(_QWORD *)(v130 + 56) = v139;
      *(_QWORD *)(v130 + 63) = *(std::system_error_vtbl **)((char *)&__dst.__vftable + 7);
      *(_BYTE *)(v130 + 71) = v132;
      v140 = v300;
      *(_QWORD *)(v130 + 72) = v135;
      *(_QWORD *)(v130 + 80) = v140;
      *(_QWORD *)(v130 + 87) = *(_QWORD *)((char *)&v300 + 7);
      *(_BYTE *)(v130 + 95) = v136;
      v141 = *(_QWORD *)__what_arg;
      *(_QWORD *)(v130 + 96) = v133;
      *(_QWORD *)(v130 + 104) = v141;
      *(_QWORD *)(v130 + 111) = *(_QWORD *)&__what_arg[7];
      *(_BYTE *)(v130 + 119) = v134;
      v142 = v289.__r_.__value_.__r.__words[0];
      v282 = v130;
      if (v289.__r_.__value_.__l.__size_ - v289.__r_.__value_.__r.__words[0] >= 0x11)
      {
        v253 = 0;
        v143 = 1;
        while (1)
        {
          AMSCore::StringUtils::split((char **)&v300, *(_QWORD *)(v142 + 16 * v143), *(_QWORD *)(v142 + 16 * v143 + 8), "=", 1, 1uLL);
          v146 = (_QWORD *)v300;
          v147 = *((_QWORD *)&v300 + 1) - v300;
          if (*((_QWORD *)&v300 + 1) == (_QWORD)v300)
            goto LABEL_501;
          v148 = *(_QWORD *)(v300 + 8);
          if (v148)
          {
            v149 = *(_QWORD *)v300;
            v150 = *(_QWORD *)(v300 + 8);
            v151 = *(unsigned __int8 **)v300;
            while (1)
            {
              v152 = *v151;
              if (v152 > 0x3F || ((1 << v152) & 0x100003E00) == 0)
                break;
              ++v151;
              if (!--v150)
                goto LABEL_305;
            }
            v154 = (unint64_t)&v151[-v149];
            if (v154 == -1)
            {
LABEL_305:
              v148 = 0;
              goto LABEL_306;
            }
            v106 = v148 >= v154;
            v148 -= v154;
            if (!v106)
              std::__throw_out_of_range[abi:fe180100]("string_view::substr");
            v155 = (char *)(v149 + v154);
          }
          else
          {
LABEL_306:
            v155 = 0;
          }
          v156 = v148;
          do
          {
            if (!v156)
            {
              v159 = 0;
              v160 = 0;
              goto LABEL_323;
            }
            v157 = v155[--v156];
          }
          while (v157 <= 0x3F && ((1 << v157) & 0x100003E00) != 0);
          if (v148 >= v156 + 1)
            v148 = v156 + 1;
          if (v156 == -1)
            v159 = 0;
          else
            v159 = v148;
          if (v156 == -1)
            v160 = 0;
          else
            v160 = v155;
LABEL_323:
          v161 = std::locale::classic();
          v162 = std::locale::use_facet(v161, MEMORY[0x1E0DE4A90]);
          if (v159 == 6)
          {
            v163 = v162;
            v164 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v162->__vftable[1].__on_zero_shared)(v162, *v160);
            if (v164 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v163->__vftable[1].__on_zero_shared)(v163, 115))
            {
              v165 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v163->__vftable[1].__on_zero_shared)(v163, v160[1]);
              if (v165 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v163->__vftable[1].__on_zero_shared)(v163, 101))
              {
                v166 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v163->__vftable[1].__on_zero_shared)(v163, v160[2]);
                if (v166 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v163->__vftable[1].__on_zero_shared)(v163, 99))
                {
                  v167 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v163->__vftable[1].__on_zero_shared)(v163, v160[3]);
                  if (v167 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v163->__vftable[1].__on_zero_shared)(v163, 117))
                  {
                    v168 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v163->__vftable[1].__on_zero_shared)(v163, v160[4]);
                    if (v168 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v163->__vftable[1].__on_zero_shared)(v163, 114))
                    {
                      v169 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v163->__vftable[1].__on_zero_shared)(v163, v160[5]);
                      if (v169 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v163->__vftable[1].__on_zero_shared)(v163, 101))
                      {
                        *(_BYTE *)(v282 + 40) = 1;
                        if (!v146)
                          goto LABEL_291;
LABEL_290:
                        operator delete(v146);
                        goto LABEL_291;
                      }
                    }
                  }
                }
              }
            }
          }
          if (v147 < 0x11)
            goto LABEL_289;
          v170 = v146[3];
          if (v170)
          {
            v171 = (unsigned __int8 *)v146[2];
            v172 = v146[3];
            v173 = v171;
            while (1)
            {
              v174 = *v173;
              if (v174 > 0x3F || ((1 << v174) & 0x100003E00) == 0)
                break;
              ++v173;
              if (!--v172)
                goto LABEL_345;
            }
            v176 = v173 - v171;
            if (v176 == -1)
            {
LABEL_345:
              v170 = 0;
              goto LABEL_346;
            }
            v106 = v170 >= v176;
            v170 -= v176;
            if (!v106)
              std::__throw_out_of_range[abi:fe180100]("string_view::substr");
            v177 = &v171[v176];
          }
          else
          {
LABEL_346:
            v177 = 0;
          }
          v178 = v170;
          do
          {
            if (!v178)
              goto LABEL_362;
            v179 = v177[--v178];
          }
          while (v179 <= 0x3F && ((1 << v179) & 0x100003E00) != 0);
          if (v178 == -1)
          {
LABEL_362:
            v181 = 0;
            *((_BYTE *)&v281.__r_.__value_.__s + 23) = 0;
            v182 = &v281;
            goto LABEL_367;
          }
          if (v170 >= v178 + 1)
            v181 = v178 + 1;
          else
            v181 = v170;
          if (v181 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:fe180100]();
          if (v181 >= 0x17)
          {
            v183 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v181 | 7) != 0x17)
              v183 = v181 | 7;
            v184 = v183 + 1;
            v182 = (std::string *)operator new(v183 + 1);
            v281.__r_.__value_.__l.__size_ = v181;
            v281.__r_.__value_.__r.__words[2] = v184 | 0x8000000000000000;
            v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v182;
          }
          else
          {
            *((_BYTE *)&v281.__r_.__value_.__s + 23) = v181;
            v182 = &v281;
            if (!v181)
              goto LABEL_367;
          }
          memmove(v182, v177, v181);
LABEL_367:
          v182->__r_.__value_.__s.__data_[v181] = 0;
          v185 = HIBYTE(v281.__r_.__value_.__r.__words[2]);
          if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v185 = v281.__r_.__value_.__l.__size_;
          if (!v185)
            goto LABEL_288;
          v186 = std::locale::classic();
          v187 = std::locale::use_facet(v186, MEMORY[0x1E0DE4A90]);
          if (v159 == 6)
          {
            v188 = v187;
            v189 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v187->__vftable[1].__on_zero_shared)(v187, *v160);
            if (v189 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v188->__vftable[1].__on_zero_shared)(v188, 100))
            {
              v190 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v188->__vftable[1].__on_zero_shared)(v188, v160[1]);
              if (v190 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v188->__vftable[1].__on_zero_shared)(v188, 111))
              {
                v191 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v188->__vftable[1].__on_zero_shared)(v188, v160[2]);
                if (v191 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v188->__vftable[1].__on_zero_shared)(v188, 109))
                {
                  v192 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v188->__vftable[1].__on_zero_shared)(v188, v160[3]);
                  if (v192 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v188->__vftable[1].__on_zero_shared)(v188, 97))
                  {
                    v193 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v188->__vftable[1].__on_zero_shared)(v188, v160[4]);
                    if (v193 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v188->__vftable[1].__on_zero_shared)(v188, 105))
                    {
                      v194 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v188->__vftable[1].__on_zero_shared)(v188, v160[5]);
                      if (v194 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v188->__vftable[1].__on_zero_shared)(v188, 110))
                      {
                        LOBYTE(v195) = *((_BYTE *)&v281.__r_.__value_.__s + 23);
                        if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
                          if (*((_BYTE *)&v281.__r_.__value_.__s + 23))
                          {
                            v196 = &v281;
                            goto LABEL_425;
                          }
                          goto LABEL_426;
                        }
                        if (!v281.__r_.__value_.__l.__size_)
                          goto LABEL_426;
                        v196 = (std::string *)v281.__r_.__value_.__r.__words[0];
LABEL_425:
                        if (v196->__r_.__value_.__s.__data_[0] != 46)
                        {
LABEL_426:
                          AMSCore::StringUtils::join<char [2],std::string>((std::string *)&__dst, ".", (uint64_t)&v281);
                          if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v281.__r_.__value_.__l.__data_);
                          v281.__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst.__ec_.__val_;
                          *(std::runtime_error *)&v281.__r_.__value_.__l.__data_ = __dst.std::runtime_error;
                          v195 = HIBYTE(*(_QWORD *)&__dst.__ec_.__val_);
                        }
                        v232 = v282;
                        if ((v195 & 0x80u) == 0)
                          v233 = &v281;
                        else
                          v233 = (std::string *)v281.__r_.__value_.__r.__words[0];
                        if ((v195 & 0x80u) == 0)
                          v234 = v195;
                        else
                          v234 = v281.__r_.__value_.__l.__size_;
                        AMSCore::StringUtils::lowercase((uint64_t)&__dst, (char *)v233, v234);
                        v235 = (void **)(v232 + 16);
                        if (*(char *)(v232 + 39) < 0)
                          operator delete(*v235);
                        v145 = *(_QWORD *)&__dst.__ec_.__val_;
                        *(std::runtime_error *)v235 = __dst.std::runtime_error;
                        *(_QWORD *)(v232 + 32) = v145;
LABEL_288:
                        if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_289;
LABEL_411:
                        operator delete(v281.__r_.__value_.__l.__data_);
                        goto LABEL_289;
                      }
                    }
                  }
                }
              }
            }
          }
          v197 = std::locale::classic();
          v198 = std::locale::use_facet(v197, MEMORY[0x1E0DE4A90]);
          if (v159 != 7)
            goto LABEL_388;
          v199 = v198;
          v200 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v198->__vftable[1].__on_zero_shared)(v198, *v160);
          if (v200 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v199->__vftable[1].__on_zero_shared)(v199, 101))goto LABEL_388;
          v201 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v199->__vftable[1].__on_zero_shared)(v199, v160[1]);
          if (v201 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v199->__vftable[1].__on_zero_shared)(v199, 120)&& (v202 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v199->__vftable[1].__on_zero_shared)(v199, v160[2]), v202 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v199->__vftable[1].__on_zero_shared)(v199, 112))&& (v203 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v199->__vftable[1].__on_zero_shared)(v199, v160[3]), v203 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v199->__vftable[1].__on_zero_shared)(v199, 105))&& (v204 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v199->__vftable[1].__on_zero_shared)(v199, v160[4]), v204 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v199->__vftable[1].__on_zero_shared)(v199,
                          114))
            && (v205 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v199->__vftable[1].__on_zero_shared)(v199, v160[5]), v205 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v199->__vftable[1].__on_zero_shared)(v199, 101))&& (v206 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v199->__vftable[1].__on_zero_shared)(v199, v160[6]), !((v206 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v199->__vftable[1].__on_zero_shared)(v199, 115)) | v253 & 1)))
          {
            if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v229 = &v281;
            else
              v229 = (std::string *)v281.__r_.__value_.__r.__words[0];
            if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v230 = HIBYTE(v281.__r_.__value_.__r.__words[2]);
            else
              v230 = v281.__r_.__value_.__l.__size_;
            AMSCore::CookieUtils::parseDateString((uint64_t)&__dst, (uint64_t)v229, v230);
            if (!(_BYTE)__p
              || (v231 = v282,
                  *(_QWORD *)v282 = __dst.__vftable,
                  *(_BYTE *)(v231 + 8) = 1,
                  *(_BYTE *)(v231 + 41) = 0,
                  !(_BYTE)__p))
            {
              ((void (*)(std::system_error *))__dst.~system_error)(&__dst);
            }
            v253 = 0;
            if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_411;
          }
          else
          {
LABEL_388:
            v207 = std::locale::classic();
            v208 = std::locale::use_facet(v207, MEMORY[0x1E0DE4A90]);
            if (v159 == 7)
            {
              v209 = v208;
              v210 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v208->__vftable[1].__on_zero_shared)(v208, *v160);
              if (v210 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v209->__vftable[1].__on_zero_shared)(v209, 109))
              {
                v211 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v209->__vftable[1].__on_zero_shared)(v209, v160[1]);
                if (v211 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v209->__vftable[1].__on_zero_shared)(v209, 97))
                {
                  v212 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v209->__vftable[1].__on_zero_shared)(v209, v160[2]);
                  if (v212 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v209->__vftable[1].__on_zero_shared)(v209, 120))
                  {
                    v213 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v209->__vftable[1].__on_zero_shared)(v209, v160[3]);
                    if (v213 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v209->__vftable[1].__on_zero_shared)(v209, 45))
                    {
                      v214 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v209->__vftable[1].__on_zero_shared)(v209, v160[4]);
                      if (v214 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v209->__vftable[1].__on_zero_shared)(v209, 97))
                      {
                        v215 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v209->__vftable[1].__on_zero_shared)(v209, v160[5]);
                        if (v215 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v209->__vftable[1].__on_zero_shared)(v209, 103))
                        {
                          v216 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v209->__vftable[1].__on_zero_shared)(v209, v160[6]);
                          if (v216 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v209->__vftable[1].__on_zero_shared)(v209, 101))
                          {
                            v217 = HIBYTE(v281.__r_.__value_.__r.__words[2]);
                            v218 = &v281;
                            if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                            {
                              v217 = v281.__r_.__value_.__l.__size_;
                              v218 = (std::string *)v281.__r_.__value_.__r.__words[0];
                            }
                            v290[0] = (uint64_t)v218;
                            v290[1] = v217;
                            if (v217)
                              v219 = v218->__r_.__value_.__s.__data_[0] == 45;
                            else
                              v219 = 0;
                            v236 = (char *)v218 + v217;
                            v237 = std::__from_chars_integral[abi:fe180100]<unsigned long long,0>((_BYTE *)v218 + v219, (_BYTE *)v218 + v217, __what_arg);
                            if (v238 != 22 && v238 != 34)
                            {
                              if (v219)
                              {
                                LODWORD(v239) = *(_QWORD *)__what_arg > 0x8000000000000000;
                                v240 = *(_QWORD *)__what_arg <= 0x8000000000000000
                                     ? (std::system_error_vtbl *)-*(_QWORD *)__what_arg
                                     : 0;
                              }
                              else
                              {
                                v239 = *(_QWORD *)__what_arg >> 63;
                                v240 = (std::system_error_vtbl *)(*(_QWORD *)__what_arg & ~(*(uint64_t *)__what_arg >> 63));
                              }
                              if (!v238 && !(_DWORD)v239 && v236 == v237)
                              {
                                __dst.__vftable = v240;
                                LOBYTE(__p) = 1;
                                goto LABEL_453;
                              }
                            }
                            AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[42],std::string_view &>((uint64_t)__what_arg, 3u, "Failed to parse value as number. value = ", v290);
                            std::runtime_error::runtime_error(&__dst, (const std::runtime_error *)__what_arg);
                            __dst.__ec_ = *(std::error_code *)&__what_arg[16];
                            v241 = (unsigned int *)v303;
                            __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
                            v292 = v302;
                            v293 = v303;
                            __src = v304;
                            if (v304)
                            {
                              *(_QWORD *)(v303 + 16) = &v293;
                              v241 = 0;
                              v302 = (std::runtime_error_vtbl *)&v303;
                              v303 = 0;
                              v304 = 0;
                            }
                            else
                            {
                              v292 = (std::runtime_error_vtbl *)&v293;
                            }
                            v295 = v305;
                            v305 = 0uLL;
                            LOBYTE(__p) = 0;
                            *(_QWORD *)__what_arg = off_1E2521330;
                            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v302, v241);
                            MEMORY[0x18D7898AC](__what_arg);
                            if ((_BYTE)__p)
                            {
LABEL_453:
                              v242 = v282;
                              v243.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                              if (!(_BYTE)__p)
                                goto LABEL_501;
                              *(_QWORD *)v242 = v243.__d_.__rep_ + 1000000 * (uint64_t)__dst.__vftable;
                              *(_BYTE *)(v242 + 8) = 1;
                              *(_BYTE *)(v242 + 41) = 0;
                              if (!(_BYTE)__p)
                                goto LABEL_455;
                            }
                            else
                            {
LABEL_455:
                              ((void (*)(std::system_error *))__dst.~system_error)(&__dst);
                            }
                            v253 = 1;
                            if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
                              goto LABEL_411;
                            goto LABEL_289;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v220 = std::locale::classic();
            v221 = std::locale::use_facet(v220, MEMORY[0x1E0DE4A90]);
            if (v159 != 4)
              goto LABEL_288;
            v222 = v221;
            v223 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v221->__vftable[1].__on_zero_shared)(v221, *v160);
            if (v223 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v222->__vftable[1].__on_zero_shared)(v222, 112))goto LABEL_288;
            v224 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v222->__vftable[1].__on_zero_shared)(v222, v160[1]);
            if (v224 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v222->__vftable[1].__on_zero_shared)(v222, 97))goto LABEL_288;
            v225 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v222->__vftable[1].__on_zero_shared)(v222, v160[2]);
            if (v225 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v222->__vftable[1].__on_zero_shared)(v222, 116))goto LABEL_288;
            v226 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v222->__vftable[1].__on_zero_shared)(v222, v160[3]);
            if (v226 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v222->__vftable[1].__on_zero_shared)(v222, 104))goto LABEL_288;
            v227 = v282;
            if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v280, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
            else
              v280 = v281;
            v228 = (void **)(v227 + 72);
            if (*(char *)(v227 + 95) < 0)
              operator delete(*v228);
            *(_OWORD *)v228 = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
            *(_QWORD *)(v227 + 88) = *((_QWORD *)&v280.__r_.__value_.__l + 2);
            *((_BYTE *)&v280.__r_.__value_.__s + 23) = 0;
            v280.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_411;
          }
LABEL_289:
          v146 = (_QWORD *)v300;
          if ((_QWORD)v300)
            goto LABEL_290;
LABEL_291:
          ++v143;
          v142 = v289.__r_.__value_.__r.__words[0];
          if (v143 >= (uint64_t)(v289.__r_.__value_.__l.__size_ - v289.__r_.__value_.__r.__words[0]) >> 4)
          {
            v130 = v282;
            v144 = HIBYTE(v284);
            goto LABEL_459;
          }
        }
      }
      v144 = 0;
LABEL_459:
      v282 = 0;
      v265.__vftable = (std::runtime_error_vtbl *)v130;
      v271 = 1;
      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](&v282, 0);
      v84 = v261;
      v85 = v256;
      if (v144 < 0)
      {
        operator delete(v283);
        if ((SHIBYTE(v286) & 0x80000000) == 0)
        {
LABEL_461:
          v97 = v287;
          if (!v287)
            goto LABEL_463;
          goto LABEL_462;
        }
      }
      else if ((SHIBYTE(v286) & 0x80000000) == 0)
      {
        goto LABEL_461;
      }
      operator delete(v285);
      v97 = v287;
      if (!v287)
      {
LABEL_463:
        v94 = (void *)v289.__r_.__value_.__r.__words[0];
        if (v289.__r_.__value_.__r.__words[0])
          goto LABEL_192;
        goto LABEL_193;
      }
LABEL_462:
      operator delete(v97);
      goto LABEL_463;
    }
LABEL_470:
    *this = v272;
    this[1].__vftable = v273;
    LOBYTE(this[4].__imp_.__imp_) = 1;
    if (v84)
    {
      v244 = v275;
      v245 = v84;
      if (v275 != v84)
      {
        do
        {
          if (*(v244 - 1) < 0)
            operator delete(*((void **)v244 - 3));
          v244 -= 24;
        }
        while (v244 != v84);
        v245 = v274;
      }
      v275 = v84;
      operator delete(v245);
    }
  }
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
  {
    v250 = (void *)v277.__r_.__value_.__r.__words[0];
LABEL_486:
    operator delete(v250);
  }
LABEL_487:
  if (v279)
  {
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
  }
}

void sub_18CCDA2C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::optional<std::string>::value_or[abi:fe180100]<char const(&)[2]>(std::string *this, uint64_t a2, char *__s)
{
  std::string *v3;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;

  v3 = this;
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = strlen(__s);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:fe180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v7 = v5 | 7;
      v8 = v7 + 1;
      v9 = (std::string *)operator new(v7 + 1);
      v3->__r_.__value_.__l.__size_ = v6;
      v3->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
      v3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
      v3 = v9;
    }
    else
    {
      *((_BYTE *)&v3->__r_.__value_.__s + 23) = v5;
      if (!v5)
        goto LABEL_13;
    }
    memcpy(v3, __s, v6);
LABEL_13:
    v3->__r_.__value_.__s.__data_[v6] = 0;
    return;
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[51],std::string const&>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string v20;
  std::system_error v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];
  std::error_code v30;

  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v29[0] = MEMORY[0x1E0DE4FE0] + 64;
  v21.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&v21.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&v21 + (unint64_t)v21.__vftable[-1].~system_error);
  std::ios_base::init(v11, &v21.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v21.__vftable = v6 + 1;
  v29[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v21.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Received an invalid cookie string. cookieString = ", 50);
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = a3;
  else
    v14 = *(_QWORD *)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, v14, v15);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v21.__imp_, &v20);
  v21.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&v21.__vftable + (unint64_t)v21.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  v21.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v29);
  *(_QWORD *)&v30.__val_ = a2;
  v30.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v21, v30, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v23 = 0;
  v24 = 0;
  v21.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v22 = &v23;
  v25 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v21);
  *(std::error_code *)(a1 + 16) = v21.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v16 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v16;
  v17 = a1 + 40;
  v18 = v24;
  *(_QWORD *)(a1 + 48) = v24;
  if (v18)
  {
    *(_QWORD *)(v16 + 16) = v17;
    v16 = 0;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v17;
  }
  *(_OWORD *)(a1 + 56) = v25;
  v25 = 0uLL;
  v21.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v16);
  return MEMORY[0x18D7898AC](&v21);
}

void sub_18CCDA968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CCDA984(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::StringUtils::join<char [2],std::string>(std::string *a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[8];
  void *__p[2];
  __int128 v21;
  int v22;
  uint64_t v23[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v23[0] = MEMORY[0x1E0DE4FE0] + 64;
  v18 = v9;
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
  std::ios_base::init(v11, v19);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v18 = v6 + 24;
  v23[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v19[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  v22 = 16;
  v13 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)a2, v13);
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = a3;
  else
    v15 = *(_QWORD *)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, v15, v16);
  std::stringbuf::str[abi:fe180100]((uint64_t)v19, a1);
  v18 = *v8;
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = v8[3];
  v19[0] = v12 + 16;
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v23);
}

void sub_18CCDAB18(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::CookieUtils::parseDateString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::runtime_error v21[2];
  unsigned int **v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  std::runtime_error v26;
  std::error_code ec;
  unsigned int **v28;
  unsigned int *v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  std::string __what_arg;
  std::system_error __p;
  unsigned int **v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42[20];
  std::error_code v43;

  __p.__vftable = (std::system_error_vtbl *)operator new(0x20uLL);
  *(_OWORD *)&__p.__imp_.__imp_ = xmmword_18CF51B30;
  strcpy((char *)__p.__vftable, "%a, %d-%b-%Y %H:%M:%S GMT");
  AMSCore::parseDateString((uint64_t)&v26, a2, a3, (const char *)&__p);
  if (*((char *)&__p.__ec_.__val_ + 7) < 0)
  {
    operator delete(__p.__vftable);
    if (!v32)
      goto LABEL_5;
LABEL_19:
    *(_QWORD *)a1 = v26.__vftable;
    *(_BYTE *)(a1 + 72) = 1;
    return;
  }
  if (v32)
    goto LABEL_19;
LABEL_5:
  v21[0].__vftable = (std::runtime_error_vtbl *)operator new(0x20uLL);
  *(_OWORD *)&v21[0].__imp_.__imp_ = xmmword_18CF51B30;
  strcpy((char *)v21[0].__vftable, "%a, %d %b %Y %H:%M:%S GMT");
  AMSCore::parseDateString((uint64_t)&__p, a2, a3, (const char *)v21);
  if (v32)
  {
    if ((_BYTE)v39)
    {
      v26.__vftable = (std::runtime_error_vtbl *)__p.__vftable;
    }
    else
    {
      std::runtime_error::runtime_error(&v26, &__p);
      ec = __p.__ec_;
      v26.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v28 = v35;
      v29 = (unsigned int *)v36;
      v30 = v37;
      if (v37)
      {
        *(_QWORD *)(v36 + 16) = &v29;
        v35 = (unsigned int **)&v36;
        v36 = 0;
        v37 = 0;
      }
      else
      {
        v28 = &v29;
      }
      v31 = v38;
      v38 = 0uLL;
      v32 = 0;
    }
  }
  else if ((_BYTE)v39)
  {
    ((void (*)(std::runtime_error *))v26.~runtime_error)(&v26);
    v26.__vftable = (std::runtime_error_vtbl *)__p.__vftable;
    v32 = 1;
  }
  else
  {
    std::runtime_error::operator=(&v26, &__p);
    ec = __p.__ec_;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, v29);
    v28 = v35;
    v29 = (unsigned int *)v36;
    v30 = v37;
    if (v37)
    {
      *(_QWORD *)(v36 + 16) = &v29;
      v35 = (unsigned int **)&v36;
      v36 = 0;
      v37 = 0;
    }
    else
    {
      v28 = &v29;
    }
    v17 = v38;
    v38 = 0uLL;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    v31 = v17;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if ((_BYTE)v39)
  {
    if ((SHIBYTE(v21[1].__vftable) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_22:
    operator delete(v21[0].__vftable);
    if (v32)
      goto LABEL_19;
    goto LABEL_23;
  }
  ((void (*)(std::system_error *))__p.~system_error)(&__p);
  if (SHIBYTE(v21[1].__vftable) < 0)
    goto LABEL_22;
LABEL_18:
  if (v32)
    goto LABEL_19;
LABEL_23:
  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v42[0] = MEMORY[0x1E0DE4FE0] + 64;
  __p.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&__p + (unint64_t)__p.__vftable[-1].~system_error);
  std::ios_base::init(v11, &__p.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  __p.__vftable = v6 + 1;
  v42[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  v39 = 0u;
  v40 = 0u;
  v41 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Received an invalid date. Date = ", 33);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, a2, a3);
  std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, &__what_arg);
  __p.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  __p.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v40) < 0)
    operator delete((void *)v39);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v42);
  v43.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v43.__val_ = 3;
  std::system_error::system_error(&__p, v43, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v36 = 0;
  v37 = 0;
  __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v35 = (unsigned int **)&v36;
  v38 = 0uLL;
  std::runtime_error::runtime_error(v21, &__p);
  v21[1] = (std::runtime_error)__p.__ec_;
  v21[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v13 = (unsigned int *)v36;
  v22 = v35;
  v23 = v36;
  v24 = v37;
  if (v37)
  {
    *(_QWORD *)(v36 + 16) = &v23;
    v13 = 0;
    v35 = (unsigned int **)&v36;
    v36 = 0;
    v37 = 0;
  }
  else
  {
    v22 = (unsigned int **)&v23;
  }
  v25 = v38;
  v38 = 0uLL;
  __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v35, v13);
  MEMORY[0x18D7898AC](&__p);
  std::runtime_error::runtime_error((std::runtime_error *)a1, v21);
  *(std::runtime_error *)(a1 + 16) = v21[1];
  *(_QWORD *)a1 = off_1E2521330;
  v14 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = a1 + 40;
  v16 = v24;
  *(_QWORD *)(a1 + 48) = v24;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    v14 = 0;
    v22 = (unsigned int **)&v23;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v15;
  }
  *(_OWORD *)(a1 + 56) = v25;
  v25 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v21[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v14);
  MEMORY[0x18D7898AC](v21);
  if (!v32)
    ((void (*)(std::runtime_error *))v26.~runtime_error)(&v26);
}

void sub_18CCDB044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void (**a23)(_QWORD),uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a38 < 0)
    operator delete(__p);
  if (!a32)
  {
    (*a23)(&a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *std::__from_chars_integral[abi:fe180100]<unsigned long long,0>(_BYTE *result, _BYTE *a2, _QWORD *a3)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _QWORD v23[19];
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (result == a2)
  {
    v3 = a2;
    goto LABEL_17;
  }
  v3 = result;
  while (*v3 == 48)
  {
    if (++v3 == a2)
    {
      v3 = a2;
      break;
    }
  }
  if (v3 == a2)
  {
    v3 = a2;
    if (a2 == result)
      return result;
LABEL_18:
    v13 = 0;
LABEL_19:
    *a3 = v13;
    return v3;
  }
  if (*v3 - 48 >= 0xA)
  {
LABEL_17:
    if (v3 == result)
      return result;
    goto LABEL_18;
  }
  v4 = 19;
  do
  {
    v5 = *v3;
    if ((v5 - 58) < 0xFFFFFFF6)
      break;
    ++v3;
    v23[v4] = (v5 - 48);
    if (v4-- == 0)
      break;
  }
  while (v3 != a2);
  v7 = v4 + 1;
  v8 = (v4 + 1) << 32;
  v9 = *(_QWORD *)((char *)v23 + (v8 >> 29));
  if ((int)v7 > 17)
    goto LABEL_28;
  v10 = (int)v7;
  v11 = 18 - v7;
  if ((unint64_t)(18 - v7) >= 2)
  {
    v14 = 0;
    v15 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v12 = (uint64_t *)((char *)&std::__itoa::__pow10_64 + 8 * (v11 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v16 = &v23[v7 + 2];
    v17 = &unk_18CF5ABB0;
    v18 = v11 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v9 += *(v17 - 1) * *(v16 - 1);
      v14 += *v17 * *v16;
      v17 += 2;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v9 += v14;
    if (v11 == v15)
      goto LABEL_28;
    v10 += v15;
  }
  else
  {
    v12 = &qword_18CF5ABA8;
  }
  do
  {
    v19 = *v12++;
    v9 += v19 * v23[++v10];
  }
  while (v10 != 18);
LABEL_28:
  v20 = *(_QWORD *)((char *)&std::__itoa::__pow10_64 + ((0x1300000000 - v8) >> 29));
  v21 = v24 * v20;
  v3 -= (v24 * (unsigned __int128)v20) >> 64 != 0;
  if (v3 != a2)
  {
    v22 = __CFADD__(v9, v21);
    if (*v3 - 48 < 0xA || v22)
    {
      while (*v3 - 48 <= 9)
      {
        if (++v3 == a2)
          return a2;
      }
      return v3;
    }
    goto LABEL_40;
  }
  if (!__CFADD__(v9, v21))
  {
LABEL_40:
    v13 = v21 + v9;
    goto LABEL_19;
  }
  return a2;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[42],std::string_view &>(uint64_t a1, unsigned int a2, const char *a3, uint64_t *a4)
{
  std::system_error_vtbl *v8;
  uint64_t v9;
  uint64_t v10;
  std::system_error_vtbl *v11;
  std::system_error_vtbl *v12;
  std::ios_base *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string __what_arg;
  std::system_error v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[20];
  std::error_code v30;

  v8 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = MEMORY[0x1E0DE4F60];
  v11 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v29[0] = MEMORY[0x1E0DE4FE0] + 64;
  v21.__vftable = v11;
  *(std::system_error_vtbl **)((char *)&v21.__vftable + (unint64_t)v11[-1].~system_error) = v12;
  v13 = (std::ios_base *)((char *)&v21 + (unint64_t)v21.__vftable[-1].~system_error);
  std::ios_base::init(v13, &v21.__imp_);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v21.__vftable = v8 + 1;
  v29[0] = v9;
  std::streambuf::basic_streambuf();
  v14 = MEMORY[0x1E0DE4FB8];
  v21.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 16;
  v15 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, (uint64_t)a3, v15);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, *a4, a4[1]);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v21.__imp_, &__what_arg);
  v21.__vftable = *(std::system_error_vtbl **)v10;
  *(std::system_error_vtbl **)((char *)&v21.__vftable + (unint64_t)v21.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v10 + 24);
  v21.__imp_.__imp_ = (const char *)(v14 + 16);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v29);
  *(_QWORD *)&v30.__val_ = a2;
  v30.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v21, v30, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v23 = 0;
  v24 = 0;
  v21.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v22 = &v23;
  v25 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v21);
  *(std::error_code *)(a1 + 16) = v21.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v16 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v16;
  v17 = a1 + 40;
  v18 = v24;
  *(_QWORD *)(a1 + 48) = v24;
  if (v18)
  {
    *(_QWORD *)(v16 + 16) = v17;
    v16 = 0;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v17;
  }
  *(_OWORD *)(a1 + 56) = v25;
  v25 = 0uLL;
  v21.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v16);
  return MEMORY[0x18D7898AC](&v21);
}

void sub_18CCDB534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CCDB550(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

double AMSCore::CookieUtils::getRequestHeaderFields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double result;
  std::string v31;
  uint64_t v32;
  _QWORD v33[8];
  void *__p[2];
  __int128 v35;
  int v36;
  uint64_t v37[19];
  char v38[24];
  std::string v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*a2 == a2[1])
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1065353216;
    return result;
  }
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v37[0] = MEMORY[0x1E0DE4FE0] + 64;
  v32 = v7;
  *(_QWORD *)((char *)&v33[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v33[-1] + *(_QWORD *)(v32 - 24));
  std::ios_base::init(v9, v33);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v32 = v4 + 24;
  v37[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v33[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v35 = 0u;
  v36 = 16;
  v11 = *a2;
  if (a2[1] != *a2)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v11 + 8 * v12);
      v16 = *(_QWORD *)(v13 + 48);
      v14 = v13 + 48;
      v15 = v16;
      v17 = *(char *)(v14 + 23);
      if (v17 >= 0)
        v18 = v14;
      else
        v18 = v15;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v14 + 23);
      else
        v19 = *(_QWORD *)(v14 + 8);
      v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v32, v18, v19);
      v21 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)"=", 1);
      v22 = *(_QWORD *)(v11 + 8 * v12);
      v25 = *(_QWORD *)(v22 + 96);
      v23 = v22 + 96;
      v24 = v25;
      v26 = *(char *)(v23 + 23);
      if (v26 >= 0)
        v27 = v23;
      else
        v27 = v24;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(v23 + 23);
      else
        v28 = *(_QWORD *)(v23 + 8);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v21, v27, v28);
      v11 = *a2;
      v29 = (a2[1] - *a2) >> 3;
      if (v12 != v29 - 1)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v32, (uint64_t)"; ", 2);
        v11 = *a2;
        v29 = (a2[1] - *a2) >> 3;
      }
      ++v12;
    }
    while (v12 < v29);
  }
  std::stringbuf::str[abi:fe180100]((uint64_t)v33, &v31);
  v38[23] = 6;
  strcpy(v38, "Cookie");
  v39 = v31;
  memset(&v31, 0, sizeof(v31));
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__insert_multi[abi:fe180100]<std::pair<std::string const,std::string> const&>((_QWORD *)a1, (uint64_t)v38);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_27:
    operator delete(v31.__r_.__value_.__l.__data_);
    goto LABEL_21;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
LABEL_21:
  v32 = *v6;
  *(_QWORD *)((char *)&v33[-1] + *(_QWORD *)(v32 - 24)) = v6[3];
  v33[0] = v10 + 16;
  if (SBYTE7(v35) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v37);
  return result;
}

void sub_18CCDB838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v18;
  void *v19;
  void **v20;

  v18 = *(void ***)(v15 + 16);
  if (!v18)
  {
LABEL_2:
    v19 = *(void **)v15;
    *(_QWORD *)v15 = 0;
    if (v19)
      operator delete(v19);
    std::tuple<std::string,std::string>::~tuple(v16 - 144);
    if (a14 < 0)
      operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v20 = (void **)*v18;
    if (*((char *)v18 + 63) < 0)
    {
      operator delete(v18[5]);
      if (*((char *)v18 + 39) < 0)
        goto LABEL_10;
    }
    else if (*((char *)v18 + 39) < 0)
    {
LABEL_10:
      operator delete(v18[2]);
    }
    operator delete(v18);
    v18 = v20;
    if (!v20)
      goto LABEL_2;
  }
}

void AMSCore::HTTPCookie::clone(AMSCore::HTTPCookie *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;

  v4 = operator new();
  v5 = v4;
  *(_OWORD *)v4 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_WORD *)(v5 + 40) = *(_WORD *)(a2 + 40);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 48), *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 64);
  }
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 72), *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    *(_OWORD *)(v5 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(v5 + 88) = *(_QWORD *)(a2 + 88);
  }
  v6 = (std::string *)(v5 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 112);
  }
  *(_QWORD *)this = v5;
}

void sub_18CCDBA0C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[95] < 0)
  {
    operator delete(*v4);
    if ((v1[71] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[39] & 0x80000000) == 0)
      {
LABEL_8:
        MEMORY[0x18D789BDC](v1, 0x1012C407E2AE1F2);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*v2);
      goto LABEL_8;
    }
  }
  else if ((v1[71] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[39] & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t AMSCore::HTTPCookie::matchesURL(AMSCore::HTTPCookie *this, const AMSCore::URL *a2)
{
  char *v4;
  int v5;
  uint64_t v6;
  const std::locale *v7;
  const std::locale::facet *v8;
  const std::locale::facet *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  const void **v17;
  char v18;
  std::string::size_type size;
  size_t v20;
  size_t v21;
  std::string::size_type v22;
  unsigned __int8 *v23;
  std::string *p_s1;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t result;
  void *v28;
  const void *v29;
  size_t v30;
  std::string *v31;
  std::string __s1;

  if (*((_BYTE *)this + 40))
  {
    v4 = (char *)*((_QWORD *)a2 + 16);
    v5 = *((char *)a2 + 151);
    v6 = v5 >= 0 ? *((unsigned __int8 *)a2 + 151) : *((_QWORD *)a2 + 17);
    v7 = std::locale::classic();
    v8 = std::locale::use_facet(v7, MEMORY[0x1E0DE4A90]);
    if (v6 != 5)
      return 0;
    v9 = v8;
    if (v5 >= 0)
      v4 = (char *)a2 + 128;
    v10 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v8->__vftable[1].__on_zero_shared)(v8, *v4);
    if (v10 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 104))return 0;
    v11 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v9->__vftable[1].__on_zero_shared)(v9, v4[1]);
    if (v11 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 116))return 0;
    v12 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v9->__vftable[1].__on_zero_shared)(v9, v4[2]);
    if (v12 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 116))return 0;
    v13 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v9->__vftable[1].__on_zero_shared)(v9, v4[3]);
    if (v13 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 112))return 0;
    v14 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v9->__vftable[1].__on_zero_shared)(v9, v4[4]);
    if (v14 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 115))return 0;
  }
  if (*((char *)this + 39) < 0)
  {
    v15 = (char *)*((_QWORD *)this + 2);
    v16 = *((_QWORD *)this + 3);
  }
  else
  {
    v15 = (char *)this + 16;
    v16 = *((unsigned __int8 *)this + 39);
  }
  if (!AMSCore::URL::isInDomain((uint64_t)a2, v15, v16))
    return 0;
  std::optional<std::string>::value_or[abi:fe180100]<char const(&)[2]>(&__s1, (uint64_t)a2 + 64, "/");
  v17 = (const void **)((char *)this + 72);
  v18 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v20 = *((unsigned __int8 *)this + 95);
  v21 = *((_QWORD *)this + 10);
  if ((v20 & 0x80u) == 0)
    v22 = v20;
  else
    v22 = v21;
  if (size == v22)
  {
    if ((v20 & 0x80u) == 0)
      v23 = (unsigned __int8 *)v17;
    else
      v23 = (unsigned __int8 *)*v17;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v28 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v23, __s1.__r_.__value_.__l.__size_))
      {
        v26 = 1;
LABEL_57:
        operator delete(v28);
        return v26;
      }
    }
    else
    {
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        return 1;
      p_s1 = &__s1;
      v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *v23)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v23;
        if (!--v25)
          goto LABEL_50;
      }
    }
  }
  v29 = v17;
  v30 = v20;
  if ((v20 & 0x80) != 0)
  {
    v29 = *v17;
    v30 = v21;
    if (size < v21)
      goto LABEL_44;
  }
  else if (size < v20)
  {
    goto LABEL_44;
  }
  if (v18 >= 0)
    v31 = &__s1;
  else
    v31 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  result = memcmp(v31, v29, v30);
  if ((_DWORD)result)
  {
LABEL_44:
    v26 = 0;
    if (v18 < 0)
      goto LABEL_56;
    return v26;
  }
  if (v22)
  {
    if ((v20 & 0x80) != 0)
      v17 = (const void **)*v17;
    if (*((_BYTE *)v17 + v22 - 1) == 47)
    {
LABEL_50:
      v26 = 1;
      if (v18 < 0)
        goto LABEL_56;
      return v26;
    }
    if (size >= v22)
    {
      v26 = v31->__r_.__value_.__s.__data_[v22] == 47;
      if (v18 < 0)
      {
LABEL_56:
        v28 = (void *)__s1.__r_.__value_.__r.__words[0];
        goto LABEL_57;
      }
      return v26;
    }
  }
  __break(1u);
  return result;
}

_BYTE *AMSCore::IHTTPCookieProvider::getCookies@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::runtime_error *a3@<X8>)
{
  _BYTE *result;
  unint64_t v7;
  const AMSCore::URL *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  void **v19;
  __int128 v20;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  const std::runtime_error *v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  unsigned int *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  void *v54;
  std::runtime_error v55;
  __int128 v56;
  unsigned int **v57;
  unsigned int *v58[2];
  __int128 v59;
  std::runtime_error v60;
  __int128 v61;
  unsigned int **v62;
  uint64_t v63;
  unsigned int *v64;
  __int128 v65;

  result = operator new(0x1A8uLL);
  v7 = (unint64_t)result;
  *(_QWORD *)result = AMSCore::IHTTPCookieProvider::getCookies;
  *((_QWORD *)result + 1) = AMSCore::IHTTPCookieProvider::getCookies;
  result[152] = 0;
  v8 = (const AMSCore::URL *)(result + 152);
  result[176] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)result + 21) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    result[176] = 1;
  }
  result[184] = 0;
  result[208] = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 32);
    *((_QWORD *)result + 25) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    result[208] = 1;
  }
  result[216] = 0;
  result[240] = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_OWORD *)(result + 216) = *(_OWORD *)(a2 + 64);
    *((_QWORD *)result + 29) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    result[240] = 1;
  }
  *((_DWORD *)result + 62) = *(_DWORD *)(a2 + 96);
  *((_QWORD *)result + 32) = result + 256;
  *((_QWORD *)result + 33) = result + 256;
  *((_QWORD *)result + 34) = 0;
  if (v8 == (const AMSCore::URL *)a2)
    goto LABEL_72;
  v9 = result + 16;
  v10 = *(_QWORD *)(a2 + 120);
  if (v10)
  {
    v12 = *(_QWORD *)(a2 + 104);
    v11 = *(uint64_t **)(a2 + 112);
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    v14 = *((_QWORD *)result + 32);
    *(_QWORD *)(v14 + 8) = v11;
    *v11 = v14;
    *((_QWORD *)result + 32) = v12;
    *(_QWORD *)(v12 + 8) = result + 256;
    *((_QWORD *)result + 34) = v10;
    *(_QWORD *)(a2 + 120) = 0;
  }
  v15 = (__int128 *)(result + 360);
  v16 = result + 304;
  v17 = result + 384;
  *(_OWORD *)(result + 280) = *(_OWORD *)(a2 + 128);
  *((_QWORD *)result + 37) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  do
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v18 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  result[24] = 0;
  v19 = (void **)(result + 24);
  result[104] = 0;
  *((_QWORD *)result + 14) = 0;
  *((_QWORD *)result + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v60, (uint64_t)(result + 16));
  *a3 = v60;
  result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v20 = *(_OWORD *)(v7 + 384);
  *(_OWORD *)(v7 + 400) = v20;
  *v17 = 0;
  *(_QWORD *)(v7 + 392) = 0;
  if (atomic_load((unint64_t *)(v20 + 96)))
    goto LABEL_16;
  *(_BYTE *)(v7 + 416) = 0;
  v22 = (unint64_t *)(*(_QWORD *)(v7 + 400) + 96);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v7, v22));
  if (v23)
  {
LABEL_16:
    v24 = *(_QWORD *)(v7 + 400);
    if (*(_BYTE *)(v24 + 88))
    {
      v25 = (const std::runtime_error *)(v24 + 8);
      v26 = *(_BYTE *)(v24 + 80);
      v27 = (_QWORD *)(v7 + 320);
      if (v26)
      {
        *v16 = *(_OWORD *)(v24 + 8);
        *v27 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)(v24 + 24) = 0;
        v25->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(v7 + 304), v25);
        *(_OWORD *)v27 = *(_OWORD *)(v24 + 24);
        *(_QWORD *)(v7 + 304) = off_1E2521330;
        v28 = (_QWORD *)(v24 + 48);
        v29 = *(_QWORD *)(v24 + 48);
        v30 = v7 + 344;
        *(_QWORD *)(v7 + 336) = *(_QWORD *)(v24 + 40);
        *(_QWORD *)(v7 + 344) = v29;
        v31 = *(_QWORD *)(v24 + 56);
        *(_QWORD *)(v7 + 352) = v31;
        if (v31)
        {
          *(_QWORD *)(v29 + 16) = v30;
          *(_QWORD *)(v24 + 40) = v28;
          *v28 = 0;
          *(_QWORD *)(v24 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 336) = v30;
        }
        v32 = *(_QWORD *)(v7 + 400);
        *v15 = *(_OWORD *)(v32 + 64);
        *(_QWORD *)(v32 + 64) = 0;
        *(_QWORD *)(v32 + 72) = 0;
      }
      *(_BYTE *)(v7 + 376) = v26;
      v33 = *(_QWORD *)(v7 + 408);
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          v36 = *(std::__shared_weak_count **)(v7 + 408);
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v37 = *(std::__shared_weak_count **)(v7 + 392);
      if (!v37)
        goto LABEL_75;
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
        if (*(_BYTE *)(v7 + 376))
          goto LABEL_33;
      }
      else
      {
LABEL_75:
        if (*(_BYTE *)(v7 + 376))
        {
LABEL_33:
          v60.__vftable = 0;
          v60.__imp_.__imp_ = 0;
          *(_QWORD *)&v61 = 0;
          v40 = *(uint64_t **)(v7 + 304);
          v41 = *(uint64_t **)(v7 + 312);
          if (v40 != v41)
          {
            v42 = 0;
            do
            {
              if (AMSCore::HTTPCookie::matchesURL((AMSCore::HTTPCookie *)*v40, v8))
              {
                if ((unint64_t)v42 < (unint64_t)v61)
                {
                  v43 = *v40;
                  *v40 = 0;
                  *(_QWORD *)v42 = v43;
                  v42 += 8;
                }
                else
                {
                  v42 = (char *)std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v60, v40);
                }
                v60.__imp_.__imp_ = v42;
              }
              ++v40;
            }
            while (v40 != v41);
          }
          if (*(_BYTE *)(v7 + 104))
          {
            v44 = *(uint64_t **)(v7 + 24);
            if (*(_BYTE *)(v7 + 96))
            {
              if (v44)
              {
                v45 = *(uint64_t **)(v7 + 32);
                v46 = *(void **)(v7 + 24);
                if (v45 != v44)
                {
                  do
                    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v45, 0);
                  while (v45 != v44);
                  v46 = *v19;
                }
                *(_QWORD *)(v7 + 32) = v44;
                operator delete(v46);
              }
            }
            else
            {
              ((void (*)(unint64_t))*v44)(v7 + 24);
            }
          }
          *(std::runtime_error *)(v7 + 24) = v60;
          *(_QWORD *)(v7 + 40) = v61;
          *(_BYTE *)(v7 + 96) = 1;
          *(_BYTE *)(v7 + 104) = 1;
LABEL_63:
          v52 = *(uint64_t **)(v7 + 304);
          if (*(_BYTE *)(v7 + 376))
          {
            if (v52)
            {
              v53 = *(uint64_t **)(v7 + 312);
              v54 = *(void **)(v7 + 304);
              if (v53 != v52)
              {
                do
                  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v53, 0);
                while (v53 != v52);
                v54 = *(void **)v16;
              }
              *(_QWORD *)(v7 + 312) = v52;
              operator delete(v54);
            }
          }
          else
          {
            ((void (*)(unint64_t))*v52)(v7 + 304);
          }
          *(_QWORD *)(v7 + 304) = v9;
          *(_QWORD *)v7 = 0;
          return AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)(v7 + 304));
        }
      }
      std::runtime_error::runtime_error(&v60, (const std::runtime_error *)(v7 + 304));
      v61 = *(_OWORD *)v27;
      v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v47 = *(_QWORD *)(v7 + 344);
      v62 = *(unsigned int ***)(v7 + 336);
      v63 = v47;
      v64 = *(unsigned int **)(v7 + 352);
      if (v64)
      {
        *(_QWORD *)(v47 + 16) = &v63;
        *(_QWORD *)(v7 + 336) = v7 + 344;
        *(_QWORD *)(v7 + 344) = 0;
        *(_QWORD *)(v7 + 352) = 0;
      }
      else
      {
        v62 = (unsigned int **)&v63;
      }
      v65 = *v15;
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v7 + 368) = 0;
      std::runtime_error::runtime_error(&v55, &v60);
      v56 = v61;
      v55.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v48 = (unsigned int *)v63;
      v57 = v62;
      v58[0] = (unsigned int *)v63;
      v58[1] = v64;
      if (v64)
      {
        *(_QWORD *)(v63 + 16) = v58;
        v48 = 0;
        v62 = (unsigned int **)&v63;
        v63 = 0;
        v64 = 0;
      }
      else
      {
        v57 = v58;
      }
      v59 = v65;
      v65 = 0uLL;
      v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v48);
      MEMORY[0x18D7898AC](&v60);
      std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v7 + 24), &v55);
      v55.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      v9 = (_BYTE *)(v7 + 16);
      if (*((_QWORD *)&v59 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v57, v58[0]);
      MEMORY[0x18D7898AC](&v55);
      goto LABEL_63;
    }
LABEL_72:
    __break(1u);
  }
  return result;
}

void sub_18CCDC5BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100]((uint64_t **)va);
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](v11);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCDC5E0()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCDC580);
}

std::runtime_error *AMSCore::IHTTPCookieProvider::getCookies(std::runtime_error *result)
{
  std::runtime_error_vtbl *v1;
  std::runtime_error *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  _QWORD *v6;
  std::runtime_error_vtbl *v7;
  void (__cdecl *v8)(std::runtime_error *__hidden);
  std::runtime_error_vtbl *p_imp;
  void (__cdecl *v10)(std::runtime_error *__hidden);
  std::runtime_error *v11;
  const char *imp;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  const char *v26;
  unsigned int *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  std::runtime_error_vtbl *v33;
  std::runtime_error v34;
  __int128 v35;
  unsigned int **v36;
  char *v37;
  unsigned int *v38;
  __int128 v39;
  std::runtime_error v40;
  __int128 v41;
  unsigned int **v42;
  unsigned int *v43[2];
  __int128 v44;

  v1 = result[25].__vftable;
  if (!LOBYTE(v1[3].what))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = result + 19;
  v4 = (const std::runtime_error *)&v1->~runtime_error_0;
  v5 = (char)v1[3].~runtime_error_0;
  v6 = &result[20].__vftable;
  if (v5)
  {
    *v3 = *(std::runtime_error *)&v1->~runtime_error_0;
    *v6 = v1[1].~runtime_error;
    v1->what = 0;
    v1[1].~runtime_error = 0;
    v4->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error(result + 19, v4);
    *(_OWORD *)v6 = *(_OWORD *)&v1[1].~runtime_error;
    v2[19].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v7 = v1 + 2;
    v8 = v1[2].~runtime_error;
    p_imp = (std::runtime_error_vtbl *)&v2[21].__imp_;
    v2[21].__vftable = (std::runtime_error_vtbl *)v1[1].what;
    v2[21].__imp_.__imp_ = (const char *)v8;
    v10 = v1[2].~runtime_error_0;
    v2[22].__vftable = (std::runtime_error_vtbl *)v10;
    if (v10)
    {
      *((_QWORD *)v8 + 2) = p_imp;
      v1[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v7;
      v7->~runtime_error = 0;
      v1[2].~runtime_error_0 = 0;
    }
    else
    {
      v2[21].__vftable = p_imp;
    }
    v11 = (std::runtime_error *)v2[25].__vftable;
    *(std::runtime_error *)((char *)v2 + 360) = v11[4];
    v11[4].__vftable = 0;
    v11[4].__imp_.__imp_ = 0;
  }
  LOBYTE(v2[23].__imp_.__imp_) = v5;
  imp = v2[25].__imp_.__imp_;
  if (imp)
  {
    v13 = (unint64_t *)(imp + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      v15 = (std::__shared_weak_count *)v2[25].__imp_.__imp_;
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v16 = (std::__shared_weak_count *)v2[24].__imp_.__imp_;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (LOBYTE(v2[23].__imp_.__imp_))
        goto LABEL_18;
LABEL_34:
      std::runtime_error::runtime_error(&v34, v3);
      v35 = *(_OWORD *)v6;
      v34.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v26 = v2[21].__imp_.__imp_;
      v36 = (unsigned int **)v2[21].__vftable;
      v37 = (char *)v26;
      v38 = (unsigned int *)v2[22].__vftable;
      if (v38)
      {
        *((_QWORD *)v26 + 2) = &v37;
        v2[21].__vftable = (std::runtime_error_vtbl *)&v2[21].__imp_;
        v2[21].__imp_.__imp_ = 0;
        v2[22].__vftable = 0;
      }
      else
      {
        v36 = (unsigned int **)&v37;
      }
      v39 = *(_OWORD *)&v2[22].__imp_.__imp_;
      v2[22].__imp_.__imp_ = 0;
      v2[23].__vftable = 0;
      std::runtime_error::runtime_error(&v40, &v34);
      v41 = v35;
      v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v27 = (unsigned int *)v37;
      v42 = v36;
      v43[0] = (unsigned int *)v37;
      v43[1] = v38;
      if (v38)
      {
        *((_QWORD *)v37 + 2) = v43;
        v27 = 0;
        v36 = (unsigned int **)&v37;
        v37 = 0;
        v38 = 0;
      }
      else
      {
        v42 = v43;
      }
      v44 = v39;
      v39 = 0uLL;
      v34.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v27);
      MEMORY[0x18D7898AC](&v34);
      std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)((char *)v2 + 24), &v40);
      v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v43[0]);
      MEMORY[0x18D7898AC](&v40);
      goto LABEL_48;
    }
  }
  if (!LOBYTE(v2[23].__imp_.__imp_))
    goto LABEL_34;
LABEL_18:
  v40.__vftable = 0;
  v40.__imp_.__imp_ = 0;
  *(_QWORD *)&v41 = 0;
  v19 = (uint64_t *)v2[19].__vftable;
  v20 = (uint64_t *)v2[19].__imp_.__imp_;
  if (v19 != v20)
  {
    v21 = 0;
    do
    {
      if (AMSCore::HTTPCookie::matchesURL((AMSCore::HTTPCookie *)*v19, (const AMSCore::URL *)&v2[9].__imp_))
      {
        if ((unint64_t)v21 < (unint64_t)v41)
        {
          v22 = *v19;
          *v19 = 0;
          *(_QWORD *)v21 = v22;
          v21 += 8;
        }
        else
        {
          v21 = (char *)std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v40, v19);
        }
        v40.__imp_.__imp_ = v21;
      }
      ++v19;
    }
    while (v19 != v20);
  }
  if (LOBYTE(v2[6].__imp_.__imp_))
  {
    v23 = (uint64_t *)v2[1].__imp_.__imp_;
    if (LOBYTE(v2[6].__vftable))
    {
      if (v23)
      {
        v24 = (uint64_t *)v2[2].__vftable;
        v25 = (char *)v2[1].__imp_.__imp_;
        if (v24 != v23)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v24, 0);
          while (v24 != v23);
          v25 = (char *)v2[1].__imp_.__imp_;
        }
        v2[2].__vftable = (std::runtime_error_vtbl *)v23;
        operator delete(v25);
      }
    }
    else
    {
      ((void (*)(std::__libcpp_refstring *))*v23)(&v2[1].__imp_);
    }
  }
  *(std::runtime_error *)((char *)v2 + 24) = v40;
  v2[2].__imp_.__imp_ = (const char *)v41;
  LOBYTE(v2[6].__vftable) = 1;
  LOBYTE(v2[6].__imp_.__imp_) = 1;
LABEL_48:
  v31 = (uint64_t *)v2[19].__vftable;
  if (LOBYTE(v2[23].__imp_.__imp_))
  {
    if (v31)
    {
      v32 = (uint64_t *)v2[19].__imp_.__imp_;
      v33 = v2[19].__vftable;
      if (v32 != v31)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v32, 0);
        while (v32 != v31);
        v33 = v3->__vftable;
      }
      v2[19].__imp_.__imp_ = (const char *)v31;
      operator delete(v33);
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))*v31)(v3);
  }
  v2[19].__vftable = (std::runtime_error_vtbl *)&v2[1];
  v2->__vftable = 0;
  return (std::runtime_error *)AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CCDC9F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100]((uint64_t **)va);
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](v11);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCDCA1C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCDC9C0);
}

void AMSCore::IHTTPCookieProvider::getCookies(char *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;

  if (*(_QWORD *)a1)
  {
    v2 = *((_QWORD *)a1 + 51);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 51);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 49);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = (char *)*((_QWORD *)a1 + 18);
  if (v9 == a1 + 120)
  {
    v10 = 4;
    v9 = a1 + 120;
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_17:
  if (a1[104])
  {
    v11 = (uint64_t *)*((_QWORD *)a1 + 3);
    if (a1[96])
    {
      if (v11)
      {
        v12 = (uint64_t *)*((_QWORD *)a1 + 4);
        v13 = (void *)*((_QWORD *)a1 + 3);
        if (v12 != v11)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v12, 0);
          while (v12 != v11);
          v13 = (void *)*((_QWORD *)a1 + 3);
        }
        *((_QWORD *)a1 + 4) = v11;
        operator delete(v13);
      }
    }
    else
    {
      ((void (*)(char *))*v11)(a1 + 24);
    }
  }
  do
  {
    v14 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v15)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 152));
  operator delete(a1);
}

uint64_t AMSCore::toString(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_18CCDCBAC + 4 * byte_18CF51EAB[a1]))();
}

void sub_18CCDCBAC(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "CONNECT");
}

void sub_18CCDCC3C(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "PATCH");
}

void sub_18CCDCC5C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 4;
  JUMPOUT(0x18CCDCC6CLL);
}

void sub_18CCDCC78(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 3;
  JUMPOUT(0x18CCDCC84);
}

void sub_18CCDCC90(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "TRACE");
}

void AMSCore::HTTPError::makeFromCurrentException(AMSCore::HTTPError *this)
{
  _BYTE v1[72];

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)v1);
}

uint64_t sub_18CCDCCD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  std::runtime_error::runtime_error((std::runtime_error *)v19, v26);
  v22 = v27;
  v21 = v28;
  *(_QWORD *)(v19 + 40) = v28;
  v23 = v19 + 40;
  *(std::runtime_error *)(v19 + 16) = v26[1];
  *(_QWORD *)(v19 + 32) = v22;
  v24 = v29;
  *(_QWORD *)(v19 + 48) = v29;
  if (v24)
  {
    *(_QWORD *)(v21 + 16) = v23;
    v27 = v20 + 40;
    *(_QWORD *)(v20 + 40) = 0;
    *(_QWORD *)(v20 + 48) = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)(v19 + 32) = v23;
  }
  *(_OWORD *)(v19 + 56) = v30;
  *((_QWORD *)&v30 + 1) = 0;
  *(_QWORD *)v19 = &off_1E2521420;
  *(_BYTE *)(v19 + 72) = 0;
  *(_BYTE *)(v19 + 96) = 0;
  *(_BYTE *)(v19 + 104) = 0;
  *(_BYTE *)(v19 + 112) = 0;
  *(_BYTE *)(v19 + 120) = 0;
  *(_BYTE *)(v19 + 128) = 0;
  *(_BYTE *)(v19 + 136) = 0;
  *(_BYTE *)(v19 + 144) = 0;
  *(_BYTE *)(v19 + 152) = 0;
  *(_BYTE *)(v19 + 160) = 0;
  *(_BYTE *)(v19 + 168) = 0;
  *(_BYTE *)(v19 + 176) = 0;
  *(_BYTE *)(v19 + 184) = 0;
  *(_BYTE *)(v19 + 192) = 0;
  *(_BYTE *)(v19 + 232) = 0;
  *(_BYTE *)(v19 + 240) = 0;
  *(_BYTE *)(v19 + 248) = 0;
  *(_BYTE *)(v19 + 256) = 0;
  *(_BYTE *)(v19 + 264) = 0;
  *(_BYTE *)(v19 + 272) = 0;
  *(_BYTE *)(v19 + 280) = 0;
  *(_BYTE *)(v19 + 288) = 0;
  *(_BYTE *)(v19 + 296) = 0;
  *(_BYTE *)(v19 + 304) = 0;
  *(_BYTE *)(v19 + 312) = 0;
  *(_BYTE *)(v19 + 320) = 0;
  *(_BYTE *)(v19 + 328) = 0;
  *(_BYTE *)(v19 + 336) = 0;
  *(_BYTE *)(v19 + 344) = 0;
  *(_BYTE *)(v19 + 360) = 0;
  *(_BYTE *)(v19 + 368) = 0;
  *(_WORD *)(v19 + 376) = 0;
  *(_BYTE *)(v19 + 384) = 0;
  *(_BYTE *)(v19 + 408) = 0;
  *(_QWORD *)(v19 + 200) = 0;
  *(_QWORD *)(v19 + 208) = 0;
  *(_BYTE *)(v19 + 224) = 0;
  *(_QWORD *)(v19 + 216) = 0;
  *(_DWORD *)(v19 + 352) = 0;
  *(_QWORD *)&v30 = 0;
  v26[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v20 + 32, (unsigned int *)v21);
  return MEMORY[0x18D7898AC](v26);
}

double AMSCore::IHTTPHeaderMap::getSingleValueOrNone(std::string *a1, _QWORD *a2, char *a3)
{
  uint64_t *v5;
  __int128 v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  const std::locale *v16;
  const std::locale::facet *v17;
  char *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  std::string *v27;
  uint64_t *v28;
  char *v29;
  std::string v30;

  v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, a3);
  v7 = v5;
  v27 = a1;
  if (!v5)
    goto LABEL_29;
  v8 = v5;
  v28 = v5;
  do
  {
    v8 = (uint64_t *)*v8;
    if (!v8)
      break;
    v9 = (char *)(v8 + 2);
    v10 = (char *)v8[2];
    v11 = *((char *)v8 + 39);
    if (v11 >= 0)
      v12 = *((unsigned __int8 *)v8 + 39);
    else
      v12 = v8[3];
    v13 = a3[23];
    v14 = *(char **)a3;
    if (v13 >= 0)
      v15 = a3[23];
    else
      v15 = *((_QWORD *)a3 + 1);
    v16 = std::locale::classic();
    v17 = std::locale::use_facet(v16, MEMORY[0x1E0DE4A90]);
    if (v12 != v15)
      goto LABEL_25;
    if (v13 >= 0)
      v18 = a3;
    else
      v18 = v14;
    if (v11 < 0)
      v9 = v10;
    v29 = v18;
    if (v12)
    {
      v19 = v17;
      v20 = v12 - 1;
      v21 = v9;
      while (1)
      {
        v22 = v20;
        v23 = *v18;
        v24 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v19->__vftable[1].__on_zero_shared)(v19, *v21);
        if (v24 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v19->__vftable[1].__on_zero_shared)(v19, v23))break;
        ++v21;
        ++v18;
        v20 = v22 - 1;
        if (!v22)
          goto LABEL_22;
      }
LABEL_25:
      v7 = v28;
      break;
    }
    v21 = v9;
LABEL_22:
    if (v21 != &v9[v12])
      goto LABEL_25;
    v7 = v28;
  }
  while (v18 == &v29[v12]);
  if (v8 == v7)
  {
LABEL_29:
    v27->__r_.__value_.__s.__data_[0] = 0;
    v27[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (*((char *)v7 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)v7[5], v7[6]);
    }
    else
    {
      v6 = *(_OWORD *)(v7 + 5);
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v6;
      v30.__r_.__value_.__r.__words[2] = v7[7];
    }
    if ((uint64_t *)*v7 == v8)
    {
      *(_QWORD *)&v6 = v30.__r_.__value_.__r.__words[0];
      *v27 = v30;
      v27[1].__r_.__value_.__s.__data_[0] = 1;
    }
    else
    {
      v27->__r_.__value_.__s.__data_[0] = 0;
      v25 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v27[1].__r_.__value_.__s.__data_[0] = 0;
      if (v25 < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }
  }
  return *(double *)&v6;
}

void std::__shared_ptr_emplace<AMSCore::AppleHTTPProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::AppleHTTPProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::AppleHTTPProvider>::__on_zero_shared(uint64_t a1)
{
  AMSCore::AppleHTTPProvider::~AppleHTTPProvider((AMSCore::AppleHTTPProvider *)(a1 + 24));
}

void AMSCore::HTTPRequest::~HTTPRequest(void **this)
{
  void **v2;
  void *v3;
  void **v4;

  if (*((char *)this + 223) < 0)
  {
    operator delete(this[25]);
    v2 = (void **)this[22];
    if (!v2)
      goto LABEL_5;
    while (1)
    {
LABEL_9:
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_13:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_13;
      }
      operator delete(v2);
      v2 = v4;
      if (!v4)
        goto LABEL_5;
    }
  }
  v2 = (void **)this[22];
  if (v2)
    goto LABEL_9;
LABEL_5:
  v3 = this[20];
  this[20] = 0;
  if (v3)
    operator delete(v3);
  AMSCore::URL::~URL((AMSCore::URL *)this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJN7AMSCore10DataBufferEPKS9_EEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::`anonymous namespace'::DecodedBody::get(void)::{lambda(AMSCore::DataBuffer const&)#1},AMSCore::`anonymous namespace'::DecodedBody::get(void)::{lambda(AMSCore::DataBuffer const*)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AMSCore::DataBuffer,AMSCore::DataBuffer const*> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::`anonymous namespace'::DecodedBody::get(void)::{lambda(AMSCore::DataBuffer const&)#1},AMSCore::`anonymous namespace'::DecodedBody::get(void)::{lambda(AMSCore::DataBuffer const*)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AMSCore::DataBuffer,AMSCore::DataBuffer const*> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t AMSCore::HTTPRequest::HTTPRequest(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = a2[2];
    *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(result + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(result + 56) = 1;
  }
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v4 = a2[4];
    *(_QWORD *)(result + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(result + 64) = v4;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
  *(_QWORD *)(result + 104) = result + 104;
  *(_QWORD *)(result + 112) = result + 104;
  *(_QWORD *)(result + 120) = 0;
  if ((__int128 *)result == a2)
  {
    __break(1u);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 15);
    if (v5)
    {
      v7 = *((_QWORD *)a2 + 13);
      v6 = (uint64_t *)*((_QWORD *)a2 + 14);
      v8 = *v6;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
      **(_QWORD **)(v7 + 8) = v8;
      v9 = *(_QWORD *)(result + 104);
      *(_QWORD *)(v9 + 8) = v6;
      *v6 = v9;
      *(_QWORD *)(result + 104) = v7;
      *(_QWORD *)(v7 + 8) = result + 104;
      *(_QWORD *)(result + 120) = v5;
      *((_QWORD *)a2 + 15) = 0;
    }
    v10 = a2[8];
    *(_QWORD *)(result + 144) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(result + 128) = v10;
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 16) = 0;
    *(_DWORD *)(result + 152) = *((_DWORD *)a2 + 38);
    v11 = *((_QWORD *)a2 + 20);
    *((_QWORD *)a2 + 20) = 0;
    *(_QWORD *)(result + 160) = v11;
    *(_QWORD *)(result + 168) = *((_QWORD *)a2 + 21);
    *((_QWORD *)a2 + 21) = 0;
    v12 = *((_QWORD *)a2 + 22);
    *(_QWORD *)(result + 176) = v12;
    v13 = *((_QWORD *)a2 + 23);
    *(_QWORD *)(result + 184) = v13;
    *(_DWORD *)(result + 192) = *((_DWORD *)a2 + 48);
    if (v13)
    {
      v14 = *(_QWORD *)(v12 + 8);
      v15 = *(_QWORD *)(result + 168);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v14 >= v15)
          v14 %= v15;
      }
      else
      {
        v14 &= v15 - 1;
      }
      *(_QWORD *)(v11 + 8 * v14) = result + 176;
      *((_QWORD *)a2 + 22) = 0;
      *((_QWORD *)a2 + 23) = 0;
    }
    v16 = *(__int128 *)((char *)a2 + 200);
    *(_QWORD *)(result + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)(result + 200) = v16;
    *((_QWORD *)a2 + 26) = 0;
    *((_QWORD *)a2 + 27) = 0;
    *((_QWORD *)a2 + 25) = 0;
    *(_BYTE *)(result + 224) = *((_BYTE *)a2 + 224);
  }
  return result;
}

void AMSCore::HTTPRequestBuilder::buildSPtr(AMSCore::HTTPRequestBuilder *this, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  _QWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::runtime_error v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::runtime_error v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::runtime_error v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 72))
  {
    AMSCore::Error::Error(&v22, (const std::runtime_error *)a2);
    std::runtime_error::runtime_error(&v16, &v22);
    v17 = v23;
    v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v3 = (unsigned int *)v25;
    v18 = v24;
    v19 = v25;
    v20 = v26;
    if (v26)
    {
      *(_QWORD *)(v25 + 16) = &v19;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
      v3 = 0;
    }
    else
    {
      v18 = &v19;
    }
    v21 = v27;
    v27 = 0uLL;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v3);
    MEMORY[0x18D7898AC](&v22);
    std::runtime_error::runtime_error(&v22, &v16);
    v23 = v17;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v4 = (unsigned int *)v19;
    v24 = v18;
    v25 = v19;
    v26 = v20;
    if (v20)
    {
      *(_QWORD *)(v19 + 16) = &v25;
      v4 = 0;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v24 = &v25;
    }
    v27 = v21;
    v21 = 0uLL;
    v28 = 0;
    v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v4);
    MEMORY[0x18D7898AC](&v16);
    if (!v28)
    {
      std::runtime_error::runtime_error(&v16, &v22);
      v17 = v23;
      v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v18 = v24;
      v19 = v25;
      v20 = v26;
      if (v26)
      {
        *(_QWORD *)(v25 + 16) = &v19;
        v24 = &v25;
        v25 = 0;
        v26 = 0;
      }
      else
      {
        v18 = &v19;
      }
      v21 = v27;
      v27 = 0uLL;
      std::runtime_error::runtime_error(&v10, &v16);
      v11 = v17;
      v10.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v6 = (unsigned int *)v19;
      v12 = v18;
      v13 = v19;
      v14 = v20;
      if (v20)
      {
        *(_QWORD *)(v19 + 16) = &v13;
        v6 = 0;
        v18 = &v19;
        v19 = 0;
        v20 = 0;
      }
      else
      {
        v12 = &v13;
      }
      v15 = v21;
      v21 = 0uLL;
      v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v6);
      MEMORY[0x18D7898AC](&v16);
      std::runtime_error::runtime_error((std::runtime_error *)this, &v10);
      *((_OWORD *)this + 1) = v11;
      *(_QWORD *)this = off_1E2521330;
      v7 = v13;
      *((_QWORD *)this + 4) = v12;
      *((_QWORD *)this + 5) = v7;
      v8 = (char *)this + 40;
      v9 = v14;
      *((_QWORD *)this + 6) = v14;
      if (v9)
      {
        *(_QWORD *)(v7 + 16) = v8;
        v7 = 0;
        v12 = &v13;
        v13 = 0;
        v14 = 0;
      }
      else
      {
        *((_QWORD *)this + 4) = v8;
      }
      *(_OWORD *)((char *)this + 56) = v15;
      v15 = 0uLL;
      *((_BYTE *)this + 72) = 0;
      v10.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v7);
      MEMORY[0x18D7898AC](&v10);
      if (v28)
        goto LABEL_11;
      goto LABEL_22;
    }
  }
  else
  {
    AMSCore::HTTPRequest::HTTPRequest((uint64_t)&v22, (__int128 *)(a2 + 80));
    v28 = 1;
  }
  v5 = operator new(0x100uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_1E2522770;
  *(_QWORD *)this = AMSCore::HTTPRequest::HTTPRequest((uint64_t)(v5 + 3), (__int128 *)&v22);
  *((_QWORD *)this + 1) = v5;
  *((_BYTE *)this + 72) = 1;
  if (v28)
  {
LABEL_11:
    AMSCore::HTTPRequest::~HTTPRequest((void **)&v22.__vftable);
    return;
  }
LABEL_22:
  ((void (*)(std::runtime_error *))v22.~runtime_error)(&v22);
}

void sub_18CCDD93C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequest>::__on_zero_shared(uint64_t a1)
{
  AMSCore::HTTPRequest::~HTTPRequest((void **)(a1 + 24));
}

uint64_t AMSCore::HTTPRequestBuilder::withBody(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  std::system_error_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  std::system_error_vtbl *v12;
  std::system_error_vtbl *v13;
  std::ios_base *v14;
  const char *v15;
  std::system_error_vtbl *v16;
  uint64_t v17;
  uint64_t v18;
  std::system_error_vtbl *v19;
  std::system_error_vtbl *v20;
  std::ios_base *v21;
  uint64_t v22;
  int v23;
  std::system_error_vtbl *v25;
  uint64_t v26;
  uint64_t v27;
  std::system_error_vtbl *v28;
  std::system_error_vtbl *v29;
  std::ios_base *v30;
  uint64_t v31;
  unsigned int *v32;
  std::system_error_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  std::system_error_vtbl *v36;
  std::system_error_vtbl *v37;
  std::ios_base *v38;
  uint64_t v39;
  std::system_error *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v46;
  unsigned int *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  _BYTE v53[32];
  unsigned int **v54;
  unsigned int *v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  int v59;
  _BYTE v60[32];
  unsigned int **v61;
  unsigned int *v62;
  uint64_t v63;
  __int128 v64;
  char v65;
  std::runtime_error v66;
  __int128 v67;
  unsigned int **v68;
  unsigned int *v69;
  uint64_t v70;
  __int128 v71;
  _BYTE __what_arg[32];
  unsigned int **v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  char v77;
  std::system_error v78;
  unsigned int **v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 __p;
  __int128 v84;
  int v85;
  _QWORD v86[19];
  _QWORD v87[5];
  std::error_code v88;

  v87[2] = *MEMORY[0x1E0C80C00];
  v59 = a3;
  switch(a3)
  {
    case 1:
      v9 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v10 = MEMORY[0x1E0DE4FE0] + 64;
      v11 = MEMORY[0x1E0DE4F60];
      v12 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v13 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v86[0] = MEMORY[0x1E0DE4FE0] + 64;
      v78.__vftable = v12;
      *(std::system_error_vtbl **)((char *)&v78.__vftable + (unint64_t)v12[-1].~system_error) = v13;
      v14 = (std::ios_base *)((char *)&v78 + (unint64_t)v78.__vftable[-1].~system_error);
      std::ios_base::init(v14, &v78.__imp_);
      v14[1].__vftable = 0;
      v14[1].__fmtflags_ = -1;
      v78.__vftable = v9 + 1;
      v86[0] = v10;
      std::streambuf::basic_streambuf();
      v15 = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v78.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      __p = 0u;
      v84 = 0u;
      v85 = 16;
      std::stringbuf::str[abi:fe180100]((uint64_t)&v78.__imp_, (std::string *)__what_arg);
      *(_OWORD *)v60 = *(_OWORD *)__what_arg;
      *(_QWORD *)&v60[16] = *(_QWORD *)&__what_arg[16];
      v78.__vftable = *(std::system_error_vtbl **)v11;
      *(std::system_error_vtbl **)((char *)&v78.__vftable + (unint64_t)v78.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v11 + 24);
      v78.__imp_.__imp_ = v15;
      if (SBYTE7(v84) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v86);
      *(_OWORD *)v53 = *(_OWORD *)v60;
      *(_QWORD *)&v53[16] = *(_QWORD *)&v60[16];
      goto LABEL_33;
    case 2:
      v16 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v17 = MEMORY[0x1E0DE4FE0] + 64;
      v18 = MEMORY[0x1E0DE4F60];
      v19 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v20 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v86[0] = MEMORY[0x1E0DE4FE0] + 64;
      v78.__vftable = v19;
      *(std::system_error_vtbl **)((char *)&v78.__vftable + (unint64_t)v19[-1].~system_error) = v20;
      v21 = (std::ios_base *)((char *)&v78 + (unint64_t)v78.__vftable[-1].~system_error);
      std::ios_base::init(v21, &v78.__imp_);
      v21[1].__vftable = 0;
      v21[1].__fmtflags_ = -1;
      v78.__vftable = v16 + 1;
      v86[0] = v17;
      std::streambuf::basic_streambuf();
      v22 = MEMORY[0x1E0DE4FB8];
      v78.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      __p = 0u;
      v84 = 0u;
      v85 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v78, (uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n", 164);
      if (v77)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v78, (uint64_t)"\n</plist>", 9);
        std::stringbuf::str[abi:fe180100]((uint64_t)&v78.__imp_, (std::string *)v60);
        *(_QWORD *)v53 = *(_QWORD *)v60;
        *(_QWORD *)&v53[8] = *(_QWORD *)&v60[8];
        *(_QWORD *)&v53[15] = *(_QWORD *)&v60[15];
        v53[23] = v60[23];
        v58 = 1;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)v60, (const std::runtime_error *)__what_arg);
        *(_OWORD *)&v60[16] = *(_OWORD *)&__what_arg[16];
        *(_QWORD *)v60 = off_1E2521330;
        v61 = v73;
        v62 = (unsigned int *)v74;
        v63 = v75;
        if (v75)
        {
          *(_QWORD *)(v74 + 16) = &v62;
          v73 = (unsigned int **)&v74;
          v74 = 0;
          v75 = 0;
        }
        else
        {
          v61 = &v62;
        }
        v64 = v76;
        v76 = 0uLL;
        v65 = 1;
        std::runtime_error::runtime_error((std::runtime_error *)v53, (const std::runtime_error *)v60);
        *(_OWORD *)&v53[16] = *(_OWORD *)&v60[16];
        *(_QWORD *)v53 = off_1E2521330;
        v54 = v61;
        v55 = v62;
        v56 = v63;
        if (v63)
        {
          *((_QWORD *)v62 + 2) = &v55;
          v61 = &v62;
          v62 = 0;
          v63 = 0;
        }
        else
        {
          v54 = &v55;
        }
        v57 = v64;
        v64 = 0uLL;
        std::runtime_error::runtime_error(&v66, (const std::runtime_error *)v53);
        v67 = *(_OWORD *)&v53[16];
        v46 = v55;
        v66.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v68 = v54;
        v69 = v55;
        v70 = v56;
        if (v56)
        {
          *((_QWORD *)v55 + 2) = &v69;
          v46 = 0;
          v54 = &v55;
          v55 = 0;
          v56 = 0;
        }
        else
        {
          v68 = &v69;
        }
        v71 = v57;
        v57 = 0uLL;
        *(_QWORD *)v53 = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v54, v46);
        MEMORY[0x18D7898AC](v53);
        std::runtime_error::runtime_error((std::runtime_error *)v53, &v66);
        *(_OWORD *)&v53[16] = v67;
        *(_QWORD *)v53 = off_1E2521330;
        v47 = v69;
        v54 = v68;
        v55 = v69;
        v56 = v70;
        if (v70)
        {
          *((_QWORD *)v69 + 2) = &v55;
          v47 = 0;
          v68 = &v69;
          v69 = 0;
          v70 = 0;
        }
        else
        {
          v54 = &v55;
        }
        v22 = MEMORY[0x1E0DE4FB8];
        v57 = v71;
        v71 = 0uLL;
        v58 = 0;
        v66.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v68, v47);
        MEMORY[0x18D7898AC](&v66);
        if (v65)
        {
          *(_QWORD *)v60 = off_1E2521330;
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (*((_QWORD *)&v64 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v61, v62);
          MEMORY[0x18D7898AC](v60);
        }
      }
      if (!v77)
        (**(void (***)(_BYTE *))__what_arg)(__what_arg);
      v78.__vftable = *(std::system_error_vtbl **)v18;
      *(std::system_error_vtbl **)((char *)&v78.__vftable + (unint64_t)v78.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v18 + 24);
      v78.__imp_.__imp_ = (const char *)(v22 + 16);
      if (SBYTE7(v84) < 0)
        operator delete((void *)__p);
      goto LABEL_84;
    case 3:
    case 4:
      v5 = *(_DWORD *)(a2 + 24);
      if (v5 == -1)
        v6 = 0;
      else
        v6 = *(_DWORD *)(a2 + 24);
      if ((v6 - 5) <= 1)
      {
        if (v5 == v6)
          v7 = a2;
        else
          v7 = 0;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v53, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          *(_OWORD *)v53 = *(_OWORD *)v7;
          *(_QWORD *)&v53[16] = *(_QWORD *)(v7 + 16);
        }
        goto LABEL_33;
      }
      v25 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v26 = MEMORY[0x1E0DE4FE0] + 64;
      v27 = MEMORY[0x1E0DE4F60];
      v28 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v29 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v86[0] = MEMORY[0x1E0DE4FE0] + 64;
      v78.__vftable = v28;
      *(std::system_error_vtbl **)((char *)&v78.__vftable + (unint64_t)v28[-1].~system_error) = v29;
      v30 = (std::ios_base *)((char *)&v78 + (unint64_t)v78.__vftable[-1].~system_error);
      std::ios_base::init(v30, &v78.__imp_);
      v30[1].__vftable = 0;
      v30[1].__fmtflags_ = -1;
      v78.__vftable = v25 + 1;
      v86[0] = v26;
      std::streambuf::basic_streambuf();
      v31 = MEMORY[0x1E0DE4FB8];
      v78.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      __p = 0u;
      v84 = 0u;
      v85 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v78, (uint64_t)"Incorrect value type for encoding: ", 35);
      AMSCore::IData::operator<<((uint64_t)&v78, a3);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v78.__imp_, (std::string *)__what_arg);
      v78.__vftable = *(std::system_error_vtbl **)v27;
      *(std::system_error_vtbl **)((char *)&v78.__vftable + (unint64_t)v78.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v27 + 24);
      v78.__imp_.__imp_ = (const char *)(v31 + 16);
      if (SBYTE7(v84) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v86);
      v88.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v88.__val_ = 4;
      std::system_error::system_error(&v78, v88, (const std::string *)__what_arg);
      if ((__what_arg[23] & 0x80000000) != 0)
        operator delete(*(void **)__what_arg);
      v80 = 0;
      v81 = 0;
      v78.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v79 = (unsigned int **)&v80;
      v82 = 0uLL;
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v78);
      *(std::error_code *)&__what_arg[16] = v78.__ec_;
      *(_QWORD *)__what_arg = off_1E2521330;
      v32 = (unsigned int *)v80;
      v73 = v79;
      v74 = v80;
      v75 = v81;
      if (v81)
      {
        *(_QWORD *)(v80 + 16) = &v74;
        v32 = 0;
        v79 = (unsigned int **)&v80;
        v80 = 0;
        v81 = 0;
      }
      else
      {
        v73 = (unsigned int **)&v74;
      }
      v76 = v82;
      v82 = 0uLL;
      v78.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v79, v32);
      MEMORY[0x18D7898AC](&v78);
      std::runtime_error::runtime_error((std::runtime_error *)v53, (const std::runtime_error *)__what_arg);
      *(_OWORD *)&v53[16] = *(_OWORD *)&__what_arg[16];
      *(_QWORD *)v53 = off_1E2521330;
      v44 = (unsigned int *)v74;
      v54 = v73;
      v55 = (unsigned int *)v74;
      v56 = v75;
      if (v75)
      {
        *(_QWORD *)(v74 + 16) = &v55;
        v44 = 0;
        v73 = (unsigned int **)&v74;
        v74 = 0;
        v75 = 0;
      }
      else
      {
        v54 = &v55;
      }
      v57 = v76;
      v76 = 0uLL;
      v58 = 0;
      *(_QWORD *)__what_arg = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v73, v44);
      v40 = (std::system_error *)__what_arg;
      goto LABEL_44;
    case 5:
      v23 = *(_DWORD *)(a2 + 24);
      if ((v23 + 1) <= 1)
      {
        memset(v53, 0, 24);
LABEL_33:
        v58 = 1;
        goto LABEL_34;
      }
      if (v23 != 8)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[29]>((uint64_t)&v78, 8u, "Only Maps can be URL-Encoded");
LABEL_12:
        std::runtime_error::runtime_error((std::runtime_error *)v53, &v78);
        *(std::error_code *)&v53[16] = v78.__ec_;
        *(_QWORD *)v53 = off_1E2521330;
        v8 = (unsigned int *)v80;
        v54 = v79;
        v55 = (unsigned int *)v80;
        v56 = v81;
        if (v81)
        {
          *(_QWORD *)(v80 + 16) = &v55;
          v79 = (unsigned int **)&v80;
          v80 = 0;
          v81 = 0;
          v8 = 0;
        }
        else
        {
          v54 = &v55;
        }
        v57 = v82;
        v82 = 0uLL;
        v58 = 0;
        v78.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v79, v8);
        v40 = &v78;
LABEL_44:
        MEMORY[0x18D7898AC](v40);
        if (v58)
          goto LABEL_34;
LABEL_45:
        std::optional<AMSCore::Error>::operator=[abi:fe180100]<AMSCore::Error,void>(a1, (uint64_t)v53);
        goto LABEL_46;
      }
      v33 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v34 = MEMORY[0x1E0DE4FE0] + 64;
      v35 = MEMORY[0x1E0DE4F60];
      v36 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v37 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v86[0] = MEMORY[0x1E0DE4FE0] + 64;
      v78.__vftable = v36;
      *(std::system_error_vtbl **)((char *)&v78.__vftable + (unint64_t)v36[-1].~system_error) = v37;
      v38 = (std::ios_base *)((char *)&v78 + (unint64_t)v78.__vftable[-1].~system_error);
      std::ios_base::init(v38, &v78.__imp_);
      v38[1].__vftable = 0;
      v38[1].__fmtflags_ = -1;
      v78.__vftable = v33 + 1;
      v86[0] = v34;
      std::streambuf::basic_streambuf();
      v39 = MEMORY[0x1E0DE4FB8];
      v78.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      __p = 0u;
      v84 = 0u;
      v85 = 16;
      if (v77)
      {
        std::stringbuf::str[abi:fe180100]((uint64_t)&v78.__imp_, (std::string *)__what_arg);
        *(_OWORD *)v53 = *(_OWORD *)__what_arg;
        *(_QWORD *)&v53[15] = *(_QWORD *)&__what_arg[15];
        v53[23] = __what_arg[23];
        v58 = 1;
      }
      else
      {
        AMSCore::Error::Error((std::runtime_error *)v60, (const std::runtime_error *)__what_arg);
        std::runtime_error::runtime_error(&v66, (const std::runtime_error *)v60);
        v67 = *(_OWORD *)&v60[16];
        v51 = v62;
        v66.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v68 = v61;
        v69 = v62;
        v70 = v63;
        if (v63)
        {
          *((_QWORD *)v62 + 2) = &v69;
          v61 = &v62;
          v62 = 0;
          v63 = 0;
          v51 = 0;
        }
        else
        {
          v68 = &v69;
        }
        v71 = v64;
        v64 = 0uLL;
        *(_QWORD *)v60 = off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v61, v51);
        MEMORY[0x18D7898AC](v60);
        std::runtime_error::runtime_error((std::runtime_error *)v53, &v66);
        *(_OWORD *)&v53[16] = v67;
        *(_QWORD *)v53 = off_1E2521330;
        v52 = v69;
        v54 = v68;
        v55 = v69;
        v56 = v70;
        if (v70)
        {
          *((_QWORD *)v69 + 2) = &v55;
          v52 = 0;
          v68 = &v69;
          v69 = 0;
          v70 = 0;
        }
        else
        {
          v54 = &v55;
        }
        v57 = v71;
        v71 = 0uLL;
        v58 = 0;
        v66.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v68, v52);
        MEMORY[0x18D7898AC](&v66);
        if (!v77)
          (**(void (***)(_BYTE *))__what_arg)(__what_arg);
      }
      v78.__vftable = *(std::system_error_vtbl **)v35;
      *(std::system_error_vtbl **)((char *)&v78.__vftable + (unint64_t)v78.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v35 + 24);
      v78.__imp_.__imp_ = (const char *)(v39 + 16);
      if (SBYTE7(v84) < 0)
        operator delete((void *)__p);
LABEL_84:
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v86);
      if (!v58)
        goto LABEL_45;
LABEL_34:
      v41 = *(_QWORD *)v53;
      v87[0] = *(_QWORD *)&v53[8];
      *(_QWORD *)((char *)v87 + 7) = *(_QWORD *)&v53[15];
      v42 = v53[23];
      memset(v53, 0, 24);
      if (*(char *)(a1 + 303) < 0)
        operator delete(*(void **)(a1 + 280));
      v43 = v87[0];
      *(_QWORD *)(a1 + 280) = v41;
      *(_QWORD *)(a1 + 288) = v43;
      *(_QWORD *)(a1 + 295) = *(_QWORD *)((char *)v87 + 7);
      *(_BYTE *)(a1 + 303) = v42;
LABEL_46:
      if (v58)
      {
        if ((v53[23] & 0x80000000) != 0)
          operator delete(*(void **)v53);
      }
      else
      {
        (**(void (***)(_BYTE *))v53)(v53);
      }
      return a1;
    default:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[19],AMSCore::IData::Encoding &>((uint64_t)&v78, 4u, &v59);
      goto LABEL_12;
  }
}

void sub_18CCDE570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void (**__p)(_QWORD),uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,int a56,__int16 a57,char a58,char a59)
{
  if (a2)
  {
    if (!a55)
      (*__p)(&__p);
    std::ostringstream::~ostringstream((uint64_t)&a57);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::HTTPResponse::HTTPResponse(uint64_t result, __int128 *a2, __int16 a3, uint64_t *a4, __int128 *a5, __int128 *a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v6 = *a2;
    *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(result + 24) = 1;
  }
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v7 = a2[2];
    *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(result + 32) = v7;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(result + 56) = 1;
  }
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v8 = a2[4];
    *(_QWORD *)(result + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(result + 64) = v8;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
  *(_QWORD *)(result + 104) = result + 104;
  *(_QWORD *)(result + 112) = result + 104;
  *(_QWORD *)(result + 120) = 0;
  if ((__int128 *)result == a2)
  {
    __break(1u);
  }
  else
  {
    v9 = *((_QWORD *)a2 + 15);
    if (v9)
    {
      v11 = *((_QWORD *)a2 + 13);
      v10 = (uint64_t *)*((_QWORD *)a2 + 14);
      v12 = *v10;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
      **(_QWORD **)(v11 + 8) = v12;
      v13 = *(_QWORD *)(result + 104);
      *(_QWORD *)(v13 + 8) = v10;
      *v10 = v13;
      *(_QWORD *)(result + 104) = v11;
      *(_QWORD *)(v11 + 8) = result + 104;
      *(_QWORD *)(result + 120) = v9;
      *((_QWORD *)a2 + 15) = 0;
    }
    v14 = a2[8];
    *(_QWORD *)(result + 144) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(result + 128) = v14;
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 16) = 0;
    *(_WORD *)(result + 152) = a3;
    v15 = *a4;
    *a4 = 0;
    *(_QWORD *)(result + 160) = v15;
    *(_QWORD *)(result + 168) = a4[1];
    a4[1] = 0;
    v18 = a4[2];
    v16 = a4 + 2;
    v17 = v18;
    *(_QWORD *)(result + 176) = v18;
    v19 = v16[1];
    *(_QWORD *)(result + 184) = v19;
    *(_DWORD *)(result + 192) = *((_DWORD *)v16 + 4);
    if (v19)
    {
      v20 = *(_QWORD *)(v17 + 8);
      v21 = *(_QWORD *)(result + 168);
      if ((v21 & (v21 - 1)) != 0)
      {
        if (v20 >= v21)
          v20 %= v21;
      }
      else
      {
        v20 &= v21 - 1;
      }
      *(_QWORD *)(v15 + 8 * v20) = result + 176;
      *v16 = 0;
      v16[1] = 0;
    }
    v22 = *a5;
    *(_QWORD *)(result + 216) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(result + 200) = v22;
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(result + 224) = 0;
    *(_BYTE *)(result + 248) = 0;
    if (*((_BYTE *)a6 + 24))
    {
      v23 = *a6;
      *(_QWORD *)(result + 240) = *((_QWORD *)a6 + 2);
      *(_OWORD *)(result + 224) = v23;
      *((_QWORD *)a6 + 1) = 0;
      *((_QWORD *)a6 + 2) = 0;
      *(_QWORD *)a6 = 0;
      *(_BYTE *)(result + 248) = 1;
    }
    v24 = a6[3];
    *(_OWORD *)(result + 256) = a6[2];
    *(_OWORD *)(result + 272) = v24;
    v25 = a6[4];
    v26 = a6[5];
    v27 = a6[6];
    *(_OWORD *)(result + 329) = *(__int128 *)((char *)a6 + 105);
    *(_OWORD *)(result + 304) = v26;
    *(_OWORD *)(result + 320) = v27;
    *(_OWORD *)(result + 288) = v25;
    *(_QWORD *)(result + 360) = 0;
    *(_QWORD *)(result + 368) = 0;
    *(_QWORD *)(result + 352) = 0;
    *(_OWORD *)(result + 352) = a6[8];
    *(_QWORD *)(result + 368) = *((_QWORD *)a6 + 18);
    *((_QWORD *)a6 + 17) = 0;
    *((_QWORD *)a6 + 18) = 0;
    *((_QWORD *)a6 + 16) = 0;
    v28 = *(__int128 *)((char *)a6 + 152);
    *(_OWORD *)(result + 392) = *(__int128 *)((char *)a6 + 168);
    *(_OWORD *)(result + 376) = v28;
    v29 = *(__int128 *)((char *)a6 + 184);
    v30 = *(__int128 *)((char *)a6 + 200);
    v31 = *(__int128 *)((char *)a6 + 216);
    *(_OWORD *)(result + 456) = *(__int128 *)((char *)a6 + 232);
    *(_OWORD *)(result + 440) = v31;
    *(_OWORD *)(result + 424) = v30;
    *(_OWORD *)(result + 408) = v29;
    v32 = *(__int128 *)((char *)a6 + 248);
    v33 = *(__int128 *)((char *)a6 + 264);
    v34 = *(__int128 *)((char *)a6 + 280);
    *(_OWORD *)(result + 514) = *(__int128 *)((char *)a6 + 290);
    *(_OWORD *)(result + 488) = v33;
    *(_OWORD *)(result + 504) = v34;
    *(_OWORD *)(result + 472) = v32;
    *(_BYTE *)(result + 536) = 0;
    *(_BYTE *)(result + 560) = 0;
    if (*((_BYTE *)a6 + 336))
    {
      v35 = *(__int128 *)((char *)a6 + 312);
      *(_QWORD *)(result + 552) = *((_QWORD *)a6 + 41);
      *(_OWORD *)(result + 536) = v35;
      *((_QWORD *)a6 + 40) = 0;
      *((_QWORD *)a6 + 41) = 0;
      *((_QWORD *)a6 + 39) = 0;
      *(_BYTE *)(result + 560) = 1;
    }
    *(_BYTE *)(result + 568) = 0;
    *(_BYTE *)(result + 648) = 0;
  }
  return result;
}

void AMSCore::HTTPResponse::getDecodedObject(AMSCore::HTTPResponse *this)
{
  std::runtime_error *v1;
  uint64_t v3;
  std::string *v4;
  std::string::size_type size;
  std::system_error_vtbl *v6;
  void (__cdecl *v7)(std::system_error *__hidden);
  const char *(__cdecl *what)(const std::runtime_error *__hidden);
  void (__cdecl *v9)(std::system_error *__hidden);
  const char *(__cdecl *v10)(const std::runtime_error *__hidden);
  unint64_t v11;
  std::system_error_vtbl *v13;
  uint64_t v14;
  uint64_t v15;
  std::system_error_vtbl *v16;
  std::system_error_vtbl *v17;
  std::ios_base *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  BOOL v23;
  const char *(__cdecl *v24)(const std::runtime_error *__hidden);
  void (__cdecl *v25)(std::system_error *__hidden);
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  const std::locale *v33;
  const std::locale::facet *v34;
  const std::locale::facet *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  char *v44;
  const std::locale *v45;
  const std::locale::facet *v46;
  const std::locale::facet *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  const std::locale *v55;
  const std::locale::facet *v56;
  const std::locale::facet *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unint64_t v68;
  void (__cdecl *v69)(std::system_error *__hidden);
  void (__cdecl *v70)(std::system_error *__hidden);
  void (__cdecl *v71)(std::system_error *__hidden);
  unint64_t v72;
  unint64_t v74;
  void (__cdecl *v75)(std::system_error *__hidden);
  unint64_t v76;
  unint64_t v77;
  unint64_t v89;
  unint64_t v90;
  int v91;
  int v92;
  std::system_error_vtbl *v93;
  uint64_t v94;
  uint64_t v95;
  std::system_error_vtbl *v96;
  std::system_error_vtbl *v97;
  std::ios_base *v98;
  const char *v99;
  unsigned int *v100;
  unsigned int *v101;
  char v102;
  const char *imp;
  std::runtime_error_vtbl *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _BYTE v109[32];
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  _BYTE __what_arg[32];
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  char v119;
  std::string v120;
  char v121;
  std::system_error __p;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int v129;
  _QWORD v130[20];
  std::error_code v131;
  std::error_code v132;
  std::error_code v133;

  v1 = (std::runtime_error *)((char *)this + 568);
  if (!*((_BYTE *)this + 648))
  {
    v3 = *((unsigned __int8 *)this + 223);
    if ((v3 & 0x80u) != 0)
      v3 = *((_QWORD *)this + 26);
    if (!v3)
    {
      __p.__imp_.__imp_ = 0;
      *(_QWORD *)&__p.__ec_.__val_ = 0;
      __p.__vftable = (std::system_error_vtbl *)&__p.__imp_;
      LOBYTE(v127) = 1;
      goto LABEL_196;
    }
    *((_BYTE *)&__p.__ec_.__val_ + 7) = 12;
    strcpy((char *)&__p, "Content-Type");
    AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v120, (_QWORD *)this + 20, (char *)&__p);
    if (*((char *)&__p.__ec_.__val_ + 7) < 0)
    {
      operator delete(__p.__vftable);
      if (v121)
      {
LABEL_7:
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v4 = &v120;
        else
          v4 = (std::string *)v120.__r_.__value_.__r.__words[0];
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
        else
          size = v120.__r_.__value_.__l.__size_;
        AMSCore::StringUtils::split((char **)&__p, (uint64_t)v4, size, ";", 1, 1uLL);
        v6 = __p.__vftable;
        if (__p.__vftable == (std::system_error_vtbl *)__p.__imp_.__imp_)
        {
LABEL_162:
          v92 = 0;
LABEL_163:
          if (v6)
            operator delete(v6);
          if (v92)
          {
            AMSCore::deserialize((uint64_t)__what_arg, (uint64_t)this + 200, v92);
            if (v119)
            {
              if (*(_DWORD *)&__what_arg[24] == 8)
              {
                __p.std::runtime_error = *(std::runtime_error *)__what_arg;
                *(_QWORD *)&__p.__ec_.__val_ = *(_QWORD *)&__what_arg[16];
                if (*(_QWORD *)&__what_arg[16])
                {
                  *(_QWORD *)(*(_QWORD *)&__what_arg[8] + 16) = &__p.__imp_;
                  *(_QWORD *)__what_arg = &__what_arg[8];
                  *(_OWORD *)&__what_arg[8] = 0uLL;
                }
                else
                {
                  __p.__vftable = (std::system_error_vtbl *)&__p.__imp_;
                }
                LOBYTE(v127) = 1;
                if (!v119)
                  goto LABEL_210;
LABEL_185:
                if (*(_DWORD *)&__what_arg[24] != -1)
                  ((void (*)(_BYTE *, _BYTE *))off_1E253D240[*(unsigned int *)&__what_arg[24]])(v109, __what_arg);
LABEL_190:
                if (!v121)
                  goto LABEL_193;
LABEL_191:
                if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v120.__r_.__value_.__l.__data_);
LABEL_193:
                if (*((_BYTE *)this + 648))
                {
                  std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::operator=[abi:fe180100](v1, &__p);
                  if (!(_BYTE)v127)
                  {
LABEL_195:
                    ((void (*)(std::system_error *))__p.~system_error)(&__p);
                    goto LABEL_206;
                  }
LABEL_205:
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&__p, (unsigned int *)__p.__imp_.__imp_);
LABEL_206:
                  if (!*((_BYTE *)this + 648))
                    __break(1u);
                  return;
                }
LABEL_196:
                v102 = v127;
                if ((_BYTE)v127)
                {
                  imp = __p.__imp_.__imp_;
                  *((_QWORD *)this + 71) = __p.__vftable;
                  v104 = (std::runtime_error_vtbl *)((char *)this + 576);
                  *((_QWORD *)this + 72) = imp;
                  v105 = *(_QWORD *)&__p.__ec_.__val_;
                  *((_QWORD *)this + 73) = *(_QWORD *)&__p.__ec_.__val_;
                  if (v105)
                  {
                    *((_QWORD *)imp + 2) = v104;
                    __p.__vftable = (std::system_error_vtbl *)&__p.__imp_;
                    __p.__imp_.__imp_ = 0;
                    *(_QWORD *)&__p.__ec_.__val_ = 0;
                  }
                  else
                  {
                    v1->__vftable = v104;
                  }
                }
                else
                {
                  std::runtime_error::runtime_error(v1, &__p);
                  *(std::error_code *)((char *)this + 584) = __p.__ec_;
                  *((_QWORD *)this + 71) = off_1E2521330;
                  v106 = v124;
                  *((_QWORD *)this + 75) = v123;
                  v107 = (char *)this + 608;
                  *((_QWORD *)this + 76) = v106;
                  v108 = v125;
                  *((_QWORD *)this + 77) = v125;
                  if (v108)
                  {
                    *(_QWORD *)(v106 + 16) = v107;
                    v123 = &v124;
                    v124 = 0;
                    v125 = 0;
                  }
                  else
                  {
                    *((_QWORD *)this + 75) = v107;
                  }
                  *((_OWORD *)this + 39) = v126;
                  v126 = 0uLL;
                }
                *((_BYTE *)this + 640) = v102;
                *((_BYTE *)this + 648) = 1;
                if (!(_BYTE)v127)
                  goto LABEL_195;
                goto LABEL_205;
              }
              AMSCore::StringUtils::join<char [29]>((std::string *)v109, "Body was not of AnyMap type.");
              v133.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
              *(_QWORD *)&v133.__val_ = 303;
              std::system_error::system_error(&__p, v133, (const std::string *)v109);
            }
            else
            {
              v93 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
              v94 = MEMORY[0x1E0DE4FE0] + 64;
              v95 = MEMORY[0x1E0DE4F60];
              v96 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
              v97 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
              v130[0] = MEMORY[0x1E0DE4FE0] + 64;
              __p.__vftable = v96;
              *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v96[-1].~system_error) = v97;
              v98 = (std::ios_base *)((char *)&__p + (unint64_t)__p.__vftable[-1].~system_error);
              std::ios_base::init(v98, &__p.__imp_);
              v98[1].__vftable = 0;
              v98[1].__fmtflags_ = -1;
              __p.__vftable = v93 + 1;
              v130[0] = v94;
              std::streambuf::basic_streambuf();
              v99 = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
              __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
              v127 = 0u;
              v128 = 0u;
              v129 = 16;
              AMSCore::operator<<(&__p, (uint64_t)__what_arg);
              std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, (std::string *)v109);
              __p.__vftable = *(std::system_error_vtbl **)v95;
              *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v95 + 24);
              __p.__imp_.__imp_ = v99;
              if (SBYTE7(v128) < 0)
                operator delete((void *)v127);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x18D789B58](v130);
              v132.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
              *(_QWORD *)&v132.__val_ = 311;
              std::system_error::system_error(&__p, v132, (const std::string *)v109);
            }
            if ((v109[23] & 0x80000000) != 0)
              operator delete(*(void **)v109);
            v124 = 0;
            v125 = 0;
            __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
            v123 = &v124;
            v126 = 0uLL;
            std::runtime_error::runtime_error((std::runtime_error *)v109, &__p);
            *(std::error_code *)&v109[16] = __p.__ec_;
            *(_QWORD *)v109 = off_1E2521330;
            v100 = (unsigned int *)v124;
            v110 = v123;
            v111 = v124;
            v112 = v125;
            if (v125)
            {
              *(_QWORD *)(v124 + 16) = &v111;
              v100 = 0;
              v123 = &v124;
              v124 = 0;
              v125 = 0;
            }
            else
            {
              v110 = &v111;
            }
            v113 = v126;
            v126 = 0uLL;
            __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v123, v100);
            MEMORY[0x18D7898AC](&__p);
            std::runtime_error::runtime_error(&__p, (const std::runtime_error *)v109);
            __p.__ec_ = *(std::error_code *)&v109[16];
            v101 = (unsigned int *)v111;
            __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
            v123 = v110;
            v124 = v111;
            v125 = v112;
            if (v112)
            {
              *(_QWORD *)(v111 + 16) = &v124;
              v101 = 0;
              v110 = &v111;
              v111 = 0;
              v112 = 0;
            }
            else
            {
              v123 = &v124;
            }
            v126 = v113;
            v113 = 0uLL;
            LOBYTE(v127) = 0;
            *(_QWORD *)v109 = off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v110, v101);
            MEMORY[0x18D7898AC](v109);
            if (!v119)
            {
LABEL_210:
              (**(void (***)(_BYTE *))__what_arg)(__what_arg);
              if (!v121)
                goto LABEL_193;
              goto LABEL_191;
            }
            goto LABEL_185;
          }
          AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[46]>((uint64_t)__what_arg, 0x12Eu, "The Content-Type of the response was unknown.");
          std::runtime_error::runtime_error(&__p, (const std::runtime_error *)__what_arg);
          __p.__ec_ = *(std::error_code *)&__what_arg[16];
          v21 = (unsigned int *)v116;
          __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
          v123 = v115;
          v124 = v116;
          v125 = v117;
          if (v117)
          {
            *(_QWORD *)(v116 + 16) = &v124;
            v115 = &v116;
            v116 = 0;
            v117 = 0;
            v21 = 0;
          }
          else
          {
            v123 = &v124;
          }
          v126 = v118;
          v118 = 0uLL;
          LOBYTE(v127) = 0;
          *(_QWORD *)__what_arg = off_1E2521330;
LABEL_189:
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v21);
          MEMORY[0x18D7898AC](__what_arg);
          goto LABEL_190;
        }
        if ((const char *)(__p.__imp_.__imp_ - (const char *)__p.__vftable) < (const char *)0x11)
          goto LABEL_87;
        v7 = __p.__vftable[1].~system_error;
        if (v7)
        {
          what = __p.what;
          v9 = __p.__vftable[1].~system_error;
          v10 = what;
          while (1)
          {
            v11 = *(unsigned __int8 *)v10;
            if (v11 > 0x3F || ((1 << v11) & 0x100003E00) == 0)
              break;
            v10 = (const char *(__cdecl *)(const std::runtime_error *__hidden))((char *)v10 + 1);
            v9 = (void (__cdecl *)(std::system_error *__hidden))((char *)v9 - 1);
            if (!v9)
              goto LABEL_40;
          }
          v22 = (char *)v10 - (char *)what;
          if ((char *)v10 - (char *)what != -1)
          {
            v23 = (unint64_t)v7 >= v22;
            v7 = (void (__cdecl *)(std::system_error *__hidden))((char *)v7 - v22);
            if (!v23)
              goto LABEL_222;
            v24 = v10;
            goto LABEL_42;
          }
LABEL_40:
          v7 = 0;
        }
        v24 = 0;
LABEL_42:
        v25 = v7;
        do
        {
          if (!v25)
          {
            v28 = 0;
            v29 = 0;
            goto LABEL_58;
          }
          v26 = *((unsigned __int8 *)v25 + (_QWORD)v24 - 1);
          v25 = (void (__cdecl *)(std::system_error *__hidden))((char *)v25 - 1);
        }
        while (v26 <= 0x3F && ((1 << v26) & 0x100003E00) != 0);
        if ((unint64_t)v7 >= (unint64_t)v25 + 1)
          v7 = (void (__cdecl *)(std::system_error *__hidden))((char *)v25 + 1);
        if (v25 == (void (__cdecl *)(std::system_error *__hidden))-1)
          v28 = 0;
        else
          v28 = (unint64_t)v7;
        if (v25 == (void (__cdecl *)(std::system_error *__hidden))-1)
          v29 = 0;
        else
          v29 = (uint64_t)v24;
LABEL_58:
        AMSCore::StringUtils::split((char **)__what_arg, v29, v28, "=", 1, 1uLL);
        v30 = *(uint64_t **)__what_arg;
        if (*(_QWORD *)&__what_arg[8] - *(_QWORD *)__what_arg == 32)
        {
          v32 = **(char ***)__what_arg;
          v31 = *(_QWORD *)(*(_QWORD *)__what_arg + 8);
          v33 = std::locale::classic();
          v34 = std::locale::use_facet(v33, MEMORY[0x1E0DE4A90]);
          if (v31 == 7)
          {
            v35 = v34;
            v36 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v34->__vftable[1].__on_zero_shared)(v34, *v32);
            if (v36 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v35->__vftable[1].__on_zero_shared)(v35, 99))
            {
              v37 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v35->__vftable[1].__on_zero_shared)(v35, v32[1]);
              if (v37 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v35->__vftable[1].__on_zero_shared)(v35, 104))
              {
                v38 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v35->__vftable[1].__on_zero_shared)(v35, v32[2]);
                if (v38 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v35->__vftable[1].__on_zero_shared)(v35, 97))
                {
                  v39 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v35->__vftable[1].__on_zero_shared)(v35, v32[3]);
                  if (v39 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v35->__vftable[1].__on_zero_shared)(v35, 114))
                  {
                    v40 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v35->__vftable[1].__on_zero_shared)(v35, v32[4]);
                    if (v40 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v35->__vftable[1].__on_zero_shared)(v35, 115))
                    {
                      v41 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v35->__vftable[1].__on_zero_shared)(v35, v32[5]);
                      if (v41 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v35->__vftable[1].__on_zero_shared)(v35, 101))
                      {
                        v42 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v35->__vftable[1].__on_zero_shared)(v35, v32[6]);
                        if (v42 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v35->__vftable[1].__on_zero_shared)(v35, 116))
                        {
                          v44 = (char *)v30[2];
                          v43 = v30[3];
                          v45 = std::locale::classic();
                          v46 = std::locale::use_facet(v45, MEMORY[0x1E0DE4A90]);
                          if (v43 != 5
                            || (v47 = v46,
                                v48 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v46->__vftable[1].__on_zero_shared)(v46, *v44), v48 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v47->__vftable[1].__on_zero_shared)(v47, 85))|| (v49 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v47->__vftable[1].__on_zero_shared)(v47, v44[1]), v49 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v47->__vftable[1].__on_zero_shared)(v47, 84))|| (v50 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v47->__vftable[1].__on_zero_shared)(v47, v44[2]), v50 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v47->__vftable[1].__on_zero_shared)(v47, 70))|| (v51 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v47->__vftable[1].__on_zero_shared)(v47,
                                        v44[3]),
                                v51 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v47->__vftable[1].__on_zero_shared)(v47, 45))|| (v52 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v47->__vftable[1].__on_zero_shared)(v47, v44[4]), v52 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v47->__vftable[1].__on_zero_shared)(v47, 56)))
                          {
                            v54 = (char *)v30[2];
                            v53 = v30[3];
                            v55 = std::locale::classic();
                            v56 = std::locale::use_facet(v55, MEMORY[0x1E0DE4A90]);
                            if (v53 != 10)
                              goto LABEL_84;
                            v57 = v56;
                            v58 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v56->__vftable[1].__on_zero_shared)(v56, *v54);
                            if (v58 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 105))goto LABEL_84;
                            v59 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57, v54[1]);
                            if (v59 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 115))goto LABEL_84;
                            v60 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57, v54[2]);
                            if (v60 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 111)|| (v61 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57, v54[3]), v61 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 45))|| (v62 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57, v54[4]), v62 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 56))|| (v63 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57, v54[5]), v63 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57,
                                           56))
                              || (v64 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57, v54[6]), v64 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 53))|| (v65 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57, v54[7]), v65 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 57))|| (v66 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57, v54[8]), v66 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 45))|| (v67 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v57->__vftable[1].__on_zero_shared)(v57,
                                          v54[9]),
                                  v67 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v57->__vftable[1].__on_zero_shared)(v57, 49)))
                            {
LABEL_84:
                              AMSCore::Log::error<char const(&)[21],std::string_view &>(v30 + 2);
                              operator delete(v30);
                              goto LABEL_162;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else if (!*(_QWORD *)__what_arg)
        {
          goto LABEL_87;
        }
        operator delete(v30);
LABEL_87:
        v68 = (unint64_t)v6->~system_error_0;
        if (v68)
        {
          v69 = v6->~system_error;
          v70 = v6->~system_error_0;
          v71 = v6->~system_error;
          while (1)
          {
            v72 = *(unsigned __int8 *)v71;
            if (v72 > 0x3F || ((1 << v72) & 0x100003E00) == 0)
              break;
            v71 = (void (__cdecl *)(std::system_error *__hidden))((char *)v71 + 1);
            v70 = (void (__cdecl *)(std::system_error *__hidden))((char *)v70 - 1);
            if (!v70)
              goto LABEL_99;
          }
          v74 = (char *)v71 - (char *)v69;
          if ((char *)v71 - (char *)v69 != -1)
          {
            v23 = v68 >= v74;
            v68 -= v74;
            if (!v23)
LABEL_222:
              std::__throw_out_of_range[abi:fe180100]("string_view::substr");
            v75 = v71;
            goto LABEL_101;
          }
LABEL_99:
          v68 = 0;
        }
        v75 = 0;
LABEL_101:
        v76 = v68;
        while (v76)
        {
          v77 = *((unsigned __int8 *)v75 + --v76);
          if (v77 > 0x3F || ((1 << v77) & 0x100003E00) == 0)
          {
            if (v76 == -1)
              goto LABEL_162;
            if (v68 >= v76 + 1)
              v68 = v76 + 1;
            switch(v68)
            {
              case 8uLL:
                if (*(_QWORD *)v75 == 0x6C6D782F74786574)
                  goto LABEL_213;
                v68 = 8;
                goto LABEL_152;
              case 0x10uLL:
                if (*(_QWORD *)v75 == 0x746163696C707061 && *((_QWORD *)v75 + 1) == 0x6E6F736A2F6E6F69)
                {
                  v92 = 1;
                }
                else
                {
                  if (*(_QWORD *)v75 != 0x746163696C707061 || *((_QWORD *)v75 + 1) != 0x617461642F6E6F69)
                  {
                    v68 = 16;
                    goto LABEL_152;
                  }
LABEL_220:
                  v92 = 3;
                }
                goto LABEL_163;
              case 0x11uLL:
                if (*(_QWORD *)v75 == 0x746163696C707061
                  && *((_QWORD *)v75 + 1) == 0x73696C702F6E6F69
                  && *((_BYTE *)v75 + 16) == 116)
                {
                  goto LABEL_213;
                }
                v68 = 17;
                goto LABEL_152;
              case 0x18uLL:
                if (*(_QWORD *)v75 == 0x746163696C707061
                  && *((_QWORD *)v75 + 1) == 0x6574636F2F6E6F69
                  && *((_QWORD *)v75 + 2) == 0x6D61657274732D74)
                {
                  goto LABEL_220;
                }
                v68 = 24;
                goto LABEL_152;
              case 0x19uLL:
                if (*(_QWORD *)v75 == 0x746163696C707061
                  && *((_QWORD *)v75 + 1) == 0x70612D782F6E6F69
                  && *((_QWORD *)v75 + 2) == 0x73696C702D656C70
                  && *((_BYTE *)v75 + 24) == 116)
                {
LABEL_213:
                  v92 = 2;
                }
                else
                {
                  v68 = 25;
LABEL_152:
                  if (*(_DWORD *)v75 == 1954047348 && *((_BYTE *)v75 + 4) == 47)
                  {
                    v92 = 4;
                  }
                  else
                  {
                    if (v68 != 33)
                      goto LABEL_162;
                    v89 = 0x6170706C69636174;
                    v90 = bswap64(*(_QWORD *)v75);
                    if (v90 == 0x6170706C69636174
                      && (v89 = 0x696F6E2F782D7777, v90 = bswap64(*((_QWORD *)v75 + 1)), v90 == 0x696F6E2F782D7777)
                      && (v89 = 0x772D666F726D2D75, v90 = bswap64(*((_QWORD *)v75 + 2)), v90 == 0x772D666F726D2D75)
                      && (v89 = 0x726C656E636F6465, v90 = bswap64(*((_QWORD *)v75 + 3)), v90 == 0x726C656E636F6465))
                    {
                      v91 = *((unsigned __int8 *)v75 + 32) - 100;
                    }
                    else if (v90 < v89)
                    {
                      v91 = -1;
                    }
                    else
                    {
                      v91 = 1;
                    }
                    if (v91)
                      v92 = 0;
                    else
                      v92 = 5;
                  }
                }
                break;
              default:
                if (v68 < 5)
                  goto LABEL_162;
                goto LABEL_152;
            }
            goto LABEL_163;
          }
        }
        goto LABEL_162;
      }
    }
    else if (v121)
    {
      goto LABEL_7;
    }
    v13 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v14 = MEMORY[0x1E0DE4FE0] + 64;
    v15 = MEMORY[0x1E0DE4F60];
    v16 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v17 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v130[0] = MEMORY[0x1E0DE4FE0] + 64;
    __p.__vftable = v16;
    *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v16[-1].~system_error) = v17;
    v18 = (std::ios_base *)((char *)&__p + (unint64_t)__p.__vftable[-1].~system_error);
    std::ios_base::init(v18, &__p.__imp_);
    v18[1].__vftable = 0;
    v18[1].__fmtflags_ = -1;
    __p.__vftable = v13 + 1;
    v130[0] = v14;
    std::streambuf::basic_streambuf();
    v19 = MEMORY[0x1E0DE4FB8];
    __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    v127 = 0u;
    v128 = 0u;
    v129 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The response did not include a Content-Type.", 44);
    std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, (std::string *)__what_arg);
    __p.__vftable = *(std::system_error_vtbl **)v15;
    *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v15 + 24);
    __p.__imp_.__imp_ = (const char *)(v19 + 16);
    if (SBYTE7(v128) < 0)
      operator delete((void *)v127);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v130);
    v131.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
    *(_QWORD *)&v131.__val_ = 302;
    std::system_error::system_error(&__p, v131, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    v124 = 0;
    v125 = 0;
    __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v123 = &v124;
    v126 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &__p);
    *(std::error_code *)&__what_arg[16] = __p.__ec_;
    *(_QWORD *)__what_arg = off_1E2521330;
    v20 = (unsigned int *)v124;
    v115 = v123;
    v116 = v124;
    v117 = v125;
    if (v125)
    {
      *(_QWORD *)(v124 + 16) = &v116;
      v20 = 0;
      v123 = &v124;
      v124 = 0;
      v125 = 0;
    }
    else
    {
      v115 = &v116;
    }
    v118 = v126;
    v126 = 0uLL;
    __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v123, v20);
    MEMORY[0x18D7898AC](&__p);
    std::runtime_error::runtime_error(&__p, (const std::runtime_error *)__what_arg);
    __p.__ec_ = *(std::error_code *)&__what_arg[16];
    v21 = (unsigned int *)v116;
    __p.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v123 = v115;
    v124 = v116;
    v125 = v117;
    if (v117)
    {
      *(_QWORD *)(v116 + 16) = &v124;
      v21 = 0;
      v115 = &v116;
      v116 = 0;
      v117 = 0;
    }
    else
    {
      v123 = &v124;
    }
    v126 = v118;
    v118 = 0uLL;
    LOBYTE(v127) = 0;
    *(_QWORD *)__what_arg = off_1E2521330;
    goto LABEL_189;
  }
}

void sub_18CCDFA70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

std::string *AMSCore::HTTPTransactionMetrics::HTTPTransactionMetrics(std::string *this, const AMSCore::HTTPTransactionMetrics *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *(_OWORD *)a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  v5 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 6);
  v8 = *(_OWORD *)((char *)a2 + 105);
  v9 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 3);
  this[5].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v9;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v10;
  *(_OWORD *)((char *)&this[4].__r_.__value_.__r.__words[1] + 1) = v8;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v6;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v7;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v5;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(&this[5].__r_.__value_.__l.__size_, *((_QWORD *)a2 + 16), *((_QWORD *)a2 + 17), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3));
  v11 = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v11;
  v12 = *(_OWORD *)((char *)a2 + 184);
  v13 = *(_OWORD *)((char *)a2 + 200);
  v14 = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = *(_OWORD *)((char *)a2 + 232);
  *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = v14;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v13;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = v12;
  v15 = *(_OWORD *)((char *)a2 + 248);
  v16 = *(_OWORD *)((char *)a2 + 264);
  v17 = *(_OWORD *)((char *)a2 + 280);
  *(_OWORD *)&this[12].__r_.__value_.__s.__data_[2] = *(_OWORD *)((char *)a2 + 290);
  *(_OWORD *)&this[11].__r_.__value_.__l.__data_ = v16;
  *(_OWORD *)&this[11].__r_.__value_.__r.__words[2] = v17;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = v15;
  this[13].__r_.__value_.__s.__data_[0] = 0;
  this[14].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 336))
  {
    if (*((char *)a2 + 335) < 0)
    {
      std::string::__init_copy_ctor_external(this + 13, *((const std::string::value_type **)a2 + 39), *((_QWORD *)a2 + 40));
    }
    else
    {
      v18 = *(_OWORD *)((char *)a2 + 312);
      this[13].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 41);
      *(_OWORD *)&this[13].__r_.__value_.__l.__data_ = v18;
    }
    this[14].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_18CCDFC44(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(_BYTE *)(v1 + 336) && *(char *)(v1 + 335) < 0)
    operator delete(*v3);
  std::vector<std::string>::~vector[abi:fe180100](v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string __what_arg;
  std::error_code v14;

  v3 = a2;
  AMSCore::StringUtils::join<char [32]>(&__what_arg, "Cache-Control header is missing");
  *(_QWORD *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v9 = &v10;
  v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v4 = v10;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = a1 + 40;
  v6 = v11;
  *(_QWORD *)(a1 + 48) = v11;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    v4 = 0;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x18D7898AC](&v8);
}

void sub_18CCDFD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep AMSCore::HTTPResponse::getCacheControlTimePoint(AMSCore::HTTPResponse *this)
{
  std::chrono::system_clock::time_point v2;
  _QWORD v4[9];
  char v5;

  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  AMSCore::HTTPResponse::getCacheControlTimePointIfDefined((uint64_t)v4, (uint64_t)this, v2.__d_.__rep_, 1);
  if (v5)
    return v4[0];
  (*(void (**)(_QWORD *))v4[0])(v4);
  return v2.__d_.__rep_;
}

void AMSCore::HTTPResponse::getCacheControlTimePointIfDefined(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  std::runtime_error_vtbl *p_p;
  const char *imp;
  const std::locale *v14;
  const std::locale::facet *v15;
  const std::locale::facet *v16;
  const char *v17;
  char *v18;
  std::runtime_error_vtbl *v19;
  const char *v20;
  char v21;
  int v22;
  std::locale::id *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v29;
  __int128 v30;
  BOOL v31;
  char *v32;
  unsigned int *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  int v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  const std::locale *v53;
  const std::locale::facet *v54;
  const std::locale::facet *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  const std::locale *v64;
  const std::locale::facet *v65;
  const std::locale::facet *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unint64_t v74;
  std::ios_base *v75;
  unsigned int *v76;
  unsigned int *v77;
  const char *v78;
  char *v79;
  char *v80;
  int v81;
  std::system_error_vtbl *v82;
  unsigned int *v83;
  unsigned int *v84;
  std::runtime_error_vtbl *v85;
  uint64_t v86;
  std::ios_base *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  int v94;
  uint64_t *v95;
  const char *v96;
  std::runtime_error *v97;
  const char *v98;
  const std::locale *v99;
  const std::locale::facet *v100;
  const std::locale::facet *v101;
  const char *v102;
  std::runtime_error *v103;
  const char *v104;
  char v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  _QWORD *v114;
  const char *v115;
  uint64_t v116;
  std::runtime_error_vtbl *v117;
  std::runtime_error_vtbl *v118;
  std::runtime_error_vtbl *v119;
  std::runtime_error_vtbl *v120;
  uint64_t *v121;
  uint64_t *v122;
  char *v123;
  void *v124;
  std::runtime_error v125;
  std::error_code v126;
  uint64_t *v127;
  _QWORD v128[2];
  __int128 v129;
  char v130;
  std::runtime_error v131;
  std::error_code ec;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  char v137;
  _BYTE __what_arg[32];
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  std::system_error v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  char v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  std::system_error v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  std::string v158;
  std::runtime_error __p;
  std::error_code v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  int v167;
  _QWORD v168[21];
  std::error_code v169;
  std::error_code v170;

  *((_BYTE *)&v160.__val_ + 7) = 13;
  strcpy((char *)&__p, "Cache-Control");
  v114 = (_QWORD *)(a2 + 160);
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a2 + 160), (char *)&__p);
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    do
    {
      v6 = (uint64_t *)*v6;
      if (!v6)
        break;
      v121 = v6;
      v7 = (char *)(v6 + 2);
      v8 = (char *)v6[2];
      v9 = v7[23];
      if (v9 >= 0)
        v10 = v7;
      else
        v10 = v8;
      if (v9 >= 0)
        v11 = v7[23];
      else
        v11 = *((_QWORD *)v7 + 1);
      if (*((char *)&v160.__val_ + 7) >= 0)
        p_p = (std::runtime_error_vtbl *)&__p;
      else
        p_p = __p.__vftable;
      if (*((char *)&v160.__val_ + 7) >= 0)
        imp = (const char *)*((unsigned __int8 *)&v160.__val_ + 7);
      else
        imp = __p.__imp_.__imp_;
      v14 = std::locale::classic();
      v15 = std::locale::use_facet(v14, MEMORY[0x1E0DE4A90]);
      if ((const char *)v11 != imp)
        goto LABEL_26;
      if (v11)
      {
        v16 = v15;
        v17 = (const char *)(v11 - 1);
        v18 = v10;
        v19 = p_p;
        while (1)
        {
          v20 = v17;
          v21 = (char)v19->~runtime_error;
          v22 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v16->__vftable[1].__on_zero_shared)(v16, *v18);
          if (v22 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v16->__vftable[1].__on_zero_shared)(v16, v21))break;
          ++v18;
          v19 = (std::runtime_error_vtbl *)((char *)v19 + 1);
          v17 = v20 - 1;
          if (!v20)
            goto LABEL_23;
        }
LABEL_26:
        v6 = v121;
        break;
      }
      v19 = p_p;
      v18 = v10;
LABEL_23:
      if (v18 != &v10[v11])
        goto LABEL_26;
      v6 = v121;
    }
    while (v19 == (std::runtime_error_vtbl *)((char *)p_p + v11));
  }
  else
  {
    v6 = 0;
  }
  v122 = v6;
  if (*((char *)&v160.__val_ + 7) < 0)
  {
    operator delete(__p.__vftable);
    if (v122 == v5)
      goto LABEL_145;
  }
  else if (v6 == v5)
  {
LABEL_145:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32]>((uint64_t)&__p, 0xCu);
    std::runtime_error::runtime_error(&v125, &__p);
    v126 = v160;
    v125.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v90 = (unsigned int *)v162;
    v127 = v161;
    v128[0] = v162;
    v128[1] = v163;
    if (v163)
    {
      *(_QWORD *)(v162 + 16) = v128;
      v161 = &v162;
      v162 = 0;
      v163 = 0;
      v90 = 0;
    }
    else
    {
      v127 = v128;
    }
    v129 = v164;
    v130 = 0;
    v164 = 0uLL;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v90);
    MEMORY[0x18D7898AC](&__p);
    if (!v130)
      ((void (*)(AMSCore::Error *))v125.~runtime_error)((AMSCore::Error *)&v125);
    goto LABEL_150;
  }
  v120 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v118 = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F60];
  v119 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v117 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
  v116 = MEMORY[0x1E0DE4FE0] + 64;
  v115 = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  v23 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    if (*((char *)v5 + 63) < 0)
    {
      v24 = v5[5];
      v25 = v5[6];
    }
    else
    {
      v24 = (uint64_t)(v5 + 5);
      v25 = *((unsigned __int8 *)v5 + 63);
    }
    AMSCore::StringUtils::split(&v151, v24, v25, ",", 1, 0xFFFFFFFFFFFFFFFFLL);
    v26 = v152;
    v27 = v152 - 16;
    v123 = v151;
    if (v151 != v152 && v27 > v151)
    {
      v29 = v151 + 16;
      do
      {
        v30 = *((_OWORD *)v29 - 1);
        *((_OWORD *)v29 - 1) = *(_OWORD *)v27;
        *(_OWORD *)v27 = v30;
        v27 -= 16;
        v31 = v29 >= v27;
        v29 += 16;
      }
      while (!v31);
    }
    v32 = v123;
    if (v123 == v26)
    {
LABEL_45:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32]>((uint64_t)&__p, 0xCu);
      std::runtime_error::runtime_error(&v131, &__p);
      ec = v160;
      v33 = (unsigned int *)v162;
      v131.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v133 = v161;
      v134 = v162;
      v135 = v163;
      if (v163)
      {
        *(_QWORD *)(v162 + 16) = &v134;
        v33 = 0;
        v161 = &v162;
        v162 = 0;
        v163 = 0;
      }
      else
      {
        v133 = &v134;
      }
      v136 = v164;
      v164 = 0uLL;
      v137 = 0;
      __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v33);
      MEMORY[0x18D7898AC](&__p);
    }
    else
    {
      while (1)
      {
        v34 = *((_QWORD *)v32 + 1);
        if (v34)
        {
          v35 = *(unsigned __int8 **)v32;
          v36 = *((_QWORD *)v32 + 1);
          v37 = *(unsigned __int8 **)v32;
          while (1)
          {
            v38 = *v37;
            if (v38 != 32 && v38 != 9)
              break;
            ++v37;
            if (!--v36)
              goto LABEL_56;
          }
          v74 = v37 - v35;
          if (v74 == -1)
          {
LABEL_56:
            v34 = 0;
            goto LABEL_57;
          }
          v31 = v34 >= v74;
          v34 -= v74;
          if (!v31)
            std::__throw_out_of_range[abi:fe180100]("string_view::substr");
          v40 = &v35[v74];
        }
        else
        {
LABEL_57:
          v40 = 0;
        }
        v41 = v40 - 1;
        v42 = v34;
        if (v34)
        {
          while (1)
          {
            v43 = &v41[v42];
            v44 = v41[v42];
            if (v44 != 32 && v44 != 9)
              break;
            if (!--v42)
              goto LABEL_65;
          }
          v48 = v43 - v40;
          if (v34 >= v43 - v40 + 1)
            v34 = v48 + 1;
          v46 = v48 == -1 ? 0 : v34;
          v47 = v48 == -1 ? 0 : (uint64_t)v40;
        }
        else
        {
LABEL_65:
          v46 = 0;
          v47 = 0;
        }
        AMSCore::StringUtils::split(&v149, v47, v46, "=", 1, 0xFFFFFFFFFFFFFFFFLL);
        v49 = v149;
        v50 = v150 - v149;
        if (v150 == v149 || v50 >= 0x21)
          break;
        v51 = *(char **)v149;
        v52 = *((_QWORD *)v149 + 1);
        v53 = std::locale::classic();
        v54 = std::locale::use_facet(v53, v23);
        if (v52 == 8)
        {
          v55 = v54;
          v56 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v54->__vftable[1].__on_zero_shared)(v54, *v51);
          if (v56 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 110))
          {
            v57 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v55->__vftable[1].__on_zero_shared)(v55, v51[1]);
            if (v57 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 111))
            {
              v58 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v55->__vftable[1].__on_zero_shared)(v55, v51[2]);
              if (v58 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 45))
              {
                v59 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v55->__vftable[1].__on_zero_shared)(v55, v51[3]);
                if (v59 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 99))
                {
                  v60 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v55->__vftable[1].__on_zero_shared)(v55, v51[4]);
                  if (v60 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 97))
                  {
                    v61 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v55->__vftable[1].__on_zero_shared)(v55, v51[5]);
                    if (v61 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 99))
                    {
                      v62 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v55->__vftable[1].__on_zero_shared)(v55, v51[6]);
                      if (v62 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 104))
                      {
                        v63 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v55->__vftable[1].__on_zero_shared)(v55, v51[7]);
                        if (v63 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 101))
                        {
                          v131.__vftable = 0;
                          goto LABEL_132;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v64 = std::locale::classic();
        v65 = std::locale::use_facet(v64, v23);
        if (v52 == 7)
        {
          v66 = v65;
          v67 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v65->__vftable[1].__on_zero_shared)(v65, *v51);
          if (v67 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 109))
          {
            v68 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v66->__vftable[1].__on_zero_shared)(v66, v51[1]);
            if (v68 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 97))
            {
              v69 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v66->__vftable[1].__on_zero_shared)(v66, v51[2]);
              if (v69 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 120))
              {
                v70 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v66->__vftable[1].__on_zero_shared)(v66, v51[3]);
                if (v70 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 45))
                {
                  v71 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v66->__vftable[1].__on_zero_shared)(v66, v51[4]);
                  if (v71 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 97))
                  {
                    v72 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v66->__vftable[1].__on_zero_shared)(v66, v51[5]);
                    if (v72 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 103))
                    {
                      v73 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v66->__vftable[1].__on_zero_shared)(v66, v51[6]);
                      if (v73 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 101))
                      {
                        if (v50 == 32)
                        {
                          v78 = (const char *)*((_QWORD *)v49 + 3);
                          v153.__vftable = (std::system_error_vtbl *)*((_QWORD *)v49 + 2);
                          v153.__imp_.__imp_ = v78;
                          *(_QWORD *)__what_arg = 0;
                          v79 = (char *)v153.__vftable + (unint64_t)v78;
                          v80 = std::__from_chars_integral[abi:fe180100]<unsigned long long,0>(v153.__vftable, (_BYTE *)v153.__vftable + (unint64_t)v78, __what_arg);
                          if (v81 || v79 != v80)
                          {
                            AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[42],std::string_view &>((uint64_t)&__p, 3u, "Failed to parse value as number. value = ", (uint64_t *)&v153);
                            std::runtime_error::runtime_error(&v143, &__p);
                            v143.__ec_ = v160;
                            v84 = (unsigned int *)v162;
                            v143.__vftable = (std::system_error_vtbl *)off_1E2521330;
                            v144 = v161;
                            v145 = v162;
                            v146 = v163;
                            if (v163)
                            {
                              *(_QWORD *)(v162 + 16) = &v145;
                              v84 = 0;
                              v161 = &v162;
                              v162 = 0;
                              v163 = 0;
                            }
                            else
                            {
                              v144 = &v145;
                            }
                            v147 = v164;
                            v164 = 0uLL;
                            v148 = 0;
                            __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v84);
                            MEMORY[0x18D7898AC](&__p);
                            if (v148)
                            {
                              v82 = v143.__vftable;
                              goto LABEL_131;
                            }
                            v85 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
                            v86 = MEMORY[0x1E0DE4FE0] + 64;
                            v168[0] = MEMORY[0x1E0DE4FE0] + 64;
                            __p.__vftable = v120;
                            *(std::runtime_error_vtbl **)((char *)&__p.__vftable
                                                        + (unint64_t)v120[-1].~runtime_error) = v119;
                            v87 = (std::ios_base *)((char *)&__p + (unint64_t)__p.__vftable[-1].~runtime_error);
                            std::ios_base::init(v87, &__p.__imp_);
                            v87[1].__vftable = 0;
                            v87[1].__fmtflags_ = -1;
                            __p.__vftable = v85 + 1;
                            v168[0] = v86;
                            std::streambuf::basic_streambuf();
                            __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
                            v165 = 0u;
                            v166 = 0u;
                            v167 = 16;
                            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to parse Cache-Control max-age. Value: \"", 47);
                            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, *((_QWORD *)v49 + 2), *((_QWORD *)v49 + 3));
                            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"\"", 1);
                            std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, &v158);
                            __p.__vftable = v118;
                            *(std::runtime_error_vtbl **)((char *)&__p.__vftable
                                                        + (unint64_t)v118[-1].~runtime_error) = v117;
                            __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
                            if (SBYTE7(v166) < 0)
                              operator delete((void *)v165);
                            std::streambuf::~streambuf();
                            std::ostream::~ostream();
                            MEMORY[0x18D789B58](v168);
                            *(_QWORD *)&v170.__val_ = 3;
                            v170.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
                            std::system_error::system_error(&v153, v170, &v158);
                            if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v158.__r_.__value_.__l.__data_);
                            v155 = 0;
                            v156 = 0;
                            v153.__vftable = (std::system_error_vtbl *)off_1E2521330;
                            v154 = &v155;
                            v157 = 0uLL;
                            std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v153);
                            *(std::error_code *)&__what_arg[16] = v153.__ec_;
                            v88 = (unsigned int *)v155;
                            *(_QWORD *)__what_arg = off_1E2521330;
                            v139 = v154;
                            v140 = v155;
                            v141 = v156;
                            if (v156)
                            {
                              *(_QWORD *)(v155 + 16) = &v140;
                              v88 = 0;
                              v154 = &v155;
                              v155 = 0;
                              v156 = 0;
                            }
                            else
                            {
                              v139 = &v140;
                            }
                            v142 = v157;
                            v157 = 0uLL;
                            v153.__vftable = (std::system_error_vtbl *)off_1E2521330;
                            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v154, v88);
                            MEMORY[0x18D7898AC](&v153);
                            std::runtime_error::runtime_error(&v131, (const std::runtime_error *)__what_arg);
                            ec = *(std::error_code *)&__what_arg[16];
                            v89 = (unsigned int *)v140;
                            v131.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                            v133 = v139;
                            v134 = v140;
                            v135 = v141;
                            if (v141)
                            {
                              *(_QWORD *)(v140 + 16) = &v134;
                              v89 = 0;
                              v139 = &v140;
                              v140 = 0;
                              v141 = 0;
                            }
                            else
                            {
                              v133 = &v134;
                            }
                            v136 = v142;
                            v142 = 0uLL;
                            v137 = 0;
                            *(_QWORD *)__what_arg = off_1E2521330;
                            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v89);
                            MEMORY[0x18D7898AC](__what_arg);
                            if (!v148)
                              ((void (*)(AMSCore::Error *))v143.~system_error)((AMSCore::Error *)&v143);
                          }
                          else
                          {
                            v82 = *(std::system_error_vtbl **)__what_arg;
LABEL_131:
                            v131.__vftable = (std::runtime_error_vtbl *)v82;
LABEL_132:
                            v137 = 1;
                          }
                        }
                        else
                        {
                          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[48]>((uint64_t)&__p, 3u, "Cache-Control max-age directive has no argument");
                          std::runtime_error::runtime_error(&v131, &__p);
                          ec = v160;
                          v83 = (unsigned int *)v162;
                          v131.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                          v133 = v161;
                          v134 = v162;
                          v135 = v163;
                          if (v163)
                          {
                            *(_QWORD *)(v162 + 16) = &v134;
                            v83 = 0;
                            v161 = &v162;
                            v162 = 0;
                            v163 = 0;
                          }
                          else
                          {
                            v133 = &v134;
                          }
                          v136 = v164;
                          v164 = 0uLL;
                          v137 = 0;
                          __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v83);
                          MEMORY[0x18D7898AC](&__p);
                        }
LABEL_111:
                        operator delete(v49);
                        goto LABEL_112;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        operator delete(v49);
        v32 += 16;
        if (v32 == v26)
          goto LABEL_45;
      }
      v168[0] = v116;
      __p.__vftable = v120;
      *(std::runtime_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v120[-1].~runtime_error) = v119;
      v75 = (std::ios_base *)((char *)&__p + (unint64_t)__p.__vftable[-1].~runtime_error);
      std::ios_base::init(v75, &__p.__imp_);
      v75[1].__vftable = 0;
      v75[1].__fmtflags_ = -1;
      __p.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4FE0] + 24);
      v168[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      __p.__imp_.__imp_ = v115;
      v165 = 0u;
      v166 = 0u;
      v167 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Cache-Control header is malformed. Header = ", 44);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, v47, v46);
      std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, (std::string *)__what_arg);
      __p.__vftable = v118;
      *(std::runtime_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v118[-1].~runtime_error) = v117;
      __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      if (SBYTE7(v166) < 0)
        operator delete((void *)v165);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v168);
      *(_QWORD *)&v169.__val_ = 3;
      v169.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      std::system_error::system_error(&v143, v169, (const std::string *)__what_arg);
      if ((__what_arg[23] & 0x80000000) != 0)
        operator delete(*(void **)__what_arg);
      v145 = 0;
      v146 = 0;
      v143.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v144 = &v145;
      v147 = 0uLL;
      std::runtime_error::runtime_error(&v153, &v143);
      v153.__ec_ = v143.__ec_;
      v76 = (unsigned int *)v145;
      v153.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v154 = v144;
      v155 = v145;
      v156 = v146;
      if (v146)
      {
        *(_QWORD *)(v145 + 16) = &v155;
        v76 = 0;
        v144 = &v145;
        v145 = 0;
        v146 = 0;
      }
      else
      {
        v154 = &v155;
      }
      v157 = v147;
      v147 = 0uLL;
      v143.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v144, v76);
      MEMORY[0x18D7898AC](&v143);
      std::runtime_error::runtime_error(&v131, &v153);
      ec = v153.__ec_;
      v77 = (unsigned int *)v155;
      v131.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v133 = v154;
      v134 = v155;
      v135 = v156;
      if (v156)
      {
        *(_QWORD *)(v155 + 16) = &v134;
        v77 = 0;
        v154 = &v155;
        v155 = 0;
        v156 = 0;
      }
      else
      {
        v133 = &v134;
      }
      v136 = v157;
      v157 = 0uLL;
      v137 = 0;
      v153.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v154, v77);
      MEMORY[0x18D7898AC](&v153);
      if (v49)
        goto LABEL_111;
    }
LABEL_112:
    if (v123)
      operator delete(v123);
    if (v137)
      break;
    ((void (*)(std::runtime_error *))v131.~runtime_error)(&v131);
    v5 = (uint64_t *)*v5;
    if (v5 == v122)
      goto LABEL_145;
  }
  v125.__vftable = v131.__vftable;
  v130 = 1;
LABEL_150:
  *((_BYTE *)&v160.__val_ + 7) = 4;
  strcpy((char *)&__p, "Date");
  v91 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v114, (char *)&__p);
  v92 = v91;
  if (v91)
  {
    v93 = v91;
    do
    {
      v93 = (uint64_t *)*v93;
      if (!v93)
        break;
      v94 = *((char *)v93 + 39);
      v95 = v94 >= 0 ? v93 + 2 : (uint64_t *)v93[2];
      v96 = v94 >= 0 ? (const char *)*((unsigned __int8 *)v93 + 39) : (const char *)v93[3];
      v97 = *((char *)&v160.__val_ + 7) >= 0 ? &__p : (std::runtime_error *)__p.__vftable;
      v98 = *((char *)&v160.__val_ + 7) >= 0 ? (const char *)*((unsigned __int8 *)&v160.__val_ + 7) : __p.__imp_.__imp_;
      v99 = std::locale::classic();
      v100 = std::locale::use_facet(v99, MEMORY[0x1E0DE4A90]);
      if (v96 != v98)
        break;
      v124 = v95;
      if (v96)
      {
        v101 = v100;
        v102 = v96 - 1;
        v103 = v97;
        while (1)
        {
          v104 = v102;
          v105 = (char)v103->__vftable;
          v106 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v101->__vftable[1].__on_zero_shared)(v101, *(char *)v95);
          if (v106 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v101->__vftable[1].__on_zero_shared)(v101, v105))goto LABEL_176;
          v95 = (uint64_t *)((char *)v95 + 1);
          v103 = (std::runtime_error *)((char *)v103 + 1);
          v102 = v104 - 1;
          if (!v104)
            goto LABEL_172;
        }
      }
      v103 = v97;
LABEL_172:
      ;
    }
    while (v95 == (uint64_t *)&v96[(_QWORD)v124] && v103 == (std::runtime_error *)&v96[(_QWORD)v97]);
  }
  else
  {
    v93 = 0;
  }
LABEL_176:
  if (*((char *)&v160.__val_ + 7) < 0)
  {
    operator delete(__p.__vftable);
    if (v93 != v92)
    {
LABEL_178:
      while (1)
      {
        if (*((char *)v92 + 63) < 0)
        {
          v107 = v92[5];
          v108 = v92[6];
        }
        else
        {
          v107 = (uint64_t)(v92 + 5);
          v108 = *((unsigned __int8 *)v92 + 63);
        }
        AMSCore::CookieUtils::parseDateString((uint64_t)&__p, v107, v108);
        if ((_BYTE)v165)
          break;
        ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
        v92 = (uint64_t *)*v92;
        if (v92 == v93)
          goto LABEL_183;
      }
      v143.__vftable = (std::system_error_vtbl *)__p.__vftable;
      v148 = 1;
      v109 = a1;
      goto LABEL_190;
    }
  }
  else if (v93 != v92)
  {
    goto LABEL_178;
  }
LABEL_183:
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[23]>((uint64_t)&__p, 0xCu, "Date header is missing");
  v109 = a1;
  std::runtime_error::runtime_error(&v143, &__p);
  v143.__ec_ = v160;
  v110 = (unsigned int *)v162;
  v143.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v144 = v161;
  v145 = v162;
  v146 = v163;
  if (v163)
  {
    *(_QWORD *)(v162 + 16) = &v145;
    v161 = &v162;
    v162 = 0;
    v163 = 0;
    v110 = 0;
  }
  else
  {
    v144 = &v145;
  }
  v147 = v164;
  v148 = 0;
  v164 = 0uLL;
  __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v110);
  MEMORY[0x18D7898AC](&__p);
  if (!v148)
  {
    if (!a4)
      ((void (*)(AMSCore::Error *))v143.~system_error)((AMSCore::Error *)&v143);
    if (v130)
    {
      *(_QWORD *)a1 = a3 + 1000000 * (uint64_t)v125.__vftable;
      *(_BYTE *)(a1 + 72) = 1;
      ((void (*)(AMSCore::Error *))v143.~system_error)((AMSCore::Error *)&v143);
    }
    goto LABEL_197;
  }
LABEL_190:
  if (v130)
  {
    *(_QWORD *)v109 = (char *)v143.__vftable + 1000000 * (uint64_t)v125.__vftable;
    *(_BYTE *)(v109 + 72) = 1;
    return;
  }
LABEL_197:
  __break(1u);
}

void sub_18CCE1350(void *a1)
{
  if (SLOBYTE(STACK[0x2E7]) < 0)
  {
    operator delete((void *)STACK[0x2D0]);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

std::runtime_error *AMSCore::HTTPResponseAction::createCancelAction(AMSCore::HTTPResponseAction *this, const std::runtime_error *a2)
{
  std::runtime_error *result;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 288) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_BYTE *)this + 300) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_BYTE *)this + 344) = 0;
  *((_BYTE *)this + 348) = 0;
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 376) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_BYTE *)this + 408) = 0;
  *((_BYTE *)this + 416) = 0;
  *((_BYTE *)this + 448) = 0;
  *((_DWORD *)this + 114) = 0;
  result = AMSCore::Error::Error((std::runtime_error *)((char *)this + 56), a2);
  *((_BYTE *)this + 128) = 1;
  return result;
}

void sub_18CCE148C(_Unwind_Exception *a1)
{
  AMSCore::HTTPResponseAction *v1;

  AMSCore::HTTPResponseAction::~HTTPResponseAction(v1);
  _Unwind_Resume(a1);
}

void AMSCore::HTTPResponseAction::createRedirectAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v4 = a1 + 136;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  v5 = a1 + 344;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 348) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 2;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 156);
  if (!*(_BYTE *)(a2 + 192))
  {
    *(_DWORD *)v5 = *(_DWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 348) = *(_BYTE *)(a2 + 204);
    goto LABEL_10;
  }
  *(_DWORD *)(a1 + 328) = -1;
  v6 = *(unsigned int *)(a2 + 184);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E253CAE8[v6])(&v14, a1 + 304, a2 + 160);
    *(_DWORD *)(a1 + 328) = v6;
    v7 = *(unsigned int *)(a2 + 184);
    if ((_DWORD)v7 != -1)
    {
      if (!(_DWORD)v7)
        goto LABEL_7;
      ((void (*)(char *, uint64_t))off_1E253D240[v7])(&v15, a2 + 160);
    }
  }
  *(_DWORD *)(a2 + 184) = 0;
LABEL_7:
  *(_BYTE *)(a1 + 336) = 1;
  v8 = *(unsigned __int8 *)(a1 + 288);
  *(_DWORD *)v5 = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(v5 + 4) = *(_BYTE *)(a2 + 204);
  if (v8)
  {
    AMSCore::URL::operator=(v4, (__int128 *)a2);
LABEL_20:
    std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(a1 + 416, (__int128 *)(a2 + 208));
    return;
  }
LABEL_10:
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 160) = 1;
  }
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 192) = 1;
  }
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 240) = a1 + 240;
  *(_QWORD *)(a1 + 248) = a1 + 240;
  *(_QWORD *)(a1 + 256) = 0;
  if (v4 != a2)
  {
    v9 = *(_QWORD *)(a2 + 120);
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 104);
      v10 = *(uint64_t **)(a2 + 112);
      v12 = *v10;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
      **(_QWORD **)(v11 + 8) = v12;
      v13 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)(v13 + 8) = v10;
      *v10 = v13;
      *(_QWORD *)(a1 + 240) = v11;
      *(_QWORD *)(v11 + 8) = a1 + 240;
      *(_QWORD *)(a1 + 256) = v9;
      *(_QWORD *)(a2 + 120) = 0;
    }
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_BYTE *)(a1 + 288) = 1;
    goto LABEL_20;
  }
  __break(1u);
}

double AMSCore::HTTPResponseAction::createRetryAction(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  double result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 348) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 3;
  v4 = *a2;
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 352) = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 376) = 1;
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)a3;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a1 + 408) = 1;
  *(_QWORD *)&result = std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(a1 + 416, a4).n128_u64[0];
  return result;
}

__n128 AMSCore::HTTPResponseAction::setDialogResult(__n128 *a1, __n128 *a2)
{
  __n128 result;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  if (a1[3].n128_u8[0] == a2[1].n128_u8[0])
  {
    if (a1[3].n128_u8[0])
    {
      result = *a2;
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      v4 = (std::__shared_weak_count *)a1[2].n128_u64[1];
      a1[2] = result;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  else if (a1[3].n128_u8[0])
  {
    v7 = (std::__shared_weak_count *)a1[2].n128_u64[1];
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    a1[3].n128_u8[0] = 0;
  }
  else
  {
    result = *a2;
    a1[2] = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a1[3].n128_u8[0] = 1;
  }
  return result;
}

uint64_t AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  LOBYTE(v21) = 0;
  v23 = 0;
  v5 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 24))
  {
    v21 = *a2;
    v22 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v23 = 1;
  }
  LOBYTE(v24) = 0;
  v26 = 0;
  v6 = *((unsigned __int8 *)a2 + 56);
  if (*((_BYTE *)a2 + 56))
  {
    v24 = a2[2];
    v25 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v26 = 1;
  }
  LOBYTE(v27) = 0;
  v29 = 0;
  v7 = *((unsigned __int8 *)a2 + 88);
  if (*((_BYTE *)a2 + 88))
  {
    v27 = a2[4];
    v28 = *((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v29 = 1;
  }
  v30 = *((_DWORD *)a2 + 24);
  v8 = &v31;
  v31 = &v31;
  v32 = &v31;
  v33 = 0;
  if (&v21 == a2)
    goto LABEL_21;
  v9 = *((_QWORD *)a2 + 15);
  if (v9)
  {
    v11 = (_QWORD *)*((_QWORD *)a2 + 13);
    v10 = (uint64_t *)*((_QWORD *)a2 + 14);
    v12 = *v10;
    *(_QWORD *)(v12 + 8) = v11[1];
    *(_QWORD *)v11[1] = v12;
    v13 = v31;
    v31[1] = v10;
    *v10 = (uint64_t)v13;
    v11[1] = &v31;
    v31 = v11;
    v33 = v9;
    *((_QWORD *)a2 + 15) = 0;
    v8 = v11;
  }
  v34 = a2[8];
  v35 = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v14 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v15 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = v14;
  *(_OWORD *)(a1 + 40) = v15;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 1;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 172) = 0x200000000;
  *(_BYTE *)(a1 + 184) = 0;
  v16 = (__int128 *)(a1 + 184);
  *(_BYTE *)(a1 + 208) = 0;
  if (v5)
  {
    *v16 = v21;
    *(_QWORD *)(a1 + 200) = v22;
    v22 = 0;
    v21 = 0uLL;
    *(_BYTE *)(a1 + 208) = 1;
  }
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  if (v6)
  {
    *(_OWORD *)(a1 + 216) = v24;
    *(_QWORD *)(a1 + 232) = v25;
    v25 = 0;
    v24 = 0uLL;
    *(_BYTE *)(a1 + 240) = 1;
  }
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  if (v7)
  {
    *(_OWORD *)(a1 + 248) = v27;
    *(_QWORD *)(a1 + 264) = v28;
    v28 = 0;
    v27 = 0uLL;
    *(_BYTE *)(a1 + 272) = 1;
  }
  *(_DWORD *)(a1 + 280) = v30;
  *(_QWORD *)(a1 + 288) = a1 + 288;
  *(_QWORD *)(a1 + 296) = a1 + 288;
  *(_QWORD *)(a1 + 304) = 0;
  if (v16 == &v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9)
  {
    v17 = v32;
    v18 = *v32;
    *(_QWORD *)(v18 + 8) = v8[1];
    *(_QWORD *)v8[1] = v18;
    v19 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(v19 + 8) = v17;
    *v17 = v19;
    *(_QWORD *)(a1 + 288) = v8;
    v8[1] = a1 + 288;
    *(_QWORD *)(a1 + 304) = v9;
    v33 = 0;
  }
  *(_OWORD *)(a1 + 312) = v34;
  *(_QWORD *)(a1 + 328) = v35;
  v35 = 0;
  v34 = 0uLL;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  if (!(_QWORD)v14)
LABEL_22:
    std::terminate();
  AMSCore::URL::~URL((AMSCore::URL *)&v21);
  return a1;
}

_BYTE *AMSCore::EncodeHTTPRequestTask::OptionsBuilder::make(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  const char **v6;
  std::__libcpp_refstring *p_imp;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  const std::runtime_error *v12;
  std::runtime_error_vtbl *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *imp;
  unint64_t *v39;
  unint64_t v40;
  unsigned int *v41;
  void **v42;
  unsigned int *v43;
  unsigned int **v44;
  _BYTE *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::runtime_error v53;
  __int128 v54;
  unsigned int **v55;
  unsigned int *v56;
  uint64_t v57;
  __int128 v58;
  std::runtime_error v59;
  __int128 v60;
  unsigned int **v61;
  unsigned int *v62;
  uint64_t v63;
  __int128 v64;
  std::runtime_error v65;
  __int128 v66;
  unsigned int **v67;
  unsigned int *v68;
  uint64_t v69;
  __int128 v70;
  char v71;
  std::runtime_error v72;

  v1 = *((_QWORD *)result + 121);
  if (*(_BYTE *)(v1 + 88))
  {
    v2 = result;
    v3 = (std::runtime_error *)(result + 760);
    v4 = (const std::runtime_error *)(v1 + 8);
    v5 = *(_BYTE *)(v1 + 80);
    if (v5)
    {
      *((_QWORD *)result + 95) = *(_QWORD *)(v1 + 8);
      v6 = (const char **)(result + 768);
      p_imp = (std::__libcpp_refstring *)(v1 + 16);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 760), v4);
      *(_OWORD *)(v2 + 776) = *(_OWORD *)(v1 + 24);
      *((_QWORD *)v2 + 95) = off_1E2521330;
      v8 = (_QWORD *)(v1 + 48);
      v9 = *(_QWORD *)(v1 + 48);
      *((_QWORD *)v2 + 99) = *(_QWORD *)(v1 + 40);
      v10 = v2 + 800;
      *((_QWORD *)v2 + 100) = v9;
      v11 = *(_QWORD *)(v1 + 56);
      *((_QWORD *)v2 + 101) = v11;
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v1 + 40) = v8;
        *v8 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 99) = v10;
      }
      v12 = (const std::runtime_error *)*((_QWORD *)v2 + 121);
      v13 = v12[4].__vftable;
      v4 = v12 + 4;
      *((_QWORD *)v2 + 102) = v13;
      v6 = (const char **)(v2 + 824);
      p_imp = &v4->__imp_;
    }
    *v6 = p_imp->__imp_;
    v4->__vftable = 0;
    v4->__imp_.__imp_ = 0;
    v2[832] = v5;
    v14 = *((_QWORD *)v2 + 122);
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v2 + 122);
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)v2 + 116);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)v2 + 118);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v2[832])
    {
      v2[608] = 0;
      v2[632] = 0;
      if (v2[480])
      {
        *((_OWORD *)v2 + 38) = *(_OWORD *)(v2 + 456);
        *((_QWORD *)v2 + 78) = *((_QWORD *)v2 + 59);
        *((_QWORD *)v2 + 58) = 0;
        *((_QWORD *)v2 + 59) = 0;
        *((_QWORD *)v2 + 57) = 0;
        v2[632] = 1;
      }
      v2[640] = 0;
      v2[664] = 0;
      if (v2[512])
      {
        *((_QWORD *)v2 + 82) = *((_QWORD *)v2 + 63);
        *((_OWORD *)v2 + 40) = *(_OWORD *)(v2 + 488);
        *((_QWORD *)v2 + 62) = 0;
        *((_QWORD *)v2 + 63) = 0;
        *((_QWORD *)v2 + 61) = 0;
        v2[664] = 1;
      }
      v2[672] = 0;
      v2[696] = 0;
      if (v2[544])
      {
        *((_QWORD *)v2 + 86) = *((_QWORD *)v2 + 67);
        *((_OWORD *)v2 + 42) = *(_OWORD *)(v2 + 520);
        *((_QWORD *)v2 + 67) = 0;
        *((_QWORD *)v2 + 65) = 0;
        *((_QWORD *)v2 + 66) = 0;
        v2[696] = 1;
      }
      *((_DWORD *)v2 + 176) = *((_DWORD *)v2 + 138);
      *((_QWORD *)v2 + 89) = v2 + 712;
      *((_QWORD *)v2 + 90) = v2 + 712;
      *((_QWORD *)v2 + 91) = 0;
      v24 = *((_QWORD *)v2 + 72);
      if (v24)
      {
        v25 = (uint64_t *)*((_QWORD *)v2 + 71);
        v26 = *((_QWORD *)v2 + 70);
        v27 = *v25;
        *(_QWORD *)(v27 + 8) = *(_QWORD *)(v26 + 8);
        **(_QWORD **)(v26 + 8) = v27;
        v28 = *((_QWORD *)v2 + 89);
        *(_QWORD *)(v28 + 8) = v25;
        *v25 = v28;
        *((_QWORD *)v2 + 89) = v26;
        *(_QWORD *)(v26 + 8) = v2 + 712;
        *((_QWORD *)v2 + 91) = v24;
        *((_QWORD *)v2 + 72) = 0;
      }
      *((_QWORD *)v2 + 94) = *((_QWORD *)v2 + 75);
      *((_OWORD *)v2 + 46) = *(_OWORD *)(v2 + 584);
      *((_QWORD *)v2 + 75) = 0;
      *((_QWORD *)v2 + 73) = 0;
      *((_QWORD *)v2 + 74) = 0;
      v72 = *v3;
      v3->__vftable = 0;
      v3->__imp_.__imp_ = 0;
      v29 = *((_QWORD *)v2 + 111);
      *((_QWORD *)v2 + 119) = *(_QWORD *)(v29 + 56);
      v30 = *(_QWORD *)(v29 + 64);
      *((_QWORD *)v2 + 120) = v30;
      if (v30)
      {
        v31 = (unint64_t *)(v30 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)&v65, (__int128 *)v2 + 38, (__int128 *)&v72, (__int128 *)(v2 + 952));
      if (v2[408])
      {
        v33 = (void **)(v2 + 24);
        if (v2[400])
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v33);
        else
          (*(void (**)(void **))*v33)(v33);
        v2[408] = 0;
      }
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v2 + 24), (uint64_t)&v65);
      v2[400] = 1;
      v2[408] = 1;
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v65.__vftable);
      v35 = (std::__shared_weak_count *)*((_QWORD *)v2 + 120);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      imp = (std::__shared_weak_count *)v72.__imp_.__imp_;
      if (v72.__imp_.__imp_)
      {
        v39 = (unint64_t *)(v72.__imp_.__imp_ + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 608));
    }
    else
    {
      std::runtime_error::runtime_error(&v65, v3);
      v66 = *(_OWORD *)(v2 + 776);
      v65.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v34 = *((_QWORD *)v2 + 100);
      v67 = (unsigned int **)*((_QWORD *)v2 + 99);
      v68 = (unsigned int *)v34;
      v69 = *((_QWORD *)v2 + 101);
      if (v69)
      {
        *(_QWORD *)(v34 + 16) = &v68;
        *((_QWORD *)v2 + 99) = v2 + 800;
        *((_QWORD *)v2 + 100) = 0;
        *((_QWORD *)v2 + 101) = 0;
      }
      else
      {
        v67 = &v68;
      }
      v70 = *((_OWORD *)v2 + 51);
      *((_QWORD *)v2 + 103) = 0;
      *((_QWORD *)v2 + 102) = 0;
      v71 = 1;
      std::runtime_error::runtime_error(&v53, &v65);
      v54 = v66;
      v53.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v55 = v67;
      v56 = v68;
      v57 = v69;
      if (v69)
      {
        *((_QWORD *)v68 + 2) = &v56;
        v67 = &v68;
        v68 = 0;
        v69 = 0;
      }
      else
      {
        v55 = &v56;
      }
      v58 = v70;
      v70 = 0uLL;
      std::runtime_error::runtime_error(&v59, &v53);
      v60 = v54;
      v59.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v41 = v56;
      v61 = v55;
      v62 = v56;
      v63 = v57;
      if (v57)
      {
        *((_QWORD *)v56 + 2) = &v62;
        v41 = 0;
        v55 = &v56;
        v56 = 0;
        v57 = 0;
      }
      else
      {
        v61 = &v62;
      }
      v64 = v58;
      v58 = 0uLL;
      v53.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v55, v41);
      MEMORY[0x18D7898AC](&v53);
      if (v2[408])
      {
        v42 = (void **)(v2 + 24);
        if (v2[400])
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v42);
        else
          (*(void (**)(void **))*v42)(v42);
        v2[408] = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), &v59);
      v44 = v61;
      v43 = v62;
      *((_QWORD *)v2 + 8) = v62;
      v45 = v2 + 64;
      *(_OWORD *)(v2 + 40) = v60;
      *((_QWORD *)v2 + 3) = off_1E2521330;
      *((_QWORD *)v2 + 7) = v44;
      v46 = v63;
      *((_QWORD *)v2 + 9) = v63;
      if (v46)
      {
        *((_QWORD *)v43 + 2) = v45;
        v43 = 0;
        v61 = &v62;
        v62 = 0;
        v63 = 0;
      }
      else
      {
        *((_QWORD *)v2 + 7) = v45;
      }
      *((_OWORD *)v2 + 5) = v64;
      v64 = 0uLL;
      v2[400] = 0;
      v2[408] = 1;
      v59.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v61, v43);
      MEMORY[0x18D7898AC](&v59);
      if (v71)
      {
        v65.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v48 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v67, v68);
        MEMORY[0x18D7898AC](&v65);
      }
    }
    if (v2[832])
    {
      v50 = (std::__shared_weak_count *)*((_QWORD *)v2 + 96);
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    }
    *((_QWORD *)v2 + 95) = v2 + 16;
    *(_QWORD *)v2 = 0;
    LOBYTE(v3[14].__vftable) = 1;
    return AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::EncodeHTTPRequestTask::OptionsBuilder::make(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  unsigned int v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  if ((*(_BYTE *)(a1 + 984) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 976);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = *(std::__shared_weak_count **)(a1 + 976);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = *(std::__shared_weak_count **)(a1 + 928);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(std::__shared_weak_count **)(a1 + 944);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = *(_QWORD **)(a1 + 448);
  if (v12 == (_QWORD *)(a1 + 424))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 424);
  }
  else
  {
    if (!v12)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  if (*(_BYTE *)(a1 + 408))
  {
    v14 = (void **)(a1 + 24);
    if (*(_BYTE *)(a1 + 400))
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v14);
    else
      (*(void (**)(void **))*v14)(v14);
  }
  do
  {
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v16)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v17 = *(std::__shared_weak_count **)(a1 + 912);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 896);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 456));
  operator delete((void *)a1);
}

void AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v16;
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v1 = result;
  v20 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 400);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = *(_QWORD *)result;
    result = *(_BYTE **)(*(_QWORD *)result + 432);
    if (result)
    {
      if (result == (_BYTE *)(v4 + 408))
      {
        v19 = v18;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v18);
      }
      else
      {
        v19 = result;
        *(_QWORD *)(v4 + 432) = 0;
      }
    }
    else
    {
      v19 = 0;
    }
    if (v19)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 392))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 384);
      if (v7)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)&v11, (uint64_t)v6);
      }
      else
      {
        std::runtime_error::runtime_error(&v11, v6);
        v8 = (_QWORD *)(v5 + 48);
        v9 = *(_QWORD *)(v5 + 48);
        v12 = *(_OWORD *)(v5 + 24);
        v11.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v13 = *(uint64_t **)(v5 + 40);
        v14 = v9;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v9 + 16) = &v14;
          *(_QWORD *)(v5 + 40) = v8;
          *v8 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v13 = &v14;
        }
        v16 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v17 = v7;
      if (!v19)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v19 + 48))(v19, &v11);
      if (v17)
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v11.__vftable);
      else
        ((void (*)(std::runtime_error *))v11.~runtime_error)(&v11);
    }
    else
    {
      (*v3)(v3);
    }
    result = v19;
    if (v19 == v18)
    {
      v10 = 4;
      result = v18;
    }
    else
    {
      if (!v19)
        return result;
      v10 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v10))();
  }
  return result;
}

void sub_18CCE2824(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (_QWORD *)(a1 + 408);
  v3 = *(_QWORD **)(a1 + 432);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 392))
  {
    v5 = (void **)(a1 + 8);
    if (*(_BYTE *)(a1 + 384))
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v5);
    else
      (*(void (**)(void **))*v5)(v5);
  }
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 400);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask14OptionsBuilderENS_5ErrorEE7Promise17get_return_objectEv"
                     "E13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask14OptionsBuilderENS_5ErrorEE7Promise17get_retu"
                                "rn_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask14OptionsBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask14OptionsBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  const std::locale *v13;
  const std::locale::facet *v14;
  const std::locale::facet *v15;
  uint64_t v16;

  v5 = (_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a3 + 24))
  {
    v7 = (char *)operator new(0x40uLL);
    v8 = (uint64_t)v7;
    v9 = v7 + 16;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)a2;
      *((_QWORD *)v7 + 4) = *(_QWORD *)(a2 + 16);
    }
    *(_OWORD *)(v8 + 40) = *(_OWORD *)a3;
    *(_QWORD *)(v8 + 56) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v10 = *(char *)(v8 + 39);
    if (v10 >= 0)
      v11 = v9;
    else
      v11 = *(char **)(v8 + 16);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 39);
    else
      v12 = *(_QWORD *)(v8 + 24);
    v13 = std::locale::classic();
    v14 = std::locale::use_facet(v13, MEMORY[0x1E0DE4A90]);
    if (v12)
    {
      v15 = v14;
      v16 = 0;
      do
      {
        v16 ^= 2
             * ((int (*)(const std::locale::facet *, _QWORD))v15->__vftable[1].__on_zero_shared)(v15, *v11++);
        --v12;
      }
      while (v12);
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)(v8 + 8) = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(v5, v8);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(a1 + 128), (char *)a2);
  }
  return a1;
}

void sub_18CCE2AC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AMSCore::EncodeHTTPRequestTask::internal::makeOptionsBuilder(uint64_t a1, __int128 *a2, __int128 *a3)
{
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *v31[2];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  int v37;
  int v38;
  char v39;
  char v40;
  __int128 v41;
  __int128 v42;
  int v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  int v55;
  _QWORD v56[2];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;

  LOBYTE(v16) = 0;
  v18 = 0;
  v3 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 24))
  {
    v16 = *a2;
    v17 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = 1;
  }
  LOBYTE(v19) = 0;
  v21 = 0;
  v4 = *((unsigned __int8 *)a2 + 56);
  if (*((_BYTE *)a2 + 56))
  {
    v19 = a2[2];
    v20 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v21 = 1;
  }
  LOBYTE(v22) = 0;
  v24 = 0;
  v5 = *((unsigned __int8 *)a2 + 88);
  if (*((_BYTE *)a2 + 88))
  {
    v22 = a2[4];
    v23 = *((_QWORD *)a2 + 10);
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v24 = 1;
  }
  v25 = *((_DWORD *)a2 + 24);
  v6 = &v26;
  v26 = &v26;
  v27 = &v26;
  v28 = 0;
  if (&v16 == a2)
  {
    __break(1u);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 15);
    if (v7)
    {
      v9 = (_QWORD *)*((_QWORD *)a2 + 13);
      v8 = (uint64_t *)*((_QWORD *)a2 + 14);
      v10 = *v8;
      *(_QWORD *)(v10 + 8) = v9[1];
      *(_QWORD *)v9[1] = v10;
      v11 = v26;
      v26[1] = v8;
      *v8 = (uint64_t)v11;
      v26 = v9;
      v9[1] = &v26;
      v28 = v7;
      *((_QWORD *)a2 + 15) = 0;
      v6 = v9;
    }
    v29 = a2[8];
    v30 = *((_QWORD *)a2 + 18);
    v31[0] = 0;
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 16) = 0;
    v12 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v31[1] = 0;
    v32 = 0;
    v34 = 0;
    v33 = 0;
    v36 = v12;
    v35 = 0;
    v37 = 0;
    v38 = 1;
    v39 = 0;
    v40 = 0;
    v41 = 0u;
    v42 = 0u;
    v43 = 1065353216;
    v44 = 0;
    v45 = 0x200000000;
    LOBYTE(v46) = 0;
    v48 = 0;
    if (v3)
    {
      v46 = v16;
      v47 = v17;
      v17 = 0;
      v16 = 0uLL;
      v48 = 1;
    }
    LOBYTE(v49) = 0;
    v51 = 0;
    if (v4)
    {
      v49 = v19;
      v50 = v20;
      v20 = 0;
      v19 = 0uLL;
      v51 = 1;
    }
    LOBYTE(v52) = 0;
    v54 = 0;
    if (v5)
    {
      v52 = v22;
      v53 = v23;
      v23 = 0;
      v22 = 0uLL;
      v54 = 1;
    }
    v55 = v25;
    v56[0] = v56;
    v56[1] = v56;
    v57 = 0;
    if (v7)
    {
      v13 = v27;
      v14 = *v27;
      *(_QWORD *)(v14 + 8) = v6[1];
      *(_QWORD *)v6[1] = v14;
      v15 = v56[0];
      *(_QWORD *)(v56[0] + 8) = v13;
      *v13 = v15;
      v56[0] = v6;
      v6[1] = v56;
      v57 = v7;
      v28 = 0;
    }
    v58 = v29;
    v59 = v30;
    v30 = 0;
    v29 = 0uLL;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    AMSCore::EncodeHTTPRequestTask::Options::Options(a1, (uint64_t)v31);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v31);
    AMSCore::URL::~URL((AMSCore::URL *)&v16);
  }
}

void AMSCore::EncodeHTTPRequestTask::perform(_OWORD *a1, uint64_t a2)
{
  char *v4;
  _OWORD *v5;
  _QWORD *v6;
  const char *imp;
  std::runtime_error *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  AMSCore::URL *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::runtime_error_vtbl *v20;
  std::runtime_error_vtbl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::ios_base *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 v29;
  std::string *v30;
  _BYTE *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error_vtbl *v36;
  _OWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void (__cdecl *v43)(std::runtime_error *__hidden);
  int v44;
  std::runtime_error_vtbl *v45;
  void (__cdecl *what_high)(std::runtime_error *__hidden);
  std::runtime_error_vtbl *v47;
  char v48;
  void (__cdecl *v49)(std::runtime_error *__hidden);
  const std::locale *v50;
  const std::locale::facet *v51;
  const std::locale::facet *v52;
  uint64_t v53;
  char *v54;
  std::runtime_error_vtbl *v55;
  uint64_t v56;
  int v57;
  void (__cdecl *v58)(std::runtime_error *__hidden);
  unint64_t *v59;
  unint64_t v60;
  int v61;
  int v62;
  void (__cdecl *v63)(std::runtime_error *__hidden);
  std::basic_regex<char>::value_type *v64;
  std::string *v65;
  std::string::size_type size;
  const char *v67;
  int v68;
  uint64_t v69;
  std::ios_base *v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char v76;
  void *v77;
  _QWORD *v78;
  _QWORD *v79;
  char v80;
  std::string::size_type v81;
  uint64_t v82;
  int v83;
  char v84;
  int v85;
  unint64_t *v86;
  unint64_t v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  std::runtime_error_vtbl *v91;
  void *v92;
  uint64_t v93;
  char v94;
  char *v95;
  unint64_t *v96;
  int v97;
  int v98;
  int v99;
  std::string **v100;
  uint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  std::string **v106;
  std::string::size_type v107;
  std::string *v108;
  _QWORD *v109;
  std::string::size_type v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  char *v120;
  std::runtime_error *v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  unsigned int v125;
  uint64_t v126;
  const char *(__cdecl *v127)(const std::runtime_error *__hidden);
  int v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  const char *(__cdecl *v132)(const std::runtime_error *__hidden);
  unint64_t *v133;
  unint64_t v134;
  __int128 *v135;
  std::runtime_error v136;
  unint64_t *v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  const char *(__cdecl *v143)(const std::runtime_error *__hidden);
  const char *(__cdecl *v144)(const std::runtime_error *__hidden);
  void (__cdecl *v145)(std::runtime_error *__hidden);
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::runtime_error v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  std::runtime_error v190;
  unint64_t *v192;
  unint64_t v193;
  char v194;
  std::runtime_error_vtbl *v195;
  void (__cdecl *v196)(std::runtime_error *__hidden);
  unint64_t v197;
  void (__cdecl *v198)(std::runtime_error *__hidden);
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  std::runtime_error v218;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  __int128 v243;
  unint64_t *v245;
  unint64_t v246;
  char v247;
  _QWORD *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  uint64_t v253;
  unsigned int *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  int v276;
  std::runtime_error_vtbl *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  const char *(__cdecl *what)(const std::runtime_error *__hidden);
  int v283;
  int v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::string::size_type v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  std::chrono::system_clock::time_point v293;
  std::runtime_error_vtbl *v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  void (__cdecl *i)(std::runtime_error *__hidden);
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  __int128 v305;
  unint64_t *v307;
  unint64_t v308;
  char v309;
  std::runtime_error_vtbl *v310;
  void (__cdecl *v311)(std::runtime_error *__hidden);
  char *v312;
  void (__cdecl *v313)(std::runtime_error *__hidden);
  uint64_t v314;
  uint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  std::__shared_weak_count *v319;
  unint64_t *p_shared_owners;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  unsigned int *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unsigned int *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::runtime_error_vtbl *v366;
  std::runtime_error_vtbl *v367;
  uint64_t v368;
  void *v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  void *v374;
  std::runtime_error_vtbl *v375;
  const char *v376;
  void **v377;
  uint64_t v378;
  void **v379;
  __int128 *v380;
  uint64_t *v381;
  uint64_t v382;
  std::runtime_error *v383;
  uint64_t *v384;
  __int128 *v385;
  AMSCore::URL *v386;
  AMSCore::URL *v387;
  uint64_t *v388;
  __int128 *v389;
  uint64_t *v390;
  void **v391;
  uint64_t *v392;
  uint64_t v393;
  void **v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  char *v399;
  std::runtime_error *v400;
  _BYTE *v401;
  uint64_t v402;
  void **v403;
  char *v404;
  unint64_t v405;
  uint64_t v406;
  std::runtime_error *v407;
  std::runtime_error *v408;
  uint64_t *v409;
  uint64_t *v410;
  std::runtime_error *v411;
  std::vector<std::csub_match>::const_reference __u;
  uint64_t v413;
  __int128 v414;
  _BYTE v415[48];
  std::string *v416;
  _BYTE v417[32];
  __int128 v418;
  std::string *v419;
  _QWORD *v420;
  uint64_t v421;
  __int128 v422;
  uint64_t v423;
  __int128 v424;
  _BYTE v425[40];
  __int128 v426;
  __int128 v427;
  std::runtime_error v428;
  __int128 v429;
  _BYTE v430[24];
  __int128 v431;
  char v432;
  void *v433[3];
  char v434;
  void *v435[2];
  uint64_t v436;
  std::string v437;
  void *rep;
  __int128 v439;
  uint64_t v440;
  uint64_t v441;
  __int128 v442;
  __int128 v443;
  int v444;
  _QWORD v445[19];
  _QWORD v446[17];
  _BYTE out[32];
  __int128 v448;
  std::string *v449;
  _BYTE v450[24];
  uint64_t v451;
  char v452;
  int v453;
  _QWORD *v454;
  std::string **v455;
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  uint64_t v459;

  v459 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x8C8uLL);
  *(_QWORD *)v4 = AMSCore::EncodeHTTPRequestTask::perform;
  *((_QWORD *)v4 + 1) = AMSCore::EncodeHTTPRequestTask::perform;
  v379 = (void **)(v4 + 848);
  v410 = (uint64_t *)(v4 + 1224);
  v411 = (std::runtime_error *)(v4 + 1608);
  v5 = v4 + 1456;
  v6 = v4 + 1688;
  v401 = v4 + 2240;
  v402 = (uint64_t)(v4 + 1800);
  v377 = (void **)(v4 + 1768);
  v378 = (uint64_t)(v4 + 1856);
  v393 = (uint64_t)(v4 + 1904);
  v391 = (void **)(v4 + 1832);
  v392 = (uint64_t *)(v4 + 1920);
  v384 = (uint64_t *)(v4 + 1952);
  v385 = (__int128 *)(v4 + 1936);
  v399 = v4 + 1968;
  v400 = (std::runtime_error *)(v4 + 1984);
  v382 = (uint64_t)(v4 + 2016);
  v383 = (std::runtime_error *)(v4 + 2000);
  v380 = (__int128 *)(v4 + 2048);
  v381 = (uint64_t *)(v4 + 2032);
  v397 = v4 + 2080;
  v398 = v4 + 2064;
  v409 = (uint64_t *)(v4 + 2096);
  v388 = (uint64_t *)(v4 + 2112);
  imp = v4 + 2128;
  v8 = (std::runtime_error *)(v4 + 2160);
  v406 = (uint64_t)(v4 + 16);
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v4 + 472), a2);
  do
    v9 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v9 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v4[24] = 0;
  v4[424] = 0;
  *((_QWORD *)v4 + 54) = 0;
  v403 = (void **)(v4 + 24);
  *((_QWORD *)v4 + 58) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v415, v406);
  *a1 = *(_OWORD *)v415;
  v10 = operator new(0x190uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E2522C08;
  *((_QWORD *)v4 + 270) = AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v10 + 3), (uint64_t)(v4 + 472));
  *((_QWORD *)v4 + 271) = v10;
  v11 = v10[4];
  *((_QWORD *)v4 + 264) = v10[3];
  *((_QWORD *)v4 + 265) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v389 = (__int128 *)(v4 + 2144);
  v390 = (uint64_t *)(v4 + 2128);
  v408 = (std::runtime_error *)(v4 + 2160);
  AMSCore::URL::URL((std::string *)(v4 + 1456), (const AMSCore::URL *)(v10 + 26));
  v4[1224] = 0;
  v4[1296] = 0;
  v14 = (AMSCore::URL *)(v4 + 1304);
  v4[1304] = 0;
  v4[1328] = 0;
  if (v4[1480])
  {
    *(_OWORD *)v14 = *v5;
    *((_QWORD *)v4 + 165) = *((_QWORD *)v4 + 184);
    *((_QWORD *)v4 + 183) = 0;
    *((_QWORD *)v4 + 184) = 0;
    *(_QWORD *)v5 = 0;
    v4[1328] = 1;
  }
  v4[1336] = 0;
  v4[1360] = 0;
  if (v4[1512])
  {
    *(_OWORD *)(v4 + 1336) = *((_OWORD *)v4 + 93);
    *((_QWORD *)v4 + 169) = *((_QWORD *)v4 + 188);
    *((_QWORD *)v4 + 186) = 0;
    *((_QWORD *)v4 + 188) = 0;
    *((_QWORD *)v4 + 187) = 0;
    v4[1360] = 1;
  }
  v396 = v4 + 1336;
  v4[1368] = 0;
  v4[1392] = 0;
  if (v4[1544])
  {
    *(_OWORD *)(v4 + 1368) = *((_OWORD *)v4 + 95);
    *((_QWORD *)v4 + 173) = *((_QWORD *)v4 + 192);
    *((_QWORD *)v4 + 190) = 0;
    *((_QWORD *)v4 + 192) = 0;
    *((_QWORD *)v4 + 191) = 0;
    v4[1392] = 1;
  }
  v394 = (void **)(v4 + 1880);
  v395 = v4 + 1368;
  *((_DWORD *)v4 + 350) = *((_DWORD *)v4 + 388);
  *((_QWORD *)v4 + 176) = v4 + 1408;
  *((_QWORD *)v4 + 177) = v4 + 1408;
  *((_QWORD *)v4 + 178) = 0;
  v15 = *((_QWORD *)v4 + 197);
  if (v15)
  {
    v16 = (uint64_t *)*((_QWORD *)v4 + 196);
    v17 = *((_QWORD *)v4 + 195);
    v18 = *v16;
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v17 + 8);
    **(_QWORD **)(v17 + 8) = v18;
    v19 = *((_QWORD *)v4 + 176);
    *(_QWORD *)(v19 + 8) = v16;
    *v16 = v19;
    *((_QWORD *)v4 + 176) = v17;
    *(_QWORD *)(v17 + 8) = v4 + 1408;
    *((_QWORD *)v4 + 178) = v15;
    *((_QWORD *)v4 + 197) = 0;
  }
  v413 = (uint64_t)(v4 + 1432);
  *(_OWORD *)(v4 + 1432) = *((_OWORD *)v4 + 99);
  *((_QWORD *)v4 + 181) = *((_QWORD *)v4 + 200);
  *((_QWORD *)v4 + 198) = 0;
  *((_QWORD *)v4 + 200) = 0;
  *((_QWORD *)v4 + 199) = 0;
  AMSCore::URL::~URL((AMSCore::URL *)(v4 + 1456));
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(out);
  v20 = *(std::runtime_error_vtbl **)out;
  v407 = (std::runtime_error *)(v4 + 1688);
  if (*(int *)(*(_QWORD *)out + 8) > 2)
    goto LABEL_25;
  v8 = (std::runtime_error *)(v4 + 1304);
  v21 = (std::runtime_error_vtbl *)&v420;
  v22 = MEMORY[0x1E0DE4FE0];
  v23 = MEMORY[0x1E0DE4FE0] + 64;
  v14 = (AMSCore::URL *)MEMORY[0x1E0DE4F60];
  v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v420 = (_QWORD *)(MEMORY[0x1E0DE4FE0] + 64);
  *(_QWORD *)v415 = v24;
  *(_QWORD *)&v415[*(_QWORD *)(v24 - 24)] = v25;
  v26 = (std::ios_base *)&v415[*(_QWORD *)(*(_QWORD *)v415 - 24)];
  std::ios_base::init(v26, &v415[8]);
  v26[1].__vftable = 0;
  v26[1].__fmtflags_ = -1;
  *(_QWORD *)v415 = v22 + 24;
  v420 = (_QWORD *)v23;
  std::streambuf::basic_streambuf();
  v27 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v415[8] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)&v417[16] = 0u;
  v418 = 0u;
  LODWORD(v419) = 16;
  v28 = *(_QWORD *)(*(_QWORD *)v415 - 24);
  imp = (const char *)&unk_1EE059000;
  if ((v29 & 1) == 0)
    goto LABEL_732;
  while (2)
  {
    *std::ios_base::iword((std::ios_base *)&v415[v28], *((_DWORD *)imp + 436)) = 1;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v415, (uint64_t)"Encoding network request. url = ", 32);
    AMSCore::operator<<(v415, (uint64_t)v8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v415, (uint64_t)" | account = ", 13);
    if (*v388)
      AMSCore::operator<<(v415, *v388);
    else
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v415, (uint64_t)"null", 4);
    v30 = v416;
    imp = v415;
    v31 = &v415[*(_QWORD *)(*(_QWORD *)v415 - 24)];
    if ((v31[32] & 5) != 0)
    {
      v32 = -1;
    }
    else
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v31 + 5) + 32))(&rep, *((_QWORD *)v31 + 5), 0, 1, 16);
      v32 = v445[2];
    }
    rep = (void *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v439) = 2;
    *((_QWORD *)&v439 + 1) = v30;
    v440 = v32;
    (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden), const char *, uint64_t, void **))(*(_QWORD *)v20->what + 16))(v20->what, "networking", 10, &rep);
    *(_QWORD *)v415 = *(_QWORD *)v14;
    *(_QWORD *)&v415[*(_QWORD *)(*(_QWORD *)v415 - 24)] = *((_QWORD *)v14 + 3);
    *(_QWORD *)&v415[8] = v27 + 16;
    if (SBYTE7(v418) < 0)
      operator delete(*(void **)&v417[16]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v21);
    v14 = (AMSCore::URL *)v8;
    v6 = &v407->__vftable;
    v8 = v408;
LABEL_25:
    v33 = *(std::__shared_weak_count **)&out[8];
    if (*(_QWORD *)&out[8])
    {
      v34 = (unint64_t *)(*(_QWORD *)&out[8] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v8->__vftable;
    if (!LOBYTE(v8->what))
      goto LABEL_33;
    v415[23] = 6;
    strcpy(v415, "buster");
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = 0;
    uuid_generate_random(out);
    v37 = operator new(0x28uLL);
    rep = v37;
    v439 = xmmword_18CF51AF0;
    *v37 = 0u;
    v37[1] = 0u;
    *(_QWORD *)((char *)v37 + 31) = 0;
    uuid_unparse_lower(out, (char *)v37 + 1);
    *(_BYTE *)v37 = 123;
    *((_BYTE *)v37 + 37) = 125;
    AMSCore::URLBuilder::withQueryParameter((uint64_t)v410, (uint64_t)v415, (uint64_t)&rep);
    if (SHIBYTE(v439) < 0)
    {
      operator delete(rep);
      if ((v415[23] & 0x80000000) == 0)
        goto LABEL_33;
    }
    else if ((v415[23] & 0x80000000) == 0)
    {
      goto LABEL_33;
    }
    operator delete(*(void **)v415);
LABEL_33:
    AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(v415);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v415 + 32))(v433);
    v21 = *(std::runtime_error_vtbl **)&v415[8];
    if (!*(_QWORD *)&v415[8])
      goto LABEL_37;
    v38 = (unint64_t *)(*(_QWORD *)&v415[8] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      (*((void (**)(std::runtime_error_vtbl *))v21->~runtime_error + 2))(v21);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
      if (!v434)
      {
LABEL_44:
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v415);
        AMSCore::Logger::log<char [24]>(*(uint64_t *)v415, (uint64_t)"networking", 10, "The device has no GUID.");
        v40 = *(std::__shared_weak_count **)&v415[8];
        if (*(_QWORD *)&v415[8])
        {
          v41 = (unint64_t *)(*(_QWORD *)&v415[8] + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        break;
      }
    }
    else
    {
LABEL_37:
      if (!v434)
        goto LABEL_44;
    }
    if (BYTE1(v36->what))
    {
      v415[23] = 4;
      strcpy(v415, "guid");
LABEL_40:
      *(_OWORD *)out = *(_OWORD *)v433;
      *(void **)&out[16] = v433[2];
      memset(v433, 0, sizeof(v433));
      AMSCore::URLBuilder::withQueryParameter((uint64_t)v410, (uint64_t)v415, (uint64_t)out);
      if ((out[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)out);
        if ((v415[23] & 0x80000000) == 0)
          break;
      }
      else if ((v415[23] & 0x80000000) == 0)
      {
        break;
      }
      operator delete(*(void **)v415);
      break;
    }
    v43 = v36[1].~runtime_error;
    if (!v43)
      break;
    v415[23] = 17;
    strcpy(v415, "guid-urls/schemes");
    (*(void (**)(_BYTE *__return_ptr, void (__cdecl *)(std::runtime_error *__hidden), _BYTE *))(*(_QWORD *)v43 + 72))(out, v43, v415);
    if ((v415[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v415);
      if (!v450[16])
      {
LABEL_87:
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v415);
        AMSCore::Logger::log<char [25]>(*(uint64_t *)v415, 2, (uint64_t)"networking", 10, "Bag has no GUID Schemes.");
        v21 = *(std::runtime_error_vtbl **)&v415[8];
        if (*(_QWORD *)&v415[8])
        {
          v59 = (unint64_t *)(*(_QWORD *)&v415[8] + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            (*((void (**)(std::runtime_error_vtbl *))v21->~runtime_error + 2))(v21);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
          }
        }
        v27 = 1;
        v61 = 1;
        goto LABEL_165;
      }
    }
    else if (!v450[16])
    {
      goto LABEL_87;
    }
    v20 = *(std::runtime_error_vtbl **)out;
    __u = *(std::vector<std::csub_match>::const_reference *)&out[8];
    if (*(_QWORD *)out == *(_QWORD *)&out[8])
    {
      v62 = 0;
      v61 = 1;
      goto LABEL_164;
    }
    v375 = v36;
    v386 = v14;
    v404 = v4;
    while (1)
    {
      v44 = (int)v20[1].~runtime_error;
      if (v44 == 5)
        v45 = v20;
      else
        v45 = 0;
      if (v44 != 5)
        goto LABEL_54;
      if (SHIBYTE(v45->what) < 0)
      {
        v47 = v45;
        v45 = (std::runtime_error_vtbl *)v45->~runtime_error;
        what_high = v47->~runtime_error_0;
      }
      else
      {
        what_high = (void (__cdecl *)(std::runtime_error *__hidden))HIBYTE(v45->what);
      }
      v48 = v404[1455];
      v21 = (std::runtime_error_vtbl *)(v48 >= 0 ? v413 : *((_QWORD *)v404 + 179));
      v49 = v48 >= 0
          ? (void (__cdecl *)(std::runtime_error *__hidden))v404[1455]
          : (void (__cdecl *)(std::runtime_error *__hidden))*((_QWORD *)v404 + 180);
      v50 = std::locale::classic();
      v51 = std::locale::use_facet(v50, MEMORY[0x1E0DE4A90]);
      if (what_high != v49)
        goto LABEL_54;
      if (what_high)
      {
        v52 = v51;
        v53 = (uint64_t)what_high - 1;
        v54 = (char *)v45;
        v55 = v21;
        while (1)
        {
          v56 = v53;
          imp = (const char *)LOBYTE(v55->~runtime_error);
          v57 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v52->__vftable[1].__on_zero_shared)(v52, *v54);
          if (v57 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v52->__vftable[1].__on_zero_shared)(v52, (char)imp))goto LABEL_54;
          ++v54;
          v55 = (std::runtime_error_vtbl *)((char *)v55 + 1);
          v53 = v56 - 1;
          if (!v56)
            goto LABEL_75;
        }
      }
      v55 = v21;
      v54 = (char *)v45;
LABEL_75:
      if (v54 == (char *)what_high + (_QWORD)v45 && v55 == (std::runtime_error_vtbl *)((char *)what_high + (_QWORD)v21))
        break;
LABEL_54:
      v20 = (std::runtime_error_vtbl *)((char *)v20 + 32);
      if (v20 == (std::runtime_error_vtbl *)__u)
      {
        v62 = 0;
        v61 = 1;
        v4 = v404;
        v14 = v386;
        v6 = &v407->__vftable;
        v8 = v408;
        goto LABEL_164;
      }
    }
    v58 = v375[1].~runtime_error;
    v415[23] = 15;
    strcpy(v415, "guid-urls/regex");
    (*(void (**)(std::runtime_error *__return_ptr, void (__cdecl *)(std::runtime_error *__hidden), _BYTE *))(*(_QWORD *)v58 + 72))(&v428, v58, v415);
    if ((v415[23] & 0x80000000) != 0)
      operator delete(*(void **)v415);
    v4 = v404;
    v14 = v386;
    v6 = &v407->__vftable;
    v8 = v408;
    if (!v432)
    {
      AMSCore::Log::error<char const(&)[31]>();
      v62 = 0;
      v61 = 1;
      goto LABEL_720;
    }
    AMSCore::URL::getStringRepresentation(v386, &v437);
    v20 = v428.__vftable;
    imp = v428.__imp_.__imp_;
    if (v428.__vftable == (std::runtime_error_vtbl *)v428.__imp_.__imp_)
    {
LABEL_714:
      v62 = 0;
      goto LABEL_717;
    }
    v373 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
    v374 = *(void **)(MEMORY[0x1E0DE4F60] + 8);
    v370 = (void *)*MEMORY[0x1E0DE4F60];
    v369 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    v372 = MEMORY[0x1E0DE4FE0] + 64;
    v371 = MEMORY[0x1E0DE4FB8] + 16;
    v376 = v428.__imp_.__imp_;
    while (2)
    {
      if (LODWORD(v20[1].~runtime_error) != 5)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v425);
        v69 = *(_QWORD *)v425;
        if (*(int *)(*(_QWORD *)v425 + 8) <= 4)
        {
          v445[0] = v372;
          rep = v374;
          *(void **)((char *)&rep + *((_QWORD *)v374 - 3)) = v373;
          v70 = (std::ios_base *)((char *)&rep + *((_QWORD *)rep - 3));
          std::ios_base::init(v70, &v439);
          v70[1].__vftable = 0;
          v70[1].__fmtflags_ = -1;
          rep = (void *)(MEMORY[0x1E0DE4FE0] + 24);
          v445[0] = MEMORY[0x1E0DE4FE0] + 64;
          std::streambuf::basic_streambuf();
          *(_QWORD *)&v439 = v371;
          v442 = 0u;
          v443 = 0u;
          v444 = 16;
          v71 = *((_QWORD *)rep - 3);
          if ((v72 & 1) == 0
          {
            v4 = v404;
            v14 = v386;
            v6 = &v407->__vftable;
            v8 = v408;
            imp = v376;
          }
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&rep, (uint64_t)"GUID regex is not a string. regex = ", 36);
          v73 = v441;
          v74 = (char *)&rep + *((_QWORD *)rep - 3);
          if ((v74[32] & 5) != 0)
          {
            v75 = -1;
          }
          else
          {
            (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v74 + 5)
                                                                                           + 32))(v446, *((_QWORD *)v74 + 5), 0, 1, 16);
            v75 = v446[16];
          }
          *(std::chrono::system_clock::time_point *)v415 = std::chrono::system_clock::now();
          *(_DWORD *)&v415[8] = 4;
          *(_QWORD *)&v415[16] = v73;
          *(_QWORD *)&v415[24] = v75;
          (*(void (**)(_QWORD, const char *, uint64_t, _BYTE *))(**(_QWORD **)(v69 + 16) + 16))(*(_QWORD *)(v69 + 16), "networking", 10, v415);
          rep = v370;
          *(void **)((char *)&rep + *((_QWORD *)v370 - 3)) = v369;
          *(_QWORD *)&v439 = MEMORY[0x1E0DE4FB8] + 16;
          if (SBYTE7(v443) < 0)
            operator delete((void *)v442);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D789B58](v445);
        }
        v21 = *(std::runtime_error_vtbl **)&v425[8];
        if (*(_QWORD *)&v425[8])
        {
          v86 = (unint64_t *)(*(_QWORD *)&v425[8] + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            (*((void (**)(std::runtime_error_vtbl *))v21->~runtime_error + 2))(v21);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
          }
        }
LABEL_95:
        v20 = (std::runtime_error_vtbl *)((char *)v20 + 32);
        if (v20 == (std::runtime_error_vtbl *)imp)
          goto LABEL_714;
        continue;
      }
      break;
    }
    MEMORY[0x18D789AEC](v425);
    *(_QWORD *)&v425[8] = std::locale::use_facet((const std::locale *)v425, MEMORY[0x1E0DE4A90]);
    *(_QWORD *)&v425[16] = std::locale::use_facet((const std::locale *)v425, MEMORY[0x1E0DE4C08]);
    *(_OWORD *)&v425[24] = 0u;
    v426 = 0u;
    *(_QWORD *)&v427 = 0;
    v63 = (void (__cdecl *)(std::runtime_error *__hidden))HIBYTE(v20->what);
    if ((char)v63 >= 0)
      v64 = (std::basic_regex<char>::value_type *)v20;
    else
      v64 = (std::basic_regex<char>::value_type *)v20->~runtime_error;
    if ((char)v63 < 0)
      v63 = v20->~runtime_error_0;
    if ((char *)v63 + (_QWORD)v64 != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v425, v64, (char *)v63 + (_QWORD)v64))std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)17>();
    v416 = 0;
    *(_QWORD *)v417 = 0;
    v417[8] = 0;
    *(_QWORD *)&v417[16] = 0;
    *(_QWORD *)&v417[24] = 0;
    LOBYTE(v418) = 0;
    BYTE8(v418) = 0;
    v419 = 0;
    *(_QWORD *)v415 = 0;
    *(_QWORD *)&v415[8] = 0;
    if ((v437.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v437;
    else
      v65 = (std::string *)v437.__r_.__value_.__r.__words[0];
    if ((v437.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v437.__r_.__value_.__r.__words[2]);
    else
      size = v437.__r_.__value_.__l.__size_;
    v67 = (char *)v65 + size;
    *(_QWORD *)&v415[16] = 0;
    *(_QWORD *)&v415[24] = (char *)v65 + size;
    *(_QWORD *)&v415[32] = (char *)v65 + size;
    v415[40] = 0;
    std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)v415, (*(_DWORD *)&v425[28] + 1), (std::vector<std::csub_match>::const_reference)&v415[24]);
    v416 = v65;
    *(_QWORD *)v417 = v65;
    v417[8] = 0;
    *(_OWORD *)&v417[16] = *(_OWORD *)&v415[24];
    LOBYTE(v418) = v415[40];
    v419 = v65;
    BYTE8(v418) = 1;
    if ((*(_WORD *)&v425[24] & 0x1F0) == 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, (uint64_t)v65, (const char *)v65 + size, (uint64_t *)v415, 0, 1);
      goto LABEL_119;
    }
    if (!*(_DWORD *)&v425[28])
    {
      std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, (uint64_t)v65, (uint64_t)v65 + size, (uint64_t *)v415, 0, 1);
LABEL_119:
      if ((v76 & 1) != 0)
        goto LABEL_120;
      goto LABEL_125;
    }
    std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, (uint64_t)v65, (const char *)v65 + size, (uint64_t *)v415, 0, 1);
    if (v68)
      goto LABEL_120;
LABEL_125:
    if (!size)
      goto LABEL_152;
    v81 = size - 1;
    if (v81)
    {
      v82 = (uint64_t)v65->__r_.__value_.__r.__words + 1;
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)v415, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v415[8] - *(_QWORD *)v415) >> 3), (std::vector<std::csub_match>::const_reference)&v415[24]);
        if ((*(_WORD *)&v425[24] & 0x1F0) == 0)
          break;
        if (!*(_DWORD *)&v425[28])
        {
          std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, v82, (uint64_t)v67, (uint64_t *)v415, 128, 0);
LABEL_134:
          if ((v84 & 1) != 0)
            goto LABEL_120;
          goto LABEL_135;
        }
        std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, v82, v67, (uint64_t *)v415, 128, 0);
        if (v83)
          goto LABEL_120;
LABEL_135:
        std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)v415, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v415[8] - *(_QWORD *)v415) >> 3), (std::vector<std::csub_match>::const_reference)&v415[24]);
        ++v82;
        if (!--v81)
          goto LABEL_136;
      }
      std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, v82, v67, (uint64_t *)v415, 128, 0);
      goto LABEL_134;
    }
LABEL_136:
    std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)v415, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v415[8] - *(_QWORD *)v415) >> 3), (std::vector<std::csub_match>::const_reference)&v415[24]);
    if ((*(_WORD *)&v425[24] & 0x1F0) == 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, (uint64_t)v67, v67, (uint64_t *)v415, 128, 0);
      goto LABEL_151;
    }
    if (!*(_DWORD *)&v425[28])
    {
      std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, (uint64_t)v67, (uint64_t)v67, (uint64_t *)v415, 128, 0);
LABEL_151:
      if ((v88 & 1) != 0)
        goto LABEL_120;
      goto LABEL_152;
    }
    std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>((uint64_t)v425, (uint64_t)v67, v67, (uint64_t *)v415, 128, 0);
    if (!v85)
    {
LABEL_152:
      v80 = 0;
      v77 = *(void **)v415;
      goto LABEL_153;
    }
LABEL_120:
    v77 = *(void **)v415;
    v78 = &v415[24];
    if (*(_QWORD *)&v415[8] != *(_QWORD *)v415)
      v78 = *(_QWORD **)v415;
    *(_QWORD *)v417 = *v78;
    v417[8] = v416 != *(std::string **)v417;
    v79 = &v415[32];
    if (*(_QWORD *)&v415[8] != *(_QWORD *)v415)
      v79 = (_QWORD *)(*(_QWORD *)v415 + 8);
    *(_QWORD *)&v417[16] = *v79;
    LOBYTE(v418) = *(_QWORD *)&v417[16] != *(_QWORD *)&v417[24];
    v80 = 1;
LABEL_153:
    imp = v376;
    if (v77)
    {
      *(_QWORD *)&v415[8] = v77;
      operator delete(v77);
    }
    v21 = (std::runtime_error_vtbl *)*((_QWORD *)&v426 + 1);
    if (*((_QWORD *)&v426 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v426 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        (*((void (**)(std::runtime_error_vtbl *))v21->~runtime_error + 2))(v21);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
      }
    }
    std::locale::~locale((std::locale *)v425);
    if ((v80 & 1) == 0)
      goto LABEL_95;
    v62 = 1;
LABEL_717:
    if (SHIBYTE(v437.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v437.__r_.__value_.__l.__data_);
    v61 = 0;
LABEL_720:
    v366 = v428.__vftable;
    if (v432)
    {
      if (v428.__vftable)
      {
        imp = v428.__imp_.__imp_;
        v367 = v428.__vftable;
        if (v428.__imp_.__imp_ != (const char *)v428.__vftable)
        {
          do
          {
            v21 = (std::runtime_error_vtbl *)(imp - 32);
            v368 = *((unsigned int *)imp - 2);
            if ((_DWORD)v368 != -1)
              ((void (*)(_BYTE *, const char *))off_1E253D240[v368])(v415, imp - 32);
            *((_DWORD *)imp - 2) = -1;
            imp -= 32;
          }
          while (v21 != v366);
          v367 = v428.__vftable;
          v6 = &v407->__vftable;
          v8 = v408;
        }
        v428.__imp_.__imp_ = (const char *)v366;
        operator delete(v367);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v428.~runtime_error)(&v428);
    }
LABEL_164:
    v27 = v62 == 0;
LABEL_165:
    v91 = *(std::runtime_error_vtbl **)out;
    if (v450[16])
    {
      if (*(_QWORD *)out)
      {
        imp = *(const char **)&out[8];
        v92 = *(void **)out;
        if (*(_QWORD *)&out[8] != *(_QWORD *)out)
        {
          do
          {
            v21 = (std::runtime_error_vtbl *)(imp - 32);
            v93 = *((unsigned int *)imp - 2);
            if ((_DWORD)v93 != -1)
              ((void (*)(_BYTE *, const char *))off_1E253D240[v93])(v415, imp - 32);
            *((_DWORD *)imp - 2) = -1;
            imp -= 32;
          }
          while (v21 != v91);
          v92 = *(void **)out;
          v6 = &v407->__vftable;
          v8 = v408;
        }
        *(_QWORD *)&out[8] = v91;
        operator delete(v92);
      }
    }
    else
    {
      (**(void (***)(_BYTE *))out)(out);
    }
    if (v61)
      v94 = 1;
    else
      v94 = v27;
    v28 = (unint64_t)&AMSCore::TaskCounter::getCount(void)::count;
    if ((v94 & 1) == 0)
    {
      v415[23] = 4;
      strcpy(v415, "guid");
      if (v434)
        goto LABEL_40;
LABEL_731:
      __break(1u);
LABEL_732:
      {
        *((_DWORD *)imp + 436) = std::ios_base::xalloc();
      }
      continue;
    }
    break;
  }
  if (v434 && SHIBYTE(v433[2]) < 0)
    operator delete(v433[0]);
  v95 = (char *)operator new(0x150uLL);
  *((_QWORD *)v95 + 1) = 0;
  v96 = (unint64_t *)(v95 + 8);
  *((_QWORD *)v95 + 2) = 0;
  *(_QWORD *)v95 = &off_1E2522AB8;
  out[0] = 0;
  out[24] = 0;
  v97 = v4[1328];
  if (v4[1328])
  {
    *(_OWORD *)out = *(_OWORD *)v14;
    *(_QWORD *)&out[16] = *((_QWORD *)v14 + 2);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    out[24] = 1;
  }
  LOBYTE(v448) = 0;
  v450[0] = 0;
  v98 = v4[1360];
  if (v4[1360])
  {
    v448 = *(_OWORD *)v396;
    v449 = (std::string *)*((_QWORD *)v396 + 2);
    *((_QWORD *)v396 + 1) = 0;
    *((_QWORD *)v396 + 2) = 0;
    *(_QWORD *)v396 = 0;
    v450[0] = 1;
  }
  v450[8] = 0;
  v452 = 0;
  v99 = v4[1392];
  if (v4[1392])
  {
    *(_OWORD *)&v450[8] = *(_OWORD *)v395;
    v451 = *((_QWORD *)v395 + 2);
    *((_QWORD *)v395 + 1) = 0;
    *((_QWORD *)v395 + 2) = 0;
    *(_QWORD *)v395 = 0;
    v452 = 1;
  }
  v453 = *((_DWORD *)v4 + 350);
  v100 = (std::string **)&v454;
  v454 = &v454;
  v455 = (std::string **)&v454;
  v456 = 0;
  v101 = *((_QWORD *)v4 + 178);
  if (v101)
  {
    v102 = (uint64_t *)*((_QWORD *)v4 + 177);
    v103 = (_QWORD *)*((_QWORD *)v4 + 176);
    v104 = *v102;
    *(_QWORD *)(v104 + 8) = v103[1];
    *(_QWORD *)v103[1] = v104;
    v105 = v454;
    v454[1] = v102;
    *v102 = (uint64_t)v105;
    v454 = v103;
    v103[1] = &v454;
    v456 = v101;
    *((_QWORD *)v4 + 178) = 0;
    v100 = (std::string **)v103;
  }
  v457 = *(_OWORD *)v413;
  v458 = *(_QWORD *)(v413 + 16);
  *(_QWORD *)(v413 + 8) = 0;
  *(_QWORD *)(v413 + 16) = 0;
  *(_QWORD *)v413 = 0;
  v95[24] = 0;
  v95[96] = 0;
  v415[0] = 0;
  v415[24] = 0;
  if (v97)
  {
    *(_OWORD *)v415 = *(_OWORD *)out;
    *(_QWORD *)&v415[16] = *(_QWORD *)&out[16];
    memset(out, 0, 24);
    v415[24] = 1;
  }
  v415[32] = 0;
  v417[0] = 0;
  if (v98)
  {
    *(_OWORD *)&v415[32] = v448;
    v416 = v449;
    v449 = 0;
    v448 = 0uLL;
    v417[0] = 1;
  }
  v417[8] = 0;
  LOBYTE(v418) = 0;
  if (v99)
  {
    *(_OWORD *)&v417[8] = *(_OWORD *)&v450[8];
    *(_QWORD *)&v417[24] = v451;
    *(_QWORD *)&v450[16] = 0;
    v451 = 0;
    *(_QWORD *)&v450[8] = 0;
    LOBYTE(v418) = 1;
  }
  DWORD2(v418) = v453;
  v419 = (std::string *)&v419;
  v420 = &v419;
  v421 = 0;
  if (v101)
  {
    v106 = v455;
    v107 = (std::string::size_type)*v455;
    *(_QWORD *)(v107 + 8) = v100[1];
    v100[1]->__r_.__value_.__r.__words[0] = v107;
    v108 = v419;
    v419->__r_.__value_.__l.__size_ = (std::string::size_type)v106;
    *v106 = v108;
    v419 = (std::string *)v100;
    v100[1] = (std::string *)&v419;
    v421 = v101;
    v456 = 0;
  }
  else
  {
    v100 = &v419;
  }
  v422 = v457;
  v423 = v458;
  v458 = 0;
  v457 = 0uLL;
  v95[104] = 0;
  v95[128] = 0;
  if (v97)
  {
    *(_OWORD *)(v95 + 104) = *(_OWORD *)v415;
    *((_QWORD *)v95 + 15) = *(_QWORD *)&v415[16];
    memset(v415, 0, 24);
    v95[128] = 1;
  }
  v95[136] = 0;
  v95[160] = 0;
  if (v98)
  {
    *(_OWORD *)(v95 + 136) = *(_OWORD *)&v415[32];
    *((_QWORD *)v95 + 19) = v416;
    *(_QWORD *)&v415[40] = 0;
    v416 = 0;
    *(_QWORD *)&v415[32] = 0;
    v95[160] = 1;
  }
  v20 = (std::runtime_error_vtbl *)(v95 + 24);
  v95[168] = 0;
  v95[192] = 0;
  if (v99)
  {
    *(_OWORD *)(v95 + 168) = *(_OWORD *)&v417[8];
    *((_QWORD *)v95 + 23) = *(_QWORD *)&v417[24];
    memset(&v417[8], 0, 24);
    v95[192] = 1;
  }
  *((_DWORD *)v95 + 50) = DWORD2(v418);
  *((_QWORD *)v95 + 26) = v95 + 208;
  *((_QWORD *)v95 + 27) = v95 + 208;
  *((_QWORD *)v95 + 28) = 0;
  if (v101)
  {
    v109 = v420;
    v110 = *v420;
    *(_QWORD *)(v110 + 8) = v100[1];
    v100[1]->__r_.__value_.__r.__words[0] = v110;
    v111 = *((_QWORD *)v95 + 26);
    *(_QWORD *)(v111 + 8) = v109;
    *v109 = v111;
    *((_QWORD *)v95 + 26) = v100;
    v100[1] = (std::string *)(v95 + 208);
    *((_QWORD *)v95 + 28) = v101;
    v421 = 0;
  }
  *(_OWORD *)(v95 + 232) = v422;
  *((_QWORD *)v95 + 31) = v423;
  v423 = 0;
  v422 = 0uLL;
  *((_DWORD *)v95 + 64) = 2;
  *(_OWORD *)(v95 + 264) = 0u;
  *(_OWORD *)(v95 + 280) = 0u;
  *((_DWORD *)v95 + 74) = 1065353216;
  *((_QWORD *)v95 + 39) = 0;
  *((_QWORD *)v95 + 40) = 0;
  *((_QWORD *)v95 + 38) = 0;
  v95[328] = 0;
  AMSCore::URL::~URL((AMSCore::URL *)v415);
  AMSCore::URL::~URL((AMSCore::URL *)out);
  *((_QWORD *)v4 + 262) = v20;
  *((_QWORD *)v4 + 263) = v95;
  v112 = *((_QWORD *)v4 + 264);
  if (!v112)
  {
LABEL_454:
    v277 = v8->__vftable;
    if ((LODWORD(v8->__vftable[3].~runtime_error_0) - 1) <= 0xFFFFFFFD)
    {
      if ((LODWORD(v277[7].~runtime_error_0) - 5) >= 3)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v415);
        AMSCore::Logger::log<char [41]>(*(uint64_t *)v415, 4, (uint64_t)"networking", 10, "Setting body on incompatible HTTP method");
        v278 = *(std::__shared_weak_count **)&v415[8];
        if (*(_QWORD *)&v415[8])
        {
          v279 = (unint64_t *)(*(_QWORD *)&v415[8] + 8);
          do
            v280 = __ldaxr(v279);
          while (__stlxr(v280 - 1, v279));
          if (!v280)
          {
            ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
            std::__shared_weak_count::__release_weak(v278);
          }
        }
      }
      __asm { BR              X10 }
    }
    *(_QWORD *)out = operator new(0x20uLL);
    *(_OWORD *)&out[8] = xmmword_18CF51B50;
    strcpy(*(char **)out, "X-Apple-NSURLCachePolicy");
    v415[0] = 0;
    v415[24] = 0;
    if (LOBYTE(v277[5].~runtime_error))
    {
      if (SHIBYTE(v277[4].what) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v415, (const std::string::value_type *)v277[4].~runtime_error, (std::string::size_type)v277[4].~runtime_error_0);
      }
      else
      {
        *(_OWORD *)v415 = *(_OWORD *)&v277[4].~runtime_error;
        *(_QWORD *)&v415[16] = v277[4].what;
      }
      v415[24] = 1;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v20[10].~runtime_error, out);
    if (v415[24])
    {
      std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(&v20[10].~runtime_error, (uint64_t)out, (uint64_t)v415);
      if (v415[24])
      {
        if ((v415[23] & 0x80000000) != 0)
          operator delete(*(void **)v415);
      }
    }
    if ((out[23] & 0x80000000) != 0)
      operator delete(*(void **)out);
    v281 = *v409;
    what = v8->__vftable[1].what;
    *(_QWORD *)v425 = operator new(0x20uLL);
    v413 = 26;
    *(_OWORD *)&v425[8] = xmmword_18CF51B80;
    strcpy(*(char **)v425, "X-Apple-Client-Application");
    (*(void (**)(_BYTE *__return_ptr, const char *(__cdecl *)(const std::runtime_error *__hidden)))(*(_QWORD *)what + 32))(out, what);
    *(_OWORD *)v415 = *(_OWORD *)out;
    *(_QWORD *)&v415[16] = *(_QWORD *)&out[16];
    memset(out, 0, 24);
    v415[24] = 1;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v281 + 240), v425);
    if (v415[24])
    {
      std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v281 + 240), (uint64_t)v425, (uint64_t)v415);
      if (v415[24])
      {
        if ((v415[23] & 0x80000000) != 0)
          operator delete(*(void **)v415);
      }
    }
    if ((out[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)out);
      if ((v425[23] & 0x80000000) == 0)
        goto LABEL_479;
    }
    else if ((v425[23] & 0x80000000) == 0)
    {
LABEL_479:
      AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(out);
      v283 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)out + 24))(*(_QWORD *)out);
      v284 = v283;
      v285 = *(std::__shared_weak_count **)&out[8];
      if (!*(_QWORD *)&out[8])
        goto LABEL_483;
      v286 = (unint64_t *)(*(_QWORD *)&out[8] + 8);
      do
        v287 = __ldaxr(v286);
      while (__stlxr(v287 - 1, v286));
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
        if (v284 != 1)
          goto LABEL_511;
      }
      else
      {
LABEL_483:
        if (v283 != 1)
          goto LABEL_511;
      }
      (*(void (**)(std::string *__return_ptr, const char *(__cdecl *)(const std::runtime_error *__hidden)))(*(_QWORD *)what + 40))(&v437, what);
      v288 = v437.__r_.__value_.__r.__words[0];
      if (v437.__r_.__value_.__r.__words[0])
      {
        v433[0] = operator new(0x19uLL);
        *(_OWORD *)&v433[1] = xmmword_18CF51B20;
        strcpy((char *)v433[0], "X-Apple-Issuing-Process");
        (*(void (**)(std::runtime_error *__return_ptr, std::string::size_type))(*(_QWORD *)v288 + 32))(&v428, v288);
        *(std::runtime_error *)out = v428;
        *(_QWORD *)&out[16] = v429;
        *(_QWORD *)&v429 = 0;
        v428.__vftable = 0;
        v428.__imp_.__imp_ = 0;
        out[24] = 1;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v281 + 240), (char *)v433);
        if (out[24])
        {
          std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v281 + 240), (uint64_t)v433, (uint64_t)out);
          if (out[24])
          {
            if ((out[23] & 0x80000000) != 0)
              operator delete(*(void **)out);
          }
        }
        if (SBYTE7(v429) < 0)
          operator delete(v428.__vftable);
        if (SHIBYTE(v433[2]) < 0)
          operator delete(v433[0]);
      }
      v289 = (std::__shared_weak_count *)v437.__r_.__value_.__l.__size_;
      if (v437.__r_.__value_.__l.__size_)
      {
        v290 = (unint64_t *)(v437.__r_.__value_.__l.__size_ + 8);
        do
          v291 = __ldaxr(v290);
        while (__stlxr(v291 - 1, v290));
        if (!v291)
        {
          ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
          std::__shared_weak_count::__release_weak(v289);
        }
      }
      v437.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v437.__r_.__value_.__r.__words[1] = xmmword_18CF51B80;
      strcpy(v437.__r_.__value_.__l.__data_, "X-Apple-Requesting-Process");
      (*(void (**)(void **__return_ptr, const char *(__cdecl *)(const std::runtime_error *__hidden)))(*(_QWORD *)what + 32))(v435, what);
      v428 = *(std::runtime_error *)v435;
      *(_QWORD *)&v429 = v436;
      v436 = 0;
      v435[0] = 0;
      v435[1] = 0;
      BYTE8(v429) = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v281 + 240), (char *)&v437);
      if (BYTE8(v429))
      {
        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v281 + 240), (uint64_t)&v437, (uint64_t)&v428);
        if (BYTE8(v429))
        {
          if (SBYTE7(v429) < 0)
            operator delete(v428.__vftable);
        }
      }
      if (SHIBYTE(v436) < 0)
      {
        operator delete(v435[0]);
        if ((SHIBYTE(v437.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_511;
      }
      else if ((SHIBYTE(v437.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_511;
      }
      operator delete(v437.__r_.__value_.__l.__data_);
LABEL_511:
      v292 = *v409;
      v293.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      AMSCore::localTimeSecondsFromUTC((uint64_t)v415, v293.__d_.__rep_);
      BYTE7(v429) = 10;
      strcpy((char *)&v428, "X-Apple-Tz");
      if (!v417[16])
        std::__throw_bad_expected_access[abi:fe180100]<AMSCore::Error,AMSCore::Error const&>((const std::runtime_error *)v415);
      std::to_string((std::string *)v425, *(uint64_t *)v415);
      *(_OWORD *)out = *(_OWORD *)v425;
      *(_QWORD *)&out[16] = *(_QWORD *)&v425[16];
      memset(v425, 0, 24);
      out[24] = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v292 + 240), (char *)&v428);
      if (out[24])
      {
        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v292 + 240), (uint64_t)&v428, (uint64_t)out);
        if (out[24])
        {
          if ((out[23] & 0x80000000) != 0)
            operator delete(*(void **)out);
        }
      }
      if ((v425[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v425);
        if ((SBYTE7(v429) & 0x80000000) == 0)
        {
LABEL_518:
          if (v417[16])
            goto LABEL_519;
LABEL_579:
          (**(void (***)(_BYTE *))v415)(v415);
LABEL_519:
          v294 = v8->__vftable;
          AMSCore::UserAgent::create((AMSCore::UserAgent *)v8->__vftable[1].what, (std::string *)out);
          if (LOBYTE(v294[15].~runtime_error_0))
          {
            AMSCore::StringUtils::join<std::string,std::string>((std::string *)v415, (uint64_t)out, (uint64_t)&v294[14].~runtime_error_0);
            if ((out[23] & 0x80000000) != 0)
              operator delete(*(void **)out);
            *(_OWORD *)out = *(_OWORD *)v415;
            *(_QWORD *)&out[16] = *(_QWORD *)&v415[16];
          }
          BYTE7(v429) = 10;
          strcpy((char *)&v428, "User-Agent");
          *(_OWORD *)v415 = *(_OWORD *)out;
          *(_QWORD *)&v415[16] = *(_QWORD *)&out[16];
          memset(out, 0, 24);
          v415[24] = 1;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v292 + 240), (char *)&v428);
          if (v415[24])
          {
            std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v292 + 240), (uint64_t)&v428, (uint64_t)v415);
            if (v415[24])
            {
              if ((v415[23] & 0x80000000) != 0)
                operator delete(*(void **)v415);
            }
          }
          if (SBYTE7(v429) < 0)
          {
            operator delete(v428.__vftable);
            if ((out[23] & 0x80000000) == 0)
              goto LABEL_529;
          }
          else if ((out[23] & 0x80000000) == 0)
          {
LABEL_529:
            AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(v6);
            v4[1855] = 15;
            qmemcpy(v391, "Accept-Language", 15);
            v4[1847] = 0;
            (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)v4 + 211) + 56))(v415);
            *(_OWORD *)v402 = *(_OWORD *)v415;
            *(_QWORD *)(v402 + 16) = *(_QWORD *)&v415[16];
            memset(v415, 0, 24);
            v4[1824] = 1;
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v292 + 240), (char *)v391);
            if (v4[1824])
            {
              std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v292 + 240), (uint64_t)v391, v402);
              if (v4[1824])
              {
                if (v4[1823] < 0)
                  operator delete(*(void **)v402);
              }
            }
            if ((v415[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v415);
              if ((v4[1855] & 0x80000000) == 0)
                goto LABEL_535;
            }
            else if ((v4[1855] & 0x80000000) == 0)
            {
LABEL_535:
              *(_DWORD *)(v292 + 232) = v294[7].~runtime_error_0;
              if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6) == 1
                && LOBYTE(v294[7].~runtime_error))
              {
                AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v415);
                AMSCore::Logger::log<char [36]>(*(uint64_t *)v415);
                v295 = *(std::__shared_weak_count **)&v415[8];
                if (*(_QWORD *)&v415[8])
                {
                  v296 = (unint64_t *)(*(_QWORD *)&v415[8] + 8);
                  do
                    v297 = __ldaxr(v296);
                  while (__stlxr(v297 - 1, v296));
                  if (!v297)
                  {
                    ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                    std::__shared_weak_count::__release_weak(v295);
                  }
                }
                v292 = *((_QWORD *)v4 + 262);
                v4[1879] = 12;
                *(_DWORD *)(v378 + 8) = 1414808906;
                *(_QWORD *)v378 = *(_QWORD *)"X-Apple-JETT";
                v4[1868] = 0;
                *(_WORD *)(v4 + 1791) = 257;
                *((_WORD *)v4 + 884) = 49;
                std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v292 + 240), (char *)v378);
                if (v4[1792])
                {
                  std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v292 + 240), v378, (uint64_t)v377);
                  if (v4[1792])
                  {
                    if (v4[1791] < 0)
                      operator delete(*v377);
                  }
                }
                if (v4[1879] < 0)
                  operator delete(*(void **)v378);
              }
              v27 = (uint64_t)v8->__vftable;
              for (i = v8->__vftable[6].~runtime_error; i; i = *(void (__cdecl **)(std::runtime_error *__hidden))i)
              {
                while (1)
                {
                  if (*((char *)i + 39) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)out, *((const std::string::value_type **)i + 2), *((_QWORD *)i + 3));
                  }
                  else
                  {
                    *(_OWORD *)out = *((_OWORD *)i + 1);
                    *(_QWORD *)&out[16] = *((_QWORD *)i + 4);
                  }
                  if (*((char *)i + 63) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v415, *((const std::string::value_type **)i + 5), *((_QWORD *)i + 6));
                  }
                  else
                  {
                    *(_OWORD *)v415 = *(_OWORD *)((char *)i + 40);
                    *(_QWORD *)&v415[16] = *((_QWORD *)i + 7);
                  }
                  v415[24] = 1;
                  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v292 + 240), out);
                  if (v415[24])
                  {
                    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v292 + 240), (uint64_t)out, (uint64_t)v415);
                    if (v415[24])
                    {
                      if ((v415[23] & 0x80000000) != 0)
                        operator delete(*(void **)v415);
                    }
                  }
                  if ((out[23] & 0x80000000) != 0)
                    break;
                  i = *(void (__cdecl **)(std::runtime_error *__hidden))i;
                  if (!i)
                    goto LABEL_563;
                }
                operator delete(*(void **)out);
              }
LABEL_563:
              *((_QWORD *)v4 + 266) = v292;
              v299 = *((_QWORD *)v4 + 263);
              *((_QWORD *)v4 + 267) = v299;
              if (v299)
              {
                v300 = (unint64_t *)(v299 + 8);
                do
                  v301 = __ldxr(v300);
                while (__stxr(v301 + 1, v300));
              }
              *((_QWORD *)v4 + 268) = v27;
              v302 = *((_QWORD *)v4 + 271);
              *((_QWORD *)v4 + 269) = v302;
              imp = (const char *)off_1E2521330;
              if (v302)
              {
                v303 = (unint64_t *)(v302 + 8);
                do
                  v304 = __ldxr(v303);
                while (__stxr(v304 + 1, v303));
              }
              v28 = (unint64_t)v400;
              v305 = *((_OWORD *)v4 + 124);
              *((_OWORD *)v4 + 139) = v305;
              v400->__vftable = 0;
              v400->__imp_.__imp_ = 0;
              if (!atomic_load((unint64_t *)(v305 + 96)))
              {
                *v401 = 4;
                v307 = (unint64_t *)(*((_QWORD *)v4 + 278) + 96);
                do
                  v308 = __ldaxr(v307);
                while (__stlxr((unint64_t)v4, v307));
                if (!v308)
                  return;
              }
              v21 = (std::runtime_error_vtbl *)*((_QWORD *)v4 + 278);
              if (!LOBYTE(v21[3].what))
                goto LABEL_731;
              v309 = (char)v21[3].~runtime_error_0;
              if (!v309)
              {
                std::runtime_error::runtime_error(v411, (const std::runtime_error *)&v21->~runtime_error_0);
                *(_OWORD *)(v4 + 1624) = *(_OWORD *)&v21[1].~runtime_error;
                *((_QWORD *)v4 + 201) = off_1E2521330;
                v310 = v21 + 2;
                v311 = v21[2].~runtime_error;
                *((_QWORD *)v4 + 205) = v21[1].what;
                v312 = v4 + 1648;
                *((_QWORD *)v4 + 206) = v311;
                v313 = v21[2].~runtime_error_0;
                *((_QWORD *)v4 + 207) = v313;
                if (v313)
                {
                  *((_QWORD *)v311 + 2) = v312;
                  v21[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v310;
                  v310->~runtime_error = 0;
                  v21[2].~runtime_error_0 = 0;
                }
                else
                {
                  *((_QWORD *)v4 + 205) = v312;
                }
                v314 = *((_QWORD *)v4 + 278);
                *((_OWORD *)v4 + 104) = *(_OWORD *)(v314 + 64);
                *(_QWORD *)(v314 + 64) = 0;
                *(_QWORD *)(v314 + 72) = 0;
              }
              v4[1680] = v309;
              v315 = *((_QWORD *)v4 + 279);
              v28 = (unint64_t)&AMSCore::TaskCounter::getCount(void)::count;
              if (v315)
              {
                v316 = (unint64_t *)(v315 + 8);
                do
                  v317 = __ldaxr(v316);
                while (__stlxr(v317 - 1, v316));
                if (!v317)
                {
                  v318 = (std::__shared_weak_count *)*((_QWORD *)v4 + 279);
                  ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                  std::__shared_weak_count::__release_weak(v318);
                }
              }
              v319 = (std::__shared_weak_count *)*((_QWORD *)v4 + 249);
              if (v319)
              {
                p_shared_owners = (unint64_t *)&v319->__shared_owners_;
                do
                  v321 = __ldaxr(p_shared_owners);
                while (__stlxr(v321 - 1, p_shared_owners));
                if (!v321)
                {
                  ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                  std::__shared_weak_count::__release_weak(v319);
                }
              }
              v322 = (std::__shared_weak_count *)*((_QWORD *)v4 + 269);
              if (!v322)
                goto LABEL_600;
              v323 = (unint64_t *)&v322->__shared_owners_;
              do
                v324 = __ldaxr(v323);
              while (__stlxr(v324 - 1, v323));
              if (!v324)
              {
                ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                std::__shared_weak_count::__release_weak(v322);
                v325 = (std::__shared_weak_count *)*((_QWORD *)v4 + 267);
                if (!v325)
                  goto LABEL_604;
              }
              else
              {
LABEL_600:
                v325 = (std::__shared_weak_count *)*((_QWORD *)v4 + 267);
                if (!v325)
                  goto LABEL_604;
              }
              v326 = (unint64_t *)&v325->__shared_owners_;
              do
                v327 = __ldaxr(v326);
              while (__stlxr(v327 - 1, v326));
              if (!v327)
              {
                ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                std::__shared_weak_count::__release_weak(v325);
                if (v4[1680])
                  goto LABEL_605;
                goto LABEL_618;
              }
LABEL_604:
              if (v4[1680])
              {
LABEL_605:
                v21 = v8->__vftable;
                v328 = *v409;
                *(_BYTE *)(v328 + 304) = v8->__vftable[14].~runtime_error;
                AMSCore::HTTPRequestBuilder::buildSPtr((AMSCore::HTTPRequestBuilder *)out, v328);
                if (v450[16])
                {
                  v27 = (uint64_t)v379;
                  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v379, (uint64_t)v21);
                  if (!v450[16])
                    goto LABEL_731;
                  v414 = *(_OWORD *)out;
                  *(_QWORD *)out = 0;
                  *(_QWORD *)&out[8] = 0;
                  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v415, (uint64_t)v379);
                  v424 = v414;
                  if (v4[424])
                  {
                    if (v4[416])
                    {
                      v329 = (std::__shared_weak_count *)*((_QWORD *)v4 + 51);
                      if (v329)
                      {
                        v330 = (unint64_t *)&v329->__shared_owners_;
                        do
                          v331 = __ldaxr(v330);
                        while (__stlxr(v331 - 1, v330));
                        if (!v331)
                        {
                          ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                          std::__shared_weak_count::__release_weak(v329);
                        }
                      }
                      AMSCore::EncodeHTTPRequestTask::Options::~Options(v403);
                    }
                    else
                    {
                      (*(void (**)(void **))*v403)(v403);
                    }
                    v4[424] = 0;
                  }
                  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v403, (uint64_t)v415);
                  *((_OWORD *)v4 + 25) = v424;
                  v424 = 0uLL;
                  v4[416] = 1;
                  v4[424] = 1;
                  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v415);
                  AMSCore::EncodeHTTPRequestTask::Options::~Options(v379);
                }
                else
                {
                  std::runtime_error::runtime_error((std::runtime_error *)v415, (const std::runtime_error *)out);
                  *(_OWORD *)&v415[16] = *(_OWORD *)&out[16];
                  *(_QWORD *)v415 = off_1E2521330;
                  *(_OWORD *)&v415[32] = v448;
                  v416 = v449;
                  if (v449)
                  {
                    *(_QWORD *)(*((_QWORD *)&v448 + 1) + 16) = &v415[40];
                    *(_QWORD *)&v448 = (char *)&v448 + 8;
                    *((_QWORD *)&v448 + 1) = 0;
                    v449 = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v415[32] = &v415[40];
                  }
                  *(_OWORD *)v417 = *(_OWORD *)v450;
                  *(_QWORD *)v450 = 0;
                  *(_QWORD *)&v450[8] = 0;
                  v417[16] = 1;
                  std::runtime_error::runtime_error(&v428, (const std::runtime_error *)v415);
                  v429 = *(_OWORD *)&v415[16];
                  v428.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  *(_QWORD *)v430 = *(_QWORD *)&v415[32];
                  *(_QWORD *)&v430[8] = *(_QWORD *)&v415[40];
                  *(_QWORD *)&v430[16] = v416;
                  if (v416)
                  {
                    *(_QWORD *)(*(_QWORD *)&v415[40] + 16) = &v430[8];
                    *(_QWORD *)&v415[32] = &v415[40];
                    *(_QWORD *)&v415[40] = 0;
                    v416 = 0;
                  }
                  else
                  {
                    *(_QWORD *)v430 = &v430[8];
                  }
                  v431 = *(_OWORD *)v417;
                  *(_QWORD *)v417 = 0;
                  *(_QWORD *)&v417[8] = 0;
                  std::runtime_error::runtime_error((std::runtime_error *)v425, &v428);
                  *(_OWORD *)&v425[16] = v429;
                  v336 = *(unsigned int **)&v430[8];
                  *(_QWORD *)v425 = off_1E2521330;
                  *(_QWORD *)&v425[32] = *(_QWORD *)v430;
                  v426 = *(_OWORD *)&v430[8];
                  if (*(_QWORD *)&v430[16])
                  {
                    *(_QWORD *)(*(_QWORD *)&v430[8] + 16) = &v426;
                    v336 = 0;
                    *(_QWORD *)v430 = &v430[8];
                    *(_QWORD *)&v430[8] = 0;
                    *(_QWORD *)&v430[16] = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v425[32] = &v426;
                  }
                  v427 = v431;
                  v431 = 0uLL;
                  v428.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v430, v336);
                  MEMORY[0x18D7898AC](&v428);
                  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)v403, (std::runtime_error *)v425);
                  *(_QWORD *)v425 = off_1E2521330;
                  v337 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
                  if (*((_QWORD *)&v427 + 1))
                  {
                    v338 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
                    do
                      v339 = __ldaxr(v338);
                    while (__stlxr(v339 - 1, v338));
                    if (!v339)
                    {
                      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                      std::__shared_weak_count::__release_weak(v337);
                    }
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v425[32], (unsigned int *)v426);
                  MEMORY[0x18D7898AC](v425);
                  if (v417[16])
                  {
                    *(_QWORD *)v415 = off_1E2521330;
                    v340 = *(std::__shared_weak_count **)&v417[8];
                    if (*(_QWORD *)&v417[8])
                    {
                      v341 = (unint64_t *)(*(_QWORD *)&v417[8] + 8);
                      do
                        v342 = __ldaxr(v341);
                      while (__stlxr(v342 - 1, v341));
                      if (!v342)
                      {
                        ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                        std::__shared_weak_count::__release_weak(v340);
                      }
                    }
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v415[32], *(unsigned int **)&v415[40]);
                    MEMORY[0x18D7898AC](v415);
                  }
                }
                if (v450[16])
                {
                  v343 = *(std::__shared_weak_count **)&out[8];
                  if (*(_QWORD *)&out[8])
                  {
                    v344 = (unint64_t *)(*(_QWORD *)&out[8] + 8);
                    do
                      v345 = __ldaxr(v344);
                    while (__stlxr(v345 - 1, v344));
                    if (!v345)
                    {
                      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                      std::__shared_weak_count::__release_weak(v343);
                    }
                  }
                }
                else
                {
                  (**(void (***)(_BYTE *))out)(out);
                }
LABEL_661:
                v346 = (std::__shared_weak_count *)*((_QWORD *)v4 + 212);
                if (v346)
                {
                  v347 = (unint64_t *)&v346->__shared_owners_;
                  do
                    v348 = __ldaxr(v347);
                  while (__stlxr(v348 - 1, v347));
                  if (!v348)
                  {
                    ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                    std::__shared_weak_count::__release_weak(v346);
                  }
                }
                v349 = (std::__shared_weak_count *)*((_QWORD *)v4 + 263);
                if (v349)
                  goto LABEL_690;
                goto LABEL_694;
              }
LABEL_618:
              *(_DWORD *)out = 604;
              AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::FairPlayErrorCode>((uint64_t)v415, (uint64_t)v411, (unsigned int *)out);
              std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)v403, (std::runtime_error *)v415);
              *(_QWORD *)v415 = off_1E2521330;
              v332 = *(std::__shared_weak_count **)&v417[8];
              if (*(_QWORD *)&v417[8])
              {
                v333 = (unint64_t *)(*(_QWORD *)&v417[8] + 8);
                do
                  v334 = __ldaxr(v333);
                while (__stlxr(v334 - 1, v333));
                if (!v334)
                {
                  ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                  std::__shared_weak_count::__release_weak(v332);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v415[32], *(unsigned int **)&v415[40]);
              MEMORY[0x18D7898AC](v415);
              if (!v4[1680])
                ((void (*)(std::runtime_error *))v411->~runtime_error)(v411);
              goto LABEL_661;
            }
            operator delete(*v391);
            goto LABEL_535;
          }
          operator delete(*(void **)out);
          goto LABEL_529;
        }
      }
      else if ((SBYTE7(v429) & 0x80000000) == 0)
      {
        goto LABEL_518;
      }
      operator delete(v428.__vftable);
      if (v417[16])
        goto LABEL_519;
      goto LABEL_579;
    }
    operator delete(*(void **)v425);
    goto LABEL_479;
  }
  *((_QWORD *)v4 + 260) = v20;
  *((_QWORD *)v4 + 261) = v95;
  do
    v113 = __ldxr(v96);
  while (__stxr(v113 + 1, v96));
  *((_QWORD *)v4 + 258) = v112;
  v114 = *((_QWORD *)v4 + 265);
  *((_QWORD *)v4 + 259) = v114;
  if (v114)
  {
    v115 = (unint64_t *)(v114 + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  *((_QWORD *)v4 + 246) = *((_QWORD *)v4 + 270);
  v117 = *((_QWORD *)v4 + 271);
  *((_QWORD *)v4 + 247) = v117;
  if (v117)
  {
    v118 = (unint64_t *)(v117 + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  v387 = v14;
  v405 = (unint64_t)v4;
  v120 = (char *)operator new(0x180uLL);
  v20 = (std::runtime_error_vtbl *)v120;
  v121 = (std::runtime_error *)(v120 + 264);
  v122 = *(_OWORD *)v397;
  v21 = (std::runtime_error_vtbl *)(v120 + 64);
  v4 = v120 + 144;
  v123 = (uint64_t)(v120 + 216);
  v27 = (uint64_t)(v120 + 240);
  v8 = (std::runtime_error *)(v120 + 280);
  v14 = (AMSCore::URL *)(v120 + 368);
  *(_QWORD *)v397 = 0;
  *((_QWORD *)v397 + 1) = 0;
  v124 = *(_OWORD *)v398;
  *(_OWORD *)(v120 + 296) = v122;
  *(_OWORD *)(v120 + 312) = v124;
  *(_QWORD *)v398 = 0;
  *((_QWORD *)v398 + 1) = 0;
  *(_OWORD *)(v120 + 328) = *(_OWORD *)v399;
  *(_QWORD *)v399 = 0;
  *((_QWORD *)v399 + 1) = 0;
  do
    v125 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v125 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_WORD *)(v120 + 17) = 0;
  *((_QWORD *)v120 + 3) = 0;
  *((_QWORD *)v120 + 7) = 0;
  v399 = v120 + 16;
  std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(v415, (uint64_t)(v120 + 16));
  v126 = 0;
  *v411 = *(std::runtime_error *)v415;
  v20[15].~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))0x200000001;
  v413 = (uint64_t)&v20[4].~runtime_error_0;
  while (1)
  {
    v20[14].~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v126;
    v127 = v20[13].what;
    v128 = *((_DWORD *)v14 + v126);
    LOBYTE(v20[10].~runtime_error) = 0;
    LOBYTE(v20[10].what) = 0;
    v28 = *((unsigned int *)v127 + 5);
    if ((_DWORD)v28 != v128)
    {
      v20[10].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))*((_QWORD *)v127 + 3);
      v129 = *((_QWORD *)v127 + 4);
      v20[10].~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v129;
      if (v129)
      {
        v130 = (unint64_t *)(v129 + 8);
        do
          v131 = __ldxr(v130);
        while (__stxr(v131 + 1, v130));
      }
      LOBYTE(v20[10].what) = 1;
    }
    v132 = v20[12].what;
    v20[11].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v20[12].~runtime_error_0;
    v20[12].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))v132;
    if (v132)
    {
      v133 = (unint64_t *)((char *)v132 + 8);
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    v135 = (__int128 *)(*((uint64_t (**)(std::runtime_error_vtbl *))v121[3].~runtime_error + 9))(v121[3].__vftable);
    std::__optional_destruct_base<AMSCore::AccountIdentity,false>::__optional_destruct_base[abi:fe180100]<AMSCore::AccountIdentity const&>((std::string *)v4, v135);
    LOBYTE(v20[9].~runtime_error) = 0;
    LOBYTE(v20[9].what) = 0;
    if ((_DWORD)v28 != v128)
    {
      *(_OWORD *)&v20[9].~runtime_error = *(_OWORD *)&v20[10].~runtime_error;
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v27 + 8) = 0;
      LOBYTE(v20[9].what) = 1;
    }
    AMSCore::AnisetteUtils::addHeaders(v121, v8, (void (**)(AMSCore::Error *__hidden))v4, v128, v123);
    v136 = *v121;
    *(std::runtime_error *)&v20[14].what = *v121;
    v121->__vftable = 0;
    v121->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v136.__vftable[4]))
    {
      LOBYTE(v121[7].__vftable) = 0;
      v138 = (unint64_t *)((char *)v20[14].what + 96);
      do
        v139 = __ldaxr(v138);
      while (__stlxr((unint64_t)v20, v138));
      if (!v139)
        break;
    }
    imp = (const char *)v20[14].what;
    if (!imp[88])
      goto LABEL_731;
    v140 = imp[80];
    if (!v140)
    {
      std::runtime_error::runtime_error((std::runtime_error *)v21, (const std::runtime_error *)(imp + 8));
      *(_OWORD *)&v20[3].~runtime_error_0 = *(_OWORD *)(imp + 24);
      v20[2].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))off_1E2521330;
      v141 = imp + 48;
      v142 = *((_QWORD *)imp + 6);
      v20[4].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))*((_QWORD *)imp + 5);
      v20[4].~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v142;
      v143 = (const char *(__cdecl *)(const std::runtime_error *__hidden))*((_QWORD *)imp + 7);
      v20[4].what = v143;
      if (v143)
      {
        *(_QWORD *)(v142 + 16) = v413;
        *((_QWORD *)imp + 5) = v141;
        *v141 = 0;
        *((_QWORD *)imp + 7) = 0;
      }
      else
      {
        v20[4].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))v413;
      }
      v144 = v20[14].what;
      *(_OWORD *)&v20[5].~runtime_error = *((_OWORD *)v144 + 4);
      *((_QWORD *)v144 + 8) = 0;
      *((_QWORD *)v144 + 9) = 0;
    }
    LOBYTE(v20[5].what) = v140;
    v145 = v20[15].~runtime_error;
    if (!v145)
      goto LABEL_244;
    v146 = (unint64_t *)((char *)v145 + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      v151 = (std::__shared_weak_count *)v20[15].~runtime_error;
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
      v148 = (std::__shared_weak_count *)v20[11].~runtime_error_0;
      if (!v148)
        goto LABEL_250;
    }
    else
    {
LABEL_244:
      v148 = (std::__shared_weak_count *)v20[11].~runtime_error_0;
      if (!v148)
        goto LABEL_250;
    }
    v149 = (unint64_t *)&v148->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
    if (!LOBYTE(v20[9].what))
      goto LABEL_255;
    v152 = (std::__shared_weak_count *)v20[9].~runtime_error_0;
    if (!v152)
      goto LABEL_255;
LABEL_250:
    v153 = (unint64_t *)&v152->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
      if (!LOBYTE(v20[8].what))
        goto LABEL_261;
    }
    else
    {
LABEL_255:
      if (!LOBYTE(v20[8].what))
        goto LABEL_261;
    }
    if (SHIBYTE(v20[8].~runtime_error_0) < 0)
      operator delete(v20[7].what);
    if (LOBYTE(v20[7].~runtime_error) && SHIBYTE(v20[6].what) < 0)
      operator delete(*(void **)v4);
LABEL_261:
    v155 = (std::__shared_weak_count *)v20[12].~runtime_error;
    if (!v155)
      goto LABEL_736;
    v156 = (unint64_t *)&v155->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
      if (LOBYTE(v20[5].what))
        goto LABEL_277;
    }
    else
    {
LABEL_736:
      if (LOBYTE(v20[5].what))
        goto LABEL_277;
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v121);
    AMSCore::Logger::log<char [41],AMSCore::Error>((uint64_t)v121->__vftable, 3, (uint64_t)"networking", 10, "Failed to set Anisette headers. error = ", (uint64_t)v21);
    v158 = (std::__shared_weak_count *)v20[11].~runtime_error_0;
    if (!v158)
      goto LABEL_737;
    v159 = (unint64_t *)&v158->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (v160)
    {
LABEL_737:
      if (LOBYTE(v20[5].what))
        goto LABEL_277;
LABEL_271:
      (*(void (**)(std::runtime_error_vtbl *))v21->~runtime_error)(v21);
      goto LABEL_277;
    }
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
    if (!LOBYTE(v20[5].what))
      goto LABEL_271;
LABEL_277:
    if (LOBYTE(v20[10].what))
    {
      v161 = (std::__shared_weak_count *)v20[10].~runtime_error_0;
      if (v161)
      {
        v162 = (unint64_t *)&v161->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
    }
    v126 = (uint64_t)v20[14].~runtime_error_0 + 1;
    if (v20[14].~runtime_error_0 == (void (__cdecl *)(std::runtime_error *__hidden))1)
    {
      BYTE2(v20->what) = 1;
      v20[2].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v399;
      v20->~runtime_error = 0;
      AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v21);
      break;
    }
  }
  v164 = *v411;
  v4 = (char *)v405;
  *(std::runtime_error *)(v405 + 2176) = *v411;
  v411->__vftable = 0;
  v411->__imp_.__imp_ = 0;
  v165 = atomic_load((unint64_t *)&v164.~runtime_error_0);
  v14 = v387;
  v6 = &v407->__vftable;
  v8 = v408;
  imp = (const char *)off_1E2521330;
  if (!v165)
  {
    *v401 = 0;
    v166 = (unint64_t *)(*(_QWORD *)(v405 + 2176) + 8);
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v405, v166));
    if (!v167)
      return;
  }
  v168 = *(_QWORD *)(v405 + 2184);
  if (v168)
  {
    v169 = (unint64_t *)(v168 + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      v171 = *(std::__shared_weak_count **)(v405 + 2184);
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v172 = *(std::__shared_weak_count **)(v405 + 1616);
  if (v172)
  {
    v173 = (unint64_t *)&v172->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = *(std::__shared_weak_count **)(v405 + 1976);
  if (v175)
  {
    v176 = (unint64_t *)&v175->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = *(std::__shared_weak_count **)(v405 + 2072);
  if (v178)
  {
    v179 = (unint64_t *)&v178->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = *(std::__shared_weak_count **)(v405 + 2088);
  if (v181)
  {
    v182 = (unint64_t *)&v181->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  *(_QWORD *)(v405 + 1904) = *(_QWORD *)(v405 + 2096);
  v184 = *(_QWORD *)(v405 + 2104);
  *(_QWORD *)(v405 + 1912) = v184;
  if (v184)
  {
    v185 = (unint64_t *)(v184 + 8);
    do
      v186 = __ldxr(v185);
    while (__stxr(v186 + 1, v185));
  }
  *(_QWORD *)(v405 + 1920) = *(_QWORD *)(v405 + 2112);
  v187 = *(_QWORD *)(v405 + 2120);
  *(_QWORD *)(v405 + 1928) = v187;
  v28 = v393;
  if (v187)
  {
    v188 = (unint64_t *)(v187 + 8);
    do
      v189 = __ldxr(v188);
    while (__stxr(v189 + 1, v188));
  }
  (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden)))(*(_QWORD *)v408->__vftable[1].what
                                                                                      + 16))(v408->__vftable[1].what);
  v190 = *v407;
  *(std::runtime_error *)(v405 + 2192) = *v407;
  v407->__vftable = 0;
  v407->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)&v190.__vftable[4]))
  {
    *v401 = 1;
    v192 = (unint64_t *)(*(_QWORD *)(v405 + 2192) + 96);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v405, v192));
    if (!v193)
      return;
  }
  v21 = *(std::runtime_error_vtbl **)(v405 + 2192);
  if (!LOBYTE(v21[3].what))
    goto LABEL_731;
  v194 = (char)v21[3].~runtime_error_0;
  if (!v194)
  {
    std::runtime_error::runtime_error(v411, (const std::runtime_error *)&v21->~runtime_error_0);
    *(_OWORD *)(v405 + 1624) = *(_OWORD *)&v21[1].~runtime_error;
    *(_QWORD *)(v405 + 1608) = off_1E2521330;
    v195 = v21 + 2;
    v196 = v21[2].~runtime_error;
    *(_QWORD *)(v405 + 1640) = v21[1].what;
    v197 = v405 + 1648;
    *(_QWORD *)(v405 + 1648) = v196;
    v198 = v21[2].~runtime_error_0;
    *(_QWORD *)(v405 + 1656) = v198;
    if (v198)
    {
      *((_QWORD *)v196 + 2) = v197;
      v21[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v195;
      v195->~runtime_error = 0;
      v21[2].~runtime_error_0 = 0;
    }
    else
    {
      *(_QWORD *)(v405 + 1640) = v197;
    }
    v199 = *(_QWORD *)(v405 + 2192);
    *(_OWORD *)(v405 + 1664) = *(_OWORD *)(v199 + 64);
    *(_QWORD *)(v199 + 64) = 0;
    *(_QWORD *)(v199 + 72) = 0;
  }
  *(_BYTE *)(v405 + 1680) = v194;
  v200 = *(_QWORD *)(v405 + 2200);
  if (v200)
  {
    v201 = (unint64_t *)(v200 + 8);
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      v252 = *(std::__shared_weak_count **)(v405 + 2200);
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
      v203 = *(std::__shared_weak_count **)(v405 + 1696);
      if (v203)
        goto LABEL_336;
      goto LABEL_339;
    }
  }
  v203 = *(std::__shared_weak_count **)(v405 + 1696);
  if (!v203)
    goto LABEL_339;
LABEL_336:
  v204 = (unint64_t *)&v203->__shared_owners_;
  do
    v205 = __ldaxr(v204);
  while (__stlxr(v205 - 1, v204));
  if (v205)
  {
LABEL_339:
    if (*(char *)(v405 + 1903) < 0)
      goto LABEL_340;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
    if (*(char *)(v405 + 1903) < 0)
LABEL_340:
      operator delete(*v394);
  }
  v206 = *(std::__shared_weak_count **)(v405 + 1928);
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
      v209 = *(std::__shared_weak_count **)(v405 + 1912);
      if (v209)
        goto LABEL_346;
      goto LABEL_349;
    }
  }
  v209 = *(std::__shared_weak_count **)(v405 + 1912);
  if (!v209)
    goto LABEL_349;
LABEL_346:
  v210 = (unint64_t *)&v209->__shared_owners_;
  do
    v211 = __ldaxr(v210);
  while (__stlxr(v211 - 1, v210));
  if (v211)
  {
LABEL_349:
    if (*(_BYTE *)(v405 + 1680))
      goto LABEL_350;
LABEL_404:
    std::runtime_error::runtime_error((std::runtime_error *)v415, v411);
    *(_OWORD *)&v415[16] = *(_OWORD *)(v405 + 1624);
    *(_QWORD *)v415 = off_1E2521330;
    v253 = *(_QWORD *)(v405 + 1648);
    *(_QWORD *)&v415[32] = *(_QWORD *)(v405 + 1640);
    *(_QWORD *)&v415[40] = v253;
    v416 = *(std::string **)(v405 + 1656);
    if (v416)
    {
      *(_QWORD *)(v253 + 16) = &v415[40];
      *(_QWORD *)(v405 + 1640) = v405 + 1648;
      *(_QWORD *)(v405 + 1648) = 0;
      *(_QWORD *)(v405 + 1656) = 0;
    }
    else
    {
      *(_QWORD *)&v415[32] = &v415[40];
    }
    *(_OWORD *)v417 = *(_OWORD *)(v405 + 1664);
    *(_QWORD *)(v405 + 1672) = 0;
    *(_QWORD *)(v405 + 1664) = 0;
    v417[16] = 1;
    std::runtime_error::runtime_error((std::runtime_error *)out, (const std::runtime_error *)v415);
    *(_OWORD *)&out[16] = *(_OWORD *)&v415[16];
    *(_QWORD *)out = off_1E2521330;
    v448 = *(_OWORD *)&v415[32];
    v449 = v416;
    if (v416)
    {
      *(_QWORD *)(*(_QWORD *)&v415[40] + 16) = (char *)&v448 + 8;
      *(_QWORD *)&v415[32] = &v415[40];
      *(_QWORD *)&v415[40] = 0;
      v416 = 0;
    }
    else
    {
      *(_QWORD *)&v448 = (char *)&v448 + 8;
    }
    *(_OWORD *)v450 = *(_OWORD *)v417;
    *(_QWORD *)v417 = 0;
    *(_QWORD *)&v417[8] = 0;
    std::runtime_error::runtime_error(&v428, (const std::runtime_error *)out);
    v429 = *(_OWORD *)&out[16];
    v428.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v254 = (unsigned int *)*((_QWORD *)&v448 + 1);
    *(_OWORD *)v430 = v448;
    *(_QWORD *)&v430[16] = v449;
    if (v449)
    {
      *(_QWORD *)(*((_QWORD *)&v448 + 1) + 16) = &v430[8];
      v254 = 0;
      *(_QWORD *)&v448 = (char *)&v448 + 8;
      *((_QWORD *)&v448 + 1) = 0;
      v449 = 0;
    }
    else
    {
      *(_QWORD *)v430 = &v430[8];
    }
    v8 = v408;
    v431 = *(_OWORD *)v450;
    *(_QWORD *)v450 = 0;
    *(_QWORD *)&v450[8] = 0;
    *(_QWORD *)out = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v448, v254);
    MEMORY[0x18D7898AC](out);
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)v403, &v428);
    v428.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v255 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
    v6 = &v407->__vftable;
    if (*((_QWORD *)&v431 + 1))
    {
      v256 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
      do
        v257 = __ldaxr(v256);
      while (__stlxr(v257 - 1, v256));
      if (!v257)
      {
        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
        std::__shared_weak_count::__release_weak(v255);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v430, *(unsigned int **)&v430[8]);
    MEMORY[0x18D7898AC](&v428);
    if (v417[16])
    {
      *(_QWORD *)v415 = off_1E2521330;
      v258 = *(std::__shared_weak_count **)&v417[8];
      if (*(_QWORD *)&v417[8])
      {
        v259 = (unint64_t *)(*(_QWORD *)&v417[8] + 8);
        do
          v260 = __ldaxr(v259);
        while (__stlxr(v260 - 1, v259));
        goto LABEL_684;
      }
      goto LABEL_686;
    }
    goto LABEL_687;
  }
  ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
  std::__shared_weak_count::__release_weak(v209);
  if (!*(_BYTE *)(v405 + 1680))
    goto LABEL_404;
LABEL_350:
  *(_QWORD *)(v405 + 1936) = *(_QWORD *)(v405 + 2096);
  v212 = *(_QWORD *)(v405 + 2104);
  *(_QWORD *)(v405 + 1944) = v212;
  if (v212)
  {
    v213 = (unint64_t *)(v212 + 8);
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
  }
  *(_QWORD *)(v405 + 1952) = *(_QWORD *)(v405 + 2112);
  v215 = *(_QWORD *)(v405 + 2120);
  *(_QWORD *)(v405 + 1960) = v215;
  if (v215)
  {
    v216 = (unint64_t *)(v215 + 8);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
  }
  v218 = *v407;
  *(std::runtime_error *)(v405 + 2208) = *v407;
  v407->__vftable = 0;
  v407->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)&v218.~runtime_error_0))
  {
    *v401 = 2;
    v220 = (unint64_t *)(*(_QWORD *)(v405 + 2208) + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v405, v220));
    if (!v221)
      return;
  }
  v222 = *(_QWORD *)(v405 + 2216);
  if (v222)
  {
    v223 = (unint64_t *)(v222 + 8);
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      v225 = *(std::__shared_weak_count **)(v405 + 2216);
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v226 = *(std::__shared_weak_count **)(v405 + 1696);
  if (v226)
  {
    v227 = (unint64_t *)&v226->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = *(std::__shared_weak_count **)(v405 + 1960);
  if (v229)
  {
    v230 = (unint64_t *)&v229->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v21 = *(std::runtime_error_vtbl **)(v405 + 1944);
  if (v21)
  {
    v232 = (unint64_t *)&v21->~runtime_error_0;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      (*((void (**)(std::runtime_error_vtbl *))v21->~runtime_error + 2))(v21);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
    }
  }
  *(_QWORD *)(v405 + 2016) = *(_QWORD *)(v405 + 2096);
  v234 = *(_QWORD *)(v405 + 2104);
  *(_QWORD *)(v405 + 2024) = v234;
  if (v234)
  {
    v235 = (unint64_t *)(v234 + 8);
    do
      v236 = __ldxr(v235);
    while (__stxr(v236 + 1, v235));
  }
  *(_QWORD *)(v405 + 2032) = *(_QWORD *)(v405 + 2112);
  v237 = *(_QWORD *)(v405 + 2120);
  *(_QWORD *)(v405 + 2040) = v237;
  if (v237)
  {
    v238 = (unint64_t *)(v237 + 8);
    do
      v239 = __ldxr(v238);
    while (__stxr(v239 + 1, v238));
  }
  *(_QWORD *)(v405 + 2048) = *(_QWORD *)(v405 + 2160);
  v240 = *(_QWORD *)(v405 + 2168);
  *(_QWORD *)(v405 + 2056) = v240;
  if (v240)
  {
    v241 = (unint64_t *)(v240 + 8);
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  v243 = *(_OWORD *)(v405 + 2000);
  v383->__vftable = 0;
  v383->__imp_.__imp_ = 0;
  *(_OWORD *)(v405 + 1984) = v243;
  if (!atomic_load((unint64_t *)(v243 + 96)))
  {
    *v401 = 3;
    v245 = (unint64_t *)(*(_QWORD *)(v405 + 1984) + 96);
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v405, v245));
    if (!v246)
      return;
  }
  v28 = (unint64_t)v400->__vftable;
  if (!LOBYTE(v400->__vftable[3].what))
    goto LABEL_731;
  v247 = *(_BYTE *)(v28 + 80);
  if (!v247)
  {
    std::runtime_error::runtime_error(v407, (const std::runtime_error *)(v28 + 8));
    *(_OWORD *)(v405 + 1704) = *(_OWORD *)(v28 + 24);
    *(_QWORD *)(v405 + 1688) = off_1E2521330;
    v248 = (_QWORD *)(v28 + 48);
    v249 = *(_QWORD *)(v28 + 48);
    *(_QWORD *)(v405 + 1720) = *(_QWORD *)(v28 + 40);
    v250 = v405 + 1728;
    *(_QWORD *)(v405 + 1728) = v249;
    v251 = *(_QWORD *)(v28 + 56);
    *(_QWORD *)(v405 + 1736) = v251;
    if (v251)
    {
      *(_QWORD *)(v249 + 16) = v250;
      *(_QWORD *)(v28 + 40) = v248;
      *v248 = 0;
      *(_QWORD *)(v28 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v405 + 1720) = v250;
    }
    *(_OWORD *)(v405 + 1744) = *(_OWORD *)(v28 + 64);
    *(_QWORD *)(v28 + 64) = 0;
    *(_QWORD *)(v28 + 72) = 0;
  }
  *(_BYTE *)(v405 + 1760) = v247;
  std::expected<void,AMSCore::Error>::operator=[abi:fe180100](v411, v407);
  if (!*(_BYTE *)(v405 + 1760))
    ((void (*)(std::runtime_error *))v407->~runtime_error)(v407);
  v261 = *(std::__shared_weak_count **)(v405 + 1992);
  if (v261)
  {
    v262 = (unint64_t *)&v261->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
  v264 = *(std::__shared_weak_count **)(v405 + 2008);
  if (v264)
  {
    v265 = (unint64_t *)&v264->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = *(std::__shared_weak_count **)(v405 + 2056);
  if (v267)
  {
    v268 = (unint64_t *)&v267->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  v270 = *(std::__shared_weak_count **)(v405 + 2040);
  if (v270)
  {
    v271 = (unint64_t *)&v270->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
      v273 = *(std::__shared_weak_count **)(v405 + 2024);
      if (v273)
        goto LABEL_447;
      goto LABEL_450;
    }
  }
  v273 = *(std::__shared_weak_count **)(v405 + 2024);
  if (!v273)
    goto LABEL_450;
LABEL_447:
  v274 = (unint64_t *)&v273->__shared_owners_;
  do
    v275 = __ldaxr(v274);
  while (__stlxr(v275 - 1, v274));
  if (!v275)
  {
    ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
    std::__shared_weak_count::__release_weak(v273);
    if (!*(_BYTE *)(v405 + 1680))
      goto LABEL_630;
LABEL_451:
    v276 = 0;
    if (!*(_BYTE *)(v405 + 1680))
      goto LABEL_452;
LABEL_688:
    if (v276)
      goto LABEL_689;
LABEL_453:
    v20 = (std::runtime_error_vtbl *)*v409;
    goto LABEL_454;
  }
LABEL_450:
  if (*(_BYTE *)(v405 + 1680))
    goto LABEL_451;
LABEL_630:
  std::runtime_error::runtime_error((std::runtime_error *)v415, v411);
  *(_OWORD *)&v415[16] = *(_OWORD *)(v405 + 1624);
  *(_QWORD *)v415 = off_1E2521330;
  v335 = *(_QWORD *)(v405 + 1648);
  *(_QWORD *)&v415[32] = *(_QWORD *)(v405 + 1640);
  *(_QWORD *)&v415[40] = v335;
  v416 = *(std::string **)(v405 + 1656);
  if (v416)
  {
    *(_QWORD *)(v335 + 16) = &v415[40];
    *(_QWORD *)(v405 + 1640) = v405 + 1648;
    *(_QWORD *)(v405 + 1648) = 0;
    *(_QWORD *)(v405 + 1656) = 0;
  }
  else
  {
    *(_QWORD *)&v415[32] = &v415[40];
  }
  *(_OWORD *)v417 = *(_OWORD *)(v405 + 1664);
  *(_QWORD *)(v405 + 1672) = 0;
  *(_QWORD *)(v405 + 1664) = 0;
  v417[16] = 1;
  std::runtime_error::runtime_error((std::runtime_error *)out, (const std::runtime_error *)v415);
  *(_OWORD *)&out[16] = *(_OWORD *)&v415[16];
  *(_QWORD *)out = off_1E2521330;
  v448 = *(_OWORD *)&v415[32];
  v449 = v416;
  if (v416)
  {
    *(_QWORD *)(*(_QWORD *)&v415[40] + 16) = (char *)&v448 + 8;
    *(_QWORD *)&v415[32] = &v415[40];
    *(_QWORD *)&v415[40] = 0;
    v416 = 0;
  }
  else
  {
    *(_QWORD *)&v448 = (char *)&v448 + 8;
  }
  *(_OWORD *)v450 = *(_OWORD *)v417;
  *(_QWORD *)v417 = 0;
  *(_QWORD *)&v417[8] = 0;
  std::runtime_error::runtime_error(&v428, (const std::runtime_error *)out);
  v429 = *(_OWORD *)&out[16];
  v428.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v350 = (unsigned int *)*((_QWORD *)&v448 + 1);
  *(_OWORD *)v430 = v448;
  *(_QWORD *)&v430[16] = v449;
  if (v449)
  {
    *(_QWORD *)(*((_QWORD *)&v448 + 1) + 16) = &v430[8];
    v350 = 0;
    *(_QWORD *)&v448 = (char *)&v448 + 8;
    *((_QWORD *)&v448 + 1) = 0;
    v449 = 0;
  }
  else
  {
    *(_QWORD *)v430 = &v430[8];
  }
  v8 = v408;
  v431 = *(_OWORD *)v450;
  *(_QWORD *)v450 = 0;
  *(_QWORD *)&v450[8] = 0;
  *(_QWORD *)out = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v448, v350);
  MEMORY[0x18D7898AC](out);
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)v403, &v428);
  v428.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v351 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
  v6 = &v407->__vftable;
  if (*((_QWORD *)&v431 + 1))
  {
    v352 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
    do
      v353 = __ldaxr(v352);
    while (__stlxr(v353 - 1, v352));
    if (!v353)
    {
      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
      std::__shared_weak_count::__release_weak(v351);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v430, *(unsigned int **)&v430[8]);
  MEMORY[0x18D7898AC](&v428);
  if (v417[16])
  {
    *(_QWORD *)v415 = off_1E2521330;
    v258 = *(std::__shared_weak_count **)&v417[8];
    if (*(_QWORD *)&v417[8])
    {
      v354 = (unint64_t *)(*(_QWORD *)&v417[8] + 8);
      do
        v260 = __ldaxr(v354);
      while (__stlxr(v260 - 1, v354));
LABEL_684:
      if (!v260)
      {
        ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
        std::__shared_weak_count::__release_weak(v258);
      }
    }
LABEL_686:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v415[32], *(unsigned int **)&v415[40]);
    MEMORY[0x18D7898AC](v415);
  }
LABEL_687:
  v276 = 3;
  if (*(_BYTE *)(v405 + 1680))
    goto LABEL_688;
LABEL_452:
  ((void (*)(std::runtime_error *))v411->~runtime_error)(v411);
  if (!v276)
    goto LABEL_453;
LABEL_689:
  v349 = *(std::__shared_weak_count **)(v405 + 2104);
  if (v349)
  {
LABEL_690:
    v355 = (unint64_t *)&v349->__shared_owners_;
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
LABEL_694:
  AMSCore::URL::~URL(v14);
  if (v4[1296])
  {
    *((_QWORD *)v4 + 153) = off_1E2521330;
    v357 = (std::__shared_weak_count *)*((_QWORD *)v4 + 161);
    if (v357)
    {
      v358 = (unint64_t *)&v357->__shared_owners_;
      do
        v359 = __ldaxr(v358);
      while (__stlxr(v359 - 1, v358));
      if (!v359)
      {
        ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
        std::__shared_weak_count::__release_weak(v357);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(v4 + 1256), *((unsigned int **)v4 + 158));
    MEMORY[0x18D7898AC](v410);
  }
  v360 = (std::__shared_weak_count *)*((_QWORD *)v4 + 265);
  if (!v360)
    goto LABEL_705;
  v361 = (unint64_t *)&v360->__shared_owners_;
  do
    v362 = __ldaxr(v361);
  while (__stlxr(v362 - 1, v361));
  if (!v362)
  {
    ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
    std::__shared_weak_count::__release_weak(v360);
    v363 = (std::__shared_weak_count *)*((_QWORD *)v4 + 271);
    if (v363)
    {
LABEL_706:
      v364 = (unint64_t *)&v363->__shared_owners_;
      do
        v365 = __ldaxr(v364);
      while (__stlxr(v365 - 1, v364));
      if (!v365)
      {
        ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
        std::__shared_weak_count::__release_weak(v363);
      }
    }
  }
  else
  {
LABEL_705:
    v363 = (std::__shared_weak_count *)*((_QWORD *)v4 + 271);
    if (v363)
      goto LABEL_706;
  }
  *((_QWORD *)v4 + 153) = v406;
  *(_QWORD *)v4 = 0;
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend(v410);
}

void sub_18CCE6AC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x18CCE6DE8);
  _Unwind_Resume(a1);
}

void sub_18CCE6DF0(uint64_t a1, int a2)
{
  uint64_t v2;

  if (!a2)
    JUMPOUT(0x18CCE6DF8);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2);
  JUMPOUT(0x18CCE6E08);
}

void AMSCore::EncodeHTTPRequestTask::perform(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_18CCE6EF8()
{
  unint64_t v0;
  std::runtime_error *v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 *v6;
  uint64_t *v7;
  void **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::runtime_error v31;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::runtime_error v60;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::runtime_error v86;
  unint64_t *v88;
  unint64_t v89;
  std::runtime_error_vtbl *v90;
  char v91;
  _QWORD *v92;
  void **v93;
  std::runtime_error_vtbl *v94;
  void (__cdecl *v95)(std::runtime_error *__hidden);
  unint64_t v96;
  void (__cdecl *v97)(std::runtime_error *__hidden);
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *imp;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unsigned int *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  std::__shared_weak_count *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  int v139;
  int v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::runtime_error_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  std::chrono::system_clock::time_point v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t *i;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  __int128 v162;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  char v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void (*v194)(void);
  unsigned int *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  void **v219;
  uint64_t v220;
  void **v221;
  __int128 *v222;
  uint64_t *v223;
  uint64_t v224;
  _BYTE *v225;
  uint64_t v226;
  uint64_t v227;
  void **v228;
  uint64_t *v229;
  uint64_t *v230;
  std::runtime_error *v231;
  std::runtime_error *v232;
  uint64_t *v233;
  std::runtime_error *v234;
  __int128 v235;
  std::runtime_error v236;
  __int128 v237;
  unsigned int **v238;
  unsigned int *v239;
  uint64_t v240;
  __int128 v241;
  char *v242;
  __int128 v243;
  char *v244;
  __int128 v245;
  char *v246;
  __int128 v247;
  _BYTE v248[32];
  unsigned int **v249;
  unsigned int *v250;
  uint64_t v251;
  __int128 v252;
  char v253;
  std::runtime_error v254;
  __int128 v255;
  unsigned int **v256;
  unsigned int *v257;
  uint64_t v258;
  __int128 v259;
  std::runtime_error v260;
  __int128 v261;
  unsigned int **v262;
  unsigned int *v263;
  uint64_t v264;
  __int128 v265;
  char v266;
  __int128 v267;

  v9 = *(_QWORD *)(v0 + 2184);
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      v12 = *(std::__shared_weak_count **)(v0 + 2184);
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v13 = *(std::__shared_weak_count **)(v0 + 1616);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)(v0 + 1976);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(std::__shared_weak_count **)(v0 + 2072);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(std::__shared_weak_count **)(v0 + 2088);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_QWORD *)(v0 + 1904) = *(_QWORD *)(v0 + 2096);
  v25 = *(_QWORD *)(v0 + 2104);
  *(_QWORD *)(v0 + 1912) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(_QWORD *)(v0 + 1920) = *(_QWORD *)(v0 + 2112);
  v28 = *(_QWORD *)(v0 + 2120);
  *(_QWORD *)(v0 + 1928) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(*v233 + 40) + 16))(*(_QWORD *)(*v233 + 40));
  v31 = *v231;
  *(std::runtime_error *)(v0 + 2192) = *v231;
  v231->__vftable = 0;
  v231->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)&v31.__vftable[4]))
  {
    *v225 = 1;
    v33 = (unint64_t *)(*(_QWORD *)(v0 + 2192) + 96);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v0, v33));
    if (!v34)
      return;
  }
  v35 = *(_QWORD *)(v0 + 2192);
  if (!*(_BYTE *)(v35 + 88))
    goto LABEL_424;
  v36 = *(_BYTE *)(v35 + 80);
  if (!v36)
  {
    std::runtime_error::runtime_error(v234, (const std::runtime_error *)(v35 + 8));
    *(_OWORD *)(v0 + 1624) = *(_OWORD *)(v35 + 24);
    *(_QWORD *)(v0 + 1608) = off_1E2521330;
    v37 = (_QWORD *)(v35 + 48);
    v38 = *(_QWORD *)(v35 + 48);
    *(_QWORD *)(v0 + 1640) = *(_QWORD *)(v35 + 40);
    v39 = v0 + 1648;
    *(_QWORD *)(v0 + 1648) = v38;
    v40 = *(_QWORD *)(v35 + 56);
    *(_QWORD *)(v0 + 1656) = v40;
    if (v40)
    {
      *(_QWORD *)(v38 + 16) = v39;
      *(_QWORD *)(v35 + 40) = v37;
      *v37 = 0;
      *(_QWORD *)(v35 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v0 + 1640) = v39;
    }
    v41 = *(_QWORD *)(v0 + 2192);
    *(_OWORD *)(v0 + 1664) = *(_OWORD *)(v41 + 64);
    *(_QWORD *)(v41 + 64) = 0;
    *(_QWORD *)(v41 + 72) = 0;
  }
  *(_BYTE *)(v0 + 1680) = v36;
  v42 = *(_QWORD *)(v0 + 2200);
  if (!v42)
    goto LABEL_46;
  v43 = (unint64_t *)(v42 + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    v98 = *(std::__shared_weak_count **)(v0 + 2200);
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    v45 = *(std::__shared_weak_count **)(v0 + 1696);
    if (!v45)
      goto LABEL_50;
  }
  else
  {
LABEL_46:
    v45 = *(std::__shared_weak_count **)(v0 + 1696);
    if (!v45)
      goto LABEL_50;
  }
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if ((*(char *)(v0 + 1903) & 0x80000000) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_50:
  if (*(char *)(v0 + 1903) < 0)
LABEL_51:
    operator delete(*v8);
LABEL_52:
  v48 = *(std::__shared_weak_count **)(v0 + 1928);
  if (!v48)
    goto LABEL_56;
  v49 = (unint64_t *)&v48->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v51 = *(std::__shared_weak_count **)(v0 + 1912);
    if (!v51)
      goto LABEL_60;
  }
  else
  {
LABEL_56:
    v51 = *(std::__shared_weak_count **)(v0 + 1912);
    if (!v51)
      goto LABEL_60;
  }
  v52 = (unint64_t *)&v51->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (v53)
  {
LABEL_60:
    if (*(_BYTE *)(v0 + 1680))
      goto LABEL_61;
    goto LABEL_115;
  }
  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
  std::__shared_weak_count::__release_weak(v51);
  if (*(_BYTE *)(v0 + 1680))
  {
LABEL_61:
    *(_QWORD *)(v0 + 1936) = *(_QWORD *)(v0 + 2096);
    v54 = *(_QWORD *)(v0 + 2104);
    *(_QWORD *)(v0 + 1944) = v54;
    if (v54)
    {
      v55 = (unint64_t *)(v54 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    *(_QWORD *)(v0 + 1952) = *(_QWORD *)(v0 + 2112);
    v57 = *(_QWORD *)(v0 + 2120);
    *(_QWORD *)(v0 + 1960) = v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    v60 = *v231;
    *(std::runtime_error *)(v0 + 2208) = *v231;
    v231->__vftable = 0;
    v231->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v60.~runtime_error_0))
    {
      *v225 = 2;
      v62 = (unint64_t *)(*(_QWORD *)(v0 + 2208) + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v0, v62));
      if (!v63)
        return;
    }
    v64 = *(_QWORD *)(v0 + 2216);
    if (v64)
    {
      v65 = (unint64_t *)(v64 + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        v67 = *(std::__shared_weak_count **)(v0 + 2216);
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v68 = *(std::__shared_weak_count **)(v0 + 1696);
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = *(std::__shared_weak_count **)(v0 + 1960);
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = *(std::__shared_weak_count **)(v0 + 1944);
    if (v74)
    {
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    *(_QWORD *)(v0 + 2016) = *(_QWORD *)(v0 + 2096);
    v77 = *(_QWORD *)(v0 + 2104);
    *(_QWORD *)(v0 + 2024) = v77;
    if (v77)
    {
      v78 = (unint64_t *)(v77 + 8);
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    *(_QWORD *)(v0 + 2032) = *(_QWORD *)(v0 + 2112);
    v80 = *(_QWORD *)(v0 + 2120);
    *(_QWORD *)(v0 + 2040) = v80;
    if (v80)
    {
      v81 = (unint64_t *)(v80 + 8);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    *(_QWORD *)(v0 + 2048) = *(_QWORD *)(v0 + 2160);
    v83 = *(_QWORD *)(v0 + 2168);
    *(_QWORD *)(v0 + 2056) = v83;
    if (v83)
    {
      v84 = (unint64_t *)(v83 + 8);
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    v86 = *v1;
    v1->__vftable = 0;
    v1->__imp_.__imp_ = 0;
    *v232 = v86;
    if (!atomic_load((unint64_t *)&v86.__vftable[4]))
    {
      *v225 = 3;
      v88 = (unint64_t *)&v232->__vftable[4];
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v0, v88));
      if (!v89)
        return;
    }
    v90 = v232->__vftable;
    if (!LOBYTE(v232->__vftable[3].what))
      goto LABEL_424;
    v91 = (char)v90[3].~runtime_error_0;
    v92 = &v231->__vftable;
    v93 = v228;
    if (!v91)
    {
      std::runtime_error::runtime_error(v231, (const std::runtime_error *)&v90->~runtime_error_0);
      *(_OWORD *)(v0 + 1704) = *(_OWORD *)&v90[1].~runtime_error;
      *(_QWORD *)(v0 + 1688) = off_1E2521330;
      v94 = v90 + 2;
      v95 = v90[2].~runtime_error;
      *(_QWORD *)(v0 + 1720) = v90[1].what;
      v96 = v0 + 1728;
      *(_QWORD *)(v0 + 1728) = v95;
      v97 = v90[2].~runtime_error_0;
      *(_QWORD *)(v0 + 1736) = v97;
      if (v97)
      {
        *((_QWORD *)v95 + 2) = v96;
        v90[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v94;
        v94->~runtime_error = 0;
        v90[2].~runtime_error_0 = 0;
      }
      else
      {
        *(_QWORD *)(v0 + 1720) = v96;
      }
      *(_OWORD *)(v0 + 1744) = *(_OWORD *)&v90[2].what;
      v90[2].what = 0;
      v90[3].~runtime_error = 0;
    }
    *(_BYTE *)(v0 + 1760) = v91;
    std::expected<void,AMSCore::Error>::operator=[abi:fe180100](v234, v231);
    if (!*(_BYTE *)(v0 + 1760))
      ((void (*)())v231->~runtime_error)();
    v100 = *(std::__shared_weak_count **)(v0 + 1992);
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v103 = *(std::__shared_weak_count **)(v0 + 2008);
    if (v103)
    {
      v104 = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v106 = *(std::__shared_weak_count **)(v0 + 2056);
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = *(std::__shared_weak_count **)(v0 + 2040);
    if (!v109)
      goto LABEL_140;
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
      v112 = *(std::__shared_weak_count **)(v0 + 2024);
      if (!v112)
        goto LABEL_144;
    }
    else
    {
LABEL_140:
      v112 = *(std::__shared_weak_count **)(v0 + 2024);
      if (!v112)
        goto LABEL_144;
    }
    v113 = (unint64_t *)&v112->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
      if (*(_BYTE *)(v0 + 1680))
      {
LABEL_145:
        v115 = 0;
        if (!*(_BYTE *)(v0 + 1680))
          goto LABEL_146;
        goto LABEL_197;
      }
LABEL_158:
      std::runtime_error::runtime_error(&v260, v234);
      v261 = *(_OWORD *)(v0 + 1624);
      v260.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v121 = *(_QWORD *)(v0 + 1648);
      v262 = *(unsigned int ***)(v0 + 1640);
      v263 = (unsigned int *)v121;
      v264 = *(_QWORD *)(v0 + 1656);
      if (v264)
      {
        *(_QWORD *)(v121 + 16) = &v263;
        *(_QWORD *)(v0 + 1640) = v0 + 1648;
        *(_QWORD *)(v0 + 1648) = 0;
        *(_QWORD *)(v0 + 1656) = 0;
      }
      else
      {
        v262 = &v263;
      }
      v265 = *(_OWORD *)(v0 + 1664);
      *(_QWORD *)(v0 + 1672) = 0;
      *(_QWORD *)(v0 + 1664) = 0;
      v266 = 1;
      std::runtime_error::runtime_error((std::runtime_error *)v248, &v260);
      *(_OWORD *)&v248[16] = v261;
      *(_QWORD *)v248 = off_1E2521330;
      v249 = v262;
      v250 = v263;
      v251 = v264;
      if (v264)
      {
        *((_QWORD *)v263 + 2) = &v250;
        v262 = &v263;
        v263 = 0;
        v264 = 0;
      }
      else
      {
        v249 = &v250;
      }
      v252 = v265;
      v265 = 0uLL;
      std::runtime_error::runtime_error(&v254, (const std::runtime_error *)v248);
      v255 = *(_OWORD *)&v248[16];
      v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v122 = v250;
      v256 = v249;
      v257 = v250;
      v258 = v251;
      if (v251)
      {
        *((_QWORD *)v250 + 2) = &v257;
        v122 = 0;
        v249 = &v250;
        v250 = 0;
        v251 = 0;
      }
      else
      {
        v256 = &v257;
      }
      v92 = &v231->__vftable;
      v259 = v252;
      v252 = 0uLL;
      *(_QWORD *)v248 = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v249, v122);
      MEMORY[0x18D7898AC](v248);
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(v0 + 24), &v254);
      v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
      v93 = v228;
      if (*((_QWORD *)&v259 + 1))
      {
        v124 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v256, v257);
      MEMORY[0x18D7898AC](&v254);
      if (v266)
      {
        v260.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v126 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
        if (*((_QWORD *)&v265 + 1))
        {
          v127 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          goto LABEL_193;
        }
        goto LABEL_195;
      }
      goto LABEL_196;
    }
LABEL_144:
    if (*(_BYTE *)(v0 + 1680))
      goto LABEL_145;
    goto LABEL_158;
  }
LABEL_115:
  std::runtime_error::runtime_error(&v260, v234);
  v261 = *(_OWORD *)(v0 + 1624);
  v260.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v99 = *(_QWORD *)(v0 + 1648);
  v262 = *(unsigned int ***)(v0 + 1640);
  v263 = (unsigned int *)v99;
  v264 = *(_QWORD *)(v0 + 1656);
  if (v264)
  {
    *(_QWORD *)(v99 + 16) = &v263;
    *(_QWORD *)(v0 + 1640) = v0 + 1648;
    *(_QWORD *)(v0 + 1648) = 0;
    *(_QWORD *)(v0 + 1656) = 0;
  }
  else
  {
    v262 = &v263;
  }
  v265 = *(_OWORD *)(v0 + 1664);
  *(_QWORD *)(v0 + 1672) = 0;
  *(_QWORD *)(v0 + 1664) = 0;
  v266 = 1;
  std::runtime_error::runtime_error(&v254, &v260);
  v255 = v261;
  v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v256 = v262;
  v257 = v263;
  v258 = v264;
  if (v264)
  {
    *((_QWORD *)v263 + 2) = &v257;
    v262 = &v263;
    v263 = 0;
    v264 = 0;
  }
  else
  {
    v256 = &v257;
  }
  v259 = v265;
  v265 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)v248, &v254);
  *(_OWORD *)&v248[16] = v255;
  *(_QWORD *)v248 = off_1E2521330;
  v129 = v257;
  v249 = v256;
  v250 = v257;
  v251 = v258;
  if (v258)
  {
    *((_QWORD *)v257 + 2) = &v250;
    v129 = 0;
    v256 = &v257;
    v257 = 0;
    v258 = 0;
  }
  else
  {
    v249 = &v250;
  }
  v252 = v259;
  v259 = 0uLL;
  v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v256, v129);
  MEMORY[0x18D7898AC](&v254);
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(v0 + 24), (std::runtime_error *)v248);
  *(_QWORD *)v248 = off_1E2521330;
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
  v92 = &v231->__vftable;
  v93 = v228;
  if (*((_QWORD *)&v252 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v249, v250);
  MEMORY[0x18D7898AC](v248);
  if (v266)
  {
    v260.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v126 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
    if (*((_QWORD *)&v265 + 1))
    {
      v133 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
      do
        v128 = __ldaxr(v133);
      while (__stlxr(v128 - 1, v133));
LABEL_193:
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
LABEL_195:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v262, v263);
    MEMORY[0x18D7898AC](&v260);
  }
LABEL_196:
  v115 = 3;
  if (!*(_BYTE *)(v0 + 1680))
  {
LABEL_146:
    ((void (*)())v234->~runtime_error)();
    if (!v115)
      goto LABEL_147;
LABEL_198:
    v134 = *(std::__shared_weak_count **)(v0 + 2104);
    if (!v134)
      goto LABEL_403;
    goto LABEL_399;
  }
LABEL_197:
  if (v115)
    goto LABEL_198;
LABEL_147:
  v116 = *v230;
  v117 = *v233;
  if ((*(_DWORD *)(*v233 + 80) - 1) <= 0xFFFFFFFD)
  {
    if ((*(_DWORD *)(v117 + 176) - 5) >= 3)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v260);
      AMSCore::Logger::log<char [41]>((uint64_t)v260.__vftable, 4, (uint64_t)"networking", 10, "Setting body on incompatible HTTP method");
      imp = (std::__shared_weak_count *)v260.__imp_.__imp_;
      if (v260.__imp_.__imp_)
      {
        v119 = (unint64_t *)(v260.__imp_.__imp_ + 8);
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
    }
    __asm { BR              X10 }
  }
  *(_QWORD *)v248 = operator new(0x20uLL);
  *(_OWORD *)&v248[8] = xmmword_18CF51B50;
  strcpy(*(char **)v248, "X-Apple-NSURLCachePolicy");
  LOBYTE(v260.__vftable) = 0;
  BYTE8(v261) = 0;
  if (*(_BYTE *)(v117 + 120))
  {
    if (*(char *)(v117 + 119) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v260, *(const std::string::value_type **)(v117 + 96), *(_QWORD *)(v117 + 104));
    }
    else
    {
      v260 = *(std::runtime_error *)(v117 + 96);
      *(_QWORD *)&v261 = *(_QWORD *)(v117 + 112);
    }
    BYTE8(v261) = 1;
  }
  v135 = (_QWORD *)(v116 + 240);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v135, v248);
  if (BYTE8(v261))
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v135, (uint64_t)v248, (uint64_t)&v260);
    if (BYTE8(v261))
    {
      if (SBYTE7(v261) < 0)
        operator delete(v260.__vftable);
    }
  }
  if ((v248[23] & 0x80000000) != 0)
    operator delete(*(void **)v248);
  v136 = *v230;
  v137 = *(_QWORD *)(*v233 + 40);
  v242 = (char *)operator new(0x20uLL);
  v243 = xmmword_18CF51B80;
  strcpy(v242, "X-Apple-Client-Application");
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t))(*(_QWORD *)v137 + 32))(&v260, v137);
  v254 = v260;
  *(_QWORD *)&v255 = v261;
  v260.__imp_.__imp_ = 0;
  *(_QWORD *)&v261 = 0;
  v260.__vftable = 0;
  BYTE8(v255) = 1;
  v138 = (_QWORD *)(v136 + 240);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v138, (char *)&v242);
  if (BYTE8(v255))
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v138, (uint64_t)&v242, (uint64_t)&v254);
    if (BYTE8(v255))
    {
      if (SBYTE7(v255) < 0)
        operator delete(v254.__vftable);
    }
  }
  if (SBYTE7(v261) < 0)
  {
    operator delete(v260.__vftable);
    if ((SHIBYTE(v243) & 0x80000000) == 0)
      goto LABEL_217;
LABEL_245:
    operator delete(v242);
    goto LABEL_217;
  }
  if (SHIBYTE(v243) < 0)
    goto LABEL_245;
LABEL_217:
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v260);
  v139 = (*((uint64_t (**)(std::runtime_error_vtbl *))v260.~runtime_error + 3))(v260.__vftable);
  v140 = v139;
  v141 = (std::__shared_weak_count *)v260.__imp_.__imp_;
  if (!v260.__imp_.__imp_)
    goto LABEL_221;
  v142 = (unint64_t *)(v260.__imp_.__imp_ + 8);
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (!v143)
  {
    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
    std::__shared_weak_count::__release_weak(v141);
    if (v140 != 1)
      goto LABEL_247;
  }
  else
  {
LABEL_221:
    if (v139 != 1)
      goto LABEL_247;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t))(*(_QWORD *)v137 + 40))(&v236, v137);
  v144 = v236.__vftable;
  if (v236.__vftable)
  {
    v244 = (char *)operator new(0x19uLL);
    v245 = xmmword_18CF51B20;
    strcpy(v244, "X-Apple-Issuing-Process");
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *))v144->~runtime_error + 4))(&v260, v144);
    *(std::runtime_error *)v248 = v260;
    *(_QWORD *)&v248[16] = v261;
    v260.__imp_.__imp_ = 0;
    *(_QWORD *)&v261 = 0;
    v260.__vftable = 0;
    v248[24] = 1;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v138, (char *)&v244);
    if (v248[24])
    {
      std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v138, (uint64_t)&v244, (uint64_t)v248);
      if (v248[24])
      {
        if ((v248[23] & 0x80000000) != 0)
          operator delete(*(void **)v248);
      }
    }
    if (SBYTE7(v261) < 0)
      operator delete(v260.__vftable);
    if (SHIBYTE(v245) < 0)
      operator delete(v244);
  }
  v145 = (std::__shared_weak_count *)v236.__imp_.__imp_;
  if (v236.__imp_.__imp_)
  {
    v146 = (unint64_t *)(v236.__imp_.__imp_ + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v246 = (char *)operator new(0x20uLL);
  v247 = xmmword_18CF51B80;
  strcpy(v246, "X-Apple-Requesting-Process");
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t))(*(_QWORD *)v137 + 32))(&v236, v137);
  v260 = v236;
  *(_QWORD *)&v261 = v237;
  v236.__imp_.__imp_ = 0;
  *(_QWORD *)&v237 = 0;
  v236.__vftable = 0;
  BYTE8(v261) = 1;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v138, (char *)&v246);
  if (BYTE8(v261))
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v138, (uint64_t)&v246, (uint64_t)&v260);
    if (BYTE8(v261))
    {
      if (SBYTE7(v261) < 0)
        operator delete(v260.__vftable);
    }
  }
  if (SBYTE7(v237) < 0)
    operator delete(v236.__vftable);
  if (SHIBYTE(v247) < 0)
    operator delete(v246);
LABEL_247:
  v148 = *v230;
  v149.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  AMSCore::localTimeSecondsFromUTC((uint64_t)&v260, v149.__d_.__rep_);
  BYTE7(v237) = 10;
  strcpy((char *)&v236, "X-Apple-Tz");
  if (!v266)
    std::__throw_bad_expected_access[abi:fe180100]<AMSCore::Error,AMSCore::Error const&>(&v260);
  std::to_string((std::string *)&v254, (uint64_t)v260.__vftable);
  *(std::runtime_error *)v248 = v254;
  *(_QWORD *)&v248[16] = v255;
  v254.__imp_.__imp_ = 0;
  *(_QWORD *)&v255 = 0;
  v254.__vftable = 0;
  v248[24] = 1;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v148 + 240), (char *)&v236);
  if (v248[24])
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v148 + 240), (uint64_t)&v236, (uint64_t)v248);
    if (v248[24])
    {
      if ((v248[23] & 0x80000000) != 0)
        operator delete(*(void **)v248);
    }
  }
  if ((SBYTE7(v255) & 0x80000000) == 0)
  {
    if ((SBYTE7(v237) & 0x80000000) == 0)
      goto LABEL_254;
LABEL_314:
    operator delete(v236.__vftable);
    if (v266)
      goto LABEL_255;
    goto LABEL_315;
  }
  operator delete(v254.__vftable);
  if (SBYTE7(v237) < 0)
    goto LABEL_314;
LABEL_254:
  if (v266)
    goto LABEL_255;
LABEL_315:
  ((void (*)(std::runtime_error *))v260.~runtime_error)(&v260);
LABEL_255:
  v150 = *v233;
  AMSCore::UserAgent::create(*(AMSCore::UserAgent **)(*v233 + 40), (std::string *)&v254);
  if (*(_BYTE *)(v150 + 368))
  {
    AMSCore::StringUtils::join<std::string,std::string>((std::string *)&v260, (uint64_t)&v254, v150 + 344);
    if (SBYTE7(v255) < 0)
      operator delete(v254.__vftable);
    v254 = v260;
    *(_QWORD *)&v255 = v261;
  }
  v248[23] = 10;
  strcpy(v248, "User-Agent");
  v260 = v254;
  *(_QWORD *)&v261 = v255;
  v254.__vftable = 0;
  v254.__imp_.__imp_ = 0;
  *(_QWORD *)&v255 = 0;
  BYTE8(v261) = 1;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v148 + 240), v248);
  if (BYTE8(v261))
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v148 + 240), (uint64_t)v248, (uint64_t)&v260);
    if (BYTE8(v261))
    {
      if (SBYTE7(v261) < 0)
        operator delete(v260.__vftable);
    }
  }
  if ((v248[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v248);
    if ((SBYTE7(v255) & 0x80000000) == 0)
      goto LABEL_265;
LABEL_317:
    operator delete(v254.__vftable);
    goto LABEL_265;
  }
  if (SBYTE7(v255) < 0)
    goto LABEL_317;
LABEL_265:
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(v92);
  *(_BYTE *)(v0 + 1855) = 15;
  qmemcpy(v93, "Accept-Language", 15);
  *(_BYTE *)(v0 + 1847) = 0;
  (*(void (**)(std::runtime_error *__return_ptr))(**(_QWORD **)(v0 + 1688) + 56))(&v260);
  *(std::runtime_error *)v227 = v260;
  *(_QWORD *)(v227 + 16) = v261;
  v260.__imp_.__imp_ = 0;
  *(_QWORD *)&v261 = 0;
  v260.__vftable = 0;
  *(_BYTE *)(v0 + 1824) = 1;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v148 + 240), (char *)v93);
  if (*(_BYTE *)(v0 + 1824))
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v148 + 240), (uint64_t)v93, v227);
    if (*(_BYTE *)(v0 + 1824))
    {
      if (*(char *)(v0 + 1823) < 0)
        operator delete(*(void **)v227);
    }
  }
  if (SBYTE7(v261) < 0)
  {
    operator delete(v260.__vftable);
    if ((*(char *)(v0 + 1855) & 0x80000000) == 0)
      goto LABEL_271;
LABEL_319:
    operator delete(*v93);
    goto LABEL_271;
  }
  if (*(char *)(v0 + 1855) < 0)
    goto LABEL_319;
LABEL_271:
  *(_DWORD *)(v148 + 232) = *(_DWORD *)(v150 + 176);
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v92 + 24))(*v92) == 1 && *(_BYTE *)(v150 + 168))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v260);
    AMSCore::Logger::log<char [36]>((uint64_t)v260.__vftable);
    v151 = (std::__shared_weak_count *)v260.__imp_.__imp_;
    if (v260.__imp_.__imp_)
    {
      v152 = (unint64_t *)(v260.__imp_.__imp_ + 8);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    v148 = *(_QWORD *)(v0 + 2096);
    *(_BYTE *)(v0 + 1879) = 12;
    *(_DWORD *)(v220 + 8) = 1414808906;
    *(_QWORD *)v220 = *(_QWORD *)"X-Apple-JETT";
    *(_BYTE *)(v0 + 1868) = 0;
    *(_WORD *)(v0 + 1791) = 257;
    *(_WORD *)(v0 + 1768) = 49;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v148 + 240), (char *)v220);
    if (*(_BYTE *)(v0 + 1792))
    {
      std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v148 + 240), v220, (uint64_t)v219);
      if (*(_BYTE *)(v0 + 1792))
      {
        if (*(char *)(v0 + 1791) < 0)
          operator delete(*v219);
      }
    }
    if (*(char *)(v0 + 1879) < 0)
      operator delete(*(void **)v220);
  }
  v154 = *v233;
  for (i = *(uint64_t **)(*v233 + 144); i; i = (uint64_t *)*i)
  {
    while (1)
    {
      if (*((char *)i + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v248, (const std::string::value_type *)i[2], i[3]);
      }
      else
      {
        *(_OWORD *)v248 = *((_OWORD *)i + 1);
        *(_QWORD *)&v248[16] = i[4];
      }
      if (*((char *)i + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v260, (const std::string::value_type *)i[5], i[6]);
      }
      else
      {
        v260 = *(std::runtime_error *)(i + 5);
        *(_QWORD *)&v261 = i[7];
      }
      BYTE8(v261) = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v148 + 240), v248);
      if (BYTE8(v261))
      {
        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>((_QWORD *)(v148 + 240), (uint64_t)v248, (uint64_t)&v260);
        if (BYTE8(v261))
        {
          if (SBYTE7(v261) < 0)
            operator delete(v260.__vftable);
        }
      }
      if ((v248[23] & 0x80000000) != 0)
        break;
      i = (uint64_t *)*i;
      if (!i)
        goto LABEL_299;
    }
    operator delete(*(void **)v248);
  }
LABEL_299:
  *(_QWORD *)(v0 + 2128) = v148;
  v156 = *(_QWORD *)(v0 + 2104);
  *(_QWORD *)(v0 + 2136) = v156;
  if (v156)
  {
    v157 = (unint64_t *)(v156 + 8);
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
  }
  *(_QWORD *)(v0 + 2144) = v154;
  v159 = *(_QWORD *)(v0 + 2168);
  *(_QWORD *)(v0 + 2152) = v159;
  if (v159)
  {
    v160 = (unint64_t *)(v159 + 8);
    do
      v161 = __ldxr(v160);
    while (__stxr(v161 + 1, v160));
  }
  v162 = *(_OWORD *)(v0 + 1984);
  *(_OWORD *)(v0 + 2224) = v162;
  v232->__vftable = 0;
  v232->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v162 + 96)))
    goto LABEL_309;
  *v225 = 4;
  v164 = (unint64_t *)(*(_QWORD *)(v0 + 2224) + 96);
  do
    v165 = __ldaxr(v164);
  while (__stlxr(v0, v164));
  if (v165)
  {
LABEL_309:
    v166 = *(_QWORD *)(v0 + 2224);
    if (*(_BYTE *)(v166 + 88))
    {
      v167 = *(_BYTE *)(v166 + 80);
      if (!v167)
      {
        std::runtime_error::runtime_error(v234, (const std::runtime_error *)(v166 + 8));
        *(_OWORD *)(v0 + 1624) = *(_OWORD *)(v166 + 24);
        *(_QWORD *)(v0 + 1608) = off_1E2521330;
        v168 = (_QWORD *)(v166 + 48);
        v169 = *(_QWORD *)(v166 + 48);
        *(_QWORD *)(v0 + 1640) = *(_QWORD *)(v166 + 40);
        v170 = v0 + 1648;
        *(_QWORD *)(v0 + 1648) = v169;
        v171 = *(_QWORD *)(v166 + 56);
        *(_QWORD *)(v0 + 1656) = v171;
        if (v171)
        {
          *(_QWORD *)(v169 + 16) = v170;
          *(_QWORD *)(v166 + 40) = v168;
          *v168 = 0;
          *(_QWORD *)(v166 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v0 + 1640) = v170;
        }
        v172 = *(_QWORD *)(v0 + 2224);
        *(_OWORD *)(v0 + 1664) = *(_OWORD *)(v172 + 64);
        *(_QWORD *)(v172 + 64) = 0;
        *(_QWORD *)(v172 + 72) = 0;
      }
      *(_BYTE *)(v0 + 1680) = v167;
      v173 = *(_QWORD *)(v0 + 2232);
      if (v173)
      {
        v174 = (unint64_t *)(v173 + 8);
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          v176 = *(std::__shared_weak_count **)(v0 + 2232);
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      v177 = *(std::__shared_weak_count **)(v0 + 1992);
      if (v177)
      {
        v178 = (unint64_t *)&v177->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      v180 = *(std::__shared_weak_count **)(v0 + 2152);
      if (!v180)
        goto LABEL_336;
      v181 = (unint64_t *)&v180->__shared_owners_;
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
        v183 = *(std::__shared_weak_count **)(v0 + 2136);
        if (!v183)
          goto LABEL_340;
      }
      else
      {
LABEL_336:
        v183 = *(std::__shared_weak_count **)(v0 + 2136);
        if (!v183)
          goto LABEL_340;
      }
      v184 = (unint64_t *)&v183->__shared_owners_;
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
        if (*(_BYTE *)(v0 + 1680))
          goto LABEL_341;
        goto LABEL_354;
      }
LABEL_340:
      if (*(_BYTE *)(v0 + 1680))
      {
LABEL_341:
        v186 = *v233;
        v187 = *v230;
        *(_BYTE *)(v187 + 304) = *(_BYTE *)(*v233 + 336);
        AMSCore::HTTPRequestBuilder::buildSPtr((AMSCore::HTTPRequestBuilder *)v248, v187);
        if (!v253)
        {
          std::runtime_error::runtime_error(&v260, (const std::runtime_error *)v248);
          v261 = *(_OWORD *)&v248[16];
          v260.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v262 = v249;
          v263 = v250;
          v264 = v251;
          if (v251)
          {
            *((_QWORD *)v250 + 2) = &v263;
            v249 = &v250;
            v250 = 0;
            v251 = 0;
          }
          else
          {
            v262 = &v263;
          }
          v265 = v252;
          v252 = 0uLL;
          v266 = 1;
          std::runtime_error::runtime_error(&v236, &v260);
          v237 = v261;
          v236.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v238 = v262;
          v239 = v263;
          v240 = v264;
          if (v264)
          {
            *((_QWORD *)v263 + 2) = &v239;
            v262 = &v263;
            v263 = 0;
            v264 = 0;
          }
          else
          {
            v238 = &v239;
          }
          v241 = v265;
          v265 = 0uLL;
          std::runtime_error::runtime_error(&v254, &v236);
          v255 = v237;
          v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v195 = v239;
          v256 = v238;
          v257 = v239;
          v258 = v240;
          if (v240)
          {
            *((_QWORD *)v239 + 2) = &v257;
            v195 = 0;
            v238 = &v239;
            v239 = 0;
            v240 = 0;
          }
          else
          {
            v256 = &v257;
          }
          v259 = v241;
          v241 = 0uLL;
          v236.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v238, v195);
          MEMORY[0x18D7898AC](&v236);
          std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(v0 + 24), &v254);
          v254.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v196 = (std::__shared_weak_count *)*((_QWORD *)&v259 + 1);
          if (*((_QWORD *)&v259 + 1))
          {
            v197 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
            do
              v198 = __ldaxr(v197);
            while (__stlxr(v198 - 1, v197));
            if (!v198)
            {
              ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
              std::__shared_weak_count::__release_weak(v196);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v256, v257);
          MEMORY[0x18D7898AC](&v254);
          if (v266)
          {
            v260.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v199 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
            if (*((_QWORD *)&v265 + 1))
            {
              v200 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v262, v263);
            MEMORY[0x18D7898AC](&v260);
          }
          goto LABEL_385;
        }
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v221, v186);
        if (v253)
        {
          v235 = *(_OWORD *)v248;
          *(_QWORD *)v248 = 0;
          *(_QWORD *)&v248[8] = 0;
          AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)&v260, (uint64_t)v221);
          v267 = v235;
          if (*(_BYTE *)(v0 + 424))
          {
            if (*(_BYTE *)(v0 + 416))
            {
              v188 = *(std::__shared_weak_count **)(v0 + 408);
              if (v188)
              {
                v189 = (unint64_t *)&v188->__shared_owners_;
                do
                  v190 = __ldaxr(v189);
                while (__stlxr(v190 - 1, v189));
                if (!v190)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
              AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(v0 + 24));
            }
            else
            {
              (**(void (***)(uint64_t))(v0 + 24))(v0 + 24);
            }
            *(_BYTE *)(v0 + 424) = 0;
          }
          AMSCore::EncodeHTTPRequestTask::Options::Options(v0 + 24, (uint64_t)&v260);
          *(_OWORD *)(v0 + 400) = v267;
          v267 = 0uLL;
          *(_BYTE *)(v0 + 416) = 1;
          *(_BYTE *)(v0 + 424) = 1;
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v260.__vftable);
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v221);
LABEL_385:
          if (v253)
          {
            v202 = *(std::__shared_weak_count **)&v248[8];
            if (*(_QWORD *)&v248[8])
            {
              v203 = (unint64_t *)(*(_QWORD *)&v248[8] + 8);
              do
                v204 = __ldaxr(v203);
              while (__stlxr(v204 - 1, v203));
              if (!v204)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            goto LABEL_393;
          }
          v194 = **(void (***)(void))v248;
          goto LABEL_392;
        }
        goto LABEL_424;
      }
LABEL_354:
      *(_DWORD *)v248 = 604;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::FairPlayErrorCode>((uint64_t)&v260, (uint64_t)v234, (unsigned int *)v248);
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(v0 + 24), &v260);
      v260.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v191 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
      if (*((_QWORD *)&v265 + 1))
      {
        v192 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v262, v263);
      MEMORY[0x18D7898AC](&v260);
      if (*(_BYTE *)(v0 + 1680))
      {
LABEL_393:
        v205 = *(std::__shared_weak_count **)(v0 + 1696);
        if (v205)
        {
          v206 = (unint64_t *)&v205->__shared_owners_;
          do
            v207 = __ldaxr(v206);
          while (__stlxr(v207 - 1, v206));
          if (!v207)
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
        }
        v134 = *(std::__shared_weak_count **)(v0 + 2104);
        if (!v134)
        {
LABEL_403:
          AMSCore::URL::~URL((AMSCore::URL *)(v0 + 1304));
          if (*(_BYTE *)(v0 + 1296))
          {
            *(_QWORD *)(v0 + 1224) = off_1E2521330;
            v210 = *(std::__shared_weak_count **)(v0 + 1288);
            if (v210)
            {
              v211 = (unint64_t *)&v210->__shared_owners_;
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 - 1, v211));
              if (!v212)
              {
                ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                std::__shared_weak_count::__release_weak(v210);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v0 + 1256, *(unsigned int **)(v0 + 1264));
            MEMORY[0x18D7898AC]();
          }
          v213 = *(std::__shared_weak_count **)(v0 + 2120);
          if (!v213)
            goto LABEL_414;
          v214 = (unint64_t *)&v213->__shared_owners_;
          do
            v215 = __ldaxr(v214);
          while (__stlxr(v215 - 1, v214));
          if (!v215)
          {
            ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
            std::__shared_weak_count::__release_weak(v213);
            v216 = *(std::__shared_weak_count **)(v0 + 2168);
            if (v216)
              goto LABEL_415;
          }
          else
          {
LABEL_414:
            v216 = *(std::__shared_weak_count **)(v0 + 2168);
            if (v216)
            {
LABEL_415:
              v217 = (unint64_t *)&v216->__shared_owners_;
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
          }
          *(_QWORD *)(v0 + 1224) = v226;
          *(_QWORD *)v0 = 0;
          AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend(v229);
          return;
        }
LABEL_399:
        v208 = (unint64_t *)&v134->__shared_owners_;
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
        goto LABEL_403;
      }
      v194 = (void (*)(void))v234->~runtime_error;
LABEL_392:
      v194();
      goto LABEL_393;
    }
LABEL_424:
    __break(1u);
  }
}

void sub_18CCE8FB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,AMSCore::URLBuilder *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;
  void *v73;

  if (a73)
  {
    if (a72 < 0)
      operator delete(__p);
  }
  operator delete(v73);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a23);
  AMSCore::URLBuilder::~URLBuilder(a22);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a9);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a26);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCE912C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCE8E4CLL);
}

void AMSCore::EncodeHTTPRequestTask::perform(char *a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (*(_QWORD *)a1)
    __asm { BR              X10 }
  v2 = (char *)*((_QWORD *)a1 + 58);
  if (v2 == a1 + 440)
  {
    v3 = 4;
    v2 = a1 + 440;
  }
  else
  {
    if (!v2)
      goto LABEL_8;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_8:
  if (a1[424])
  {
    if (a1[416])
    {
      v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 51);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 3);
    }
    else
    {
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    }
  }
  do
  {
    v7 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v8)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 59);
  operator delete(a1);
}

void AMSCore::Log::error<char const(&)[31]>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  _QWORD v19[8];
  void *__p[2];
  __int128 v21;
  int v22;
  uint64_t v23[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v16);
  v0 = v16;
  if (*(int *)(v16 + 8) <= 4)
  {
    v1 = MEMORY[0x1E0DE4FE0];
    v2 = MEMORY[0x1E0DE4FE0] + 64;
    v3 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v23[0] = MEMORY[0x1E0DE4FE0] + 64;
    v18 = v4;
    *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v4 - 24)) = v5;
    v6 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
    std::ios_base::init(v6, v19);
    v6[1].__vftable = 0;
    v6[1].__fmtflags_ = -1;
    v18 = v1 + 24;
    v23[0] = v2;
    std::streambuf::basic_streambuf();
    v7 = MEMORY[0x1E0DE4FB8];
    v19[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v22 = 16;
    v8 = *(_QWORD *)(v18 - 24);
    if ((v9 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"RegEx values missing from Bag.", 30);
    v10 = v19[5];
    v11 = (char *)&v19[-1] + *(_QWORD *)(v18 - 24);
    if ((v11[32] & 5) != 0)
    {
      v12 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 5) + 32))(&rep, *((_QWORD *)v11 + 5), 0, 1, 16);
      v12 = v28;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v25 = 4;
    v26 = v10;
    v27 = v12;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v0 + 16) + 16))(*(_QWORD *)(v0 + 16), "networking", 10, &rep);
    v18 = *v3;
    *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = v3[3];
    v19[0] = v7 + 16;
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v23);
  }
  v13 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_18CCE9AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(this);
}

void AMSCore::Log::error<char const(&)[39],AMSCore::Any const&,char const(&)[10],char const*>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  _QWORD v25[8];
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v22);
  v4 = v22;
  if (*(int *)(v22 + 8) <= 4)
  {
    v5 = MEMORY[0x1E0DE4FE0];
    v6 = MEMORY[0x1E0DE4FE0] + 64;
    v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v29[0] = MEMORY[0x1E0DE4FE0] + 64;
    v24 = v8;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v8 - 24)) = v9;
    v10 = (std::ios_base *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24));
    std::ios_base::init(v10, v25);
    v10[1].__vftable = 0;
    v10[1].__fmtflags_ = -1;
    v24 = v5 + 24;
    v29[0] = v6;
    std::streambuf::basic_streambuf();
    v11 = MEMORY[0x1E0DE4FB8];
    v25[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v27 = 0u;
    v28 = 16;
    v12 = *(_QWORD *)(v24 - 24);
    if ((v13 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Failed to parse a GUID regex. regex = ", 38);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)" error = ", 9);
    v14 = *a2;
    v15 = strlen(v14);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)v14, v15);
    v16 = v25[5];
    v17 = (char *)&v25[-1] + *(_QWORD *)(v24 - 24);
    if ((v17[32] & 5) != 0)
    {
      v18 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5) + 32))(&rep, *((_QWORD *)v17 + 5), 0, 1, 16);
      v18 = v34;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v31 = 4;
    v32 = v16;
    v33 = v18;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16), "networking", 10, &rep);
    v24 = *v7;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = v7[3];
    v25[0] = v11 + 16;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v29);
  }
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_18CCE9E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setCookies(std::runtime_error *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char *v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error v21;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  const std::runtime_error *v26;
  char v27;
  const char **v28;
  std::__libcpp_refstring *p_imp;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  const std::runtime_error *v34;
  std::runtime_error_vtbl *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error_vtbl *v46;
  std::runtime_error v47;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  const std::runtime_error *v52;
  char v53;
  _QWORD *v54;
  uint64_t **v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int **v63;
  unint64_t v64;
  uint64_t v65;
  char **i;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  std::string::size_type v83;
  const std::string::value_type *v84;
  std::string *v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int **v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::runtime_error v95;
  unint64_t *v97;
  unint64_t v98;
  std::runtime_error_vtbl *v99;
  const std::runtime_error *v100;
  char v101;
  std::runtime_error_vtbl *v102;
  std::runtime_error_vtbl *v103;
  void (__cdecl *v104)(std::runtime_error *__hidden);
  unint64_t v105;
  void (__cdecl *v106)(std::runtime_error *__hidden);
  std::__shared_weak_count **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::runtime_error_vtbl *v115;
  _QWORD *v116;
  std::runtime_error_vtbl *v117;
  uint64_t v118;
  std::runtime_error v119;
  unint64_t *v121;
  unint64_t v122;
  std::runtime_error_vtbl *v123;
  const std::runtime_error *v124;
  char v125;
  std::__libcpp_refstring *p_what;
  const char **v127;
  std::string *v128;
  std::runtime_error_vtbl *v129;
  void (__cdecl *v130)(std::runtime_error *__hidden);
  unint64_t v131;
  void (__cdecl *v132)(std::runtime_error *__hidden);
  unsigned int *v133;
  unsigned int *v134;
  unsigned int **v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  int v141;
  const std::runtime_error *v142;
  const char *(__cdecl *what)(const std::runtime_error *__hidden);
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::runtime_error_vtbl *v153;
  __int128 v154;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  const std::runtime_error *v159;
  char v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int *v167;
  unsigned int **v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t *v183;
  void *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  char *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  BOOL v195;
  __n128 v196;
  uint64_t *v197;
  _QWORD *v198;
  __int128 v199;
  __int128 v200;
  int v201;
  void **v202;
  std::runtime_error_vtbl *v203;
  std::runtime_error_vtbl *v204;
  uint64_t *v205;
  uint64_t *v206;
  std::runtime_error_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  void **v214;
  __int128 v215;
  unsigned int *v216;
  unsigned int **v217;
  unint64_t v218;
  uint64_t v219;
  int v220;
  char *v221;
  std::string *v222;
  std::runtime_error_vtbl **v223;
  _QWORD *v224;
  std::string *v225;
  std::runtime_error *v226;
  _QWORD *v227;
  std::runtime_error *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t **v232;
  std::runtime_error *v233;
  std::runtime_error *v234;
  _BYTE *v235;
  uint64_t *v236;
  std::runtime_error *v237;
  std::runtime_error *v238;
  std::runtime_error v239;
  __int128 v240;
  unsigned int **v241;
  unsigned int *v242;
  uint64_t v243;
  __int128 v244;
  std::runtime_error v245;
  __int128 v246;
  unsigned int **v247;
  unsigned int *v248;
  uint64_t v249;
  __int128 v250;
  unsigned __int8 v251;
  std::runtime_error v252;
  __int128 v253;
  unsigned int **v254;
  unsigned int *v255;
  uint64_t v256;
  __int128 v257;

  v8 = (char *)operator new(0x470uLL);
  v9 = (unint64_t)v8;
  v235 = v8 + 1127;
  *((_OWORD *)v8 + 65) = *(_OWORD *)a2;
  v10 = (std::string *)(v8 + 152);
  v222 = (std::string *)(v8 + 304);
  v237 = (std::runtime_error *)(v8 + 456);
  v238 = (std::runtime_error *)(v8 + 536);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v228 = (std::runtime_error *)(v8 + 696);
  v233 = (std::runtime_error *)(v8 + 776);
  v232 = (uint64_t **)(v8 + 888);
  v12 = *a3;
  v11 = a3[1];
  v13 = (std::string *)(v8 + 912);
  v225 = (std::string *)(v8 + 936);
  v226 = (std::runtime_error *)(v8 + 616);
  *((_QWORD *)v8 + 132) = *a3;
  v14 = v8 + 960;
  *((_QWORD *)v8 + 133) = v11;
  v223 = (std::runtime_error_vtbl **)(v8 + 992);
  v224 = v8 + 976;
  v236 = (uint64_t *)(v8 + 1008);
  v230 = v8 + 856;
  v231 = v8 + 1040;
  *a3 = 0;
  a3[1] = 0;
  v227 = v8 + 1056;
  v15 = v8 + 1120;
  v16 = *(_QWORD *)(a4 + 8);
  v221 = v8 + 1024;
  *((_QWORD *)v8 + 134) = *(_QWORD *)a4;
  *((_QWORD *)v8 + 135) = v16;
  LODWORD(v16) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(v8 + 1123) = *(_DWORD *)(a4 + 19);
  *((_DWORD *)v8 + 280) = v16;
  v8[1128] = *(_BYTE *)(a4 + 23);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  do
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v17 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v8[24] = 0;
  v8[104] = 0;
  *((_QWORD *)v8 + 14) = 0;
  v234 = (std::runtime_error *)(v8 + 24);
  *((_QWORD *)v8 + 18) = 0;
  v229 = (uint64_t)(v8 + 16);
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v245, (uint64_t)(v8 + 16));
  *a1 = v245;
  *(_QWORD *)(v9 + 904) = 0;
  *(_QWORD *)(v9 + 896) = 0;
  *(_QWORD *)(v9 + 888) = v9 + 896;
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v236);
  v18 = *(_QWORD *)(v9 + 1008);
  *(_QWORD *)(v9 + 960) = v12;
  *(_QWORD *)(v9 + 968) = v11;
  if (v11)
  {
    v19 = (unint64_t *)(v11 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 40))(v18, v14);
  v21 = *v238;
  *(std::runtime_error *)(v9 + 1088) = *v238;
  v238->__vftable = 0;
  v238->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)&v21.__vftable[4]))
    goto LABEL_10;
  *v235 = 0;
  v23 = (unint64_t *)(*(_QWORD *)(v9 + 1088) + 96);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v9, v23));
  if (v24)
  {
LABEL_10:
    v25 = *(_QWORD *)(v9 + 1088);
    if (!*(_BYTE *)(v25 + 88))
      goto LABEL_332;
    v26 = (const std::runtime_error *)(v25 + 8);
    v27 = *(_BYTE *)(v25 + 80);
    if (v27)
    {
      *(_QWORD *)(v9 + 456) = *(_QWORD *)(v25 + 8);
      v28 = (const char **)(v9 + 464);
      p_imp = (std::__libcpp_refstring *)(v25 + 16);
    }
    else
    {
      std::runtime_error::runtime_error(v237, v26);
      *(_OWORD *)(v9 + 472) = *(_OWORD *)(v25 + 24);
      *(_QWORD *)(v9 + 456) = off_1E2521330;
      v30 = (_QWORD *)(v25 + 48);
      v31 = *(_QWORD *)(v25 + 48);
      v32 = v9 + 496;
      *(_QWORD *)(v9 + 488) = *(_QWORD *)(v25 + 40);
      *(_QWORD *)(v9 + 496) = v31;
      v33 = *(_QWORD *)(v25 + 56);
      *(_QWORD *)(v9 + 504) = v33;
      if (v33)
      {
        *(_QWORD *)(v31 + 16) = v32;
        *(_QWORD *)(v25 + 40) = v30;
        *v30 = 0;
        *(_QWORD *)(v25 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 488) = v32;
      }
      v34 = *(const std::runtime_error **)(v9 + 1088);
      v35 = v34[4].__vftable;
      v26 = v34 + 4;
      *(_QWORD *)(v9 + 512) = v35;
      v28 = (const char **)(v9 + 520);
      p_imp = &v26->__imp_;
    }
    *v28 = p_imp->__imp_;
    v26->__vftable = 0;
    v26->__imp_.__imp_ = 0;
    *(_BYTE *)(v9 + 528) = v27;
    v36 = *(_QWORD *)(v9 + 1096);
    if (v36)
    {
      v37 = (unint64_t *)(v36 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        v39 = *(std::__shared_weak_count **)(v9 + 1096);
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v40 = *(std::__shared_weak_count **)(v9 + 544);
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = *(std::__shared_weak_count **)(v9 + 968);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (!*(_BYTE *)(v9 + 528))
    {
      std::runtime_error::runtime_error(&v245, v237);
      v246 = *(_OWORD *)(v9 + 472);
      v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v56 = *(_QWORD *)(v9 + 496);
      v247 = *(unsigned int ***)(v9 + 488);
      v248 = (unsigned int *)v56;
      v249 = *(_QWORD *)(v9 + 504);
      if (v249)
      {
        *(_QWORD *)(v56 + 16) = &v248;
        *(_QWORD *)(v9 + 488) = v9 + 496;
        *(_QWORD *)(v9 + 496) = 0;
        *(_QWORD *)(v9 + 504) = 0;
      }
      else
      {
        v247 = &v248;
      }
      v250 = *(_OWORD *)(v9 + 512);
      *(_QWORD *)(v9 + 520) = 0;
      *(_QWORD *)(v9 + 512) = 0;
      v251 = 1;
      std::runtime_error::runtime_error(&v252, &v245);
      v253 = v246;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v254 = v247;
      v255 = v248;
      v256 = v249;
      if (v249)
      {
        *((_QWORD *)v248 + 2) = &v255;
        v247 = &v248;
        v248 = 0;
        v249 = 0;
      }
      else
      {
        v254 = &v255;
      }
      v257 = v250;
      v250 = 0uLL;
      std::runtime_error::runtime_error(&v239, &v252);
      v240 = v253;
      v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v61 = v255;
      v241 = v254;
      v242 = v255;
      v243 = v256;
      if (v256)
      {
        *((_QWORD *)v255 + 2) = &v242;
        v61 = 0;
        v254 = &v255;
        v255 = 0;
        v256 = 0;
      }
      else
      {
        v241 = &v242;
      }
      v244 = v257;
      v257 = 0uLL;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v254, v61);
      MEMORY[0x18D7898AC](&v252);
      if (*(_BYTE *)(v9 + 104))
      {
        if (!*(_BYTE *)(v9 + 96))
          ((void (*)(std::runtime_error *))v234->~runtime_error)(v234);
        *(_BYTE *)(v9 + 104) = 0;
      }
      std::runtime_error::runtime_error(v234, &v239);
      v63 = v241;
      v62 = v242;
      *(_QWORD *)(v9 + 64) = v242;
      v64 = v9 + 64;
      *(_OWORD *)(v9 + 40) = v240;
      *(_QWORD *)(v9 + 24) = off_1E2521330;
      *(_QWORD *)(v9 + 56) = v63;
      v65 = v243;
      *(_QWORD *)(v9 + 72) = v243;
      if (v65)
      {
        *((_QWORD *)v62 + 2) = v64;
        v62 = 0;
        v241 = &v242;
        v242 = 0;
        v243 = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 56) = v64;
      }
      i = (char **)(v9 + 896);
      *(_OWORD *)(v9 + 80) = v244;
      v244 = 0uLL;
      *(_BYTE *)(v9 + 96) = 0;
      *(_BYTE *)(v9 + 104) = 1;
      v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v62);
      MEMORY[0x18D7898AC](&v239);
      if (v251)
      {
        v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
        if (*((_QWORD *)&v250 + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v247, v248);
        MEMORY[0x18D7898AC](&v245);
      }
      if (*(_BYTE *)(v9 + 528))
        goto LABEL_307;
      goto LABEL_66;
    }
    v46 = v237->__vftable;
    AMSCore::URL::URL(v10, (const AMSCore::URL *)(*(_QWORD *)v231 + 80));
    (*((void (**)(std::runtime_error_vtbl *, std::string *))v46->~runtime_error + 6))(v46, v10);
    v47 = *v238;
    *(std::runtime_error *)(v9 + 1104) = *v238;
    v238->__vftable = 0;
    v238->__imp_.__imp_ = 0;
    if (!atomic_load((unint64_t *)&v47.__vftable[4]))
    {
      *v235 = 1;
      v49 = (unint64_t *)(*(_QWORD *)(v9 + 1104) + 96);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v9, v49));
      if (!v50)
        return;
    }
    v51 = *(_QWORD *)(v9 + 1104);
    if (!*(_BYTE *)(v51 + 88))
      goto LABEL_332;
    v52 = (const std::runtime_error *)(v51 + 8);
    v53 = *(_BYTE *)(v51 + 80);
    v54 = (_QWORD *)(v9 + 792);
    if (v53)
    {
      *v233 = *(std::runtime_error *)(v51 + 8);
      *v54 = *(_QWORD *)(v51 + 24);
      *(_QWORD *)(v51 + 16) = 0;
      *(_QWORD *)(v51 + 24) = 0;
      v52->__vftable = 0;
      v55 = v232;
    }
    else
    {
      std::runtime_error::runtime_error(v233, v52);
      *(_OWORD *)v54 = *(_OWORD *)(v51 + 24);
      *(_QWORD *)(v9 + 776) = off_1E2521330;
      v57 = (_QWORD *)(v51 + 48);
      v58 = *(_QWORD *)(v51 + 48);
      *(_QWORD *)(v9 + 808) = *(_QWORD *)(v51 + 40);
      v59 = v9 + 816;
      *(_QWORD *)(v9 + 816) = v58;
      v60 = *(_QWORD *)(v51 + 56);
      *(_QWORD *)(v9 + 824) = v60;
      if (v60)
      {
        *(_QWORD *)(v58 + 16) = v59;
        *(_QWORD *)(v51 + 40) = v57;
        *v57 = 0;
        *(_QWORD *)(v51 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 808) = v59;
      }
      v55 = v232;
      v70 = *(_QWORD *)(v9 + 1104);
      *(_OWORD *)(v9 + 832) = *(_OWORD *)(v70 + 64);
      *(_QWORD *)(v70 + 64) = 0;
      *(_QWORD *)(v70 + 72) = 0;
    }
    *(_BYTE *)(v9 + 848) = v53;
    v71 = *(_QWORD *)(v9 + 1112);
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        v74 = *(std::__shared_weak_count **)(v9 + 1112);
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v75 = *(std::__shared_weak_count **)(v9 + 544);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    AMSCore::URL::~URL((AMSCore::URL *)v10);
    if (!*(_BYTE *)(v9 + 848))
    {
      std::runtime_error::runtime_error(&v245, v233);
      v246 = *(_OWORD *)v54;
      v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v86 = *(_QWORD *)(v9 + 816);
      v247 = *(unsigned int ***)(v9 + 808);
      v248 = (unsigned int *)v86;
      v249 = *(_QWORD *)(v9 + 824);
      if (v249)
      {
        *(_QWORD *)(v86 + 16) = &v248;
        *(_QWORD *)(v9 + 808) = v9 + 816;
        *(_QWORD *)(v9 + 816) = 0;
        *(_QWORD *)(v9 + 824) = 0;
      }
      else
      {
        v247 = &v248;
      }
      v250 = *(_OWORD *)(v9 + 832);
      *(_QWORD *)(v9 + 840) = 0;
      *(_QWORD *)(v9 + 832) = 0;
      v251 = 1;
      std::runtime_error::runtime_error(&v252, &v245);
      v253 = v246;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v254 = v247;
      v255 = v248;
      v256 = v249;
      if (v249)
      {
        *((_QWORD *)v248 + 2) = &v255;
        v247 = &v248;
        v248 = 0;
        v249 = 0;
      }
      else
      {
        v254 = &v255;
      }
      v257 = v250;
      v250 = 0uLL;
      std::runtime_error::runtime_error(&v239, &v252);
      v240 = v253;
      v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v87 = v255;
      v241 = v254;
      v242 = v255;
      v243 = v256;
      if (v256)
      {
        *((_QWORD *)v255 + 2) = &v242;
        v87 = 0;
        v254 = &v255;
        v255 = 0;
        v256 = 0;
      }
      else
      {
        v241 = &v242;
      }
      v244 = v257;
      v257 = 0uLL;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v254, v87);
      MEMORY[0x18D7898AC](&v252);
      if (*(_BYTE *)(v9 + 104))
      {
        if (!*(_BYTE *)(v9 + 96))
          ((void (*)(std::runtime_error *))v234->~runtime_error)(v234);
        *(_BYTE *)(v9 + 104) = 0;
      }
      std::runtime_error::runtime_error(v234, &v239);
      v89 = v241;
      v88 = v242;
      *(_QWORD *)(v9 + 64) = v242;
      v90 = v9 + 64;
      *(_OWORD *)(v9 + 40) = v240;
      *(_QWORD *)(v9 + 24) = off_1E2521330;
      *(_QWORD *)(v9 + 56) = v89;
      v91 = v243;
      *(_QWORD *)(v9 + 72) = v243;
      if (v91)
      {
        *((_QWORD *)v88 + 2) = v90;
        v88 = 0;
        v241 = &v242;
        v242 = 0;
        v243 = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 56) = v90;
      }
      i = (char **)(v9 + 896);
      *(_OWORD *)(v9 + 80) = v244;
      v244 = 0uLL;
      *(_BYTE *)(v9 + 96) = 0;
      *(_BYTE *)(v9 + 104) = 1;
      v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v88);
      MEMORY[0x18D7898AC](&v239);
      if (v251)
      {
        v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v92 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
        if (*((_QWORD *)&v250 + 1))
        {
          v93 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v247, v248);
        MEMORY[0x18D7898AC](&v245);
      }
      goto LABEL_300;
    }
    v78 = *(uint64_t **)(v9 + 776);
    v79 = *(uint64_t **)(v9 + 784);
    for (i = (char **)(v9 + 896); v78 != v79; ++v78)
      std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::unique_ptr<AMSCore::HTTPCookie>&&>>(v55, (const void **)(*v78 + 48), *v78 + 48, v78);
    v80 = (uint64_t)v230;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v227 + 96))(*v227) & 1) != 0)
    {
LABEL_262:
      v239.__vftable = 0;
      v239.__imp_.__imp_ = 0;
      *(_QWORD *)&v240 = 0;
      if (!*(_QWORD *)(v9 + 904) || (v189 = *v232, *v232 == (uint64_t *)i))
      {
        v190 = 0;
      }
      else
      {
        v190 = 0;
        do
        {
          v191 = v189 + 7;
          if ((unint64_t)v190 >= (unint64_t)v240)
          {
            v190 = (char *)std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v239, v191);
          }
          else
          {
            v192 = *v191;
            *v191 = 0;
            *(_QWORD *)v190 = v192;
            v190 += 8;
          }
          v239.__imp_.__imp_ = v190;
          v193 = (uint64_t *)v189[1];
          if (v193)
          {
            do
            {
              v194 = v193;
              v193 = (uint64_t *)*v193;
            }
            while (v193);
          }
          else
          {
            do
            {
              v194 = (uint64_t *)v189[2];
              v195 = *v194 == (_QWORD)v189;
              v189 = v194;
            }
            while (!v195);
          }
          v189 = v194;
        }
        while (v194 != (uint64_t *)i);
      }
      v196.n128_f64[0] = AMSCore::CookieUtils::getRequestHeaderFields((uint64_t)&v252, (uint64_t *)&v239);
      v197 = (uint64_t *)v253;
      if ((_QWORD)v253)
      {
        v198 = (_QWORD *)(*(_QWORD *)(v9 + 1040) + 240);
        do
        {
          while (1)
          {
            if (*((char *)v197 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v197[2], v197[3]);
            }
            else
            {
              v199 = *((_OWORD *)v197 + 1);
              v13->__r_.__value_.__r.__words[2] = v197[4];
              *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v199;
            }
            v200 = *(_OWORD *)(v197 + 5);
            *(_QWORD *)(v80 + 16) = v197[7];
            *(_OWORD *)v80 = v200;
            v197[6] = 0;
            v197[7] = 0;
            v197[5] = 0;
            *(_BYTE *)(v9 + 880) = 1;
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v198, (char *)v13);
            if (*(_BYTE *)(v9 + 880))
            {
              std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v198, (uint64_t)v13, v80);
              if (*(_BYTE *)(v9 + 880))
              {
                if (*(char *)(v9 + 879) < 0)
                  operator delete(*(void **)v80);
              }
            }
            if (*(char *)(v9 + 935) < 0)
              break;
            v197 = (uint64_t *)*v197;
            if (!v197)
              goto LABEL_288;
          }
          operator delete(v13->__r_.__value_.__l.__data_);
          v197 = (uint64_t *)*v197;
        }
        while (v197);
      }
LABEL_288:
      v251 = 1;
      if (*(_BYTE *)(v9 + 104) && !*(_BYTE *)(v9 + 96))
      {
        (**(void (***)(std::runtime_error *, __n128))(v9 + 24))(v234, v196);
        v201 = v251;
        *(_BYTE *)(v9 + 104) = 0;
        if (!v201)
        {
          std::runtime_error::runtime_error(v234, &v245);
          v215 = v246;
          v217 = v247;
          v216 = v248;
          *(_QWORD *)(v9 + 64) = v248;
          v218 = v9 + 64;
          *(_OWORD *)(v9 + 40) = v215;
          *(_QWORD *)(v9 + 24) = off_1E2521330;
          *(_QWORD *)(v9 + 56) = v217;
          v219 = v249;
          *(_QWORD *)(v9 + 72) = v249;
          if (v219)
          {
            *((_QWORD *)v216 + 2) = v218;
            v247 = &v248;
            v248 = 0;
            v249 = 0;
          }
          else
          {
            *(_QWORD *)(v9 + 56) = v218;
          }
          *(_OWORD *)(v9 + 80) = v250;
          v250 = 0uLL;
          v220 = v251;
          *(_BYTE *)(v9 + 96) = 0;
          *(_BYTE *)(v9 + 104) = 1;
          if (!v220)
            ((void (*)(std::runtime_error *))v245.~runtime_error)(&v245);
LABEL_292:
          v202 = (void **)v253;
          if (!(_QWORD)v253)
          {
LABEL_293:
            v203 = v252.__vftable;
            v252.__vftable = 0;
            if (v203)
              operator delete(v203);
            v204 = v239.__vftable;
            if (v239.__vftable)
            {
              if (v190 != (char *)v239.__vftable)
              {
                do
                {
                  v190 -= 8;
                  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)v190, 0);
                }
                while (v190 != (char *)v204);
                v190 = (char *)v239.__vftable;
              }
              v239.__imp_.__imp_ = (const char *)v204;
              operator delete(v190);
            }
            goto LABEL_300;
          }
          while (1)
          {
            v214 = (void **)*v202;
            if (*((char *)v202 + 63) < 0)
            {
              operator delete(v202[5]);
              if (*((char *)v202 + 39) < 0)
                goto LABEL_322;
            }
            else if (*((char *)v202 + 39) < 0)
            {
LABEL_322:
              operator delete(v202[2]);
            }
            operator delete(v202);
            v202 = v214;
            if (!v214)
              goto LABEL_293;
          }
        }
      }
      else
      {
        LOBYTE(v201) = 1;
      }
      *(_BYTE *)(v9 + 96) = v201;
      *(_BYTE *)(v9 + 104) = 1;
      goto LABEL_292;
    }
    v81 = *(char *)(v9 + 1128);
    v82 = *(_QWORD *)(v9 + 1008);
    v83 = *(_QWORD *)(v9 + 1080);
    v84 = *(const std::string::value_type **)(v9 + 1072);
    if (v81 < 0)
    {
      v85 = v225;
      std::string::__init_copy_ctor_external(v225, v84, v83);
    }
    else
    {
      *(_QWORD *)(v9 + 936) = v84;
      *(_QWORD *)(v9 + 944) = v83;
      *(_DWORD *)(v9 + 952) = *v15;
      *(_DWORD *)(v9 + 955) = *(_DWORD *)((char *)v15 + 3);
      *(_BYTE *)(v9 + 959) = v81;
      v85 = v225;
    }
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v82 + 48))(v82, v85);
    v95 = v238[10];
    v228->__vftable = 0;
    v228->__imp_.__imp_ = 0;
    *v238 = v95;
    if (!atomic_load((unint64_t *)&v95.__vftable[4]))
    {
      *v235 = 2;
      v97 = (unint64_t *)(*(_QWORD *)(v9 + 536) + 96);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v9, v97));
      if (!v98)
        return;
    }
    v99 = v238->__vftable;
    if (!LOBYTE(v238->__vftable[3].what))
      goto LABEL_332;
    v100 = (const std::runtime_error *)&v99->~runtime_error_0;
    v101 = (char)v99[3].~runtime_error_0;
    if (v101)
    {
      v102 = v100->__vftable;
      v100->__vftable = 0;
      v226->__vftable = v102;
    }
    else
    {
      std::runtime_error::runtime_error(v226, v100);
      *(_OWORD *)(v9 + 632) = *(_OWORD *)&v99[1].~runtime_error;
      *(_QWORD *)(v9 + 616) = off_1E2521330;
      v103 = v99 + 2;
      v104 = v99[2].~runtime_error;
      *(_QWORD *)(v9 + 648) = v99[1].what;
      v105 = v9 + 656;
      *(_QWORD *)(v9 + 656) = v104;
      v106 = v99[2].~runtime_error_0;
      *(_QWORD *)(v9 + 664) = v106;
      if (v106)
      {
        *((_QWORD *)v104 + 2) = v105;
        v99[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v103;
        v103->~runtime_error = 0;
        v99[2].~runtime_error_0 = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 648) = v105;
      }
      *(_OWORD *)(v9 + 672) = *(_OWORD *)&v99[2].what;
      v99[2].what = 0;
      v99[3].~runtime_error = 0;
    }
    v107 = (std::__shared_weak_count **)(v9 + 704);
    *(_BYTE *)(v9 + 688) = v101;
    v108 = *(std::__shared_weak_count **)(v9 + 544);
    if (v108)
    {
      v109 = (unint64_t *)&v108->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    v111 = *v107;
    if (*v107)
    {
      v112 = (unint64_t *)&v111->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    if (*(char *)(v9 + 959) < 0)
      operator delete(v225->__r_.__value_.__l.__data_);
    if (!*(_BYTE *)(v9 + 688))
    {
      std::runtime_error::runtime_error(&v245, v226);
      v246 = *(_OWORD *)(v9 + 632);
      v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v118 = *(_QWORD *)(v9 + 656);
      v247 = *(unsigned int ***)(v9 + 648);
      v248 = (unsigned int *)v118;
      v249 = *(_QWORD *)(v9 + 664);
      if (v249)
      {
        *(_QWORD *)(v118 + 16) = &v248;
        *(_QWORD *)(v9 + 648) = v9 + 656;
        *(_QWORD *)(v9 + 656) = 0;
        *(_QWORD *)(v9 + 664) = 0;
      }
      else
      {
        v247 = &v248;
      }
      v250 = *(_OWORD *)(v9 + 672);
      *(_QWORD *)(v9 + 680) = 0;
      *(_QWORD *)(v9 + 672) = 0;
      v251 = 1;
      std::runtime_error::runtime_error(&v252, &v245);
      v253 = v246;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v254 = v247;
      v255 = v248;
      v256 = v249;
      if (v249)
      {
        *((_QWORD *)v248 + 2) = &v255;
        v247 = &v248;
        v248 = 0;
        v249 = 0;
      }
      else
      {
        v254 = &v255;
      }
      v80 = (uint64_t)v230;
      v257 = v250;
      v250 = 0uLL;
      std::runtime_error::runtime_error(&v239, &v252);
      v240 = v253;
      v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v133 = v255;
      v241 = v254;
      v242 = v255;
      v243 = v256;
      if (v256)
      {
        *((_QWORD *)v255 + 2) = &v242;
        v133 = 0;
        v254 = &v255;
        v255 = 0;
        v256 = 0;
      }
      else
      {
        v241 = &v242;
      }
      v244 = v257;
      v257 = 0uLL;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v254, v133);
      MEMORY[0x18D7898AC](&v252);
      if (*(_BYTE *)(v9 + 104))
      {
        if (!*(_BYTE *)(v9 + 96))
          ((void (*)(std::runtime_error *))v234->~runtime_error)(v234);
        *(_BYTE *)(v9 + 104) = 0;
      }
      std::runtime_error::runtime_error(v234, &v239);
      v135 = v241;
      v134 = v242;
      *(_QWORD *)(v9 + 64) = v242;
      v136 = v9 + 64;
      *(_OWORD *)(v9 + 40) = v240;
      *(_QWORD *)(v9 + 24) = off_1E2521330;
      *(_QWORD *)(v9 + 56) = v135;
      v137 = v243;
      *(_QWORD *)(v9 + 72) = v243;
      if (v137)
      {
        *((_QWORD *)v134 + 2) = v136;
        v134 = 0;
        v241 = &v242;
        v242 = 0;
        v243 = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 56) = v136;
      }
      i = (char **)(v9 + 896);
      *(_OWORD *)(v9 + 80) = v244;
      v244 = 0uLL;
      *(_BYTE *)(v9 + 96) = 0;
      *(_BYTE *)(v9 + 104) = 1;
      v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v134);
      MEMORY[0x18D7898AC](&v239);
      if (v251)
      {
        v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v138 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
        if (*((_QWORD *)&v250 + 1))
        {
          v139 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v247, v248);
        MEMORY[0x18D7898AC](&v245);
      }
      v141 = 3;
      goto LABEL_256;
    }
    v114 = *v236;
    v115 = v226->__vftable;
    *v223 = v226->__vftable;
    if (v115)
    {
      v116 = (_QWORD *)operator new();
      v117 = v226->__vftable;
      *v116 = &off_1E2523180;
      v116[1] = 0;
      v116[2] = 0;
      v116[3] = v117;
    }
    else
    {
      v116 = 0;
    }
    *(_QWORD *)(v9 + 1000) = v116;
    *(_QWORD *)(v9 + 616) = 0;
    (*(void (**)(uint64_t, std::runtime_error_vtbl **))(*(_QWORD *)v114 + 40))(v114, v223);
    v119 = *(std::runtime_error *)(v9 + 976);
    *v224 = 0;
    v224[1] = 0;
    *v238 = v119;
    if (!atomic_load((unint64_t *)&v119.__vftable[4]))
    {
      *v235 = 3;
      v121 = (unint64_t *)(*(_QWORD *)(v9 + 536) + 96);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v9, v121));
      if (!v122)
        return;
    }
    v123 = v238->__vftable;
    if (!LOBYTE(v238->__vftable[3].what))
      goto LABEL_332;
    v124 = (const std::runtime_error *)&v123->~runtime_error_0;
    v125 = (char)v123[3].~runtime_error_0;
    if (v125)
    {
      v228->__vftable = (std::runtime_error_vtbl *)v123->~runtime_error_0;
      p_what = (std::__libcpp_refstring *)&v123->what;
      v127 = (const char **)(v9 + 704);
      v128 = v222;
    }
    else
    {
      std::runtime_error::runtime_error(v228, v124);
      *(_OWORD *)(v9 + 712) = *(_OWORD *)&v123[1].~runtime_error;
      *(_QWORD *)(v9 + 696) = off_1E2521330;
      v129 = v123 + 2;
      v130 = v123[2].~runtime_error;
      *(_QWORD *)(v9 + 728) = v123[1].what;
      v131 = v9 + 736;
      *(_QWORD *)(v9 + 736) = v130;
      v132 = v123[2].~runtime_error_0;
      *(_QWORD *)(v9 + 744) = v132;
      if (v132)
      {
        *((_QWORD *)v130 + 2) = v131;
        v123[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v129;
        v129->~runtime_error = 0;
        v123[2].~runtime_error_0 = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 728) = v131;
      }
      v128 = v222;
      what = v123[2].what;
      v142 = (const std::runtime_error *)&v123[2].what;
      *(_QWORD *)(v9 + 752) = what;
      v127 = (const char **)(v9 + 760);
      p_what = &v142->__imp_;
      v124 = v142;
    }
    *v127 = p_what->__imp_;
    v124->__vftable = 0;
    v124->__imp_.__imp_ = 0;
    *(_BYTE *)(v9 + 768) = v125;
    v144 = *(std::__shared_weak_count **)(v9 + 544);
    if (v144)
    {
      v145 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = *(std::__shared_weak_count **)(v9 + 984);
    if (v147)
    {
      v148 = (unint64_t *)&v147->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v150 = *(std::__shared_weak_count **)(v9 + 1000);
    if (v150)
    {
      v151 = (unint64_t *)&v150->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    if (!*(_BYTE *)(v9 + 768))
    {
      std::runtime_error::runtime_error(&v245, v228);
      v246 = *(_OWORD *)(v9 + 712);
      v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v161 = *(_QWORD *)(v9 + 736);
      v247 = *(unsigned int ***)(v9 + 728);
      v248 = (unsigned int *)v161;
      v249 = *(_QWORD *)(v9 + 744);
      if (v249)
      {
        *(_QWORD *)(v161 + 16) = &v248;
        *(_QWORD *)(v9 + 728) = v9 + 736;
        *(_QWORD *)(v9 + 736) = 0;
        *(_QWORD *)(v9 + 744) = 0;
      }
      else
      {
        v247 = &v248;
      }
      v250 = *(_OWORD *)(v9 + 752);
      *(_QWORD *)(v9 + 760) = 0;
      *(_QWORD *)(v9 + 752) = 0;
      v251 = 1;
      std::runtime_error::runtime_error(&v252, &v245);
      v253 = v246;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v254 = v247;
      v255 = v248;
      v256 = v249;
      if (v249)
      {
        *((_QWORD *)v248 + 2) = &v255;
        v247 = &v248;
        v248 = 0;
        v249 = 0;
      }
      else
      {
        v254 = &v255;
      }
      v257 = v250;
      v250 = 0uLL;
      std::runtime_error::runtime_error(&v239, &v252);
      v240 = v253;
      v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v166 = v255;
      v241 = v254;
      v242 = v255;
      v243 = v256;
      if (v256)
      {
        *((_QWORD *)v255 + 2) = &v242;
        v166 = 0;
        v254 = &v255;
        v255 = 0;
        v256 = 0;
      }
      else
      {
        v241 = &v242;
      }
      v244 = v257;
      v257 = 0uLL;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v254, v166);
      MEMORY[0x18D7898AC](&v252);
      if (*(_BYTE *)(v9 + 104))
      {
        if (!*(_BYTE *)(v9 + 96))
          ((void (*)(std::runtime_error *))v234->~runtime_error)(v234);
        *(_BYTE *)(v9 + 104) = 0;
      }
      std::runtime_error::runtime_error(v234, &v239);
      v168 = v241;
      v167 = v242;
      *(_QWORD *)(v9 + 64) = v242;
      v169 = v9 + 64;
      *(_OWORD *)(v9 + 40) = v240;
      *(_QWORD *)(v9 + 24) = off_1E2521330;
      *(_QWORD *)(v9 + 56) = v168;
      v170 = v243;
      *(_QWORD *)(v9 + 72) = v243;
      if (v170)
      {
        *((_QWORD *)v167 + 2) = v169;
        v167 = 0;
        v241 = &v242;
        v242 = 0;
        v243 = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 56) = v169;
      }
      i = (char **)(v9 + 896);
      v80 = (uint64_t)v230;
      v107 = (std::__shared_weak_count **)(v9 + 704);
      *(_OWORD *)(v9 + 80) = v244;
      v244 = 0uLL;
      *(_BYTE *)(v9 + 96) = 0;
      *(_BYTE *)(v9 + 104) = 1;
      v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v167);
      MEMORY[0x18D7898AC](&v239);
      if (v251)
      {
        v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v171 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
        if (*((_QWORD *)&v250 + 1))
        {
          v172 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v247, v248);
        MEMORY[0x18D7898AC](&v245);
      }
      v141 = 3;
      goto LABEL_249;
    }
    v153 = v228->__vftable;
    AMSCore::URL::URL(v128, (const AMSCore::URL *)(*(_QWORD *)v231 + 80));
    (*((void (**)(std::runtime_error_vtbl *, std::string *))v153->~runtime_error + 6))(v153, v128);
    v154 = *(_OWORD *)v221;
    *(_QWORD *)v221 = 0;
    *((_QWORD *)v221 + 1) = 0;
    *(_OWORD *)v224 = v154;
    if (!atomic_load((unint64_t *)(v154 + 96)))
    {
      *v235 = 4;
      v156 = (unint64_t *)(*(_QWORD *)(v9 + 976) + 96);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v9, v156));
      if (!v157)
        return;
    }
    v158 = *v224;
    if (!*(_BYTE *)(*v224 + 88))
      goto LABEL_332;
    v159 = (const std::runtime_error *)(v158 + 8);
    v160 = *(_BYTE *)(v158 + 80);
    if (v160)
    {
      *v238 = *(std::runtime_error *)(v158 + 8);
      *(_QWORD *)(v9 + 552) = *(_QWORD *)(v158 + 24);
      *(_QWORD *)(v158 + 16) = 0;
      *(_QWORD *)(v158 + 24) = 0;
      v159->__vftable = 0;
    }
    else
    {
      std::runtime_error::runtime_error(v238, v159);
      *(_OWORD *)(v9 + 552) = *(_OWORD *)(v158 + 24);
      *(_QWORD *)(v9 + 536) = off_1E2521330;
      v162 = (_QWORD *)(v158 + 48);
      v163 = *(_QWORD *)(v158 + 48);
      *(_QWORD *)(v9 + 568) = *(_QWORD *)(v158 + 40);
      v164 = v9 + 576;
      *(_QWORD *)(v9 + 576) = v163;
      v165 = *(_QWORD *)(v158 + 56);
      *(_QWORD *)(v9 + 584) = v165;
      if (v165)
      {
        *(_QWORD *)(v163 + 16) = v164;
        *(_QWORD *)(v158 + 40) = v162;
        *v162 = 0;
        *(_QWORD *)(v158 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 568) = v164;
      }
      *(_OWORD *)(v9 + 592) = *(_OWORD *)(v158 + 64);
      *(_QWORD *)(v158 + 64) = 0;
      *(_QWORD *)(v158 + 72) = 0;
    }
    *(_BYTE *)(v9 + 608) = v160;
    v174 = *(std::__shared_weak_count **)(v9 + 984);
    if (v174)
    {
      v175 = (unint64_t *)&v174->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    v177 = *(std::__shared_weak_count **)(v9 + 1032);
    if (v177)
    {
      v178 = (unint64_t *)&v177->__shared_owners_;
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
    }
    AMSCore::URL::~URL((AMSCore::URL *)v222);
    if (!*(_BYTE *)(v9 + 608))
    {
      std::runtime_error::runtime_error(&v245, v238);
      v246 = *(_OWORD *)(v9 + 552);
      v245.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v182 = *(_QWORD *)(v9 + 576);
      v247 = *(unsigned int ***)(v9 + 568);
      v248 = (unsigned int *)v182;
      v249 = *(_QWORD *)(v9 + 584);
      if (v249)
      {
        *(_QWORD *)(v182 + 16) = &v248;
        *(_QWORD *)(v9 + 568) = v9 + 576;
        *(_QWORD *)(v9 + 576) = 0;
        *(_QWORD *)(v9 + 584) = 0;
      }
      else
      {
        v247 = &v248;
      }
      v250 = *(_OWORD *)(v9 + 592);
      *(_QWORD *)(v9 + 600) = 0;
      *(_QWORD *)(v9 + 592) = 0;
      v251 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v252, (uint64_t)&v245);
      AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>(v229, &v252);
      std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v252);
    }
    LOBYTE(v245.__vftable) = 0;
    v251 = 0;
    std::optional<AMSCore::Error>::~optional((uint64_t)&v245);
    if (!*(_BYTE *)(v9 + 608))
    {
LABEL_332:
      __break(1u);
      return;
    }
    v180 = *(uint64_t **)(v9 + 536);
    v181 = *(uint64_t **)(v9 + 544);
    if (v180 == v181)
    {
      v141 = 0;
      v80 = (uint64_t)v230;
    }
    else
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::unique_ptr<AMSCore::HTTPCookie>&&>>(v232, (const void **)(*v180 + 48), *v180 + 48, v180);
        ++v180;
      }
      while (v180 != v181);
      v141 = 0;
      v80 = (uint64_t)v230;
      v180 = *(uint64_t **)(v9 + 536);
      if (!*(_BYTE *)(v9 + 608))
      {
        ((void (*)(std::runtime_error *))*v180)(v238);
LABEL_249:
        if (*(_BYTE *)(v9 + 768))
        {
          v185 = *v107;
          if (*v107)
          {
            v186 = (unint64_t *)&v185->__shared_owners_;
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 - 1, v186));
            if (!v187)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
        }
        else
        {
          ((void (*)(std::runtime_error *))v228->~runtime_error)(v228);
        }
LABEL_256:
        v188 = *(_QWORD *)(v9 + 616);
        if (*(_BYTE *)(v9 + 688))
        {
          v226->__vftable = 0;
          if (v188)
            (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
          if (!v141)
            goto LABEL_262;
LABEL_300:
          v205 = *(uint64_t **)(v9 + 776);
          if (*(_BYTE *)(v9 + 848))
          {
            if (v205)
            {
              v206 = *(uint64_t **)(v9 + 784);
              v207 = *(std::runtime_error_vtbl **)(v9 + 776);
              if (v206 != v205)
              {
                do
                  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v206, 0);
                while (v206 != v205);
                v207 = v233->__vftable;
              }
              *(_QWORD *)(v9 + 784) = v205;
              operator delete(v207);
            }
            if (*(_BYTE *)(v9 + 528))
              goto LABEL_307;
          }
          else
          {
            ((void (*)(std::runtime_error *))*v205)(v233);
            if (*(_BYTE *)(v9 + 528))
            {
LABEL_307:
              v208 = *(std::__shared_weak_count **)(v9 + 464);
              if (v208)
              {
                v209 = (unint64_t *)&v208->__shared_owners_;
                do
                  v210 = __ldaxr(v209);
                while (__stlxr(v210 - 1, v209));
                if (!v210)
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
              }
              goto LABEL_312;
            }
          }
LABEL_66:
          ((void (*)(std::runtime_error *))v237->~runtime_error)(v237);
LABEL_312:
          v211 = *(std::__shared_weak_count **)(v9 + 1016);
          if (v211)
          {
            v212 = (unint64_t *)&v211->__shared_owners_;
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*i);
          *(_QWORD *)(v9 + 456) = v229;
          *(_QWORD *)v9 = 0;
          *v235 = 5;
          AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v237);
          return;
        }
        (*(void (**)(std::runtime_error *))v188)(v226);
        if (v141)
          goto LABEL_300;
        goto LABEL_262;
      }
    }
    if (v180)
    {
      v183 = *(uint64_t **)(v9 + 544);
      v184 = v180;
      if (v183 != v180)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v183, 0);
        while (v183 != v180);
        v184 = v238->__vftable;
      }
      *(_QWORD *)(v9 + 544) = v180;
      operator delete(v184);
    }
    goto LABEL_249;
  }
}

void sub_18CCEBA78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v32;

  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a20);
  v32 = *(_QWORD *)(v30 + 616);
  if (*(_BYTE *)(v30 + 688))
  {
    *a18 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  else
  {
    (*(void (**)(_QWORD *))v32)(a18);
  }
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](a26);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a30);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a29);
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*a25);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCEBB48()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCEB834);
}

void sub_18CCEBB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;

  AMSCore::Task<void,AMSCore::Error>::ValuePromise::~ValuePromise(a22);
  if (a12 < 0)
    operator delete(__p);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a20);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a24);
  operator delete(v24);
  _Unwind_Resume(a1);
}

_QWORD *AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setIdentifiers(_OWORD *a1, __int128 *a2, uint64_t *a3)
{
  char *v6;
  unint64_t v7;
  char *v8;
  std::string *v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *result;
  __int128 v24;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  const std::runtime_error *v29;
  char v30;
  std::runtime_error_vtbl *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void **v52;
  char *v53;
  _QWORD *v54;
  __int128 v55;
  std::string *v56;
  std::runtime_error *v57;
  std::string v58;

  v6 = (char *)operator new(0x1C8uLL);
  v7 = (unint64_t)v6;
  v8 = v6 + 392;
  v56 = (std::string *)(v6 + 144);
  v57 = (std::runtime_error *)(v6 + 64);
  v9 = (std::string *)(v6 + 208);
  v10 = (void **)(v6 + 240);
  v11 = (uint64_t)(v6 + 304);
  v12 = (void **)(v6 + 328);
  v52 = (void **)(v6 + 272);
  v53 = v6 + 352;
  v54 = v6 + 376;
  v13 = (uint64_t)(v6 + 16);
  v55 = *a2;
  *(_OWORD *)(v6 + 408) = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v14 = *a3;
  *((_QWORD *)v6 + 53) = a3[1];
  *a3 = 0;
  a3[1] = 0;
  do
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v15 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_WORD *)(v6 + 17) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 7) = 0;
  std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(&v58, v13);
  *a1 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 88))(v14) & 1) != 0)
  {
LABEL_77:
    *(_BYTE *)(v7 + 18) = 1;
    *(_QWORD *)(v7 + 64) = v13;
    *(_QWORD *)v7 = 0;
    return AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v57);
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  v17 = v16;
  *(_BYTE *)(v7 + 144) = 0;
  *(_BYTE *)(v7 + 168) = 0;
  v18 = *(unsigned __int8 *)(v16 + 24);
  if (*(_BYTE *)(v16 + 24))
  {
    if (*(char *)(v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
    }
    else
    {
      v19 = *(_OWORD *)v16;
      v56->__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
      *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v19;
    }
    v18 = 1;
    *(_BYTE *)(v7 + 168) = 1;
  }
  *(_QWORD *)(v7 + 176) = *(_QWORD *)(v17 + 32);
  v20 = (std::string *)(v7 + 184);
  if (*(char *)(v17 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(v17 + 40), *(_QWORD *)(v17 + 48));
    v18 = *(unsigned __int8 *)(v7 + 168);
  }
  else
  {
    v21 = *(_OWORD *)(v17 + 40);
    *(_QWORD *)(v7 + 200) = *(_QWORD *)(v17 + 56);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  *(_BYTE *)(v7 + 351) = 13;
  qmemcpy(v12, "X-Apple-ADSID", 13);
  *(_BYTE *)(v7 + 341) = 0;
  *(_BYTE *)(v7 + 208) = 0;
  *(_BYTE *)(v7 + 232) = 0;
  if (v18)
  {
    if (*(char *)(v7 + 167) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(v7 + 144), *(_QWORD *)(v7 + 152));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v9->__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    }
    *(_BYTE *)(v7 + 232) = 1;
  }
  v22 = (_QWORD *)(v55 + 240);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v55 + 240), (char *)v12);
  if (*(_BYTE *)(v7 + 232))
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v22, (uint64_t)v12, (uint64_t)v9);
    if (*(_BYTE *)(v7 + 232))
    {
      if (*(char *)(v7 + 231) < 0)
        operator delete(v9->__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(v7 + 351) < 0)
    operator delete(*v12);
  *(_BYTE *)(v7 + 327) = 6;
  *(_DWORD *)v11 = 1396976984;
  *(_WORD *)(v11 + 4) = 17481;
  *(_BYTE *)(v7 + 310) = 0;
  std::to_string(&v58, *(_QWORD *)(v7 + 176));
  *(std::string *)v10 = v58;
  memset(&v58, 0, sizeof(v58));
  *(_BYTE *)(v7 + 264) = 1;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v22, (char *)v11);
  if (*(_BYTE *)(v7 + 264))
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v22, v11, (uint64_t)v10);
    if (*(_BYTE *)(v7 + 264))
    {
      if (*(char *)(v7 + 263) < 0)
        operator delete(*v10);
    }
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v58.__r_.__value_.__l.__data_);
    if ((*(char *)(v7 + 327) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_38:
    operator delete(*(void **)v11);
    goto LABEL_30;
  }
  if (*(char *)(v7 + 327) < 0)
    goto LABEL_38;
LABEL_30:
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v54);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 376) + 24))(*(_QWORD *)(v7 + 376));
  v24 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 432) = *(_OWORD *)v8;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  if (atomic_load((unint64_t *)(v24 + 96)))
    goto LABEL_34;
  v8[56] = 0;
  v26 = (unint64_t *)(*(_QWORD *)(v7 + 432) + 96);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v7, v26));
  if (v27)
  {
LABEL_34:
    v28 = *(_QWORD *)(v7 + 432);
    if (!*(_BYTE *)(v28 + 88))
    {
      __break(1u);
      return result;
    }
    v29 = (const std::runtime_error *)(v28 + 8);
    v30 = *(_BYTE *)(v28 + 80);
    if (v30)
    {
      v31 = v29->__vftable;
      v29->__vftable = 0;
      v57->__vftable = v31;
      v32 = (uint64_t)v53;
    }
    else
    {
      std::runtime_error::runtime_error(v57, v29);
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(v28 + 24);
      v33 = (_QWORD *)(v28 + 48);
      v34 = *(_QWORD *)(v28 + 48);
      *(_QWORD *)(v7 + 104) = v34;
      v35 = v7 + 104;
      *(_QWORD *)(v7 + 64) = off_1E2521330;
      *(_QWORD *)(v7 + 96) = *(_QWORD *)(v28 + 40);
      v36 = *(_QWORD *)(v28 + 56);
      *(_QWORD *)(v7 + 112) = v36;
      if (v36)
      {
        *(_QWORD *)(v34 + 16) = v35;
        *(_QWORD *)(v28 + 40) = v33;
        *v33 = 0;
        *(_QWORD *)(v28 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 96) = v35;
      }
      v32 = (uint64_t)v53;
      v37 = *(_QWORD *)(v7 + 432);
      *(_OWORD *)(v7 + 120) = *(_OWORD *)(v37 + 64);
      *(_QWORD *)(v37 + 64) = 0;
      *(_QWORD *)(v37 + 72) = 0;
    }
    *(_BYTE *)(v7 + 136) = v30;
    v38 = *(_QWORD *)(v7 + 440);
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        v41 = *(std::__shared_weak_count **)(v7 + 440);
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v42 = *(std::__shared_weak_count **)(v7 + 400);
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = *(std::__shared_weak_count **)(v7 + 384);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = *(_QWORD *)(v7 + 64);
    if (*(_BYTE *)(v7 + 136))
    {
      if (!v48)
      {
LABEL_72:
        if (*(char *)(v7 + 207) < 0)
          operator delete(*(void **)(v7 + 184));
        if (*(_BYTE *)(v7 + 168))
        {
          if (*(char *)(v7 + 167) < 0)
            operator delete(v56->__r_.__value_.__l.__data_);
        }
        goto LABEL_77;
      }
      *(_BYTE *)(v7 + 375) = 11;
      *(_DWORD *)(v32 + 7) = 1145656132;
      *(_QWORD *)v32 = *(_QWORD *)"iCloud-DSID";
      *(_BYTE *)(v7 + 363) = 0;
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
      std::to_string(&v58, *(_QWORD *)(v49 + 32));
      v50 = *(_QWORD *)(v7 + 408);
      *(std::string *)v52 = v58;
      memset(&v58, 0, sizeof(v58));
      *(_BYTE *)(v7 + 296) = 1;
      v51 = (_QWORD *)(v50 + 240);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v50 + 240), (char *)v32);
      if (*(_BYTE *)(v7 + 296))
      {
        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v51, v32, (uint64_t)v52);
        if (*(_BYTE *)(v7 + 296))
        {
          if (*(char *)(v7 + 295) < 0)
            operator delete(*v52);
        }
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (*(char *)(v7 + 375) < 0)
        operator delete(*(void **)v32);
      v48 = *(_QWORD *)(v7 + 64);
      if (*(_BYTE *)(v7 + 136))
      {
        v57->__vftable = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
        goto LABEL_72;
      }
    }
    (*(void (**)(std::runtime_error *))v48)(v57);
    goto LABEL_72;
  }
  return result;
}

void sub_18CCEC1A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16)
{
  void **v16;
  char *v17;
  void **v18;

  if (v17[232] && v17[231] < 0)
    operator delete(*v18);
  if (v17[351] < 0)
    operator delete(*v16);
  AMSCore::AccountIdentity::~AccountIdentity(a15);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setStorefront(std::runtime_error *a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  char *v8;
  char *v9;
  char *v10;
  std::runtime_error *v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  void (***v17)(uint64_t);
  uint64_t v18;
  __int128 v19;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const std::runtime_error *v24;
  char v25;
  std::runtime_error_vtbl *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int **v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::runtime_error_vtbl *v61;
  const void *v62;
  size_t v63;
  std::string::size_type v64;
  std::string::size_type v65;
  _BYTE *v66;
  std::string::size_type v67;
  std::__shared_weak_count *imp;
  unint64_t *v69;
  unint64_t v70;
  BOOL v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  unsigned int *v83;
  unsigned int **v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  int v101;
  std::string *v102;
  uint64_t v103;
  std::runtime_error *v104;
  __int128 v105;
  uint64_t v106;
  char *v107;
  std::__shared_weak_count *v108;
  char *v109;
  _BYTE v110[24];
  unsigned int **v111;
  unsigned int *v112;
  uint64_t v113;
  __int128 v114;
  std::runtime_error v115;
  __int128 v116;
  unsigned int **v117;
  unsigned int *v118;
  uint64_t v119;
  __int128 v120;
  unsigned __int8 v121;
  std::runtime_error v122;
  __int128 v123;
  unsigned int **v124;
  unsigned int *v125;
  uint64_t v126;
  __int128 v127;

  v8 = (char *)operator new(0x1D0uLL);
  v9 = v8;
  v10 = v8 + 424;
  v11 = (std::runtime_error *)(v8 + 232);
  v102 = (std::string *)(v8 + 264);
  v103 = (uint64_t)(v8 + 320);
  v104 = (std::runtime_error *)(v8 + 152);
  v12 = (std::string *)(v8 + 344);
  v13 = v8 + 368;
  v14 = v8 + 384;
  v106 = (uint64_t)(v8 + 16);
  v107 = v8 + 296;
  *((_OWORD *)v8 + 25) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v15 = *a3;
  *((_QWORD *)v8 + 52) = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v105 = *a4;
  *(_OWORD *)(v8 + 424) = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  do
    v16 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v16 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v8[24] = 0;
  v17 = (void (***)(uint64_t))(v8 + 24);
  v8[104] = 0;
  *((_QWORD *)v8 + 14) = 0;
  *((_QWORD *)v8 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v115, v106);
  *a1 = v115;
  (*(void (**)(_QWORD))(**(_QWORD **)(v105 + 40) + 16))(*(_QWORD *)(v105 + 40));
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v15 + 128))(v15, v107);
  if (v9[256])
    goto LABEL_81;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15) & 1) != 0)
  {
LABEL_80:
    if (!v9[256])
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v115);
      AMSCore::Logger::log<char [15]>((uint64_t)v115.__vftable);
      imp = (std::__shared_weak_count *)v115.__imp_.__imp_;
      if (v115.__imp_.__imp_)
      {
        v69 = (unint64_t *)(v115.__imp_.__imp_ + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      if (v9[104])
        v71 = v9[96] == 0;
      else
        v71 = 0;
      if (v71)
        (**v17)((uint64_t)(v9 + 24));
      v9[96] = 1;
      v9[104] = 1;
      goto LABEL_150;
    }
LABEL_81:
    v56 = *(_QWORD *)v10;
    v122 = *v11;
    *(_QWORD *)&v123 = v11[1].__vftable;
    v11->__imp_.__imp_ = 0;
    v11[1].__vftable = 0;
    v11->__vftable = 0;
    v58 = *(_QWORD *)(v56 + 24);
    v57 = *(std::__shared_weak_count **)(v56 + 32);
    v108 = v57;
    if (v57)
    {
      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
      do
        v60 = __ldxr(p_shared_owners);
      while (__stxr(v60 + 1, p_shared_owners));
    }
    if (!v58)
    {
LABEL_126:
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v115);
      AMSCore::Logger::log<char [36],std::string>((uint64_t)v115.__vftable, 2, (uint64_t)"networking", 10, "Appending storefront. storefront = ", (uint64_t)&v122);
      v72 = (std::__shared_weak_count *)v115.__imp_.__imp_;
      if (v115.__imp_.__imp_)
      {
        v73 = (unint64_t *)(v115.__imp_.__imp_ + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v9[343] = 19;
      *(_DWORD *)(v103 + 15) = 1953394546;
      *(_OWORD *)v103 = *(_OWORD *)"X-Apple-Store-Front";
      v9[339] = 0;
      if (SBYTE7(v123) < 0)
      {
        std::string::__init_copy_ctor_external(v102, (const std::string::value_type *)v122.__vftable, (std::string::size_type)v122.__imp_.__imp_);
      }
      else
      {
        *(std::runtime_error *)&v102->__r_.__value_.__l.__data_ = v122;
        v102->__r_.__value_.__r.__words[2] = v123;
      }
      v75 = *((_QWORD *)v9 + 50);
      v9[288] = 1;
      v76 = (_QWORD *)(v75 + 240);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v75 + 240), (char *)v103);
      if (v9[288])
      {
        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v76, v103, (uint64_t)v102);
        if (v9[288])
        {
          if (v9[287] < 0)
            operator delete(v102->__r_.__value_.__l.__data_);
        }
      }
      if (v9[343] < 0)
        operator delete(*(void **)v103);
      v121 = 1;
      if (v9[104] && !v9[96])
      {
        (**((void (***)(uint64_t))v9 + 3))((uint64_t)(v9 + 24));
        v77 = v121;
        v9[104] = 0;
        if (!v77)
        {
          std::runtime_error::runtime_error((std::runtime_error *)(v9 + 24), &v115);
          v82 = v116;
          v84 = v117;
          v83 = v118;
          *((_QWORD *)v9 + 8) = v118;
          v85 = v9 + 64;
          *(_OWORD *)(v9 + 40) = v82;
          *((_QWORD *)v9 + 3) = off_1E2521330;
          *((_QWORD *)v9 + 7) = v84;
          v86 = v119;
          *((_QWORD *)v9 + 9) = v119;
          if (v86)
          {
            *((_QWORD *)v83 + 2) = v85;
            v117 = &v118;
            v118 = 0;
            v119 = 0;
          }
          else
          {
            *((_QWORD *)v9 + 7) = v85;
          }
          *((_OWORD *)v9 + 5) = v120;
          v120 = 0uLL;
          v101 = v121;
          v9[96] = 0;
          v9[104] = 1;
          if (!v101)
            ((void (*)(std::runtime_error *))v115.~runtime_error)(&v115);
          if (!v108)
            goto LABEL_148;
LABEL_144:
          v78 = (unint64_t *)&v108->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
            if ((SBYTE7(v123) & 0x80000000) == 0)
              goto LABEL_150;
          }
          else
          {
LABEL_148:
            if ((SBYTE7(v123) & 0x80000000) == 0)
            {
LABEL_150:
              v54 = 3;
              goto LABEL_151;
            }
          }
          operator delete(v122.__vftable);
          goto LABEL_150;
        }
      }
      else
      {
        LOBYTE(v77) = 1;
      }
      v9[96] = v77;
      v9[104] = 1;
      goto LABEL_144;
    }
    v109 = (char *)operator new(0x20uLL);
    *(_OWORD *)v110 = xmmword_18CF51B50;
    strcpy(v109, "storefront-header-suffix");
    (*(void (**)(std::runtime_error *__return_ptr, uint64_t, char **))(*(_QWORD *)v58 + 56))(&v115, v58, &v109);
    if ((v110[15] & 0x80000000) != 0)
      operator delete(v109);
    v61 = v115.__vftable;
    if (!v121)
    {
LABEL_125:
      ((void (*)(std::runtime_error *))v61->~runtime_error)(&v115);
      goto LABEL_126;
    }
    if ((SBYTE7(v116) & 0x80u) == 0)
      v62 = &v115;
    else
      v62 = v115.__vftable;
    if ((SBYTE7(v116) & 0x80u) == 0)
      v63 = BYTE7(v116);
    else
      v63 = (size_t)v115.__imp_.__imp_;
    if ((SBYTE7(v123) & 0x80u) == 0)
      v64 = 22;
    else
      v64 = (v123 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((SBYTE7(v123) & 0x80u) == 0)
      v65 = BYTE7(v123);
    else
      v65 = (std::string::size_type)v122.__imp_.__imp_;
    if (v64 - v65 >= v63)
    {
      if (v63)
      {
        if ((SBYTE7(v123) & 0x80u) == 0)
          v66 = &v122;
        else
          v66 = v122.__vftable;
        memmove(&v66[v65], v62, v63);
        v67 = v65 + v63;
        if (SBYTE7(v123) < 0)
        {
          v122.__imp_.__imp_ = (const char *)(v65 + v63);
          v66[v67] = 0;
          if (v121)
          {
LABEL_109:
            if (SBYTE7(v116) < 0)
              operator delete(v115.__vftable);
            goto LABEL_126;
          }
          goto LABEL_124;
        }
        BYTE7(v123) = v67 & 0x7F;
        v66[v67] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace((std::string *)&v122, v64, v65 + v63 - v64, v65, v65, 0, v63, (const std::string::value_type *)v62);
    }
    if (v121)
      goto LABEL_109;
LABEL_124:
    v61 = v115.__vftable;
    goto LABEL_125;
  }
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v13);
  v18 = *((_QWORD *)v9 + 46);
  if (v9[319] < 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)v9 + 37), *((_QWORD *)v9 + 38));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v107;
    v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v107 + 2);
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 48))(v18, v12);
  v19 = *((_OWORD *)v9 + 24);
  *((_OWORD *)v10 + 1) = v19;
  *v14 = 0;
  v14[1] = 0;
  if (!atomic_load((unint64_t *)(v19 + 96)))
  {
    v10[32] = 0;
    v21 = (unint64_t *)(*((_QWORD *)v9 + 55) + 96);
    do
      v22 = __ldaxr(v21);
    while (__stlxr((unint64_t)v9, v21));
    if (!v22)
      return;
  }
  v23 = *((_QWORD *)v10 + 2);
  if (!*(_BYTE *)(v23 + 88))
  {
    __break(1u);
    return;
  }
  v24 = (const std::runtime_error *)(v23 + 8);
  v25 = *(_BYTE *)(v23 + 80);
  if (v25)
  {
    v26 = v24->__vftable;
    v24->__vftable = 0;
    v104->__vftable = v26;
  }
  else
  {
    std::runtime_error::runtime_error(v104, v24);
    *(_OWORD *)(v9 + 168) = *(_OWORD *)(v23 + 24);
    v27 = (_QWORD *)(v23 + 48);
    v28 = *(_QWORD *)(v23 + 48);
    *((_QWORD *)v9 + 24) = v28;
    v29 = v9 + 192;
    *((_QWORD *)v9 + 19) = off_1E2521330;
    *((_QWORD *)v9 + 23) = *(_QWORD *)(v23 + 40);
    v30 = *(_QWORD *)(v23 + 56);
    *((_QWORD *)v9 + 25) = v30;
    if (v30)
    {
      *(_QWORD *)(v28 + 16) = v29;
      *(_QWORD *)(v23 + 40) = v27;
      *v27 = 0;
      *(_QWORD *)(v23 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v9 + 23) = v29;
    }
    v31 = *((_QWORD *)v9 + 55);
    *((_OWORD *)v9 + 13) = *(_OWORD *)(v31 + 64);
    *(_QWORD *)(v31 + 64) = 0;
    *(_QWORD *)(v31 + 72) = 0;
  }
  v9[224] = v25;
  v32 = *((_QWORD *)v9 + 56);
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      v35 = (std::__shared_weak_count *)*((_QWORD *)v9 + 56);
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)v9 + 49);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v9[367] < 0)
    operator delete(v12->__r_.__value_.__l.__data_);
  v39 = (std::__shared_weak_count *)*((_QWORD *)v9 + 47);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v9[224];
  if (v9[224])
  {
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, char *))v104->~runtime_error
     + 16))(&v115, v104->__vftable, v107);
    v43 = BYTE8(v116);
    if (v9[256] == BYTE8(v116))
    {
      if (v9[256])
      {
        if (v9[255] < 0)
          operator delete(v11->__vftable);
        *v11 = v115;
        v11[1].__vftable = (std::runtime_error_vtbl *)v116;
      }
    }
    else if (v9[256])
    {
      if (v9[255] < 0)
      {
        operator delete(v11->__vftable);
        v43 = BYTE8(v116);
      }
      v9[256] = 0;
      if (v43 && SBYTE7(v116) < 0)
        operator delete(v115.__vftable);
    }
    else
    {
      *v11 = v115;
      v11[1].__vftable = (std::runtime_error_vtbl *)v116;
      v9[256] = 1;
    }
    v54 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v115, v104);
    v44 = v9 + 192;
    v45 = *((_QWORD *)v9 + 24);
    v116 = *(_OWORD *)(v9 + 168);
    v115.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v117 = (unsigned int **)*((_QWORD *)v9 + 23);
    v118 = (unsigned int *)v45;
    v119 = *((_QWORD *)v9 + 25);
    if (v119)
    {
      *(_QWORD *)(v45 + 16) = &v118;
      *((_QWORD *)v9 + 23) = v44;
      *v44 = 0;
      *((_QWORD *)v9 + 25) = 0;
    }
    else
    {
      v117 = &v118;
    }
    v120 = *((_OWORD *)v9 + 13);
    *((_QWORD *)v9 + 26) = 0;
    *((_QWORD *)v9 + 27) = 0;
    v121 = 1;
    std::runtime_error::runtime_error(&v122, &v115);
    v123 = v116;
    v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v124 = v117;
    v125 = v118;
    v126 = v119;
    if (v119)
    {
      *((_QWORD *)v118 + 2) = &v125;
      v117 = &v118;
      v118 = 0;
      v119 = 0;
    }
    else
    {
      v124 = &v125;
    }
    v127 = v120;
    v120 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)&v109, &v122);
    *(_OWORD *)&v110[8] = v123;
    v109 = (char *)off_1E2521330;
    v46 = v125;
    v111 = v124;
    v112 = v125;
    v113 = v126;
    if (v126)
    {
      *((_QWORD *)v125 + 2) = &v112;
      v46 = 0;
      v124 = &v125;
      v125 = 0;
      v126 = 0;
    }
    else
    {
      v111 = &v112;
    }
    v114 = v127;
    v127 = 0uLL;
    v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, v46);
    MEMORY[0x18D7898AC](&v122);
    if (v9[104])
    {
      if (!v9[96])
        (**v17)((uint64_t)(v9 + 24));
      v9[104] = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v9 + 24), (const std::runtime_error *)&v109);
    v48 = v111;
    v47 = v112;
    *((_QWORD *)v9 + 8) = v112;
    v49 = v9 + 64;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)&v110[8];
    *((_QWORD *)v9 + 3) = off_1E2521330;
    *((_QWORD *)v9 + 7) = v48;
    v50 = v113;
    *((_QWORD *)v9 + 9) = v113;
    if (v50)
    {
      *((_QWORD *)v47 + 2) = v49;
      v47 = 0;
      v111 = &v112;
      v112 = 0;
      v113 = 0;
    }
    else
    {
      *((_QWORD *)v9 + 7) = v49;
    }
    *((_OWORD *)v9 + 5) = v114;
    v114 = 0uLL;
    v9[96] = 0;
    v9[104] = 1;
    v109 = (char *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v111, v47);
    MEMORY[0x18D7898AC](&v109);
    if (v121)
    {
      v115.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      if (*((_QWORD *)&v120 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, v118);
      MEMORY[0x18D7898AC](&v115);
    }
    v54 = 3;
  }
  v55 = *((_QWORD *)v9 + 19);
  if (!v9[224])
  {
    (*(void (**)(std::runtime_error *))v55)(v104);
    if (!v42)
      goto LABEL_151;
    goto LABEL_80;
  }
  v104->__vftable = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  if (v42)
    goto LABEL_80;
LABEL_151:
  if (v9[256] && v9[255] < 0)
    operator delete(v11->__vftable);
  if (v9[319] < 0)
  {
    operator delete(*(void **)v107);
    if (v54 != 3)
      goto LABEL_159;
LABEL_158:
    *((_QWORD *)v9 + 19) = v106;
    *(_QWORD *)v9 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v104);
    return;
  }
  if (v54 == 3)
    goto LABEL_158;
LABEL_159:
  v80 = (char *)*((_QWORD *)v9 + 18);
  if (v80 == v9 + 120)
  {
    v81 = 4;
    v80 = v9 + 120;
  }
  else
  {
    if (!v80)
      goto LABEL_169;
    v81 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v80 + 8 * v81))();
LABEL_169:
  if (v9[104] && !v9[96])
    (**v17)((uint64_t)(v9 + 24));
  v87 = *((_QWORD *)v9 + 54);
  do
  {
    v88 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v89 = v88 - 1;
  }
  while (__stlxr(v89, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v89)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v87)
  {
    v90 = (unint64_t *)(*((_QWORD *)v9 + 54) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      v92 = (std::__shared_weak_count *)*((_QWORD *)v9 + 54);
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v93 = *((_QWORD *)v9 + 52);
  if (v93)
  {
    v94 = (unint64_t *)(v93 + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      v96 = (std::__shared_weak_count *)*((_QWORD *)v9 + 52);
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v97 = *((_QWORD *)v9 + 51);
  if (v97)
  {
    v98 = (unint64_t *)(v97 + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      v100 = (std::__shared_weak_count *)*((_QWORD *)v9 + 51);
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  operator delete(v9);
}

void sub_18CCECF24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  char *v19;
  uint64_t v20;
  void **v21;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v20);
  if (v19[256] && v19[255] < 0)
    operator delete(*v21);
  if (v19[319] < 0)
    operator delete(*a19);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCED020()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCECCECLL);
}

void std::__throw_bad_expected_access[abi:fe180100]<AMSCore::Error,AMSCore::Error const&>(const std::runtime_error *a1)
{
  char *exception;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  std::runtime_error v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  exception = (char *)__cxa_allocate_exception(0x50uLL);
  AMSCore::Error::Error(&v6, a1);
  *(_QWORD *)exception = &off_1E25225A8;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), &v6);
  *(_OWORD *)(exception + 24) = v7;
  *((_QWORD *)exception + 1) = off_1E2521330;
  *((_QWORD *)exception + 5) = v8;
  v3 = v9;
  *((_QWORD *)exception + 6) = v9;
  v4 = exception + 48;
  v5 = v10;
  *((_QWORD *)exception + 7) = v10;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    v8 = &v9;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    *((_QWORD *)exception + 5) = v4;
  }
  *((_OWORD *)exception + 4) = v11;
  v11 = 0uLL;
}

void sub_18CCED0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  uint64_t v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v20 = a18;
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v18, a15);
  MEMORY[0x18D7898AC](&a10);
  _Unwind_Resume(a1);
}

void sub_18CCED154(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StringUtils::join<std::string,std::string>(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[8];
  void *__p[2];
  __int128 v23;
  int v24;
  uint64_t v25[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v25[0] = MEMORY[0x1E0DE4FE0] + 64;
  v20 = v9;
  *(_QWORD *)((char *)&v21[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v21[-1] + *(_QWORD *)(v20 - 24));
  std::ios_base::init(v11, v21);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v20 = v6 + 24;
  v25[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v21[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v23 = 0u;
  v24 = 16;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v20, v14, v15);
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = a3;
  else
    v17 = *(_QWORD *)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v20, v17, v18);
  std::stringbuf::str[abi:fe180100]((uint64_t)v21, a1);
  v20 = *v8;
  *(_QWORD *)((char *)&v21[-1] + *(_QWORD *)(v20 - 24)) = v8[3];
  v21[0] = v12 + 16;
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v25);
}

void sub_18CCED2D8(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Logger::log<char [36]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Setting the ignore FairPlay header.", 35);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "networking", 10, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CCED544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setMescalHeaders(std::runtime_error *a1, uint64_t *a2, __int128 *a3)
{
  char *v6;
  unint64_t v7;
  std::runtime_error *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void (***v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  std::system_error_vtbl *v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  int64_t what;
  char *v26;
  int v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  void *v34;
  const char *imp;
  const char *v36;
  int64_t size;
  char *v38;
  int v39;
  const char *v40;
  void *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  int v45;
  std::vector<std::string>::pointer v46;
  void (__cdecl *v47)(std::system_error *__hidden);
  std::system_error *v48;
  int v49;
  _BOOL4 v50;
  const std::string::value_type **v51;
  __int128 v52;
  std::string::size_type v53;
  uint64_t v54;
  char v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  std::runtime_error v64;
  unint64_t *v66;
  unint64_t v67;
  std::runtime_error_vtbl *v68;
  int v69;
  std::runtime_error_vtbl *v70;
  void (__cdecl *v71)(std::runtime_error *__hidden);
  unint64_t v72;
  void (__cdecl *v73)(std::runtime_error *__hidden);
  int v74;
  std::runtime_error *v75;
  int v76;
  char *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  char v104;
  char *v105;
  std::string::size_type v106;
  char *v107;
  std::string::size_type v108;
  std::runtime_error *v109;
  void *v110;
  const char *v111;
  int v112;
  void *v113;
  std::string *v114;
  int64_t v115;
  const char *v116;
  const char *v117;
  _BOOL4 v118;
  int v119;
  const char *v120;
  void *v121;
  const char *v122;
  const char *v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  _QWORD *v128;
  _BYTE *v129;
  _BOOL4 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  std::runtime_error v140;
  unint64_t *v142;
  unint64_t v143;
  std::runtime_error_vtbl *v144;
  int v145;
  std::runtime_error_vtbl *v146;
  void (__cdecl *v147)(std::runtime_error *__hidden);
  unint64_t v148;
  void (__cdecl *v149)(std::runtime_error *__hidden);
  int v150;
  std::vector<std::string>::pointer v151;
  std::vector<std::string>::pointer *p_end;
  std::vector<std::string>::pointer v153;
  int v154;
  std::string::size_type *v155;
  unint64_t v156;
  size_t v157;
  int v158;
  int v159;
  std::vector<std::string>::pointer v160;
  unint64_t v161;
  size_t v162;
  int v163;
  _QWORD *v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int *v167;
  unsigned int **v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  int v174;
  const void **v175;
  uint64_t *v176;
  int v177;
  uint64_t *v178;
  uint64_t *v179;
  std::vector<std::string>::pointer v180;
  std::vector<std::string>::pointer v181;
  std::vector<std::string>::pointer *v182;
  std::vector<std::string>::pointer v183;
  int v184;
  std::string::size_type *p_size;
  unint64_t v186;
  size_t v187;
  int v188;
  int v189;
  std::vector<std::string>::pointer v190;
  unint64_t v191;
  size_t v192;
  int v193;
  uint64_t *v194;
  uint64_t *v195;
  const std::string::value_type *v196;
  uint64_t v197;
  int v198;
  const std::string::value_type *v199;
  std::string::size_type v200;
  std::string::size_type v201;
  std::string::size_type v202;
  std::string *v203;
  std::string::size_type v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  int v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  BOOL v224;
  std::vector<std::string>::pointer v225;
  uint64_t v226;
  int v227;
  unsigned __int8 **v228;
  uint64_t v229;
  size_t v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  uint64_t v233;
  unsigned __int8 *v234;
  const void **v235;
  unsigned __int8 *v236;
  const std::string::value_type *v237;
  uint64_t v238;
  const std::string::value_type *v239;
  int v240;
  const std::string::value_type *v241;
  std::string::size_type v242;
  std::string::size_type v243;
  std::string::size_type v244;
  std::string *v245;
  std::string::size_type v246;
  int data;
  BOOL v248;
  std::vector<std::string>::pointer v249;
  __int128 v250;
  std::vector<std::string>::pointer *v251;
  int v252;
  std::string::size_type *v253;
  unint64_t v254;
  size_t v255;
  int v256;
  int v257;
  std::vector<std::string>::pointer v258;
  unint64_t v259;
  size_t v260;
  int v261;
  const void *v262;
  size_t v263;
  std::string::size_type v264;
  std::string::size_type v265;
  std::string *v266;
  std::string::size_type v267;
  std::system_error_vtbl *v268;
  uint64_t v269;
  uint64_t v270;
  std::system_error_vtbl *v271;
  std::system_error_vtbl *v272;
  std::ios_base *v273;
  uint64_t v274;
  std::string *v275;
  std::string::size_type v276;
  unsigned int *v277;
  unsigned int *v278;
  unsigned int **v279;
  unint64_t v280;
  uint64_t v281;
  size_t v282;
  unint64_t v283;
  std::string::value_type *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  unsigned __int8 *v288;
  unsigned int *v289;
  unsigned int *v290;
  unsigned int **v291;
  unint64_t v292;
  uint64_t v293;
  std::string *v294;
  std::string *v295;
  std::runtime_error *v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int cat_low;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  std::runtime_error *v307;
  void *__s;
  int __sa;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t v312;
  std::runtime_error *v313;
  uint64_t *v314;
  void *v315;
  uint64_t *v316;
  size_t v317;
  uint64_t v318;
  std::runtime_error *v319;
  std::runtime_error *v320;
  uint64_t *v321;
  char *v322;
  __int128 v323;
  uint64_t v324;
  std::vector<std::string>::pointer v325;
  std::vector<std::string> v326;
  unsigned __int8 v327;
  _BYTE __p[32];
  unsigned int **v329;
  unsigned int *v330;
  uint64_t v331;
  __int128 v332;
  char v333;
  std::string v334;
  std::runtime_error v335;
  std::error_code ec;
  unsigned int **v337;
  unsigned int *v338;
  uint64_t v339;
  __int128 v340;
  std::string v341;
  std::system_error v342;
  unsigned int **v343;
  unsigned int *v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  int v349;
  uint64_t v350[22];
  std::error_code v351;
  std::error_code v352;

  v6 = (char *)operator new(0x208uLL);
  v7 = (unint64_t)v6;
  v8 = (std::runtime_error *)(v6 + 152);
  v313 = (std::runtime_error *)(v6 + 232);
  v318 = (uint64_t)(v6 + 312);
  v316 = (uint64_t *)(v6 + 328);
  v314 = (uint64_t *)(v6 + 344);
  v321 = (uint64_t *)(v6 + 360);
  v322 = v6 + 392;
  v311 = (uint64_t *)(v6 + 424);
  v312 = (uint64_t)(v6 + 408);
  v310 = (uint64_t *)(v6 + 440);
  v9 = (uint64_t)(v6 + 16);
  v11 = *a2;
  v10 = a2[1];
  *((_QWORD *)v6 + 57) = *a2;
  *((_QWORD *)v6 + 58) = v10;
  *a2 = 0;
  a2[1] = 0;
  v320 = (std::runtime_error *)(v6 + 376);
  v323 = *a3;
  *(_OWORD *)(v6 + 472) = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  do
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v12 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v13 = (void (***)(uint64_t))(v6 + 24);
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v342, v9);
  *a1 = v342.std::runtime_error;
  v14 = v323;
  v15 = *(_QWORD *)(v323 + 24);
  *(_QWORD *)(v7 + 360) = v15;
  v16 = *(_QWORD *)(v323 + 32);
  *(_QWORD *)(v7 + 368) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (!v15)
  {
    if (*(_BYTE *)(v7 + 104))
      v19 = *(_BYTE *)(v7 + 96) == 0;
    else
      v19 = 0;
    if (!v19)
      goto LABEL_22;
LABEL_21:
    (**v13)(v7 + 24);
LABEL_22:
    *(_BYTE *)(v7 + 96) = 1;
    *(_BYTE *)(v7 + 104) = 1;
    goto LABEL_23;
  }
  if (!*(_DWORD *)(v323 + 172))
  {
    if (!*(_BYTE *)(v7 + 104) || *(_BYTE *)(v7 + 96))
      goto LABEL_22;
    goto LABEL_21;
  }
  v307 = (std::runtime_error *)(v7 + 24);
  v303 = v9;
  v324 = v10;
  if (*(_DWORD *)(v11 + 232) != 6)
    goto LABEL_118;
  v299 = v16;
  v300 = v15;
  v301 = v14;
  __p[23] = 16;
  strcpy(__p, "sign-sap-request");
  (*(void (**)(std::system_error *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v15 + 48))(&v342, v15, __p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((_BYTE)v347)
      goto LABEL_11;
LABEL_26:
    ((void (*)(std::system_error *))v342.~system_error)(&v342);
    v15 = v300;
    v14 = v301;
    v16 = v299;
    goto LABEL_118;
  }
  if (!(_BYTE)v347)
    goto LABEL_26;
LABEL_11:
  __p[0] = 0;
  __p[24] = 0;
  if (!*(_BYTE *)(v11 + 168))
    goto LABEL_113;
  v295 = (std::string *)v8;
  if (*(char *)(v11 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v11 + 144), *(_QWORD *)(v11 + 152));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v11 + 144);
    *(_QWORD *)&__p[16] = *(_QWORD *)(v11 + 160);
  }
  __p[24] = 1;
  AMSCore::URL::getLastPathComponent((AMSCore::URL *)&v335, v11 + 80);
  if (!LOBYTE(ec.__cat_))
  {
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    LOBYTE(v49) = 0;
    goto LABEL_114;
  }
  v21 = v342.__vftable;
  if ((std::__libcpp_refstring *)v342.__vftable == &v342.__imp_)
  {
    v49 = 0;
    v50 = 1;
    goto LABEL_99;
  }
  v304 = v11;
  v297 = v7;
  while (1)
  {
    if (!__p[24])
      goto LABEL_647;
    v22 = __p[23];
    if (__p[23] >= 0)
      v23 = __p;
    else
      v23 = *(_BYTE **)__p;
    if (__p[23] < 0)
      v22 = *(_QWORD *)&__p[8];
    if (SHIBYTE(v21[2].~system_error) < 0)
    {
      v24 = (char *)v21[1].~system_error_0;
      what = (int64_t)v21[1].what;
      if (what)
      {
LABEL_42:
        if (v22 >= what)
        {
          v26 = &v23[v22];
          v27 = *v24;
          v28 = v23;
          while (1)
          {
            v29 = v22 - what;
            if (v29 == -1)
              break;
            v30 = (char *)memchr(v28, v27, v29 + 1);
            if (!v30)
              break;
            v31 = v30;
            if (!memcmp(v30, v24, what))
            {
              if (v31 == v26 || v31 - v23 == -1)
                goto LABEL_86;
              goto LABEL_51;
            }
            v28 = v31 + 1;
            v22 = v26 - (v31 + 1);
            if (v22 < what)
              goto LABEL_86;
          }
        }
        goto LABEL_86;
      }
    }
    else
    {
      v24 = (char *)&v21[1].~system_error_0;
      what = HIBYTE(v21[2].~system_error);
      if (HIBYTE(v21[2].~system_error))
        goto LABEL_42;
    }
LABEL_51:
    if (LODWORD(v21[3].~system_error_0) == 9)
      break;
LABEL_86:
    v47 = v21->~system_error_0;
    if (v47)
    {
      do
      {
        v48 = (std::system_error *)v47;
        v47 = *(void (__cdecl **)(std::system_error *__hidden))v47;
      }
      while (v47);
    }
    else
    {
      do
      {
        v48 = (std::system_error *)v21->what;
        v19 = v48->__vftable == v21;
        v21 = (std::system_error_vtbl *)v48;
      }
      while (!v19);
    }
    v21 = (std::system_error_vtbl *)v48;
    v11 = v304;
    v10 = v324;
    if (v48 == (std::system_error *)&v342.__imp_)
    {
      v49 = 0;
      goto LABEL_97;
    }
  }
  AMSCore::toStringVector(&v326, (__int128 **)&v21[2].~system_error_0);
  if (!LOBYTE(ec.__cat_))
    goto LABEL_647;
  begin = v326.__begin_;
  end = v326.__end_;
  if (v326.__begin_ == v326.__end_)
  {
    v7 = v297;
    if (v326.__begin_)
    {
      v326.__end_ = v326.__begin_;
      operator delete(v326.__begin_);
    }
    goto LABEL_86;
  }
  v34 = v335.__vftable;
  if (*((char *)&ec.__val_ + 7) < 0)
  {
    imp = v335.__imp_.__imp_;
  }
  else
  {
    v34 = &v335;
    imp = (const char *)*((unsigned __int8 *)&ec.__val_ + 7);
  }
  __s = v34;
  v36 = &imp[(_QWORD)v34];
  v294 = v326.__begin_;
  do
  {
    if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (char *)begin->__r_.__value_.__r.__words[0];
      size = begin->__r_.__value_.__l.__size_;
      if (!size)
      {
LABEL_72:
        v45 = 0;
        goto LABEL_76;
      }
    }
    else
    {
      size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      v38 = (char *)begin;
      if (!*((_BYTE *)&begin->__r_.__value_.__s + 23))
        goto LABEL_72;
    }
    if ((uint64_t)imp >= size)
    {
      v39 = *v38;
      v40 = imp;
      v41 = __s;
      do
      {
        v42 = &v40[-size];
        if (v42 == (const char *)-1)
          break;
        v43 = (const char *)memchr(v41, v39, (size_t)(v42 + 1));
        if (!v43)
          break;
        v44 = v43;
        if (!memcmp(v43, v38, size))
        {
          if (v44 == v36 || v44 - (_BYTE *)__s == -1)
            break;
          goto LABEL_72;
        }
        v41 = (void *)(v44 + 1);
        v40 = (const char *)(v36 - (v44 + 1));
      }
      while ((uint64_t)v40 >= size);
    }
    ++begin;
  }
  while (begin != end);
  v45 = 1;
LABEL_76:
  v9 = v303;
  if (!v294)
  {
    v7 = v297;
    if (!v45)
      goto LABEL_369;
    goto LABEL_86;
  }
  if (v294 == end)
  {
    v326.__end_ = v294;
    v46 = v294;
  }
  else
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v294);
    v46 = v326.__begin_;
    v326.__end_ = v294;
  }
  operator delete(v46);
  v7 = v297;
  if ((v45 & 1) != 0)
    goto LABEL_86;
LABEL_369:
  v49 = 1;
  v10 = v324;
  v11 = v304;
LABEL_97:
  v50 = LOBYTE(ec.__cat_) != 0;
LABEL_99:
  v8 = (std::runtime_error *)v295;
  if (v50 && *((char *)&ec.__val_ + 7) < 0)
    operator delete(v335.__vftable);
  if (__p[24] && (__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v49 & 1) == 0)
    {
LABEL_113:
      LOBYTE(v49) = 0;
      goto LABEL_114;
    }
  }
  else if (!v49)
  {
    goto LABEL_114;
  }
  v51 = (const std::string::value_type **)(v11 + 280);
  if (*(char *)(v11 + 303) < 0)
  {
    v53 = *(_QWORD *)(v11 + 288);
    if (!v53)
      goto LABEL_113;
    std::string::__init_copy_ctor_external(v295, *v51, v53);
  }
  else
  {
    if (!*(_BYTE *)(v11 + 303))
      goto LABEL_113;
    v52 = *(_OWORD *)v51;
    v295->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 296);
    *(_OWORD *)&v295->__r_.__value_.__l.__data_ = v52;
  }
  LOBYTE(v49) = 1;
  *(_BYTE *)(v7 + 224) = 1;
LABEL_114:
  if ((_BYTE)v347)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v342, (unsigned int *)v342.__imp_.__imp_);
  else
    ((void (*)(std::system_error *))v342.~system_error)(&v342);
  v15 = v300;
  v14 = v301;
  v16 = v299;
  if ((v49 & 1) == 0)
  {
LABEL_118:
    v8->__vftable = 0;
    v8->__imp_.__imp_ = 0;
    v8[1].__vftable = 0;
    *(_BYTE *)(v7 + 224) = 1;
  }
  if (!*(_BYTE *)(v7 + 224))
  {
    v74 = 0;
    v75 = v307;
    goto LABEL_197;
  }
  v54 = *(unsigned __int8 *)(v7 + 175);
  v55 = v54;
  if ((v54 & 0x80u) != 0)
    v54 = *(_QWORD *)(v7 + 160);
  if (!v54)
  {
    v76 = 0;
    v75 = v307;
    if (v55 < 0)
      goto LABEL_146;
    goto LABEL_147;
  }
  *(_QWORD *)(v7 + 312) = v11;
  *(_QWORD *)(v7 + 320) = v10;
  if (v10)
  {
    v56 = (unint64_t *)(v10 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  *(_QWORD *)(v7 + 328) = v15;
  *(_QWORD *)(v7 + 336) = v16;
  *v321 = 0;
  v321[1] = 0;
  *(_QWORD *)(v7 + 344) = *(_QWORD *)(v14 + 40);
  v58 = *(_QWORD *)(v14 + 48);
  *(_QWORD *)(v7 + 352) = v58;
  if (v58)
  {
    v59 = (unint64_t *)(v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  if (!*(_BYTE *)(v7 + 224))
    goto LABEL_647;
  v61 = *(char *)(v7 + 175);
  if (v61 >= 0)
    v62 = (uint64_t)v8;
  else
    v62 = *(_QWORD *)(v7 + 152);
  if (v61 >= 0)
    v63 = *(unsigned __int8 *)(v7 + 175);
  else
    v63 = *(_QWORD *)(v7 + 160);
  v64 = *v320;
  v320[7] = *v320;
  v320->__vftable = 0;
  v320->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)&v64.__vftable[4]))
  {
    LOBYTE(v320[8].__imp_.__imp_) = 0;
    v66 = (unint64_t *)(*(_QWORD *)(v7 + 488) + 96);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v7, v66));
    if (!v67)
      return;
  }
  v68 = v320[7].__vftable;
  if (!LOBYTE(v68[3].what))
    goto LABEL_647;
  v69 = LOBYTE(v68[3].~runtime_error_0);
  if (!LOBYTE(v68[3].~runtime_error_0))
  {
    std::runtime_error::runtime_error(v313, (const std::runtime_error *)&v68->~runtime_error_0);
    *(_OWORD *)(v7 + 248) = *(_OWORD *)&v68[1].~runtime_error;
    *(_QWORD *)(v7 + 232) = off_1E2521330;
    v70 = v68 + 2;
    v71 = v68[2].~runtime_error;
    v72 = v7 + 272;
    *(_QWORD *)(v7 + 264) = v68[1].what;
    *(_QWORD *)(v7 + 272) = v71;
    v73 = v68[2].~runtime_error_0;
    *(_QWORD *)(v7 + 280) = v73;
    if (v73)
    {
      *((_QWORD *)v71 + 2) = v72;
      v68[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v70;
      v70->~runtime_error = 0;
      v68[2].~runtime_error_0 = 0;
    }
    else
    {
      *(_QWORD *)(v7 + 264) = v72;
    }
    v80 = *(_QWORD *)(v7 + 488);
    *(_OWORD *)(v7 + 288) = *(_OWORD *)(v80 + 64);
    *(_QWORD *)(v80 + 64) = 0;
    *(_QWORD *)(v80 + 72) = 0;
  }
  *(_BYTE *)(v7 + 304) = v69;
  if (*(_BYTE *)(v7 + 104))
  {
    if (!*(_BYTE *)(v7 + 96))
    {
      (**(void (***)(std::runtime_error *))(v7 + 24))(v307);
      v69 = *(unsigned __int8 *)(v7 + 304);
    }
    *(_BYTE *)(v7 + 104) = 0;
  }
  if (v69)
  {
    *(_BYTE *)(v7 + 96) = v69;
    *(_BYTE *)(v7 + 104) = 1;
    v75 = v307;
  }
  else
  {
    v75 = v307;
    std::runtime_error::runtime_error(v307, v313);
    v81 = *(_QWORD *)(v7 + 272);
    *(_QWORD *)(v7 + 64) = v81;
    v82 = v7 + 64;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v7 + 248);
    *(_QWORD *)(v7 + 24) = off_1E2521330;
    *(_QWORD *)(v7 + 56) = *(_QWORD *)(v7 + 264);
    v83 = *(_QWORD *)(v7 + 280);
    *(_QWORD *)(v7 + 72) = v83;
    if (v83)
    {
      *(_QWORD *)(v81 + 16) = v82;
      *(_QWORD *)(v7 + 264) = v7 + 272;
      *(_QWORD *)(v7 + 272) = 0;
      *(_QWORD *)(v7 + 280) = 0;
    }
    else
    {
      *(_QWORD *)(v7 + 56) = v82;
    }
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v7 + 288);
    *(_QWORD *)(v7 + 288) = 0;
    *(_QWORD *)(v7 + 296) = 0;
    v84 = *(unsigned __int8 *)(v7 + 304);
    *(_BYTE *)(v7 + 96) = 0;
    *(_BYTE *)(v7 + 104) = 1;
    if (!v84)
      ((void (*)(std::runtime_error *))v313->~runtime_error)(v313);
  }
  v85 = *(_QWORD *)(v7 + 496);
  if (v85)
  {
    v86 = (unint64_t *)(v85 + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      v88 = *(std::__shared_weak_count **)(v7 + 496);
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v89 = *(std::__shared_weak_count **)(v7 + 384);
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = *(std::__shared_weak_count **)(v7 + 352);
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = *(std::__shared_weak_count **)(v7 + 336);
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *(std::__shared_weak_count **)(v7 + 320);
  if (v98)
  {
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (!*(_BYTE *)(v7 + 224))
  {
    v74 = 3;
LABEL_197:
    ((void (*)(std::runtime_error *))v8->~runtime_error)(v8);
    v77 = v322;
    if (v74)
      goto LABEL_148;
    goto LABEL_198;
  }
  v76 = 3;
  if ((*(_BYTE *)(v7 + 175) & 0x80) != 0)
LABEL_146:
    operator delete(v8->__vftable);
LABEL_147:
  v77 = v322;
  if (v76)
  {
LABEL_148:
    v10 = *(_QWORD *)(v7 + 464);
    v20 = *(std::__shared_weak_count **)(v7 + 368);
    if (v20)
      goto LABEL_149;
    goto LABEL_153;
  }
LABEL_198:
  v101 = *((_QWORD *)v77 + 8);
  v102 = *v321;
  *((_BYTE *)&v342.__ec_.__val_ + 7) = 14;
  strcpy((char *)&v342, "signed-actions");
  (*(void (**)(_BYTE *__return_ptr, uint64_t, std::system_error *))(*(_QWORD *)v102 + 48))(__p, v102, &v342);
  if (*((char *)&v342.__ec_.__val_ + 7) < 0)
  {
    operator delete(v342.__vftable);
    if (v333)
      goto LABEL_200;
    goto LABEL_264;
  }
  if (!v333)
  {
LABEL_264:
    (**(void (***)(_BYTE *))__p)(__p);
    goto LABEL_266;
  }
LABEL_200:
  if (!*(_BYTE *)(v101 + 168)
    || (AMSCore::URL::getLastPathComponent((AMSCore::URL *)&v342, v101 + 80), !LOBYTE(v342.__ec_.__cat_)))
  {
    LOBYTE(v326.__begin_) = 0;
    v327 = 0;
    v130 = 1;
    goto LABEL_260;
  }
  cat_low = LOBYTE(v342.__ec_.__cat_);
  v305 = v102;
  v306 = v101;
  v319 = (std::runtime_error *)(v101 + 144);
  v103 = *(_BYTE **)__p;
  v298 = v7;
  if (*(_BYTE **)__p == &__p[8])
  {
LABEL_297:
    v150 = 0;
    LOBYTE(v326.__begin_) = 0;
    v327 = 0;
LABEL_298:
    v102 = v305;
    v75 = v307;
LABEL_299:
    if (*((char *)&v342.__ec_.__val_ + 7) < 0)
    {
      operator delete(v342.__vftable);
      v150 = v327;
    }
    goto LABEL_301;
  }
  while (2)
  {
    if (*((_DWORD *)v103 + 20) != 8)
      goto LABEL_253;
    if (!*(_BYTE *)(v101 + 168))
      goto LABEL_647;
    v104 = *(_BYTE *)(v101 + 167);
    if (v104 >= 0)
      v105 = (char *)v319;
    else
      v105 = *(char **)(v101 + 144);
    if (v104 >= 0)
      v106 = *(unsigned __int8 *)(v101 + 167);
    else
      v106 = *(_QWORD *)(v101 + 152);
    if ((char)v103[55] < 0)
    {
      v107 = (char *)*((_QWORD *)v103 + 4);
      v108 = *((_QWORD *)v103 + 5);
    }
    else
    {
      v107 = v103 + 32;
      v108 = v103[55];
    }
    v109 = v8;
    AMSCore::StringUtils::lowercase((uint64_t)&v335, v105, v106);
    if (*((char *)&ec.__val_ + 7) >= 0)
      v110 = &v335;
    else
      v110 = v335.__vftable;
    if (*((char *)&ec.__val_ + 7) >= 0)
      v111 = (const char *)*((unsigned __int8 *)&ec.__val_ + 7);
    else
      v111 = v335.__imp_.__imp_;
    AMSCore::StringUtils::lowercase((uint64_t)&v341, v107, v108);
    v112 = SHIBYTE(v341.__r_.__value_.__r.__words[2]);
    v113 = (void *)v341.__r_.__value_.__r.__words[0];
    if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v114 = &v341;
    else
      v114 = (std::string *)v341.__r_.__value_.__r.__words[0];
    if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v115 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
    else
      v115 = v341.__r_.__value_.__l.__size_;
    if (v115)
    {
      v116 = &v111[(_QWORD)v110];
      if ((uint64_t)v111 >= v115)
      {
        __sa = SHIBYTE(v341.__r_.__value_.__r.__words[2]);
        v315 = (void *)v341.__r_.__value_.__r.__words[0];
        v119 = v114->__r_.__value_.__s.__data_[0];
        v120 = v111;
        v121 = v110;
        while (1)
        {
          v122 = &v120[-v115];
          if (v122 == (const char *)-1 || (v123 = (const char *)memchr(v121, v119, (size_t)(v122 + 1))) == 0)
          {
LABEL_237:
            v117 = &v111[(_QWORD)v110];
            goto LABEL_239;
          }
          v117 = v123;
          if (!memcmp(v123, v114, v115))
            break;
          v121 = (void *)(v117 + 1);
          v120 = (const char *)(v116 - (v117 + 1));
          if ((uint64_t)v120 < v115)
            goto LABEL_237;
        }
        v111 = (const char *)(v117 - (_BYTE *)v110);
LABEL_239:
        v101 = v306;
        v113 = v315;
        v112 = __sa;
      }
      else
      {
        v117 = &v111[(_QWORD)v110];
      }
      v118 = v117 != v116 && v111 + 1 != 0;
    }
    else
    {
      v118 = 1;
    }
    v8 = v109;
    v9 = v303;
    if ((v112 & 0x80000000) == 0)
    {
      if ((*((char *)&ec.__val_ + 7) & 0x80000000) == 0)
        goto LABEL_248;
LABEL_251:
      operator delete(v335.__vftable);
      v125 = (uint64_t)(v103 + 56);
      if (v118)
        goto LABEL_252;
LABEL_253:
      v128 = (_QWORD *)*((_QWORD *)v103 + 1);
      if (v128)
      {
        do
        {
          v129 = v128;
          v128 = (_QWORD *)*v128;
        }
        while (v128);
      }
      else
      {
        do
        {
          v129 = (_BYTE *)*((_QWORD *)v103 + 2);
          v19 = *(_QWORD *)v129 == (_QWORD)v103;
          v103 = v129;
        }
        while (!v19);
      }
      v103 = v129;
      if (v129 == &__p[8])
        goto LABEL_297;
      continue;
    }
    break;
  }
  operator delete(v113);
  if (*((char *)&ec.__val_ + 7) < 0)
    goto LABEL_251;
LABEL_248:
  v125 = (uint64_t)(v103 + 56);
  if (!v118)
    goto LABEL_253;
LABEL_252:
  v126 = v125;
  v127 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v125, (const void **)&v342.__vftable);
  if ((uint64_t *)(v126 + 8) == v127)
    goto LABEL_253;
  v174 = *((_DWORD *)v127 + 20);
  LOBYTE(v326.__begin_) = 0;
  v327 = 0;
  if (v174 != 8)
  {
    v150 = 0;
    goto LABEL_298;
  }
  v326.__end_ = 0;
  v326.__end_cap_.__value_ = 0;
  v326.__begin_ = (std::vector<std::string>::pointer)&v326.__end_;
  v175 = (const void **)v127[7];
  v176 = v127 + 8;
  v102 = v305;
  v177 = cat_low;
  if (v175 != (const void **)(v127 + 8))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v326, (uint64_t *)&v326.__end_, v175 + 4, (__int128 *)v175 + 2);
      v178 = (uint64_t *)v175[1];
      if (v178)
      {
        do
        {
          v179 = v178;
          v178 = (uint64_t *)*v178;
        }
        while (v178);
      }
      else
      {
        do
        {
          v179 = (uint64_t *)v175[2];
          v19 = *v179 == (_QWORD)v175;
          v175 = (const void **)v179;
        }
        while (!v19);
      }
      v175 = (const void **)v179;
    }
    while (v179 != v176);
    v177 = LOBYTE(v342.__ec_.__cat_);
  }
  v150 = 1;
  v327 = 1;
  v75 = v307;
  if (v177)
    goto LABEL_299;
LABEL_301:
  v130 = v150 == 0;
  if (!v150)
  {
    v7 = v298;
    goto LABEL_260;
  }
  v296 = v8;
  memset(&v341, 0, sizeof(v341));
  v151 = v326.__end_;
  if (!v326.__end_)
    goto LABEL_641;
  p_end = &v326.__end_;
  v153 = v326.__end_;
  while (2)
  {
    while (1)
    {
      v154 = v153[2].__r_.__value_.__s.__data_[7];
      v155 = v154 >= 0
           ? &v153[1].__r_.__value_.__r.__words[1]
           : (std::string::size_type *)v153[1].__r_.__value_.__l.__size_;
      v156 = v154 >= 0 ? v153[2].__r_.__value_.__s.__data_[7] : v153[1].__r_.__value_.__r.__words[2];
      v157 = v156 >= 7 ? 7 : v156;
      v158 = memcmp(v155, "headers", v157);
      if (!v158)
        break;
      if ((v158 & 0x80000000) == 0)
        goto LABEL_318;
LABEL_304:
      v153 = (std::vector<std::string>::pointer)v153->__r_.__value_.__l.__size_;
      if (!v153)
        goto LABEL_319;
    }
    if (v156 < 7)
      goto LABEL_304;
LABEL_318:
    p_end = (std::vector<std::string>::pointer *)v153;
    v153 = (std::vector<std::string>::pointer)v153->__r_.__value_.__r.__words[0];
    if (v153)
      continue;
    break;
  }
LABEL_319:
  if (p_end == &v326.__end_)
  {
    v9 = v303;
    v75 = v307;
    v102 = v305;
    if (!v151)
      goto LABEL_641;
    goto LABEL_376;
  }
  v159 = *((char *)p_end + 55);
  if (v159 >= 0)
    v160 = (std::vector<std::string>::pointer)(p_end + 4);
  else
    v160 = p_end[4];
  if (v159 >= 0)
    v161 = *((unsigned __int8 *)p_end + 55);
  else
    v161 = (unint64_t)p_end[5];
  if (v161 >= 7)
    v162 = 7;
  else
    v162 = v161;
  v163 = memcmp(v160, "headers", v162);
  if (!v163)
  {
    v9 = v303;
    if (v161 <= 7)
      goto LABEL_371;
    goto LABEL_374;
  }
  v9 = v303;
  if ((v163 & 0x80000000) == 0)
  {
LABEL_374:
    v75 = v307;
LABEL_375:
    v102 = v305;
    if (!v151)
      goto LABEL_641;
    goto LABEL_376;
  }
LABEL_371:
  if (*((_DWORD *)p_end + 20) != 9)
    goto LABEL_374;
  v180 = p_end[7];
  v181 = p_end[8];
  v75 = v307;
  if (v180 == v181)
    goto LABEL_375;
  do
  {
    if (LODWORD(v180[1].__r_.__value_.__l.__data_) == 5)
    {
      v194 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v306 + 240), (char *)v180);
      if (!v194)
      {
        data = (int)v180[1].__r_.__value_.__l.__data_;
        v248 = data == 5;
        if (data == 5)
          v249 = v180;
        else
          v249 = 0;
        if (v248)
        {
          if (SHIBYTE(v249->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v334, v249->__r_.__value_.__l.__data_, v249->__r_.__value_.__l.__size_);
          }
          else
          {
            v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
            v334.__r_.__value_.__r.__words[2] = v249->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v250;
          }
        }
        else
        {
          *((_BYTE *)&v334.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v334, "None");
        }
        v268 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
        v269 = MEMORY[0x1E0DE4FE0] + 64;
        v270 = MEMORY[0x1E0DE4F60];
        v271 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
        v272 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
        v350[0] = MEMORY[0x1E0DE4FE0] + 64;
        v342.__vftable = v271;
        *(std::system_error_vtbl **)((char *)&v342.__vftable + (unint64_t)v271[-1].~system_error) = v272;
        v273 = (std::ios_base *)((char *)&v342 + (unint64_t)v342.__vftable[-1].~system_error);
        std::ios_base::init(v273, &v342.__imp_);
        v273[1].__vftable = 0;
        v273[1].__fmtflags_ = -1;
        v342.__vftable = v268 + 1;
        v350[0] = v269;
        std::streambuf::basic_streambuf();
        v274 = MEMORY[0x1E0DE4FB8];
        v342.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
        v347 = 0u;
        v348 = 0u;
        v349 = 16;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v342, (uint64_t)"Missing Header: ", 16);
        if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v275 = &v334;
        else
          v275 = (std::string *)v334.__r_.__value_.__r.__words[0];
        if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v276 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
        else
          v276 = v334.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v342, (uint64_t)v275, v276);
        std::stringbuf::str[abi:fe180100]((uint64_t)&v342.__imp_, (std::string *)&v335);
        v342.__vftable = *(std::system_error_vtbl **)v270;
        *(std::system_error_vtbl **)((char *)&v342.__vftable + (unint64_t)v342.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v270 + 24);
        v342.__imp_.__imp_ = (const char *)(v274 + 16);
        v9 = v303;
        if (SBYTE7(v348) < 0)
          operator delete((void *)v347);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D789B58](v350);
        v351.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
        *(_QWORD *)&v351.__val_ = 312;
        std::system_error::system_error(&v342, v351, (const std::string *)&v335);
        if (*((char *)&ec.__val_ + 7) < 0)
          operator delete(v335.__vftable);
        v344 = 0;
        v345 = 0;
        v342.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v343 = &v344;
        v346 = 0uLL;
        std::runtime_error::runtime_error(&v335, &v342);
        ec = v342.__ec_;
        v335.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v277 = v344;
        v337 = v343;
        v338 = v344;
        v339 = v345;
        if (v345)
        {
          *((_QWORD *)v344 + 2) = &v338;
          v277 = 0;
          v343 = &v344;
          v344 = 0;
          v345 = 0;
        }
        else
        {
          v337 = &v338;
        }
        v340 = v346;
        v346 = 0uLL;
        v342.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v343, v277);
        MEMORY[0x18D7898AC](&v342);
        std::runtime_error::runtime_error(v296, &v335);
        v279 = v337;
        v278 = v338;
        *(_QWORD *)(v298 + 192) = v338;
        v280 = v298 + 192;
        *(std::error_code *)(v298 + 168) = ec;
        *(_QWORD *)(v298 + 152) = off_1E2521330;
        *(_QWORD *)(v298 + 184) = v279;
        v281 = v339;
        *(_QWORD *)(v298 + 200) = v339;
        if (v281)
        {
          *((_QWORD *)v278 + 2) = v280;
          v278 = 0;
          v337 = &v338;
          v338 = 0;
          v339 = 0;
        }
        else
        {
          *(_QWORD *)(v298 + 184) = v280;
        }
        v75 = v307;
        v102 = v305;
        *(_OWORD *)(v298 + 208) = v340;
        v340 = 0uLL;
        v7 = v298;
        *(_BYTE *)(v298 + 224) = 0;
        v335.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v337, v278);
        MEMORY[0x18D7898AC](&v335);
        v8 = v296;
        if ((SHIBYTE(v334.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_642;
LABEL_635:
        operator delete(v334.__r_.__value_.__l.__data_);
        goto LABEL_642;
      }
      v197 = v194[5];
      v195 = v194 + 5;
      v196 = (const std::string::value_type *)v197;
      v198 = *((char *)v195 + 23);
      if (v198 >= 0)
        v199 = (const std::string::value_type *)v195;
      else
        v199 = v196;
      if (v198 >= 0)
        v200 = *((unsigned __int8 *)v195 + 23);
      else
        v200 = v195[1];
      if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v201 = 22;
      else
        v201 = (v341.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v202 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
      else
        v202 = v341.__r_.__value_.__l.__size_;
      if (v201 - v202 < v200)
      {
        std::string::__grow_by_and_replace(&v341, v201, v202 + v200 - v201, v202, v202, 0, v200, v199);
      }
      else if (v200)
      {
        if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v203 = &v341;
        else
          v203 = (std::string *)v341.__r_.__value_.__r.__words[0];
        memmove((char *)v203 + v202, v199, v200);
        v204 = v202 + v200;
        if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
          v341.__r_.__value_.__l.__size_ = v202 + v200;
        else
          *((_BYTE *)&v341.__r_.__value_.__s + 23) = v204 & 0x7F;
        v203->__r_.__value_.__s.__data_[v204] = 0;
        v75 = v307;
      }
    }
    v180 = (std::vector<std::string>::pointer)((char *)v180 + 32);
  }
  while (v180 != v181);
  v151 = v326.__end_;
  v9 = v303;
  v102 = v305;
  if (!v326.__end_)
    goto LABEL_641;
LABEL_376:
  v182 = &v326.__end_;
  v183 = v151;
  while (2)
  {
    while (2)
    {
      v184 = v183[2].__r_.__value_.__s.__data_[7];
      if (v184 >= 0)
        p_size = &v183[1].__r_.__value_.__l.__size_;
      else
        p_size = (std::string::size_type *)v183[1].__r_.__value_.__l.__size_;
      if (v184 >= 0)
        v186 = v183[2].__r_.__value_.__s.__data_[7];
      else
        v186 = v183[1].__r_.__value_.__r.__words[2];
      if (v186 >= 6)
        v187 = 6;
      else
        v187 = v186;
      v188 = memcmp(p_size, "fields", v187);
      if (v188)
      {
        if ((v188 & 0x80000000) == 0)
          break;
        goto LABEL_377;
      }
      if (v186 < 6)
      {
LABEL_377:
        v183 = (std::vector<std::string>::pointer)v183->__r_.__value_.__l.__size_;
        if (!v183)
          goto LABEL_392;
        continue;
      }
      break;
    }
    v182 = (std::vector<std::string>::pointer *)v183;
    v183 = (std::vector<std::string>::pointer)v183->__r_.__value_.__r.__words[0];
    if (v183)
      continue;
    break;
  }
LABEL_392:
  if (v182 == &v326.__end_)
  {
    v75 = v307;
    v102 = v305;
    goto LABEL_535;
  }
  v189 = *((char *)v182 + 55);
  if (v189 >= 0)
    v190 = (std::vector<std::string>::pointer)(v182 + 4);
  else
    v190 = v182[4];
  if (v189 >= 0)
    v191 = *((unsigned __int8 *)v182 + 55);
  else
    v191 = (unint64_t)v182[5];
  if (v191 >= 6)
    v192 = 6;
  else
    v192 = v191;
  v193 = memcmp(v190, "fields", v192);
  if (v193)
  {
    v75 = v307;
    v102 = v305;
    if ((v193 & 0x80000000) == 0)
      goto LABEL_535;
  }
  else
  {
    v224 = v191 > 6;
    v75 = v307;
    v102 = v305;
    if (v224)
      goto LABEL_535;
  }
  if (&v326.__end_ != v182 && *((_DWORD *)v182 + 20) == 9)
  {
    v225 = v182[7];
    v325 = v182[8];
    if (v225 != v325)
    {
      v226 = v306 + 184;
LABEL_483:
      v227 = (int)v225[1].__r_.__value_.__l.__data_;
      if (v227 == 5)
        v228 = (unsigned __int8 **)v225;
      else
        v228 = 0;
      if (v227 != 5)
        goto LABEL_482;
      v229 = *(_QWORD *)(v306 + 192);
      v230 = *((unsigned __int8 *)v228 + 23);
      if (v229 == v226)
      {
        v317 = (size_t)v228[1];
        goto LABEL_612;
      }
      v317 = (size_t)v228[1];
      if ((v230 & 0x80u) == 0)
        v231 = (unsigned __int8 *)*((unsigned __int8 *)v228 + 23);
      else
        v231 = v228[1];
      if ((v230 & 0x80u) == 0)
        v232 = (unsigned __int8 *)v228;
      else
        v232 = *v228;
      while (1)
      {
        v233 = *(unsigned __int8 *)(v229 + 39);
        if ((v233 & 0x80u) == 0)
          v234 = (unsigned __int8 *)*(unsigned __int8 *)(v229 + 39);
        else
          v234 = *(unsigned __int8 **)(v229 + 24);
        if (v234 == v231)
        {
          v235 = (const void **)(v229 + 16);
          if ((v233 & 0x80) != 0)
          {
            if (!memcmp(*v235, v232, *(_QWORD *)(v229 + 24)))
              goto LABEL_505;
          }
          else
          {
            if (!*(_BYTE *)(v229 + 39))
            {
LABEL_505:
              if (v229 != v226)
              {
                v239 = *(const std::string::value_type **)(v229 + 40);
                v238 = v229 + 40;
                v237 = v239;
                v240 = *(char *)(v238 + 23);
                if (v240 >= 0)
                  v241 = (const std::string::value_type *)v238;
                else
                  v241 = v237;
                if (v240 >= 0)
                  v242 = *(unsigned __int8 *)(v238 + 23);
                else
                  v242 = *(_QWORD *)(v238 + 8);
                if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v243 = 22;
                else
                  v243 = (v341.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v244 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
                else
                  v244 = v341.__r_.__value_.__l.__size_;
                if (v243 - v244 < v242)
                {
                  std::string::__grow_by_and_replace(&v341, v243, v244 + v242 - v243, v244, v244, 0, v242, v241);
                  v75 = v307;
                  v102 = v305;
                }
                else
                {
                  v75 = v307;
                  v102 = v305;
                  if (v242)
                  {
                    if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v245 = &v341;
                    else
                      v245 = (std::string *)v341.__r_.__value_.__r.__words[0];
                    memmove((char *)v245 + v244, v241, v242);
                    v246 = v244 + v242;
                    if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
                      v341.__r_.__value_.__l.__size_ = v244 + v242;
                    else
                      *((_BYTE *)&v341.__r_.__value_.__s + 23) = v246 & 0x7F;
                    v245->__r_.__value_.__s.__data_[v246] = 0;
                    v75 = v307;
                  }
                }
LABEL_482:
                v225 = (std::vector<std::string>::pointer)((char *)v225 + 32);
                if (v225 != v325)
                  goto LABEL_483;
                v151 = v326.__end_;
                v9 = v303;
                break;
              }
LABEL_612:
              if ((v230 & 0x80u) == 0)
                v282 = v230;
              else
                v282 = v317;
              v283 = v282 + 15;
              if (v282 + 15 >= 0x7FFFFFFFFFFFFFF8)
                std::string::__throw_length_error[abi:fe180100]();
              if (v283 >= 0x17)
              {
                v285 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v283 | 7) != 0x17)
                  v285 = v283 | 7;
                v286 = v285 + 1;
                v287 = (char *)operator new(v285 + 1);
                v334.__r_.__value_.__l.__size_ = v282 + 15;
                v334.__r_.__value_.__r.__words[2] = v286 | 0x8000000000000000;
                v334.__r_.__value_.__r.__words[0] = (std::string::size_type)v287;
                qmemcpy(v287, "Missing field: ", 15);
                v284 = v287 + 15;
              }
              else
              {
                *(_OWORD *)&v334.__r_.__value_.__r.__words[1] = 0uLL;
                *((_BYTE *)&v334.__r_.__value_.__s + 23) = v282 + 15;
                qmemcpy(&v334, "Missing field: ", 15);
                v284 = &v334.__r_.__value_.__s.__data_[15];
                if (!v282)
                {
LABEL_626:
                  v284[v282] = 0;
                  AMSCore::StringUtils::join<std::string>((std::string *)&v335, (uint64_t)&v334);
                  v352.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
                  *(_QWORD *)&v352.__val_ = 313;
                  std::system_error::system_error(&v342, v352, (const std::string *)&v335);
                  v9 = v303;
                  if (*((char *)&ec.__val_ + 7) < 0)
                    operator delete(v335.__vftable);
                  v344 = 0;
                  v345 = 0;
                  v342.__vftable = (std::system_error_vtbl *)off_1E2521330;
                  v343 = &v344;
                  v346 = 0uLL;
                  std::runtime_error::runtime_error(&v335, &v342);
                  ec = v342.__ec_;
                  v335.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  v289 = v344;
                  v337 = v343;
                  v338 = v344;
                  v339 = v345;
                  if (v345)
                  {
                    *((_QWORD *)v344 + 2) = &v338;
                    v289 = 0;
                    v343 = &v344;
                    v344 = 0;
                    v345 = 0;
                  }
                  else
                  {
                    v337 = &v338;
                  }
                  v340 = v346;
                  v346 = 0uLL;
                  v342.__vftable = (std::system_error_vtbl *)off_1E2521330;
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v343, v289);
                  MEMORY[0x18D7898AC](&v342);
                  std::runtime_error::runtime_error(v296, &v335);
                  v291 = v337;
                  v290 = v338;
                  *(_QWORD *)(v298 + 192) = v338;
                  v292 = v298 + 192;
                  *(std::error_code *)(v298 + 168) = ec;
                  *(_QWORD *)(v298 + 152) = off_1E2521330;
                  *(_QWORD *)(v298 + 184) = v291;
                  v293 = v339;
                  *(_QWORD *)(v298 + 200) = v339;
                  if (v293)
                  {
                    *((_QWORD *)v290 + 2) = v292;
                    v290 = 0;
                    v337 = &v338;
                    v338 = 0;
                    v339 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v298 + 184) = v292;
                  }
                  v102 = v305;
                  *(_OWORD *)(v298 + 208) = v340;
                  v340 = 0uLL;
                  v7 = v298;
                  *(_BYTE *)(v298 + 224) = 0;
                  v335.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v337, v290);
                  MEMORY[0x18D7898AC](&v335);
                  v8 = v296;
                  v75 = v307;
                  if ((SHIBYTE(v334.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_642;
                  goto LABEL_635;
                }
              }
              if ((v230 & 0x80u) == 0)
                v288 = (unsigned __int8 *)v228;
              else
                v288 = *v228;
              memmove(v284, v288, v282);
              goto LABEL_626;
            }
            v236 = v232;
            while (*(unsigned __int8 *)v235 == *v236)
            {
              v235 = (const void **)((char *)v235 + 1);
              ++v236;
              if (!--v233)
                goto LABEL_505;
            }
          }
        }
        v229 = *(_QWORD *)(v229 + 8);
        if (v229 == v226)
          goto LABEL_612;
      }
    }
  }
LABEL_535:
  if (!v151)
    goto LABEL_641;
  v251 = &v326.__end_;
  while (2)
  {
    while (2)
    {
      v252 = v151[2].__r_.__value_.__s.__data_[7];
      if (v252 >= 0)
        v253 = &v151[1].__r_.__value_.__l.__size_;
      else
        v253 = (std::string::size_type *)v151[1].__r_.__value_.__l.__size_;
      if (v252 >= 0)
        v254 = v151[2].__r_.__value_.__s.__data_[7];
      else
        v254 = v151[1].__r_.__value_.__r.__words[2];
      if (v254 >= 4)
        v255 = 4;
      else
        v255 = v254;
      v256 = memcmp(v253, "path", v255);
      if (v256)
      {
        if ((v256 & 0x80000000) == 0)
          break;
        goto LABEL_537;
      }
      if (v254 < 4)
      {
LABEL_537:
        v151 = (std::vector<std::string>::pointer)v151->__r_.__value_.__l.__size_;
        if (!v151)
          goto LABEL_552;
        continue;
      }
      break;
    }
    v251 = (std::vector<std::string>::pointer *)v151;
    v151 = (std::vector<std::string>::pointer)v151->__r_.__value_.__r.__words[0];
    if (v151)
      continue;
    break;
  }
LABEL_552:
  v75 = v307;
  if (v251 != &v326.__end_)
  {
    v257 = *((char *)v251 + 55);
    if (v257 >= 0)
      v258 = (std::vector<std::string>::pointer)(v251 + 4);
    else
      v258 = v251[4];
    if (v257 >= 0)
      v259 = *((unsigned __int8 *)v251 + 55);
    else
      v259 = (unint64_t)v251[5];
    if (v259 >= 4)
      v260 = 4;
    else
      v260 = v259;
    v261 = memcmp(v258, "path", v260);
    if (v261)
    {
      v75 = v307;
      if (v261 < 0)
      {
LABEL_566:
        if (&v326.__end_ != v251 && (*((_DWORD *)v251 + 20) - 1) <= 3)
        {
          LOBYTE(v342.__vftable) = 0;
          LOBYTE(v342.__ec_.__cat_) = 0;
          if (*(_BYTE *)(v306 + 168))
          {
            if (*(char *)(v306 + 167) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v342, *(const std::string::value_type **)(v306 + 144), *(_QWORD *)(v306 + 152));
            }
            else
            {
              v342.std::runtime_error = *v319;
              *(_QWORD *)&v342.__ec_.__val_ = v319[1].__vftable;
            }
            LOBYTE(v342.__ec_.__cat_) = 1;
            if (*((char *)&v342.__ec_.__val_ + 7) >= 0)
              v262 = &v342;
            else
              v262 = v342.__vftable;
            if (*((char *)&v342.__ec_.__val_ + 7) >= 0)
              v263 = *((unsigned __int8 *)&v342.__ec_.__val_ + 7);
            else
              v263 = (size_t)v342.__imp_.__imp_;
            if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v264 = 22;
            else
              v264 = (v341.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v265 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
            else
              v265 = v341.__r_.__value_.__l.__size_;
            if (v264 - v265 >= v263)
            {
              if (v263)
              {
                if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v266 = &v341;
                else
                  v266 = (std::string *)v341.__r_.__value_.__r.__words[0];
                memmove((char *)v266 + v265, v262, v263);
                v267 = v265 + v263;
                if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
                  v341.__r_.__value_.__l.__size_ = v265 + v263;
                else
                  *((_BYTE *)&v341.__r_.__value_.__s + 23) = v267 & 0x7F;
                v266->__r_.__value_.__s.__data_[v267] = 0;
                v102 = v305;
              }
            }
            else
            {
              std::string::__grow_by_and_replace(&v341, v264, v263 - v264 + v265, v265, v265, 0, v263, (const std::string::value_type *)v262);
            }
            v9 = v303;
            v75 = v307;
            if (LOBYTE(v342.__ec_.__cat_) && *((char *)&v342.__ec_.__val_ + 7) < 0)
              operator delete(v342.__vftable);
          }
        }
      }
    }
    else
    {
      v224 = v259 > 4;
      v75 = v307;
      if (!v224)
        goto LABEL_566;
    }
  }
LABEL_641:
  v8 = v296;
  v7 = v298;
  *(std::string *)&v296->__vftable = v341;
  memset(&v341, 0, sizeof(v341));
  *(_BYTE *)(v298 + 224) = 1;
LABEL_642:
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v341.__r_.__value_.__l.__data_);
  if (v327)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v326, (unsigned int *)v326.__end_);
LABEL_260:
  if (!v333)
  {
    (**(void (***)(_BYTE *))__p)(__p);
    if (!v130)
      goto LABEL_275;
    goto LABEL_266;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)__p, *(unsigned int **)&__p[8]);
  if (v130)
  {
LABEL_266:
    v8->__vftable = 0;
    v8->__imp_.__imp_ = 0;
    v8[1].__vftable = 0;
    *(_BYTE *)(v7 + 224) = 1;
    goto LABEL_267;
  }
LABEL_275:
  if (!*(_BYTE *)(v7 + 224))
  {
    std::runtime_error::runtime_error(&v342, v8);
    v164 = (_QWORD *)(v7 + 192);
    v165 = *(_QWORD *)(v7 + 192);
    v342.__ec_ = *(std::error_code *)(v7 + 168);
    v342.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v343 = *(unsigned int ***)(v7 + 184);
    v344 = (unsigned int *)v165;
    v345 = *(_QWORD *)(v7 + 200);
    if (v345)
    {
      *(_QWORD *)(v165 + 16) = &v344;
      *(_QWORD *)(v7 + 184) = v164;
      *v164 = 0;
      *(_QWORD *)(v7 + 200) = 0;
    }
    else
    {
      v343 = &v344;
    }
    v346 = *(_OWORD *)(v7 + 208);
    *(_QWORD *)(v7 + 208) = 0;
    *(_QWORD *)(v7 + 216) = 0;
    LOBYTE(v347) = 1;
    std::runtime_error::runtime_error((std::runtime_error *)__p, &v342);
    *(std::error_code *)&__p[16] = v342.__ec_;
    *(_QWORD *)__p = off_1E2521330;
    v329 = v343;
    v330 = v344;
    v331 = v345;
    if (v345)
    {
      *((_QWORD *)v344 + 2) = &v330;
      v343 = &v344;
      v344 = 0;
      v345 = 0;
    }
    else
    {
      v329 = &v330;
    }
    v332 = v346;
    v346 = 0uLL;
    std::runtime_error::runtime_error(&v335, (const std::runtime_error *)__p);
    ec = *(std::error_code *)&__p[16];
    v335.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v166 = v330;
    v337 = v329;
    v338 = v330;
    v339 = v331;
    if (v331)
    {
      *((_QWORD *)v330 + 2) = &v338;
      v166 = 0;
      v329 = &v330;
      v330 = 0;
      v331 = 0;
    }
    else
    {
      v337 = &v338;
    }
    v340 = v332;
    v332 = 0uLL;
    *(_QWORD *)__p = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v329, v166);
    MEMORY[0x18D7898AC](__p);
    v9 = v303;
    if (*(_BYTE *)(v7 + 104))
    {
      if (!*(_BYTE *)(v7 + 96))
        ((void (*)(std::runtime_error *))v307->~runtime_error)(v307);
      *(_BYTE *)(v7 + 104) = 0;
    }
    std::runtime_error::runtime_error(v307, &v335);
    v168 = v337;
    v167 = v338;
    *(_QWORD *)(v7 + 64) = v338;
    v169 = v7 + 64;
    *(std::error_code *)(v7 + 40) = ec;
    *(_QWORD *)(v7 + 24) = off_1E2521330;
    *(_QWORD *)(v7 + 56) = v168;
    v170 = v339;
    *(_QWORD *)(v7 + 72) = v339;
    if (v170)
    {
      *((_QWORD *)v167 + 2) = v169;
      v167 = 0;
      v337 = &v338;
      v338 = 0;
      v339 = 0;
    }
    else
    {
      *(_QWORD *)(v7 + 56) = v169;
    }
    *(_OWORD *)(v7 + 80) = v340;
    v340 = 0uLL;
    *(_BYTE *)(v7 + 96) = 0;
    *(_BYTE *)(v7 + 104) = 1;
    v335.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v337, v167);
    MEMORY[0x18D7898AC](&v335);
    if ((_BYTE)v347)
    {
      v342.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v171 = (std::__shared_weak_count *)*((_QWORD *)&v346 + 1);
      if (*((_QWORD *)&v346 + 1))
      {
        v172 = (unint64_t *)(*((_QWORD *)&v346 + 1) + 8);
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v343, v344);
      MEMORY[0x18D7898AC](&v342);
    }
    v10 = *(_QWORD *)(v7 + 464);
    goto LABEL_271;
  }
  v131 = *(unsigned __int8 *)(v7 + 175);
  if ((v131 & 0x80u) != 0)
    v131 = *(_QWORD *)(v7 + 160);
  if (!v131)
  {
LABEL_267:
    if (*(_BYTE *)(v7 + 104) && !*(_BYTE *)(v7 + 96))
      ((void (*)(std::runtime_error *))v75->~runtime_error)(v75);
    *(_BYTE *)(v7 + 96) = 1;
    *(_BYTE *)(v7 + 104) = 1;
    v10 = *(_QWORD *)(v7 + 464);
LABEL_271:
    if (*(_BYTE *)(v7 + 224))
    {
      if (*(char *)(v7 + 175) < 0)
        operator delete(v8->__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))v8->~runtime_error)(v8);
    }
LABEL_23:
    v20 = *(std::__shared_weak_count **)(v7 + 368);
    if (v20)
    {
LABEL_149:
      v78 = (unint64_t *)&v20->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
LABEL_153:
    *(_QWORD *)(v7 + 504) = v10;
    *(_QWORD *)(v7 + 152) = v9;
    *(_QWORD *)v7 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v8);
    return;
  }
  v132 = *(_QWORD *)(v7 + 472);
  *((_OWORD *)v322 + 1) = *((_OWORD *)v322 + 4);
  v133 = *(_QWORD *)(v7 + 368);
  *(_QWORD *)(v7 + 424) = v102;
  *(_QWORD *)(v7 + 432) = v133;
  *v321 = 0;
  v321[1] = 0;
  *(_QWORD *)(v7 + 440) = *(_QWORD *)(v132 + 40);
  v134 = *(_QWORD *)(v132 + 48);
  *(_QWORD *)(v7 + 448) = v134;
  if (v134)
  {
    v135 = (unint64_t *)(v134 + 8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    if (!*(_BYTE *)(v7 + 224))
      goto LABEL_647;
  }
  v137 = *(char *)(v7 + 175);
  if (v137 >= 0)
    v138 = (uint64_t)v8;
  else
    v138 = *(_QWORD *)(v7 + 152);
  if (v137 >= 0)
    v139 = *(unsigned __int8 *)(v7 + 175);
  else
    v139 = *(_QWORD *)(v7 + 160);
  v140 = *(std::runtime_error *)v322;
  *(_QWORD *)v322 = 0;
  *((_QWORD *)v322 + 1) = 0;
  *v320 = v140;
  if (atomic_load((unint64_t *)&v140.__vftable[4]))
    goto LABEL_293;
  v322[120] = 1;
  v142 = (unint64_t *)(*(_QWORD *)(v7 + 376) + 96);
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v7, v142));
  if (v143)
  {
LABEL_293:
    v144 = v320->__vftable;
    if (LOBYTE(v320->__vftable[3].what))
    {
      v145 = LOBYTE(v144[3].~runtime_error_0);
      if (!LOBYTE(v144[3].~runtime_error_0))
      {
        std::runtime_error::runtime_error(v313, (const std::runtime_error *)&v144->~runtime_error_0);
        *(_OWORD *)(v7 + 248) = *(_OWORD *)&v144[1].~runtime_error;
        *(_QWORD *)(v7 + 232) = off_1E2521330;
        v146 = v144 + 2;
        v147 = v144[2].~runtime_error;
        v148 = v7 + 272;
        *(_QWORD *)(v7 + 264) = v144[1].what;
        *(_QWORD *)(v7 + 272) = v147;
        v149 = v144[2].~runtime_error_0;
        *(_QWORD *)(v7 + 280) = v149;
        if (v149)
        {
          *((_QWORD *)v147 + 2) = v148;
          v144[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v146;
          v146->~runtime_error = 0;
          v144[2].~runtime_error_0 = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 264) = v148;
        }
        *(_OWORD *)(v7 + 288) = *(_OWORD *)&v144[2].what;
        v144[2].what = 0;
        v144[3].~runtime_error = 0;
      }
      *(_BYTE *)(v7 + 304) = v145;
      if (*(_BYTE *)(v7 + 104))
      {
        if (!*(_BYTE *)(v7 + 96))
        {
          (**(void (***)(std::runtime_error *))(v7 + 24))(v307);
          v145 = *(unsigned __int8 *)(v7 + 304);
        }
        *(_BYTE *)(v7 + 104) = 0;
      }
      if (v145)
      {
        *(_BYTE *)(v7 + 96) = v145;
        *(_BYTE *)(v7 + 104) = 1;
      }
      else
      {
        std::runtime_error::runtime_error(v307, v313);
        v205 = *(_QWORD *)(v7 + 272);
        *(_QWORD *)(v7 + 64) = v205;
        v206 = v7 + 64;
        *(_OWORD *)(v7 + 40) = *(_OWORD *)(v7 + 248);
        *(_QWORD *)(v7 + 24) = off_1E2521330;
        *(_QWORD *)(v7 + 56) = *(_QWORD *)(v7 + 264);
        v207 = *(_QWORD *)(v7 + 280);
        *(_QWORD *)(v7 + 72) = v207;
        if (v207)
        {
          *(_QWORD *)(v205 + 16) = v206;
          *(_QWORD *)(v7 + 264) = v7 + 272;
          *(_QWORD *)(v7 + 272) = 0;
          *(_QWORD *)(v7 + 280) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 56) = v206;
        }
        *(_OWORD *)(v7 + 80) = *(_OWORD *)(v7 + 288);
        *(_QWORD *)(v7 + 288) = 0;
        *(_QWORD *)(v7 + 296) = 0;
        v208 = *(unsigned __int8 *)(v7 + 304);
        *(_BYTE *)(v7 + 96) = 0;
        *(_BYTE *)(v7 + 104) = 1;
        if (!v208)
          ((void (*)(std::runtime_error *))v313->~runtime_error)(v313);
      }
      v209 = *(std::__shared_weak_count **)(v7 + 384);
      if (v209)
      {
        v210 = (unint64_t *)&v209->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      v212 = *(std::__shared_weak_count **)(v7 + 400);
      if (v212)
      {
        v213 = (unint64_t *)&v212->__shared_owners_;
        do
          v214 = __ldaxr(v213);
        while (__stlxr(v214 - 1, v213));
        if (!v214)
        {
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
        }
      }
      v215 = *(std::__shared_weak_count **)(v7 + 448);
      if (v215)
      {
        v216 = (unint64_t *)&v215->__shared_owners_;
        do
          v217 = __ldaxr(v216);
        while (__stlxr(v217 - 1, v216));
        if (!v217)
        {
          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
          std::__shared_weak_count::__release_weak(v215);
        }
      }
      v218 = *(std::__shared_weak_count **)(v7 + 432);
      if (v218)
      {
        v219 = (unint64_t *)&v218->__shared_owners_;
        do
          v220 = __ldaxr(v219);
        while (__stlxr(v220 - 1, v219));
        if (!v220)
        {
          ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
          std::__shared_weak_count::__release_weak(v218);
        }
      }
      v221 = *(std::__shared_weak_count **)(v7 + 416);
      if (v221)
      {
        v222 = (unint64_t *)&v221->__shared_owners_;
        do
          v223 = __ldaxr(v222);
        while (__stlxr(v223 - 1, v222));
        if (!v223)
        {
          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
          std::__shared_weak_count::__release_weak(v221);
        }
      }
      v10 = 0;
      goto LABEL_271;
    }
LABEL_647:
    __break(1u);
  }
}

void sub_18CCEF720(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;

  if (a69)
  {
    if (a68 < 0)
    {
      operator delete(__p);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

void sub_18CCEF83C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCEDD24);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::FairPlayErrorCode>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error v15[2];
  unsigned int **v16;
  unsigned int *v17;
  __int128 v19;
  std::runtime_error v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  std::runtime_error::runtime_error(v15, (const std::runtime_error *)a2);
  v6 = (_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  v15[1] = *(std::runtime_error *)(a2 + 16);
  v15[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v16 = *(unsigned int ***)(a2 + 32);
  v17 = (unsigned int *)v7;
  if (*(_QWORD *)(a2 + 48))
  {
    *(_QWORD *)(v7 + 16) = &v17;
    *(_QWORD *)(a2 + 32) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v16 = &v17;
  }
  v19 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  AMSCore::Error::Error<>((uint64_t)&v20, (uint64_t)v15, *a3, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v20);
  *(_OWORD *)(a1 + 16) = v21;
  *(_QWORD *)a1 = off_1E2521330;
  v8 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a1 + 40;
  v10 = v24;
  *(_QWORD *)(a1 + 48) = v24;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_OWORD *)(a1 + 56) = v25;
  v25 = 0uLL;
  v20.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v8);
  MEMORY[0x18D7898AC](&v20);
  v15[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v17);
  return MEMORY[0x18D7898AC](v15);
}

void sub_18CCEF9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CCEF9E0()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

_BYTE *AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setMescalHeaders(_BYTE *result)
{
  _BYTE *v1;
  void **v2;
  const std::runtime_error *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;

  v1 = result;
  v2 = (void **)(result + 152);
  v3 = (const std::runtime_error *)(result + 232);
  if (!result[512])
  {
    v10 = *((_QWORD *)result + 61);
    if (!*(_BYTE *)(v10 + 88))
      goto LABEL_104;
    v11 = *(unsigned __int8 *)(v10 + 80);
    if (!*(_BYTE *)(v10 + 80))
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 232), (const std::runtime_error *)(v10 + 8));
      *(_OWORD *)(v1 + 248) = *(_OWORD *)(v10 + 24);
      *((_QWORD *)v1 + 29) = off_1E2521330;
      v12 = (_QWORD *)(v10 + 48);
      v13 = *(_QWORD *)(v10 + 48);
      v14 = v1 + 272;
      *((_QWORD *)v1 + 33) = *(_QWORD *)(v10 + 40);
      *((_QWORD *)v1 + 34) = v13;
      v15 = *(_QWORD *)(v10 + 56);
      *((_QWORD *)v1 + 35) = v15;
      if (v15)
      {
        *(_QWORD *)(v13 + 16) = v14;
        *(_QWORD *)(v10 + 40) = v12;
        *v12 = 0;
        *(_QWORD *)(v10 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v1 + 33) = v14;
      }
      v37 = *((_QWORD *)v1 + 61);
      *((_OWORD *)v1 + 18) = *(_OWORD *)(v37 + 64);
      *(_QWORD *)(v37 + 64) = 0;
      *(_QWORD *)(v37 + 72) = 0;
    }
    v1[304] = v11;
    if (v1[104])
    {
      if (!v1[96])
      {
        (**((void (***)(uint64_t))v1 + 3))((uint64_t)(v1 + 24));
        v11 = v1[304];
      }
      v1[104] = 0;
    }
    if (v11)
    {
      v1[96] = v11;
      v1[104] = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), v3);
      v38 = *((_QWORD *)v1 + 34);
      *((_QWORD *)v1 + 8) = v38;
      v39 = v1 + 64;
      *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 248);
      *((_QWORD *)v1 + 3) = off_1E2521330;
      *((_QWORD *)v1 + 7) = *((_QWORD *)v1 + 33);
      v40 = *((_QWORD *)v1 + 35);
      *((_QWORD *)v1 + 9) = v40;
      if (v40)
      {
        *(_QWORD *)(v38 + 16) = v39;
        *((_QWORD *)v1 + 33) = v1 + 272;
        *((_QWORD *)v1 + 34) = 0;
        *((_QWORD *)v1 + 35) = 0;
      }
      else
      {
        *((_QWORD *)v1 + 7) = v39;
      }
      *((_OWORD *)v1 + 5) = *((_OWORD *)v1 + 18);
      *((_QWORD *)v1 + 36) = 0;
      *((_QWORD *)v1 + 37) = 0;
      v41 = v1[304];
      v1[96] = 0;
      v1[104] = 1;
      if (!v41)
        ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
    }
    v42 = *((_QWORD *)v1 + 62);
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v1 + 62);
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v46 = (std::__shared_weak_count *)*((_QWORD *)v1 + 48);
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)v1 + 44);
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)v1 + 42);
    if (!v52)
      goto LABEL_87;
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      v55 = (std::__shared_weak_count *)*((_QWORD *)v1 + 40);
      if (!v55)
        goto LABEL_91;
    }
    else
    {
LABEL_87:
      v55 = (std::__shared_weak_count *)*((_QWORD *)v1 + 40);
      if (!v55)
        goto LABEL_91;
    }
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
      if (v1[224])
      {
LABEL_92:
        if ((char)v1[175] < 0)
          operator delete(*v2);
LABEL_98:
        v35 = *((_QWORD *)v1 + 58);
        v36 = (std::__shared_weak_count *)*((_QWORD *)v1 + 46);
        if (!v36)
        {
LABEL_103:
          *((_QWORD *)v1 + 63) = v35;
          *((_QWORD *)v1 + 19) = v1 + 16;
          *(_QWORD *)v1 = 0;
          return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
        }
LABEL_99:
        v58 = (unint64_t *)&v36->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        goto LABEL_103;
      }
LABEL_97:
      (*(void (**)(void **))*v2)(v2);
      goto LABEL_98;
    }
LABEL_91:
    if (v1[224])
      goto LABEL_92;
    goto LABEL_97;
  }
  v4 = *((_QWORD *)result + 47);
  if (*(_BYTE *)(v4 + 88))
  {
    v5 = *(unsigned __int8 *)(v4 + 80);
    if (!*(_BYTE *)(v4 + 80))
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 232), (const std::runtime_error *)(v4 + 8));
      *(_OWORD *)(v1 + 248) = *(_OWORD *)(v4 + 24);
      *((_QWORD *)v1 + 29) = off_1E2521330;
      v6 = (_QWORD *)(v4 + 48);
      v7 = *(_QWORD *)(v4 + 48);
      v8 = v1 + 272;
      *((_QWORD *)v1 + 33) = *(_QWORD *)(v4 + 40);
      *((_QWORD *)v1 + 34) = v7;
      v9 = *(_QWORD *)(v4 + 56);
      *((_QWORD *)v1 + 35) = v9;
      if (v9)
      {
        *(_QWORD *)(v7 + 16) = v8;
        *(_QWORD *)(v4 + 40) = v6;
        *v6 = 0;
        *(_QWORD *)(v4 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v1 + 33) = v8;
      }
      *((_OWORD *)v1 + 18) = *(_OWORD *)(v4 + 64);
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0;
    }
    v1[304] = v5;
    if (v1[104])
    {
      if (!v1[96])
      {
        (**((void (***)(uint64_t))v1 + 3))((uint64_t)(v1 + 24));
        v5 = v1[304];
      }
      v1[104] = 0;
    }
    if (v5)
    {
      v1[96] = v5;
      v1[104] = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), v3);
      v16 = *((_QWORD *)v1 + 34);
      *((_QWORD *)v1 + 8) = v16;
      v17 = v1 + 64;
      *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 248);
      *((_QWORD *)v1 + 3) = off_1E2521330;
      *((_QWORD *)v1 + 7) = *((_QWORD *)v1 + 33);
      v18 = *((_QWORD *)v1 + 35);
      *((_QWORD *)v1 + 9) = v18;
      if (v18)
      {
        *(_QWORD *)(v16 + 16) = v17;
        *((_QWORD *)v1 + 33) = v1 + 272;
        *((_QWORD *)v1 + 34) = 0;
        *((_QWORD *)v1 + 35) = 0;
      }
      else
      {
        *((_QWORD *)v1 + 7) = v17;
      }
      *((_OWORD *)v1 + 5) = *((_OWORD *)v1 + 18);
      *((_QWORD *)v1 + 36) = 0;
      *((_QWORD *)v1 + 37) = 0;
      v19 = v1[304];
      v1[96] = 0;
      v1[104] = 1;
      if (!v19)
        ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)v1 + 48);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)v1 + 50);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)v1 + 56);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)v1 + 54);
    if (!v29)
      goto LABEL_42;
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v32 = (std::__shared_weak_count *)*((_QWORD *)v1 + 52);
      if (!v32)
        goto LABEL_46;
    }
    else
    {
LABEL_42:
      v32 = (std::__shared_weak_count *)*((_QWORD *)v1 + 52);
      if (!v32)
        goto LABEL_46;
    }
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (v1[224])
      {
LABEL_47:
        if ((char)v1[175] < 0)
          operator delete(*v2);
LABEL_53:
        v35 = 0;
        v36 = (std::__shared_weak_count *)*((_QWORD *)v1 + 46);
        if (!v36)
          goto LABEL_103;
        goto LABEL_99;
      }
LABEL_52:
      (*(void (**)(void **))*v2)(v2);
      goto LABEL_53;
    }
LABEL_46:
    if (v1[224])
      goto LABEL_47;
    goto LABEL_52;
  }
LABEL_104:
  __break(1u);
  return result;
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setMescalHeaders(_QWORD *__p)
{
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;

  v2 = (void **)(__p + 19);
  if (!*__p)
  {
    v18 = (std::__shared_weak_count *)__p[63];
    goto LABEL_71;
  }
  if (*((_BYTE *)__p + 512))
  {
    v3 = (std::__shared_weak_count *)__p[48];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)__p[50];
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[56];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[54];
    if (!v12)
      goto LABEL_22;
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v15 = (std::__shared_weak_count *)__p[52];
      if (!v15)
        goto LABEL_26;
    }
    else
    {
LABEL_22:
      v15 = (std::__shared_weak_count *)__p[52];
      if (!v15)
        goto LABEL_26;
    }
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (*((_BYTE *)__p + 224))
      {
LABEL_27:
        if (*((char *)__p + 175) < 0)
          operator delete(*v2);
LABEL_60:
        v18 = 0;
        v35 = (std::__shared_weak_count *)__p[46];
        if (!v35)
          goto LABEL_71;
        goto LABEL_67;
      }
LABEL_59:
      (*(void (**)(void **))*v2)(v2);
      goto LABEL_60;
    }
LABEL_26:
    if (*((_BYTE *)__p + 224))
      goto LABEL_27;
    goto LABEL_59;
  }
  v19 = __p[62];
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      v22 = (std::__shared_weak_count *)__p[62];
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v23 = (std::__shared_weak_count *)__p[48];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)__p[44];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)__p[42];
  if (!v29)
    goto LABEL_49;
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = (std::__shared_weak_count *)__p[40];
    if (!v32)
      goto LABEL_53;
  }
  else
  {
LABEL_49:
    v32 = (std::__shared_weak_count *)__p[40];
    if (!v32)
      goto LABEL_53;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_53:
    if (*((_BYTE *)__p + 224))
      goto LABEL_54;
LABEL_65:
    (*(void (**)(void **))*v2)(v2);
    goto LABEL_66;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (!*((_BYTE *)__p + 224))
    goto LABEL_65;
LABEL_54:
  if (*((char *)__p + 175) < 0)
    operator delete(*v2);
LABEL_66:
  v18 = (std::__shared_weak_count *)__p[58];
  v35 = (std::__shared_weak_count *)__p[46];
  if (!v35)
    goto LABEL_71;
LABEL_67:
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_71:
  v38 = (_QWORD *)__p[18];
  if (v38 == __p + 15)
  {
    v39 = 4;
    v38 = __p + 15;
    goto LABEL_75;
  }
  if (v38)
  {
    v39 = 5;
LABEL_75:
    (*(void (**)(void))(*v38 + 8 * v39))();
  }
  if (*((_BYTE *)__p + 104) && !*((_BYTE *)__p + 96))
    (*(void (**)(char *))__p[3])((char *)__p + 24);
  v40 = __p[60];
  do
  {
    v41 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v42)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v40)
  {
    v43 = (unint64_t *)(__p[60] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      v45 = (std::__shared_weak_count *)__p[60];
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v18)
  {
    v46 = (unint64_t *)&v18->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(__p);
}

_BYTE *AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setSignedHeader(std::runtime_error *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  void **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void (***v20)(uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *result;
  __int128 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  const std::runtime_error *v31;
  char v32;
  std::runtime_error v33;
  std::system_error_vtbl *v34;
  uint64_t v35;
  uint64_t v36;
  std::system_error_vtbl *v37;
  std::system_error_vtbl *v38;
  std::ios_base *v39;
  uint64_t v40;
  unsigned int *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int **v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int **v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::string *v83;
  char *v84;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t *v89;
  char *v90;
  std::runtime_error *v91;
  _BYTE __what_arg[32];
  unsigned int **v93;
  unsigned int *v94;
  uint64_t v95;
  __int128 v96;
  std::runtime_error v97;
  std::error_code ec;
  unsigned int **v99;
  unsigned int *v100;
  uint64_t v101;
  __int128 v102;
  std::system_error v103;
  unsigned int **v104;
  unsigned int *v105;
  uint64_t v106;
  __int128 v107;
  __int128 __p;
  __int128 v109;
  int v110;
  uint64_t v111[22];
  std::error_code v112;

  v10 = (char *)operator new(0x1A8uLL);
  v11 = (unint64_t)v10;
  v91 = (std::runtime_error *)(v10 + 152);
  *((_OWORD *)v10 + 24) = *(_OWORD *)a2;
  v83 = (std::string *)(v10 + 232);
  v84 = v10 + 264;
  v87 = v10 + 304;
  v12 = v10 + 320;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = (void **)(v10 + 336);
  v14 = v10 + 352;
  v88 = v10 + 368;
  v89 = (uint64_t *)(v10 + 288);
  v16 = *a3;
  v15 = a3[1];
  *((_QWORD *)v10 + 46) = *a3;
  *((_QWORD *)v10 + 47) = v15;
  *a3 = 0;
  a3[1] = 0;
  v18 = *a4;
  v17 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  *((_QWORD *)v10 + 38) = v18;
  *((_QWORD *)v10 + 39) = v17;
  do
    v19 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v19 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v10[24] = 0;
  v20 = (void (***)(uint64_t))(v10 + 24);
  v10[104] = 0;
  *((_QWORD *)v10 + 14) = 0;
  *((_QWORD *)v10 + 18) = 0;
  v90 = v10 + 16;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v103, (uint64_t)(v10 + 16));
  *a1 = v103.std::runtime_error;
  if (v16)
  {
    v21 = atomic_load((unsigned __int8 *)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
    if ((v21 & 1) == 0)
      goto LABEL_116;
    while (1)
    {
      std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
      v22 = qword_1ECEABED0;
      *(_QWORD *)(v11 + 288) = qword_1ECEABEC8;
      *(_QWORD *)(v11 + 296) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
      v25 = *v89;
      if (!*v89)
      {
        v34 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
        v35 = MEMORY[0x1E0DE4FE0] + 64;
        v36 = MEMORY[0x1E0DE4F60];
        v37 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
        v38 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
        v111[0] = MEMORY[0x1E0DE4FE0] + 64;
        v103.__vftable = v37;
        *(std::system_error_vtbl **)((char *)&v103.__vftable + (unint64_t)v37[-1].~system_error) = v38;
        v39 = (std::ios_base *)((char *)&v103 + (unint64_t)v103.__vftable[-1].~system_error);
        std::ios_base::init(v39, &v103.__imp_);
        v39[1].__vftable = 0;
        v39[1].__fmtflags_ = -1;
        v103.__vftable = v34 + 1;
        v111[0] = v35;
        std::streambuf::basic_streambuf();
        v40 = MEMORY[0x1E0DE4FB8];
        v103.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
        __p = 0u;
        v109 = 0u;
        v110 = 16;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Mescal provider is not available, but Mescal was requested.", 59);
        std::stringbuf::str[abi:fe180100]((uint64_t)&v103.__imp_, (std::string *)__what_arg);
        v103.__vftable = *(std::system_error_vtbl **)v36;
        *(std::system_error_vtbl **)((char *)&v103.__vftable + (unint64_t)v103.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v36 + 24);
        v103.__imp_.__imp_ = (const char *)(v40 + 16);
        if (SBYTE7(v109) < 0)
          operator delete((void *)__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D789B58](v111);
        v112.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
        *(_QWORD *)&v112.__val_ = 2;
        std::system_error::system_error(&v103, v112, (const std::string *)__what_arg);
        if ((__what_arg[23] & 0x80000000) != 0)
          operator delete(*(void **)__what_arg);
        v105 = 0;
        v106 = 0;
        v103.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v104 = &v105;
        v107 = 0uLL;
        std::runtime_error::runtime_error(&v97, &v103);
        ec = v103.__ec_;
        v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v41 = v105;
        v99 = v104;
        v100 = v105;
        v101 = v106;
        if (v106)
        {
          *((_QWORD *)v105 + 2) = &v100;
          v41 = 0;
          v104 = &v105;
          v105 = 0;
          v106 = 0;
        }
        else
        {
          v99 = &v100;
        }
        v102 = v107;
        v107 = 0uLL;
        v103.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v104, v41);
        MEMORY[0x18D7898AC](&v103);
        if (*(_BYTE *)(v11 + 104))
        {
          if (!*(_BYTE *)(v11 + 96))
            (**v20)(v11 + 24);
          *(_BYTE *)(v11 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(v11 + 24), &v97);
        v47 = v99;
        v46 = v100;
        *(_QWORD *)(v11 + 64) = v100;
        v48 = v11 + 64;
        *(std::error_code *)(v11 + 40) = ec;
        *(_QWORD *)(v11 + 24) = off_1E2521330;
        *(_QWORD *)(v11 + 56) = v47;
        v49 = v101;
        *(_QWORD *)(v11 + 72) = v101;
        if (v49)
        {
          *((_QWORD *)v46 + 2) = v48;
          v46 = 0;
          v99 = &v100;
          v100 = 0;
          v101 = 0;
        }
        else
        {
          *(_QWORD *)(v11 + 56) = v48;
        }
        v13 = (void **)&v91->__vftable;
        *(_OWORD *)(v11 + 80) = v102;
        v102 = 0uLL;
        *(_BYTE *)(v11 + 96) = 0;
        *(_BYTE *)(v11 + 104) = 1;
        v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v99, v46);
        MEMORY[0x18D7898AC](&v97);
        goto LABEL_108;
      }
      *(_QWORD *)(v11 + 336) = v16;
      *(_QWORD *)(v11 + 344) = v15;
      *v88 = 0;
      v88[1] = 0;
      *(_QWORD *)(v11 + 352) = v18;
      *(_QWORD *)(v11 + 360) = v17;
      *v87 = 0;
      v87[1] = 0;
      result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, char *))(*(_QWORD *)v25 + 16))(v25, a5, a6, v13, v14);
      v27 = *(_OWORD *)(v11 + 320);
      *(_OWORD *)(v11 + 400) = v27;
      *v12 = 0;
      v12[1] = 0;
      v28 = atomic_load((unint64_t *)(v27 + 96));
      v13 = (void **)&v91->__vftable;
      if (!v28)
      {
        *(_BYTE *)(v11 + 416) = 0;
        v29 = (unint64_t *)(*(_QWORD *)(v11 + 400) + 96);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v11, v29));
        if (!v30)
          return result;
      }
      v17 = *(_QWORD *)(v11 + 400);
      if (*(_BYTE *)(v17 + 88))
        break;
      __break(1u);
LABEL_116:
      if (__cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton))
      {
        std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
        qword_1ECEABEC8 = 0;
        qword_1ECEABED0 = 0;
        byte_1ECEABED8 = 0;
        __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
      }
    }
    v31 = (const std::runtime_error *)(v17 + 8);
    v32 = *(_BYTE *)(v17 + 80);
    if (v32)
    {
      v33 = *v31;
      v91[1].__vftable = *(std::runtime_error_vtbl **)(v17 + 24);
      *v91 = v33;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      v31->__vftable = 0;
    }
    else
    {
      std::runtime_error::runtime_error(v91, v31);
      *(_OWORD *)(v11 + 168) = *(_OWORD *)(v17 + 24);
      v42 = (_QWORD *)(v17 + 48);
      v43 = *(_QWORD *)(v17 + 48);
      *(_QWORD *)(v11 + 192) = v43;
      v44 = v11 + 192;
      *(_QWORD *)(v11 + 152) = off_1E2521330;
      *(_QWORD *)(v11 + 184) = *(_QWORD *)(v17 + 40);
      v45 = *(_QWORD *)(v17 + 56);
      *(_QWORD *)(v11 + 200) = v45;
      if (v45)
      {
        *(_QWORD *)(v43 + 16) = v44;
        *(_QWORD *)(v17 + 40) = v42;
        *v42 = 0;
        *(_QWORD *)(v17 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v11 + 184) = v44;
      }
      v50 = *(_QWORD *)(v11 + 400);
      *(_OWORD *)(v11 + 208) = *(_OWORD *)(v50 + 64);
      *(_QWORD *)(v50 + 64) = 0;
      *(_QWORD *)(v50 + 72) = 0;
    }
    *(_BYTE *)(v11 + 224) = v32;
    v51 = *(_QWORD *)(v11 + 408);
    if (v51)
    {
      v52 = (unint64_t *)(v51 + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        v54 = *(std::__shared_weak_count **)(v11 + 408);
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v55 = *(std::__shared_weak_count **)(v11 + 328);
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = *(std::__shared_weak_count **)(v11 + 360);
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = *(std::__shared_weak_count **)(v11 + 344);
    if (!v61)
      goto LABEL_120;
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      if (!*(_BYTE *)(v11 + 224))
        goto LABEL_68;
LABEL_59:
      v64 = *(char *)(v11 + 175);
      if (v64 >= 0)
        v65 = (uint64_t)v91;
      else
        v65 = *(_QWORD *)(v11 + 152);
      if (v64 >= 0)
        v66 = *(unsigned __int8 *)(v11 + 175);
      else
        v66 = *(_QWORD *)(v11 + 160);
      AMSCore::Base64::encode(v65, v66, &v103);
      v67 = *(_QWORD *)(v11 + 384);
      v68 = (char *)operator new(0x19uLL);
      *(_QWORD *)(v11 + 264) = v68;
      *(_OWORD *)(v11 + 272) = xmmword_18CF51B20;
      strcpy(v68, "X-Apple-ActionSignature");
      if (*((char *)&v103.__ec_.__val_ + 7) < 0)
      {
        std::string::__init_copy_ctor_external(v83, (const std::string::value_type *)v103.__vftable, (std::string::size_type)v103.__imp_.__imp_);
      }
      else
      {
        *(std::runtime_error *)&v83->__r_.__value_.__l.__data_ = v103.std::runtime_error;
        v83->__r_.__value_.__r.__words[2] = *(_QWORD *)&v103.__ec_.__val_;
      }
      *(_BYTE *)(v11 + 256) = 1;
      v71 = (_QWORD *)(v67 + 240);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v71, v84);
      if (*(_BYTE *)(v11 + 256))
      {
        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v71, (uint64_t)v84, (uint64_t)v83);
        if (*(_BYTE *)(v11 + 256))
        {
          if (*(char *)(v11 + 255) < 0)
            operator delete(v83->__r_.__value_.__l.__data_);
        }
      }
      if (*(char *)(v11 + 287) < 0)
        operator delete(*(void **)v84);
      if (*(_BYTE *)(v11 + 104) && !*(_BYTE *)(v11 + 96))
      {
        (**(void (***)(uint64_t))(v11 + 24))(v11 + 24);
        *(_BYTE *)(v11 + 104) = 0;
      }
      *(_BYTE *)(v11 + 96) = 1;
      *(_BYTE *)(v11 + 104) = 1;
      if (*((char *)&v103.__ec_.__val_ + 7) < 0)
        operator delete(v103.__vftable);
      if (!*(_BYTE *)(v11 + 224))
      {
LABEL_107:
        (*(void (**)(void **))*v13)(v13);
        goto LABEL_108;
      }
    }
    else
    {
LABEL_120:
      if (*(_BYTE *)(v11 + 224))
        goto LABEL_59;
LABEL_68:
      std::runtime_error::runtime_error(&v103, v91);
      v69 = (_QWORD *)(v11 + 192);
      v70 = *(_QWORD *)(v11 + 192);
      v103.__ec_ = *(std::error_code *)(v11 + 168);
      v103.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v104 = *(unsigned int ***)(v11 + 184);
      v105 = (unsigned int *)v70;
      v106 = *(_QWORD *)(v11 + 200);
      if (v106)
      {
        *(_QWORD *)(v70 + 16) = &v105;
        *(_QWORD *)(v11 + 184) = v69;
        *v69 = 0;
        *(_QWORD *)(v11 + 200) = 0;
      }
      else
      {
        v104 = &v105;
      }
      v107 = *(_OWORD *)(v11 + 208);
      *(_QWORD *)(v11 + 208) = 0;
      *(_QWORD *)(v11 + 216) = 0;
      LOBYTE(__p) = 1;
      std::runtime_error::runtime_error(&v97, &v103);
      ec = v103.__ec_;
      v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v99 = v104;
      v100 = v105;
      v101 = v106;
      if (v106)
      {
        *((_QWORD *)v105 + 2) = &v100;
        v104 = &v105;
        v105 = 0;
        v106 = 0;
      }
      else
      {
        v99 = &v100;
      }
      v102 = v107;
      v107 = 0uLL;
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v97);
      *(std::error_code *)&__what_arg[16] = ec;
      *(_QWORD *)__what_arg = off_1E2521330;
      v72 = v100;
      v93 = v99;
      v94 = v100;
      v95 = v101;
      if (v101)
      {
        *((_QWORD *)v100 + 2) = &v94;
        v72 = 0;
        v99 = &v100;
        v100 = 0;
        v101 = 0;
      }
      else
      {
        v93 = &v94;
      }
      v96 = v102;
      v102 = 0uLL;
      v97.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v99, v72);
      MEMORY[0x18D7898AC](&v97);
      if (*(_BYTE *)(v11 + 104))
      {
        if (!*(_BYTE *)(v11 + 96))
          (**v20)(v11 + 24);
        *(_BYTE *)(v11 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(v11 + 24), (const std::runtime_error *)__what_arg);
      v74 = v93;
      v73 = v94;
      *(_QWORD *)(v11 + 64) = v94;
      v75 = v11 + 64;
      *(_OWORD *)(v11 + 40) = *(_OWORD *)&__what_arg[16];
      *(_QWORD *)(v11 + 24) = off_1E2521330;
      *(_QWORD *)(v11 + 56) = v74;
      v76 = v95;
      *(_QWORD *)(v11 + 72) = v95;
      if (v76)
      {
        *((_QWORD *)v73 + 2) = v75;
        v73 = 0;
        v93 = &v94;
        v94 = 0;
        v95 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + 56) = v75;
      }
      *(_OWORD *)(v11 + 80) = v96;
      v96 = 0uLL;
      *(_BYTE *)(v11 + 96) = 0;
      *(_BYTE *)(v11 + 104) = 1;
      *(_QWORD *)__what_arg = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v93, v73);
      MEMORY[0x18D7898AC](__what_arg);
      if ((_BYTE)__p)
      {
        v103.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v77 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
        if (*((_QWORD *)&v107 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v104, v105);
        MEMORY[0x18D7898AC](&v103);
      }
      v13 = (void **)&v91->__vftable;
      if (!*(_BYTE *)(v11 + 224))
        goto LABEL_107;
    }
    if (*(char *)(v11 + 175) < 0)
      operator delete(*v13);
LABEL_108:
    v80 = *(std::__shared_weak_count **)(v11 + 296);
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  else
  {
    if (*(_BYTE *)(v11 + 104) && !*(_BYTE *)(v11 + 96))
      (**v20)(v11 + 24);
    *(_BYTE *)(v11 + 96) = 1;
    *(_BYTE *)(v11 + 104) = 1;
    v13 = (void **)&v91->__vftable;
  }
  *(_QWORD *)(v11 + 152) = v90;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 416) = 1;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v13);
}

void sub_18CCF0E58(void *a1)
{
  __cxa_guard_abort(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
  __clang_call_terminate(a1);
}

void sub_18CCF0E70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 + 287) < 0)
    operator delete(*a11);
  if (a45 < 0)
    operator delete(__p);
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](a18);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a16);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCF0ED8()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCF0DDCLL);
}

void sub_18CCF0EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  AMSCore::Task<void,AMSCore::Error>::ValuePromise::~ValuePromise(a17);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a14);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a15);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a9);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_18CCF0F18(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

_BYTE *AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setSignedHeader(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  std::runtime_error v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void **v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int **v37;
  _BYTE *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error v46;
  __int128 v47;
  unsigned int **v48;
  unsigned int *v49;
  uint64_t v50;
  __int128 v51;
  std::runtime_error v52;
  __int128 v53;
  unsigned int **v54;
  unsigned int *v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  std::runtime_error v59;
  __int128 v60;
  unsigned int **v61;
  unsigned int *v62;
  uint64_t v63;
  __int128 v64;

  v1 = *((_QWORD *)result + 50);
  if (!*(_BYTE *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = (std::runtime_error *)(result + 152);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 80);
  if (v5)
  {
    v6 = *v4;
    *((_QWORD *)result + 21) = *(_QWORD *)(v1 + 24);
    *v3 = v6;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    v4->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), v4);
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
    v7 = (_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v2 + 24) = v8;
    v9 = v2 + 192;
    *((_QWORD *)v2 + 19) = off_1E2521330;
    *((_QWORD *)v2 + 23) = *(_QWORD *)(v1 + 40);
    v10 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v2 + 25) = v10;
    if (v10)
    {
      *(_QWORD *)(v8 + 16) = v9;
      *(_QWORD *)(v1 + 40) = v7;
      *v7 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v2 + 23) = v9;
    }
    v11 = *((_QWORD *)v2 + 50);
    *((_OWORD *)v2 + 13) = *(_OWORD *)(v11 + 64);
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 72) = 0;
  }
  v2[224] = v5;
  v12 = *((_QWORD *)v2 + 51);
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      v15 = (std::__shared_weak_count *)*((_QWORD *)v2 + 51);
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)v2 + 41);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)v2 + 45);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v2 + 16;
  v23 = (std::__shared_weak_count *)*((_QWORD *)v2 + 43);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (v2[224])
        goto LABEL_28;
LABEL_37:
      std::runtime_error::runtime_error(&v52, v3);
      v32 = v2 + 192;
      v33 = *((_QWORD *)v2 + 24);
      v53 = *(_OWORD *)(v2 + 168);
      v52.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v54 = (unsigned int **)*((_QWORD *)v2 + 23);
      v55 = (unsigned int *)v33;
      v56 = *((_QWORD *)v2 + 25);
      if (v56)
      {
        *(_QWORD *)(v33 + 16) = &v55;
        *((_QWORD *)v2 + 23) = v32;
        *v32 = 0;
        *((_QWORD *)v2 + 25) = 0;
      }
      else
      {
        v54 = &v55;
      }
      v57 = *((_OWORD *)v2 + 13);
      *((_QWORD *)v2 + 26) = 0;
      *((_QWORD *)v2 + 27) = 0;
      v58 = 1;
      std::runtime_error::runtime_error(&v46, &v52);
      v47 = v53;
      v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v48 = v54;
      v49 = v55;
      v50 = v56;
      if (v56)
      {
        *((_QWORD *)v55 + 2) = &v49;
        v54 = &v55;
        v55 = 0;
        v56 = 0;
      }
      else
      {
        v48 = &v49;
      }
      v51 = v57;
      v57 = 0uLL;
      std::runtime_error::runtime_error(&v59, &v46);
      v60 = v47;
      v35 = v49;
      v59.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v61 = v48;
      v62 = v49;
      v63 = v50;
      if (v50)
      {
        *((_QWORD *)v49 + 2) = &v62;
        v35 = 0;
        v48 = &v49;
        v49 = 0;
        v50 = 0;
      }
      else
      {
        v61 = &v62;
      }
      v64 = v51;
      v51 = 0uLL;
      v46.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v48, v35);
      MEMORY[0x18D7898AC](&v46);
      if (v2[104])
      {
        if (!v2[96])
          (**((void (***)(uint64_t))v2 + 3))((uint64_t)(v2 + 24));
        v2[104] = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), &v59);
      v37 = v61;
      v36 = v62;
      *((_QWORD *)v2 + 8) = v62;
      v38 = v2 + 64;
      *(_OWORD *)(v2 + 40) = v60;
      *((_QWORD *)v2 + 3) = off_1E2521330;
      *((_QWORD *)v2 + 7) = v37;
      v39 = v63;
      *((_QWORD *)v2 + 9) = v63;
      if (v39)
      {
        *((_QWORD *)v36 + 2) = v38;
        v36 = 0;
        v61 = &v62;
        v62 = 0;
        v63 = 0;
      }
      else
      {
        *((_QWORD *)v2 + 7) = v38;
      }
      v22 = v2 + 16;
      *((_OWORD *)v2 + 5) = v64;
      v64 = 0uLL;
      v2[96] = 0;
      v2[104] = 1;
      v59.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v61, v36);
      MEMORY[0x18D7898AC](&v59);
      if (v58)
      {
        v52.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
        if (*((_QWORD *)&v57 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v54, v55);
        MEMORY[0x18D7898AC](&v52);
      }
      goto LABEL_72;
    }
  }
  if (!v2[224])
    goto LABEL_37;
LABEL_28:
  v26 = (char)v2[175];
  if (v26 >= 0)
    v27 = (uint64_t)v3;
  else
    v27 = *((_QWORD *)v2 + 19);
  if (v26 >= 0)
    v28 = v2[175];
  else
    v28 = *((_QWORD *)v2 + 20);
  AMSCore::Base64::encode(v27, v28, &v52);
  v29 = *((_QWORD *)v2 + 48);
  v30 = (char *)operator new(0x19uLL);
  v31 = (void **)(v2 + 232);
  *((_QWORD *)v2 + 33) = v30;
  *((_OWORD *)v2 + 17) = xmmword_18CF51B20;
  strcpy(v30, "X-Apple-ActionSignature");
  if (SBYTE7(v53) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 232), (const std::string::value_type *)v52.__vftable, (std::string::size_type)v52.__imp_.__imp_);
  }
  else
  {
    *(std::runtime_error *)v31 = v52;
    *((_QWORD *)v2 + 31) = v53;
  }
  v2[256] = 1;
  v34 = (_QWORD *)(v29 + 240);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v34, v2 + 264);
  if (v2[256])
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v34, (uint64_t)(v2 + 264), (uint64_t)(v2 + 232));
    if (v2[256])
    {
      if ((char)v2[255] < 0)
        operator delete(*v31);
    }
  }
  if ((char)v2[287] < 0)
    operator delete(*((void **)v2 + 33));
  if (v2[104] && !v2[96])
  {
    (**((void (***)(uint64_t))v2 + 3))((uint64_t)(v2 + 24));
    v2[104] = 0;
  }
  v2[96] = 1;
  v2[104] = 1;
  if (SBYTE7(v53) < 0)
    operator delete(v52.__vftable);
LABEL_72:
  if (v2[224])
  {
    if ((char)v2[175] < 0)
      operator delete(v3->__vftable);
  }
  else
  {
    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)v2 + 37);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  *((_QWORD *)v2 + 19) = v22;
  *(_QWORD *)v2 = 0;
  v2[416] = 1;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CCF1540(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  void **v26;

  if (*(char *)(v24 + 287) < 0)
    operator delete(*v26);
  if (a24 < 0)
    operator delete(__p);
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v25);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v24 + 288);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCF1590()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCF1504);
}

void sub_18CCF1598(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 416) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setSignedHeader(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  if ((__p[52] & 1) == 0)
  {
    v2 = __p[51];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[51];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[41];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)__p[45];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[43];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)__p[37];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v18 = (_QWORD *)__p[18];
  if (v18 == __p + 15)
  {
    v19 = 4;
    v18 = __p + 15;
    goto LABEL_31;
  }
  if (v18)
  {
    v19 = 5;
LABEL_31:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  if (*((_BYTE *)__p + 104) && !*((_BYTE *)__p + 96))
    (*(void (**)(char *))__p[3])((char *)__p + 24);
  do
  {
    v20 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v21)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v22 = (std::__shared_weak_count *)__p[39];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)__p[47];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)__p[49];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(__p);
}

void std::bad_expected_access<AMSCore::Error>::~bad_expected_access(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E25225A8;
  *(_QWORD *)(a1 + 8) = off_1E2521330;
  v2 = a1 + 8;
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 40, *(unsigned int **)(a1 + 48));
  MEMORY[0x18D7898AC](v2);
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E25225A8;
  *(_QWORD *)(a1 + 8) = off_1E2521330;
  v2 = a1 + 8;
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 40, *(unsigned int **)(a1 + 48));
  MEMORY[0x18D7898AC](v2);
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x18D789BDCLL);
}

const char *std::bad_expected_access<void>::what()
{
  return "bad access to std::expected";
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setStorefront(char *a1)
{
  uint64_t v1;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  std::runtime_error_vtbl *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error *v23;
  void **v24;
  int v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int **v31;
  char *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::runtime_error_vtbl *v44;
  const void *v45;
  size_t v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::__shared_weak_count *imp;
  unint64_t *v50;
  unint64_t v51;
  BOOL v52;
  _BYTE *v53;
  std::string::size_type v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void **v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  unsigned int *v82;
  unsigned int **v83;
  char *v84;
  uint64_t v85;
  int v86;
  std::runtime_error v87;
  __int128 v88;
  unsigned int **v89;
  unsigned int *v90;
  uint64_t v91;
  __int128 v92;
  char *v93;
  _BYTE v94[24];
  unsigned int **v95;
  unsigned int *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::runtime_error v101;
  __int128 v102;
  unsigned int **v103;
  unsigned int *v104;
  uint64_t v105;
  __int128 v106;
  unsigned __int8 v107;

  v1 = *((_QWORD *)a1 + 55);
  if (!*(_BYTE *)(v1 + 88))
  {
    __break(1u);
    return;
  }
  v3 = (std::runtime_error *)(a1 + 152);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 80);
  if (v5)
  {
    v6 = v4->__vftable;
    v4->__vftable = 0;
    v3->__vftable = v6;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v4);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 24);
    v7 = (_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)a1 + 24) = v8;
    v9 = a1 + 192;
    *((_QWORD *)a1 + 19) = off_1E2521330;
    *((_QWORD *)a1 + 23) = *(_QWORD *)(v1 + 40);
    v10 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)a1 + 25) = v10;
    if (v10)
    {
      *(_QWORD *)(v8 + 16) = v9;
      *(_QWORD *)(v1 + 40) = v7;
      *v7 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)a1 + 23) = v9;
    }
    v11 = *((_QWORD *)a1 + 55);
    *((_OWORD *)a1 + 13) = *(_OWORD *)(v11 + 64);
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 72) = 0;
  }
  a1[224] = v5;
  v12 = *((_QWORD *)a1 + 56);
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      v15 = (std::__shared_weak_count *)*((_QWORD *)a1 + 56);
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)a1 + 49);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if ((a1[367] & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  if (a1[367] < 0)
LABEL_18:
    operator delete(*((void **)a1 + 43));
LABEL_19:
  v19 = a1 + 16;
  v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 47);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::runtime_error *)(a1 + 232);
  v24 = (void **)(a1 + 296);
  v25 = a1[224];
  if (a1[224])
  {
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, char *))v3->~runtime_error + 16))(&v101, v3->__vftable, a1 + 296);
    v26 = BYTE8(v102);
    if (a1[256] == BYTE8(v102))
    {
      if (a1[256])
      {
        if (a1[255] < 0)
          operator delete(v23->__vftable);
        *v23 = v101;
        *((_QWORD *)a1 + 31) = v102;
      }
    }
    else if (a1[256])
    {
      if (a1[255] < 0)
      {
        operator delete(v23->__vftable);
        v26 = BYTE8(v102);
      }
      a1[256] = 0;
      if (v26 && SBYTE7(v102) < 0)
        operator delete(v101.__vftable);
    }
    else
    {
      *v23 = v101;
      *((_QWORD *)a1 + 31) = v102;
      a1[256] = 1;
    }
    v37 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v101, v3);
    v27 = a1 + 192;
    v28 = *((_QWORD *)a1 + 24);
    v102 = *(_OWORD *)(a1 + 168);
    v101.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v103 = (unsigned int **)*((_QWORD *)a1 + 23);
    v104 = (unsigned int *)v28;
    v105 = *((_QWORD *)a1 + 25);
    if (v105)
    {
      *(_QWORD *)(v28 + 16) = &v104;
      *((_QWORD *)a1 + 23) = v27;
      *v27 = 0;
      *((_QWORD *)a1 + 25) = 0;
    }
    else
    {
      v103 = &v104;
    }
    v106 = *((_OWORD *)a1 + 13);
    *((_QWORD *)a1 + 26) = 0;
    *((_QWORD *)a1 + 27) = 0;
    v107 = 1;
    std::runtime_error::runtime_error(&v87, &v101);
    v88 = v102;
    v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v89 = v103;
    v90 = v104;
    v91 = v105;
    if (v105)
    {
      *((_QWORD *)v104 + 2) = &v90;
      v103 = &v104;
      v104 = 0;
      v105 = 0;
    }
    else
    {
      v89 = &v90;
    }
    v92 = v106;
    v106 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)&v93, &v87);
    *(_OWORD *)&v94[8] = v88;
    v93 = (char *)off_1E2521330;
    v29 = v90;
    v95 = v89;
    v96 = v90;
    v97 = v91;
    if (v91)
    {
      *((_QWORD *)v90 + 2) = &v96;
      v29 = 0;
      v89 = &v90;
      v90 = 0;
      v91 = 0;
    }
    else
    {
      v95 = &v96;
    }
    v98 = v92;
    v92 = 0uLL;
    v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v89, v29);
    MEMORY[0x18D7898AC](&v87);
    v23 = (std::runtime_error *)(a1 + 232);
    if (a1[104])
    {
      if (!a1[96])
        (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
      a1[104] = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)&v93);
    v31 = v95;
    v30 = v96;
    *((_QWORD *)a1 + 8) = v96;
    v32 = a1 + 64;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&v94[8];
    *((_QWORD *)a1 + 3) = off_1E2521330;
    *((_QWORD *)a1 + 7) = v31;
    v33 = v97;
    *((_QWORD *)a1 + 9) = v97;
    if (v33)
    {
      *((_QWORD *)v30 + 2) = v32;
      v30 = 0;
      v95 = &v96;
      v96 = 0;
      v97 = 0;
    }
    else
    {
      *((_QWORD *)a1 + 7) = v32;
    }
    v24 = (void **)(a1 + 296);
    v19 = a1 + 16;
    *((_OWORD *)a1 + 5) = v98;
    v98 = 0uLL;
    a1[96] = 0;
    a1[104] = 1;
    v93 = (char *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v95, v30);
    MEMORY[0x18D7898AC](&v93);
    if (v107)
    {
      v101.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (*((_QWORD *)&v106 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v103, v104);
      MEMORY[0x18D7898AC](&v101);
    }
    v37 = 3;
  }
  v38 = *((_QWORD *)a1 + 19);
  if (a1[224])
  {
    v3->__vftable = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    if (!v25)
    {
LABEL_68:
      if (!a1[256])
        goto LABEL_144;
      goto LABEL_142;
    }
  }
  else
  {
    (*(void (**)(std::runtime_error *))v38)(v3);
    if (!v25)
      goto LABEL_68;
  }
  if (!a1[256])
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v101);
    AMSCore::Logger::log<char [15]>((uint64_t)v101.__vftable);
    imp = (std::__shared_weak_count *)v101.__imp_.__imp_;
    if (v101.__imp_.__imp_)
    {
      v50 = (unint64_t *)(v101.__imp_.__imp_ + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    if (a1[104])
      v52 = a1[96] == 0;
    else
      v52 = 0;
    if (v52)
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    a1[96] = 1;
    a1[104] = 1;
    goto LABEL_141;
  }
  v39 = *((_QWORD *)a1 + 53);
  v87 = *v23;
  *(_QWORD *)&v88 = v23[1].__vftable;
  v23->__imp_.__imp_ = 0;
  v23[1].__vftable = 0;
  v23->__vftable = 0;
  v41 = *(_QWORD *)(v39 + 24);
  v40 = *(std::__shared_weak_count **)(v39 + 32);
  v99 = v41;
  v100 = v40;
  if (v40)
  {
    v42 = (unint64_t *)&v40->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  if (v41)
  {
    v93 = (char *)operator new(0x20uLL);
    *(_OWORD *)v94 = xmmword_18CF51B50;
    strcpy(v93, "storefront-header-suffix");
    (*(void (**)(std::runtime_error *__return_ptr, uint64_t, char **))(*(_QWORD *)v41 + 56))(&v101, v41, &v93);
    if ((v94[15] & 0x80000000) != 0)
      operator delete(v93);
    v44 = v101.__vftable;
    if (!v107)
      goto LABEL_116;
    if ((SBYTE7(v102) & 0x80u) == 0)
      v45 = &v101;
    else
      v45 = v101.__vftable;
    if ((SBYTE7(v102) & 0x80u) == 0)
      v46 = BYTE7(v102);
    else
      v46 = (size_t)v101.__imp_.__imp_;
    if ((SBYTE7(v88) & 0x80u) == 0)
      v47 = 22;
    else
      v47 = (v88 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((SBYTE7(v88) & 0x80u) == 0)
      v48 = BYTE7(v88);
    else
      v48 = (std::string::size_type)v87.__imp_.__imp_;
    if (v47 - v48 >= v46)
    {
      if (v46)
      {
        if ((SBYTE7(v88) & 0x80u) == 0)
          v53 = &v87;
        else
          v53 = v87.__vftable;
        memmove(&v53[v48], v45, v46);
        v54 = v48 + v46;
        if (SBYTE7(v88) < 0)
        {
          v87.__imp_.__imp_ = (const char *)(v48 + v46);
          v53[v54] = 0;
          if (v107)
          {
LABEL_112:
            if (SBYTE7(v102) < 0)
              operator delete(v101.__vftable);
            goto LABEL_117;
          }
          goto LABEL_115;
        }
        BYTE7(v88) = v54 & 0x7F;
        v53[v54] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace((std::string *)&v87, v47, v48 + v46 - v47, v48, v48, 0, v46, (const std::string::value_type *)v45);
    }
    if (v107)
      goto LABEL_112;
LABEL_115:
    v44 = v101.__vftable;
LABEL_116:
    ((void (*)(std::runtime_error *))v44->~runtime_error)(&v101);
  }
LABEL_117:
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v101);
  AMSCore::Logger::log<char [36],std::string>((uint64_t)v101.__vftable, 2, (uint64_t)"networking", 10, "Appending storefront. storefront = ", (uint64_t)&v87);
  v55 = (std::__shared_weak_count *)v101.__imp_.__imp_;
  if (v101.__imp_.__imp_)
  {
    v56 = (unint64_t *)(v101.__imp_.__imp_ + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (void **)(a1 + 264);
  a1[343] = 19;
  strcpy(a1 + 320, "X-Apple-Store-Front");
  if (SBYTE7(v88) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1 + 11, (const std::string::value_type *)v87.__vftable, (std::string::size_type)v87.__imp_.__imp_);
  }
  else
  {
    *(std::runtime_error *)v58 = v87;
    *((_QWORD *)a1 + 35) = v88;
  }
  v59 = *((_QWORD *)a1 + 50);
  a1[288] = 1;
  v60 = (_QWORD *)(v59 + 240);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)(v59 + 240), a1 + 320);
  if (a1[288])
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v60, (uint64_t)(a1 + 320), (uint64_t)(a1 + 264));
    if (a1[288])
    {
      if (a1[287] < 0)
        operator delete(*v58);
    }
  }
  if (a1[343] < 0)
    operator delete(*((void **)a1 + 40));
  v107 = 1;
  if (a1[104] && !a1[96])
  {
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    v61 = v107;
    a1[104] = 0;
    if (!v61)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v101);
      v81 = v102;
      v83 = v103;
      v82 = v104;
      *((_QWORD *)a1 + 8) = v104;
      v84 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v81;
      *((_QWORD *)a1 + 3) = off_1E2521330;
      *((_QWORD *)a1 + 7) = v83;
      v85 = v105;
      *((_QWORD *)a1 + 9) = v105;
      if (v85)
      {
        *((_QWORD *)v82 + 2) = v84;
        v103 = &v104;
        v104 = 0;
        v105 = 0;
      }
      else
      {
        *((_QWORD *)a1 + 7) = v84;
      }
      *((_OWORD *)a1 + 5) = v106;
      v106 = 0uLL;
      v86 = v107;
      a1[96] = 0;
      a1[104] = 1;
      if (!v86)
        ((void (*)(std::runtime_error *))v101.~runtime_error)(&v101);
      goto LABEL_135;
    }
  }
  else
  {
    LOBYTE(v61) = 1;
  }
  a1[96] = v61;
  a1[104] = 1;
LABEL_135:
  v62 = v100;
  if (!v100)
    goto LABEL_139;
  v63 = (unint64_t *)&v100->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
  {
LABEL_139:
    if ((SBYTE7(v88) & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_140;
  }
  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
  std::__shared_weak_count::__release_weak(v62);
  if (SBYTE7(v88) < 0)
LABEL_140:
    operator delete(v87.__vftable);
LABEL_141:
  v37 = 3;
  if (!a1[256])
    goto LABEL_144;
LABEL_142:
  if (a1[255] < 0)
    operator delete(v23->__vftable);
LABEL_144:
  if (a1[319] < 0)
  {
    operator delete(*v24);
    if (v37 != 3)
      goto LABEL_149;
LABEL_148:
    *((_QWORD *)a1 + 19) = v19;
    *(_QWORD *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
    return;
  }
  if (v37 == 3)
    goto LABEL_148;
LABEL_149:
  v65 = (char *)*((_QWORD *)a1 + 18);
  if (v65 == a1 + 120)
  {
    v66 = 4;
    v65 = a1 + 120;
  }
  else
  {
    if (!v65)
      goto LABEL_154;
    v66 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v65 + 8 * v66))();
LABEL_154:
  if (a1[104] && !a1[96])
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  v67 = *((_QWORD *)a1 + 54);
  do
  {
    v68 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v69)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v67)
  {
    v70 = (unint64_t *)(*((_QWORD *)a1 + 54) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      v72 = (std::__shared_weak_count *)*((_QWORD *)a1 + 54);
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v73 = *((_QWORD *)a1 + 52);
  if (v73)
  {
    v74 = (unint64_t *)(v73 + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      v76 = (std::__shared_weak_count *)*((_QWORD *)a1 + 52);
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v77 = *((_QWORD *)a1 + 51);
  if (v77)
  {
    v78 = (unint64_t *)(v77 + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      v80 = (std::__shared_weak_count *)*((_QWORD *)a1 + 51);
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  operator delete(a1);
}

void sub_18CCF2468(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  char *v34;
  void **v35;
  void **v36;
  uint64_t v37;

  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v37 - 176);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a34);
  if (a18 < 0)
    operator delete(__p);
  if (v34[256] && v34[255] < 0)
    operator delete(*v36);
  if (v34[319] < 0)
    operator delete(*v35);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCF2540()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCF2224);
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setStorefront(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;

  if (!*(_QWORD *)__p)
    goto LABEL_23;
  v2 = *((_QWORD *)__p + 56);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 56);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 49);
  if (!v6)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_11:
    if ((__p[367] & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (__p[367] < 0)
LABEL_12:
    operator delete(*((void **)__p + 43));
LABEL_13:
  v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 47);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p[256] && __p[255] < 0)
    operator delete(*((void **)__p + 29));
  if (__p[319] < 0)
    operator delete(*((void **)__p + 37));
LABEL_23:
  v12 = (char *)*((_QWORD *)__p + 18);
  if (v12 == __p + 120)
  {
    v13 = 4;
    v12 = __p + 120;
    goto LABEL_27;
  }
  if (v12)
  {
    v13 = 5;
LABEL_27:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  v14 = *((_QWORD *)__p + 54);
  do
  {
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v16)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v14)
  {
    v17 = (unint64_t *)(*((_QWORD *)__p + 54) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 54);
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v20 = *((_QWORD *)__p + 52);
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 52);
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v24 = *((_QWORD *)__p + 51);
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      v27 = (std::__shared_weak_count *)*((_QWORD *)__p + 51);
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [15]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"No storefront.", 14);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "networking", 10, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CCF29DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

std::runtime_error *AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setIdentifiers(std::runtime_error *result)
{
  std::runtime_error_vtbl *v1;
  std::runtime_error *v2;
  _QWORD *v3;
  const std::runtime_error *v4;
  char v5;
  std::runtime_error_vtbl *v6;
  std::runtime_error_vtbl *v7;
  void (__cdecl *v8)(std::runtime_error *__hidden);
  std::runtime_error_vtbl *p_imp;
  void (__cdecl *v10)(std::runtime_error *__hidden);
  std::runtime_error *v11;
  const char *imp;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error_vtbl *v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  std::string v26;

  v1 = result[27].__vftable;
  if (!LOBYTE(v1[3].what))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = &result[4].__vftable;
  v4 = (const std::runtime_error *)&v1->~runtime_error_0;
  v5 = (char)v1[3].~runtime_error_0;
  if (v5)
  {
    v6 = v4->__vftable;
    v4->__vftable = 0;
    *v3 = v6;
  }
  else
  {
    std::runtime_error::runtime_error(result + 4, v4);
    v2[5] = *(std::runtime_error *)&v1[1].~runtime_error;
    v7 = v1 + 2;
    v8 = v1[2].~runtime_error;
    v2[6].__imp_.__imp_ = (const char *)v8;
    p_imp = (std::runtime_error_vtbl *)&v2[6].__imp_;
    v2[4].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v2[6].__vftable = (std::runtime_error_vtbl *)v1[1].what;
    v10 = v1[2].~runtime_error_0;
    v2[7].__vftable = (std::runtime_error_vtbl *)v10;
    if (v10)
    {
      *((_QWORD *)v8 + 2) = p_imp;
      v1[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v7;
      v7->~runtime_error = 0;
      v1[2].~runtime_error_0 = 0;
    }
    else
    {
      v2[6].__vftable = p_imp;
    }
    v11 = (std::runtime_error *)v2[27].__vftable;
    *(std::runtime_error *)((char *)v2 + 120) = v11[4];
    v11[4].__vftable = 0;
    v11[4].__imp_.__imp_ = 0;
  }
  LOBYTE(v2[8].__imp_.__imp_) = v5;
  imp = v2[27].__imp_.__imp_;
  if (imp)
  {
    v13 = (unint64_t *)(imp + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      v15 = (std::__shared_weak_count *)v2[27].__imp_.__imp_;
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v16 = (std::__shared_weak_count *)v2[25].__vftable;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v2[24].__vftable;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v2[4].__vftable;
  if (!LOBYTE(v2[8].__imp_.__imp_))
  {
LABEL_34:
    ((void (*)(_QWORD *))v22->~runtime_error)(v3);
    goto LABEL_35;
  }
  if (v22)
  {
    HIBYTE(v2[23].__vftable) = 11;
    strcpy((char *)&v2[22], "iCloud-DSID");
    v23 = (*((uint64_t (**)(std::runtime_error_vtbl *))v22->~runtime_error + 4))(v22);
    std::to_string(&v26, *(_QWORD *)(v23 + 32));
    v24 = v2[25].__imp_.__imp_;
    *(std::string *)&v2[17].__vftable = v26;
    memset(&v26, 0, sizeof(v26));
    LOBYTE(v2[18].__imp_.__imp_) = 1;
    v25 = v24 + 240;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((_QWORD *)v24 + 30, (char *)&v2[22]);
    if (LOBYTE(v2[18].__imp_.__imp_))
    {
      std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v25, (uint64_t)&v2[22], (uint64_t)&v2[17]);
      if (LOBYTE(v2[18].__imp_.__imp_))
      {
        if (SHIBYTE(v2[18].__vftable) < 0)
          operator delete(v2[17].__vftable);
      }
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v26.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v2[23].__vftable) & 0x80000000) == 0)
        goto LABEL_31;
    }
    else if ((SHIBYTE(v2[23].__vftable) & 0x80000000) == 0)
    {
      goto LABEL_31;
    }
    operator delete(v2[22].__vftable);
LABEL_31:
    v22 = v2[4].__vftable;
    if (LOBYTE(v2[8].__imp_.__imp_))
    {
      *v3 = 0;
      if (v22)
        (*((void (**)(std::runtime_error_vtbl *))v22->~runtime_error + 1))(v22);
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_35:
  if (SHIBYTE(v2[12].__imp_.__imp_) < 0)
    operator delete((void *)v2[11].__imp_.__imp_);
  if (LOBYTE(v2[10].__imp_.__imp_))
  {
    if (SHIBYTE(v2[10].__vftable) < 0)
      operator delete(v2[9].__vftable);
  }
  BYTE2(v2[1].__vftable) = 1;
  v2[4].__vftable = (std::runtime_error_vtbl *)&v2[1];
  v2->__vftable = 0;
  return (std::runtime_error *)AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CCF2D08(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v6;

  if (*(char *)(v2 + 375) < 0)
    operator delete(*v4);
  v6 = *(_QWORD *)(v2 + 64);
  if (*(_BYTE *)(v2 + 136))
  {
    *v1 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    (*(void (**)(_QWORD *))v6)(v1);
  }
  AMSCore::AccountIdentity::~AccountIdentity(v3);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setIdentifiers(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;

  if (!*(_QWORD *)__p)
    goto LABEL_21;
  v2 = *((_QWORD *)__p + 55);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 55);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 50);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 48);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if ((__p[207] & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  if (__p[207] < 0)
LABEL_17:
    operator delete(*((void **)__p + 23));
LABEL_18:
  if (__p[168] && __p[167] < 0)
    operator delete(*((void **)__p + 18));
LABEL_21:
  v12 = (char *)*((_QWORD *)__p + 7);
  if (v12 == __p + 32)
  {
    v13 = 4;
    v12 = __p + 32;
    goto LABEL_25;
  }
  if (v12)
  {
    v13 = 5;
LABEL_25:
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
  }
  v14 = *((_QWORD *)__p + 53);
  do
  {
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v16)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v14)
  {
    v17 = (unint64_t *)(*((_QWORD *)__p + 53) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 53);
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v20 = *((_QWORD *)__p + 52);
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 52);
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(__p);
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setCookies(uint64_t a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

void sub_18CCF2FDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::string *a20,uint64_t a21,uint64_t a22,std::runtime_error *a23,std::runtime_error a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,std::runtime_error a30,__int128 a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  _DWORD *v59;
  unint64_t v60;
  std::string *v61;
  uint64_t **v62;
  std::runtime_error *v63;
  std::string *v64;
  uint64_t v65;
  std::string *v66;
  std::runtime_error *v67;
  std::runtime_error *v68;
  std::runtime_error *v69;
  uint64_t v70;
  uint64_t v71;
  std::runtime_error *v72;
  std::string *v73;
  const std::runtime_error *v74;
  char v75;
  const char **v76;
  std::__libcpp_refstring *p_imp;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  const std::runtime_error *v82;
  std::runtime_error_vtbl *v83;
  uint64_t v84;
  std::string *v85;
  std::runtime_error *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  unint64_t *p_shared_owners;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::runtime_error v97;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::runtime_error *v102;
  const std::runtime_error *v103;
  char v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t *i;
  int v121;
  uint64_t v122;
  std::string::size_type v123;
  const std::string::value_type *v124;
  std::string *v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int **v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::runtime_error v138;
  unint64_t *v140;
  unint64_t v141;
  std::runtime_error_vtbl *v142;
  std::runtime_error *v143;
  std::runtime_error *v144;
  void **p_data;
  const std::runtime_error *v146;
  char v147;
  std::runtime_error_vtbl *v148;
  std::runtime_error_vtbl *v149;
  void (__cdecl *v150)(std::runtime_error *__hidden);
  unint64_t v151;
  void (__cdecl *v152)(std::runtime_error *__hidden);
  std::__shared_weak_count *v153;
  void **v154;
  const std::runtime_error *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  std::runtime_error_vtbl *v162;
  _QWORD *v163;
  std::runtime_error_vtbl *v164;
  uint64_t v165;
  std::runtime_error v166;
  unint64_t *v168;
  unint64_t v169;
  std::runtime_error_vtbl *v170;
  const std::runtime_error *v171;
  char v172;
  const char **v173;
  std::__libcpp_refstring *p_what;
  std::runtime_error_vtbl *v175;
  void (__cdecl *v176)(std::runtime_error *__hidden);
  unint64_t v177;
  void (__cdecl *v178)(std::runtime_error *__hidden);
  const std::runtime_error *v179;
  const char *(__cdecl *what)(const std::runtime_error *__hidden);
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  __int128 v191;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  const std::runtime_error *v196;
  char v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  int v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int **v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int **v220;
  unint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t *v226;
  void *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unsigned int *v231;
  unsigned int **v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int *v236;
  unsigned int **v237;
  unint64_t v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  unsigned int *v243;
  unsigned int **v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int **v249;
  unint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  char *v257;
  uint64_t *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  BOOL v262;
  __n128 v263;
  uint64_t *v264;
  _QWORD *v265;
  __int128 v266;
  __int128 v267;
  int v268;
  void **v269;
  void *v270;
  std::runtime_error_vtbl *v271;
  void (**v272)();
  uint64_t *v273;
  std::runtime_error_vtbl *v274;
  void **v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  __int128 v282;
  unsigned int *v283;
  unsigned int **v284;
  unint64_t v285;
  uint64_t v286;
  unsigned int *v287;
  unsigned int **v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  int v298;
  std::string *v299;
  _DWORD *v300;
  std::runtime_error *v301;
  std::runtime_error *v302;
  uint64_t *v303;
  __int128 *v304;
  std::runtime_error_vtbl **v305;
  uint64_t v306;
  std::runtime_error *v307;
  std::runtime_error *v308;
  const std::runtime_error *v309;
  const std::runtime_error *v310;
  std::string *v311;
  _BYTE *v312;
  _QWORD *v313;
  std::runtime_error *v314;
  std::runtime_error v315;
  __int128 v316;
  unsigned int **v317;
  unsigned int *v318;
  uint64_t v319;
  __int128 v320;
  std::runtime_error v321;
  __int128 v322;
  unsigned int **v323;
  unsigned int *v324;
  uint64_t v325;
  __int128 v326;
  unsigned __int8 v327;
  __int128 v328;
  __int128 v329;

  v300 = v59;
  v308 = v68;
  v71 = *(_QWORD *)(v60 + 1088);
  if (!*(_BYTE *)(v71 + 88))
    goto LABEL_343;
  v72 = v69;
  v73 = v61;
  v74 = (const std::runtime_error *)(v71 + 8);
  v75 = *(_BYTE *)(v71 + 80);
  if (v75)
  {
    *(_QWORD *)(v60 + 456) = *(_QWORD *)(v71 + 8);
    v76 = (const char **)(v60 + 464);
    p_imp = (std::__libcpp_refstring *)(v71 + 16);
  }
  else
  {
    v72 = std::runtime_error::runtime_error(v72, v74);
    *(_OWORD *)(v60 + 472) = *(_OWORD *)(v71 + 24);
    *(_QWORD *)(v60 + 456) = off_1E2521330;
    v78 = (_QWORD *)(v71 + 48);
    v79 = *(_QWORD *)(v71 + 48);
    v80 = v60 + 496;
    *(_QWORD *)(v60 + 488) = *(_QWORD *)(v71 + 40);
    *(_QWORD *)(v60 + 496) = v79;
    v81 = *(_QWORD *)(v71 + 56);
    *(_QWORD *)(v60 + 504) = v81;
    if (v81)
    {
      *(_QWORD *)(v79 + 16) = v80;
      *(_QWORD *)(v71 + 40) = v78;
      *v78 = 0;
      *(_QWORD *)(v71 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v60 + 488) = v80;
    }
    v82 = *(const std::runtime_error **)(v60 + 1088);
    v83 = v82[4].__vftable;
    v74 = v82 + 4;
    *(_QWORD *)(v60 + 512) = v83;
    v76 = (const char **)(v60 + 520);
    p_imp = &v74->__imp_;
  }
  *v76 = p_imp->__imp_;
  v74->__vftable = 0;
  v74->__imp_.__imp_ = 0;
  *(_BYTE *)(v60 + 528) = v75;
  v84 = *(_QWORD *)(v60 + 1096);
  v85 = v73;
  v86 = v72;
  if (v84)
  {
    v87 = (unint64_t *)(v84 + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      v89 = *(std::__shared_weak_count **)(v60 + 1096);
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v90 = *(std::__shared_weak_count **)(v60 + 544);
  if (v90)
  {
    p_shared_owners = (unint64_t *)&v90->__shared_owners_;
    do
      v92 = __ldaxr(p_shared_owners);
    while (__stlxr(v92 - 1, p_shared_owners));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = *(std::__shared_weak_count **)(v60 + 968);
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (!*(_BYTE *)(v60 + 528))
  {
    std::runtime_error::runtime_error(&v321, v86);
    v322 = *(_OWORD *)(v60 + 472);
    v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v110 = *(_QWORD *)(v60 + 496);
    v323 = *(unsigned int ***)(v60 + 488);
    v324 = (unsigned int *)v110;
    v325 = *(_QWORD *)(v60 + 504);
    if (v325)
    {
      *(_QWORD *)(v110 + 16) = &v324;
      *(_QWORD *)(v60 + 488) = v60 + 496;
      *(_QWORD *)(v60 + 496) = 0;
      *(_QWORD *)(v60 + 504) = 0;
    }
    else
    {
      v323 = &v324;
    }
    v326 = *(_OWORD *)(v60 + 512);
    *(_QWORD *)(v60 + 520) = 0;
    *(_QWORD *)(v60 + 512) = 0;
    v327 = 1;
    std::runtime_error::runtime_error(&v315, &v321);
    v316 = v322;
    v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v317 = v323;
    v318 = v324;
    v319 = v325;
    if (v325)
    {
      *((_QWORD *)v324 + 2) = &v318;
      v323 = &v324;
      v324 = 0;
      v325 = 0;
    }
    else
    {
      v317 = &v318;
    }
    v320 = v326;
    v326 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)(v70 - 160), &v315);
    v328 = v316;
    v288 = v317;
    v287 = v318;
    *(_QWORD *)(v70 - 160) = off_1E2521330;
    *(_QWORD *)(v70 - 128) = v288;
    *(_QWORD *)(v70 - 120) = v287;
    v289 = (_QWORD *)(v70 - 120);
    v290 = v319;
    *(_QWORD *)(v70 - 112) = v319;
    if (v290)
    {
      *((_QWORD *)v287 + 2) = v289;
      v287 = 0;
      v317 = &v318;
      v318 = 0;
      v319 = 0;
    }
    else
    {
      *(_QWORD *)(v70 - 128) = v289;
    }
    v329 = v320;
    v320 = 0uLL;
    v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v317, v287);
    MEMORY[0x18D7898AC](&v315);
    if (*(_BYTE *)(v60 + 104))
    {
      if (!*(_BYTE *)(v60 + 96))
        (**(void (***)(uint64_t))(v60 + 24))(v60 + 24);
      *(_BYTE *)(v60 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), (const std::runtime_error *)(v70 - 160));
    v292 = *(_QWORD *)(v70 - 128);
    v291 = *(_QWORD *)(v70 - 120);
    *(_QWORD *)(v60 + 64) = v291;
    v293 = v60 + 64;
    *(_OWORD *)(v60 + 40) = *(_OWORD *)(v70 - 144);
    *(_QWORD *)(v60 + 24) = off_1E2521330;
    *(_QWORD *)(v60 + 56) = v292;
    v294 = *(_QWORD *)(v70 - 112);
    *(_QWORD *)(v60 + 72) = v294;
    if (v294)
    {
      *(_QWORD *)(v291 + 16) = v293;
      v291 = 0;
      *(_QWORD *)(v70 - 128) = v289;
      *v289 = 0;
      *(_QWORD *)(v70 - 112) = 0;
    }
    else
    {
      *(_QWORD *)(v60 + 56) = v293;
    }
    *(_OWORD *)(v60 + 80) = v329;
    *(_QWORD *)(v70 - 104) = 0;
    *(_QWORD *)(v70 - 96) = 0;
    *(_BYTE *)(v60 + 96) = 0;
    *(_BYTE *)(v60 + 104) = 1;
    *(_QWORD *)(v70 - 160) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v70 - 128, (unsigned int *)v291);
    MEMORY[0x18D7898AC](v70 - 160);
    if (v327)
    {
      v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v295 = (std::__shared_weak_count *)*((_QWORD *)&v326 + 1);
      if (*((_QWORD *)&v326 + 1))
      {
        v296 = (unint64_t *)(*((_QWORD *)&v326 + 1) + 8);
        do
          v297 = __ldaxr(v296);
        while (__stlxr(v297 - 1, v296));
        if (!v297)
        {
          ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
          std::__shared_weak_count::__release_weak(v295);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v323, v324);
      MEMORY[0x18D7898AC](&v321);
    }
    if (!*(_BYTE *)(v60 + 528))
      goto LABEL_294;
    goto LABEL_302;
  }
  v96 = *(_QWORD *)(v60 + 456);
  AMSCore::URL::URL(v64, (const AMSCore::URL *)(*(_QWORD *)(v60 + 1040) + 80));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v96 + 48))(v96, v64);
  v97 = *v67;
  *(std::runtime_error *)(v60 + 1104) = *v67;
  v67->__vftable = 0;
  v67->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)&v97.__vftable[4]))
  {
    *v312 = 1;
    v99 = (unint64_t *)(*(_QWORD *)(v60 + 1104) + 96);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v60, v99));
    if (!v100)
      return;
  }
  v307 = v86;
  v101 = *(_QWORD *)(v60 + 1104);
  if (!*(_BYTE *)(v101 + 88))
    goto LABEL_343;
  v299 = v85;
  v302 = v67;
  v102 = v63;
  v103 = (const std::runtime_error *)(v101 + 8);
  v104 = *(_BYTE *)(v101 + 80);
  v105 = (_QWORD *)(v60 + 792);
  if (v104)
  {
    *v314 = *(std::runtime_error *)(v101 + 8);
    *v105 = *(_QWORD *)(v101 + 24);
    *(_QWORD *)(v101 + 16) = 0;
    *(_QWORD *)(v101 + 24) = 0;
    v103->__vftable = 0;
    v86 = v307;
  }
  else
  {
    std::runtime_error::runtime_error(v314, v103);
    *(_OWORD *)v105 = *(_OWORD *)(v101 + 24);
    *(_QWORD *)(v60 + 776) = off_1E2521330;
    v106 = (_QWORD *)(v101 + 48);
    v107 = *(_QWORD *)(v101 + 48);
    *(_QWORD *)(v60 + 808) = *(_QWORD *)(v101 + 40);
    v108 = v60 + 816;
    *(_QWORD *)(v60 + 816) = v107;
    v109 = *(_QWORD *)(v101 + 56);
    *(_QWORD *)(v60 + 824) = v109;
    if (v109)
    {
      *(_QWORD *)(v107 + 16) = v108;
      *(_QWORD *)(v101 + 40) = v106;
      *v106 = 0;
      *(_QWORD *)(v101 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v60 + 808) = v108;
    }
    v86 = v307;
    v111 = *(_QWORD *)(v60 + 1104);
    *(_OWORD *)(v60 + 832) = *(_OWORD *)(v111 + 64);
    *(_QWORD *)(v111 + 64) = 0;
    *(_QWORD *)(v111 + 72) = 0;
  }
  *(_BYTE *)(v60 + 848) = v104;
  v112 = *(_QWORD *)(v60 + 1112);
  if (v112)
  {
    v113 = (unint64_t *)(v112 + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      v115 = *(std::__shared_weak_count **)(v60 + 1112);
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v116 = *(std::__shared_weak_count **)(v60 + 544);
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)v64);
  if (!*(_BYTE *)(v60 + 848))
  {
    std::runtime_error::runtime_error(&v321, v314);
    v322 = *(_OWORD *)v105;
    v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v126 = *(_QWORD *)(v60 + 816);
    v323 = *(unsigned int ***)(v60 + 808);
    v324 = (unsigned int *)v126;
    v325 = *(_QWORD *)(v60 + 824);
    if (v325)
    {
      *(_QWORD *)(v126 + 16) = &v324;
      *(_QWORD *)(v60 + 808) = v60 + 816;
      *(_QWORD *)(v60 + 816) = 0;
      *(_QWORD *)(v60 + 824) = 0;
    }
    else
    {
      v323 = &v324;
    }
    v326 = *(_OWORD *)(v60 + 832);
    *(_QWORD *)(v60 + 840) = 0;
    *(_QWORD *)(v60 + 832) = 0;
    v327 = 1;
    std::runtime_error::runtime_error(&v315, &v321);
    v316 = v322;
    v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v317 = v323;
    v318 = v324;
    v319 = v325;
    if (v325)
    {
      *((_QWORD *)v324 + 2) = &v318;
      v323 = &v324;
      v324 = 0;
      v325 = 0;
    }
    else
    {
      v317 = &v318;
    }
    v320 = v326;
    v326 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)(v70 - 160), &v315);
    v328 = v316;
    v128 = v317;
    v127 = v318;
    *(_QWORD *)(v70 - 160) = off_1E2521330;
    *(_QWORD *)(v70 - 128) = v128;
    *(_QWORD *)(v70 - 120) = v127;
    v129 = (_QWORD *)(v70 - 120);
    v130 = v319;
    *(_QWORD *)(v70 - 112) = v319;
    if (v130)
    {
      *((_QWORD *)v127 + 2) = v129;
      v127 = 0;
      v317 = &v318;
      v318 = 0;
      v319 = 0;
    }
    else
    {
      *(_QWORD *)(v70 - 128) = v129;
    }
    v329 = v320;
    v320 = 0uLL;
    v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v317, v127);
    MEMORY[0x18D7898AC](&v315);
    v86 = v307;
    if (*(_BYTE *)(v60 + 104))
    {
      if (!*(_BYTE *)(v60 + 96))
        (**(void (***)(uint64_t))(v60 + 24))(v60 + 24);
      *(_BYTE *)(v60 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), (const std::runtime_error *)(v70 - 160));
    v132 = *(_QWORD *)(v70 - 128);
    v131 = *(_QWORD *)(v70 - 120);
    *(_QWORD *)(v60 + 64) = v131;
    v133 = v60 + 64;
    *(_OWORD *)(v60 + 40) = *(_OWORD *)(v70 - 144);
    *(_QWORD *)(v60 + 24) = off_1E2521330;
    *(_QWORD *)(v60 + 56) = v132;
    v134 = *(_QWORD *)(v70 - 112);
    *(_QWORD *)(v60 + 72) = v134;
    if (v134)
    {
      *(_QWORD *)(v131 + 16) = v133;
      v131 = 0;
      *(_QWORD *)(v70 - 128) = v129;
      *v129 = 0;
      *(_QWORD *)(v70 - 112) = 0;
    }
    else
    {
      *(_QWORD *)(v60 + 56) = v133;
    }
    *(_OWORD *)(v60 + 80) = v329;
    *(_QWORD *)(v70 - 104) = 0;
    *(_QWORD *)(v70 - 96) = 0;
    *(_BYTE *)(v60 + 96) = 0;
    *(_BYTE *)(v60 + 104) = 1;
    *(_QWORD *)(v70 - 160) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v70 - 128, (unsigned int *)v131);
    MEMORY[0x18D7898AC](v70 - 160);
    if (v327)
    {
      v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v135 = (std::__shared_weak_count *)*((_QWORD *)&v326 + 1);
      if (*((_QWORD *)&v326 + 1))
      {
        v136 = (unint64_t *)(*((_QWORD *)&v326 + 1) + 8);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v323, v324);
      MEMORY[0x18D7898AC](&v321);
    }
    goto LABEL_288;
  }
  v119 = *(uint64_t **)(v60 + 776);
  for (i = *(uint64_t **)(v60 + 784); v119 != i; ++v119)
    std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::unique_ptr<AMSCore::HTTPCookie>&&>>(v62, (const void **)(*v119 + 48), *v119 + 48, v119);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v60 + 1056) + 96))(*(_QWORD *)(v60 + 1056)) & 1) != 0)
  {
LABEL_250:
    v315.__vftable = 0;
    v315.__imp_.__imp_ = 0;
    *(_QWORD *)&v316 = 0;
    if (!*(_QWORD *)(v60 + 904) || (v256 = *(_QWORD **)(v60 + 888), v256 == (_QWORD *)(v60 + 896)))
    {
      v257 = 0;
    }
    else
    {
      v257 = 0;
      do
      {
        v258 = v256 + 7;
        if ((unint64_t)v257 >= (unint64_t)v316)
        {
          v257 = (char *)std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v315, v258);
        }
        else
        {
          v259 = *v258;
          *v258 = 0;
          *(_QWORD *)v257 = v259;
          v257 += 8;
        }
        v315.__imp_.__imp_ = v257;
        v260 = (_QWORD *)v256[1];
        if (v260)
        {
          do
          {
            v261 = v260;
            v260 = (_QWORD *)*v260;
          }
          while (v260);
        }
        else
        {
          do
          {
            v261 = (_QWORD *)v256[2];
            v262 = *v261 == (_QWORD)v256;
            v256 = v261;
          }
          while (!v262);
        }
        v256 = v261;
      }
      while (v261 != (_QWORD *)(v60 + 896));
    }
    v263.n128_f64[0] = AMSCore::CookieUtils::getRequestHeaderFields(v70 - 160, (uint64_t *)&v315);
    v264 = *(uint64_t **)(v70 - 144);
    if (v264)
    {
      v265 = (_QWORD *)(*(_QWORD *)(v60 + 1040) + 240);
      do
      {
        while (1)
        {
          if (*((char *)v264 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v66, (const std::string::value_type *)v264[2], v264[3]);
          }
          else
          {
            v266 = *((_OWORD *)v264 + 1);
            v66->__r_.__value_.__r.__words[2] = v264[4];
            *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v266;
          }
          v267 = *(_OWORD *)(v264 + 5);
          *(_QWORD *)(v65 + 16) = v264[7];
          *(_OWORD *)v65 = v267;
          v264[6] = 0;
          v264[7] = 0;
          v264[5] = 0;
          *(_BYTE *)(v60 + 880) = 1;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v265, (char *)v66);
          if (*(_BYTE *)(v60 + 880))
          {
            std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v265, (uint64_t)v66, v65);
            if (*(_BYTE *)(v60 + 880))
            {
              if (*(char *)(v60 + 879) < 0)
                operator delete(*(void **)v65);
            }
          }
          if (*(char *)(v60 + 935) < 0)
            break;
          v264 = (uint64_t *)*v264;
          if (!v264)
            goto LABEL_276;
        }
        operator delete(v66->__r_.__value_.__l.__data_);
        v264 = (uint64_t *)*v264;
      }
      while (v264);
    }
LABEL_276:
    v327 = 1;
    if (*(_BYTE *)(v60 + 104) && !*(_BYTE *)(v60 + 96))
    {
      (**(void (***)(uint64_t, __n128))(v60 + 24))(v60 + 24, v263);
      v268 = v327;
      *(_BYTE *)(v60 + 104) = 0;
      if (!v268)
      {
        std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), &v321);
        v282 = v322;
        v284 = v323;
        v283 = v324;
        *(_QWORD *)(v60 + 64) = v324;
        v285 = v60 + 64;
        *(_OWORD *)(v60 + 40) = v282;
        *(_QWORD *)(v60 + 24) = off_1E2521330;
        *(_QWORD *)(v60 + 56) = v284;
        v286 = v325;
        *(_QWORD *)(v60 + 72) = v325;
        if (v286)
        {
          *((_QWORD *)v283 + 2) = v285;
          v323 = &v324;
          v324 = 0;
          v325 = 0;
        }
        else
        {
          *(_QWORD *)(v60 + 56) = v285;
        }
        *(_OWORD *)(v60 + 80) = v326;
        v326 = 0uLL;
        v298 = v327;
        *(_BYTE *)(v60 + 96) = 0;
        *(_BYTE *)(v60 + 104) = 1;
        if (!v298)
          ((void (*)(std::runtime_error *))v321.~runtime_error)(&v321);
LABEL_280:
        v269 = *(void ***)(v70 - 144);
        if (!v269)
        {
LABEL_281:
          v270 = *(void **)(v70 - 160);
          *(_QWORD *)(v70 - 160) = 0;
          if (v270)
            operator delete(v270);
          v271 = v315.__vftable;
          if (v315.__vftable)
          {
            if (v257 != (char *)v315.__vftable)
            {
              do
              {
                v257 -= 8;
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)v257, 0);
              }
              while (v257 != (char *)v271);
              v257 = (char *)v315.__vftable;
            }
            v315.__imp_.__imp_ = (const char *)v271;
            operator delete(v257);
          }
          goto LABEL_288;
        }
        while (1)
        {
          v275 = (void **)*v269;
          if (*((char *)v269 + 63) < 0)
          {
            operator delete(v269[5]);
            if (*((char *)v269 + 39) < 0)
              goto LABEL_299;
          }
          else if (*((char *)v269 + 39) < 0)
          {
LABEL_299:
            operator delete(v269[2]);
          }
          operator delete(v269);
          v269 = v275;
          if (!v275)
            goto LABEL_281;
        }
      }
    }
    else
    {
      LOBYTE(v268) = 1;
    }
    *(_BYTE *)(v60 + 96) = v268;
    *(_BYTE *)(v60 + 104) = 1;
    goto LABEL_280;
  }
  v121 = *(char *)(v60 + 1128);
  v122 = *(_QWORD *)(v60 + 1008);
  v123 = *(_QWORD *)(v60 + 1080);
  v124 = *(const std::string::value_type **)(v60 + 1072);
  if (v121 < 0)
  {
    v125 = v299;
    std::string::__init_copy_ctor_external(v299, v124, v123);
  }
  else
  {
    *(_QWORD *)(v60 + 936) = v124;
    *(_QWORD *)(v60 + 944) = v123;
    v125 = v299;
    *(_DWORD *)(v60 + 952) = *v300;
    *(_DWORD *)(v60 + 955) = *(_DWORD *)((char *)v300 + 3);
    *(_BYTE *)(v60 + 959) = v121;
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v122 + 48))(v122, v125);
  v138 = v302[10];
  v63->__vftable = 0;
  v63->__imp_.__imp_ = 0;
  *v302 = v138;
  if (!atomic_load((unint64_t *)&v138.__vftable[4]))
  {
    *v312 = 2;
    v140 = (unint64_t *)&v302->__vftable[4];
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v60, v140));
    if (!v141)
      return;
  }
  v142 = v302->__vftable;
  if (!LOBYTE(v302->__vftable[3].what))
    goto LABEL_343;
  v143 = v308;
  v144 = v86;
  p_data = (void **)&v125->__r_.__value_.__l.__data_;
  v146 = (const std::runtime_error *)&v142->~runtime_error_0;
  v147 = (char)v142[3].~runtime_error_0;
  if (v147)
  {
    v148 = v146->__vftable;
    v146->__vftable = 0;
    v308->__vftable = v148;
  }
  else
  {
    v143 = std::runtime_error::runtime_error(v308, v146);
    *(_OWORD *)(v60 + 632) = *(_OWORD *)&v142[1].~runtime_error;
    *(_QWORD *)(v60 + 616) = off_1E2521330;
    v149 = v142 + 2;
    v150 = v142[2].~runtime_error;
    *(_QWORD *)(v60 + 648) = v142[1].what;
    v151 = v60 + 656;
    *(_QWORD *)(v60 + 656) = v150;
    v152 = v142[2].~runtime_error_0;
    *(_QWORD *)(v60 + 664) = v152;
    if (v152)
    {
      *((_QWORD *)v150 + 2) = v151;
      v142[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v149;
      v149->~runtime_error = 0;
      v142[2].~runtime_error_0 = 0;
    }
    else
    {
      *(_QWORD *)(v60 + 648) = v151;
    }
    *(_OWORD *)(v60 + 672) = *(_OWORD *)&v142[2].what;
    v142[2].what = 0;
    v142[3].~runtime_error = 0;
  }
  *(_BYTE *)(v60 + 688) = v147;
  v153 = *(std::__shared_weak_count **)(v60 + 544);
  v154 = p_data;
  v86 = v144;
  v155 = v143;
  if (v153)
  {
    v156 = (unint64_t *)&v153->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v158 = *(std::__shared_weak_count **)(v60 + 704);
  if (!v158)
    goto LABEL_97;
  v159 = (unint64_t *)&v158->__shared_owners_;
  do
    v160 = __ldaxr(v159);
  while (__stlxr(v160 - 1, v159));
  if (!v160)
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
    if ((*(char *)(v60 + 959) & 0x80000000) == 0)
    {
LABEL_98:
      if (*(_BYTE *)(v60 + 688))
        goto LABEL_99;
      goto LABEL_103;
    }
  }
  else
  {
LABEL_97:
    if ((*(char *)(v60 + 959) & 0x80000000) == 0)
      goto LABEL_98;
  }
  operator delete(*v154);
  if (*(_BYTE *)(v60 + 688))
  {
LABEL_99:
    v161 = *v303;
    v162 = v155->__vftable;
    *v305 = v155->__vftable;
    if (v162)
    {
      v163 = (_QWORD *)operator new();
      v164 = v155->__vftable;
      *v163 = &off_1E2523180;
      v163[1] = 0;
      v163[2] = 0;
      v163[3] = v164;
    }
    else
    {
      v163 = 0;
    }
    *(_QWORD *)(v60 + 1000) = v163;
    *(_QWORD *)(v60 + 616) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 40))(v161);
    v166 = *(std::runtime_error *)(v60 + 976);
    *v313 = 0;
    v313[1] = 0;
    *v302 = v166;
    if (!atomic_load((unint64_t *)&v166.__vftable[4]))
    {
      *v312 = 3;
      v168 = (unint64_t *)&v302->__vftable[4];
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v60, v168));
      if (!v169)
        return;
    }
    v170 = v302->__vftable;
    if (!LOBYTE(v302->__vftable[3].what))
      goto LABEL_343;
    v171 = (const std::runtime_error *)&v170->~runtime_error_0;
    v172 = (char)v170[3].~runtime_error_0;
    if (v172)
    {
      *(_QWORD *)(v60 + 696) = v170->~runtime_error_0;
      v173 = (const char **)(v60 + 704);
      p_what = (std::__libcpp_refstring *)&v170->what;
    }
    else
    {
      std::runtime_error::runtime_error(v102, v171);
      *(_OWORD *)(v60 + 712) = *(_OWORD *)&v170[1].~runtime_error;
      *(_QWORD *)(v60 + 696) = off_1E2521330;
      v175 = v170 + 2;
      v176 = v170[2].~runtime_error;
      *(_QWORD *)(v60 + 728) = v170[1].what;
      v177 = v60 + 736;
      *(_QWORD *)(v60 + 736) = v176;
      v178 = v170[2].~runtime_error_0;
      *(_QWORD *)(v60 + 744) = v178;
      if (v178)
      {
        *((_QWORD *)v176 + 2) = v177;
        v170[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v175;
        v175->~runtime_error = 0;
        v170[2].~runtime_error_0 = 0;
      }
      else
      {
        *(_QWORD *)(v60 + 728) = v177;
      }
      what = v170[2].what;
      v179 = (const std::runtime_error *)&v170[2].what;
      *(_QWORD *)(v60 + 752) = what;
      v173 = (const char **)(v60 + 760);
      p_what = &v179->__imp_;
      v171 = v179;
    }
    *v173 = p_what->__imp_;
    v171->__vftable = 0;
    v171->__imp_.__imp_ = 0;
    *(_BYTE *)(v60 + 768) = v172;
    v181 = *(std::__shared_weak_count **)(v60 + 544);
    if (v181)
    {
      v182 = (unint64_t *)&v181->__shared_owners_;
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    v184 = *(std::__shared_weak_count **)(v60 + 984);
    if (v184)
    {
      v185 = (unint64_t *)&v184->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v310 = v155;
    v187 = *(std::__shared_weak_count **)(v60 + 1000);
    if (!v187)
      goto LABEL_346;
    v188 = (unint64_t *)&v187->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
      if (*(_BYTE *)(v60 + 768))
        goto LABEL_132;
    }
    else
    {
LABEL_346:
      if (*(_BYTE *)(v60 + 768))
      {
LABEL_132:
        v190 = *(_QWORD *)(v60 + 696);
        AMSCore::URL::URL(v311, (const AMSCore::URL *)(*(_QWORD *)(v60 + 1040) + 80));
        (*(void (**)(uint64_t))(*(_QWORD *)v190 + 48))(v190);
        v191 = *v304;
        *(_QWORD *)v304 = 0;
        *((_QWORD *)v304 + 1) = 0;
        *(_OWORD *)v313 = v191;
        if (!atomic_load((unint64_t *)(v191 + 96)))
        {
          *v312 = 4;
          v193 = (unint64_t *)(*v313 + 96);
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v60, v193));
          if (!v194)
            return;
        }
        v301 = v102;
        v195 = *v313;
        if (*(_BYTE *)(*v313 + 88))
        {
          v196 = (const std::runtime_error *)(v195 + 8);
          v197 = *(_BYTE *)(v195 + 80);
          v198 = (_QWORD *)(v60 + 552);
          if (v197)
          {
            *v302 = *(std::runtime_error *)(v195 + 8);
            *v198 = *(_QWORD *)(v195 + 24);
            *(_QWORD *)(v195 + 16) = 0;
            *(_QWORD *)(v195 + 24) = 0;
            v196->__vftable = 0;
          }
          else
          {
            std::runtime_error::runtime_error(v302, v196);
            *(_OWORD *)v198 = *(_OWORD *)(v195 + 24);
            *(_QWORD *)(v60 + 536) = off_1E2521330;
            v199 = (_QWORD *)(v195 + 48);
            v200 = *(_QWORD *)(v195 + 48);
            *(_QWORD *)(v60 + 568) = *(_QWORD *)(v195 + 40);
            v201 = v60 + 576;
            *(_QWORD *)(v60 + 576) = v200;
            v202 = *(_QWORD *)(v195 + 56);
            *(_QWORD *)(v60 + 584) = v202;
            if (v202)
            {
              *(_QWORD *)(v200 + 16) = v201;
              *(_QWORD *)(v195 + 40) = v199;
              *v199 = 0;
              *(_QWORD *)(v195 + 56) = 0;
            }
            else
            {
              *(_QWORD *)(v60 + 568) = v201;
            }
            *(_OWORD *)(v60 + 592) = *(_OWORD *)(v195 + 64);
            *(_QWORD *)(v195 + 64) = 0;
            *(_QWORD *)(v195 + 72) = 0;
          }
          *(_BYTE *)(v60 + 608) = v197;
          v204 = *(std::__shared_weak_count **)(v60 + 984);
          if (v204)
          {
            v205 = (unint64_t *)&v204->__shared_owners_;
            do
              v206 = __ldaxr(v205);
            while (__stlxr(v206 - 1, v205));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
            }
          }
          v207 = *(std::__shared_weak_count **)(v60 + 1032);
          if (v207)
          {
            v208 = (unint64_t *)&v207->__shared_owners_;
            do
              v209 = __ldaxr(v208);
            while (__stlxr(v209 - 1, v208));
            if (!v209)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
            }
          }
          AMSCore::URL::~URL((AMSCore::URL *)v311);
          if (*(_BYTE *)(v60 + 608))
          {
            v210 = *(uint64_t **)(v60 + 536);
            v211 = *(uint64_t **)(v60 + 544);
            if (v210 == v211)
            {
              v212 = 0;
              goto LABEL_186;
            }
            do
            {
              std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::unique_ptr<AMSCore::HTTPCookie>&&>>(v62, (const void **)(*v210 + 48), *v210 + 48, v210);
              ++v210;
            }
            while (v210 != v211);
            v212 = 0;
          }
          else
          {
            std::runtime_error::runtime_error(&v321, v302);
            v322 = *(_OWORD *)v198;
            v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v213 = *(_QWORD *)(v60 + 576);
            v323 = *(unsigned int ***)(v60 + 568);
            v324 = (unsigned int *)v213;
            v325 = *(_QWORD *)(v60 + 584);
            if (v325)
            {
              *(_QWORD *)(v213 + 16) = &v324;
              *(_QWORD *)(v60 + 568) = v60 + 576;
              *(_QWORD *)(v60 + 576) = 0;
              *(_QWORD *)(v60 + 584) = 0;
            }
            else
            {
              v323 = &v324;
            }
            v326 = *(_OWORD *)(v60 + 592);
            *(_QWORD *)(v60 + 600) = 0;
            *(_QWORD *)(v60 + 592) = 0;
            v327 = 1;
            std::runtime_error::runtime_error((std::runtime_error *)(v70 - 160), &v321);
            v328 = v322;
            v215 = v323;
            v214 = v324;
            *(_QWORD *)(v70 - 160) = off_1E2521330;
            *(_QWORD *)(v70 - 128) = v215;
            *(_QWORD *)(v70 - 120) = v214;
            v216 = (_QWORD *)(v70 - 120);
            v217 = v325;
            *(_QWORD *)(v70 - 112) = v325;
            if (v217)
            {
              *((_QWORD *)v214 + 2) = v216;
              v323 = &v324;
              v324 = 0;
              v325 = 0;
            }
            else
            {
              *(_QWORD *)(v70 - 128) = v216;
            }
            v329 = v326;
            v326 = 0uLL;
            std::runtime_error::runtime_error(&v315, (const std::runtime_error *)(v70 - 160));
            v316 = *(_OWORD *)(v70 - 144);
            v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v218 = *(_QWORD *)(v70 - 120);
            v317 = *(unsigned int ***)(v70 - 128);
            v318 = (unsigned int *)v218;
            v319 = *(_QWORD *)(v70 - 112);
            if (v319)
            {
              *(_QWORD *)(v218 + 16) = &v318;
              v218 = 0;
              *(_QWORD *)(v70 - 128) = v216;
              *v216 = 0;
              *(_QWORD *)(v70 - 112) = 0;
            }
            else
            {
              v317 = &v318;
            }
            v320 = v329;
            *(_QWORD *)(v70 - 104) = 0;
            *(_QWORD *)(v70 - 96) = 0;
            *(_QWORD *)(v70 - 160) = off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v70 - 128, (unsigned int *)v218);
            MEMORY[0x18D7898AC](v70 - 160);
            if (*(_BYTE *)(v60 + 104))
            {
              if (!*(_BYTE *)(v60 + 96))
                (**(void (***)(uint64_t))(v60 + 24))(v60 + 24);
              *(_BYTE *)(v60 + 104) = 0;
            }
            std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), &v315);
            v220 = v317;
            v219 = v318;
            *(_QWORD *)(v60 + 64) = v318;
            v221 = v60 + 64;
            *(_OWORD *)(v60 + 40) = v316;
            *(_QWORD *)(v60 + 24) = off_1E2521330;
            *(_QWORD *)(v60 + 56) = v220;
            v222 = v319;
            *(_QWORD *)(v60 + 72) = v319;
            if (v222)
            {
              *((_QWORD *)v219 + 2) = v221;
              v219 = 0;
              v317 = &v318;
              v318 = 0;
              v319 = 0;
            }
            else
            {
              *(_QWORD *)(v60 + 56) = v221;
            }
            v155 = v310;
            *(_OWORD *)(v60 + 80) = v320;
            v320 = 0uLL;
            *(_BYTE *)(v60 + 96) = 0;
            *(_BYTE *)(v60 + 104) = 1;
            v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v317, v219);
            MEMORY[0x18D7898AC](&v315);
            if (v327)
            {
              v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v223 = (std::__shared_weak_count *)*((_QWORD *)&v326 + 1);
              if (*((_QWORD *)&v326 + 1))
              {
                v224 = (unint64_t *)(*((_QWORD *)&v326 + 1) + 8);
                do
                  v225 = __ldaxr(v224);
                while (__stlxr(v225 - 1, v224));
                if (!v225)
                {
                  ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                  std::__shared_weak_count::__release_weak(v223);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v323, v324);
              MEMORY[0x18D7898AC](&v321);
            }
            v212 = 3;
          }
          v210 = *(uint64_t **)(v60 + 536);
          if (!*(_BYTE *)(v60 + 608))
          {
            ((void (*)(std::runtime_error *))*v210)(v302);
            goto LABEL_193;
          }
LABEL_186:
          if (v210)
          {
            v226 = *(uint64_t **)(v60 + 544);
            v227 = v210;
            if (v226 != v210)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v226, 0);
              while (v226 != v210);
              v227 = v302->__vftable;
            }
            *(_QWORD *)(v60 + 544) = v210;
            operator delete(v227);
            if (!*(_BYTE *)(v60 + 768))
              goto LABEL_191;
            goto LABEL_194;
          }
LABEL_193:
          if (!*(_BYTE *)(v60 + 768))
          {
LABEL_191:
            ((void (*)(std::runtime_error *))v301->~runtime_error)(v301);
            goto LABEL_244;
          }
          goto LABEL_194;
        }
LABEL_343:
        __break(1u);
        return;
      }
    }
    std::runtime_error::runtime_error(&v321, v102);
    v322 = *(_OWORD *)(v60 + 712);
    v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v203 = *(_QWORD *)(v60 + 736);
    v323 = *(unsigned int ***)(v60 + 728);
    v324 = (unsigned int *)v203;
    v325 = *(_QWORD *)(v60 + 744);
    v301 = v102;
    if (v325)
    {
      *(_QWORD *)(v203 + 16) = &v324;
      *(_QWORD *)(v60 + 728) = v60 + 736;
      *(_QWORD *)(v60 + 736) = 0;
      *(_QWORD *)(v60 + 744) = 0;
    }
    else
    {
      v323 = &v324;
    }
    v326 = *(_OWORD *)(v60 + 752);
    *(_QWORD *)(v60 + 760) = 0;
    *(_QWORD *)(v60 + 752) = 0;
    v327 = 1;
    std::runtime_error::runtime_error((std::runtime_error *)(v70 - 160), &v321);
    v328 = v322;
    v232 = v323;
    v231 = v324;
    *(_QWORD *)(v70 - 160) = off_1E2521330;
    *(_QWORD *)(v70 - 128) = v232;
    *(_QWORD *)(v70 - 120) = v231;
    v233 = (_QWORD *)(v70 - 120);
    v234 = v325;
    *(_QWORD *)(v70 - 112) = v325;
    if (v234)
    {
      *((_QWORD *)v231 + 2) = v233;
      v323 = &v324;
      v324 = 0;
      v325 = 0;
    }
    else
    {
      *(_QWORD *)(v70 - 128) = v233;
    }
    v329 = v326;
    v326 = 0uLL;
    std::runtime_error::runtime_error(&v315, (const std::runtime_error *)(v70 - 160));
    v316 = *(_OWORD *)(v70 - 144);
    v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v235 = *(_QWORD *)(v70 - 120);
    v317 = *(unsigned int ***)(v70 - 128);
    v318 = (unsigned int *)v235;
    v319 = *(_QWORD *)(v70 - 112);
    if (v319)
    {
      *(_QWORD *)(v235 + 16) = &v318;
      v235 = 0;
      *(_QWORD *)(v70 - 128) = v233;
      *v233 = 0;
      *(_QWORD *)(v70 - 112) = 0;
    }
    else
    {
      v317 = &v318;
    }
    v320 = v329;
    *(_QWORD *)(v70 - 104) = 0;
    *(_QWORD *)(v70 - 96) = 0;
    *(_QWORD *)(v70 - 160) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v70 - 128, (unsigned int *)v235);
    MEMORY[0x18D7898AC](v70 - 160);
    if (*(_BYTE *)(v60 + 104))
    {
      if (!*(_BYTE *)(v60 + 96))
        (**(void (***)(uint64_t))(v60 + 24))(v60 + 24);
      *(_BYTE *)(v60 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), &v315);
    v237 = v317;
    v236 = v318;
    *(_QWORD *)(v60 + 64) = v318;
    v238 = v60 + 64;
    *(_OWORD *)(v60 + 40) = v316;
    *(_QWORD *)(v60 + 24) = off_1E2521330;
    *(_QWORD *)(v60 + 56) = v237;
    v239 = v319;
    *(_QWORD *)(v60 + 72) = v319;
    if (v239)
    {
      *((_QWORD *)v236 + 2) = v238;
      v236 = 0;
      v317 = &v318;
      v318 = 0;
      v319 = 0;
    }
    else
    {
      *(_QWORD *)(v60 + 56) = v238;
    }
    v155 = v310;
    *(_OWORD *)(v60 + 80) = v320;
    v320 = 0uLL;
    *(_BYTE *)(v60 + 96) = 0;
    *(_BYTE *)(v60 + 104) = 1;
    v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v317, v236);
    MEMORY[0x18D7898AC](&v315);
    if (v327)
    {
      v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v240 = (std::__shared_weak_count *)*((_QWORD *)&v326 + 1);
      if (*((_QWORD *)&v326 + 1))
      {
        v241 = (unint64_t *)(*((_QWORD *)&v326 + 1) + 8);
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v323, v324);
      MEMORY[0x18D7898AC](&v321);
    }
    v212 = 3;
    if (!*(_BYTE *)(v60 + 768))
      goto LABEL_191;
LABEL_194:
    v228 = *(std::__shared_weak_count **)(v60 + 704);
    if (v228)
    {
      v229 = (unint64_t *)&v228->__shared_owners_;
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    goto LABEL_244;
  }
LABEL_103:
  std::runtime_error::runtime_error(&v321, v155);
  v322 = *(_OWORD *)(v60 + 632);
  v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v165 = *(_QWORD *)(v60 + 656);
  v323 = *(unsigned int ***)(v60 + 648);
  v324 = (unsigned int *)v165;
  v325 = *(_QWORD *)(v60 + 664);
  v309 = v155;
  if (v325)
  {
    *(_QWORD *)(v165 + 16) = &v324;
    *(_QWORD *)(v60 + 648) = v60 + 656;
    *(_QWORD *)(v60 + 656) = 0;
    *(_QWORD *)(v60 + 664) = 0;
  }
  else
  {
    v323 = &v324;
  }
  v326 = *(_OWORD *)(v60 + 672);
  *(_QWORD *)(v60 + 680) = 0;
  *(_QWORD *)(v60 + 672) = 0;
  v327 = 1;
  std::runtime_error::runtime_error((std::runtime_error *)(v70 - 160), &v321);
  v328 = v322;
  v244 = v323;
  v243 = v324;
  *(_QWORD *)(v70 - 160) = off_1E2521330;
  *(_QWORD *)(v70 - 128) = v244;
  *(_QWORD *)(v70 - 120) = v243;
  v245 = (_QWORD *)(v70 - 120);
  v246 = v325;
  *(_QWORD *)(v70 - 112) = v325;
  if (v246)
  {
    *((_QWORD *)v243 + 2) = v245;
    v323 = &v324;
    v324 = 0;
    v325 = 0;
  }
  else
  {
    *(_QWORD *)(v70 - 128) = v245;
  }
  v329 = v326;
  v326 = 0uLL;
  std::runtime_error::runtime_error(&v315, (const std::runtime_error *)(v70 - 160));
  v316 = *(_OWORD *)(v70 - 144);
  v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v247 = *(_QWORD *)(v70 - 120);
  v317 = *(unsigned int ***)(v70 - 128);
  v318 = (unsigned int *)v247;
  v319 = *(_QWORD *)(v70 - 112);
  if (v319)
  {
    *(_QWORD *)(v247 + 16) = &v318;
    v247 = 0;
    *(_QWORD *)(v70 - 128) = v245;
    *v245 = 0;
    *(_QWORD *)(v70 - 112) = 0;
  }
  else
  {
    v317 = &v318;
  }
  v320 = v329;
  *(_QWORD *)(v70 - 104) = 0;
  *(_QWORD *)(v70 - 96) = 0;
  *(_QWORD *)(v70 - 160) = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v70 - 128, (unsigned int *)v247);
  MEMORY[0x18D7898AC](v70 - 160);
  if (*(_BYTE *)(v60 + 104))
  {
    if (!*(_BYTE *)(v60 + 96))
      (**(void (***)(uint64_t))(v60 + 24))(v60 + 24);
    *(_BYTE *)(v60 + 104) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), &v315);
  v249 = v317;
  v248 = v318;
  *(_QWORD *)(v60 + 64) = v318;
  v250 = v60 + 64;
  *(_OWORD *)(v60 + 40) = v316;
  *(_QWORD *)(v60 + 24) = off_1E2521330;
  *(_QWORD *)(v60 + 56) = v249;
  v251 = v319;
  *(_QWORD *)(v60 + 72) = v319;
  if (v251)
  {
    *((_QWORD *)v248 + 2) = v250;
    v248 = 0;
    v317 = &v318;
    v318 = 0;
    v319 = 0;
  }
  else
  {
    *(_QWORD *)(v60 + 56) = v250;
  }
  v155 = v309;
  *(_OWORD *)(v60 + 80) = v320;
  v320 = 0uLL;
  *(_BYTE *)(v60 + 96) = 0;
  *(_BYTE *)(v60 + 104) = 1;
  v315.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v317, v248);
  MEMORY[0x18D7898AC](&v315);
  if (v327)
  {
    v321.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v252 = (std::__shared_weak_count *)*((_QWORD *)&v326 + 1);
    if (*((_QWORD *)&v326 + 1))
    {
      v253 = (unint64_t *)(*((_QWORD *)&v326 + 1) + 8);
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v323, v324);
    MEMORY[0x18D7898AC](&v321);
  }
  v212 = 3;
LABEL_244:
  v255 = *(_QWORD *)(v60 + 616);
  if (!*(_BYTE *)(v60 + 688))
  {
    (*(void (**)(const std::runtime_error *))v255)(v155);
    if (v212)
      goto LABEL_288;
    goto LABEL_250;
  }
  v155->__vftable = 0;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  if (!v212)
    goto LABEL_250;
LABEL_288:
  v272 = *(void (***)())(v60 + 776);
  if (*(_BYTE *)(v60 + 848))
  {
    if (v272)
    {
      v273 = *(uint64_t **)(v60 + 784);
      v274 = *(std::runtime_error_vtbl **)(v60 + 776);
      if (v273 != (uint64_t *)v272)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v273, 0);
        while (v273 != (uint64_t *)v272);
        v274 = v314->__vftable;
      }
      *(_QWORD *)(v60 + 784) = v272;
      operator delete(v274);
      if (!*(_BYTE *)(v60 + 528))
        goto LABEL_294;
LABEL_302:
      v276 = *(std::__shared_weak_count **)(v60 + 464);
      if (v276)
      {
        v277 = (unint64_t *)&v276->__shared_owners_;
        do
          v278 = __ldaxr(v277);
        while (__stlxr(v278 - 1, v277));
        if (!v278)
        {
          ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
          std::__shared_weak_count::__release_weak(v276);
        }
      }
      goto LABEL_307;
    }
  }
  else
  {
    (*v272)();
  }
  if (*(_BYTE *)(v60 + 528))
    goto LABEL_302;
LABEL_294:
  ((void (*)(std::runtime_error *))v86->~runtime_error)(v86);
LABEL_307:
  v279 = *(std::__shared_weak_count **)(v60 + 1016);
  if (v279)
  {
    v280 = (unint64_t *)&v279->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(char **)(v60 + 896));
  *(_QWORD *)(v60 + 456) = v306;
  *(_QWORD *)v60 = 0;
  *v312 = 5;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v86);
}

void sub_18CCF4BDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](a23);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a18);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a14);
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(char **)(v23 + 896));
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CCF4CC8()
{
  __cxa_end_catch();
  JUMPOUT(0x18CCF47BCLL);
}

void sub_18CCF4CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_BYTE *a21)
{
  _QWORD *v21;

  *v21 = 0;
  *a21 = 5;
  _Unwind_Resume(a1);
}

void sub_18CCF4D38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v1 = *(_QWORD *)(v0 + 1096);
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      v4 = *(std::__shared_weak_count **)(v0 + 1096);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v5 = *(std::__shared_weak_count **)(v0 + 544);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(v0 + 968);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)(v0 + 1016);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(char **)(v0 + 896));
  v14 = *(_QWORD **)(v0 + 144);
  if (v14 == (_QWORD *)(v0 + 120))
  {
    v15 = 4;
    v14 = (_QWORD *)(v0 + 120);
    goto LABEL_25;
  }
  if (v14)
  {
    v15 = 5;
LABEL_25:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (*(_BYTE *)(v0 + 104) && !*(_BYTE *)(v0 + 96))
    (**(void (***)(uint64_t))(v0 + 24))(v0 + 24);
  v16 = *(char *)(v0 + 1128);
  do
  {
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v18)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v16 < 0)
    operator delete(*(void **)(v0 + 1072));
  v19 = *(std::__shared_weak_count **)(v0 + 1064);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(std::__shared_weak_count **)(v0 + 1048);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete((void *)v0);
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::unique_ptr<AMSCore::HTTPCookie>&&>>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  const void *v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  const void *v18;
  size_t v19;
  int v20;
  uint64_t *result;
  uint64_t *v22;
  std::string *v23;
  uint64_t v24;
  uint64_t *v25;

  v8 = a1 + 1;
  v7 = a1[1];
  if (!v7)
  {
    v12 = a1 + 1;
    goto LABEL_29;
  }
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v11 = a2[1];
  do
  {
    while (1)
    {
      v12 = (uint64_t **)v7;
      v15 = v7[4];
      v13 = v7 + 4;
      v14 = (_QWORD *)v15;
      v16 = *((char *)v13 + 23);
      v17 = v16 >= 0 ? v13 : v14;
      v18 = v16 >= 0 ? (const void *)*((unsigned __int8 *)v13 + 23) : (const void *)v13[1];
      v19 = (size_t)(v18 >= v11 ? v11 : v18);
      v20 = memcmp(v10, v17, v19);
      if (v20)
        break;
      if (v11 >= v18)
        goto LABEL_22;
LABEL_8:
      v7 = *v12;
      v8 = v12;
      if (!*v12)
        goto LABEL_29;
    }
    if (v20 < 0)
      goto LABEL_8;
LABEL_22:
    result = (uint64_t *)memcmp(v17, v10, v19);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v18 >= v11)
    {
      return result;
    }
    v7 = v12[1];
  }
  while (v7);
  v8 = v12 + 1;
LABEL_29:
  v22 = (uint64_t *)operator new(0x40uLL);
  v23 = (std::string *)(v22 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v22[6] = *(_QWORD *)(a3 + 16);
  }
  v24 = *a4;
  *a4 = 0;
  v22[7] = v24;
  *v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v12;
  *v8 = v22;
  v25 = (uint64_t *)**a1;
  if (v25)
  {
    *a1 = v25;
    v22 = *v8;
  }
  result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_18CCF53DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setAnisetteHeaders(_BYTE *result)
{
  uint64_t v1;
  unint64_t v2;
  std::runtime_error *v3;
  std::runtime_error *v4;
  std::string *v5;
  uint64_t v6;
  _QWORD *v7;
  std::runtime_error *v8;
  _BYTE *v9;
  std::runtime_error v10;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 *v50;
  _BYTE *v51;
  _OWORD *v52;
  _BYTE *v53;

  v1 = *((_QWORD *)result + 44);
  if (*(_BYTE *)(v1 + 88))
  {
    v2 = (unint64_t)result;
    v3 = (std::runtime_error *)(result + 264);
    v4 = (std::runtime_error *)(result + 64);
    v5 = (std::string *)(result + 144);
    v6 = (uint64_t)(result + 216);
    v7 = result + 240;
    v8 = (std::runtime_error *)(result + 280);
    v9 = result + 368;
    v53 = result + 104;
    v51 = result + 16;
    v52 = result + 80;
    do
    {
      v12 = *(_BYTE *)(v1 + 80);
      if (!v12)
      {
        std::runtime_error::runtime_error(v4, (const std::runtime_error *)(v1 + 8));
        *v52 = *(_OWORD *)(v1 + 24);
        v13 = (_QWORD *)(v1 + 48);
        v14 = *(_QWORD *)(v1 + 48);
        *(_QWORD *)(v2 + 64) = off_1E2521330;
        *(_QWORD *)(v2 + 96) = *(_QWORD *)(v1 + 40);
        *(_QWORD *)(v2 + 104) = v14;
        v15 = *(_QWORD *)(v1 + 56);
        *(_QWORD *)(v2 + 112) = v15;
        if (v15)
        {
          *(_QWORD *)(v14 + 16) = v53;
          *(_QWORD *)(v1 + 40) = v13;
          *v13 = 0;
          *(_QWORD *)(v1 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v2 + 96) = v53;
        }
        v18 = *(_QWORD *)(v2 + 352);
        *(_OWORD *)(v2 + 120) = *(_OWORD *)(v18 + 64);
        *(_QWORD *)(v18 + 64) = 0;
        *(_QWORD *)(v18 + 72) = 0;
      }
      *(_BYTE *)(v2 + 136) = v12;
      v19 = *(_QWORD *)(v2 + 360);
      if (!v19)
        goto LABEL_18;
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        v25 = *(std::__shared_weak_count **)(v2 + 360);
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        v22 = *(std::__shared_weak_count **)(v2 + 272);
        if (!v22)
          goto LABEL_24;
      }
      else
      {
LABEL_18:
        v22 = *(std::__shared_weak_count **)(v2 + 272);
        if (!v22)
          goto LABEL_24;
      }
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      if (!*(_BYTE *)(v2 + 232))
        goto LABEL_29;
      v26 = *(std::__shared_weak_count **)(v2 + 224);
      if (!v26)
        goto LABEL_29;
LABEL_24:
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        if (!*(_BYTE *)(v2 + 208))
          goto LABEL_35;
      }
      else
      {
LABEL_29:
        if (!*(_BYTE *)(v2 + 208))
          goto LABEL_35;
      }
      if (*(char *)(v2 + 207) < 0)
        operator delete(*(void **)(v2 + 184));
      if (*(_BYTE *)(v2 + 168) && *(char *)(v2 + 167) < 0)
        operator delete(v5->__r_.__value_.__l.__data_);
LABEL_35:
      v29 = *(std::__shared_weak_count **)(v2 + 288);
      if (!v29)
        goto LABEL_72;
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        if (*(_BYTE *)(v2 + 136))
          goto LABEL_51;
      }
      else
      {
LABEL_72:
        if (*(_BYTE *)(v2 + 136))
          goto LABEL_51;
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v3);
      AMSCore::Logger::log<char [41],AMSCore::Error>((uint64_t)v3->__vftable, 3, (uint64_t)"networking", 10, "Failed to set Anisette headers. error = ", (uint64_t)v4);
      v32 = *(std::__shared_weak_count **)(v2 + 272);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          if (*(_BYTE *)(v2 + 136))
            goto LABEL_51;
LABEL_45:
          ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
          goto LABEL_51;
        }
      }
      if (!*(_BYTE *)(v2 + 136))
        goto LABEL_45;
LABEL_51:
      if (*(_BYTE *)(v2 + 256))
      {
        v35 = *(std::__shared_weak_count **)(v2 + 248);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      v38 = *(_QWORD *)(v2 + 344);
      v39 = v38 + 1;
      if (v38 == 1)
      {
        *(_BYTE *)(v2 + 18) = 1;
        *(_QWORD *)(v2 + 64) = v51;
        *(_QWORD *)v2 = 0;
        return AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v4);
      }
      *(_QWORD *)(v2 + 344) = v39;
      v40 = *(_QWORD *)(v2 + 328);
      v41 = *(_DWORD *)&v9[4 * v39];
      *(_BYTE *)(v2 + 240) = 0;
      *(_BYTE *)(v2 + 256) = 0;
      v42 = *(_DWORD *)(v40 + 20);
      if (v42 != v41)
      {
        v44 = *(_QWORD *)(v40 + 24);
        v43 = *(_QWORD *)(v40 + 32);
        *(_QWORD *)(v2 + 240) = v44;
        *(_QWORD *)(v2 + 248) = v43;
        if (v43)
        {
          v45 = (unint64_t *)(v43 + 8);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        *(_BYTE *)(v2 + 256) = 1;
      }
      v47 = *(_QWORD *)(v2 + 304);
      *(_QWORD *)(v2 + 280) = *(_QWORD *)(v2 + 296);
      *(_QWORD *)(v2 + 288) = v47;
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = (__int128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 312) + 72))(*(_QWORD *)(v2 + 312));
      std::__optional_destruct_base<AMSCore::AccountIdentity,false>::__optional_destruct_base[abi:fe180100]<AMSCore::AccountIdentity const&>(v5, v50);
      *(_BYTE *)(v2 + 216) = 0;
      *(_BYTE *)(v2 + 232) = 0;
      if (v42 != v41)
      {
        *(_OWORD *)(v2 + 216) = *(_OWORD *)(v2 + 240);
        *v7 = 0;
        v7[1] = 0;
        *(_BYTE *)(v2 + 232) = 1;
      }
      result = AMSCore::AnisetteUtils::addHeaders(v3, v8, (void (**)(AMSCore::Error *__hidden))v5, v41, v6);
      v10 = *v3;
      *(std::runtime_error *)(v2 + 352) = *v3;
      v3->__vftable = 0;
      v3->__imp_.__imp_ = 0;
      if (!atomic_load((unint64_t *)&v10.__vftable[4]))
      {
        LOBYTE(v3[7].__vftable) = 0;
        v16 = (unint64_t *)(*(_QWORD *)(v2 + 352) + 96);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v2, v16));
        if (!v17)
          return result;
      }
      v1 = *(_QWORD *)(v2 + 352);
    }
    while (*(_BYTE *)(v1 + 88));
  }
  __break(1u);
  return result;
}

void sub_18CCF5854(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v4);
  if (!*(_BYTE *)(v2 + 136))
    (**v3)(v3);
  std::optional<AMSCore::DialogResult>::~optional(v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::EncodeHTTPRequestTask::`anonymous namespace'::setAnisetteHeaders(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;

  if (*(_QWORD *)__p)
  {
    v2 = *((_QWORD *)__p + 45);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 45);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 34);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (__p[232])
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 28);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    if (__p[208])
    {
      if (__p[207] < 0)
        operator delete(*((void **)__p + 23));
      if (__p[168] && __p[167] < 0)
        operator delete(*((void **)__p + 18));
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 36);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (__p[256])
    {
      v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 31);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }
  v18 = (char *)*((_QWORD *)__p + 7);
  if (v18 == __p + 32)
  {
    v19 = 4;
    v18 = __p + 32;
    goto LABEL_39;
  }
  if (v18)
  {
    v19 = 5;
LABEL_39:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
  v20 = *((_QWORD *)__p + 42);
  do
  {
    v21 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v22)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v20)
  {
    v23 = (unint64_t *)(*((_QWORD *)__p + 42) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)__p + 42);
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v26 = *((_QWORD *)__p + 40);
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 40);
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v30 = *((_QWORD *)__p + 38);
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = (std::__shared_weak_count *)*((_QWORD *)__p + 38);
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  operator delete(__p);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequestBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequestBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequestBuilder>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  AMSCore::HTTPRequest::~HTTPRequest((void **)(a1 + 104));
  if (*(_BYTE *)(a1 + 96))
  {
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    v2 = *(std::__shared_weak_count **)(a1 + 88);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 56, *(unsigned int **)(a1 + 64));
    JUMPOUT(0x18D7898ACLL);
  }
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  signed int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *i;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[56];
  void *__p[2];
  _QWORD v47[3];
  std::vector<std::csub_match>::value_type __x;
  char *v49;
  char *v50;
  unint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v47, 0, 21);
    v13 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v49, (uint64_t)v45);
    v50 = v13;
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v45[32])
      operator delete(*(void **)&v45[32]);
    v14 = v49;
    if (v49 != v13)
    {
      v15 = *((_QWORD *)v13 - 8);
      *((_DWORD *)v13 - 24) = 0;
      *((_QWORD *)v13 - 11) = a2;
      *((_QWORD *)v13 - 10) = a2;
      *((_QWORD *)v13 - 9) = a3;
      v16 = *(unsigned int *)(a1 + 28);
      v17 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v15) >> 3);
      if (v16 <= v17)
      {
        if (v16 < v17)
          *((_QWORD *)v13 - 7) = v15 + 24 * v16;
      }
      else
      {
        std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v16 - v17, &__x);
      }
      v18 = *((_QWORD *)v13 - 5);
      v19 = *(unsigned int *)(a1 + 32);
      v20 = (*((_QWORD *)v13 - 4) - v18) >> 4;
      if (v19 <= v20)
      {
        if (v19 < v20)
          *((_QWORD *)v13 - 4) = v18 + 16 * v19;
      }
      else
      {
        std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
      }
      *((_QWORD *)v13 - 2) = v6;
      *((_DWORD *)v13 - 2) = a5;
      v21 = (_DWORD)a3 - a2;
      *(v13 - 4) = a6;
      v22 = 1;
      while (2)
      {
        if ((v22 & 0xFFF) == 0 && (int)(v22 >> 12) >= v21)
          std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)12>();
        if (v14 != v13)
        {
          v23 = *((_QWORD *)v13 - 2);
          if (v23)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v13 - 96);
          switch(*((_DWORD *)v13 - 24))
          {
            case 0xFFFFFC18:
              v24 = *((_QWORD *)v13 - 10);
              if ((a5 & 0x20) != 0 && v24 == a2)
                goto LABEL_27;
              v34 = *a4;
              v35 = a4[1] - *a4;
              if (!v35)
                goto LABEL_57;
              *(_QWORD *)v34 = a2;
              *(_QWORD *)(v34 + 8) = v24;
              *(_BYTE *)(v34 + 16) = 1;
              v36 = *((_QWORD *)v13 - 8);
              v37 = *((_QWORD *)v13 - 7) - v36;
              if (!v37)
                goto LABEL_53;
              v38 = 0;
              v39 = 0xAAAAAAAAAAAAAAABLL * (v35 >> 3);
              v40 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
              v41 = 1;
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_18;
            case 0xFFFFFC1F:
LABEL_27:
              v25 = v50;
              if (v49 == v50)
                goto LABEL_57;
              v26 = (void *)*((_QWORD *)v50 - 5);
              if (v26)
              {
                *((_QWORD *)v50 - 4) = v26;
                operator delete(v26);
              }
              v27 = (void *)*((_QWORD *)v25 - 8);
              if (v27)
              {
                *((_QWORD *)v25 - 7) = v27;
                operator delete(v27);
              }
              v50 = v25 - 96;
LABEL_18:
              v14 = v49;
              v13 = v50;
              ++v22;
              if (v49 != v50)
                continue;
              if (v49)
                goto LABEL_39;
              return;
            case 0xFFFFFC20:
              std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
              (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
              (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v47[1] + 24))(v47[1], 0, v45);
              v28 = v50;
              if ((unint64_t)v50 >= v51)
              {
                v50 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v49, (uint64_t)v45);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                v29 = *(_OWORD *)&v45[16];
                *(_OWORD *)v50 = *(_OWORD *)v45;
                *((_OWORD *)v28 + 1) = v29;
                *((_QWORD *)v28 + 4) = 0;
                *((_QWORD *)v28 + 5) = 0;
                *((_QWORD *)v28 + 6) = 0;
                *((_QWORD *)v28 + 7) = 0;
                *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
                *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
                memset(&v45[32], 0, 24);
                *((_QWORD *)v28 + 8) = 0;
                *((_QWORD *)v28 + 9) = 0;
                *(_OWORD *)(v28 + 56) = *(_OWORD *)__p;
                *((_QWORD *)v28 + 9) = v47[0];
                __p[0] = 0;
                __p[1] = 0;
                v47[0] = 0;
                v30 = v47[1];
                *(_QWORD *)(v28 + 85) = *(_QWORD *)((char *)&v47[1] + 5);
                *((_QWORD *)v28 + 10) = v30;
                v50 = v28 + 96;
              }
              if (*(_QWORD *)&v45[32])
              {
                *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
                operator delete(*(void **)&v45[32]);
              }
              goto LABEL_18;
            default:
              std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)16>();
          }
          while (1)
          {
            v42 = v41;
            if (v39 <= v41)
              break;
            v43 = v36 + 24 * v38;
            v44 = v34 + 24 * v41;
            *(_OWORD *)v44 = *(_OWORD *)v43;
            *(_BYTE *)(v44 + 16) = *(_BYTE *)(v43 + 16);
            v41 = v42 + 1;
            v38 = v42;
            if (v40 <= v42)
            {
LABEL_53:
              v14 = v49;
              if (v49)
              {
LABEL_39:
                for (i = v50; i != v14; i -= 96)
                {
                  v32 = (void *)*((_QWORD *)i - 5);
                  if (v32)
                  {
                    *((_QWORD *)i - 4) = v32;
                    operator delete(v32);
                  }
                  v33 = (void *)*((_QWORD *)i - 8);
                  if (v33)
                  {
                    *((_QWORD *)i - 7) = v33;
                    operator delete(v33);
                  }
                }
                operator delete(v14);
              }
              return;
            }
          }
        }
        break;
      }
    }
LABEL_57:
    __break(1u);
  }
}

void sub_18CCF619C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:fe180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  void *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  int64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void **v106;
  void **v107;
  void *v108;
  uint64_t *v109;
  char *v110;
  uint64_t v111;
  char *__src;
  char *__srca;
  char v114;
  uint64_t v117;
  _BYTE v118[56];
  void *__p[2];
  _QWORD v120[3];
  __int128 v121;
  __int128 v122;
  int64x2_t v123;

  v122 = 0u;
  v123 = 0u;
  v121 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_112:
    v106 = (void **)*((_QWORD *)&v121 + 1);
    v107 = (void **)v122;
    if ((_QWORD)v122 - *((_QWORD *)&v121 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v106);
        v107 = (void **)v122;
        v106 = (void **)(*((_QWORD *)&v121 + 1) + 8);
        *((_QWORD *)&v121 + 1) = v106;
      }
      while ((_QWORD)v122 - (_QWORD)v106 > 0x10uLL);
    }
    while (v106 != v107)
    {
      v108 = *v106++;
      operator delete(v108);
    }
    if ((_QWORD)v121)
      operator delete((void *)v121);
    return;
  }
  *(_DWORD *)v118 = 0;
  memset(&v118[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v120, 0, 21);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v121);
  v11 = *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * ((v123.i64[1] + v123.i64[0]) / 0x2AuLL))
      + 96 * ((v123.i64[1] + v123.i64[0]) % 0x2AuLL);
  v12 = *(_OWORD *)&v118[16];
  *(_OWORD *)v11 = *(_OWORD *)v118;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v118[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v120[0] = 0;
  v13 = v120[1];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)((char *)&v120[1] + 5);
  *(_QWORD *)(v11 + 80) = v13;
  v15 = v123.i64[1];
  v14 = v123.i64[0];
  v16 = ++v123.i64[1];
  v17 = *((_QWORD *)&v121 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v15 + v123.i64[0];
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v121 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v109 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = v123.i64[1];
    v14 = v123.i64[0];
    v17 = *((_QWORD *)&v121 + 1);
  }
  v114 = 0;
  v28 = 0;
  v111 = 0;
  v117 = a3 - a2;
  v29 = v16 + v14 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v32 + 88) = a5;
  *(_BYTE *)(v32 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v117)
      std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)12>();
    v37 = v16 + v123.i64[0] - 1;
    v38 = *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * (v37 / 0x2A));
    v39 = v37 % 0x2A;
    v40 = v38 + 96 * (v37 % 0x2A);
    v42 = (_QWORD *)(v40 + 80);
    v41 = *(_QWORD *)(v40 + 80);
    if (v41)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v40);
    switch(*(_DWORD *)v40)
    {
      case 0xFFFFFC18:
        v43 = *(_QWORD *)(v38 + 96 * v39 + 16);
        if ((a5 & 0x20) != 0 && v43 == a2)
          goto LABEL_8;
        v44 = v43 - *(_QWORD *)(v38 + 96 * v39 + 8);
        v45 = v111;
        if ((v114 & (v111 >= v44)) == 0)
          v45 = v44;
        if (v45 != v117)
        {
          v111 = v45;
          std::deque<std::__state<char>>::pop_back(&v121);
          v114 = 1;
          goto LABEL_9;
        }
        v46 = (void **)*((_QWORD *)&v121 + 1);
        v47 = v122;
        if ((_QWORD)v122 == *((_QWORD *)&v121 + 1))
        {
          v47 = *((_QWORD *)&v121 + 1);
        }
        else
        {
          v48 = (_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * (v123.i64[0] / 0x2AuLL));
          v49 = (_QWORD *)(*v48 + 96 * (v123.i64[0] % 0x2AuLL));
          v50 = *(_QWORD *)(*((_QWORD *)&v121 + 1) + 8 * ((v123.i64[1] + v123.i64[0]) / 0x2AuLL))
              + 96 * ((v123.i64[1] + v123.i64[0]) % 0x2AuLL);
          if (v49 != (_QWORD *)v50)
          {
            do
            {
              v51 = (void *)v49[7];
              if (v51)
              {
                v49[8] = v51;
                operator delete(v51);
              }
              v52 = (void *)v49[4];
              if (v52)
              {
                v49[5] = v52;
                operator delete(v52);
              }
              v49 += 12;
              if ((_QWORD *)((char *)v49 - *v48) == (_QWORD *)4032)
              {
                v53 = (_QWORD *)v48[1];
                ++v48;
                v49 = v53;
              }
            }
            while (v49 != (_QWORD *)v50);
            v46 = (void **)*((_QWORD *)&v121 + 1);
            v47 = v122;
          }
        }
        v123.i64[1] = 0;
        v65 = v47 - (_QWORD)v46;
        if (v65 >= 0x11)
        {
          do
          {
            operator delete(*v46);
            v46 = (void **)(*((_QWORD *)&v121 + 1) + 8);
            *((_QWORD *)&v121 + 1) = v46;
            v65 = v122 - (_QWORD)v46;
          }
          while ((_QWORD)v122 - (_QWORD)v46 > 0x10uLL);
        }
        if (v65 >> 3 == 1)
        {
          v66 = 21;
        }
        else
        {
          if (v65 >> 3 != 2)
            goto LABEL_66;
          v66 = 42;
        }
        v123.i64[0] = v66;
LABEL_66:
        v114 = 1;
        v111 = v117;
        goto LABEL_9;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_9;
      case 0xFFFFFC1D:
        v54 = v123.i64[0];
        v55 = (uint64_t *)*((_QWORD *)&v121 + 1);
        v56 = (uint64_t *)v122;
        if (v123.i64[0])
          goto LABEL_78;
        v57 = (uint64_t)(v122 - *((_QWORD *)&v121 + 1)) >> 3;
        v58 = 42 * v57 - 1;
        if ((_QWORD)v122 == *((_QWORD *)&v121 + 1))
          v58 = 0;
        if ((unint64_t)(v58 - v123.i64[1]) >= 0x2A)
        {
          v123.i64[0] = 42;
          *(_QWORD *)v118 = *(_QWORD *)(v122 - 8);
          *(_QWORD *)&v122 = v122 - 8;
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)&v121, v118);
          goto LABEL_77;
        }
        if (v57 < (uint64_t)(*((_QWORD *)&v122 + 1) - v121) >> 3)
        {
          if (*((_QWORD *)&v121 + 1) == (_QWORD)v121)
          {
            *(_QWORD *)v118 = operator new(0xFC0uLL);
            std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)&v121, v118);
            *(_QWORD *)v118 = *(_QWORD *)(v122 - 8);
            *(_QWORD *)&v122 = v122 - 8;
          }
          else
          {
            *(_QWORD *)v118 = operator new(0xFC0uLL);
          }
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)&v121, v118);
          v71 = 21;
          if ((_QWORD)v122 - *((_QWORD *)&v121 + 1) != 8)
            v71 = v123.i64[0] + 42;
          v123.i64[0] = v71;
          goto LABEL_77;
        }
        if (*((_QWORD *)&v122 + 1) == (_QWORD)v121)
          v67 = 1;
        else
          v67 = (uint64_t)(*((_QWORD *)&v122 + 1) - v121) >> 2;
        if (v67 >> 61)
          std::__throw_bad_array_new_length[abi:fe180100]();
        __src = (char *)operator new(8 * v67);
        v68 = operator new(0xFC0uLL);
        if (v67)
        {
          v69 = __src;
          v70 = &__src[8 * v67];
        }
        else
        {
          v72 = (char *)operator new(8uLL);
          v70 = v72 + 8;
          operator delete(__src);
          v55 = (uint64_t *)*((_QWORD *)&v121 + 1);
          v56 = (uint64_t *)v122;
          v69 = v72;
        }
        *(_QWORD *)v69 = v68;
        v73 = v69 + 8;
        __srca = v69;
        v74 = v69;
        if (v55 == v56)
          goto LABEL_73;
        break;
      case 0xFFFFFC1F:
        goto LABEL_8;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v118, (__int128 *)v40);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v42 + 24))(*v42, 1, v40);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v120[1] + 24))(v120[1], 0, v118);
        v59 = *((_QWORD *)&v121 + 1);
        if ((_QWORD)v122 == *((_QWORD *)&v121 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v122 - *((_QWORD *)&v121 + 1)) >> 3) - 1;
        v61 = v123.i64[1] + v123.i64[0];
        if (v60 == v123.i64[1] + v123.i64[0])
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v121);
          v59 = *((_QWORD *)&v121 + 1);
          v61 = v123.i64[1] + v123.i64[0];
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v118[16];
        *(_OWORD *)v62 = *(_OWORD *)v118;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v118[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v118[48];
        memset(&v118[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)__p;
        *(_QWORD *)(v62 + 72) = v120[0];
        __p[0] = 0;
        __p[1] = 0;
        v120[0] = 0;
        v64 = v120[1];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)((char *)&v120[1] + 5);
        *(_QWORD *)(v62 + 80) = v64;
        ++v123.i64[1];
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(_QWORD *)&v118[32])
        {
          *(_QWORD *)&v118[40] = *(_QWORD *)&v118[32];
          operator delete(*(void **)&v118[32]);
        }
        goto LABEL_9;
      default:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)16>();
    }
    do
    {
      if (v73 != v70)
      {
        v79 = v74;
        v80 = v73;
        v73 = v70;
        goto LABEL_83;
      }
      if (v74 <= __srca)
      {
        if (v73 == __srca)
          v89 = 1;
        else
          v89 = (v73 - __srca) >> 2;
        if (v89 >> 61)
          std::__throw_bad_array_new_length[abi:fe180100]();
        v90 = (char *)operator new(8 * v89);
        v91 = v89;
        v92 = v89 >> 2;
        v79 = &v90[8 * (v89 >> 2)];
        v80 = v79;
        v93 = v73 - v74;
        if (v73 == v74)
          goto LABEL_106;
        v80 = &v79[v93 & 0xFFFFFFFFFFFFFFF8];
        v94 = v93 - 8;
        if (v94 >= 0x38)
        {
          v96 = 8 * v92;
          if ((unint64_t)(&v90[8 * v92] - v74) >= 0x20)
          {
            v97 = (v94 >> 3) + 1;
            v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
            v95 = &v79[v98];
            v99 = (__int128 *)(v74 + 16);
            v100 = &v90[v96 + 16];
            v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v102 = *v99;
              *((_OWORD *)v100 - 1) = *(v99 - 1);
              *(_OWORD *)v100 = v102;
              v99 += 2;
              v100 += 32;
              v101 -= 4;
            }
            while (v101);
            if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
            v74 += v98;
          }
          else
          {
            v95 = v79;
          }
        }
        else
        {
          v95 = v79;
        }
        do
        {
          v103 = *(_QWORD *)v74;
          v74 += 8;
          *(_QWORD *)v95 = v103;
          v95 += 8;
        }
        while (v95 != v80);
LABEL_106:
        v73 = &v90[8 * v91];
        if (__srca)
        {
          v110 = v90;
          v104 = v79;
          operator delete(__srca);
          v79 = v104;
          __srca = v110;
        }
        else
        {
          __srca = v90;
        }
        goto LABEL_83;
      }
      v82 = (v74 - __srca) >> 3;
      if (v82 >= -1)
        v83 = v82 + 1;
      else
        v83 = v82 + 2;
      v84 = v83 >> 1;
      v85 = &v74[-8 * (v83 >> 1)];
      v86 = v73;
      v87 = v73 - v74;
      if (v73 != v74)
      {
        memmove(v85, v74, v73 - v74);
        v87 = v73 - v74;
        v86 = v74;
      }
      v88 = -v84;
      v80 = &v85[v87];
      v79 = &v86[8 * v88];
LABEL_83:
      v81 = *v55++;
      *(_QWORD *)v80 = v81;
      v74 = v79;
      v70 = v73;
      v73 = v80 + 8;
    }
    while (v55 != (uint64_t *)v122);
LABEL_73:
    v75 = (void *)v121;
    *(_QWORD *)&v121 = __srca;
    *((_QWORD *)&v121 + 1) = v74;
    *(_QWORD *)&v122 = v73;
    *((_QWORD *)&v122 + 1) = v70;
    v76 = v123.i64[0] + 42;
    if (v73 - v74 == 8)
      v76 = 21;
    v123.i64[0] = v76;
    if (v75)
      operator delete(v75);
LABEL_77:
    v54 = v123.i64[0];
    v55 = (uint64_t *)*((_QWORD *)&v121 + 1);
    v56 = (uint64_t *)v122;
LABEL_78:
    v77 = &v55[v54 / 0x2A];
    v78 = *v77 + 96 * (v54 % 0x2A);
    if (v56 == v55)
      v78 = 0;
    if (v78 == *v77)
      v78 = *(v77 - 1) + 4032;
    v33 = *(_OWORD *)(v40 + 16);
    *(_OWORD *)(v78 - 96) = *(_OWORD *)v40;
    *(_OWORD *)(v78 - 80) = v33;
    v34 = v38 + 96 * v39;
    *(_QWORD *)(v78 - 56) = 0;
    *(_QWORD *)(v78 - 48) = 0;
    *(_QWORD *)(v78 - 64) = 0;
    *(_OWORD *)(v78 - 64) = *(_OWORD *)(v34 + 32);
    *(_QWORD *)(v78 - 48) = *(_QWORD *)(v34 + 48);
    *(_QWORD *)(v34 + 32) = 0;
    *(_QWORD *)(v34 + 40) = 0;
    *(_QWORD *)(v34 + 48) = 0;
    *(_QWORD *)(v78 - 40) = 0;
    *(_QWORD *)(v78 - 32) = 0;
    *(_QWORD *)(v78 - 24) = 0;
    *(_OWORD *)(v78 - 40) = *(_OWORD *)(v34 + 56);
    *(_QWORD *)(v78 - 24) = *(_QWORD *)(v34 + 72);
    *(_QWORD *)(v34 + 56) = 0;
    *(_QWORD *)(v34 + 64) = 0;
    *(_QWORD *)(v34 + 72) = 0;
    v35 = *v42;
    *(_QWORD *)(v78 - 11) = *(_QWORD *)(v40 + 85);
    *(_QWORD *)(v78 - 16) = v35;
    v123 = vaddq_s64(v123, (int64x2_t)xmmword_18CF51C10);
LABEL_8:
    std::deque<std::__state<char>>::pop_back(&v121);
LABEL_9:
    v16 = v123.i64[1];
    if (v123.i64[1])
      continue;
    break;
  }
  if ((v114 & 1) == 0)
    goto LABEL_112;
  v105 = *v109;
  if (v109[1] != *v109)
  {
    *(_QWORD *)v105 = a2;
    *(_QWORD *)(v105 + 8) = a2 + v111;
    *(_BYTE *)(v105 + 16) = 1;
    goto LABEL_112;
  }
  __break(1u);
}

void sub_18CCF6C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  uint64_t v24;

  operator delete(v23);
  operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:fe180100](v24 - 144);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  char v21;
  unsigned int v22;
  const char *v23;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  const char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *j;
  __int128 v51;
  uint64_t i;
  char *v53;
  char *v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  double *v66;
  const double *v67;
  uint64_t v68;
  const double *v69;
  double *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  int64_t v79;
  uint64_t v80;
  char *v81;
  char *k;
  void *v83;
  void *v84;
  char *v85;
  void *v86;
  void *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  BOOL v92;
  BOOL v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  const double *v97;
  double *v98;
  uint64_t v99;
  const double *v100;
  double *v101;
  char *v102;
  unint64_t v103;
  BOOL v105;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  const double *v110;
  uint64_t v111;
  const double *v112;
  double *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  BOOL v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  const double *v123;
  double *v124;
  uint64_t v125;
  const double *v126;
  double *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  const char *v140;
  _BYTE v143[56];
  void *__p[2];
  _QWORD v145[3];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v147[40];
  __int128 v148;
  __int128 v149;
  _QWORD v150[4];
  char *v151;
  char *v152;
  unint64_t v153;
  float64x2x2_t v154;
  float64x2x2_t v155;
  float64x2x2_t v156;
  float64x2x2_t v157;
  float64x2x2_t v158;
  float64x2x2_t v159;
  float64x2x2_t v160;
  float64x2x2_t v161;

  v151 = 0;
  v152 = 0;
  v153 = 0;
  *(_DWORD *)v147 = 0;
  memset(&v147[8], 0, 32);
  v148 = 0u;
  v149 = 0u;
  memset(v150, 0, 21);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v12 = 0;
    v16 = (void *)v149;
    if (!(_QWORD)v149)
      goto LABEL_177;
    goto LABEL_176;
  }
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v143 = 0;
  memset(&v143[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v145, 0, 21);
  v11 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v151, (uint64_t)v143);
  v152 = v11;
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)&v143[32])
    operator delete(*(void **)&v143[32]);
  v12 = v151;
  if (v151 == v11)
    goto LABEL_185;
  v13 = *((_QWORD *)v11 - 8);
  *((_DWORD *)v11 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v11 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v11 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v11 - 64), v14 - v15, &__x);
  }
  v17 = *((_QWORD *)v11 - 5);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = (*((_QWORD *)v11 - 4) - v17) >> 4;
  if (v18 <= v19)
  {
    if (v18 < v19)
      *((_QWORD *)v11 - 4) = v17 + 16 * v18;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v11 - 40), v18 - v19);
  }
  v139 = a4;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = &a3[-a2];
  *((_QWORD *)v11 - 2) = v6;
  *((_DWORD *)v11 - 2) = a5;
  *(v11 - 4) = a6;
  while (2)
  {
    if ((++v22 & 0xFFF) == 0 && (int)(v22 >> 12) >= (int)v23)
      std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)12>();
    if (v12 == v11)
      goto LABEL_185;
    v26 = v11 - 16;
    v25 = *((_QWORD *)v11 - 2);
    v27 = v11 - 96;
    if (v25)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v25 + 16))(v25, v11 - 96);
    switch(*(_DWORD *)v27)
    {
      case 0xFFFFFC18:
        v28 = *((_QWORD *)v11 - 10);
        if ((a5 & 0x20) != 0 && v28 == a2)
          goto LABEL_31;
        v35 = (const char *)(v28 - *((_QWORD *)v11 - 11));
        if ((v21 & ((uint64_t)v20 >= (uint64_t)v35)) != 0)
          goto LABEL_104;
        v36 = *(_OWORD *)v27;
        *(_OWORD *)&v147[16] = *((_OWORD *)v11 - 5);
        *(_OWORD *)v147 = v36;
        if (v147 == v27)
          goto LABEL_103;
        v38 = (char *)*((_QWORD *)v11 - 8);
        v37 = (char *)*((_QWORD *)v11 - 7);
        v39 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v38) >> 3);
        v40 = *((_QWORD *)&v148 + 1);
        v41 = *(char **)&v147[32];
        v140 = v35;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v148 + 1) - *(_QWORD *)&v147[32]) >> 3) >= v39)
        {
          v46 = (char *)v148;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - *(_QWORD *)&v147[32]) >> 3) >= v39)
          {
            for (i = *(_QWORD *)&v147[32]; v38 != v37; v38 += 24)
            {
              *(_OWORD *)i = *(_OWORD *)v38;
              *(_BYTE *)(i + 16) = v38[16];
              i += 24;
            }
            v48 = i - (_QWORD)v41;
            v46 = v41;
          }
          else
          {
            v49 = &v38[8 * ((uint64_t)(v148 - *(_QWORD *)&v147[32]) >> 3)];
            if ((_QWORD)v148 != *(_QWORD *)&v147[32])
            {
              do
              {
                *(_OWORD *)v41 = *(_OWORD *)v38;
                v41[16] = v38[16];
                v38 += 24;
                v41 += 24;
              }
              while (v38 != v49);
            }
            for (j = v46; v49 != v37; v49 += 24)
            {
              v51 = *(_OWORD *)v49;
              *((_QWORD *)j + 2) = *((_QWORD *)v49 + 2);
              *(_OWORD *)j = v51;
              j += 24;
            }
            v48 = j - v46;
          }
        }
        else
        {
          if (*(_QWORD *)&v147[32])
          {
            *(_QWORD *)&v148 = *(_QWORD *)&v147[32];
            operator delete(*(void **)&v147[32]);
            v40 = 0;
            *(_QWORD *)&v147[32] = 0;
            v148 = 0uLL;
          }
          if (v39 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_183;
          v42 = 0xAAAAAAAAAAAAAAABLL * (v40 >> 3);
          v43 = 2 * v42;
          if (2 * v42 <= v39)
            v43 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v38) >> 3);
          v44 = v42 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v43;
          if (v44 > 0xAAAAAAAAAAAAAAALL)
LABEL_183:
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          v45 = (char *)operator new(24 * v44);
          v46 = v45;
          *(_QWORD *)&v147[32] = v45;
          *(_QWORD *)&v148 = v45;
          *((_QWORD *)&v148 + 1) = &v45[24 * v44];
          v47 = v45;
          if (v38 != v37)
          {
            memcpy(v45, v38, 24 * ((v37 - v38 - 24) / 0x18uLL) + 24);
            v47 = &v46[24 * ((v37 - v38 - 24) / 0x18uLL) + 24];
          }
          v48 = v47 - v46;
        }
        *(_QWORD *)&v148 = &v46[v48];
        v54 = (char *)*((_QWORD *)v11 - 5);
        v53 = (char *)*((_QWORD *)v11 - 4);
        v55 = v53 - v54;
        v56 = (v53 - v54) >> 4;
        v57 = v150[0];
        v58 = (char *)v149;
        if (v56 > (uint64_t)(v150[0] - v149) >> 4)
        {
          if ((_QWORD)v149)
          {
            *((_QWORD *)&v149 + 1) = v149;
            operator delete((void *)v149);
            v57 = 0;
            v149 = 0uLL;
            v150[0] = 0;
          }
          if (v55 < 0)
            goto LABEL_184;
          v59 = v57 >> 3;
          if (v57 >> 3 <= v56)
            v59 = (v53 - v54) >> 4;
          v60 = (unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v59;
          if (v60 >> 60)
LABEL_184:
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          v61 = (char *)operator new(16 * v60);
          *(_QWORD *)&v149 = v61;
          v150[0] = &v61[16 * v60];
          v62 = v61;
          v35 = v140;
          if (v54 != v53)
          {
            v62 = v61;
            if ((unint64_t)(v55 - 16) < 0x30)
              goto LABEL_188;
            v63 = ((unint64_t)(v55 - 16) >> 4) + 1;
            v64 = 16 * (v63 & 0x1FFFFFFFFFFFFFFCLL);
            v65 = &v54[v64];
            v66 = (double *)(v61 + 32);
            v67 = (const double *)(v54 + 32);
            v68 = v63 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v69 = v67 - 4;
              v154 = vld2q_f64(v69);
              v158 = vld2q_f64(v67);
              v70 = v66 - 4;
              vst2q_f64(v70, v154);
              vst2q_f64(v66, v158);
              v66 += 8;
              v67 += 8;
              v68 -= 4;
            }
            while (v68);
            v62 = &v61[v64];
            v54 = v65;
            if (v63 != (v63 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_188:
              do
              {
                *(_QWORD *)v62 = *(_QWORD *)v54;
                *((_QWORD *)v62 + 1) = *((_QWORD *)v54 + 1);
                v62 += 16;
                v54 += 16;
              }
              while (v54 != v53);
            }
          }
          goto LABEL_99;
        }
        v61 = (char *)*((_QWORD *)&v149 + 1);
        v71 = *((_QWORD *)&v149 + 1) - v149;
        v72 = (uint64_t)(*((_QWORD *)&v149 + 1) - v149) >> 4;
        v35 = v140;
        if (v72 < v56)
        {
          v73 = &v54[16 * v72];
          if (*((_QWORD *)&v149 + 1) != (_QWORD)v149)
          {
            if ((unint64_t)(v71 - 16) < 0xF0)
            {
              v74 = v54;
              goto LABEL_87;
            }
            v88 = (v71 & 0xFFFFFFFFFFFFFFF0) - 8;
            v89 = v149 + v88;
            v90 = (unint64_t)&v54[v88];
            v92 = (uint64_t)v149 + 8 < (unint64_t)&v54[v71 & 0xFFFFFFFFFFFFFFF0]
               && (unint64_t)(v54 + 8) < (unint64_t)v149 + (v71 & 0xFFFFFFFFFFFFFFF0);
            v74 = v54;
            v93 = v89 <= (unint64_t)v54 || (unint64_t)v149 >= v90;
            if (!v93 || v92)
            {
              do
              {
LABEL_87:
                *(_QWORD *)v58 = *(_QWORD *)v74;
                *((_QWORD *)v58 + 1) = *((_QWORD *)v74 + 1);
                v74 += 16;
                v58 += 16;
              }
              while (v74 != v73);
            }
            else
            {
              v94 = ((unint64_t)(v71 - 16) >> 4) + 1;
              v95 = 16 * (v94 & 0x1FFFFFFFFFFFFFFCLL);
              v96 = (char *)(v149 + v95);
              v97 = (const double *)(v54 + 32);
              v98 = (double *)(v149 + 32);
              v99 = v94 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                v100 = v97 - 4;
                v155 = vld2q_f64(v100);
                v159 = vld2q_f64(v97);
                v101 = v98 - 4;
                vst2q_f64(v101, v155);
                vst2q_f64(v98, v159);
                v97 += 8;
                v98 += 8;
                v99 -= 4;
              }
              while (v99);
              if (v94 != (v94 & 0x1FFFFFFFFFFFFFFCLL))
              {
                v74 = &v54[v95];
                v58 = v96;
                goto LABEL_87;
              }
            }
          }
          if (v73 == v53)
          {
            v62 = v61;
          }
          else
          {
            v75 = &v54[v71];
            v76 = v53 - v75 - 16;
            if (v76 < 0x170)
            {
              v62 = v61;
              goto LABEL_91;
            }
            v102 = &v75[v76 & 0xFFFFFFFFFFFFFFF0];
            v103 = (unint64_t)(v75 + 8);
            v105 = v61 + 8 < v102 + 16 && v103 < (unint64_t)&v61[(v76 & 0xFFFFFFFFFFFFFFF0) + 16];
            v62 = v61;
            if (v73 < &v61[(v76 & 0xFFFFFFFFFFFFFFF0) + 8] && v61 < v102 + 8)
              goto LABEL_189;
            if (v105)
              goto LABEL_189;
            v107 = (v76 >> 4) + 1;
            v108 = 16 * (v107 & 0x1FFFFFFFFFFFFFFCLL);
            v73 += v108;
            v109 = (double *)(v61 + 32);
            v110 = (const double *)&v54[16 * v72 + 32];
            v111 = v107 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v112 = v110 - 4;
              v156 = vld2q_f64(v112);
              v160 = vld2q_f64(v110);
              v113 = v109 - 4;
              vst2q_f64(v113, v156);
              vst2q_f64(v109, v160);
              v109 += 8;
              v110 += 8;
              v111 -= 4;
            }
            while (v111);
            v62 = &v61[v108];
            if (v107 != (v107 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_189:
              do
              {
LABEL_91:
                *(_QWORD *)v62 = *(_QWORD *)v73;
                *((_QWORD *)v62 + 1) = *((_QWORD *)v73 + 1);
                v62 += 16;
                v73 += 16;
              }
              while (v73 != v53);
            }
          }
LABEL_99:
          v79 = v62 - v61;
          goto LABEL_102;
        }
        if (v54 == v53)
        {
          v78 = (char *)v149;
          goto LABEL_101;
        }
        v77 = v55 - 16;
        if ((unint64_t)(v55 - 16) < 0xF0)
        {
          v78 = (char *)v149;
          goto LABEL_96;
        }
        v114 = v77 & 0xFFFFFFFFFFFFFFF0 | 8;
        v115 = v149 + v114;
        v116 = (unint64_t)&v54[v114];
        v117 = (v77 & 0xFFFFFFFFFFFFFFF0) + 16;
        v119 = (uint64_t)v149 + 8 < (unint64_t)&v54[v117]
            && (unint64_t)(v54 + 8) < (unint64_t)v149 + v117;
        v78 = (char *)v149;
        v120 = v115 <= (unint64_t)v54 || (unint64_t)v149 >= v116;
        if (!v120 || v119)
          goto LABEL_96;
        v121 = (v77 >> 4) + 1;
        v122 = 16 * (v121 & 0x1FFFFFFFFFFFFFFCLL);
        v78 = (char *)(v149 + v122);
        v123 = (const double *)(v54 + 32);
        v124 = (double *)(v149 + 32);
        v125 = v121 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v126 = v123 - 4;
          v157 = vld2q_f64(v126);
          v161 = vld2q_f64(v123);
          v127 = v124 - 4;
          vst2q_f64(v127, v157);
          vst2q_f64(v124, v161);
          v123 += 8;
          v124 += 8;
          v125 -= 4;
        }
        while (v125);
        if (v121 != (v121 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v54 += v122;
          do
          {
LABEL_96:
            *(_QWORD *)v78 = *(_QWORD *)v54;
            *((_QWORD *)v78 + 1) = *((_QWORD *)v54 + 1);
            v78 += 16;
            v54 += 16;
          }
          while (v54 != v53);
        }
LABEL_101:
        v79 = v78 - v58;
        v61 = v58;
LABEL_102:
        *((_QWORD *)&v149 + 1) = &v61[v79];
LABEL_103:
        v80 = *(_QWORD *)v26;
        *(_QWORD *)((char *)&v150[1] + 5) = *(_QWORD *)(v26 + 5);
        v150[1] = v80;
        v20 = v35;
LABEL_104:
        if (v20 == v23)
        {
          v81 = v151;
          for (k = v152; k != v81; k -= 96)
          {
            v83 = (void *)*((_QWORD *)k - 5);
            if (v83)
            {
              *((_QWORD *)k - 4) = v83;
              operator delete(v83);
            }
            v84 = (void *)*((_QWORD *)k - 8);
            if (v84)
            {
              *((_QWORD *)k - 7) = v84;
              operator delete(v84);
            }
          }
          v152 = v81;
          v21 = 1;
          v20 = &a3[-a2];
        }
        else
        {
          v85 = v152;
          if (v151 == v152)
            goto LABEL_185;
          v86 = (void *)*((_QWORD *)v152 - 5);
          if (v86)
          {
            *((_QWORD *)v152 - 4) = v86;
            operator delete(v86);
          }
          v87 = (void *)*((_QWORD *)v85 - 8);
          if (v87)
          {
            *((_QWORD *)v85 - 7) = v87;
            operator delete(v87);
          }
          v152 = v85 - 96;
          v21 = 1;
        }
LABEL_19:
        v12 = v151;
        v11 = v152;
        if (v151 != v152)
          continue;
        if ((v21 & 1) == 0)
        {
          v16 = (void *)v149;
          if (!(_QWORD)v149)
          {
LABEL_177:
            if (*(_QWORD *)&v147[32])
            {
              *(_QWORD *)&v148 = *(_QWORD *)&v147[32];
              operator delete(*(void **)&v147[32]);
            }
            if (v12)
              operator delete(v12);
            return;
          }
LABEL_176:
          *((_QWORD *)&v149 + 1) = v16;
          operator delete(v16);
          goto LABEL_177;
        }
        v128 = *v139;
        v129 = v139[1];
        v130 = v129 - *v139;
        if (v129 == *v139)
          goto LABEL_185;
        *(_QWORD *)v128 = a2;
        *(_QWORD *)(v128 + 8) = &v20[a2];
        *(_BYTE *)(v128 + 16) = 1;
        v131 = *(_QWORD *)&v147[32];
        if ((_QWORD)v148 == *(_QWORD *)&v147[32])
        {
LABEL_173:
          v16 = (void *)v149;
          if (!(_QWORD)v149)
            goto LABEL_177;
          goto LABEL_176;
        }
        v132 = 0;
        v133 = 0xAAAAAAAAAAAAAAABLL * (v130 >> 3);
        v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - *(_QWORD *)&v147[32]) >> 3);
        v135 = 1;
        while (1)
        {
          v136 = v135;
          if (v133 <= v135)
            break;
          v137 = v131 + 24 * v132;
          v138 = v128 + 24 * v135;
          *(_OWORD *)v138 = *(_OWORD *)v137;
          *(_BYTE *)(v138 + 16) = *(_BYTE *)(v137 + 16);
          v135 = v136 + 1;
          v132 = v136;
          if (v134 <= v136)
            goto LABEL_173;
        }
LABEL_185:
        __break(1u);
        return;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_19;
      case 0xFFFFFC1F:
LABEL_31:
        v29 = v152;
        if (v151 == v152)
          goto LABEL_185;
        v30 = (void *)*((_QWORD *)v152 - 5);
        if (v30)
        {
          *((_QWORD *)v152 - 4) = v30;
          operator delete(v30);
        }
        v31 = (void *)*((_QWORD *)v29 - 8);
        if (v31)
        {
          *((_QWORD *)v29 - 7) = v31;
          operator delete(v31);
        }
        v152 = v29 - 96;
        goto LABEL_19;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v143, (__int128 *)v11 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v26 + 24))(*(_QWORD *)v26, 1, v11 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v145[1] + 24))(v145[1], 0, v143);
        v32 = v152;
        if ((unint64_t)v152 >= v153)
        {
          v152 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v151, (uint64_t)v143);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v33 = *(_OWORD *)&v143[16];
          *(_OWORD *)v152 = *(_OWORD *)v143;
          *((_OWORD *)v32 + 1) = v33;
          *((_QWORD *)v32 + 4) = 0;
          *((_QWORD *)v32 + 5) = 0;
          *((_QWORD *)v32 + 6) = 0;
          *((_QWORD *)v32 + 7) = 0;
          *((_OWORD *)v32 + 2) = *(_OWORD *)&v143[32];
          *((_QWORD *)v32 + 6) = *(_QWORD *)&v143[48];
          memset(&v143[32], 0, 24);
          *((_QWORD *)v32 + 8) = 0;
          *((_QWORD *)v32 + 9) = 0;
          *(_OWORD *)(v32 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v32 + 9) = v145[0];
          __p[0] = 0;
          __p[1] = 0;
          v145[0] = 0;
          v34 = v145[1];
          *(_QWORD *)(v32 + 85) = *(_QWORD *)((char *)&v145[1] + 5);
          *((_QWORD *)v32 + 10) = v34;
          v152 = v32 + 96;
        }
        if (*(_QWORD *)&v143[32])
        {
          *(_QWORD *)&v143[40] = *(_QWORD *)&v143[32];
          operator delete(*(void **)&v143[32]);
        }
        goto LABEL_19;
      default:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_18CCF7780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:fe180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCF7C88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  const double *v30;
  uint64_t v31;
  const double *v32;
  double *v33;
  float64x2x2_t v34;
  float64x2x2_t v35;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (char *)*((_QWORD *)a2 + 7);
  v11 = (char *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    v15 = v13 - 16;
    if ((unint64_t)(v13 - 16) < 0xF0)
      goto LABEL_30;
    v20 = v15 & 0xFFFFFFFFFFFFFFF0 | 8;
    v21 = &v14[v20];
    v22 = &v12[v20];
    v23 = (v15 & 0xFFFFFFFFFFFFFFF0) + 16;
    v24 = v14 + 8 >= &v12[v23] || v12 + 8 >= &v14[v23];
    v25 = !v24;
    if (v12 < v21 && v14 < v22)
      goto LABEL_30;
    if (v25)
      goto LABEL_30;
    v27 = (v15 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFCLL);
    v29 = (double *)(v14 + 32);
    v30 = (const double *)(v12 + 32);
    v31 = v27 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = v30 - 4;
      v34 = vld2q_f64(v32);
      v35 = vld2q_f64(v30);
      v33 = v29 - 4;
      vst2q_f64(v33, v34);
      vst2q_f64(v29, v35);
      v29 += 8;
      v30 += 8;
      v31 -= 4;
    }
    while (v31);
    v14 += v28;
    v12 += v28;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v16 = *(_QWORD *)v12;
        v17 = *((_QWORD *)v12 + 1);
        v12 += 16;
        *(_QWORD *)v14 = v16;
        *((_QWORD *)v14 + 1) = v17;
        v14 += 16;
      }
      while (v12 != v11);
    }
    *(_QWORD *)(a1 + 64) = v14;
  }
  v18 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v18;
  return a1;
}

void sub_18CCF7EB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCF7F24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:fe180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int64x2_t v27;
  void *v28;
  __int128 v29;
  unint64_t v30;
  int64x2_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  int64x2_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  int64x2_t v94;
  int64x2_t v95;
  void *v96;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v76 = &v35[8 * v33];
            v41 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              v77 = (v40 >> 3) + 1;
              v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v78];
              v79 = (__int128 *)(v6 + 3);
              v80 = v76 + 16;
              v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_78;
              v7 += v78;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v83 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v83;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_78;
      }
LABEL_90:
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v96 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v96);
      return;
    }
    v96 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v96);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_80;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v84 = &v35[8 * v44];
            v48 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              v85 = (v47 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v86];
              v87 = (__int128 *)(v42 + 3);
              v88 = v84 + 16;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_78;
              v7 += v86;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v91;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_78:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_90;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_90;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v21];
  v27.i64[0] = (uint64_t)v25;
  v27.i64[1] = (uint64_t)v26;
  v94 = v27;
  v28 = operator new(0xFC0uLL);
  *((_QWORD *)&v29 + 1) = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v26 = (char *)operator new(8 * v49);
      v94 = vdupq_n_s64((unint64_t)v26);
      operator delete(v25);
      *((_QWORD *)&v29 + 1) = &v26[8 * v49];
      v18 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v26 -= 8 * (v30 >> 1);
      v31.i64[0] = v94.i64[0];
      v31.i64[1] = (uint64_t)v26;
      v94 = v31;
    }
  }
  *(_QWORD *)v26 = v28;
  *(_QWORD *)&v29 = v26 + 8;
  while (v18 != *(_QWORD *)(a1 + 8))
  {
    v53 = (void *)v94.i64[1];
    if (v94.i64[1] != v94.i64[0])
    {
      v50 = (char *)v94.i64[1];
      v51 = v94;
      goto LABEL_44;
    }
    v54 = v29;
    if ((unint64_t)v29 >= *((_QWORD *)&v29 + 1))
    {
      if (*((_QWORD *)&v29 + 1) == v94.i64[1])
        v59 = 1;
      else
        v59 = (*((_QWORD *)&v29 + 1) - v94.i64[1]) >> 2;
      if (v59 >> 61)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v60 = (char *)operator new(8 * v59);
      v61 = (v59 + 3) >> 2;
      v50 = &v60[8 * v61];
      v62 = v50;
      v63 = v54 - v94.i64[1];
      if (v54 != v94.i64[1])
      {
        v62 = &v50[v63 & 0xFFFFFFFFFFFFFFF8];
        v64 = v63 - 8;
        v65 = &v60[8 * v61];
        v66 = (uint64_t *)v94.i64[1];
        if (v64 > 0x37)
        {
          v67 = 8 * v61;
          v65 = &v60[8 * v61];
          v66 = (uint64_t *)v94.i64[1];
          if ((unint64_t)&v65[-v94.i64[1]] >= 0x20)
          {
            v68 = (v64 >> 3) + 1;
            v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
            v65 = &v50[v69];
            v70 = (__int128 *)(v94.i64[1] + 16);
            v71 = &v60[v67 + 16];
            v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v73 = *v70;
              *((_OWORD *)v71 - 1) = *(v70 - 1);
              *(_OWORD *)v71 = v73;
              v70 += 2;
              v71 += 32;
              v72 -= 4;
            }
            while (v72);
            if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v51.i64[0] = (uint64_t)v60;
              v51.i64[1] = (uint64_t)v50;
              *(_QWORD *)&v29 = v62;
              *((_QWORD *)&v29 + 1) = &v60[8 * v59];
LABEL_69:
              v92 = v29;
              v95 = v51;
              operator delete(v53);
              v29 = v92;
              v51 = v95;
              v50 = (char *)v95.i64[1];
              goto LABEL_44;
            }
            v66 = (uint64_t *)(v94.i64[1] + v69);
          }
        }
        do
        {
          v74 = *v66++;
          *(_QWORD *)v65 = v74;
          v65 += 8;
        }
        while (v65 != v62);
      }
      v51.i64[0] = (uint64_t)v60;
      v51.i64[1] = (uint64_t)v50;
      *(_QWORD *)&v29 = v62;
      *((_QWORD *)&v29 + 1) = &v60[8 * v59];
      if (!v94.i64[1])
        goto LABEL_44;
      goto LABEL_69;
    }
    v55 = (uint64_t)(*((_QWORD *)&v29 + 1) - v29) >> 3;
    if (v55 >= -1)
      v56 = v55 + 1;
    else
      v56 = v55 + 2;
    v57 = v56 >> 1;
    v58 = v29 + 8 * (v56 >> 1);
    v50 = (char *)(v58 - (v29 - v94.i64[1]));
    if ((_QWORD)v29 == v94.i64[1])
    {
      v54 = v94.i64[1];
    }
    else
    {
      v93 = *((_QWORD *)&v29 + 1);
      memmove((void *)(v58 - (v29 - v94.i64[1])), (const void *)v94.i64[1], v29 - v94.i64[1]);
      *((_QWORD *)&v29 + 1) = v93;
    }
    v51.i64[0] = v94.i64[0];
    v51.i64[1] = (uint64_t)v50;
    *(_QWORD *)&v29 = v54 + 8 * v57;
LABEL_44:
    v52 = *(_QWORD *)(v18 - 8);
    v18 -= 8;
    *((_QWORD *)v50 - 1) = v52;
    v51.i64[1] -= 8;
    v94 = v51;
  }
  v75 = *(char **)a1;
  *(int64x2_t *)a1 = v94;
  *(_OWORD *)(a1 + 16) = v29;
  if (v75)
    operator delete(v75);
}

void sub_18CCF8570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = a1[5];
  if (v1)
  {
    v3 = v1 + a1[4] - 1;
    v4 = *(_QWORD *)(a1[1] + 8 * (v3 / 0x2A));
    v5 = v3 % 0x2A;
    v6 = *(void **)(v4 + 96 * (v3 % 0x2A) + 56);
    if (v6)
    {
      *(_QWORD *)(v4 + 96 * v5 + 64) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v4 + 96 * v5 + 32);
    if (v7)
    {
      *(_QWORD *)(v4 + 96 * v5 + 40) = v7;
      operator delete(v7);
    }
    v9 = a1[1];
    v8 = a1[2];
    if (v8 == v9)
      v10 = 0;
    else
      v10 = 42 * ((v8 - v9) >> 3) - 1;
    v12 = a1[4];
    v11 = a1[5];
    a1[5] = v11 - 1;
    if ((unint64_t)(v10 - (v11 + v12) + 1) >= 0x54)
    {
      operator delete(*(void **)(v8 - 8));
      a1[2] -= 8;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:fe180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 + 7);
        if (v9)
        {
          *((_QWORD *)v7 + 8) = v9;
          operator delete(v9);
        }
        v10 = (void *)*((_QWORD *)v7 + 4);
        if (v10)
        {
          *((_QWORD *)v7 + 5) = v10;
          operator delete(v10);
        }
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v11 = (char *)v6[1];
          ++v6;
          v7 = v11;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 21;
    goto LABEL_19;
  }
  if (v13 == 2)
  {
    v14 = 42;
LABEL_19:
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v7 = a1[2];
  v6 = a1[3];
  if (v7 >= v6)
  {
    v13 = v6 - v4;
    v12 = v13 == 0;
    v14 = v13 >> 2;
    if (v12)
      v14 = 1;
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v15 = (v14 + 3) >> 2;
    v16 = 8 * v14;
    v17 = (char *)operator new(8 * v14);
    v5 = &v17[8 * v15];
    v18 = &v17[v16];
    v19 = v5;
    v20 = v7 - v4;
    if (v7 != v4)
    {
      v19 = &v5[v20 & 0xFFFFFFFFFFFFFFF8];
      v21 = v20 - 8;
      v22 = &v17[8 * v15];
      v23 = v4;
      if (v21 > 0x37)
      {
        v24 = &v17[8 * v15];
        v22 = v24;
        v23 = v4;
        if ((unint64_t)(v24 - v4) >= 0x20)
        {
          v25 = (v21 >> 3) + 1;
          v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v5[v26];
          v27 = (__int128 *)(v4 + 16);
          v28 = v24 + 16;
          v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *a1 = v17;
            a1[1] = v5;
            a1[2] = v19;
            a1[3] = v18;
            goto LABEL_24;
          }
          v23 = &v4[v26];
        }
      }
      do
      {
        v31 = *(_QWORD *)v23;
        v23 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v19);
    }
    *a1 = v17;
    a1[1] = v5;
    a1[2] = v19;
    a1[3] = v18;
    if (!v4)
      goto LABEL_25;
LABEL_24:
    operator delete(v4);
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v8 = (v6 - v7) >> 3;
  if (v8 >= -1)
    v9 = v8 + 1;
  else
    v9 = v8 + 2;
  v10 = v9 >> 1;
  v11 = &v7[8 * (v9 >> 1)];
  v5 = &v11[-(v7 - v4)];
  if (v7 != v4)
  {
    memmove(&v11[-(v7 - v4)], v4, v7 - v4);
    v4 = (char *)a1[2];
  }
  a1[1] = v5;
  a1[2] = &v4[8 * v10];
LABEL_25:
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v6 = *a1;
  v5 = a1[1];
  if (v5 > *a1)
  {
    v7 = (v5 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v5[-8 * v9];
    v12 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v9], a1[1], v4 - v5);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  v14 = (v4 - v6) >> 2;
  if (v4 == v6)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:fe180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v5;
  v19 = v4 == v5;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v5) < 0x20)
    {
      do
      {
LABEL_20:
        v30 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v22 = v30;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_21;
    }
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = (__int128 *)(v5 + 16);
    v27 = v23 + 16;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v5 += v25;
      goto LABEL_20;
    }
  }
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v6)
  {
    operator delete(v6);
    v4 = a1[2];
  }
LABEL_23:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E2522340;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E2523B90;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
  {
    switch(v13)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v20 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v20)
          v21 = v20;
        else
          v21 = (unsigned __int8 *)a3;
        if (v21 == (unsigned __int8 *)a2)
        {
          v22 = (_QWORD *)operator new();
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(v23 + 8);
          v22[1] = v24;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, v21);
        }
        if (v21 != (unsigned __int8 *)a3)
          ++v21;
        if (v21 != (unsigned __int8 *)a3)
        {
          v37 = *(_QWORD *)(a1 + 56);
          do
          {
            v47 = (unsigned __int8 *)memchr(v21, 10, a3 - (char *)v21);
            if (v47)
              v48 = v47;
            else
              v48 = (unsigned __int8 *)a3;
            if (v48 == v21)
            {
              v38 = (_QWORD *)operator new();
              v39 = *(_QWORD *)(a1 + 56);
              v40 = *(_QWORD *)(v39 + 8);
              v38[1] = v40;
              *(_QWORD *)(v39 + 8) = v38;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v21, v48);
            }
            v41 = (_QWORD *)operator new();
            v42 = *(_QWORD *)(v37 + 8);
            v41[1] = *(_QWORD *)(v12 + 8);
            v41[2] = v42;
            *v41 = &off_1E2522310;
            *(_QWORD *)(v12 + 8) = v41;
            *(_QWORD *)(v37 + 8) = 0;
            v43 = (_QWORD *)operator new();
            v44 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v43[1] = v44;
            *(_QWORD *)(v37 + 8) = v43;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v45 = (_QWORD *)operator new();
            v46 = *(_QWORD *)(v37 + 8);
            *v45 = &off_1E2523BC8;
            v45[1] = v46;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v45;
            v37 = *(_QWORD *)(v37 + 8);
            *(_QWORD *)(a1 + 56) = v37;
            if (v48 == (unsigned __int8 *)a3)
              v21 = v48;
            else
              v21 = v48 + 1;
          }
          while (v21 != (unsigned __int8 *)a3);
        }
        break;
      case 0x100u:
        v14 = (char *)memchr(a2, 10, a3 - a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v16 = (_QWORD *)operator new();
          v17 = *(_QWORD *)(a1 + 56);
          v18 = *(_QWORD *)(v17 + 8);
          v16[1] = v18;
          *(_QWORD *)(v17 + 8) = v16;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v15);
        }
        if (v15 != a3)
          ++v15;
        if (v15 != a3)
        {
          v25 = *(_QWORD *)(a1 + 56);
          do
          {
            v35 = (char *)memchr(v15, 10, a3 - v15);
            if (v35)
              v36 = v35;
            else
              v36 = a3;
            if (v36 == v15)
            {
              v26 = (_QWORD *)operator new();
              v27 = *(_QWORD *)(a1 + 56);
              v28 = *(_QWORD *)(v27 + 8);
              v26[1] = v28;
              *(_QWORD *)(v27 + 8) = v26;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            }
            else
            {
              std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v15, v36);
            }
            v29 = (_QWORD *)operator new();
            v30 = *(_QWORD *)(v25 + 8);
            v29[1] = *(_QWORD *)(v12 + 8);
            v29[2] = v30;
            *v29 = &off_1E2522310;
            *(_QWORD *)(v12 + 8) = v29;
            *(_QWORD *)(v25 + 8) = 0;
            v31 = (_QWORD *)operator new();
            v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
            v31[1] = v32;
            *(_QWORD *)(v25 + 8) = v31;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
            v33 = (_QWORD *)operator new();
            v34 = *(_QWORD *)(v25 + 8);
            *v33 = &off_1E2523BC8;
            v33[1] = v34;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v33;
            v25 = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(a1 + 56) = v25;
            if (v36 == a3)
              v15 = v36;
            else
              v15 = v36 + 1;
          }
          while (v15 != a3);
        }
        break;
      default:
        goto LABEL_58;
    }
    return a3;
  }
  else if (v13)
  {
    if (v13 != 16)
    {
      if (v13 != 32)
LABEL_58:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
  }
}

void sub_18CCF9054(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCF90C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  std::__owns_one_state<char> *v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  int v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, v7, a3);
    if (v8 == v7)
    {
      v9 = *(std::__owns_one_state<char> **)(a1 + 56);
      v10 = *(_DWORD *)(a1 + 28);
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, a3);
      if (v8 == v11)
        v7 = v8;
      else
        v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v11, a3, v9, (v10 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
  }
  while (v8 != v7);
  if (v8 == a2)
  {
    v12 = (_QWORD *)operator new();
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    v12[1] = v14;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 != a3)
    {
LABEL_15:
      while (*v8 == 124)
      {
        v21 = *(_QWORD *)(a1 + 56);
        v22 = v8 + 1;
        v23 = v8 + 1;
        do
        {
          v8 = v23;
          v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, v23, a3);
          if (v8 == v23)
          {
            v24 = *(std::__owns_one_state<char> **)(a1 + 56);
            v25 = *(_DWORD *)(a1 + 28);
            v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, a3);
            if (v8 == v26)
              v23 = v8;
            else
              v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v26, a3, v24, (v25 + 1), (*(_DWORD *)(a1 + 28) + 1));
          }
        }
        while (v8 != v23);
        if (v8 == v22)
        {
          v27 = (_QWORD *)operator new();
          v28 = *(_QWORD *)(a1 + 56);
          v29 = *(_QWORD *)(v28 + 8);
          v27[1] = v29;
          *(_QWORD *)(v28 + 8) = v27;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        v15 = (_QWORD *)operator new();
        v16 = *(_QWORD *)(v21 + 8);
        v15[1] = *(_QWORD *)(v6 + 8);
        v15[2] = v16;
        *v15 = &off_1E2522310;
        *(_QWORD *)(v6 + 8) = v15;
        *(_QWORD *)(v21 + 8) = 0;
        v17 = (_QWORD *)operator new();
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v17[1] = v18;
        *(_QWORD *)(v21 + 8) = v17;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
        v19 = (_QWORD *)operator new();
        v20 = *(_QWORD *)(v21 + 8);
        *v19 = &off_1E2523BC8;
        v19[1] = v20;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(v21 + 8);
        if (v8 == a3)
          return a3;
      }
    }
  }
  else if (v8 != a3)
  {
    goto LABEL_15;
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E2522600;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (++v3 != (unsigned __int8 *)v4)
    {
LABEL_9:
      while (v3 != (unsigned __int8 *)v4)
      {
        v10 = (char *)v3;
        v11 = *(std::__owns_one_state<char> **)(a1 + 56);
        v12 = *(_DWORD *)(a1 + 28);
        v13 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v10, v4);
        if (v10 != (char *)v13)
        {
          v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, (unsigned __int8 *)v4, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
          if (v10 != (char *)v3)
            continue;
        }
        if (v10 + 1 != v4 || *v10 != 36)
          std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)15>();
        v14 = operator new();
        v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        v16 = *(_QWORD *)(a1 + 56);
        v17 = *(_QWORD *)(v16 + 8);
        *(_QWORD *)v14 = &off_1E2522660;
        *(_QWORD *)(v14 + 8) = v17;
        *(_BYTE *)(v14 + 16) = v15;
        *(_QWORD *)(v16 + 8) = v14;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v4;
      }
    }
  }
  else if (a2 != a3)
  {
    goto LABEL_9;
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  char *v8;
  std::__owns_one_state<char> *v9;
  char *v10;
  char *v11;
  std::__node<char> *v12;
  std::__node<char> *first;
  std::__node<char> *v14;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (*v8 == 124)
  {
    v9 = a1->__end_;
    v10 = v8 + 1;
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v8 + 1, a3);
    if (v8 + 1 == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = (std::__node<char> *)operator new();
    first = v9->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v12[2].__vftable = (std::__node<char>_vtbl *)first;
    v12->__vftable = (std::__node<char>_vtbl *)&off_1E2522310;
    end->__first_ = v12;
    v9->__first_ = 0;
    v14 = (std::__node<char> *)operator new();
    v15 = a1->__end_->__first_;
    v14[1].__vftable = (std::__node<char>_vtbl *)v15;
    v9->__first_ = v14;
    a1->__end_->__first_ = 0;
    v16 = (std::__node<char> *)operator new();
    v17 = v9->__first_;
    v16->__vftable = (std::__node<char>_vtbl *)&off_1E2523BC8;
    v16[1].__vftable = (std::__node<char>_vtbl *)v17;
    a1->__end_->__first_ = v16;
    a1->__end_ = (std::__owns_one_state<char> *)v9->__first_;
    if (v8 == a3)
      return a3;
  }
  return v8;
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCF96C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E25224C0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E25224C0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x18D789BDCLL);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x18D789BDCLL);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E25224C0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E25224C0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x18D789BDCLL);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char>::value_type *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  std::basic_regex<char>::value_type *v8;
  int v9;
  std::basic_regex<char>::value_type v10;
  char *v11;
  _BOOL4 v12;
  uint64_t v13;
  std::__node<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *first;
  char *v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  std::__node<char> *v22;
  uint64_t (**v23)();
  uint64_t v24;
  unsigned int v25;
  std::__owns_one_state<char> *v26;
  std::__node<char> *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  std::__owns_one_state<char> *v31;
  std::__node<char> *v32;

  end = this->__end_;
  marked_count = this->__marked_count_;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!this->__open_count_)
          goto LABEL_8;
LABEL_3:
        v8 = a2 + 1;
        if (a2 + 1 == a3)
        {
LABEL_15:
          v9 = *a2;
        }
        else
        {
          v9 = *a2;
          if (v9 == 92)
          {
            v10 = *v8;
            switch(*v8)
            {
              case '$':
              case '(':
              case ')':
              case '*':
              case '+':
              case '.':
              case '?':
              case '[':
              case '\\':
              case '^':
              case '{':
              case '|':
              case '}':
                std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v10);
                v11 = a2 + 2;
                return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v11, a3, end, marked_count + 1, this->__marked_count_ + 1);
              default:
                if ((this->__flags_ & 0x1F0) == 0x40)
                {
                  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(this, v8, a3, 0);
                }
                else
                {
                  v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v10);
                  v13 = 2;
                  if (!v12)
                    v13 = 0;
                  v11 = &a2[v13];
                }
                if (v11 == a2)
                  goto LABEL_15;
                goto LABEL_19;
            }
          }
        }
        if (v9 != 46)
          goto LABEL_18;
        v14 = (std::__node<char> *)operator new();
        v15 = this->__end_;
        first = v15->__first_;
        v14->__vftable = (std::__node<char>_vtbl *)&off_1E25223A0;
        v14[1].__vftable = (std::__node<char>_vtbl *)first;
        v15->__first_ = v14;
        break;
      default:
LABEL_8:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
        v11 = a2 + 1;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v11, a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
    goto LABEL_27;
  }
LABEL_18:
  std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v11 = v17;
LABEL_19:
  if (v11 != a2 || v11 == a3)
    goto LABEL_36;
  v18 = *a2;
  switch(v18)
  {
    case '$':
      v19 = operator new();
      v20 = (this->__flags_ & 0x5F0) == 1024;
      v21 = this->__end_;
      v22 = v21->__first_;
      v23 = &off_1E2522660;
      goto LABEL_26;
    case '(':
      if ((this->__flags_ & 2) != 0)
      {
        v25 = this->__marked_count_;
      }
      else
      {
        v24 = operator new();
        v25 = this->__marked_count_ + 1;
        this->__marked_count_ = v25;
        v26 = this->__end_;
        v27 = v26->__first_;
        *(_QWORD *)v24 = &off_1E2523C58;
        *(_QWORD *)(v24 + 8) = v27;
        *(_DWORD *)(v24 + 16) = v25;
        v26->__first_ = (std::__node<char> *)v24;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v28 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
      if (v28 == a3 || (v29 = v28, *v28 != 41))
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)6>();
      if ((this->__flags_ & 2) == 0)
      {
        v30 = operator new();
        v31 = this->__end_;
        v32 = v31->__first_;
        *(_QWORD *)v30 = &off_1E2523C28;
        *(_QWORD *)(v30 + 8) = v32;
        *(_DWORD *)(v30 + 16) = v25;
        v31->__first_ = (std::__node<char> *)v30;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      v11 = v29 + 1;
LABEL_36:
      if (v11 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v11, a3, end, marked_count + 1, this->__marked_count_ + 1);
      return a2;
    case '^':
      v19 = operator new();
      v20 = (this->__flags_ & 0x5F0) == 1024;
      v21 = this->__end_;
      v22 = v21->__first_;
      v23 = &off_1E2522600;
LABEL_26:
      *(_QWORD *)v19 = v23;
      *(_QWORD *)(v19 + 8) = v22;
      *(_BYTE *)(v19 + 16) = v20;
      v21->__first_ = (std::__node<char> *)v19;
LABEL_27:
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      v11 = a2 + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v11, a3, end, marked_count + 1, this->__marked_count_ + 1);
  }
  return a2;
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCF9D1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  void *v12;
  void *v13;
  int v14;
  char *i;
  char *v16;
  char *v17;
  unint64_t j;
  int v19;
  std::basic_regex<char>::value_type *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  __int128 *v26;
  __int128 *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  char *v38;
  const char *v39;
  std::regex_traits<char>::char_class_type classname;
  char v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  char *v46;
  std::string::size_type v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 *v54;
  _OWORD *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  void **v59;
  _BYTE *v60;
  char *v61;
  char *v62;
  std::string::size_type v63;
  int v64;
  std::string::size_type v65;
  unint64_t v66;
  char *v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  std::string *v78;
  char *v79;
  __int128 v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void **v84;
  char *k;
  void **v86;
  void **v87;
  char v88;
  char *m;
  void **v90;
  void **v91;
  char v92;
  void *v93;
  void *v94;
  void **v95;
  char v96;
  void **v97;
  void **v98;
  char v99;
  void **v100;
  unint64_t v101;
  __int128 v102;
  int64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  __int128 v111;
  int64_t v112;
  char *v113;
  int v114;
  void *v115;
  char *v116;
  int v117;
  void **v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  void *v123[2];
  int64_t v124;
  void *v125[2];
  int64_t v126;
  void *v127[2];
  uint64_t v128;
  void *__p[2];
  int64_t v130;
  std::string::size_type __sz[2];
  int64_t v132;
  __int128 v133;
  int64_t v134;
  __int128 v135;
  int64_t v136;
  __int128 v137;
  int64_t v138;

  if (a2 == a3 || *a2 != 91)
    return;
  if (a2 + 1 == a3)
    goto LABEL_306;
  v5 = a2[1];
  v6 = v5 == 94;
  v7 = (uint64_t)(v5 == 94 ? a2 + 2 : a2 + 1);
  v8 = operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = v8;
  if ((char *)v7 == a3)
    goto LABEL_306;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v7 == 93)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](v8, 93);
    ++v7;
  }
  if ((char *)v7 == a3)
LABEL_306:
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)5>();
  v119 = (void **)(v8 + 136);
  v120 = v8 + 16;
  v118 = (void **)(v8 + 88);
  v121 = a1;
  v122 = a3 - 4;
  while (2)
  {
    v9 = (char *)v7;
    if ((char *)v7 == a3)
    {
      v7 = (uint64_t)a3;
      goto LABEL_15;
    }
    v10 = *(unsigned __int8 *)v7;
    v11 = (char *)v7;
    if (v10 == 93)
      goto LABEL_14;
    v12 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v130 = 0;
    v13 = 0;
    v11 = (char *)v7;
    if ((char *)(v7 + 1) != a3 && v10 == 91)
    {
      v14 = *(unsigned __int8 *)(v7 + 1);
      if (v14 == 46)
      {
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v7 + 2), a3, (uint64_t)__p);
        v13 = (void *)HIBYTE(v130);
        v12 = __p[1];
        goto LABEL_38;
      }
      if (v14 != 58)
      {
        if (v14 == 61)
        {
          if ((uint64_t)&a3[-v7 - 2] >= 2)
          {
            for (i = 0; ; ++i)
            {
              v16 = &i[v7 + 2];
              if (*v16 == 61 && i[v7 + 3] == 93)
                break;
              if (&v122[-v7] == i)
                goto LABEL_305;
            }
            if (v16 != a3)
            {
              std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v133, a1, (char *)(v7 + 2), &i[v7 + 2]);
              if (SHIBYTE(v134) < 0)
              {
                v22 = *((_QWORD *)&v133 + 1);
                if (*((_QWORD *)&v133 + 1))
                {
                  if (*((_QWORD *)&v133 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
                    std::string::__throw_length_error[abi:fe180100]();
                  v23 = (char *)v133;
LABEL_87:
                  v42 = &v23[v22];
                  if (v22 > 0x16)
                  {
                    v50 = (v22 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v22 | 7) != 0x17)
                      v50 = v22 | 7;
                    v51 = v50 + 1;
                    v52 = (char *)operator new(v50 + 1);
                    *((_QWORD *)&v135 + 1) = v22;
                    v136 = v51 | 0x8000000000000000;
                    *(_QWORD *)&v135 = v52;
                    if (v22 < 0x20)
                    {
                      v43 = v52;
                    }
                    else if ((unint64_t)(v52 - v23) < 0x20)
                    {
                      v43 = v52;
                    }
                    else
                    {
                      v53 = v22 & 0x7FFFFFFFFFFFFFE0;
                      v43 = &v52[v22 & 0x7FFFFFFFFFFFFFE0];
                      v54 = (__int128 *)(v23 + 16);
                      v55 = v52 + 16;
                      v56 = v22 & 0x7FFFFFFFFFFFFFE0;
                      do
                      {
                        v57 = *v54;
                        *(v55 - 1) = *(v54 - 1);
                        *v55 = v57;
                        v54 += 2;
                        v55 += 2;
                        v56 -= 32;
                      }
                      while (v56);
                      if (v22 == v53)
                        goto LABEL_90;
                      v23 += v53;
                    }
                  }
                  else
                  {
                    HIBYTE(v136) = v22;
                    v43 = (char *)&v135;
                  }
                  do
                  {
                    v44 = *v23++;
                    *v43++ = v44;
                  }
                  while (v23 != v42);
LABEL_90:
                  *v43 = 0;
                  v45 = HIBYTE(v136);
                  if (v136 >= 0)
                    v46 = (char *)&v135;
                  else
                    v46 = (char *)v135;
                  if (v136 < 0)
                    v45 = *((_QWORD *)&v135 + 1);
                  (*(void (**)(std::string::size_type *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(__sz, *(_QWORD *)(a1 + 16), v46, &v46[v45]);
                  if (v132 >= 0)
                    v47 = HIBYTE(v132);
                  else
                    v47 = __sz[1];
                  if (v47 != 1)
                  {
                    if (v47 != 12)
                    {
                      if (v132 < 0)
                      {
                        *(_BYTE *)__sz[0] = 0;
                        __sz[1] = 0;
                        if ((SHIBYTE(v136) & 0x80000000) == 0)
                        {
LABEL_151:
                          v63 = HIBYTE(v132);
                          v64 = SHIBYTE(v132);
                          v65 = __sz[1];
                          if (v132 < 0)
                            v63 = __sz[1];
                          if (v63)
                          {
                            v67 = *(char **)(v8 + 144);
                            v66 = *(_QWORD *)(v8 + 152);
                            if ((unint64_t)v67 < v66)
                            {
                              if (SHIBYTE(v132) < 0)
                              {
                                std::string::__init_copy_ctor_external(*(std::string **)(v8 + 144), (const std::string::value_type *)__sz[0], __sz[1]);
                              }
                              else
                              {
                                v68 = *(_OWORD *)__sz;
                                *((_QWORD *)v67 + 2) = v132;
                                *(_OWORD *)v67 = v68;
                              }
                              *(_QWORD *)(v8 + 144) = v67 + 24;
                              *(_QWORD *)(v8 + 144) = v67 + 24;
                              goto LABEL_200;
                            }
                            v71 = (char *)*v119;
                            v72 = 0xAAAAAAAAAAAAAAABLL * ((v67 - (_BYTE *)*v119) >> 3);
                            v73 = v72 + 1;
                            if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
                              std::vector<std::string>::__throw_length_error[abi:fe180100]();
                            v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)v71) >> 3);
                            if (2 * v74 > v73)
                              v73 = 2 * v74;
                            if (v74 >= 0x555555555555555)
                              v75 = 0xAAAAAAAAAAAAAAALL;
                            else
                              v75 = v73;
                            *((_QWORD *)&v137 + 1) = v8 + 152;
                            if (v75)
                            {
                              if (v75 > 0xAAAAAAAAAAAAAAALL)
                                std::__throw_bad_array_new_length[abi:fe180100]();
                              v76 = (char *)operator new(24 * v75);
                            }
                            else
                            {
                              v76 = 0;
                            }
                            v78 = (std::string *)&v76[24 * v72];
                            *(_QWORD *)&v135 = v76;
                            *((_QWORD *)&v135 + 1) = v78;
                            v136 = (int64_t)v78;
                            *(_QWORD *)&v137 = &v76[24 * v75];
                            if (v64 < 0)
                            {
                              std::string::__init_copy_ctor_external(v78, (const std::string::value_type *)__sz[0], v65);
                              v71 = *(char **)(v8 + 136);
                              v67 = *(char **)(v8 + 144);
                              v78 = (std::string *)*((_QWORD *)&v135 + 1);
                              v79 = (char *)v136;
                              if (v67 == v71)
                              {
LABEL_187:
                                v81 = v71;
LABEL_188:
                                v82 = v79 + 24;
                                *(_QWORD *)(v8 + 136) = v78;
                                *(_QWORD *)(v8 + 144) = v79 + 24;
                                v83 = *(_QWORD *)(v8 + 152);
                                *(_QWORD *)(v8 + 152) = v137;
                                *(_QWORD *)&v137 = v83;
                                *(_QWORD *)&v135 = v81;
                                *((_QWORD *)&v135 + 1) = v81;
                                if (v71 != v81)
                                {
                                  v84 = (void **)(v71 - 24);
                                  do
                                  {
                                    v136 = (int64_t)v84;
                                    if (*((char *)v84 + 23) < 0)
                                      operator delete(*v84);
                                    v84 -= 3;
                                  }
                                  while (v84 + 3 != (void **)v81);
                                  v71 = v81;
                                }
                                if (v71)
                                  operator delete(v71);
                                *(_QWORD *)(v8 + 144) = v82;
                                goto LABEL_200;
                              }
                            }
                            else
                            {
                              *(_OWORD *)&v78->__r_.__value_.__l.__data_ = *(_OWORD *)__sz;
                              v78->__r_.__value_.__r.__words[2] = v132;
                              v79 = &v76[24 * v72];
                              if (v67 == v71)
                                goto LABEL_187;
                            }
                            do
                            {
                              v80 = *(_OWORD *)(v67 - 24);
                              v78[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v67 - 1);
                              *(_OWORD *)&v78[-1].__r_.__value_.__l.__data_ = v80;
                              --v78;
                              *((_QWORD *)v67 - 2) = 0;
                              *((_QWORD *)v67 - 1) = 0;
                              *((_QWORD *)v67 - 3) = 0;
                              v67 -= 24;
                            }
                            while (v67 != v71);
                            v81 = *(char **)(v8 + 136);
                            v71 = *(char **)(v8 + 144);
                            goto LABEL_188;
                          }
                          v69 = HIBYTE(v134);
                          if (v134 < 0)
                            v69 = *((_QWORD *)&v133 + 1);
                          if (v69 != 2)
                          {
                            if (v69 != 1)
                              std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)1>();
                            v70 = (char *)&v133;
                            if (v134 < 0)
                              v70 = (char *)v133;
                            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](v8, *v70);
                            goto LABEL_200;
                          }
                          if (SHIBYTE(v134) < 0)
                          {
                            if (*((_QWORD *)&v133 + 1))
                            {
                              v77 = (char *)v133;
                              goto LABEL_199;
                            }
                          }
                          else if (HIBYTE(v134))
                          {
                            v77 = (char *)&v133;
LABEL_199:
                            std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:fe180100](v8, *v77, v77[1]);
LABEL_200:
                            if (SHIBYTE(v132) < 0)
                              operator delete((void *)__sz[0]);
                            a1 = v121;
                            if (SHIBYTE(v134) < 0)
                              operator delete((void *)v133);
                            v41 = 0;
                            v7 = (uint64_t)(v16 + 2);
                            goto LABEL_205;
                          }
LABEL_315:
                          __break(1u);
                          return;
                        }
                      }
                      else
                      {
                        LOBYTE(__sz[0]) = 0;
                        HIBYTE(v132) = 0;
                        if ((SHIBYTE(v136) & 0x80000000) == 0)
                          goto LABEL_151;
                      }
LABEL_150:
                      operator delete((void *)v135);
                      goto LABEL_151;
                    }
                    if (v132 < 0)
                    {
                      if (__sz[1] <= 0xA)
                        goto LABEL_315;
                      v48 = (_BYTE *)(__sz[0] + 11);
                      v49 = (_BYTE *)(__sz[0] + 3);
                    }
                    else
                    {
                      if (HIBYTE(v132) <= 2u)
                        goto LABEL_315;
                      v49 = (char *)__sz + 3;
                      v48 = (char *)&__sz[1] + 3;
                      if (HIBYTE(v132) <= 0xAu)
                        goto LABEL_315;
                    }
                    *v48 = *v49;
                  }
                  if ((SHIBYTE(v136) & 0x80000000) == 0)
                    goto LABEL_151;
                  goto LABEL_150;
                }
              }
              else
              {
                v22 = HIBYTE(v134);
                if (HIBYTE(v134))
                {
                  v23 = (char *)&v133;
                  goto LABEL_87;
                }
              }
              std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)1>();
            }
          }
LABEL_305:
          std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)5>();
        }
        v12 = 0;
        v13 = 0;
        v11 = (char *)v7;
        goto LABEL_38;
      }
      v17 = (char *)(v7 + 2);
      if (a3 - (v9 + 2) < 2)
        goto LABEL_305;
      for (j = 0; v9[j + 2] != 58 || v9[j + 3] != 93; ++j)
      {
        if (v122 - v9 == j)
          goto LABEL_305;
      }
      v24 = &v9[j + 2];
      if (v24 == a3)
        goto LABEL_305;
      if (j > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:fe180100]();
      v25 = *(_DWORD *)(a1 + 24);
      if (j >= 0x17)
      {
        v29 = (j & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((j | 7) != 0x17)
          v29 = j | 7;
        v30 = v29 + 1;
        v26 = (__int128 *)operator new(v29 + 1);
        *((_QWORD *)&v135 + 1) = j;
        v136 = v30 | 0x8000000000000000;
        *(_QWORD *)&v135 = v26;
        if (j >= 0x20 && (unint64_t)((char *)v26 - v17) >= 0x20)
        {
          v31 = j & 0x7FFFFFFFFFFFFFE0;
          v27 = (__int128 *)((char *)v26 + (j & 0xFFFFFFFFFFFFFFE0));
          v32 = j & 0xFFFFFFFFFFFFFFE0;
          v33 = (__int128 *)(v9 + 18);
          v34 = v26 + 1;
          do
          {
            v35 = *v33;
            *(v34 - 1) = *(v33 - 1);
            *v34 = v35;
            v33 += 2;
            v34 += 2;
            v32 -= 32;
          }
          while (v32);
          if (j == v31)
          {
LABEL_72:
            *(_BYTE *)v27 = 0;
            v37 = HIBYTE(v136);
            if (v136 >= 0)
              v38 = (char *)&v135;
            else
              v38 = (char *)v135;
            if (v136 < 0)
              v37 = *((_QWORD *)&v135 + 1);
            (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v38, &v38[v37]);
            if (v136 >= 0)
              v39 = (const char *)&v135;
            else
              v39 = (const char *)v135;
            classname = std::__get_classname(v39, v25 & 1);
            if (SHIBYTE(v136) < 0)
              operator delete((void *)v135);
            if (!classname)
              std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)2>();
            v41 = 0;
            *(_DWORD *)(v8 + 160) |= classname;
            v7 = (uint64_t)(v24 + 2);
LABEL_205:
            v61 = v9;
            if (SHIBYTE(v130) < 0)
              goto LABEL_206;
LABEL_136:
            v11 = v61;
            if ((v41 & 1) == 0)
              goto LABEL_15;
LABEL_14:
            v7 = (uint64_t)v11;
            goto LABEL_15;
          }
          v17 += v31;
          v26 = (__int128 *)((char *)v26 + (j & 0xFFFFFFFFFFFFFFE0));
        }
      }
      else
      {
        HIBYTE(v136) = j;
        v26 = &v135;
        v27 = &v135;
        if (!j)
          goto LABEL_72;
      }
      v27 = v26;
      do
      {
        v36 = *v17++;
        *(_BYTE *)v27 = v36;
        v27 = (__int128 *)((char *)v27 + 1);
      }
      while (v17 != v24);
      goto LABEL_72;
    }
LABEL_38:
    v7 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if ((char)v13 >= 0)
      v12 = v13;
    if (v12)
    {
      if (v11 == a3)
        goto LABEL_118;
      goto LABEL_117;
    }
    if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) != 0x40)
    {
      LOBYTE(v19) = *v11;
LABEL_57:
      if ((char)v13 < 0)
      {
        v28 = (void **)__p[0];
        __p[1] = (void *)1;
      }
      else
      {
        HIBYTE(v130) = 1;
        v28 = __p;
      }
      *(_BYTE *)v28 = v19;
      *((_BYTE *)v28 + 1) = 0;
      if (++v11 != a3)
        goto LABEL_117;
LABEL_118:
      if (SHIBYTE(v130) < 0)
      {
        if (!__p[1])
        {
          operator delete(__p[0]);
          goto LABEL_14;
        }
        if (__p[1] != (void *)1)
        {
          v59 = (void **)__p[0];
LABEL_134:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:fe180100](v8, *(char *)v59, *((char *)v59 + 1));
LABEL_135:
          v41 = 1;
          v61 = v11;
          if (SHIBYTE(v130) < 0)
            goto LABEL_206;
          goto LABEL_136;
        }
        v59 = (void **)__p[0];
      }
      else
      {
        if (!HIBYTE(v130))
          goto LABEL_14;
        v59 = __p;
        if (HIBYTE(v130) != 1)
          goto LABEL_134;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](v8, *(char *)v59);
      goto LABEL_135;
    }
    v19 = *v11;
    if (v19 != 92)
      goto LABEL_57;
    v20 = v11 + 1;
    if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
      v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v20, a3, (uint64_t *)__p);
    else
      v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v20, (std::basic_regex<char> *)a3, (uint64_t)__p, v8);
    v11 = v21;
    if (v21 == a3)
      goto LABEL_118;
LABEL_117:
    v58 = *v11;
    if (v58 == 93)
      goto LABEL_118;
    v60 = v11 + 1;
    if (v11 + 1 == a3 || v58 != 45 || *v60 == 93)
      goto LABEL_118;
    v127[0] = 0;
    v127[1] = 0;
    v128 = 0;
    v61 = v11 + 2;
    if (v11 + 2 != a3 && *v60 == 91 && *v61 == 46)
    {
      v61 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)v127);
    }
    else
    {
      if ((v7 | 0x40) == 0x40)
      {
        LODWORD(v60) = *v60;
        if ((_DWORD)v60 == 92)
        {
          if ((_DWORD)v7)
            v62 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, (uint64_t *)v127);
          else
            v62 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v11 + 2), (std::basic_regex<char> *)a3, (uint64_t)v127, v8);
          v61 = v62;
          goto LABEL_210;
        }
      }
      else
      {
        LOBYTE(v60) = *v60;
      }
      HIBYTE(v128) = 1;
      LOWORD(v127[0]) = v60;
    }
LABEL_210:
    *(_OWORD *)v125 = *(_OWORD *)__p;
    v126 = v130;
    __p[1] = 0;
    v130 = 0;
    *(_OWORD *)v123 = *(_OWORD *)v127;
    v124 = v128;
    v127[0] = 0;
    v127[1] = 0;
    v128 = 0;
    __p[0] = 0;
    if (!*(_BYTE *)(v8 + 170))
    {
      v93 = (void *)HIBYTE(v126);
      if (v126 < 0)
        v93 = v125[1];
      if (v93 != (void *)1)
        goto LABEL_311;
      v94 = (void *)HIBYTE(v124);
      if (v124 < 0)
        v94 = v123[1];
      if (v94 != (void *)1)
LABEL_311:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)9>();
      if (*(_BYTE *)(v8 + 169))
      {
        v95 = v125;
        if (v126 < 0)
          v95 = (void **)v125[0];
        v96 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), *(char *)v95);
        v97 = v125;
        if (v126 < 0)
          v97 = (void **)v125[0];
        *(_BYTE *)v97 = v96;
        v98 = v123;
        if (v124 < 0)
          v98 = (void **)v123[0];
        v99 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), *(char *)v98);
        v100 = v123;
        if (v124 < 0)
          v100 = (void **)v123[0];
        *(_BYTE *)v100 = v99;
      }
      v135 = *(_OWORD *)v125;
      v136 = v126;
      v125[0] = 0;
      v125[1] = 0;
      v126 = 0;
      v137 = *(_OWORD *)v123;
      v138 = v124;
      v123[0] = 0;
      v123[1] = 0;
      v124 = 0;
      v101 = *(_QWORD *)(v8 + 96);
      if (v101 >= *(_QWORD *)(v8 + 104))
      {
        v116 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(v118, (uint64_t)&v135);
        v117 = SHIBYTE(v138);
        *(_QWORD *)(v8 + 96) = v116;
        if (v117 < 0)
          operator delete((void *)v137);
      }
      else
      {
        v102 = v135;
        *(_QWORD *)(v101 + 16) = v136;
        *(_OWORD *)v101 = v102;
        v136 = 0;
        v135 = 0uLL;
        v103 = v138;
        *(_OWORD *)(v101 + 24) = v137;
        *(_QWORD *)(v101 + 40) = v103;
        *(_QWORD *)(v8 + 96) = v101 + 48;
      }
      if ((SHIBYTE(v136) & 0x80000000) == 0)
        goto LABEL_289;
      v115 = (void *)v135;
      goto LABEL_288;
    }
    if (*(_BYTE *)(v8 + 169))
    {
      for (k = 0; ; ++k)
      {
        if (SHIBYTE(v126) < 0)
        {
          if (k >= v125[1])
          {
LABEL_224:
            for (m = 0; ; ++m)
            {
              if (SHIBYTE(v124) < 0)
              {
                if (m >= v123[1])
                  goto LABEL_264;
                v91 = (void **)v123[0];
              }
              else
              {
                if ((unint64_t)m >= HIBYTE(v124))
                  goto LABEL_264;
                v91 = v123;
              }
              v92 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), m[(_QWORD)v91]);
              if (SHIBYTE(v124) < 0)
              {
                if (v123[1] < m)
                  goto LABEL_315;
                v90 = (void **)v123[0];
              }
              else
              {
                if ((unint64_t)m > HIBYTE(v124))
                  goto LABEL_315;
                v90 = v123;
              }
              m[(_QWORD)v90] = v92;
            }
          }
          v87 = (void **)v125[0];
        }
        else
        {
          if ((unint64_t)k >= HIBYTE(v126))
            goto LABEL_224;
          v87 = v125;
        }
        v88 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), k[(_QWORD)v87]);
        if (SHIBYTE(v126) < 0)
        {
          if (v125[1] < k)
            goto LABEL_315;
          v86 = (void **)v125[0];
        }
        else
        {
          if ((unint64_t)k > HIBYTE(v126))
            goto LABEL_315;
          v86 = v125;
        }
        k[(_QWORD)v86] = v88;
      }
    }
    v104 = 0;
    while (v126 < 0)
    {
      if (v104 >= v125[1])
        goto LABEL_259;
LABEL_256:
      ++v104;
    }
    if ((unint64_t)v104 < HIBYTE(v126))
      goto LABEL_256;
LABEL_259:
    v105 = 0;
    while (v124 < 0)
    {
      if (v105 >= v123[1])
        goto LABEL_264;
LABEL_261:
      ++v105;
    }
    if ((unint64_t)v105 < HIBYTE(v124))
      goto LABEL_261;
LABEL_264:
    v106 = (char *)HIBYTE(v126);
    if (v126 >= 0)
      v107 = (char *)v125;
    else
      v107 = (char *)v125[0];
    if (v126 < 0)
      v106 = (char *)v125[1];
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v133, v120, v107, &v106[(_QWORD)v107]);
    v108 = (char *)HIBYTE(v124);
    if (v124 >= 0)
      v109 = (char *)v123;
    else
      v109 = (char *)v123[0];
    if (v124 < 0)
      v108 = (char *)v123[1];
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__sz, v120, v109, &v108[(_QWORD)v109]);
    v135 = v133;
    v136 = v134;
    v134 = 0;
    v133 = 0uLL;
    v137 = *(_OWORD *)__sz;
    v138 = v132;
    __sz[0] = 0;
    __sz[1] = 0;
    v132 = 0;
    v110 = *(_QWORD *)(v8 + 96);
    if (v110 >= *(_QWORD *)(v8 + 104))
    {
      v113 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(v118, (uint64_t)&v135);
      v114 = SHIBYTE(v138);
      *(_QWORD *)(v8 + 96) = v113;
      if (v114 < 0)
      {
        operator delete((void *)v137);
        if ((SHIBYTE(v136) & 0x80000000) == 0)
          goto LABEL_281;
      }
      else if ((SHIBYTE(v136) & 0x80000000) == 0)
      {
        goto LABEL_281;
      }
LABEL_276:
      operator delete((void *)v135);
      if (SHIBYTE(v132) < 0)
        goto LABEL_277;
LABEL_282:
      if ((SHIBYTE(v134) & 0x80000000) == 0)
        goto LABEL_289;
LABEL_283:
      v115 = (void *)v133;
LABEL_288:
      operator delete(v115);
      goto LABEL_289;
    }
    v111 = v135;
    *(_QWORD *)(v110 + 16) = v136;
    *(_OWORD *)v110 = v111;
    v136 = 0;
    v135 = 0uLL;
    v112 = v138;
    *(_OWORD *)(v110 + 24) = v137;
    *(_QWORD *)(v110 + 40) = v112;
    *(_QWORD *)(v8 + 96) = v110 + 48;
    if (SHIBYTE(v136) < 0)
      goto LABEL_276;
LABEL_281:
    if ((SHIBYTE(v132) & 0x80000000) == 0)
      goto LABEL_282;
LABEL_277:
    operator delete((void *)__sz[0]);
    if (SHIBYTE(v134) < 0)
      goto LABEL_283;
LABEL_289:
    if (SHIBYTE(v124) < 0)
    {
      operator delete(v123[0]);
      if (SHIBYTE(v126) < 0)
        goto LABEL_295;
LABEL_291:
      if (SHIBYTE(v128) < 0)
LABEL_296:
        operator delete(v127[0]);
    }
    else
    {
      if ((SHIBYTE(v126) & 0x80000000) == 0)
        goto LABEL_291;
LABEL_295:
      operator delete(v125[0]);
      if (SHIBYTE(v128) < 0)
        goto LABEL_296;
    }
    v41 = 1;
    if ((SHIBYTE(v130) & 0x80000000) == 0)
      goto LABEL_136;
LABEL_206:
    operator delete(__p[0]);
    v11 = v61;
    if ((v41 & 1) != 0)
      goto LABEL_14;
LABEL_15:
    if (v9 != (char *)v7)
      continue;
    break;
  }
  if (v9 == a3)
    goto LABEL_306;
  if (*v9 == 45)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](v8, 45);
    ++v9;
  }
  if (v9 == a3 || *v9 != 93)
    goto LABEL_306;
}

void sub_18CCFAC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a38 < 0)
    operator delete(__p);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFAE88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int v7;
  char *v8;
  size_t v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  size_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  int v24;

  if (a2 == a3)
    return a2;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v7 = *a2;
  if (v7 > 62)
  {
    if (v7 == 63)
    {
      v8 = a2 + 1;
      if (v6)
        v18 = 1;
      else
        v18 = v8 == a3;
      if (!v18 && *v8 == 63)
      {
        v8 = a2 + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v9 = 0;
        v16 = 1;
        goto LABEL_42;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v9 = 0;
      v16 = 1;
      goto LABEL_72;
    }
    v8 = a2;
    if (v7 != 123)
      return v8;
    v10 = a2 + 1;
    if (a2 + 1 != a3)
    {
      v11 = *v10;
      if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
      {
        v12 = v11 - 48;
        v13 = a2 + 2;
        if (a2 + 2 == a3)
        {
LABEL_20:
          v13 = a3;
        }
        else
        {
          while (1)
          {
            v14 = *v13;
            if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
              break;
            if (v12 >= 214748364)
              goto LABEL_75;
            v12 = v14 + 10 * v12 - 48;
            if (++v13 == a3)
              goto LABEL_20;
          }
        }
        if (v13 != v10)
        {
          if (v13 != a3)
          {
            v15 = *v13;
            if (v15 != 44)
            {
              if (v15 == 125)
              {
                v8 = v13 + 1;
                if (!v6 && v8 != a3 && *v8 == 63)
                {
                  v9 = v12;
                  v8 = v13 + 2;
                  __mexp_begin = __mexp_begin;
                  __mexp_end = __mexp_end;
                  v16 = v12;
LABEL_42:
                  v19 = 0;
LABEL_73:
                  std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v9, v16, a4, __mexp_begin, __mexp_end, v19);
                  return v8;
                }
                v9 = v12;
                __mexp_begin = __mexp_begin;
                __mexp_end = __mexp_end;
                v16 = v12;
LABEL_72:
                v19 = 1;
                goto LABEL_73;
              }
              goto LABEL_75;
            }
            v20 = v13 + 1;
            if (v13 + 1 == a3)
              goto LABEL_75;
            v21 = *v20;
            if (v21 == 125)
            {
              v8 = v13 + 2;
              if (!v6 && v8 != a3 && *v8 == 63)
              {
                v9 = v12;
                v8 = v13 + 3;
                __mexp_begin = __mexp_begin;
                __mexp_end = __mexp_end;
                goto LABEL_35;
              }
              v9 = v12;
              __mexp_begin = __mexp_begin;
              __mexp_end = __mexp_end;
LABEL_45:
              v16 = -1;
              goto LABEL_72;
            }
            if ((v21 & 0xF8) == 0x30 || (v21 & 0xFE) == 0x38)
            {
              v22 = v21 - 48;
              v23 = v13 + 2;
              if (v23 == a3)
              {
LABEL_61:
                v23 = a3;
              }
              else
              {
                while (1)
                {
                  v24 = *v23;
                  if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38)
                    break;
                  if (v22 >= 214748364)
                    goto LABEL_75;
                  v22 = v24 + 10 * v22 - 48;
                  if (++v23 == a3)
                    goto LABEL_61;
                }
              }
              if (v23 != v20 && v23 != a3 && *v23 == 125)
              {
                if (v22 >= v12)
                {
                  v8 = v23 + 1;
                  if (!v6 && v8 != a3 && *v8 == 63)
                  {
                    v9 = v12;
                    v16 = v22;
                    v8 = v23 + 2;
                    __mexp_begin = __mexp_begin;
                    __mexp_end = __mexp_end;
                    goto LABEL_42;
                  }
                  v9 = v12;
                  v16 = v22;
                  __mexp_begin = __mexp_begin;
                  __mexp_end = __mexp_end;
                  goto LABEL_72;
                }
                goto LABEL_75;
              }
            }
          }
          std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)7>();
        }
      }
    }
LABEL_75:
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)8>();
  }
  if (v7 == 42)
  {
    v8 = a2 + 1;
    if (v6)
      v17 = 1;
    else
      v17 = v8 == a3;
    if (!v17 && *v8 == 63)
    {
      v8 = a2 + 2;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v9 = 0;
      goto LABEL_35;
    }
    __mexp_begin = __mexp_begin;
    __mexp_end = __mexp_end;
    v9 = 0;
    goto LABEL_45;
  }
  v8 = a2;
  if (v7 == 43)
  {
    v8 = a2 + 1;
    if (!v6 && v8 != a3 && *v8 == 63)
    {
      v8 = a2 + 2;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v9 = 1;
LABEL_35:
      v16 = -1;
      goto LABEL_42;
    }
    __mexp_begin = __mexp_begin;
    __mexp_end = __mexp_end;
    v9 = 1;
    goto LABEL_45;
  }
  return v8;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_1E2523C88;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_1E25224F0;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_18CCFB318(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFB378(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18D789840](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_18CCFB3C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E25224C0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E25224C0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (*(_QWORD *)(a2 + 64) - v3) >> 4;
  if (*(_DWORD *)a2 != -991)
  {
    if (v4 > v2)
    {
      *(_QWORD *)(v3 + 16 * v2) = 0;
      if (!*(_QWORD *)(result + 32))
      {
        *(_DWORD *)a2 = -994;
        goto LABEL_54;
      }
      if (*(_QWORD *)(result + 24))
      {
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
        *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
        v28 = *(_DWORD *)(result + 44);
        v29 = *(_DWORD *)(result + 48);
        if (v28 != v29)
        {
          v30 = (v29 - 1);
          v31 = (v28 - 1);
          v32 = *(_QWORD *)(a2 + 32);
          v33 = *(_QWORD *)(a2 + 24);
          v34 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v32) >> 3);
          if (v34 <= v31)
            v34 = v31;
          v35 = v34 - v31;
          if (~v31 + v30 < v34 - v31)
            v35 = ~v31 + v30;
          v36 = v35 + 1;
          if (v35 + 1 >= 3)
          {
            v37 = v36 & 1;
            if ((v36 & 1) == 0)
              v37 = 2;
            v38 = v36 - v37;
            v39 = ~v35 + v37;
            v40 = v32 + 24 * v31 + 24;
            do
            {
              *(_QWORD *)(v40 - 24) = v33;
              *(_QWORD *)(v40 - 16) = v33;
              *(_QWORD *)v40 = v33;
              *(_QWORD *)(v40 + 8) = v33;
              *(_BYTE *)(v40 - 8) = 0;
              *(_BYTE *)(v40 + 16) = 0;
              v40 += 48;
              v39 += 2;
            }
            while (v39);
            v31 += v38;
          }
          v41 = v34 - v31;
          v42 = (_BYTE *)(v32 + 24 * v31 + 16);
          v43 = v30 - v31;
          while (v41)
          {
            *((_QWORD *)v42 - 2) = v33;
            *((_QWORD *)v42 - 1) = v33;
            --v41;
            *v42 = 0;
            v42 += 24;
            if (!--v43)
              return result;
          }
          goto LABEL_55;
        }
        return result;
      }
LABEL_52:
      *(_DWORD *)a2 = -992;
      return result;
    }
LABEL_55:
    __break(1u);
    return result;
  }
  if (v4 <= v2)
    goto LABEL_55;
  v5 = *(_QWORD *)(v3 + 16 * v2) + 1;
  *(_QWORD *)(v3 + 16 * v2) = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_52;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_54:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 != v13)
  {
    v14 = (v13 - 1);
    v15 = (v12 - 1);
    v16 = *(_QWORD *)(a2 + 32);
    v17 = *(_QWORD *)(a2 + 24);
    v18 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v16) >> 3);
    if (v18 <= v15)
      v18 = v15;
    v19 = v18 - v15;
    if (~v15 + v14 < v18 - v15)
      v19 = ~v15 + v14;
    v20 = v19 + 1;
    if (v19 + 1 >= 3)
    {
      v21 = v20 & 1;
      if ((v20 & 1) == 0)
        v21 = 2;
      v22 = v20 - v21;
      v23 = ~v19 + v21;
      v24 = v16 + 24 * v15 + 24;
      do
      {
        *(_QWORD *)(v24 - 24) = v17;
        *(_QWORD *)(v24 - 16) = v17;
        *(_QWORD *)v24 = v17;
        *(_QWORD *)(v24 + 8) = v17;
        *(_BYTE *)(v24 - 8) = 0;
        *(_BYTE *)(v24 + 16) = 0;
        v24 += 48;
        v23 += 2;
      }
      while (v23);
      v15 += v22;
    }
    v25 = v18 - v15;
    v26 = (_BYTE *)(v16 + 24 * v15 + 16);
    v27 = v14 - v15;
    while (v25)
    {
      *((_QWORD *)v26 - 2) = v17;
      *((_QWORD *)v26 - 1) = v17;
      --v25;
      *v26 = 0;
      v26 += 24;
      if (!--v27)
        return result;
    }
    goto LABEL_55;
  }
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(unsigned int *)(result + 40);
  v4 = *(_QWORD *)(a3 + 56);
  if (v3 >= (*(_QWORD *)(a3 + 64) - v4) >> 4)
    goto LABEL_19;
  *(_QWORD *)(v4 + 16 * v3 + 8) = *(_QWORD *)(a3 + 16);
  v5 = *(_DWORD *)(result + 44);
  v6 = *(_DWORD *)(result + 48);
  if (v5 != v6)
  {
    v7 = (v6 - 1);
    v8 = (v5 - 1);
    v9 = *(_QWORD *)(a3 + 32);
    v10 = *(_QWORD *)(a3 + 24);
    v11 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 40) - v9) >> 3);
    if (v11 <= v8)
      v11 = v8;
    v12 = v11 - v8;
    if (~v8 + v7 < v11 - v8)
      v12 = ~v8 + v7;
    v13 = v12 + 1;
    if (v12 + 1 >= 3)
    {
      v14 = v13 & 1;
      if ((v13 & 1) == 0)
        v14 = 2;
      v15 = v13 - v14;
      v16 = ~v12 + v14;
      v17 = v9 + 24 * v8 + 24;
      do
      {
        *(_QWORD *)(v17 - 24) = v10;
        *(_QWORD *)(v17 - 16) = v10;
        *(_QWORD *)v17 = v10;
        *(_QWORD *)(v17 + 8) = v10;
        *(_BYTE *)(v17 - 8) = 0;
        *(_BYTE *)(v17 + 16) = 0;
        v17 += 48;
        v16 += 2;
      }
      while (v16);
      v8 += v15;
    }
    v18 = v11 - v8;
    v19 = (_BYTE *)(v9 + 24 * v8 + 16);
    v20 = v7 - v8;
    while (v18)
    {
      *((_QWORD *)v19 - 2) = v10;
      *((_QWORD *)v19 - 1) = v10;
      --v18;
      *v19 = 0;
      v19 += 24;
      if (!--v20)
        return result;
    }
LABEL_19:
    __break(1u);
  }
  return result;
}

