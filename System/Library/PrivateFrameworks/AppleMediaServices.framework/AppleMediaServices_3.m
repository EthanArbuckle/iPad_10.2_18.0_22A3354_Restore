void sub_18CBDAA54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void (***v29)(_QWORD);

  if (!*(_BYTE *)(v28 + 224))
    (**v29)(v29);
  if (*(char *)(v28 + 255) < 0)
    operator delete(*a13);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](a15);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBDAB1C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBDA698);
}

void AMSCore::EphemeralAccountProvider::saveAccount(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  _BYTE *v8;
  std::string *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  void (***v15)(uint64_t);
  unsigned __int8 *v16;
  unsigned __int8 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  _QWORD *v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  void **v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  std::runtime_error *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  const std::runtime_error *v38;
  char v39;
  std::runtime_error_vtbl *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count_vtbl *v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _BOOL4 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  char v72;
  std::runtime_error_vtbl *v73;
  const char *imp;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  std::runtime_error_vtbl *v78;
  unint64_t *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int **v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::mutex **v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  _QWORD *i;
  void **v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::mutex **v107;
  std::runtime_error *v108;
  std::string *v109;
  std::runtime_error v110;
  __int128 v111;
  unsigned int **v112;
  unsigned int *v113;
  uint64_t v114;
  __int128 v115;
  _BYTE v116[32];
  unsigned int **v117;
  unsigned int *v118;
  uint64_t v119;
  __int128 v120;
  char v121;
  std::runtime_error v122;
  __int128 v123;
  unsigned int **v124;
  unsigned int *v125;
  uint64_t v126;
  __int128 v127;

  v6 = (char *)operator new(0x1B0uLL);
  v7 = (unint64_t)v6;
  v8 = v6 + 408;
  *(_QWORD *)v6 = AMSCore::EphemeralAccountProvider::saveAccount;
  *((_QWORD *)v6 + 1) = AMSCore::EphemeralAccountProvider::saveAccount;
  v9 = (std::string *)(v6 + 232);
  v10 = v6 + 296;
  v108 = (std::runtime_error *)(v6 + 152);
  v109 = (std::string *)(v6 + 328);
  v11 = v6 + 352;
  v107 = (std::mutex **)(v6 + 368);
  v12 = (uint64_t *)(v6 + 384);
  v13 = (uint64_t)(v6 + 16);
  *((_QWORD *)v6 + 50) = a1;
  *((_OWORD *)v6 + 24) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  do
    v14 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v14 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v15 = (void (***)(uint64_t))(v6 + 24);
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v116, v13);
  *a3 = *(_OWORD *)v116;
  v16 = (unsigned __int8 *)(a1 + 256);
  do
    v17 = __ldaxr(v16);
  while (__stxr(1u, v16));
  if ((v17 & 1) != 0)
  {
    v20 = v13;
    v8[16] = 0;
    std::mutex::lock((std::mutex *)(*(_QWORD *)(v7 + 400) + 192));
    v21 = *(_QWORD *)(v7 + 400);
    if (*(_QWORD *)(v21 + 280))
      goto LABEL_13;
    v22 = (unsigned __int8 *)(v21 + 256);
    do
      v23 = __ldxr(v22);
    while (__stlxr(1u, v22));
    if ((v23 & 1) != 0)
    {
LABEL_13:
      v24 = operator new(0x18uLL);
      v25 = (std::mutex *)(*(_QWORD *)(v7 + 400) + 192);
      v24[1] = v21 + 264;
      v24[2] = v7;
      v26 = *(_QWORD *)(v21 + 264);
      *v24 = v26;
      *(_QWORD *)(v26 + 8) = v24;
      *(_QWORD *)(v21 + 264) = v24;
      ++*(_QWORD *)(v21 + 280);
      std::mutex::unlock(v25);
      return;
    }
    std::mutex::unlock((std::mutex *)(*(_QWORD *)(v7 + 400) + 192));
    v13 = v20;
  }
  *(_QWORD *)(v7 + 368) = *(_QWORD *)(v7 + 400) + 192;
  *(_BYTE *)(v7 + 376) = 1;
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 384) + 64))(*(_QWORD *)(v7 + 384));
  if (*(char *)(v18 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
  }
  else
  {
    v19 = *(_OWORD *)v18;
    v109->__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
    *(_OWORD *)&v109->__r_.__value_.__l.__data_ = v19;
  }
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 72))(*v12);
  v28 = v27;
  *(_BYTE *)(v7 + 232) = 0;
  *(_BYTE *)(v7 + 256) = 0;
  if (*(_BYTE *)(v27 + 24))
  {
    if (*(char *)(v27 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v27, *(_QWORD *)(v27 + 8));
    }
    else
    {
      v29 = *(_OWORD *)v27;
      v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 16);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v29;
    }
    *(_BYTE *)(v7 + 256) = 1;
  }
  *(_QWORD *)(v7 + 264) = *(_QWORD *)(v28 + 32);
  v30 = (void **)(v7 + 272);
  if (*(char *)(v28 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 272), *(const std::string::value_type **)(v28 + 40), *(_QWORD *)(v28 + 48));
  }
  else
  {
    v31 = *(_OWORD *)(v28 + 40);
    *(_QWORD *)(v7 + 288) = *(_QWORD *)(v28 + 56);
    *(_OWORD *)v30 = v31;
  }
  AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked(v11, *(_QWORD **)(v7 + 400), (uint64_t)v9);
  v32 = *(_OWORD *)(v7 + 352);
  *(_OWORD *)v8 = v32;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v33 = atomic_load((unint64_t *)(v32 + 96));
  v34 = v108;
  if (v33)
    goto LABEL_27;
  v8[16] = 1;
  v35 = (unint64_t *)(*(_QWORD *)(v7 + 408) + 96);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v7, v35));
  if (v36)
  {
LABEL_27:
    v37 = *(_QWORD *)v8;
    if (!*(_BYTE *)(*(_QWORD *)v8 + 88))
      goto LABEL_167;
    v106 = v13;
    v38 = (const std::runtime_error *)(v37 + 8);
    v39 = *(_BYTE *)(v37 + 80);
    if (v39)
    {
      v40 = v38->__vftable;
      v38->__vftable = 0;
      v108->__vftable = v40;
    }
    else
    {
      std::runtime_error::runtime_error(v108, v38);
      *(_OWORD *)(v7 + 168) = *(_OWORD *)(v37 + 24);
      v41 = (_QWORD *)(v37 + 48);
      v42 = *(_QWORD *)(v37 + 48);
      *(_QWORD *)(v7 + 192) = v42;
      v43 = v7 + 192;
      *(_QWORD *)(v7 + 152) = off_1E2521330;
      *(_QWORD *)(v7 + 184) = *(_QWORD *)(v37 + 40);
      v44 = *(_QWORD *)(v37 + 56);
      *(_QWORD *)(v7 + 200) = v44;
      if (v44)
      {
        *(_QWORD *)(v42 + 16) = v43;
        *(_QWORD *)(v37 + 40) = v41;
        *v41 = 0;
        *(_QWORD *)(v37 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v7 + 184) = v43;
      }
      v45 = *(_QWORD *)(v7 + 408);
      *(_OWORD *)(v7 + 208) = *(_OWORD *)(v45 + 64);
      *(_QWORD *)(v45 + 64) = 0;
      *(_QWORD *)(v45 + 72) = 0;
    }
    *(_BYTE *)(v7 + 224) = v39;
    v46 = *(_QWORD *)(v7 + 416);
    v47 = v106;
    if (!v46)
      goto LABEL_38;
    v48 = (unint64_t *)(v46 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      v57 = *(std::__shared_weak_count **)(v7 + 416);
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      v50 = *(std::__shared_weak_count **)(v7 + 360);
      if (!v50)
        goto LABEL_42;
    }
    else
    {
LABEL_38:
      v50 = *(std::__shared_weak_count **)(v7 + 360);
      if (!v50)
        goto LABEL_42;
    }
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      if ((*(char *)(v7 + 295) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_43;
    }
LABEL_42:
    if ((*(char *)(v7 + 295) & 0x80000000) == 0)
    {
LABEL_44:
      if (*(_BYTE *)(v7 + 256) && *(char *)(v7 + 255) < 0)
        operator delete(v9->__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(v7 + 224))
      {
        std::runtime_error::runtime_error((std::runtime_error *)v116, v108);
        v55 = (_QWORD *)(v7 + 192);
        v56 = *(_QWORD *)(v7 + 192);
        *(_OWORD *)&v116[16] = *(_OWORD *)(v7 + 168);
        *(_QWORD *)v116 = off_1E2521330;
        v117 = *(unsigned int ***)(v7 + 184);
        v118 = (unsigned int *)v56;
        v119 = *(_QWORD *)(v7 + 200);
        if (v119)
        {
          *(_QWORD *)(v56 + 16) = &v118;
          *(_QWORD *)(v7 + 184) = v55;
          *v55 = 0;
          *(_QWORD *)(v7 + 200) = 0;
        }
        else
        {
          v117 = &v118;
        }
        v120 = *(_OWORD *)(v7 + 208);
        *(_QWORD *)(v7 + 208) = 0;
        *(_QWORD *)(v7 + 216) = 0;
        v121 = 1;
        std::runtime_error::runtime_error(&v122, (const std::runtime_error *)v116);
        v123 = *(_OWORD *)&v116[16];
        v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v124 = v117;
        v125 = v118;
        v126 = v119;
        if (v119)
        {
          *((_QWORD *)v118 + 2) = &v125;
          v117 = &v118;
          v118 = 0;
          v119 = 0;
        }
        else
        {
          v124 = &v125;
        }
        v127 = v120;
        v120 = 0uLL;
        std::runtime_error::runtime_error(&v110, &v122);
        v111 = v123;
        v110.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v80 = v125;
        v112 = v124;
        v113 = v125;
        v114 = v126;
        if (v126)
        {
          *((_QWORD *)v125 + 2) = &v113;
          v80 = 0;
          v124 = &v125;
          v125 = 0;
          v126 = 0;
        }
        else
        {
          v112 = &v113;
        }
        v115 = v127;
        v127 = 0uLL;
        v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, v80);
        MEMORY[0x18D7898AC](&v122);
        if (*(_BYTE *)(v7 + 104))
        {
          if (!*(_BYTE *)(v7 + 96))
            (**v15)(v7 + 24);
          *(_BYTE *)(v7 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), &v110);
        v82 = v112;
        v81 = v113;
        *(_QWORD *)(v7 + 64) = v113;
        v83 = v7 + 64;
        *(_OWORD *)(v7 + 40) = v111;
        *(_QWORD *)(v7 + 24) = off_1E2521330;
        *(_QWORD *)(v7 + 56) = v82;
        v84 = v114;
        *(_QWORD *)(v7 + 72) = v114;
        if (v84)
        {
          *((_QWORD *)v81 + 2) = v83;
          v81 = 0;
          v112 = &v113;
          v113 = 0;
          v114 = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 56) = v83;
        }
        v34 = v108;
        v47 = v106;
        *(_OWORD *)(v7 + 80) = v115;
        v115 = 0uLL;
        *(_BYTE *)(v7 + 96) = 0;
        *(_BYTE *)(v7 + 104) = 1;
        v110.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112, v81);
        MEMORY[0x18D7898AC](&v110);
        if (v121)
        {
          *(_QWORD *)v116 = off_1E2521330;
          v85 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
          if (*((_QWORD *)&v120 + 1))
          {
            v86 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, v118);
          MEMORY[0x18D7898AC](v116);
        }
        v88 = v107;
LABEL_155:
        v105 = *(_QWORD *)(v7 + 152);
        if (*(_BYTE *)(v7 + 224))
        {
          v34->__vftable = 0;
          if (v105)
            (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
          if ((*(char *)(v7 + 351) & 0x80000000) == 0)
          {
LABEL_159:
            if (!*(_BYTE *)(v7 + 376))
              goto LABEL_164;
            goto LABEL_163;
          }
        }
        else
        {
          (*(void (**)(std::runtime_error *))v105)(v34);
          if ((*(char *)(v7 + 351) & 0x80000000) == 0)
            goto LABEL_159;
        }
        operator delete(v109->__r_.__value_.__l.__data_);
        if (!*(_BYTE *)(v7 + 376))
        {
LABEL_164:
          *(_QWORD *)(v7 + 152) = v47;
          *(_QWORD *)v7 = 0;
          AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v34);
          return;
        }
LABEL_163:
        AMSCore::AwaitableMutex::unlock(*v88);
        goto LABEL_164;
      }
      *(_QWORD *)v116 = v108->__vftable;
      if (*(_QWORD *)v116)
      {
        v53 = (std::__shared_weak_count *)operator new();
        v54 = (std::__shared_weak_count_vtbl *)v108->__vftable;
        v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2523180;
        v53->__shared_owners_ = 0;
        v53->__shared_weak_owners_ = 0;
        v53[1].__vftable = v54;
      }
      else
      {
        v53 = 0;
      }
      *(_QWORD *)&v116[8] = v53;
      v108->__vftable = 0;
      AMSCore::IAccountProvider::merge(v12, v116);
      if (v53)
      {
        v58 = (unint64_t *)&v53->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v12 + 96))(*v12))
      {
        v60 = *v12;
        *(_QWORD *)v116 = operator new(0x40uLL);
        *(_OWORD *)&v116[8] = xmmword_18CF51B00;
        strcpy(*(char **)v116, "com.apple.AppleMediaServicesCore.IMediaAccount.appStoreSandbox");
        v61 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v60 + 104))(v60, v116);
        if ((v116[23] & 0x80000000) != 0)
          operator delete(*(void **)v116);
        v62 = *(_QWORD *)(v7 + 384);
        v63 = *(_QWORD *)(v7 + 392);
        v64 = *(_QWORD **)(v7 + 400);
        if (v61)
        {
          v65 = v64[22] != 0;
          *v12 = 0;
          v12[1] = 0;
          v66 = (std::__shared_weak_count *)v64[23];
          v64[22] = v62;
          v64[23] = v63;
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            goto LABEL_94;
          }
        }
        else
        {
          v65 = v64[20] != 0;
          *v12 = 0;
          v12[1] = 0;
          v66 = (std::__shared_weak_count *)v64[21];
          v64[20] = v62;
          v64[21] = v63;
          if (v66)
          {
            v79 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v79);
            while (__stlxr(v68 - 1, v79));
LABEL_94:
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
        }
LABEL_150:
        v88 = v107;
        if (*(_BYTE *)(v7 + 376))
        {
          AMSCore::AwaitableMutex::unlock(*v107);
          v104 = *(_QWORD *)(v7 + 400);
          *(_BYTE *)(v7 + 376) = 0;
          AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::notify(v104 + 48, (uint64_t)v109, v65);
          if (*(_BYTE *)(v7 + 104) && !*(_BYTE *)(v7 + 96))
            (**v15)(v7 + 24);
          *(_BYTE *)(v7 + 96) = 1;
          *(_BYTE *)(v7 + 104) = 1;
          goto LABEL_155;
        }
        std::__throw_system_error(1, "unique_lock::unlock: not locked");
LABEL_167:
        __break(1u);
        return;
      }
      v69 = *(_QWORD *)(v7 + 400);
      v70 = *(uint64_t **)(v69 + 24);
      v71 = *(uint64_t **)(v69 + 32);
      if (v70 != v71)
      {
        while (1)
        {
          AMSCore::operator==(*v70, *v12);
          if ((v72 & 1) != 0)
            break;
          if (++v70 == v71)
          {
            v70 = v71;
            break;
          }
        }
      }
      (*(void (**)(std::runtime_error *__return_ptr))(*(_QWORD *)*v12 + 56))(&v122);
      v73 = v122.__vftable;
      imp = v122.__imp_.__imp_;
      if (v122.__vftable != (std::runtime_error_vtbl *)v122.__imp_.__imp_)
      {
        v75 = *(_QWORD *)(v7 + 400);
        do
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t, std::runtime_error_vtbl *))(*(_QWORD *)*v12 + 128))(v116, *v12, v73);
          if (v116[24])
          {
            v76 = *(_QWORD *)(v75 + 160);
            *(_OWORD *)v10 = *(_OWORD *)v116;
            *((_QWORD *)v10 + 2) = *(_QWORD *)&v116[16];
            memset(v116, 0, 24);
            *(_BYTE *)(v7 + 320) = 1;
            (*(void (**)(uint64_t, char *, std::runtime_error_vtbl *))(*(_QWORD *)v76 + 160))(v76, v10, v73);
            if (*(_BYTE *)(v7 + 320) && *(char *)(v7 + 319) < 0)
              operator delete(*(void **)v10);
            if (v116[24] && (v116[23] & 0x80000000) != 0)
              operator delete(*(void **)v116);
          }
          ++v73;
        }
        while (v73 != (std::runtime_error_vtbl *)imp);
        v73 = v122.__vftable;
      }
      if (v73)
      {
        v77 = v122.__imp_.__imp_;
        v78 = v73;
        if ((std::runtime_error_vtbl *)v122.__imp_.__imp_ != v73)
        {
          do
          {
            if (*(v77 - 1) < 0)
              operator delete(*((void **)v77 - 3));
            v77 -= 24;
          }
          while (v77 != (const char *)v73);
          v78 = v122.__vftable;
        }
        v122.__imp_.__imp_ = (const char *)v73;
        operator delete(v78);
      }
      v89 = *(uint64_t **)(v69 + 32);
      v65 = v70 != v89;
      if (v70 != v89)
      {
        v90 = v70 + 1;
        if (v70 + 1 != v89)
        {
          do
          {
            v70 = v90;
            v91 = *(v90 - 1);
            *(v90 - 1) = *v90;
            *v90 = 0;
            if (v91)
              (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
            v90 = v70 + 1;
          }
          while (v70 + 1 != v89);
          v89 = *(uint64_t **)(v69 + 32);
        }
        while (v89 != v70)
        {
          v93 = *--v89;
          v92 = v93;
          *v89 = 0;
          if (v93)
            (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
        }
        *(_QWORD *)(v69 + 32) = v70;
      }
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*v12 + 56))(v116);
      v95 = *(char **)v116;
      v94 = *(char **)&v116[8];
      v34 = v108;
      if (*(_QWORD *)v116 == *(_QWORD *)&v116[8])
      {
        if (!*(_QWORD *)v116)
        {
LABEL_145:
          (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*v12 + 48))(v116);
          v100 = *(_QWORD **)(v69 + 32);
          v47 = v106;
          if ((unint64_t)v100 >= *(_QWORD *)(*(_QWORD *)(v7 + 400) + 40))
          {
            v102 = std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::IMediaAccount>>((_QWORD *)(v69 + 24), (uint64_t *)v116);
          }
          else
          {
            v101 = *(_QWORD *)v116;
            *(_QWORD *)v116 = 0;
            *v100 = v101;
            v102 = v100 + 1;
          }
          *(_QWORD *)(v69 + 32) = v102;
          v103 = *(_QWORD *)v116;
          *(_QWORD *)v116 = 0;
          if (v103)
            (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
          goto LABEL_150;
        }
      }
      else
      {
        do
        {
          v96 = *(_QWORD **)(v69 + 24);
          for (i = *(_QWORD **)(v69 + 32); v96 != i; ++v96)
            (*(void (**)(_QWORD, _QWORD, char *))(*(_QWORD *)*v96 + 144))(*v96, 0, v95);
          v95 += 24;
        }
        while (v95 != v94);
        v95 = *(char **)v116;
        if (!*(_QWORD *)v116)
          goto LABEL_145;
      }
      v98 = *(void ***)&v116[8];
      v99 = v95;
      if (*(char **)&v116[8] != v95)
      {
        do
        {
          if (*((char *)v98 - 1) < 0)
            operator delete(*(v98 - 3));
          v98 -= 3;
        }
        while (v98 != (void **)v95);
        v99 = *(char **)v116;
      }
      *(_QWORD *)&v116[8] = v95;
      operator delete(v99);
      goto LABEL_145;
    }
LABEL_43:
    operator delete(*v30);
    goto LABEL_44;
  }
}

void sub_18CBDB6F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v31;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  v31 = *(_QWORD *)(v29 + 152);
  if (*(_BYTE *)(v29 + 224))
  {
    *a12 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  else
  {
    (*(void (**)(_QWORD *))v31)(a12);
  }
  if (*(char *)(v29 + 351) < 0)
    operator delete(*a13);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](a11);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBDB844()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBDB6B0);
}

void AMSCore::EphemeralAccountProvider::saveAccount(unint64_t a1)
{
  std::runtime_error *v2;
  std::string *v3;
  std::string *v4;
  std::mutex **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  __int128 v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  const std::runtime_error *v20;
  char v21;
  std::runtime_error_vtbl *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count_vtbl *v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _BOOL4 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  char v53;
  const char *imp;
  std::runtime_error_vtbl *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  std::runtime_error_vtbl *v60;
  unint64_t *v61;
  unsigned int *v62;
  void **v63;
  unsigned int *v64;
  unsigned int **v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *i;
  void **v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  std::runtime_error *v89;
  std::mutex **v90;
  uint64_t v91;
  std::runtime_error v92;
  __int128 v93;
  unsigned int **v94;
  unsigned int *v95;
  uint64_t v96;
  __int128 v97;
  _BYTE v98[32];
  unsigned int **v99;
  unsigned int *v100;
  uint64_t v101;
  __int128 v102;
  char v103;
  std::runtime_error v104;
  __int128 v105;
  unsigned int **v106;
  unsigned int *v107;
  uint64_t v108;
  __int128 v109;

  v2 = (std::runtime_error *)(a1 + 152);
  v3 = (std::string *)(a1 + 232);
  v4 = (std::string *)(a1 + 328);
  v5 = (std::mutex **)(a1 + 368);
  v6 = (uint64_t *)(a1 + 384);
  v7 = a1 + 16;
  v91 = a1 + 328;
  if (*(_BYTE *)(a1 + 424))
    goto LABEL_17;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 400) + 192;
  *(_BYTE *)(a1 + 376) = 1;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 384) + 64))(*(_QWORD *)(a1 + 384));
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
  }
  else
  {
    v9 = *(_OWORD *)v8;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v6 + 72))(*v6);
  v11 = v10;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(v10 + 24))
  {
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
    }
    else
    {
      v12 = *(_OWORD *)v10;
      v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v12;
    }
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(v11 + 32);
  v13 = (std::string *)(a1 + 272);
  if (*(char *)(v11 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(v11 + 40), *(_QWORD *)(v11 + 48));
  }
  else
  {
    v14 = *(_OWORD *)(v11 + 40);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(v11 + 56);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked((_OWORD *)(a1 + 352), *(_QWORD **)(a1 + 400), (uint64_t)v3);
  v15 = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a1 + 408) = v15;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  if (atomic_load((unint64_t *)(v15 + 96)))
    goto LABEL_17;
  *(_BYTE *)(a1 + 424) = 1;
  v17 = (unint64_t *)(*(_QWORD *)(a1 + 408) + 96);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(a1, v17));
  if (v18)
  {
LABEL_17:
    v19 = *(_QWORD *)(a1 + 408);
    if (!*(_BYTE *)(v19 + 88))
      goto LABEL_157;
    v20 = (const std::runtime_error *)(v19 + 8);
    v21 = *(_BYTE *)(v19 + 80);
    if (v21)
    {
      v22 = v20->__vftable;
      v20->__vftable = 0;
      v2->__vftable = v22;
    }
    else
    {
      std::runtime_error::runtime_error(v2, v20);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v19 + 24);
      v23 = (_QWORD *)(v19 + 48);
      v24 = *(_QWORD *)(v19 + 48);
      *(_QWORD *)(a1 + 192) = v24;
      v25 = a1 + 192;
      *(_QWORD *)(a1 + 152) = off_1E2521330;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(v19 + 40);
      v26 = *(_QWORD *)(v19 + 56);
      *(_QWORD *)(a1 + 200) = v26;
      if (v26)
      {
        *(_QWORD *)(v24 + 16) = v25;
        *(_QWORD *)(v19 + 40) = v23;
        *v23 = 0;
        *(_QWORD *)(v19 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 184) = v25;
      }
      v27 = *(_QWORD *)(a1 + 408);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(v27 + 64);
      *(_QWORD *)(v27 + 64) = 0;
      *(_QWORD *)(v27 + 72) = 0;
    }
    *(_BYTE *)(a1 + 224) = v21;
    v28 = *(_QWORD *)(a1 + 416);
    if (!v28)
      goto LABEL_28;
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      v38 = *(std::__shared_weak_count **)(a1 + 416);
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      v31 = *(std::__shared_weak_count **)(a1 + 360);
      if (!v31)
        goto LABEL_32;
    }
    else
    {
LABEL_28:
      v31 = *(std::__shared_weak_count **)(a1 + 360);
      if (!v31)
        goto LABEL_32;
    }
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if ((*(char *)(a1 + 295) & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_33;
    }
LABEL_32:
    if ((*(char *)(a1 + 295) & 0x80000000) == 0)
    {
LABEL_34:
      if (*(_BYTE *)(a1 + 256) && *(char *)(a1 + 255) < 0)
        operator delete(v3->__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(a1 + 224))
      {
        std::runtime_error::runtime_error((std::runtime_error *)v98, v2);
        v36 = (_QWORD *)(a1 + 192);
        v37 = *(_QWORD *)(a1 + 192);
        *(_OWORD *)&v98[16] = *(_OWORD *)(a1 + 168);
        *(_QWORD *)v98 = off_1E2521330;
        v99 = *(unsigned int ***)(a1 + 184);
        v100 = (unsigned int *)v37;
        v101 = *(_QWORD *)(a1 + 200);
        if (v101)
        {
          *(_QWORD *)(v37 + 16) = &v100;
          *(_QWORD *)(a1 + 184) = v36;
          *v36 = 0;
          *(_QWORD *)(a1 + 200) = 0;
        }
        else
        {
          v99 = &v100;
        }
        v102 = *(_OWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        v103 = 1;
        std::runtime_error::runtime_error(&v92, (const std::runtime_error *)v98);
        v93 = *(_OWORD *)&v98[16];
        v92.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v94 = v99;
        v95 = v100;
        v96 = v101;
        if (v101)
        {
          *((_QWORD *)v100 + 2) = &v95;
          v99 = &v100;
          v100 = 0;
          v101 = 0;
        }
        else
        {
          v94 = &v95;
        }
        v97 = v102;
        v102 = 0uLL;
        std::runtime_error::runtime_error(&v104, &v92);
        v105 = v93;
        v62 = v95;
        v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v106 = v94;
        v107 = v95;
        v108 = v96;
        if (v96)
        {
          *((_QWORD *)v95 + 2) = &v107;
          v62 = 0;
          v94 = &v95;
          v95 = 0;
          v96 = 0;
        }
        else
        {
          v106 = &v107;
        }
        v109 = v97;
        v97 = 0uLL;
        v92.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v94, v62);
        MEMORY[0x18D7898AC](&v92);
        v63 = (void **)v91;
        if (*(_BYTE *)(a1 + 104))
        {
          if (!*(_BYTE *)(a1 + 96))
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_BYTE *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v104);
        v65 = v106;
        v64 = v107;
        *(_QWORD *)(a1 + 64) = v107;
        v66 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v105;
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = v65;
        v67 = v108;
        *(_QWORD *)(a1 + 72) = v108;
        if (v67)
        {
          *((_QWORD *)v64 + 2) = v66;
          v64 = 0;
          v106 = &v107;
          v107 = 0;
          v108 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v66;
        }
        *(_OWORD *)(a1 + 80) = v109;
        v109 = 0uLL;
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v106, v64);
        MEMORY[0x18D7898AC](&v104);
        if (v103)
        {
          *(_QWORD *)v98 = off_1E2521330;
          v68 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
          {
            v69 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v99, v100);
          MEMORY[0x18D7898AC](v98);
        }
LABEL_145:
        v87 = *(_QWORD *)(a1 + 152);
        if (*(_BYTE *)(a1 + 224))
        {
          v2->__vftable = 0;
          if (v87)
            (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
          if ((*(char *)(a1 + 351) & 0x80000000) == 0)
          {
LABEL_149:
            if (!*(_BYTE *)(a1 + 376))
              goto LABEL_154;
            goto LABEL_153;
          }
        }
        else
        {
          (*(void (**)(std::runtime_error *))v87)(v2);
          if ((*(char *)(a1 + 351) & 0x80000000) == 0)
            goto LABEL_149;
        }
        operator delete(*v63);
        if (!*(_BYTE *)(a1 + 376))
        {
LABEL_154:
          *(_QWORD *)(a1 + 152) = v7;
          *(_QWORD *)a1 = 0;
          AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
          return;
        }
LABEL_153:
        AMSCore::AwaitableMutex::unlock(*v5);
        goto LABEL_154;
      }
      *(_QWORD *)v98 = v2->__vftable;
      if (*(_QWORD *)v98)
      {
        v34 = (std::__shared_weak_count *)operator new();
        v35 = (std::__shared_weak_count_vtbl *)v2->__vftable;
        v34->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2523180;
        v34->__shared_owners_ = 0;
        v34->__shared_weak_owners_ = 0;
        v34[1].__vftable = v35;
      }
      else
      {
        v34 = 0;
      }
      *(_QWORD *)&v98[8] = v34;
      v2->__vftable = 0;
      AMSCore::IAccountProvider::merge(v6, v98);
      if (v34)
      {
        v39 = (unint64_t *)&v34->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v6 + 96))(*v6))
      {
        v41 = *v6;
        *(_QWORD *)v98 = operator new(0x40uLL);
        *(_OWORD *)&v98[8] = xmmword_18CF51B00;
        strcpy(*(char **)v98, "com.apple.AppleMediaServicesCore.IMediaAccount.appStoreSandbox");
        v42 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v41 + 104))(v41, v98);
        if ((v98[23] & 0x80000000) != 0)
          operator delete(*(void **)v98);
        v43 = *(_QWORD *)(a1 + 384);
        v44 = *(_QWORD *)(a1 + 392);
        v45 = *(_QWORD **)(a1 + 400);
        if (v42)
        {
          v46 = v45[22] != 0;
          *v6 = 0;
          v6[1] = 0;
          v47 = (std::__shared_weak_count *)v45[23];
          v45[22] = v43;
          v45[23] = v44;
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            goto LABEL_84;
          }
        }
        else
        {
          v46 = v45[20] != 0;
          *v6 = 0;
          v6[1] = 0;
          v47 = (std::__shared_weak_count *)v45[21];
          v45[20] = v43;
          v45[21] = v44;
          if (v47)
          {
            v61 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v61);
            while (__stlxr(v49 - 1, v61));
LABEL_84:
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
        }
LABEL_140:
        if (*(_BYTE *)(a1 + 376))
        {
          AMSCore::AwaitableMutex::unlock(*v5);
          v86 = *(_QWORD *)(a1 + 400);
          *(_BYTE *)(a1 + 376) = 0;
          v63 = (void **)v91;
          AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::notify(v86 + 48, v91, v46);
          if (*(_BYTE *)(a1 + 104) && !*(_BYTE *)(a1 + 96))
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(_BYTE *)(a1 + 96) = 1;
          *(_BYTE *)(a1 + 104) = 1;
          goto LABEL_145;
        }
        std::__throw_system_error(1, "unique_lock::unlock: not locked");
LABEL_157:
        __break(1u);
        return;
      }
      v88 = v7;
      v50 = *(_QWORD *)(a1 + 400);
      v51 = *(uint64_t **)(v50 + 24);
      v52 = *(uint64_t **)(v50 + 32);
      v90 = v5;
      if (v51 != v52)
      {
        while (1)
        {
          AMSCore::operator==(*v51, *v6);
          if ((v53 & 1) != 0)
            break;
          if (++v51 == v52)
          {
            v51 = v52;
            break;
          }
        }
      }
      (*(void (**)(std::runtime_error *__return_ptr))(*(_QWORD *)*v6 + 56))(&v104);
      v55 = v104.__vftable;
      imp = v104.__imp_.__imp_;
      if (v104.__vftable != (std::runtime_error_vtbl *)v104.__imp_.__imp_)
      {
        v89 = v2;
        v56 = (void **)(a1 + 296);
        v57 = *(_QWORD *)(a1 + 400);
        do
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t, std::runtime_error_vtbl *))(*(_QWORD *)*v6 + 128))(v98, *v6, v55);
          if (v98[24])
          {
            v58 = *(_QWORD *)(v57 + 160);
            *(_OWORD *)v56 = *(_OWORD *)v98;
            *(_QWORD *)(a1 + 312) = *(_QWORD *)&v98[16];
            memset(v98, 0, 24);
            *(_BYTE *)(a1 + 320) = 1;
            (*(void (**)(uint64_t, unint64_t, std::runtime_error_vtbl *))(*(_QWORD *)v58 + 160))(v58, a1 + 296, v55);
            if (*(_BYTE *)(a1 + 320) && *(char *)(a1 + 319) < 0)
              operator delete(*v56);
            if (v98[24] && (v98[23] & 0x80000000) != 0)
              operator delete(*(void **)v98);
          }
          ++v55;
        }
        while (v55 != (std::runtime_error_vtbl *)imp);
        v55 = v104.__vftable;
        v2 = v89;
      }
      if (v55)
      {
        v59 = v104.__imp_.__imp_;
        v60 = v55;
        if ((std::runtime_error_vtbl *)v104.__imp_.__imp_ != v55)
        {
          do
          {
            if (*(v59 - 1) < 0)
              operator delete(*((void **)v59 - 3));
            v59 -= 24;
          }
          while (v59 != (const char *)v55);
          v60 = v104.__vftable;
        }
        v104.__imp_.__imp_ = (const char *)v55;
        operator delete(v60);
      }
      v71 = *(uint64_t **)(v50 + 32);
      v46 = v51 != v71;
      if (v51 != v71)
      {
        v72 = v51 + 1;
        if (v51 + 1 != v71)
        {
          do
          {
            v51 = v72;
            v73 = *(v72 - 1);
            *(v72 - 1) = *v72;
            *v72 = 0;
            if (v73)
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
            v72 = v51 + 1;
          }
          while (v51 + 1 != v71);
          v71 = *(uint64_t **)(v50 + 32);
        }
        while (v71 != v51)
        {
          v75 = *--v71;
          v74 = v75;
          *v71 = 0;
          if (v75)
            (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
        }
        *(_QWORD *)(v50 + 32) = v51;
      }
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*v6 + 56))(v98);
      v77 = *(char **)v98;
      v76 = *(char **)&v98[8];
      if (*(_QWORD *)v98 == *(_QWORD *)&v98[8])
      {
        v5 = v90;
        if (!*(_QWORD *)v98)
        {
LABEL_134:
          (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*v6 + 48))(v98);
          v82 = *(_QWORD **)(v50 + 32);
          if ((unint64_t)v82 >= *(_QWORD *)(*(_QWORD *)(a1 + 400) + 40))
          {
            v84 = std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::IMediaAccount>>((_QWORD *)(v50 + 24), (uint64_t *)v98);
          }
          else
          {
            v83 = *(_QWORD *)v98;
            *(_QWORD *)v98 = 0;
            *v82 = v83;
            v84 = v82 + 1;
          }
          *(_QWORD *)(v50 + 32) = v84;
          v85 = *(_QWORD *)v98;
          *(_QWORD *)v98 = 0;
          if (v85)
            (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
          v7 = v88;
          goto LABEL_140;
        }
      }
      else
      {
        do
        {
          v78 = *(_QWORD **)(v50 + 24);
          for (i = *(_QWORD **)(v50 + 32); v78 != i; ++v78)
            (*(void (**)(_QWORD, _QWORD, char *))(*(_QWORD *)*v78 + 144))(*v78, 0, v77);
          v77 += 24;
        }
        while (v77 != v76);
        v77 = *(char **)v98;
        v5 = v90;
        if (!*(_QWORD *)v98)
          goto LABEL_134;
      }
      v80 = *(void ***)&v98[8];
      v81 = v77;
      if (*(char **)&v98[8] != v77)
      {
        do
        {
          if (*((char *)v80 - 1) < 0)
            operator delete(*(v80 - 3));
          v80 -= 3;
        }
        while (v80 != (void **)v77);
        v81 = *(char **)v98;
      }
      *(_QWORD *)&v98[8] = v77;
      operator delete(v81);
      goto LABEL_134;
    }
LABEL_33:
    operator delete(*(void **)(a1 + 272));
    goto LABEL_34;
  }
}

void sub_18CBDC30C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  char *v29;
  uint64_t v30;
  void **v31;

  if (v29[256] && v29[255] < 0)
    operator delete(*v31);
  if (v29[351] < 0)
    operator delete(*a13);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v30);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBDC470()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBDC2C8);
}

void AMSCore::EphemeralAccountProvider::saveAccount(char *__p)
{
  BOOL v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  if (*(_QWORD *)__p)
    v2 = __p[424] == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = *((_QWORD *)__p + 52);
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 52);
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)__p + 45);
    if (!v7)
      goto LABEL_14;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((__p[295] & 0x80000000) == 0)
        goto LABEL_16;
    }
    else
    {
LABEL_14:
      if ((__p[295] & 0x80000000) == 0)
      {
LABEL_16:
        if (__p[256] && __p[255] < 0)
          operator delete(*((void **)__p + 29));
        if (__p[351] < 0)
        {
          operator delete(*((void **)__p + 41));
          if (!__p[376])
            goto LABEL_24;
        }
        else if (!__p[376])
        {
          goto LABEL_24;
        }
        AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 46));
        goto LABEL_24;
      }
    }
    operator delete(*((void **)__p + 34));
    goto LABEL_16;
  }
LABEL_24:
  v10 = (char *)*((_QWORD *)__p + 18);
  if (v10 == __p + 120)
  {
    v11 = 4;
    v10 = __p + 120;
    goto LABEL_28;
  }
  if (v10)
  {
    v11 = 5;
LABEL_28:
    (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v13)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  v14 = (std::__shared_weak_count *)*((_QWORD *)__p + 49);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523AE8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CBDC690(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CBDC6C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked(_OWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;

  v6 = (char *)operator new(0xE8uLL);
  v7 = v6;
  *(_QWORD *)v6 = AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked;
  *((_QWORD *)v6 + 1) = AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked;
  v6[152] = 0;
  v8 = v6 + 152;
  v9 = (uint64_t)(v6 + 16);
  v6[176] = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *v8 = *(_OWORD *)a3;
    *((_QWORD *)v6 + 21) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v6[176] = 1;
  }
  *((_QWORD *)v6 + 23) = *(_QWORD *)(a3 + 32);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a3 + 40);
  *((_QWORD *)v6 + 26) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  do
    v10 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v10 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v11 = v6 + 24;
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v22, v9);
  *a1 = v22;
  v12 = (_QWORD *)a2[3];
  v13 = (_QWORD *)a2[4];
  if (v12 != v13)
  {
    while (1)
    {
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 72))(*v12);
      AMSCore::operator==(v14, (uint64_t)v8);
      if (v15)
        break;
      if (++v12 == v13)
        goto LABEL_8;
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*v12 + 48))(&v22);
    goto LABEL_16;
  }
LABEL_8:
  v16 = a2[20];
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
    AMSCore::operator==(v17, (uint64_t)v8);
    if (v18)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a2[20] + 48))(&v22);
LABEL_16:
      if (v7[104])
      {
        v20 = *((_QWORD *)v7 + 3);
        if (v7[96])
        {
          *v11 = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          (*(void (**)(char *))v20)(v7 + 24);
        }
      }
      *((_QWORD *)v7 + 3) = v22;
      goto LABEL_24;
    }
  }
  if (v7[104])
  {
    v19 = *((_QWORD *)v7 + 3);
    if (v7[96])
    {
      *v11 = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    else
    {
      (*(void (**)(char *))v19)(v7 + 24);
    }
  }
  *((_QWORD *)v7 + 3) = 0;
LABEL_24:
  v7[96] = 1;
  v7[104] = 1;
  *((_QWORD *)v7 + 27) = v9;
  *(_QWORD *)v7 = 0;
  return AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v7 + 216);
}

void sub_18CBDC8F0(void *a1)
{
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBDC90C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBDC8C4);
}

_QWORD *std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::IMediaAccount>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    goto LABEL_25;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 > 0x77
    && (&v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v10 || &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v15))
  {
    v17 = (v16 >> 3) + 1;
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v15 - 32;
    v19 = &v9[8 * v3 - 16];
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v18;
      v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v19 - 1) = v22;
      *(_OWORD *)v19 = v21;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_20;
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    v23 = *((_QWORD *)v15 - 1);
    v15 -= 8;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v10 - 1) = v23;
    v10 -= 8;
  }
  while (v15 != v14);
LABEL_20:
  v15 = (char *)*a1;
  v24 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
  {
    v26 = *((_QWORD *)v24 - 1);
    v24 -= 8;
    v25 = v26;
    *(_QWORD *)v24 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
LABEL_25:
  if (v15)
    operator delete(v15);
  return v13;
}

void AMSCore::AwaitableMutex::unlock(std::mutex *this)
{
  uint64_t v2;
  uint64_t *v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[9];
  unsigned __int8 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  std::mutex::lock(this);
  v2 = *(_QWORD *)&this[1].__m_.__opaque[16];
  if (!v2)
  {
    LOBYTE(this[1].__m_.__sig) = 0;
    std::mutex::unlock(this);
    return;
  }
  v3 = *(uint64_t **)&this[1].__m_.__opaque[8];
  v4 = (void (**)(_QWORD))v3[2];
  v5 = *v3;
  *(_QWORD *)(v5 + 8) = v3[1];
  *(_QWORD *)v3[1] = v5;
  *(_QWORD *)&this[1].__m_.__opaque[16] = v2 - 1;
  operator delete(v3);
  std::mutex::unlock(this);
  AMSCore::ServiceProvider<AMSCore::ISchedulingProvider>::getDefaultOrNull(&v17);
  if (!v17)
    goto LABEL_17;
  v19[0] = &off_1E25214A0;
  v19[1] = v4;
  v20 = v19;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v17 + 16))(v15, v17, v19);
  v6 = v16;
  if (!v16)
    (*(void (**)(_QWORD *))v15[0])(v15);
  v7 = v20;
  if (v20 == v19)
  {
    v8 = 4;
    v7 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_11;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_11:
  if (v6)
  {
    v9 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    return;
  }
LABEL_17:
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  (*v4)(v4);
}

void sub_18CBDCC6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 32);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 56);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2 - 72);
  _Unwind_Resume(a1);
}

void AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::notify(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  char *v35;
  std::__shared_weak_count *v36;
  int v37;

  std::mutex::lock((std::mutex *)a1);
  v7 = *(char **)(a1 + 64);
  v6 = *(char **)(a1 + 72);
  if (v7 != v6)
  {
    v8 = *(char **)(a1 + 64);
    while (1)
    {
      v9 = *((_QWORD *)v8 + 1);
      if (!v9 || *(_QWORD *)(v9 + 8) == -1)
        break;
      v8 += 16;
      if (v8 == v6)
      {
        v10 = v6 - v7;
        if (v6 == v7)
          goto LABEL_51;
LABEL_7:
        if ((v10 & 0x8000000000000000) != 0)
          std::vector<std::string>::__throw_length_error[abi:fe180100]();
        v11 = (uint64_t *)operator new(v10);
        v12 = v11;
        v13 = (char *)v11;
        do
        {
          v14 = *((_QWORD *)v7 + 1);
          *(_QWORD *)v13 = *(_QWORD *)v7;
          *((_QWORD *)v13 + 1) = v14;
          if (v14)
          {
            v15 = (unint64_t *)(v14 + 16);
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          v7 += 16;
          v13 += 16;
        }
        while (v7 != v6);
        v21 = v13 - (char *)v11;
        v22 = (v13 - (char *)v11) & 0xFFFFFFFFFFFFFFF0;
        std::mutex::unlock((std::mutex *)a1);
        if (v22)
        {
          v23 = v21 >> 4;
          v24 = (uint64_t *)((char *)v12 + v22);
          v25 = v12;
          do
          {
            v26 = (std::__shared_weak_count *)v25[1];
            if (v26)
            {
              v27 = std::__shared_weak_count::lock(v26);
              if (v27)
              {
                v28 = v27;
                v29 = *v25;
                if (*v25)
                {
                  v37 = a3;
                  v30 = *(_QWORD *)(v29 + 24);
                  if (!v30)
                    std::__throw_bad_function_call[abi:fe180100]();
                  (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v30 + 48))(v30, a2, &v37);
                }
                p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                do
                  v32 = __ldaxr(p_shared_owners);
                while (__stlxr(v32 - 1, p_shared_owners));
                if (!v32)
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }
            }
            v25 += 2;
          }
          while (v25 != v24);
          if (v12 != v24)
          {
            v33 = 2 * v23;
            do
            {
              v34 = (std::__shared_weak_count *)v12[v33 - 1];
              if (v34)
                std::__shared_weak_count::__release_weak(v34);
              v33 -= 2;
            }
            while (v33 * 8);
          }
        }
        operator delete(v12);
        return;
      }
    }
    if (v8 != v6)
    {
      v17 = v8 + 16;
      if (v8 + 16 != v6)
      {
        do
        {
          v18 = *((_QWORD *)v17 + 1);
          if (v18 && *(_QWORD *)(v18 + 8) != -1)
          {
            v19 = *(_QWORD *)v17;
            *(_QWORD *)v17 = 0;
            *((_QWORD *)v17 + 1) = 0;
            v20 = (std::__shared_weak_count *)*((_QWORD *)v8 + 1);
            *(_QWORD *)v8 = v19;
            *((_QWORD *)v8 + 1) = v18;
            if (v20)
              std::__shared_weak_count::__release_weak(v20);
            v8 += 16;
          }
          v17 += 16;
        }
        while (v17 != v6);
        v6 = *(char **)(a1 + 72);
      }
    }
    if (v6 < v8)
    {
      __break(1u);
      return;
    }
    if (v8 != v6)
    {
      v35 = v6;
      v6 = v8;
      while (v35 != v8)
      {
        v36 = (std::__shared_weak_count *)*((_QWORD *)v35 - 1);
        if (v36)
          std::__shared_weak_count::__release_weak(v36);
        v35 -= 16;
      }
      *(_QWORD *)(a1 + 72) = v8;
    }
    v7 = *(char **)(a1 + 64);
    v10 = v6 - v7;
    if (v6 != v7)
      goto LABEL_7;
  }
LABEL_51:
  std::mutex::unlock((std::mutex *)a1);
}

uint64_t std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    AMSCore::AwaitableMutex::unlock(*(std::mutex **)a1);
  return a1;
}

void AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::runtime_error v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v15;
  char v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v1 = result;
  v19 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v5 = (uint64_t *)(*(_QWORD *)result + 128);
    v4 = *v5;
    if (*v5)
    {
      if (v4 == *(_QWORD *)v1 + 104)
      {
        v18 = v17;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 24))(v4, v17);
      }
      else
      {
        v18 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v5 = 0;
      }
    }
    else
    {
      v18 = 0;
    }
    result = v18;
    if (v18)
    {
      v6 = *(_QWORD *)v1;
      if (!*(_BYTE *)(v6 + 88))
      {
        __break(1u);
        return result;
      }
      if (*(_BYTE *)(v6 + 80))
      {
        v16 = 1;
      }
      else
      {
        std::runtime_error::runtime_error(&v10, (const std::runtime_error *)(v6 + 8));
        v7 = (_QWORD *)(v6 + 48);
        v8 = *(_QWORD *)(v6 + 48);
        v11 = *(_OWORD *)(v6 + 24);
        v10.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v12 = *(uint64_t **)(v6 + 40);
        v13 = v8;
        if (*(_QWORD *)(v6 + 56))
        {
          *(_QWORD *)(v8 + 16) = &v13;
          *(_QWORD *)(v6 + 40) = v7;
          *v7 = 0;
          *(_QWORD *)(v6 + 56) = 0;
        }
        else
        {
          v12 = &v13;
        }
        v15 = *(_OWORD *)(v6 + 64);
        *(_QWORD *)(v6 + 64) = 0;
        *(_QWORD *)(v6 + 72) = 0;
        result = v18;
        v16 = 0;
        if (!v18)
          std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)result + 48))(result, &v10);
      if (!v16)
        ((void (*)(std::runtime_error *))v10.~runtime_error)(&v10);
    }
    else
    {
      (*v3)(v3);
    }
    result = v18;
    if (v18 == v17)
    {
      v9 = 4;
      result = v17;
    }
    else
    {
      if (!v18)
        return result;
      v9 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v9))();
  }
  return result;
}

void sub_18CBDD3C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E25214A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E25214A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::operator()(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 8))();
}

uint64_t std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018CF5A34FLL
    || ((v3 & 0x800000018CF5A34FLL & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x800000018CF5A34FLL)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018CF5A34FLL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_pointer<AMSCore::IMediaAccount  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::IMediaAccount  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::IMediaAccount  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore13IMediaAccountEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore13IMediaAccountEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore13IMediaAccountEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore13IMediaAccountEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
  {
    v5 = *((_QWORD *)__p + 3);
    if (__p[96])
    {
      *((_QWORD *)__p + 3) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
      (*(void (**)(char *))v5)(__p + 24);
    }
  }
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (__p[215] < 0)
    operator delete(*((void **)__p + 24));
  if (__p[176] && __p[175] < 0)
    operator delete(*((void **)__p + 19));
  operator delete(__p);
}

void std::__shared_ptr_pointer<AMSCore::Task<void,AMSCore::Error>::Promise *,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<void,AMSCore::Error>::Promise *,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<void,AMSCore::Error>::Promise *,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskIvNS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskIvNS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskIvNS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskIvNS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::EphemeralAccountProvider::removeAccount(char *a1)
{
  uint64_t v1;
  std::__libcpp_refstring *p_imp;
  uint64_t *v3;
  uint64_t v4;
  std::runtime_error *v6;
  std::runtime_error *v7;
  std::mutex **v8;
  uint64_t *v9;
  void (__cdecl *v10)(std::runtime_error *__hidden);
  char v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  std::runtime_error_vtbl *v21;
  uint64_t v22;
  std::runtime_error_vtbl *v23;
  std::runtime_error_vtbl *v24;
  std::ios_base *v25;
  unsigned __int8 v26;
  _QWORD *v27;
  __int128 v28;
  unsigned int *v29;
  unsigned int **v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int **v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const AMSCore::IMediaAccount *v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 v57;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::string *v69;
  std::mutex **v70;
  std::runtime_error v71;
  __int128 v72;
  unsigned int **v73;
  unsigned int *v74;
  uint64_t v75;
  __int128 v76;
  std::runtime_error v77;
  __int128 v78;
  unsigned int **v79;
  unsigned int *v80;
  uint64_t v81;
  __int128 v82;
  __int128 __p;
  __int128 v84;
  int v85;
  uint64_t v86;
  std::runtime_error v87;
  __int128 v88;
  unsigned int **v89;
  unsigned int *v90;
  uint64_t v91;
  __int128 v92;

  v6 = &v77;
  v7 = (std::runtime_error *)(a1 + 152);
  v69 = (std::string *)(a1 + 232);
  v8 = (std::mutex **)(a1 + 256);
  v9 = (uint64_t *)(a1 + 16);
  if (a1[336])
    goto LABEL_2;
  v70 = (std::mutex **)(a1 + 256);
  v16 = *((_QWORD *)a1 + 36);
  *((_QWORD *)a1 + 32) = v16 + 192;
  a1[264] = 1;
  v3 = *(uint64_t **)(v16 + 24);
  v17 = *(uint64_t **)(v16 + 32);
  if (v3 == v17)
    goto LABEL_17;
  p_imp = (std::__libcpp_refstring *)(a1 + 272);
  v1 = (uint64_t)(a1 + 336);
  while (1)
  {
    AMSCore::operator==(*v3, *((_QWORD *)a1 + 37));
    if ((v18 & 1) != 0)
      break;
    if (++v3 == v17)
    {
      v3 = v17;
      break;
    }
  }
  v4 = *(_QWORD *)(v16 + 32);
  if (v3 == (uint64_t *)v4)
  {
LABEL_17:
    v3 = v9;
    v9 = &v86;
    v21 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v22 = MEMORY[0x1E0DE4FE0] + 64;
    p_imp = &v77.__imp_;
    v4 = MEMORY[0x1E0DE4F60];
    v23 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v24 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v86 = MEMORY[0x1E0DE4FE0] + 64;
    v77.__vftable = v23;
    *(std::runtime_error_vtbl **)((char *)&v77.__vftable + (unint64_t)v23[-1].~runtime_error) = v24;
    v25 = (std::ios_base *)((char *)&v77 + (unint64_t)v77.__vftable[-1].~runtime_error);
    std::ios_base::init(v25, &v77.__imp_);
    v25[1].__vftable = 0;
    v25[1].__fmtflags_ = -1;
    v77.__vftable = v21 + 1;
    v86 = v22;
    std::streambuf::basic_streambuf();
    v1 = MEMORY[0x1E0DE4FB8];
    v77.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    __p = 0u;
    v84 = 0u;
    v85 = 16;
    v10 = v77.__vftable[-1].~runtime_error;
    v6 = (std::runtime_error *)&unk_1EE059000;
    v8 = v70;
    if ((v26 & 1) != 0)
    {
LABEL_18:
      *std::ios_base::iword((std::ios_base *)((char *)&v77 + (_QWORD)v10), (int)v6[109].__vftable) = 1;
      v27 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Attempting to delete a non-existent account. account = ", 55);
      AMSCore::operator<<(v27, *((_QWORD *)a1 + 37));
      std::stringbuf::str[abi:fe180100]((uint64_t)p_imp, (std::string *)&v71);
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,std::string>((uint64_t)&v87, 7u, (uint64_t)&v71);
      if (a1[104])
      {
        if (!a1[96])
          (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
        a1[104] = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v87);
      v28 = v88;
      v30 = v89;
      v29 = v90;
      *((_QWORD *)a1 + 8) = v90;
      v31 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v28;
      *((_QWORD *)a1 + 3) = off_1E2521330;
      *((_QWORD *)a1 + 7) = v30;
      v32 = v91;
      *((_QWORD *)a1 + 9) = v91;
      if (v32)
      {
        *((_QWORD *)v29 + 2) = v31;
        v89 = &v90;
        v90 = 0;
        v91 = 0;
        v29 = 0;
      }
      else
      {
        *((_QWORD *)a1 + 7) = v31;
      }
      *((_OWORD *)a1 + 5) = v92;
      v92 = 0uLL;
      a1[96] = 0;
      a1[104] = 1;
      v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v89, v29);
      MEMORY[0x18D7898AC](&v87);
      if (SBYTE7(v72) < 0)
        operator delete(v71.__vftable);
      v77.__vftable = *(std::runtime_error_vtbl **)v4;
      *(std::runtime_error_vtbl **)((char *)&v77.__vftable + (unint64_t)v77.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(v4 + 24);
      v77.__imp_.__imp_ = (const char *)(v1 + 16);
      if (SBYTE7(v84) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v9);
      LODWORD(v1) = 3;
      v9 = v3;
      goto LABEL_91;
    }
LABEL_114:
    {
      LODWORD(v6[109].__vftable) = std::ios_base::xalloc();
      v8 = v70;
    }
    goto LABEL_18;
  }
  v19 = v3 + 1;
  if (v3 + 1 != (uint64_t *)v4)
  {
    do
    {
      v3 = v19;
      v20 = *(v19 - 1);
      *(v19 - 1) = *v19;
      *v19 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v19 = v3 + 1;
    }
    while (v3 + 1 != (uint64_t *)v4);
    v4 = *(_QWORD *)(v16 + 32);
  }
  while ((uint64_t *)v4 != v3)
  {
    v53 = *(_QWORD *)(v4 - 8);
    v4 -= 8;
    v52 = v53;
    *(_QWORD *)v4 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  v54 = (const AMSCore::IMediaAccount *)*((_QWORD *)a1 + 37);
  *(_QWORD *)(v16 + 32) = v3;
  AMSCore::EphemeralAccountProvider::getCookieProviderKey(v69, v54);
  v55 = *((_QWORD *)a1 + 36);
  v56 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v55 + 136, (const void **)&v69->__r_.__value_.__l.__data_);
  *((_QWORD *)a1 + 39) = v56;
  v8 = v70;
  if ((uint64_t *)(v55 + 144) != v56)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v56[7] + 32))(v56[7]);
    v57 = *((_OWORD *)a1 + 17);
    *((_OWORD *)a1 + 20) = v57;
    p_imp->__imp_ = 0;
    *((_QWORD *)a1 + 35) = 0;
    if (!atomic_load((unint64_t *)(v57 + 96)))
    {
      *(_BYTE *)v1 = 1;
      v59 = (unint64_t *)(*((_QWORD *)a1 + 40) + 96);
      do
        v60 = __ldaxr(v59);
      while (__stlxr((unint64_t)a1, v59));
      if (!v60)
        return;
    }
LABEL_2:
    v10 = (void (__cdecl *)(std::runtime_error *__hidden))*((_QWORD *)a1 + 40);
    if (!*((_BYTE *)v10 + 88))
    {
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
    v11 = *((_BYTE *)v10 + 80);
    if (!v11)
    {
      std::runtime_error::runtime_error(v7, (const std::runtime_error *)((char *)v10 + 8));
      *(_OWORD *)(a1 + 168) = *(_OWORD *)((char *)v10 + 24);
      v12 = (_QWORD *)((char *)v10 + 48);
      v13 = *((_QWORD *)v10 + 6);
      *((_QWORD *)a1 + 24) = v13;
      v14 = a1 + 192;
      *((_QWORD *)a1 + 19) = off_1E2521330;
      *((_QWORD *)a1 + 23) = *((_QWORD *)v10 + 5);
      v15 = *((_QWORD *)v10 + 7);
      *((_QWORD *)a1 + 25) = v15;
      if (v15)
      {
        *(_QWORD *)(v13 + 16) = v14;
        *((_QWORD *)v10 + 5) = v12;
        *v12 = 0;
        *((_QWORD *)v10 + 7) = 0;
      }
      else
      {
        *((_QWORD *)a1 + 23) = v14;
      }
      v33 = *((_QWORD *)a1 + 40);
      *((_OWORD *)a1 + 13) = *(_OWORD *)(v33 + 64);
      *(_QWORD *)(v33 + 64) = 0;
      *(_QWORD *)(v33 + 72) = 0;
    }
    a1[224] = v11;
    v34 = *((_QWORD *)a1 + 41);
    if (!v34)
      goto LABEL_30;
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      v41 = (std::__shared_weak_count *)*((_QWORD *)a1 + 41);
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      p_imp = (std::__libcpp_refstring *)*((_QWORD *)a1 + 35);
      if (!p_imp)
        goto LABEL_34;
    }
    else
    {
LABEL_30:
      p_imp = (std::__libcpp_refstring *)*((_QWORD *)a1 + 35);
      if (!p_imp)
        goto LABEL_34;
    }
    v37 = (unint64_t *)&p_imp[1];
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*((void (**)(std::__libcpp_refstring *))p_imp->__imp_ + 2))(p_imp);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)p_imp);
      v4 = a1[224];
      if (a1[224])
      {
LABEL_35:
        std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase((_QWORD *)(*((_QWORD *)a1 + 36) + 136), *((_QWORD *)a1 + 39));
        v1 = 0;
        if (a1[224])
          goto LABEL_36;
        goto LABEL_71;
      }
LABEL_47:
      v70 = v8;
      std::runtime_error::runtime_error(&v77, v7);
      v42 = a1 + 192;
      v43 = *((_QWORD *)a1 + 24);
      v78 = *(_OWORD *)(a1 + 168);
      v77.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v79 = (unsigned int **)*((_QWORD *)a1 + 23);
      v80 = (unsigned int *)v43;
      v81 = *((_QWORD *)a1 + 25);
      if (v81)
      {
        *(_QWORD *)(v43 + 16) = &v80;
        *((_QWORD *)a1 + 23) = v42;
        *v42 = 0;
        *((_QWORD *)a1 + 25) = 0;
      }
      else
      {
        v79 = &v80;
      }
      v82 = *((_OWORD *)a1 + 13);
      *((_QWORD *)a1 + 26) = 0;
      *((_QWORD *)a1 + 27) = 0;
      LOBYTE(__p) = 1;
      std::runtime_error::runtime_error(&v71, &v77);
      v72 = v78;
      v71.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v73 = v79;
      v74 = v80;
      v75 = v81;
      if (v81)
      {
        *((_QWORD *)v80 + 2) = &v74;
        v79 = &v80;
        v80 = 0;
        v81 = 0;
      }
      else
      {
        v73 = &v74;
      }
      v76 = v82;
      v82 = 0uLL;
      std::runtime_error::runtime_error(&v87, &v71);
      v88 = v72;
      v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v44 = v74;
      v89 = v73;
      v90 = v74;
      v91 = v75;
      if (v75)
      {
        *((_QWORD *)v74 + 2) = &v90;
        v44 = 0;
        v73 = &v74;
        v74 = 0;
        v75 = 0;
      }
      else
      {
        v89 = &v90;
      }
      p_imp = (std::__libcpp_refstring *)&v89;
      v3 = (uint64_t *)&v88;
      v92 = v76;
      v76 = 0uLL;
      v71.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v73, v44);
      MEMORY[0x18D7898AC](&v71);
      if (a1[104])
      {
        if (!a1[96])
          (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
        a1[104] = 0;
      }
      v6 = (std::runtime_error *)&v92;
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v87);
      v46 = v89;
      v45 = v90;
      *((_QWORD *)a1 + 8) = v90;
      v47 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v88;
      v10 = (void (__cdecl *)(std::runtime_error *__hidden))off_1E2521330;
      *((_QWORD *)a1 + 3) = off_1E2521330;
      *((_QWORD *)a1 + 7) = v46;
      v48 = v91;
      *((_QWORD *)a1 + 9) = v91;
      if (v48)
      {
        *((_QWORD *)v45 + 2) = v47;
        v45 = 0;
        v89 = &v90;
        v90 = 0;
        v91 = 0;
      }
      else
      {
        *((_QWORD *)a1 + 7) = v47;
      }
      *((_OWORD *)a1 + 5) = v92;
      v92 = 0uLL;
      a1[96] = 0;
      a1[104] = 1;
      v87.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v89, v45);
      MEMORY[0x18D7898AC](&v87);
      if ((_BYTE)__p)
      {
        p_imp = (std::__libcpp_refstring *)&v79;
        v77.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          v50 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v79, v80);
        MEMORY[0x18D7898AC](&v77);
        v8 = v70;
      }
      v1 = 3;
      if (a1[224])
      {
LABEL_36:
        if ((_DWORD)v4)
        {
LABEL_37:
          if (a1[264])
            goto LABEL_38;
          std::__throw_system_error(1, "unique_lock::unlock: not locked");
          goto LABEL_113;
        }
LABEL_72:
        if (a1[255] < 0)
          goto LABEL_42;
        goto LABEL_73;
      }
LABEL_71:
      ((void (*)(std::runtime_error *))v7->~runtime_error)(v7);
      if ((_DWORD)v4)
        goto LABEL_37;
      goto LABEL_72;
    }
LABEL_34:
    v4 = a1[224];
    if (a1[224])
      goto LABEL_35;
    goto LABEL_47;
  }
LABEL_38:
  AMSCore::AwaitableMutex::unlock(*v8);
  v39 = *((_QWORD *)a1 + 37);
  a1[264] = 0;
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 64))(v39);
  AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::notify(*((_QWORD *)a1 + 36) + 48, v40, 2);
  if (a1[104] && !a1[96])
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  a1[96] = 1;
  a1[104] = 1;
  LODWORD(v1) = 3;
  if (a1[255] < 0)
  {
LABEL_42:
    operator delete(v69->__r_.__value_.__l.__data_);
    if (!a1[264])
      goto LABEL_92;
LABEL_91:
    AMSCore::AwaitableMutex::unlock(*v8);
    goto LABEL_92;
  }
LABEL_73:
  if (a1[264])
    goto LABEL_91;
LABEL_92:
  if ((_DWORD)v1 == 3)
  {
    *((_QWORD *)a1 + 19) = v9;
    *(_QWORD *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v7);
    return;
  }
  v61 = (char *)*((_QWORD *)a1 + 18);
  if (v61 == a1 + 120)
  {
    v62 = 4;
    v61 = a1 + 120;
  }
  else
  {
    if (!v61)
      goto LABEL_99;
    v62 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
LABEL_99:
  if (a1[104] && !a1[96])
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  v63 = *((_QWORD *)a1 + 38);
  do
  {
    v64 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v65)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v63)
  {
    v66 = (unint64_t *)(*((_QWORD *)a1 + 38) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      v68 = (std::__shared_weak_count *)*((_QWORD *)a1 + 38);
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  operator delete(a1);
}

void sub_18CBDE05C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](a12);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBDE128()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBDDF24);
}

void AMSCore::EphemeralAccountProvider::removeAccount(char *__p)
{
  BOOL v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  if (*(_QWORD *)__p)
    v2 = __p[336] == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = *((_QWORD *)__p + 41);
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 41);
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)__p + 35);
    if (!v7)
      goto LABEL_14;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((__p[255] & 0x80000000) == 0)
      {
LABEL_15:
        if (!__p[264])
          goto LABEL_20;
LABEL_19:
        AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 32));
        goto LABEL_20;
      }
    }
    else
    {
LABEL_14:
      if ((__p[255] & 0x80000000) == 0)
        goto LABEL_15;
    }
    operator delete(*((void **)__p + 29));
    if (!__p[264])
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_20:
  v10 = (char *)*((_QWORD *)__p + 18);
  if (v10 == __p + 120)
  {
    v11 = 4;
    v10 = __p + 120;
    goto LABEL_24;
  }
  if (v10)
  {
    v11 = 5;
LABEL_24:
    (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  v12 = *((_QWORD *)__p + 38);
  do
  {
    v13 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v14)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v12)
  {
    v15 = (unint64_t *)(*((_QWORD *)__p + 38) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 38);
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,std::string>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<std::string>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CBDE3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMSCore::EphemeralAccountProvider::getCookieProviderKey(std::string *this, const AMSCore::IMediaAccount *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  std::string::size_type v8;
  unint64_t v9;
  size_t size;
  unint64_t v11;
  std::string *v12;
  unint64_t v13;
  size_t v14;
  std::string *v15;
  std::string::size_type v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *__p;
  __int128 v23;

  v4 = (*(uint64_t (**)(const AMSCore::IMediaAccount *))(*(_QWORD *)a2 + 72))(a2);
  std::to_string(this, *(_QWORD *)(v4 + 32));
  __p = operator new(0x40uLL);
  v23 = xmmword_18CF51B00;
  strcpy((char *)__p, "com.apple.AppleMediaServicesCore.IMediaAccount.appStoreSandbox");
  v5 = (*(uint64_t (**)(const AMSCore::IMediaAccount *, void **))(*(_QWORD *)a2 + 104))(a2, &__p);
  v6 = v5;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if (!v6)
      return;
  }
  else if (!v5)
  {
    return;
  }
  v7 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v8 = this->__r_.__value_.__r.__words[2];
  if (v7 >= 0)
    v9 = 22;
  else
    v9 = (v8 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v7 >= 0)
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    size = this->__r_.__value_.__l.__size_;
  if (v9 - size >= 8)
  {
    v15 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v7 >= 0)
      v15 = this;
    *(std::string::size_type *)((char *)v15->__r_.__value_.__r.__words + size) = 0x786F62646E61732DLL;
    v16 = size + 8;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v16;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    v17 = (char *)v15 + v16;
  }
  else
  {
    v11 = size + 8;
    if (0x7FFFFFFFFFFFFFF6 - v9 < size + 8 - v9)
      std::string::__throw_length_error[abi:fe180100]();
    v12 = this;
    if ((v8 & 0x8000000000000000) != 0)
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v9 > 0x3FFFFFFFFFFFFFF2)
    {
      v14 = 0x7FFFFFFFFFFFFFF7;
    }
    else
    {
      v13 = 2 * v9;
      if (v11 > 2 * v9)
        v13 = size + 8;
      if (v13 >= 0x17)
      {
        v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        v19 = v13 | 7;
        if (v19 == 23)
          v19 = v18;
        v14 = v19 + 1;
      }
      else
      {
        v14 = 23;
      }
    }
    v20 = (char *)operator new(v14);
    v21 = v20;
    if (size)
      memmove(v20, v12, size);
    *(_QWORD *)&v21[size] = 0x786F62646E61732DLL;
    if (v9 != 22)
      operator delete(v12);
    this->__r_.__value_.__l.__size_ = v11;
    this->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v17 = &v21[v11];
  }
  *v17 = 0;
}

void sub_18CBDE60C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  if (*(char *)(a2 + 55) < 0)
LABEL_14:
    operator delete(*(void **)(a2 + 32));
LABEL_15:
  operator delete((void *)a2);
}

uint64_t AMSCore::StringUtils::join<std::string>(std::string *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[8];
  void *__p[2];
  __int128 v18;
  int v19;
  uint64_t v20[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v20[0] = MEMORY[0x1E0DE4FE0] + 64;
  v15 = v7;
  *(_QWORD *)((char *)&v16[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24));
  std::ios_base::init(v9, v16);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v15 = v4 + 24;
  v20[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  v19 = 16;
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v15, v12, v13);
  std::stringbuf::str[abi:fe180100]((uint64_t)v16, a1);
  v15 = *v6;
  *(_QWORD *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = v6[3];
  v16[0] = v10 + 16;
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v20);
}

void sub_18CBDE844(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<std::function<void ()(std::string const&,AMSCore::AccountChangedMetadata)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25230D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<void ()(std::string const&,AMSCore::AccountChangedMetadata)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25230D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__shared_ptr_emplace<std::function<void ()(std::string const&,AMSCore::AccountChangedMetadata)>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_BYTE *AMSCore::EphemeralAccountProvider::getMediaAccounts(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (**v11)(uint64_t);
  void (**v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 152) = v2 + 192;
  v3 = (_BYTE *)(a1 + 152);
  v4 = a1 + 16;
  *(_BYTE *)(a1 + 160) = 1;
  v18 = 0uLL;
  v19 = 0;
  std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::reserve((uint64_t)&v18, (uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 3);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  while (v5 != v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v5 + 48))(&v20);
    v7 = *((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1) >= v19)
    {
      v9 = std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::IMediaAccount>>(&v18, &v20);
    }
    else
    {
      v8 = v20;
      v20 = 0;
      **((_QWORD **)&v18 + 1) = v8;
      v9 = (_QWORD *)(v7 + 8);
    }
    *((_QWORD *)&v18 + 1) = v9;
    v10 = v20;
    v20 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v5 += 8;
  }
  if (*(_BYTE *)(a1 + 104))
  {
    v11 = *(void (***)(uint64_t))(a1 + 24);
    if (*(_BYTE *)(a1 + 96))
    {
      if (v11)
      {
        v12 = *(void (***)(uint64_t))(a1 + 32);
        v13 = *(void **)(a1 + 24);
        if (v12 != v11)
        {
          do
          {
            v15 = (uint64_t)*--v12;
            v14 = v15;
            *v12 = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
          while (v12 != v11);
          v13 = *(void **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 32) = v11;
        operator delete(v13);
      }
    }
    else
    {
      (*v11)(a1 + 24);
    }
  }
  v16 = (std::mutex *)(*(_QWORD *)(a1 + 168) + 192);
  *(_OWORD *)(a1 + 24) = v18;
  *(_QWORD *)(a1 + 40) = v19;
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock(v16);
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 176) = 1;
  return AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CBDEA78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::~vector[abi:fe180100](&a9);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v9);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBDEAC0()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBDEA44);
}

void sub_18CBDEAC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 176) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::EphemeralAccountProvider::getMediaAccounts(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void (**v5)(char *);
  void (**v6)(char *);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
  {
    v5 = (void (**)(char *))*((_QWORD *)__p + 3);
    if (__p[96])
    {
      if (v5)
      {
        v6 = (void (**)(char *))*((_QWORD *)__p + 4);
        v7 = (void *)*((_QWORD *)__p + 3);
        if (v6 != v5)
        {
          do
          {
            v9 = (uint64_t)*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          }
          while (v6 != v5);
          v7 = (void *)*((_QWORD *)__p + 3);
        }
        *((_QWORD *)__p + 4) = v5;
        operator delete(v7);
      }
    }
    else
    {
      (*v5)(__p + 24);
    }
  }
  do
  {
    v10 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v11)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

void std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
    return;
  if (a2 >> 61)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  v4 = *(char **)(a1 + 8);
  v5 = 8 * a2;
  v6 = (char *)operator new(8 * a2);
  v7 = &v6[v5];
  v8 = v4 - v2;
  v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 == v2)
  {
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_7;
  }
  v10 = v8 - 8;
  if ((unint64_t)(v8 - 8) > 0x77)
  {
    v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
       || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
    v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v12)
    {
      v13 = v8 >> 3;
      v14 = (v10 >> 3) + 1;
      v11 = (char *)(v9 - 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
      v15 = v4 - 32;
      v16 = &v6[8 * v13 - 16];
      v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19 = *(_OWORD *)v15;
        v18 = *((_OWORD *)v15 + 1);
        *(_OWORD *)v15 = 0uLL;
        *((_OWORD *)v15 + 1) = 0uLL;
        v15 -= 32;
        *((_OWORD *)v16 - 1) = v19;
        *(_OWORD *)v16 = v18;
        v16 -= 32;
        v17 -= 4;
      }
      while (v17);
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_20;
      v4 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    }
  }
  else
  {
    v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  }
  do
  {
    v20 = *((_QWORD *)v4 - 1);
    v4 -= 8;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v11 - 1) = v20;
    v11 -= 8;
  }
  while (v4 != v2);
LABEL_20:
  v2 = *(char **)a1;
  v21 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  while (v21 != v2)
  {
    v23 = *((_QWORD *)v21 - 1);
    v21 -= 8;
    v22 = v23;
    *(_QWORD *)v21 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
LABEL_7:
  if (v2)
    operator delete(v2);
}

_QWORD *std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::~vector[abi:fe180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v21;
  char v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v1 = result;
  v25 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v24 = v23;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v23);
      }
      else
      {
        v24 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v24 = 0;
    }
    if (v24)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        *(_OWORD *)__p = *(_OWORD *)(v5 + 8);
        *(_QWORD *)&v17 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        v6->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v6);
        v8 = (_QWORD *)(v5 + 48);
        v9 = *(_QWORD *)(v5 + 48);
        v17 = *(_OWORD *)(v5 + 24);
        __p[0] = off_1E2521330;
        v18 = *(uint64_t **)(v5 + 40);
        v19 = v9;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v9 + 16) = &v19;
          *(_QWORD *)(v5 + 40) = v8;
          *v8 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v18 = &v19;
        }
        v21 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v22 = v7;
      if (!v24)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, void **))(*(_QWORD *)v24 + 48))(v24, __p);
      v10 = __p[0];
      if (v22)
      {
        if (__p[0])
        {
          v11 = __p[1];
          v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              v14 = *--v11;
              v13 = v14;
              *v11 = 0;
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            while (v11 != v10);
            v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
      }
      else
      {
        (*(void (**)(void **))__p[0])(__p);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v24;
    if (v24 == v23)
    {
      v15 = 4;
      result = v23;
    }
    else
    {
      if (!v24)
        return result;
      v15 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
  }
  return result;
}

void sub_18CBDF264(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void (**v5)(uint64_t);
  void (**v6)(uint64_t);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *(void (***)(uint64_t))(a1 + 8);
    if (*(_BYTE *)(a1 + 80))
    {
      if (v5)
      {
        v6 = *(void (***)(uint64_t))(a1 + 16);
        v7 = *(void **)(a1 + 8);
        if (v6 != v5)
        {
          do
          {
            v9 = (uint64_t)*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          }
          while (v6 != v5);
          v7 = *(void **)(a1 + 8);
        }
        *(_QWORD *)(a1 + 16) = v5;
        operator delete(v7);
      }
    }
    else
    {
      (*v5)(a1 + 8);
    }
  }
  do
  {
    v10 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v11)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_13IMediaAccountENS1_14default_deleteIS4_EEEENS1_"
                     "9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_13IMediaAccountENS1_14default_deleteI"
                                "S4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_13IMediaAccountENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_13IMediaAccountENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_BYTE *AMSCore::EphemeralAccountProvider::getMediaAccount(_BYTE *result)
{
  unint64_t v1;
  void **v2;
  __int128 *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::runtime_error_vtbl **v17;
  const std::runtime_error *v18;
  int v19;
  std::runtime_error_vtbl *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = (unint64_t)result;
  v2 = (void **)(result + 232);
  if (result[327])
    goto LABEL_8;
  v3 = (__int128 *)(result + 296);
  v4 = result + 328;
  v5 = result[343];
  result[232] = 0;
  result[256] = 0;
  v6 = *((_QWORD *)result + 44);
  v7 = result[400];
  if (v5)
  {
    v8 = *((_QWORD *)result + 39);
    *((_QWORD *)result + 29) = v6;
    *((_QWORD *)result + 30) = v8;
    *(_QWORD *)(result + 247) = *(_QWORD *)(result + 319);
    result[255] = v7;
    *((_QWORD *)result + 39) = 0;
    *(_QWORD *)(result + 319) = 0;
    result[256] = 1;
    v7 = 0;
    v6 = 0;
  }
  *((_QWORD *)result + 47) = v6;
  result[402] = v7;
  v9 = result[401];
  v10 = *((_QWORD *)result + 46);
  v11 = (_QWORD *)*((_QWORD *)result + 43);
  *((_QWORD *)result + 33) = *((_QWORD *)result + 45);
  *((_QWORD *)result + 34) = v10;
  *((_QWORD *)result + 35) = *v4;
  *(_QWORD *)(result + 287) = *(_QWORD *)(result + 335);
  result[295] = v9;
  *v4 = 0;
  *(_QWORD *)(result + 335) = 0;
  result = AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked(result + 296, v11, (uint64_t)v2);
  v12 = *v3;
  *(_OWORD *)(v1 + 384) = *v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v1 + 304) = 0;
  if (atomic_load((unint64_t *)(v12 + 96)))
    goto LABEL_8;
  *(_BYTE *)(v1 + 327) = 1;
  v14 = (unint64_t *)(*(_QWORD *)(v1 + 384) + 96);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v1, v14));
  if (v15)
  {
LABEL_8:
    v16 = *(_QWORD *)(v1 + 384);
    if (!*(_BYTE *)(v16 + 88))
    {
      __break(1u);
      return result;
    }
    v17 = (std::runtime_error_vtbl **)(v1 + 152);
    v18 = (const std::runtime_error *)(v16 + 8);
    v19 = *(unsigned __int8 *)(v16 + 80);
    if (*(_BYTE *)(v16 + 80))
    {
      v20 = v18->__vftable;
      v18->__vftable = 0;
      *v17 = v20;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 152), v18);
      *(_OWORD *)(v1 + 168) = *(_OWORD *)(v16 + 24);
      v21 = (_QWORD *)(v16 + 48);
      v22 = *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v1 + 192) = v22;
      v23 = v1 + 192;
      *(_QWORD *)(v1 + 152) = off_1E2521330;
      *(_QWORD *)(v1 + 184) = *(_QWORD *)(v16 + 40);
      v24 = *(_QWORD *)(v16 + 56);
      *(_QWORD *)(v1 + 200) = v24;
      if (v24)
      {
        *(_QWORD *)(v22 + 16) = v23;
        *(_QWORD *)(v16 + 40) = v21;
        *v21 = 0;
        *(_QWORD *)(v16 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v1 + 184) = v23;
      }
      v25 = *(_QWORD *)(v1 + 384);
      *(_OWORD *)(v1 + 208) = *(_OWORD *)(v25 + 64);
      *(_QWORD *)(v25 + 64) = 0;
      *(_QWORD *)(v25 + 72) = 0;
    }
    *(_BYTE *)(v1 + 224) = v19;
    if (*(_BYTE *)(v1 + 104))
    {
      v26 = *(_QWORD *)(v1 + 24);
      if (*(_BYTE *)(v1 + 96))
      {
        *(_QWORD *)(v1 + 24) = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
      else
      {
        (*(void (**)(unint64_t))v26)(v1 + 24);
      }
      *(_BYTE *)(v1 + 104) = 0;
      v19 = *(unsigned __int8 *)(v1 + 224);
    }
    if (v19)
    {
      v27 = *(_QWORD *)(v1 + 152);
      *(_QWORD *)(v1 + 152) = 0;
      *(_QWORD *)(v1 + 24) = v27;
      *(_BYTE *)(v1 + 96) = v19;
      *(_BYTE *)(v1 + 104) = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), (const std::runtime_error *)(v1 + 152));
      v35 = (_QWORD *)(v1 + 192);
      v36 = *(_QWORD *)(v1 + 192);
      *(_QWORD *)(v1 + 64) = v36;
      v37 = v1 + 64;
      *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 168);
      *(_QWORD *)(v1 + 24) = off_1E2521330;
      *(_QWORD *)(v1 + 56) = *(_QWORD *)(v1 + 184);
      v38 = *(_QWORD *)(v1 + 200);
      *(_QWORD *)(v1 + 72) = v38;
      if (v38)
      {
        *(_QWORD *)(v36 + 16) = v37;
        *(_QWORD *)(v1 + 184) = v35;
        *v35 = 0;
        *(_QWORD *)(v1 + 200) = 0;
      }
      else
      {
        *(_QWORD *)(v1 + 56) = v37;
      }
      *(_OWORD *)(v1 + 80) = *(_OWORD *)(v1 + 208);
      *(_QWORD *)(v1 + 208) = 0;
      *(_QWORD *)(v1 + 216) = 0;
      v39 = *(_QWORD *)(v1 + 152);
      *(_BYTE *)(v1 + 96) = 0;
      *(_BYTE *)(v1 + 104) = 1;
      if (*(_BYTE *)(v1 + 224))
      {
        *v17 = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      }
      else
      {
        (*(void (**)(unint64_t))v39)(v1 + 152);
      }
    }
    v28 = *(_QWORD *)(v1 + 392);
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        v31 = *(std::__shared_weak_count **)(v1 + 392);
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v32 = *(std::__shared_weak_count **)(v1 + 304);
    if (!v32)
      goto LABEL_32;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if ((*(char *)(v1 + 295) & 0x80000000) == 0)
        goto LABEL_34;
    }
    else
    {
LABEL_32:
      if ((*(char *)(v1 + 295) & 0x80000000) == 0)
      {
LABEL_34:
        if (*(_BYTE *)(v1 + 256))
        {
          if (*(char *)(v1 + 255) < 0)
            operator delete(*v2);
        }
        AMSCore::AwaitableMutex::unlock((std::mutex *)(*(_QWORD *)(v1 + 344) + 192));
        *(_QWORD *)(v1 + 152) = v1 + 16;
        *(_QWORD *)v1 = 0;
        return AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)(v1 + 152));
      }
    }
    operator delete(*(void **)(v1 + 272));
    goto LABEL_34;
  }
  return result;
}

void AMSCore::EphemeralAccountProvider::getMediaAccount(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  char v10;
  void **v11;
  char *v12;
  int v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  if (!*(_QWORD *)__p)
  {
LABEL_18:
    v9 = 0;
    v10 = 0;
    v11 = (void **)(__p + 376);
    v12 = __p + 402;
    goto LABEL_20;
  }
  if (__p[327])
  {
    v2 = *((_QWORD *)__p + 49);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 49);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 38);
    if (!v6)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((__p[295] & 0x80000000) == 0)
      {
LABEL_14:
        if (__p[256] && __p[255] < 0)
          operator delete(*((void **)__p + 29));
        AMSCore::AwaitableMutex::unlock((std::mutex *)(*((_QWORD *)__p + 43) + 192));
        goto LABEL_18;
      }
    }
    else
    {
LABEL_12:
      if ((__p[295] & 0x80000000) == 0)
        goto LABEL_14;
    }
    operator delete(*((void **)__p + 34));
    goto LABEL_14;
  }
  v10 = __p[401];
  v9 = (void *)*((_QWORD *)__p + 46);
  v11 = (void **)(__p + 352);
  v12 = __p + 400;
LABEL_20:
  v13 = *v12;
  v14 = *v11;
  v15 = (char *)*((_QWORD *)__p + 18);
  if (v15 == __p + 120)
  {
    v16 = 4;
    v15 = __p + 120;
  }
  else
  {
    if (!v15)
      goto LABEL_25;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_25:
  if (__p[104])
  {
    v17 = *((_QWORD *)__p + 3);
    if (__p[96])
    {
      *((_QWORD *)__p + 3) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    else
    {
      (*(void (**)(char *))v17)(__p + 24);
    }
  }
  do
  {
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v19)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v10 < 0)
    operator delete(v9);
  if (__p[343] && v13 < 0)
    operator delete(v14);
  operator delete(__p);
}

_BYTE *AMSCore::EphemeralAccountProvider::getLocalMediaAccount(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v38;
  uint64_t v40;

  v2 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 176) = v2 + 192;
  v3 = (_BYTE *)(a1 + 176);
  v4 = a1 + 16;
  *(_BYTE *)(a1 + 184) = 1;
  v5 = (_QWORD *)(a1 + 152);
  v6 = *(unsigned __int8 *)(a1 + 175);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 160);
  if (v6 == 59)
  {
    if (v7 < 0)
      v5 = (_QWORD *)*v5;
    v23 = (_QWORD *)*v5;
    v24 = v5[1];
    v25 = v5[2];
    v26 = v5[3];
    v27 = v5[4];
    v28 = v5[5];
    v29 = v5[6];
    v30 = *(_QWORD *)((char *)v5 + 51);
    if (v23 != (_QWORD *)0x6C7070612E6D6F63
      || v24 != 0x4D656C7070412E65
      || v25 != 0x7672655361696465
      || v26 != 0x65726F4373656369
      || v27 != 0x41616964654D492ELL
      || v28 != 0x612E746E756F6363
      || v29 != 0x4265726F74537070
      || v30 != 0x6174654265726F74)
    {
      goto LABEL_29;
    }
  }
  else
  {
    if (v6 != 62)
      goto LABEL_29;
    if (v7 < 0)
      v5 = (_QWORD *)*v5;
    v8 = (_QWORD *)*v5;
    v9 = v5[1];
    v10 = v5[2];
    v11 = v5[3];
    v12 = v5[4];
    v13 = v5[5];
    v14 = v5[6];
    v15 = *(_QWORD *)((char *)v5 + 54);
    v16 = v8 == (_QWORD *)0x6C7070612E6D6F63 && v9 == 0x4D656C7070412E65;
    v17 = v16 && v10 == 0x7672655361696465;
    v18 = v17 && v11 == 0x65726F4373656369;
    v19 = v18 && v12 == 0x41616964654D492ELL;
    v20 = v19 && v13 == 0x612E746E756F6363;
    v21 = v20 && v14 == 0x5365726F74537070;
    if (!v21 || v15 != 0x786F62646E615365)
    {
LABEL_29:
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v2 + 160) + 48))(&v40);
      goto LABEL_56;
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v2 + 176) + 48))(&v40);
LABEL_56:
  if (*(_BYTE *)(a1 + 104))
  {
    v38 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(a1 + 96))
    {
      *(_QWORD *)(a1 + 24) = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
    else
    {
      (*(void (**)(uint64_t))v38)(a1 + 24);
    }
  }
  *(_QWORD *)(a1 + 24) = v40;
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock((std::mutex *)(*(_QWORD *)(a1 + 192) + 192));
  *(_QWORD *)(a1 + 176) = v4;
  *(_QWORD *)a1 = 0;
  return AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CBDFC18(void *a1)
{
  uint64_t v1;

  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBDFC38()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBDFBF4);
}

void AMSCore::EphemeralAccountProvider::getLocalMediaAccount(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
  {
    v5 = *((_QWORD *)__p + 3);
    if (__p[96])
    {
      *((_QWORD *)__p + 3) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
      (*(void (**)(char *))v5)(__p + 24);
    }
  }
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (__p[175] < 0)
    operator delete(*((void **)__p + 19));
  operator delete(__p);
}

_BYTE *AMSCore::EphemeralAccountProvider::getCookieProvider(uint64_t a1)
{
  std::mutex **v2;
  uint64_t v3;
  const AMSCore::IMediaAccount *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::string __p;
  __int128 v20;

  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 168) + 192;
  v2 = (std::mutex **)(a1 + 152);
  v3 = a1 + 16;
  v4 = *(const AMSCore::IMediaAccount **)(a1 + 176);
  *(_BYTE *)(a1 + 160) = 1;
  AMSCore::EphemeralAccountProvider::getCookieProviderKey(&__p, v4);
  v5 = *(_QWORD *)(a1 + 168);
  v6 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v5 + 136, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((uint64_t *)(v5 + 144) == v6)
  {
    v11 = (char *)operator new(0x98uLL);
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &off_1E2522E38;
    *((_QWORD *)v11 + 3) = &off_1E2521250;
    *((_QWORD *)v11 + 4) = 850045863;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *((_QWORD *)v11 + 12) = 0;
    *((_QWORD *)v11 + 13) = v11 + 104;
    *(_OWORD *)(v11 + 81) = 0u;
    *((_QWORD *)v11 + 14) = v11 + 104;
    *((_QWORD *)v11 + 15) = 0;
    *((_QWORD *)v11 + 18) = 0;
    *((_QWORD *)v11 + 17) = 0;
    *((_QWORD *)v11 + 16) = v11 + 136;
    *(_QWORD *)&v20 = v11 + 24;
    *((_QWORD *)&v20 + 1) = v11;
    std::map<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>::insert_or_assign[abi:fe180100]<std::shared_ptr<AMSCore::EphemeralHTTPCookieProvider> &>((uint64_t ***)(v5 + 136), (uint64_t)&__p, (uint64_t *)&v20);
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        v12 = *(std::__shared_weak_count **)(a1 + 32);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      else
      {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
    }
    *(_OWORD *)(a1 + 24) = v20;
  }
  else
  {
    v7 = v6;
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        v8 = *(std::__shared_weak_count **)(a1 + 32);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
      *(_BYTE *)(a1 + 104) = 0;
    }
    *(_QWORD *)(a1 + 24) = v7[7];
    v15 = v7[8];
    *(_QWORD *)(a1 + 32) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 160))
      goto LABEL_29;
    goto LABEL_28;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 160))
LABEL_28:
    AMSCore::AwaitableMutex::unlock(*v2);
LABEL_29:
  *(_QWORD *)(a1 + 152) = v3;
  *(_QWORD *)a1 = 0;
  return AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
}

void sub_18CBDFF40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v16);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBDFF88()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBDFF18);
}

void AMSCore::EphemeralAccountProvider::getCookieProvider(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
  {
    if (__p[96])
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 4);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  v8 = *((_QWORD *)__p + 23);
  do
  {
    v9 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v10)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v8)
  {
    v11 = (unint64_t *)(*((_QWORD *)__p + 23) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 23);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(__p);
}

void std::map<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>::insert_or_assign[abi:fe180100]<std::shared_ptr<AMSCore::EphemeralHTTPCookieProvider> &>(uint64_t ***a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  char v9;
  const std::string::value_type *v10;
  size_t v11;
  uint64_t **v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  int v31;
  uint64_t *v32;
  size_t v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  int v40;
  uint64_t *v41;
  size_t v42;
  int v43;
  const void *v44;
  size_t v45;
  size_t v46;
  int v47;
  int v48;
  const void *v49;
  size_t v50;
  size_t v51;
  int v52;
  int v53;
  uint64_t *v54;
  std::string *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  int v66;
  uint64_t *v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  const void *v72;
  size_t v73;
  size_t v74;
  int v75;
  int v76;

  v5 = (uint64_t **)(a1 + 1);
  v6 = (uint64_t *)a1[1];
  v7 = v6;
  v8 = (uint64_t **)(a1 + 1);
  if (!v6)
    goto LABEL_65;
  v9 = *(_BYTE *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = (uint64_t **)(a1 + 1);
  v13 = (uint64_t *)a1[1];
  do
  {
    while (1)
    {
      v14 = *((char *)v13 + 55);
      v15 = v14 >= 0 ? v13 + 4 : (uint64_t *)v13[4];
      v16 = v14 >= 0 ? *((unsigned __int8 *)v13 + 55) : v13[5];
      v17 = v11 >= v16 ? v16 : v11;
      v18 = memcmp(v15, v10, v17);
      if (v18)
        break;
      if (v16 < v11)
        goto LABEL_11;
LABEL_9:
      v12 = (uint64_t **)v13;
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_26;
    }
    if ((v18 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v13 = (uint64_t *)v13[1];
  }
  while (v13);
LABEL_26:
  v8 = v5;
  if (v12 == v5)
    goto LABEL_64;
  v19 = *((char *)v12 + 55);
  if (v19 >= 0)
    v20 = (uint64_t *)(v12 + 4);
  else
    v20 = v12[4];
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)v12 + 55);
  else
    v21 = (size_t)v12[5];
  if (v21 >= v11)
    v22 = v11;
  else
    v22 = v21;
  v23 = memcmp(v10, v20, v22);
  if (!v23)
  {
    if (v11 < v21)
      goto LABEL_47;
LABEL_38:
    v25 = *a3;
    v24 = a3[1];
    if (v24)
    {
      v26 = (unint64_t *)(v24 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = (std::__shared_weak_count *)v12[8];
    v12[7] = (uint64_t *)v25;
    v12[8] = (uint64_t *)v24;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    return;
  }
  if ((v23 & 0x80000000) == 0)
    goto LABEL_38;
LABEL_47:
  v8 = v5;
  if (v5 == v12)
    goto LABEL_64;
  v31 = *((char *)v12 + 55);
  if (v31 >= 0)
    v32 = (uint64_t *)(v12 + 4);
  else
    v32 = v12[4];
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)v12 + 55);
  else
    v33 = (size_t)v12[5];
  if (v33 >= v11)
    v34 = v11;
  else
    v34 = v33;
  v35 = memcmp(v10, v32, v34);
  if (v35)
  {
    if ((v35 & 0x80000000) == 0)
      goto LABEL_59;
LABEL_63:
    v8 = v12;
LABEL_64:
    v7 = *v8;
LABEL_65:
    v12 = v8;
    if (*a1 == v8)
      goto LABEL_113;
    if (v7)
    {
      v37 = v7;
      do
      {
        v12 = (uint64_t **)v37;
        v37 = (uint64_t *)v37[1];
      }
      while (v37);
    }
    else
    {
      v38 = (uint64_t *)v8;
      do
      {
        v12 = (uint64_t **)v38[2];
        v39 = *v12 == v38;
        v38 = (uint64_t *)v12;
      }
      while (v39);
    }
    v40 = *((char *)v12 + 55);
    if (v40 >= 0)
      v41 = (uint64_t *)(v12 + 4);
    else
      v41 = v12[4];
    if (v40 >= 0)
      v42 = *((unsigned __int8 *)v12 + 55);
    else
      v42 = (size_t)v12[5];
    v43 = *(char *)(a2 + 23);
    if (v43 >= 0)
      v44 = (const void *)a2;
    else
      v44 = *(const void **)a2;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a2 + 23);
    else
      v45 = *(_QWORD *)(a2 + 8);
    if (v45 >= v42)
      v46 = v42;
    else
      v46 = v45;
    v47 = memcmp(v41, v44, v46);
    if (v47)
    {
      if ((v47 & 0x80000000) == 0)
        goto LABEL_89;
LABEL_113:
      if (v7)
        v8 = v12 + 1;
      else
        v12 = v8;
      goto LABEL_116;
    }
    if (v42 < v45)
      goto LABEL_113;
LABEL_89:
    if (!v6)
    {
      v12 = v5;
LABEL_91:
      v8 = v5;
      goto LABEL_116;
    }
    while (1)
    {
      v12 = (uint64_t **)v6;
      v48 = *((char *)v6 + 55);
      if (v48 >= 0)
        v49 = v6 + 4;
      else
        v49 = (const void *)v6[4];
      if (v48 >= 0)
        v50 = *((unsigned __int8 *)v6 + 55);
      else
        v50 = v6[5];
      if (v50 >= v45)
        v51 = v45;
      else
        v51 = v50;
      v52 = memcmp(v44, v49, v51);
      if (v52)
      {
        if (v52 < 0)
          goto LABEL_92;
      }
      else if (v45 < v50)
      {
LABEL_92:
        v6 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_117;
        continue;
      }
      v53 = memcmp(v49, v44, v51);
      if (v53)
      {
        if ((v53 & 0x80000000) == 0)
          goto LABEL_91;
      }
      else if (v50 >= v45)
      {
        goto LABEL_91;
      }
      v5 = v12 + 1;
      v6 = v12[1];
      if (!v6)
        goto LABEL_117;
    }
  }
  if (v11 < v33)
    goto LABEL_63;
LABEL_59:
  v36 = memcmp(v32, v10, v34);
  if (!v36)
  {
    if (v33 >= v11)
      return;
LABEL_128:
    v8 = v12 + 1;
    v60 = v12[1];
    if (v60)
    {
      do
      {
        v8 = (uint64_t **)v60;
        v60 = (uint64_t *)*v60;
        v12 = v8;
        v61 = v8;
      }
      while (v60);
    }
    else
    {
      v61 = v12;
      do
      {
        v62 = (uint64_t *)v61;
        v61 = (uint64_t **)v61[2];
      }
      while (*v61 != v62);
    }
    if (v61 == v5)
      goto LABEL_116;
    v65 = v61[4];
    v63 = (uint64_t *)(v61 + 4);
    v64 = v65;
    v66 = *((char *)v63 + 23);
    if (v66 >= 0)
      v67 = v63;
    else
      v67 = v64;
    if (v66 >= 0)
      v68 = *((unsigned __int8 *)v63 + 23);
    else
      v68 = v63[1];
    if (v68 >= v11)
      v69 = v11;
    else
      v69 = v68;
    v70 = memcmp(v10, v67, v69);
    if (v70)
    {
      if ((v70 & 0x80000000) == 0)
        goto LABEL_149;
      goto LABEL_116;
    }
    if (v11 < v68)
    {
LABEL_116:
      v5 = v8;
      if (!*v8)
      {
LABEL_117:
        v54 = (uint64_t *)operator new(0x48uLL);
        v55 = (std::string *)(v54 + 4);
        if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          v54[6] = *(_QWORD *)(a2 + 16);
        }
        v56 = a3[1];
        v54[7] = *a3;
        v54[8] = v56;
        if (v56)
        {
          v57 = (unint64_t *)(v56 + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        *v54 = 0;
        v54[1] = 0;
        v54[2] = (uint64_t)v12;
        *v5 = v54;
        v59 = **a1;
        if (v59)
        {
          *a1 = (uint64_t **)v59;
          v54 = *v5;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v54);
        a1[2] = (uint64_t **)((char *)a1[2] + 1);
      }
      return;
    }
    while (1)
    {
LABEL_149:
      v12 = (uint64_t **)v6;
      v71 = *((char *)v6 + 55);
      if (v71 >= 0)
        v72 = v6 + 4;
      else
        v72 = (const void *)v6[4];
      if (v71 >= 0)
        v73 = *((unsigned __int8 *)v6 + 55);
      else
        v73 = v6[5];
      if (v73 >= v11)
        v74 = v11;
      else
        v74 = v73;
      v75 = memcmp(v10, v72, v74);
      if (v75)
      {
        if (v75 < 0)
          goto LABEL_148;
LABEL_162:
        v76 = memcmp(v72, v10, v74);
        if (v76)
        {
          if ((v76 & 0x80000000) == 0)
            goto LABEL_91;
        }
        else if (v73 >= v11)
        {
          goto LABEL_91;
        }
        v5 = v12 + 1;
        v6 = v12[1];
        if (!v6)
          goto LABEL_117;
      }
      else
      {
        if (v11 >= v73)
          goto LABEL_162;
LABEL_148:
        v6 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_117;
      }
    }
  }
  if (v36 < 0)
    goto LABEL_128;
}

void sub_18CBE05D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::__libcpp_refstring *p_imp;
  const char **v9;
  _QWORD *v10;
  uint64_t v11;
  const std::runtime_error *v12;
  uint64_t v13;
  std::__shared_weak_count *imp;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v1 = result;
  v28 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v27 = v26;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v26);
      }
      else
      {
        v27 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v27 = 0;
    }
    if (v27)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v18.__vftable = *(std::runtime_error_vtbl **)(v5 + 8);
        p_imp = &v18.__imp_;
        v9 = (const char **)(v5 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v18, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v19 = *(_OWORD *)(v5 + 24);
        v18.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v20 = *(uint64_t **)(v5 + 40);
        v21 = v11;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v11 + 16) = &v21;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v20 = &v21;
        }
        v13 = *(_QWORD *)(v5 + 64);
        v12 = (const std::runtime_error *)(v5 + 64);
        v23 = v13;
        p_imp = (std::__libcpp_refstring *)&v24;
        v9 = &v12->__imp_.__imp_;
        v6 = v12;
      }
      p_imp->__imp_ = *v9;
      v6->__vftable = 0;
      v6->__imp_.__imp_ = 0;
      v25 = v7;
      if (!v27)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v27 + 48))(v27, &v18);
      if (v25)
      {
        imp = (std::__shared_weak_count *)v18.__imp_.__imp_;
        if (v18.__imp_.__imp_)
        {
          v15 = (unint64_t *)(v18.__imp_.__imp_ + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v18.~runtime_error)(&v18);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v27;
    if (v27 == v26)
    {
      v17 = 4;
      result = v26;
    }
    else
    {
      if (!v27)
        return result;
      v17 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
  }
  return result;
}

void sub_18CBE0AA0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMSCore::EphemeralHTTPCookieProvider::~EphemeralHTTPCookieProvider(AMSCore::EphemeralHTTPCookieProvider *this)
{
  AMSCore::EphemeralHTTPCookieProvider *v2;
  uint64_t v3;
  uint64_t v4;
  AMSCore::EphemeralHTTPCookieProvider *v5;

  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*((char **)this + 14));
  if (*((_QWORD *)this + 12))
  {
    v3 = *((_QWORD *)this + 10);
    v2 = (AMSCore::EphemeralHTTPCookieProvider *)*((_QWORD *)this + 11);
    v4 = *(_QWORD *)v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *((_QWORD *)this + 12) = 0;
    if (v2 != (AMSCore::EphemeralHTTPCookieProvider *)((char *)this + 80))
    {
      do
      {
        v5 = (AMSCore::EphemeralHTTPCookieProvider *)*((_QWORD *)v2 + 1);
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (AMSCore::EphemeralHTTPCookieProvider *)((char *)this + 80));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  AMSCore::EphemeralHTTPCookieProvider *v2;
  uint64_t v3;
  uint64_t v4;
  AMSCore::EphemeralHTTPCookieProvider *v5;

  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*((char **)this + 14));
  if (*((_QWORD *)this + 12))
  {
    v3 = *((_QWORD *)this + 10);
    v2 = (AMSCore::EphemeralHTTPCookieProvider *)*((_QWORD *)this + 11);
    v4 = *(_QWORD *)v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *((_QWORD *)this + 12) = 0;
    if (v2 != (AMSCore::EphemeralHTTPCookieProvider *)((char *)this + 80))
    {
      do
      {
        v5 = (AMSCore::EphemeralHTTPCookieProvider *)*((_QWORD *)v2 + 1);
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (AMSCore::EphemeralHTTPCookieProvider *)((char *)this + 80));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::EphemeralHTTPCookieProvider::addCookie(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  void (***v12)(uint64_t);
  unsigned __int8 *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::mutex *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  _QWORD *v22;
  std::mutex *v23;
  uint64_t v24;
  std::string __p;
  char v26;
  char v27;

  v6 = (char *)operator new(0xC0uLL);
  v7 = v6;
  *(_QWORD *)v6 = AMSCore::EphemeralHTTPCookieProvider::addCookie;
  *((_QWORD *)v6 + 1) = AMSCore::EphemeralHTTPCookieProvider::addCookie;
  *((_QWORD *)v6 + 21) = *a2;
  v8 = (uint64_t *)(v6 + 168);
  v9 = v6 + 152;
  v10 = (uint64_t)(v6 + 16);
  *((_QWORD *)v6 + 22) = a1;
  *a2 = 0;
  do
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v11 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v12 = (void (***)(uint64_t))(v6 + 24);
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&__p, v10);
  *a3 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v13 = (unsigned __int8 *)(a1 + 72);
  do
    v14 = __ldaxr(v13);
  while (__stxr(1u, v13));
  if ((v14 & 1) != 0)
  {
    v7[184] = 0;
    std::mutex::lock((std::mutex *)(*((_QWORD *)v7 + 22) + 8));
    v19 = *((_QWORD *)v7 + 22);
    if (*(_QWORD *)(v19 + 96))
      goto LABEL_17;
    v20 = (unsigned __int8 *)(v19 + 72);
    do
      v21 = __ldxr(v20);
    while (__stlxr(1u, v20));
    if ((v21 & 1) != 0)
    {
LABEL_17:
      v22 = operator new(0x18uLL);
      v23 = (std::mutex *)(*((_QWORD *)v7 + 22) + 8);
      v22[1] = v19 + 80;
      v22[2] = v7;
      v24 = *(_QWORD *)(v19 + 80);
      *v22 = v24;
      *(_QWORD *)(v24 + 8) = v22;
      *(_QWORD *)(v19 + 80) = v22;
      ++*(_QWORD *)(v19 + 96);
      std::mutex::unlock(v23);
      return;
    }
    std::mutex::unlock((std::mutex *)(*((_QWORD *)v7 + 22) + 8));
  }
  v15 = *((_QWORD *)v7 + 21);
  v16 = *((_QWORD *)v7 + 22);
  *((_QWORD *)v7 + 19) = v16 + 8;
  v7[160] = 1;
  v27 = 124;
  v26 = 124;
  AMSCore::StringUtils::join<std::string,char,std::string,char,std::string>(&__p, v15 + 16, &v27, v15 + 48, &v26, v15 + 72);
  v17 = (uint64_t *)(v16 + 104);
  std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>::insert_or_assign[abi:fe180100]<std::unique_ptr<AMSCore::HTTPCookie>>(v17, (const void **)&__p.__r_.__value_.__l.__data_, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>(v17, &__p);
  if (v7[104])
  {
    if (!v7[96])
      (**v12)((uint64_t)(v7 + 24));
  }
  v18 = (std::mutex *)(*((_QWORD *)v7 + 22) + 8);
  v7[96] = 1;
  v7[104] = 1;
  AMSCore::AwaitableMutex::unlock(v18);
  *((_QWORD *)v7 + 19) = v10;
  *(_QWORD *)v7 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v9);
}

void sub_18CBE0DDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v14);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBE0E08()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBE0D28);
}

void AMSCore::EphemeralHTTPCookieProvider::addCookies(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  void (***v11)(uint64_t);
  unsigned __int8 *v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  std::mutex *v24;
  uint64_t v25;
  std::mutex *v26;
  std::string __p;
  char v28;
  char v29;

  v6 = (char *)operator new(0xC8uLL);
  v7 = v6;
  *(_QWORD *)v6 = AMSCore::EphemeralHTTPCookieProvider::addCookies;
  *((_QWORD *)v6 + 1) = AMSCore::EphemeralHTTPCookieProvider::addCookies;
  v8 = v6 + 152;
  v9 = (uint64_t)(v6 + 16);
  *((_QWORD *)v6 + 21) = a1;
  *((_OWORD *)v6 + 11) = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  do
    v10 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v10 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v11 = (void (***)(uint64_t))(v6 + 24);
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&__p, v9);
  *a3 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v12 = (unsigned __int8 *)(a1 + 72);
  do
    v13 = __ldaxr(v12);
  while (__stxr(1u, v12));
  if ((v13 & 1) != 0)
  {
    v7[192] = 0;
    std::mutex::lock((std::mutex *)(*((_QWORD *)v7 + 21) + 8));
    v20 = *((_QWORD *)v7 + 21);
    if (*(_QWORD *)(v20 + 96))
      goto LABEL_16;
    v21 = (unsigned __int8 *)(v20 + 72);
    do
      v22 = __ldxr(v21);
    while (__stlxr(1u, v21));
    if ((v22 & 1) != 0)
    {
LABEL_16:
      v23 = operator new(0x18uLL);
      v24 = (std::mutex *)(*((_QWORD *)v7 + 21) + 8);
      v23[1] = v20 + 80;
      v23[2] = v7;
      v25 = *(_QWORD *)(v20 + 80);
      *v23 = v25;
      *(_QWORD *)(v25 + 8) = v23;
      *(_QWORD *)(v20 + 80) = v23;
      ++*(_QWORD *)(v20 + 96);
      std::mutex::unlock(v24);
      return;
    }
    std::mutex::unlock((std::mutex *)(*((_QWORD *)v7 + 21) + 8));
  }
  v15 = (uint64_t *)*((_QWORD *)v7 + 22);
  v14 = (uint64_t *)*((_QWORD *)v7 + 23);
  v16 = *((_QWORD *)v7 + 21);
  *((_QWORD *)v7 + 19) = v16 + 8;
  v7[160] = 1;
  if (v15 != v14)
  {
    v17 = (uint64_t *)(v16 + 104);
    do
    {
      v18 = *v15;
      v19 = *v15 + 16;
      v29 = 124;
      v28 = 124;
      AMSCore::StringUtils::join<std::string,char,std::string,char,std::string>(&__p, v19, &v29, v18 + 48, &v28, v18 + 72);
      std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>::insert_or_assign[abi:fe180100]<std::unique_ptr<AMSCore::HTTPCookie>>(v17, (const void **)&__p.__r_.__value_.__l.__data_, v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v15;
    }
    while (v15 != *((uint64_t **)v7 + 23));
    v16 = *((_QWORD *)v7 + 21);
  }
  __p.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>((_QWORD *)(v16 + 104), &__p);
  if (v7[104])
  {
    if (!v7[96])
      (**v11)((uint64_t)(v7 + 24));
  }
  v26 = (std::mutex *)(*((_QWORD *)v7 + 21) + 8);
  v7[96] = 1;
  v7[104] = 1;
  AMSCore::AwaitableMutex::unlock(v26);
  *((_QWORD *)v7 + 19) = v9;
  *(_QWORD *)v7 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v8);
}

void sub_18CBE1070(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v14);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBE109C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBE1038);
}

void AMSCore::EphemeralHTTPCookieProvider::clear(AMSCore::EphemeralHTTPCookieProvider *this@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  void (***v9)(uint64_t);
  unsigned __int8 *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  char *v13;
  std::mutex *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  _QWORD *v18;
  std::mutex *v19;
  uint64_t v20;
  __int128 v21;

  v4 = (char *)operator new(0xB0uLL);
  v5 = v4;
  *(_QWORD *)v4 = AMSCore::EphemeralHTTPCookieProvider::clear;
  *((_QWORD *)v4 + 1) = AMSCore::EphemeralHTTPCookieProvider::clear;
  v6 = v4 + 152;
  v7 = (uint64_t)(v4 + 16);
  *((_QWORD *)v4 + 20) = this;
  do
    v8 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v8 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v4[24] = 0;
  v9 = (void (***)(uint64_t))(v4 + 24);
  v4[104] = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v21, v7);
  *a2 = v21;
  v10 = (unsigned __int8 *)this + 72;
  do
    v11 = __ldaxr(v10);
  while (__stxr(1u, v10));
  if ((v11 & 1) != 0)
  {
    v5[168] = 0;
    std::mutex::lock((std::mutex *)(*((_QWORD *)v5 + 20) + 8));
    v15 = *((_QWORD *)v5 + 20);
    if (*(_QWORD *)(v15 + 96))
      goto LABEL_15;
    v16 = (unsigned __int8 *)(v15 + 72);
    do
      v17 = __ldxr(v16);
    while (__stlxr(1u, v16));
    if ((v17 & 1) != 0)
    {
LABEL_15:
      v18 = operator new(0x18uLL);
      v19 = (std::mutex *)(*((_QWORD *)v5 + 20) + 8);
      v18[1] = v15 + 80;
      v18[2] = v5;
      v20 = *(_QWORD *)(v15 + 80);
      *v18 = v20;
      *(_QWORD *)(v20 + 8) = v18;
      *(_QWORD *)(v15 + 80) = v18;
      ++*(_QWORD *)(v15 + 96);
      std::mutex::unlock(v19);
      return;
    }
    std::mutex::unlock((std::mutex *)(*((_QWORD *)v5 + 20) + 8));
  }
  v12 = (_QWORD *)*((_QWORD *)v5 + 20);
  v13 = (char *)v12[14];
  v12 += 14;
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(v13);
  *(v12 - 1) = v12;
  *v12 = 0;
  v12[1] = 0;
  if (v5[104])
  {
    if (!v5[96])
      (**v9)((uint64_t)(v5 + 24));
  }
  v14 = (std::mutex *)(*((_QWORD *)v5 + 20) + 8);
  v5[96] = 1;
  v5[104] = 1;
  AMSCore::AwaitableMutex::unlock(v14);
  *((_QWORD *)v5 + 19) = v7;
  *(_QWORD *)v5 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v6);
}

void AMSCore::EphemeralHTTPCookieProvider::getCookies(AMSCore::EphemeralHTTPCookieProvider *this@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  std::mutex **v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  _QWORD *v28;
  std::mutex *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;

  v4 = (char *)operator new(0xB8uLL);
  v5 = v4;
  *(_QWORD *)v4 = AMSCore::EphemeralHTTPCookieProvider::getCookies;
  *((_QWORD *)v4 + 1) = AMSCore::EphemeralHTTPCookieProvider::getCookies;
  v6 = (std::mutex **)(v4 + 152);
  v7 = (uint64_t)(v4 + 16);
  *((_QWORD *)v4 + 21) = this;
  do
    v8 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v8 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v4[24] = 0;
  v4[104] = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v32, v7);
  *a2 = v32;
  v9 = (unsigned __int8 *)this + 72;
  do
    v10 = __ldaxr(v9);
  while (__stxr(1u, v9));
  if ((v10 & 1) != 0)
  {
    v5[176] = 0;
    std::mutex::lock((std::mutex *)(*((_QWORD *)v5 + 21) + 8));
    v25 = *((_QWORD *)v5 + 21);
    if (*(_QWORD *)(v25 + 96))
      goto LABEL_28;
    v26 = (unsigned __int8 *)(v25 + 72);
    do
      v27 = __ldxr(v26);
    while (__stlxr(1u, v26));
    if ((v27 & 1) != 0)
    {
LABEL_28:
      v28 = operator new(0x18uLL);
      v29 = (std::mutex *)(*((_QWORD *)v5 + 21) + 8);
      v28[1] = v25 + 80;
      v28[2] = v5;
      v30 = *(_QWORD *)(v25 + 80);
      *v28 = v30;
      *(_QWORD *)(v30 + 8) = v28;
      *(_QWORD *)(v25 + 80) = v28;
      ++*(_QWORD *)(v25 + 96);
      std::mutex::unlock(v29);
      return;
    }
    std::mutex::unlock((std::mutex *)(*((_QWORD *)v5 + 21) + 8));
  }
  v11 = (_QWORD *)*((_QWORD *)v5 + 21);
  *((_QWORD *)v5 + 19) = v11 + 1;
  v5[160] = 1;
  v11 += 13;
  *(std::chrono::system_clock::time_point *)&v32 = std::chrono::system_clock::now();
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>(v11, &v32);
  v12 = *((_QWORD *)v5 + 21);
  v32 = 0uLL;
  v33 = 0;
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::reserve((uint64_t)&v32, *(_QWORD *)(v12 + 120));
  v13 = (_QWORD *)*v11;
  v14 = *((_QWORD *)v5 + 21) + 112;
  if (v13 != (_QWORD *)v14)
  {
    do
    {
      AMSCore::HTTPCookie::clone((AMSCore::HTTPCookie *)&v31, v13[7]);
      v19 = *((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1) >= v33)
      {
        v21 = std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v32, &v31);
      }
      else
      {
        v20 = v31;
        v31 = 0;
        **((_QWORD **)&v32 + 1) = v20;
        v21 = (uint64_t *)(v19 + 8);
      }
      *((_QWORD *)&v32 + 1) = v21;
      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](&v31, 0);
      v22 = (_QWORD *)v13[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v13[2];
          v24 = *v23 == (_QWORD)v13;
          v13 = v23;
        }
        while (!v24);
      }
      v13 = v23;
    }
    while (v23 != (_QWORD *)v14);
  }
  if (v5[104])
  {
    v15 = (uint64_t *)*((_QWORD *)v5 + 3);
    if (v5[96])
    {
      if (v15)
      {
        v16 = (uint64_t *)*((_QWORD *)v5 + 4);
        if (v16 == v15)
        {
          v18 = 1;
          v17 = (void *)*((_QWORD *)v5 + 3);
        }
        else
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v16, 0);
          while (v16 != v15);
          v17 = (void *)*((_QWORD *)v5 + 3);
          v18 = v5[160];
        }
        *((_QWORD *)v5 + 4) = v15;
        operator delete(v17);
        goto LABEL_33;
      }
    }
    else
    {
      ((void (*)(char *))*v15)(v5 + 24);
    }
  }
  v18 = 1;
LABEL_33:
  *(_OWORD *)(v5 + 24) = v32;
  *((_QWORD *)v5 + 5) = v33;
  v5[96] = 1;
  v5[104] = 1;
  if (v18)
    AMSCore::AwaitableMutex::unlock(*v6);
  *((_QWORD *)v5 + 19) = v7;
  *(_QWORD *)v5 = 0;
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v6);
}

void sub_18CBE1514(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100]((uint64_t **)va);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v3);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBE1558()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBE14E8);
}

_BYTE *AMSCore::EphemeralHTTPCookieProvider::getCookies(uint64_t a1)
{
  _QWORD *v2;
  std::mutex **v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (**v8)(void);
  uint64_t *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD **)(a1 + 168);
  *(_QWORD *)(a1 + 152) = v2 + 1;
  v3 = (std::mutex **)(a1 + 152);
  v4 = a1 + 16;
  *(_BYTE *)(a1 + 160) = 1;
  v2 += 13;
  *(std::chrono::system_clock::time_point *)&v19 = std::chrono::system_clock::now();
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>(v2, &v19);
  v5 = *(_QWORD *)(a1 + 168);
  v19 = 0uLL;
  v20 = 0;
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::reserve((uint64_t)&v19, *(_QWORD *)(v5 + 120));
  v6 = (_QWORD *)*v2;
  v7 = *(_QWORD *)(a1 + 168) + 112;
  if (v6 != (_QWORD *)v7)
  {
    do
    {
      AMSCore::HTTPCookie::clone((AMSCore::HTTPCookie *)&v21, v6[7]);
      v12 = *((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1) >= v20)
      {
        v14 = std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v19, &v21);
      }
      else
      {
        v13 = v21;
        v21 = 0;
        **((_QWORD **)&v19 + 1) = v13;
        v14 = (uint64_t *)(v12 + 8);
      }
      *((_QWORD *)&v19 + 1) = v14;
      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](&v21, 0);
      v15 = (_QWORD *)v6[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v17 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v17);
      }
      v6 = v16;
    }
    while (v16 != (_QWORD *)v7);
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_19;
  v8 = *(void (***)(void))(a1 + 24);
  if (!*(_BYTE *)(a1 + 96))
  {
    (*v8)();
    goto LABEL_19;
  }
  if (!v8)
  {
LABEL_19:
    v11 = 1;
    goto LABEL_22;
  }
  v9 = *(uint64_t **)(a1 + 32);
  if (v9 == (uint64_t *)v8)
  {
    v11 = 1;
    v10 = *(void **)(a1 + 24);
  }
  else
  {
    do
      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v9, 0);
    while (v9 != (uint64_t *)v8);
    v10 = *(void **)(a1 + 24);
    v11 = *(unsigned __int8 *)(a1 + 160);
  }
  *(_QWORD *)(a1 + 32) = v8;
  operator delete(v10);
LABEL_22:
  *(_OWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 40) = v20;
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  if (v11)
    AMSCore::AwaitableMutex::unlock(*v3);
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)a1 = 0;
  return AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CBE1720(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v9;

  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100](&a9);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v9);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBE175C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBE16F4);
}

void AMSCore::EphemeralHTTPCookieProvider::getCookies(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
  {
    v5 = (uint64_t *)*((_QWORD *)__p + 3);
    if (__p[96])
    {
      if (v5)
      {
        v6 = (uint64_t *)*((_QWORD *)__p + 4);
        v7 = (void *)*((_QWORD *)__p + 3);
        if (v6 != v5)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v6, 0);
          while (v6 != v5);
          v7 = (void *)*((_QWORD *)__p + 3);
        }
        *((_QWORD *)__p + 4) = v5;
        operator delete(v7);
      }
    }
    else
    {
      ((void (*)(char *))*v5)(__p + 24);
    }
  }
  do
  {
    v8 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v9)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523A78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CBE18A0(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CBE18D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t *v12;

  v3 = a1 + 1;
  v2 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v6 = (uint64_t *)v2[7];
      if (*((_BYTE *)v6 + 8))
      {
        v7 = *v6;
        v8 = (_QWORD *)v2[1];
        if (v7 <= *a2)
        {
          v11 = v2;
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (_QWORD *)v11[2];
              v10 = *v9 == (_QWORD)v11;
              v11 = v9;
            }
            while (!v10);
          }
          if ((_QWORD *)*a1 == v2)
            *a1 = v9;
          v12 = (uint64_t *)a1[1];
          --a1[2];
          std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v12, v2);
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](v2 + 7, 0);
          if (*((char *)v2 + 55) < 0)
            operator delete((void *)v2[4]);
          operator delete(v2);
          goto LABEL_4;
        }
        if (v8)
        {
          do
          {
LABEL_10:
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
          goto LABEL_4;
        }
      }
      else
      {
        v8 = (_QWORD *)v2[1];
        if (v8)
          goto LABEL_10;
      }
      do
      {
        v9 = (_QWORD *)v2[2];
        v10 = *v9 == (_QWORD)v2;
        v2 = v9;
      }
      while (!v10);
LABEL_4:
      v2 = v9;
    }
    while (v9 != v3);
  }
}

void std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;

  v2 = *(uint64_t **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v4 = *(char **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[v5];
    v8 = v4 - (char *)v2;
    v9 = (unint64_t)&v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == (char *)v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
LABEL_7:
      if (v2)
        operator delete(v2);
      return;
    }
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) > 0x77)
    {
      v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
         || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
      v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        v13 = v8 >> 3;
        v14 = (v10 >> 3) + 1;
        v11 = (char *)(v9 - 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
        v15 = v4 - 32;
        v16 = &v6[8 * v13 - 16];
        v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *(_OWORD *)v15;
          v18 = *((_OWORD *)v15 + 1);
          *(_OWORD *)v15 = 0uLL;
          *((_OWORD *)v15 + 1) = 0uLL;
          v15 -= 32;
          *((_OWORD *)v16 - 1) = v19;
          *(_OWORD *)v16 = v18;
          v16 -= 32;
          v17 -= 4;
        }
        while (v17);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_20:
          v2 = *(uint64_t **)a1;
          v21 = *(uint64_t **)(a1 + 8);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v7;
          while (v21 != v2)
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v21, 0);
          goto LABEL_7;
        }
        v4 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
      }
    }
    else
    {
      v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v20 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 - 1) = v20;
      v11 -= 8;
    }
    while (v4 != (char *)v2);
    goto LABEL_20;
  }
}

uint64_t *std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 119) < 0)
    {
      operator delete(*(void **)(v2 + 96));
      if ((*(char *)(v2 + 95) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(v2 + 71) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_10;
      }
    }
    else if ((*(char *)(v2 + 95) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(v2 + 72));
    if ((*(char *)(v2 + 71) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(v2 + 39) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
LABEL_10:
    operator delete(*(void **)(v2 + 48));
    if ((*(char *)(v2 + 39) & 0x80000000) == 0)
LABEL_12:
      JUMPOUT(0x18D789BDCLL);
LABEL_11:
    operator delete(*(void **)(v2 + 16));
    goto LABEL_12;
  }
  return result;
}

uint64_t *std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;

  v2 = (char *)a1[1] - (char *)*a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t *)&v9[8 * v3];
  v11 = (uint64_t *)&v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *v10 = v12;
  v13 = v10 + 1;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_23;
  }
  v16 = (char *)v15 - (char *)*a1 - 8;
  if (v16 <= 0x77
    || (uint64_t *)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10
    && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v15)
  {
    goto LABEL_19;
  }
  v17 = (v16 >> 3) + 1;
  v10 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
  v18 = v15 - 4;
  v19 = &v9[8 * v3 - 16];
  v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v22 = *(_OWORD *)v18;
    v21 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v18 = 0uLL;
    *((_OWORD *)v18 + 1) = 0uLL;
    v18 -= 4;
    *((_OWORD *)v19 - 1) = v22;
    *(_OWORD *)v19 = v21;
    v19 -= 32;
    v20 -= 4;
  }
  while (v20);
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
LABEL_19:
      v23 = *--v15;
      *v15 = 0;
      *--v10 = v23;
    }
    while (v15 != v14);
  }
  v15 = *a1;
  v24 = a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v24, 0);
  if (v15)
LABEL_23:
    operator delete(v15);
  return v13;
}

uint64_t **std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  void *__p[2];
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v1 = result;
  v23 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v22 = v21;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v21);
      }
      else
      {
        v22 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v22 = 0;
    }
    if (v22)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        *(_OWORD *)__p = *(_OWORD *)(v5 + 8);
        *(_QWORD *)&v15 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        v6->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v6);
        v8 = (_QWORD *)(v5 + 48);
        v9 = *(_QWORD *)(v5 + 48);
        v15 = *(_OWORD *)(v5 + 24);
        __p[0] = off_1E2521330;
        v16 = *(uint64_t **)(v5 + 40);
        v17 = v9;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v9 + 16) = &v17;
          *(_QWORD *)(v5 + 40) = v8;
          *v8 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v16 = &v17;
        }
        v19 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v20 = v7;
      if (!v22)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, void **))(*(_QWORD *)v22 + 48))(v22, __p);
      v10 = (uint64_t *)__p[0];
      if (v20)
      {
        if (__p[0])
        {
          v11 = (uint64_t *)__p[1];
          v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v11, 0);
            while (v11 != v10);
            v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
      }
      else
      {
        (*(void (**)(void **))__p[0])(__p);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v22;
    if (v22 == v21)
    {
      v13 = 4;
      result = v21;
    }
    else
    {
      if (!v22)
        return result;
      v13 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v13))();
  }
  return result;
}

void sub_18CBE2220(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  std::runtime_error_vtbl *v4;
  uint64_t *imp;
  std::runtime_error_vtbl *v6;
  std::runtime_error_vtbl *p_imp;
  const char *v8;
  std::runtime_error_vtbl *v9;
  std::runtime_error_vtbl *v10;

  if (LOBYTE(this[5].__vftable))
  {
    v4 = this->__vftable;
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      if (v4)
      {
        imp = (uint64_t *)this->__imp_.__imp_;
        v6 = this->__vftable;
        if (imp != (uint64_t *)v4)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--imp, 0);
          while (imp != (uint64_t *)v4);
          v6 = this->__vftable;
        }
        this->__imp_.__imp_ = (const char *)v4;
        operator delete(v6);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v4->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  std::runtime_error::runtime_error(this, a2);
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  this[1] = a2[1];
  this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  this[2].__vftable = a2[2].__vftable;
  p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  v8 = a2[2].__imp_.__imp_;
  this[2].__imp_.__imp_ = v8;
  v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
  v10 = a2[3].__vftable;
  this[3].__vftable = v10;
  if (v10)
  {
    *((_QWORD *)v8 + 2) = v9;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    this[2].__vftable = v9;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  LOBYTE(this[4].__imp_.__imp_) = 0;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteIS4_EEEENS1_9al"
                     "locatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteIS4_"
                                "EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_BYTE *AMSCore::EphemeralHTTPCookieProvider::clear(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  BOOL v4;
  std::mutex *v5;

  v2 = *(_QWORD **)(a1 + 160);
  v3 = (char *)v2[14];
  v2 += 14;
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(v3);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  if (*(_BYTE *)(a1 + 104))
    v4 = *(_BYTE *)(a1 + 96) == 0;
  else
    v4 = 0;
  if (v4)
    (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
  v5 = (std::mutex *)(*(_QWORD *)(a1 + 160) + 8);
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock(v5);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 152) = a1 + 16;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((_BYTE *)(a1 + 152));
}

void AMSCore::EphemeralHTTPCookieProvider::clear(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (char *)(__p + 15);
  v3 = (char *)__p[18];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_BYTE *)__p + 104))
    v5 = *((_BYTE *)__p + 96) == 0;
  else
    v5 = 0;
  if (v5)
    (*(void (**)(char *))__p[3])((char *)__p + 24);
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*((_QWORD *)a1 + 1));
    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)a1 + 7, 0);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

_BYTE *AMSCore::EphemeralHTTPCookieProvider::addCookies(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  std::mutex *v11;
  char v13;
  char v14;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 152) = v2 + 8;
  v3 = (_BYTE *)(a1 + 152);
  v4 = a1 + 16;
  v6 = *(uint64_t **)(a1 + 176);
  v5 = *(uint64_t **)(a1 + 184);
  *(_BYTE *)(a1 + 160) = 1;
  if (v6 != v5)
  {
    v7 = (uint64_t *)(v2 + 104);
    do
    {
      v8 = *v6;
      v9 = *v6 + 16;
      v13 = 124;
      v14 = 124;
      AMSCore::StringUtils::join<std::string,char,std::string,char,std::string>(&__p, v9, &v13, v8 + 48, &v14, v8 + 72);
      std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>::insert_or_assign[abi:fe180100]<std::unique_ptr<AMSCore::HTTPCookie>>(v7, (const void **)&__p.__r_.__value_.__l.__data_, v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v6;
    }
    while (v6 != *(uint64_t **)(a1 + 184));
    v2 = *(_QWORD *)(a1 + 168);
  }
  __p.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>((_QWORD *)(v2 + 104), &__p);
  if (*(_BYTE *)(a1 + 104))
    v10 = *(_BYTE *)(a1 + 96) == 0;
  else
    v10 = 0;
  if (v10)
    (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
  v11 = (std::mutex *)(*(_QWORD *)(a1 + 168) + 8);
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock(v11);
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)a1 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CBE26A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v15);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBE26D0()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBE2678);
}

void AMSCore::EphemeralHTTPCookieProvider::addCookies(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;

  v2 = (char *)(__p + 15);
  v3 = (char *)__p[18];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_BYTE *)__p + 104))
    v5 = *((_BYTE *)__p + 96) == 0;
  else
    v5 = 0;
  if (v5)
    (*(void (**)(char *))__p[3])((char *)__p + 24);
  v6 = __p[22];
  do
  {
    v7 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v8)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v6)
  {
    v9 = (uint64_t *)__p[23];
    if (v9 != (uint64_t *)__p[22])
    {
      do
      {
        v10 = (uint64_t *)__p[22];
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v9, 0);
      }
      while (v9 != v10);
      v9 = (uint64_t *)__p[22];
    }
    operator delete(v9);
  }
  operator delete(__p);
}

uint64_t AMSCore::StringUtils::join<std::string,char,std::string,char,std::string>(std::string *a1, uint64_t a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  _QWORD v30[8];
  void *__p[2];
  __int128 v32;
  int v33;
  uint64_t v34[19];
  _BYTE v35[9];

  v11 = MEMORY[0x1E0DE4FE0];
  v12 = MEMORY[0x1E0DE4FE0] + 64;
  v13 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v34[0] = MEMORY[0x1E0DE4FE0] + 64;
  v29 = v14;
  *(_QWORD *)((char *)&v30[-1] + *(_QWORD *)(v14 - 24)) = v15;
  v16 = (std::ios_base *)((char *)&v30[-1] + *(_QWORD *)(v29 - 24));
  std::ios_base::init(v16, v30);
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  v29 = v11 + 24;
  v34[0] = v12;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x1E0DE4FB8];
  v30[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  v33 = 16;
  v18 = *(char *)(a2 + 23);
  if (v18 >= 0)
    v19 = a2;
  else
    v19 = *(_QWORD *)a2;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v29, v19, v20);
  v35[0] = *a3;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v29, (uint64_t)v35, 1);
  v21 = *(char *)(a4 + 23);
  if (v21 >= 0)
    v22 = a4;
  else
    v22 = *(_QWORD *)a4;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a4 + 23);
  else
    v23 = *(_QWORD *)(a4 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v29, v22, v23);
  v35[0] = *a5;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v29, (uint64_t)v35, 1);
  v24 = *(char *)(a6 + 23);
  if (v24 >= 0)
    v25 = a6;
  else
    v25 = *(_QWORD *)a6;
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a6 + 23);
  else
    v26 = *(_QWORD *)(a6 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v29, v25, v26);
  std::stringbuf::str[abi:fe180100]((uint64_t)v30, a1);
  v29 = *v13;
  *(_QWORD *)((char *)&v30[-1] + *(_QWORD *)(v29 - 24)) = v13[3];
  v30[0] = v17 + 16;
  if (SBYTE7(v32) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v34);
}

void sub_18CBE298C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::ostream::~ostream();
  MEMORY[0x18D789B58](a11);
  __clang_call_terminate(a1);
}

uint64_t *std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>::insert_or_assign[abi:fe180100]<std::unique_ptr<AMSCore::HTTPCookie>>(uint64_t *result, const void **a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  const void *v10;
  size_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  int v30;
  const void *v31;
  size_t v32;
  int v33;
  const void *v34;
  size_t v35;
  size_t v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  _OWORD *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  _QWORD *v50;
  const void *v51;
  const void *v52;
  int v53;
  const void *v54;
  size_t v55;
  size_t v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;

  v4 = result;
  v5 = result + 1;
  v6 = result[1];
  v7 = v6;
  v8 = result + 1;
  if (!v6)
    goto LABEL_56;
  v9 = *((_BYTE *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  v12 = result + 1;
  v13 = result[1];
  do
  {
    while (1)
    {
      v14 = *(char *)(v13 + 55);
      v15 = v14 >= 0 ? (const void *)(v13 + 32) : *(const void **)(v13 + 32);
      v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 55) : *(_QWORD *)(v13 + 40);
      v17 = v11 >= v16 ? v16 : v11;
      result = (uint64_t *)memcmp(v15, v10, v17);
      if ((_DWORD)result)
        break;
      if (v16 >= v11)
        goto LABEL_23;
LABEL_9:
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        goto LABEL_24;
    }
    if ((result & 0x80000000) != 0)
      goto LABEL_9;
LABEL_23:
    v12 = (uint64_t *)v13;
    v13 = *(_QWORD *)v13;
  }
  while (v13);
LABEL_24:
  v8 = v5;
  if (v12 == v5)
    goto LABEL_55;
  v18 = *((char *)v12 + 55);
  if (v18 >= 0)
    v19 = v12 + 4;
  else
    v19 = (const void *)v12[4];
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v12 + 55);
  else
    v20 = v12[5];
  if (v20 >= v11)
    v21 = v11;
  else
    v21 = v20;
  result = (uint64_t *)memcmp(v10, v19, v21);
  if (!(_DWORD)result)
  {
    if (v11 < v20)
      goto LABEL_38;
LABEL_36:
    v22 = *a3;
    *a3 = 0;
    return std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](v12 + 7, v22);
  }
  if ((result & 0x80000000) == 0)
    goto LABEL_36;
LABEL_38:
  v8 = v5;
  if (v5 == v12)
    goto LABEL_55;
  v23 = *((char *)v12 + 55);
  if (v23 >= 0)
    v24 = v12 + 4;
  else
    v24 = (const void *)v12[4];
  if (v23 >= 0)
    v25 = *((unsigned __int8 *)v12 + 55);
  else
    v25 = v12[5];
  if (v25 >= v11)
    v26 = v11;
  else
    v26 = v25;
  result = (uint64_t *)memcmp(v10, v24, v26);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_50;
LABEL_54:
    v8 = v12;
LABEL_55:
    v7 = *v8;
LABEL_56:
    v12 = v8;
    if ((uint64_t *)*v4 == v8)
      goto LABEL_104;
    if (v7)
    {
      v27 = (uint64_t *)v7;
      do
      {
        v12 = v27;
        v27 = (uint64_t *)v27[1];
      }
      while (v27);
    }
    else
    {
      v28 = v8;
      do
      {
        v12 = (uint64_t *)v28[2];
        v29 = *v12 == (_QWORD)v28;
        v28 = v12;
      }
      while (v29);
    }
    v30 = *((char *)v12 + 55);
    if (v30 >= 0)
      v31 = v12 + 4;
    else
      v31 = (const void *)v12[4];
    if (v30 >= 0)
      v32 = *((unsigned __int8 *)v12 + 55);
    else
      v32 = v12[5];
    v33 = *((char *)a2 + 23);
    if (v33 >= 0)
      v34 = a2;
    else
      v34 = *a2;
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)a2 + 23);
    else
      v35 = (size_t)a2[1];
    if (v35 >= v32)
      v36 = v32;
    else
      v36 = v35;
    result = (uint64_t *)memcmp(v31, v34, v36);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_80;
LABEL_104:
      if (v7)
        v8 = v12 + 1;
      else
        v12 = v8;
      goto LABEL_107;
    }
    if (v32 < v35)
      goto LABEL_104;
LABEL_80:
    if (!v6)
    {
      v12 = v5;
LABEL_82:
      v8 = v5;
      goto LABEL_107;
    }
    while (1)
    {
      v12 = (uint64_t *)v6;
      v37 = *(char *)(v6 + 55);
      if (v37 >= 0)
        v38 = (const void *)(v6 + 32);
      else
        v38 = *(const void **)(v6 + 32);
      if (v37 >= 0)
        v39 = *(unsigned __int8 *)(v6 + 55);
      else
        v39 = *(_QWORD *)(v6 + 40);
      if (v39 >= v35)
        v40 = v35;
      else
        v40 = v39;
      v41 = memcmp(v34, v38, v40);
      if (v41)
      {
        if (v41 < 0)
          goto LABEL_83;
      }
      else if (v35 < v39)
      {
LABEL_83:
        v6 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_108;
        continue;
      }
      result = (uint64_t *)memcmp(v38, v34, v40);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_82;
      }
      else if (v39 >= v35)
      {
        goto LABEL_82;
      }
      v5 = v12 + 1;
      v6 = v12[1];
      if (!v6)
        goto LABEL_108;
    }
  }
  if (v11 < v25)
    goto LABEL_54;
LABEL_50:
  result = (uint64_t *)memcmp(v24, v10, v26);
  if (!(_DWORD)result)
  {
    if (v25 >= v11)
      return result;
LABEL_114:
    v8 = v12 + 1;
    v47 = (uint64_t *)v12[1];
    if (v47)
    {
      do
      {
        v8 = v47;
        v47 = (uint64_t *)*v47;
        v12 = v8;
        v48 = v8;
      }
      while (v47);
    }
    else
    {
      v48 = v12;
      do
      {
        v49 = v48;
        v48 = (uint64_t *)v48[2];
      }
      while ((uint64_t *)*v48 != v49);
    }
    if (v48 == v5)
      goto LABEL_107;
    v52 = (const void *)v48[4];
    v50 = v48 + 4;
    v51 = v52;
    v53 = *((char *)v50 + 23);
    if (v53 >= 0)
      v54 = v50;
    else
      v54 = v51;
    if (v53 >= 0)
      v55 = *((unsigned __int8 *)v50 + 23);
    else
      v55 = v50[1];
    if (v55 >= v11)
      v56 = v11;
    else
      v56 = v55;
    result = (uint64_t *)memcmp(v10, v54, v56);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_135;
      goto LABEL_107;
    }
    if (v11 < v55)
    {
LABEL_107:
      v5 = v8;
      if (!*v8)
      {
LABEL_108:
        v42 = operator new(0x40uLL);
        v42[2] = *(_OWORD *)a2;
        v43 = a2[2];
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        v44 = *a3;
        *a3 = 0;
        *((_QWORD *)v42 + 6) = v43;
        *((_QWORD *)v42 + 7) = v44;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
        *((_QWORD *)v42 + 2) = v12;
        *v5 = (uint64_t)v42;
        v45 = *(_QWORD *)*v4;
        if (v45)
        {
          *v4 = v45;
          v46 = (uint64_t *)*v5;
        }
        else
        {
          v46 = (uint64_t *)v42;
        }
        result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v46);
        ++v4[2];
      }
      return result;
    }
    while (1)
    {
LABEL_135:
      v12 = (uint64_t *)v6;
      v57 = *(char *)(v6 + 55);
      if (v57 >= 0)
        v58 = (const void *)(v6 + 32);
      else
        v58 = *(const void **)(v6 + 32);
      if (v57 >= 0)
        v59 = *(unsigned __int8 *)(v6 + 55);
      else
        v59 = *(_QWORD *)(v6 + 40);
      if (v59 >= v11)
        v60 = v11;
      else
        v60 = v59;
      v61 = memcmp(v10, v58, v60);
      if (v61)
      {
        if (v61 < 0)
          goto LABEL_134;
LABEL_148:
        result = (uint64_t *)memcmp(v58, v10, v60);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_82;
        }
        else if (v59 >= v11)
        {
          goto LABEL_82;
        }
        v5 = v12 + 1;
        v6 = v12[1];
        if (!v6)
          goto LABEL_108;
      }
      else
      {
        if (v11 >= v59)
          goto LABEL_148;
LABEL_134:
        v6 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_108;
      }
    }
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_114;
  return result;
}

_BYTE *AMSCore::EphemeralHTTPCookieProvider::addCookie(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  std::mutex *v8;
  char v10;
  char v11;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 152) = v2 + 8;
  v3 = (_BYTE *)(a1 + 152);
  *(_BYTE *)(a1 + 160) = 1;
  v5 = (uint64_t *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 168);
  v6 = a1 + 16;
  v10 = 124;
  v11 = 124;
  AMSCore::StringUtils::join<std::string,char,std::string,char,std::string>(&__p, v4 + 16, &v10, v4 + 48, &v11, v4 + 72);
  v7 = (uint64_t *)(v2 + 104);
  std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>::insert_or_assign[abi:fe180100]<std::unique_ptr<AMSCore::HTTPCookie>>(v7, (const void **)&__p.__r_.__value_.__l.__data_, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>(v7, &__p);
  if (*(_BYTE *)(a1 + 104) && !*(_BYTE *)(a1 + 96))
    (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
  v8 = (std::mutex *)(*(_QWORD *)(a1 + 176) + 8);
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock(v8);
  *(_QWORD *)(a1 + 152) = v6;
  *(_QWORD *)a1 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CBE2F6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v15);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBE2F98()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBE2F40);
}

void AMSCore::EphemeralHTTPCookieProvider::addCookie(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (_QWORD *)(a1 + 120);
  v3 = *(_QWORD **)(a1 + 144);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 104))
    v5 = *(_BYTE *)(a1 + 96) == 0;
  else
    v5 = 0;
  if (v5)
    (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)(a1 + 168), 0);
  operator delete((void *)a1);
}

void std::__shared_ptr_emplace<AMSCore::EphemeralHTTPCookieProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::EphemeralHTTPCookieProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::EphemeralHTTPCookieProvider>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(char **)(a1 + 136));
  if (*(_QWORD *)(a1 + 120))
  {
    v3 = *(_QWORD *)(a1 + 104);
    v2 = *(uint64_t **)(a1 + 112);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 120) = 0;
    if (v2 != (uint64_t *)(a1 + 104))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 104));
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrINS_19IHTTPCookieProviderEEENS_5ErrorEE7Promise17get_return_obje"
                     "ctEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_19IHTTPCookieProviderEEENS_5ErrorEE7Promise17get_"
                                "return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrINS_19IHTTPCookieProviderEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_19IHTTPCookieProviderEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_BYTE *AMSCore::EphemeralAccountProvider::getActiveMediaAccount(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 176) = v2 + 192;
  v3 = (_BYTE *)(a1 + 176);
  v4 = a1 + 16;
  *(_BYTE *)(a1 + 184) = 1;
  v5 = *(_QWORD **)(v2 + 24);
  v6 = *(_QWORD **)(v2 + 32);
  if (v5 == v6)
  {
LABEL_4:
    if (*(_BYTE *)(a1 + 104))
    {
      v7 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(a1 + 96))
      {
        *(_QWORD *)(a1 + 24) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      else
      {
        (*(void (**)(uint64_t))v7)(a1 + 24);
      }
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    while (!(*(unsigned int (**)(_QWORD, _BYTE *))(*(_QWORD *)*v5 + 80))(*v5, v3 - 24))
    {
      if (++v5 == v6)
        goto LABEL_4;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v5 + 48))(&v10);
    if (*(_BYTE *)(a1 + 104))
    {
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(a1 + 96))
      {
        *(_QWORD *)(a1 + 24) = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      else
      {
        (*(void (**)(uint64_t))v8)(a1 + 24);
      }
    }
    *(_QWORD *)(a1 + 24) = v10;
  }
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock((std::mutex *)(*(_QWORD *)(a1 + 192) + 192));
  *(_QWORD *)(a1 + 176) = v4;
  *(_QWORD *)a1 = 0;
  return AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CBE330C(void *a1)
{
  uint64_t v1;

  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBE3328()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBE32E4);
}

void AMSCore::EphemeralAccountProvider::getActiveMediaAccount(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
  {
    v5 = *((_QWORD *)__p + 3);
    if (__p[96])
    {
      *((_QWORD *)__p + 3) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
      (*(void (**)(char *))v5)(__p + 24);
    }
  }
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (__p[175] < 0)
    operator delete(*((void **)__p + 19));
  operator delete(__p);
}

void AMSCore::EphemeralAccountProvider::getActiveiCloudAccount(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v2 = __p + 120;
  v3 = (char *)*((_QWORD *)__p + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (__p[104])
  {
    v5 = *((_QWORD *)__p + 3);
    if (__p[96])
    {
      *((_QWORD *)__p + 3) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
      (*(void (**)(char *))v5)(__p + 24);
    }
  }
  do
  {
    v6 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v7)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_8:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    goto LABEL_8;
  }
}

void std::__shared_ptr_pointer<AMSCore::EphemeralAccountProvider *,std::shared_ptr<AMSCore::IAccountProvider>::__shared_ptr_default_delete<AMSCore::IAccountProvider,AMSCore::EphemeralAccountProvider>,std::allocator<AMSCore::EphemeralAccountProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::EphemeralAccountProvider *,std::shared_ptr<AMSCore::IAccountProvider>::__shared_ptr_default_delete<AMSCore::IAccountProvider,AMSCore::EphemeralAccountProvider>,std::allocator<AMSCore::EphemeralAccountProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::EphemeralAccountProvider *,std::shared_ptr<AMSCore::IAccountProvider>::__shared_ptr_default_delete<AMSCore::IAccountProvider,AMSCore::EphemeralAccountProvider>,std::allocator<AMSCore::EphemeralAccountProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN7AMSCore16IAccountProviderEE27__shared_ptr_default_deleteIS2_NS1_24EphemeralAc"
                     "countProviderEEE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN7AMSCore16IAccountProviderEE27__shared_ptr_default_deleteIS2_NS1_24"
                                "EphemeralAccountProviderEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN7AMSCore16IAccountProviderEE27__shared_ptr_default_deleteIS2_NS1_24EphemeralAccountProviderEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN7AMSCore16IAccountProviderEE27__shared_ptr_default_deleteIS2_NS1_24EphemeralAccountProviderEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::construct_at[abi:fe180100]<AMSCore::MediaAccount,AMSCore::AccountIdentity,AMSCore::MediaAccount*>(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char *v5;
  void *__p[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uuid_t out;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  LOBYTE(__p[0]) = 0;
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
  v4 = *(_QWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  v5 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v5 + 31) = 0;
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  uuid_unparse_lower(out, v5 + 1);
  *v5 = 123;
  v5[37] = 125;
  *(_QWORD *)a1 = &off_1E2520648;
  *(_QWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = xmmword_18CF51AF0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (v3)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 48) = v8;
    HIBYTE(v8) = 0;
    __p[0] = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = off_1E2520AA8;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  if (v3 && SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_18CBE3924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  operator delete(v9);
  AMSCore::AccountIdentity::~AccountIdentity(&a9);
  _Unwind_Resume(a1);
}

void AMSCore::AwaitableMutex::~AwaitableMutex(std::mutex *this)
{
  char *opaque;
  std::mutex *v3;
  uint64_t v4;
  uint64_t sig;
  std::mutex *v6;

  if (*(_QWORD *)&this[1].__m_.__opaque[16])
  {
    opaque = this[1].__m_.__opaque;
    v4 = *(_QWORD *)this[1].__m_.__opaque;
    v3 = *(std::mutex **)&this[1].__m_.__opaque[8];
    sig = v3->__m_.__sig;
    *(_QWORD *)(sig + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = sig;
    *(_QWORD *)&this[1].__m_.__opaque[16] = 0;
    if (v3 != (std::mutex *)this[1].__m_.__opaque)
    {
      do
      {
        v6 = *(std::mutex **)v3->__m_.__opaque;
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != (std::mutex *)opaque);
    }
  }
  std::mutex::~mutex(this);
}

void AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::~Subject(std::mutex *this)
{
  uint64_t sig;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  sig = this[1].__m_.__sig;
  if (sig)
  {
    v3 = *(_QWORD *)this[1].__m_.__opaque;
    v4 = (void *)this[1].__m_.__sig;
    if (v3 != sig)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != sig);
      v4 = (void *)this[1].__m_.__sig;
    }
    *(_QWORD *)this[1].__m_.__opaque = sig;
    operator delete(v4);
  }
  std::mutex::~mutex(this);
}

void std::__shared_ptr_emplace<AMSCore::MediaAccount>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::MediaAccount>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::MediaAccount>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMSCore::MediaAccount::~MediaAccount(AMSCore::MediaAccount *this)
{
  AMSCore::MediaAccount::~MediaAccount(this);
  JUMPOUT(0x18D789BDCLL);
}

{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E2520648;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 144, *((unsigned int **)this + 19));
  v2 = (void **)*((_QWORD *)this + 15);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    operator delete(v3);
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    if (!*((_BYTE *)this + 56))
      goto LABEL_12;
  }
  else if (!*((_BYTE *)this + 56))
  {
LABEL_12:
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if ((*((char *)this + 55) & 0x80000000) == 0)
    goto LABEL_12;
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
LABEL_13:
    operator delete(*((void **)this + 1));
}

uint64_t *AMSCore::IMediaAccount::getFlag(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = v5 + 8;
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    return &AMSCore::Any::Null(void)::null;
  v8 = v5 + 8;
  do
  {
    while (1)
    {
      v9 = *(char *)(v7 + 55);
      v10 = v9 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
      v11 = v9 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(_QWORD *)(v7 + 40);
      v12 = v11 >= a3 ? a3 : v11;
      v13 = memcmp(a2, v10, v12);
      if (v13)
        break;
      if (a3 <= v11)
        goto LABEL_17;
LABEL_3:
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        goto LABEL_18;
    }
    if ((v13 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v8 = v7;
    v7 = *(_QWORD *)v7;
  }
  while (v7);
LABEL_18:
  if (v8 == v6)
    return &AMSCore::Any::Null(void)::null;
  v14 = *(char *)(v8 + 55);
  if (v14 >= 0)
    v15 = (const void *)(v8 + 32);
  else
    v15 = *(const void **)(v8 + 32);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v8 + 55);
  else
    v16 = *(_QWORD *)(v8 + 40);
  if (v16 >= a3)
    v17 = a3;
  else
    v17 = v16;
  v18 = memcmp(a2, v15, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
      return (uint64_t *)(v8 + 56);
    return &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (a3 < v16)
      return &AMSCore::Any::Null(void)::null;
    return (uint64_t *)(v8 + 56);
  }
}

uint64_t *AMSCore::IMediaAccount::getFlags(AMSCore::IMediaAccount *this)
{
  uint64_t v1;
  uint64_t *result;
  unsigned __int8 v3;

  v1 = (*(uint64_t (**)(AMSCore::IMediaAccount *))(*(_QWORD *)this + 120))(this);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v1 + 24))(v1, "accountFlags", 12);
  if (*((_DWORD *)result + 6) != 8)
  {
    if ((v3 & 1) != 0)
    {
      return &AMSCore::IMediaAccount::getFlags(void)const::emptyAny;
    }
    else
    {
      {
        qword_1EE0607F0 = 0;
        qword_1EE0607E8 = 0;
        AMSCore::IMediaAccount::getFlags(void)const::emptyAny = (uint64_t)&qword_1EE0607E8;
      }
      return &AMSCore::IMediaAccount::getFlags(void)const::emptyAny;
    }
  }
  return result;
}

void AMSCore::IMediaAccount::setFlag(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  const void ***v12;
  const void ***v13;
  const void **v14;
  uint64_t *v15;
  const void **v16;
  const void ***v17;
  BOOL v18;
  unsigned int **v19;
  unsigned int *v20[2];
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  const void *__dst[2];
  unint64_t v25;

  v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((AMSCore::operator==(v8, (unsigned __int8 *)a4) & 1) != 0)
    return;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  if (a3 >= 0x17)
  {
    v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v10 = a3 | 7;
    v11 = v10 + 1;
    v9 = (const void **)operator new(v10 + 1);
    __dst[1] = (const void *)a3;
    v25 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v25) = a3;
    v9 = __dst;
    if (!a3)
      goto LABEL_10;
  }
  memmove(v9, a2, a3);
LABEL_10:
  *((_BYTE *)v9 + a3) = 0;
  v12 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v22 = 0;
  v23 = 0;
  v21 = &v22;
  v13 = v12 + 1;
  v14 = *v12;
  if (*v12 != (const void **)(v12 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v21, (uint64_t *)&v22, v14 + 4, (__int128 *)v14 + 2);
      v16 = (const void **)v14[1];
      if (v16)
      {
        do
        {
          v17 = (const void ***)v16;
          v16 = (const void **)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (const void ***)v14[2];
          v18 = *v17 == v14;
          v14 = (const void **)v17;
        }
        while (!v18);
      }
      v14 = (const void **)v17;
    }
    while (v17 != v13);
  }
  if ((*(_DWORD *)(a4 + 24) + 1) > 1)
  {
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>(&v21, __dst, a4);
  }
  else
  {
    v15 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)&v21, __dst);
    if (&v22 != (unsigned int **)v15)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(&v21, (uint64_t)v15);
  }
  v19 = v21;
  v20[0] = v22;
  v20[1] = v23;
  if (v23)
  {
    *((_QWORD *)v22 + 2) = v20;
    v21 = &v22;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    v19 = v20;
  }
  (*(void (**)(uint64_t, unsigned int ***))(*(_QWORD *)a1 + 40))(a1, &v19);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, v20[0]);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)__dst[0]);
}

void sub_18CBE3E44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14)
{
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a13, a14);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::IMediaAccount::setFlags(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  int v10;
  char v11;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v4 = a2 + 1;
  v5 = a2[1];
  v7 = (uint64_t *)*a2;
  v8 = v5;
  if (a2[2])
  {
    *(_QWORD *)(v5 + 16) = &v8;
    *a2 = v4;
    *v4 = 0;
    a2[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  v10 = 8;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t **))(*(_QWORD *)v3 + 104))(v3, "accountFlags", 12, &v7);
  if (v10 != -1)
    return ((uint64_t (*)(char *, uint64_t **))off_1E253D240[v10])(&v11, &v7);
  return result;
}

void AMSCore::MediaAccount::clone(AMSCore::MediaAccount *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  const void **v7;
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_1E2520648;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 8), *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_BYTE *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 56) = 0;
  if (*((_BYTE *)this + 56))
  {
    if (*((char *)this + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v5 + 32), *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
    }
    else
    {
      *(_OWORD *)(v5 + 32) = *((_OWORD *)this + 2);
      *(_QWORD *)(v5 + 48) = *((_QWORD *)this + 6);
    }
    *(_BYTE *)(v5 + 56) = 1;
  }
  *(_QWORD *)(v5 + 64) = *((_QWORD *)this + 8);
  v6 = (std::string *)(v5 + 72);
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    *(_QWORD *)(v5 + 88) = *((_QWORD *)this + 11);
  }
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 144) = v5 + 152;
  *(_QWORD *)(v5 + 96) = off_1E2520AA8;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_DWORD *)(v5 + 136) = 1065353216;
  *(_QWORD *)(v5 + 160) = 0;
  v7 = (const void **)*((_QWORD *)this + 18);
  v8 = (char *)this + 152;
  if (v7 != (const void **)v8)
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)(v5 + 144), (uint64_t *)(v5 + 152), v7 + 4, (__int128 *)v7 + 2);
      v9 = (char *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)v7[2];
          v11 = *(_QWORD *)v10 == (_QWORD)v7;
          v7 = (const void **)v10;
        }
        while (!v11);
      }
      v7 = (const void **)v10;
    }
    while (v10 != v8);
  }
  *a2 = v5;
}

void sub_18CBE40C4(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[56] && v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  MEMORY[0x18D789BDC](v1, 0x10B3C40FF472039);
  _Unwind_Resume(a1);
}

void AMSCore::MediaAccount::getActiveClients(AMSCore::MediaAccount *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  __int128 **VectorValue;
  char v4;

  VectorValue = (__int128 **)AMSCore::AccountProperties::getVectorValue((uint64_t)this + 96, "activeIdentifiers", 0x11uLL);
  if (v4)
  {
    AMSCore::toStringVector(a2, VectorValue);
  }
  else
  {
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
  }
}

uint64_t AMSCore::MediaAccount::getIdentifier(AMSCore::MediaAccount *this)
{
  return (uint64_t)this + 8;
}

uint64_t AMSCore::MediaAccount::getIdentity(AMSCore::MediaAccount *this)
{
  return (uint64_t)this + 32;
}

BOOL AMSCore::MediaAccount::getIsActive(uint64_t a1, _BYTE *a2)
{
  uint64_t *VectorValue;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  VectorValue = (uint64_t *)AMSCore::AccountProperties::getVectorValue(a1 + 96, "activeIdentifiers", 0x11uLL);
  if (!v4)
    return 0;
  v5 = *VectorValue;
  v6 = VectorValue[1];
  if (*VectorValue == v6)
  {
    v6 = *VectorValue;
  }
  else
  {
    v7 = a2[23];
    if (v7 >= 0)
      v8 = a2[23];
    else
      v8 = *((_QWORD *)a2 + 1);
    if (v7 < 0)
      a2 = *(_BYTE **)a2;
    do
    {
      if (*(_DWORD *)(v5 + 24) == 5)
      {
        v9 = *(unsigned __int8 *)(v5 + 23);
        v10 = (v9 & 0x80u) == 0 ? *(unsigned __int8 *)(v5 + 23) : *(_QWORD *)(v5 + 8);
        if (v10 == v8)
        {
          if ((v9 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v5, a2, *(_QWORD *)(v5 + 8)))
              return v5 != v6;
          }
          else
          {
            if (!*(_BYTE *)(v5 + 23))
              return v5 != v6;
            v11 = 0;
            v12 = v9 - 1;
            do
            {
              v13 = *(unsigned __int8 *)(v5 + v11);
              v14 = a2[v11];
            }
            while (v13 == v14 && v12 != v11++);
            if (v13 == v14)
              return v5 != v6;
          }
        }
      }
      v5 += 32;
    }
    while (v5 != v6);
    v5 = v6;
  }
  return v5 != v6;
}

void AMSCore::MediaAccount::getIsEmpty(AMSCore::MediaAccount *this)
{
  _BYTE v1[32];
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1[0] = 0;
  v1[24] = 0;
  v2 = -1;
  v3 = 7824750;
  v4 = 3;
  AMSCore::operator==((uint64_t)this + 32, (uint64_t)v1);
}

BOOL AMSCore::MediaAccount::getIsLocal(AMSCore::MediaAccount *this)
{
  _QWORD *VectorValue;
  char v2;

  VectorValue = (_QWORD *)AMSCore::AccountProperties::getVectorValue((uint64_t)this + 96, "localIdentifiers", 0x10uLL);
  return v2 && *VectorValue != VectorValue[1];
}

BOOL AMSCore::MediaAccount::getIsLocal(uint64_t a1, _BYTE *a2)
{
  uint64_t *VectorValue;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  VectorValue = (uint64_t *)AMSCore::AccountProperties::getVectorValue(a1 + 96, "localIdentifiers", 0x10uLL);
  if (!v4)
    return 0;
  v5 = *VectorValue;
  v6 = VectorValue[1];
  if (*VectorValue == v6)
  {
    v6 = *VectorValue;
  }
  else
  {
    v7 = a2[23];
    if (v7 >= 0)
      v8 = a2[23];
    else
      v8 = *((_QWORD *)a2 + 1);
    if (v7 < 0)
      a2 = *(_BYTE **)a2;
    do
    {
      if (*(_DWORD *)(v5 + 24) == 5)
      {
        v9 = *(unsigned __int8 *)(v5 + 23);
        v10 = (v9 & 0x80u) == 0 ? *(unsigned __int8 *)(v5 + 23) : *(_QWORD *)(v5 + 8);
        if (v10 == v8)
        {
          if ((v9 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v5, a2, *(_QWORD *)(v5 + 8)))
              return v5 != v6;
          }
          else
          {
            if (!*(_BYTE *)(v5 + 23))
              return v5 != v6;
            v11 = 0;
            v12 = v9 - 1;
            do
            {
              v13 = *(unsigned __int8 *)(v5 + v11);
              v14 = a2[v11];
            }
            while (v13 == v14 && v12 != v11++);
            if (v13 == v14)
              return v5 != v6;
          }
        }
      }
      v5 += 32;
    }
    while (v5 != v6);
    v5 = v6;
  }
  return v5 != v6;
}

uint64_t AMSCore::MediaAccount::getProperties(AMSCore::MediaAccount *this)
{
  return (uint64_t)this + 96;
}

{
  return (uint64_t)this + 96;
}

void AMSCore::MediaAccount::getStorefront(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  unint64_t MapValue;
  char v6;
  unint64_t v7;
  uint64_t *v8;
  const std::string::value_type **v9;
  __int128 v10;
  char v11;

  MapValue = AMSCore::AccountProperties::getMapValue(a1 + 96, "storefronts", 0xBuLL);
  if (v6
    && (v7 = MapValue,
        v8 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(MapValue, a2), (uint64_t *)(v7 + 8) != v8)&& (v9 = (const std::string::value_type **)(v8 + 7), *((_DWORD *)v8 + 20) == 5))
  {
    if (*((char *)v8 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *v9, v8[8]);
    }
    else
    {
      v10 = *(_OWORD *)v9;
      a3->__r_.__value_.__r.__words[2] = v8[9];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
    }
    v11 = 1;
  }
  else
  {
    v11 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v11;
}

__n128 AMSCore::MediaAccount::setIdentity(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void **v7;
  __n128 result;

  v4 = a1 + 32;
  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(char *)(a1 + 55) < 0)
        operator delete(*(void **)v4);
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)v4);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 4);
  v7 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v7);
  result = *(__n128 *)((char *)a2 + 40);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 7);
  *(__n128 *)v7 = result;
  *((_BYTE *)a2 + 63) = 0;
  *((_BYTE *)a2 + 40) = 0;
  return result;
}

void AMSCore::MediaAccount::setIsActive(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t VectorValue;
  char v7;
  BOOL v8;
  char *v9;
  char *v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  const std::string::value_type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  int v36;
  __int128 v37;
  unint64_t v38;
  char v39;

  v37 = 0uLL;
  v38 = 0;
  v5 = a1 + 96;
  VectorValue = AMSCore::AccountProperties::getVectorValue(a1 + 96, "activeIdentifiers", 0x11uLL);
  if (v7)
    v8 = &v37 == (__int128 *)VectorValue;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 0;
    v10 = 0;
LABEL_7:
    if (!a2)
      goto LABEL_53;
    if ((unint64_t)v9 >= v38)
    {
      v9 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::string const&>((char **)&v37, a3);
    }
    else
    {
      if (*(char *)(a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        v11 = *(_OWORD *)a3;
        *((_QWORD *)v9 + 2) = *(_QWORD *)(a3 + 16);
        *(_OWORD *)v9 = v11;
      }
      *((_DWORD *)v9 + 6) = 5;
      v9 += 32;
    }
    goto LABEL_52;
  }
  std::vector<AMSCore::Any>::__assign_with_size[abi:fe180100]<AMSCore::Any*,AMSCore::Any*>((uint64_t *)&v37, *(_QWORD *)VectorValue, *(_QWORD *)(VectorValue + 8), (uint64_t)(*(_QWORD *)(VectorValue + 8) - *(_QWORD *)VectorValue) >> 5);
  v9 = (char *)*((_QWORD *)&v37 + 1);
  v10 = (char *)v37;
  if ((_QWORD)v37 == *((_QWORD *)&v37 + 1))
  {
    v9 = (char *)v37;
    goto LABEL_7;
  }
  v12 = *(_BYTE *)(a3 + 23);
  if (v12 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  if (v12 >= 0)
    v14 = (const std::string::value_type *)a3;
  else
    v14 = *(const std::string::value_type **)a3;
  v15 = v37;
  do
  {
    if (*(_DWORD *)(v15 + 24) == 5)
    {
      v16 = *(unsigned __int8 *)(v15 + 23);
      v17 = (v16 & 0x80u) == 0 ? *(unsigned __int8 *)(v15 + 23) : *(_QWORD *)(v15 + 8);
      if (v17 == v13)
      {
        if ((v16 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v15, v14, *(_QWORD *)(v15 + 8)))
            goto LABEL_37;
        }
        else
        {
          if (!*(_BYTE *)(v15 + 23))
            goto LABEL_37;
          v18 = 0;
          v19 = v16 - 1;
          do
          {
            v20 = *(unsigned __int8 *)(v15 + v18);
            v21 = v14[v18];
          }
          while (v20 == v21 && v19 != v18++);
          if (v20 == v21)
            goto LABEL_37;
        }
      }
    }
    v15 += 32;
  }
  while ((char *)v15 != v9);
  v15 = (uint64_t)v9;
LABEL_37:
  if ((char *)v15 == v9)
    goto LABEL_7;
  if ((a2 & 1) != 0)
    goto LABEL_53;
  if ((char *)(v15 + 32) != v9)
  {
    do
    {
      v23 = v15;
      v15 += 32;
    }
    while ((char *)(AMSCore::Any::operator=(v23, v15) + 64) != v9);
    v9 = (char *)*((_QWORD *)&v37 + 1);
  }
  if (v9 != (char *)v15)
  {
    do
    {
      v24 = v9 - 32;
      v25 = *((unsigned int *)v9 - 2);
      if ((_DWORD)v25 != -1)
        ((void (*)(char *, char *))off_1E253D240[v25])(&v39, v9 - 32);
      *((_DWORD *)v9 - 2) = -1;
      v9 -= 32;
    }
    while (v24 != (char *)v15);
    v9 = (char *)v15;
  }
LABEL_52:
  *((_QWORD *)&v37 + 1) = v9;
  v10 = (char *)v37;
LABEL_53:
  if (v10 == v9)
  {
    v32 = 0u;
    v33 = 0u;
    AMSCore::AccountProperties::setValue(v5, "activeIdentifiers", 0x11uLL, (uint64_t)&v32);
    v26 = (int *)&v33 + 2;
    if (DWORD2(v33) != -1)
      ((void (*)(char *, __int128 *))off_1E253D240[DWORD2(v33)])(&v39, &v32);
  }
  else
  {
    v34 = v37;
    v35 = v38;
    v38 = 0;
    v37 = 0uLL;
    v36 = 9;
    AMSCore::AccountProperties::setValue(v5, "activeIdentifiers", 0x11uLL, (uint64_t)&v34);
    v26 = &v36;
    if (v36 != -1)
      ((void (*)(char *, __int128 *))off_1E253D240[v36])(&v39, &v34);
  }
  *v26 = -1;
  v27 = v37;
  if ((_QWORD)v37)
  {
    v28 = *((_QWORD *)&v37 + 1);
    v29 = (void *)v37;
    if (*((_QWORD *)&v37 + 1) != (_QWORD)v37)
    {
      do
      {
        v30 = v28 - 32;
        v31 = *(unsigned int *)(v28 - 8);
        if ((_DWORD)v31 != -1)
          ((void (*)(char *, uint64_t))off_1E253D240[v31])(&v39, v28 - 32);
        *(_DWORD *)(v28 - 8) = -1;
        v28 -= 32;
      }
      while (v30 != v27);
      v29 = (void *)v37;
    }
    *((_QWORD *)&v37 + 1) = v27;
    operator delete(v29);
  }
}

void sub_18CBE497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::vector<AMSCore::Any>::~vector[abi:fe180100]((void **)va);
  _Unwind_Resume(a1);
}

void AMSCore::MediaAccount::setIsLocal(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t VectorValue;
  char v7;
  BOOL v8;
  char *v9;
  char *v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  const std::string::value_type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  int v36;
  __int128 v37;
  unint64_t v38;
  char v39;

  v37 = 0uLL;
  v38 = 0;
  v5 = a1 + 96;
  VectorValue = AMSCore::AccountProperties::getVectorValue(a1 + 96, "localIdentifiers", 0x10uLL);
  if (v7)
    v8 = &v37 == (__int128 *)VectorValue;
  else
    v8 = 1;
  if (v8)
  {
    v9 = 0;
    v10 = 0;
LABEL_7:
    if (!a2)
      goto LABEL_53;
    if ((unint64_t)v9 >= v38)
    {
      v9 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::string const&>((char **)&v37, a3);
    }
    else
    {
      if (*(char *)(a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        v11 = *(_OWORD *)a3;
        *((_QWORD *)v9 + 2) = *(_QWORD *)(a3 + 16);
        *(_OWORD *)v9 = v11;
      }
      *((_DWORD *)v9 + 6) = 5;
      v9 += 32;
    }
    goto LABEL_52;
  }
  std::vector<AMSCore::Any>::__assign_with_size[abi:fe180100]<AMSCore::Any*,AMSCore::Any*>((uint64_t *)&v37, *(_QWORD *)VectorValue, *(_QWORD *)(VectorValue + 8), (uint64_t)(*(_QWORD *)(VectorValue + 8) - *(_QWORD *)VectorValue) >> 5);
  v9 = (char *)*((_QWORD *)&v37 + 1);
  v10 = (char *)v37;
  if ((_QWORD)v37 == *((_QWORD *)&v37 + 1))
  {
    v9 = (char *)v37;
    goto LABEL_7;
  }
  v12 = *(_BYTE *)(a3 + 23);
  if (v12 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  if (v12 >= 0)
    v14 = (const std::string::value_type *)a3;
  else
    v14 = *(const std::string::value_type **)a3;
  v15 = v37;
  do
  {
    if (*(_DWORD *)(v15 + 24) == 5)
    {
      v16 = *(unsigned __int8 *)(v15 + 23);
      v17 = (v16 & 0x80u) == 0 ? *(unsigned __int8 *)(v15 + 23) : *(_QWORD *)(v15 + 8);
      if (v17 == v13)
      {
        if ((v16 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v15, v14, *(_QWORD *)(v15 + 8)))
            goto LABEL_37;
        }
        else
        {
          if (!*(_BYTE *)(v15 + 23))
            goto LABEL_37;
          v18 = 0;
          v19 = v16 - 1;
          do
          {
            v20 = *(unsigned __int8 *)(v15 + v18);
            v21 = v14[v18];
          }
          while (v20 == v21 && v19 != v18++);
          if (v20 == v21)
            goto LABEL_37;
        }
      }
    }
    v15 += 32;
  }
  while ((char *)v15 != v9);
  v15 = (uint64_t)v9;
LABEL_37:
  if ((char *)v15 == v9)
    goto LABEL_7;
  if ((a2 & 1) != 0)
    goto LABEL_53;
  if ((char *)(v15 + 32) != v9)
  {
    do
    {
      v23 = v15;
      v15 += 32;
    }
    while ((char *)(AMSCore::Any::operator=(v23, v15) + 64) != v9);
    v9 = (char *)*((_QWORD *)&v37 + 1);
  }
  if (v9 != (char *)v15)
  {
    do
    {
      v24 = v9 - 32;
      v25 = *((unsigned int *)v9 - 2);
      if ((_DWORD)v25 != -1)
        ((void (*)(char *, char *))off_1E253D240[v25])(&v39, v9 - 32);
      *((_DWORD *)v9 - 2) = -1;
      v9 -= 32;
    }
    while (v24 != (char *)v15);
    v9 = (char *)v15;
  }
LABEL_52:
  *((_QWORD *)&v37 + 1) = v9;
  v10 = (char *)v37;
LABEL_53:
  if (v10 == v9)
  {
    v32 = 0u;
    v33 = 0u;
    AMSCore::AccountProperties::setValue(v5, "localIdentifiers", 0x10uLL, (uint64_t)&v32);
    v26 = (int *)&v33 + 2;
    if (DWORD2(v33) != -1)
      ((void (*)(char *, __int128 *))off_1E253D240[DWORD2(v33)])(&v39, &v32);
  }
  else
  {
    v34 = v37;
    v35 = v38;
    v38 = 0;
    v37 = 0uLL;
    v36 = 9;
    AMSCore::AccountProperties::setValue(v5, "localIdentifiers", 0x10uLL, (uint64_t)&v34);
    v26 = &v36;
    if (v36 != -1)
      ((void (*)(char *, __int128 *))off_1E253D240[v36])(&v39, &v34);
  }
  *v26 = -1;
  v27 = v37;
  if ((_QWORD)v37)
  {
    v28 = *((_QWORD *)&v37 + 1);
    v29 = (void *)v37;
    if (*((_QWORD *)&v37 + 1) != (_QWORD)v37)
    {
      do
      {
        v30 = v28 - 32;
        v31 = *(unsigned int *)(v28 - 8);
        if ((_DWORD)v31 != -1)
          ((void (*)(char *, uint64_t))off_1E253D240[v31])(&v39, v28 - 32);
        *(_DWORD *)(v28 - 8) = -1;
        v28 -= 32;
      }
      while (v30 != v27);
      v29 = (void *)v37;
    }
    *((_QWORD *)&v37 + 1) = v27;
    operator delete(v29);
  }
}

void sub_18CBE4D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::vector<AMSCore::Any>::~vector[abi:fe180100]((void **)va);
  _Unwind_Resume(a1);
}

void AMSCore::MediaAccount::setStorefront(uint64_t a1, uint64_t a2, const std::string::value_type **a3)
{
  uint64_t v5;
  unint64_t MapValue;
  char v7;
  BOOL v8;
  uint64_t *v9;
  int *v10;
  __int128 v11;
  __int128 v12;
  unsigned int **v13;
  _QWORD v14[2];
  int v15;
  unsigned int **v16;
  unsigned int *v17;
  uint64_t v18;
  char v19;

  v17 = 0;
  v18 = 0;
  v16 = &v17;
  v5 = a1 + 96;
  MapValue = AMSCore::AccountProperties::getMapValue(a1 + 96, "storefronts", 0xBuLL);
  if (v7)
    v8 = &v16 == (unsigned int ***)MapValue;
  else
    v8 = 1;
  if (!v8)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>((uint64_t)&v16, *(__int128 **)MapValue, (__int128 *)(MapValue + 8));
  if (*(_BYTE *)(a2 + 24))
  {
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(&v16, a3, (__int128 *)a2);
  }
  else
  {
    v9 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)&v16, (const void **)a3);
    if (&v17 != (unsigned int **)v9)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(&v16, (uint64_t)v9);
  }
  if (v18)
  {
    v13 = v16;
    v14[0] = v17;
    v14[1] = v18;
    *((_QWORD *)v17 + 2) = v14;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
    v15 = 8;
    AMSCore::AccountProperties::setValue(v5, "storefronts", 0xBuLL, (uint64_t)&v13);
    v10 = &v15;
    if (v15 != -1)
      ((void (*)(char *, unsigned int ***))off_1E253D240[v15])(&v19, &v13);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    AMSCore::AccountProperties::setValue(v5, "storefronts", 0xBuLL, (uint64_t)&v11);
    v10 = (int *)&v12 + 2;
    if (DWORD2(v12) != -1)
      ((void (*)(char *, __int128 *))off_1E253D240[DWORD2(v12)])(&v19, &v11);
  }
  *v10 = -1;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v17);
}

void sub_18CBE4F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  AMSCore::Any::~Any((AMSCore::Any *)&a9);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a17, *(unsigned int **)(v17 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  __int128 *v12;
  void **v13;
  char v14;
  __int128 v15;
  void *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  int v24;
  const void *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  size_t v33;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  __int128 *v37;
  BOOL v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int *v41;
  char **v42;
  char *v43;
  std::string *v44;
  char *v45;
  char **v46;
  char **v47;
  int v48;
  std::string *v49;
  size_t v50;
  _QWORD *v51;
  const void *v52;
  const void *v53;
  int v54;
  const void *v55;
  size_t v56;
  size_t v57;
  int v58;
  uint64_t v59;
  __int128 *v60;
  __int128 *v61;
  unsigned int *v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t *v66;

  v4 = a2;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_82;
  v6 = *(uint64_t **)a1;
  v8 = (uint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = v6[1] ? (unsigned int *)v6[1] : (unsigned int *)v6;
  v64 = a1;
  v66 = (uint64_t *)v9;
  if (!v9)
    goto LABEL_82;
  v10 = (unsigned int *)*((_QWORD *)v9 + 2);
  if (v10)
  {
    v11 = *(unsigned int **)v10;
    if (*(unsigned int **)v10 == v9)
    {
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v62 = (unsigned int *)*((_QWORD *)v10 + 1);
        if (!v62)
          break;
        do
        {
          v10 = v62;
          v62 = *(unsigned int **)v62;
        }
        while (v62);
      }
    }
    else
    {
      for (*((_QWORD *)v10 + 1) = 0; v11; v11 = (unsigned int *)*((_QWORD *)v10 + 1))
      {
        do
        {
          v10 = v11;
          v11 = *(unsigned int **)v11;
        }
        while (v11);
      }
    }
  }
  v65 = v10;
  if (a2 == a3)
  {
    v40 = a1;
    goto LABEL_77;
  }
  v12 = a2;
  do
  {
    if (v9 != (unsigned int *)v12)
    {
      v13 = (void **)(v9 + 8);
      v14 = *((_BYTE *)v12 + 55);
      if (*((char *)v9 + 55) < 0)
      {
        if (v14 >= 0)
          v16 = v12 + 2;
        else
          v16 = (void *)*((_QWORD *)v12 + 4);
        if (v14 >= 0)
          v17 = *((unsigned __int8 *)v12 + 55);
        else
          v17 = *((_QWORD *)v12 + 5);
        std::string::__assign_no_alias<false>(v13, v16, v17);
      }
      else if ((*((_BYTE *)v12 + 55) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v13, *((void **)v12 + 4), *((_QWORD *)v12 + 5));
      }
      else
      {
        v15 = v12[2];
        *((_QWORD *)v9 + 6) = *((_QWORD *)v12 + 6);
        *(_OWORD *)v13 = v15;
      }
    }
    v18 = v9[20];
    v19 = *((unsigned int *)v12 + 20);
    if ((_DWORD)v18 == -1)
    {
      if ((_DWORD)v19 != -1)
      {
LABEL_29:
        v63 = v9 + 14;
        ((void (*)(_QWORD **))off_1E253D0D8[v19])(&v63);
      }
    }
    else
    {
      if ((_DWORD)v19 != -1)
        goto LABEL_29;
      ((void (*)(_QWORD **, unsigned int *))off_1E253D240[v18])(&v63, v9 + 14);
      v9[20] = -1;
    }
    v20 = v66;
    v21 = *v8;
    v22 = (uint64_t **)(a1 + 8);
    v23 = (uint64_t **)(a1 + 8);
    if (!*v8)
      goto LABEL_53;
    v24 = *((char *)v66 + 55);
    if (v24 >= 0)
      v25 = v66 + 4;
    else
      v25 = (const void *)v66[4];
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)v66 + 55);
    else
      v26 = v66[5];
    do
    {
      while (1)
      {
        v22 = (uint64_t **)v21;
        v29 = v21[4];
        v27 = v21 + 4;
        v28 = (_QWORD *)v29;
        v30 = *((char *)v27 + 23);
        v31 = v30 >= 0 ? v27 : v28;
        v32 = v30 >= 0 ? *((unsigned __int8 *)v27 + 23) : v27[1];
        v33 = v32 >= v26 ? v26 : v32;
        v34 = memcmp(v25, v31, v33);
        if (v34)
          break;
        if (v26 >= v32)
          goto LABEL_51;
LABEL_37:
        v21 = *v22;
        v23 = v22;
        if (!*v22)
          goto LABEL_53;
      }
      if (v34 < 0)
        goto LABEL_37;
LABEL_51:
      v21 = v22[1];
    }
    while (v21);
    v23 = v22 + 1;
LABEL_53:
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v22;
    *v23 = v20;
    v35 = **(_QWORD **)a1;
    if (v35)
    {
      *(_QWORD *)a1 = v35;
      v20 = *v23;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v20);
    ++*(_QWORD *)(a1 + 16);
    v9 = v65;
    v66 = (uint64_t *)v65;
    if (v65)
    {
      v10 = (unsigned int *)*((_QWORD *)v65 + 2);
      if (v10)
      {
        v36 = *(unsigned int **)v10;
        if (*(unsigned int **)v10 == v65)
        {
          *(_QWORD *)v10 = 0;
          while (1)
          {
            v39 = (unsigned int *)*((_QWORD *)v10 + 1);
            if (!v39)
              break;
            do
            {
              v10 = v39;
              v39 = *(unsigned int **)v39;
            }
            while (v39);
          }
        }
        else
        {
          for (*((_QWORD *)v10 + 1) = 0; v36; v36 = (unsigned int *)*((_QWORD *)v10 + 1))
          {
            do
            {
              v10 = v36;
              v36 = *(unsigned int **)v36;
            }
            while (v36);
          }
        }
      }
      v65 = v10;
      v37 = (__int128 *)*((_QWORD *)v12 + 1);
      if (!v37)
      {
        do
        {
LABEL_66:
          v4 = (__int128 *)*((_QWORD *)v12 + 2);
          v38 = *(_QWORD *)v4 == (_QWORD)v12;
          v12 = v4;
        }
        while (!v38);
        goto LABEL_68;
      }
    }
    else
    {
      v10 = 0;
      v37 = (__int128 *)*((_QWORD *)v12 + 1);
      if (!v37)
        goto LABEL_66;
    }
    do
    {
      v4 = v37;
      v37 = *(__int128 **)v37;
    }
    while (v37);
LABEL_68:
    if (!v9)
      break;
    v12 = v4;
  }
  while (v4 != a3);
  v40 = v64;
LABEL_77:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v40, v9);
  if (v10)
  {
    v41 = (unsigned int *)*((_QWORD *)v10 + 2);
    if (v41)
    {
      do
      {
        v10 = v41;
        v41 = (unsigned int *)*((_QWORD *)v41 + 2);
      }
      while (v41);
      v65 = v10;
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v40, v10);
  }
LABEL_82:
  if (v4 == a3)
    return;
  v42 = (char **)(a1 + 8);
  while (2)
  {
    v43 = (char *)operator new(0x58uLL);
    v64 = (uint64_t)v43;
    v65 = (unsigned int *)(a1 + 8);
    LOBYTE(v66) = 0;
    v44 = std::pair<std::string const,AMSCore::Any>::pair[abi:fe180100]((std::string *)(v43 + 32), v4 + 2);
    v45 = *v42;
    v46 = (char **)(a1 + 8);
    v47 = (char **)(a1 + 8);
    if (!*v42)
      goto LABEL_108;
    v48 = v43[55];
    if (v48 >= 0)
      v49 = v44;
    else
      v49 = (std::string *)*((_QWORD *)v43 + 4);
    if (v48 >= 0)
      v50 = v43[55];
    else
      v50 = *((_QWORD *)v43 + 5);
    while (2)
    {
      while (2)
      {
        v46 = (char **)v45;
        v53 = (const void *)*((_QWORD *)v45 + 4);
        v51 = v45 + 32;
        v52 = v53;
        v54 = *((char *)v51 + 23);
        if (v54 >= 0)
          v55 = v51;
        else
          v55 = v52;
        if (v54 >= 0)
          v56 = *((unsigned __int8 *)v51 + 23);
        else
          v56 = v51[1];
        if (v56 >= v50)
          v57 = v50;
        else
          v57 = v56;
        v58 = memcmp(v49, v55, v57);
        if (v58)
        {
          if ((v58 & 0x80000000) == 0)
            break;
          goto LABEL_92;
        }
        if (v50 < v56)
        {
LABEL_92:
          v45 = *v46;
          v47 = v46;
          if (!*v46)
            goto LABEL_108;
          continue;
        }
        break;
      }
      v45 = v46[1];
      if (v45)
        continue;
      break;
    }
    v47 = v46 + 1;
LABEL_108:
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = 0;
    *((_QWORD *)v43 + 2) = v46;
    *v47 = v43;
    v59 = **(_QWORD **)a1;
    if (v59)
    {
      *(_QWORD *)a1 = v59;
      v43 = *v47;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v43);
    ++*(_QWORD *)(a1 + 16);
    v60 = (__int128 *)*((_QWORD *)v4 + 1);
    if (v60)
    {
      do
      {
        v61 = v60;
        v60 = *(__int128 **)v60;
      }
      while (v60);
    }
    else
    {
      do
      {
        v61 = (__int128 *)*((_QWORD *)v4 + 2);
        v38 = *(_QWORD *)v61 == (_QWORD)v4;
        v4 = v61;
      }
      while (!v38);
    }
    v4 = v61;
    if (v61 != a3)
      continue;
    break;
  }
}

void sub_18CBE53DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18CBE53F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(_QWORD **a1, const std::string::value_type **a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  char **result;
  char **v23;
  char *v24;
  std::string *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_42;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    v17 = *((char *)v11 + 55);
    if (v17 >= 0)
      v18 = v11 + 4;
    else
      v18 = (_QWORD *)v11[4];
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v11 + 55);
    else
      v19 = v11[5];
    if (v19 >= v10)
      v20 = v10;
    else
      v20 = v19;
    v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28 = *a3;
        v29 = *((_QWORD *)a3 + 2);
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        *(_QWORD *)a3 = 0;
        v30 = 5;
        result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)&v28);
        if (v30 != -1)
          return (char **)((uint64_t (*)(uint64_t **, __int128 *))off_1E253D240[v30])(&v31, &v28);
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    v6 = v11;
  }
LABEL_42:
  result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, (uint64_t **)&v28, &v31, (const void **)a2);
  if (!*result)
  {
    v23 = result;
    v24 = (char *)operator new(0x58uLL);
    v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v24 + 6) = a2[2];
    }
    *(_OWORD *)(v24 + 56) = *a3;
    *((_QWORD *)v24 + 9) = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    *((_DWORD *)v24 + 20) = 5;
    v26 = v28;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v26;
    *v23 = v24;
    v27 = (_QWORD *)**a1;
    if (v27)
    {
      *a1 = v27;
      v24 = *v23;
    }
    result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18CBE5634(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:fe180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(*(_QWORD *)a1, *(unsigned int **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(*(_QWORD *)a1, (unsigned int *)v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(unsigned int *)(v2 + 80);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_1E253D240[v3])(&v5, v2 + 56);
      *(_DWORD *)(v2 + 80) = -1;
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:fe180100]();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
      std::string::__throw_length_error[abi:fe180100]();
    v10 = v7 - 1;
    v11 = a1;
    if ((v6 & 0x8000000000000000) != 0)
      v11 = *a1;
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      v12 = 2 * v10;
      if (__len > 2 * v10)
        v12 = __len;
      v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v13 = v12 | 7;
      if (v12 >= 0x17)
        v9 = v13 + 1;
      else
        v9 = 23;
    }
    v14 = operator new(v9);
    v8 = v14;
    if (__len)
      memcpy(v14, __src, __len);
    if (v10 != 22)
      operator delete(v11);
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
  }
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E253D240[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  int v4;
  char v5;
  __int128 v6;
  __int128 v7;
  std::string::value_type *v8;
  size_t v9;
  std::string v10;
  char v11;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 24);
  if (v4 != 5)
  {
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
      v4 = *(_DWORD *)(v3 + 24);
      if (v4 == -1)
      {
LABEL_11:
        v7 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
        *(_QWORD *)(v3 + 16) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
        *(_OWORD *)v3 = v7;
        *(_DWORD *)(v3 + 24) = 5;
        return;
      }
    }
    else
    {
      v10 = *(std::string *)a3;
      if (v4 == -1)
        goto LABEL_11;
    }
    ((void (*)(char *, uint64_t))off_1E253D240[v4])(&v11, v3);
    goto LABEL_11;
  }
  if ((__int128 *)a2 != a3)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (*(char *)(a2 + 23) < 0)
    {
      if (v5 >= 0)
        v8 = (std::string::value_type *)a3;
      else
        v8 = *(std::string::value_type **)a3;
      if (v5 >= 0)
        v9 = *((unsigned __int8 *)a3 + 23);
      else
        v9 = *((_QWORD *)a3 + 1);
      std::string::__assign_no_alias<false>((void **)a2, v8, v9);
    }
    else if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)a2, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v6 = *a3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = v6;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  int v4;
  char v5;
  __int128 v6;
  __int128 v7;
  std::string::value_type *v8;
  size_t v9;
  std::string v10;
  char v11;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 24);
  if (v4 != 6)
  {
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
      v4 = *(_DWORD *)(v3 + 24);
      if (v4 == -1)
      {
LABEL_11:
        v7 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
        *(_QWORD *)(v3 + 16) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
        *(_OWORD *)v3 = v7;
        *(_DWORD *)(v3 + 24) = 6;
        return;
      }
    }
    else
    {
      v10 = *(std::string *)a3;
      if (v4 == -1)
        goto LABEL_11;
    }
    ((void (*)(char *, uint64_t))off_1E253D240[v4])(&v11, v3);
    goto LABEL_11;
  }
  if ((__int128 *)a2 != a3)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (*(char *)(a2 + 23) < 0)
    {
      if (v5 >= 0)
        v8 = (std::string::value_type *)a3;
      else
        v8 = *(std::string::value_type **)a3;
      if (v5 >= 0)
        v9 = *((unsigned __int8 *)a3 + 23);
      else
        v9 = *((_QWORD *)a3 + 1);
      std::string::__assign_no_alias<false>((void **)a2, v8, v9);
    }
    else if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)a2, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v6 = *a3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = v6;
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 7;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 24);
  if (v4 == 8)
  {
    if (a2 != a3)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>(a2, *(__int128 **)a3, (__int128 *)(a3 + 8));
    return;
  }
  v14 = 0;
  v15 = 0;
  v13 = &v14;
  v5 = (__int128 *)(a3 + 8);
  v6 = *(__int128 **)a3;
  if (*(_QWORD *)a3 == a3 + 8)
  {
    if (v4 == -1)
      goto LABEL_16;
  }
  else
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(&v13, &v14, (const void **)v6 + 4, v6 + 2);
      v7 = (__int128 *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(__int128 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (__int128 *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != v5);
    v4 = *(_DWORD *)(v3 + 24);
    if (v4 == -1)
      goto LABEL_16;
  }
  ((void (*)(char *, uint64_t))off_1E253D240[v4])(&v16, v3);
LABEL_16:
  *(_QWORD *)v3 = v13;
  v10 = v14;
  *(_QWORD *)(v3 + 8) = v14;
  v11 = v3 + 8;
  *(_DWORD *)(v3 + 24) = -1;
  v12 = v15;
  *(_QWORD *)(v3 + 16) = v15;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
    v10 = 0;
  }
  else
  {
    *(_QWORD *)v3 = v11;
  }
  *(_DWORD *)(v3 + 24) = 8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, (unsigned int *)v10);
}

void sub_18CBE5F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;

  v3 = *a1;
  if (*(_DWORD *)(*a1 + 24) == 9)
  {
    if (a2 != a3)
      std::vector<AMSCore::Any>::__assign_with_size[abi:fe180100]<AMSCore::Any*,AMSCore::Any*>(a2, *a3, a3[1], (a3[1] - *a3) >> 5);
  }
  else
  {
    std::vector<AMSCore::Any>::vector(&v6, a3);
    v5 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))off_1E253D240[v5])(&v8, v3);
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
    *(_DWORD *)(v3 + 24) = 9;
  }
  return result;
}

uint64_t *std::vector<AMSCore::Any>::__assign_with_size[abi:fe180100]<AMSCore::Any*,AMSCore::Any*>(uint64_t *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2;
  v7 = (uint64_t)result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = *result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v10)
    {
      v11 = result[1];
      v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          v13 = v11 - 32;
          v14 = *(unsigned int *)(v11 - 8);
          if ((_DWORD)v14 != -1)
            ((void (*)(uint64_t *, uint64_t))off_1E253D240[v14])(&v30, v11 - 32);
          *(_DWORD *)(v11 - 8) = -1;
          v11 -= 32;
        }
        while (v13 != v10);
        v12 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (__sz >> 59)
      goto LABEL_45;
    v23 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v23 = __sz;
    v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v25 = 0x7FFFFFFFFFFFFFFLL;
    if (!v24)
      v25 = v23;
    if (v25 >> 59)
LABEL_45:
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v26 = 32 * v25;
    v27 = (char *)operator new(32 * v25);
    *(_QWORD *)v7 = v27;
    *(_QWORD *)(v7 + 8) = v27;
    *(_QWORD *)(v7 + 16) = &v27[v26];
    result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:fe180100]<std::allocator<AMSCore::Any>,AMSCore::Any*,AMSCore::Any*,AMSCore::Any*>(v9, v6, a3, (uint64_t)v27);
    goto LABEL_36;
  }
  v15 = result[1];
  v16 = (v15 - v10) >> 5;
  if (v16 >= __sz)
  {
    if (a2 == a3)
    {
LABEL_38:
      if (v15 != v10)
      {
        do
        {
          v28 = v15 - 32;
          v29 = *(unsigned int *)(v15 - 8);
          if ((_DWORD)v29 != -1)
            result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_1E253D240[v29])(&v30, v15 - 32);
          *(_DWORD *)(v15 - 8) = -1;
          v15 -= 32;
        }
        while (v28 != v10);
      }
      *(_QWORD *)(v7 + 8) = v10;
      return result;
    }
    while (1)
    {
      v21 = *(unsigned int *)(v10 + 24);
      v22 = *(unsigned int *)(v6 + 24);
      if ((_DWORD)v21 != -1)
        break;
      if ((_DWORD)v22 != -1)
        goto LABEL_20;
LABEL_21:
      v6 += 32;
      v10 += 32;
      if (v6 == a3)
      {
        v15 = *(_QWORD *)(v7 + 8);
        goto LABEL_38;
      }
    }
    if ((_DWORD)v22 == -1)
    {
      result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_1E253D240[v21])(&v30, v10);
      *(_DWORD *)(v10 + 24) = -1;
      goto LABEL_21;
    }
LABEL_20:
    v30 = v10;
    result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E253D0D8[v22])(&v30, v10, v6);
    goto LABEL_21;
  }
  if (v15 == v10)
    goto LABEL_35;
  v17 = 32 * v16;
  v18 = a2;
  do
  {
    v19 = *(unsigned int *)(v10 + 24);
    v20 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v19 == -1)
    {
      if ((_DWORD)v20 == -1)
        goto LABEL_13;
LABEL_12:
      v30 = v10;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E253D0D8[v20])(&v30, v10, v18);
      goto LABEL_13;
    }
    if ((_DWORD)v20 != -1)
      goto LABEL_12;
    ((void (*)(uint64_t *, uint64_t))off_1E253D240[v19])(&v30, v10);
    *(_DWORD *)(v10 + 24) = -1;
LABEL_13:
    v18 += 32;
    v10 += 32;
    v17 -= 32;
  }
  while (v17);
  v10 = *(_QWORD *)(v7 + 8);
LABEL_35:
  result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:fe180100]<std::allocator<AMSCore::Any>,AMSCore::Any*,AMSCore::Any*,AMSCore::Any*>(v9, v6 + 32 * v16, a3, v10);
LABEL_36:
  *(_QWORD *)(v7 + 8) = result;
  return result;
}

void sub_18CBE62A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18CBE62B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<AMSCore::Any>::__emplace_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  v8 = a1[2] - v3;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = (std::string *)&v10[32 * v5];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v12 = &v10[32 * v9];
  LODWORD(v11[1].__r_.__value_.__l.__data_) = 5;
  v13 = &v11[1].__r_.__value_.__s.__data_[8];
  if (v4 == v3)
  {
    *a1 = (char *)v11;
    a1[1] = v13;
    a1[2] = v12;
    goto LABEL_28;
  }
  v22 = v12;
  v14 = 0;
  do
  {
    *((_BYTE *)&v11[-1] + v14 - 8) = 0;
    v15 = &v4[v14];
    *(_DWORD *)((char *)&v11->__r_.__value_.__l + v14 - 8) = -1;
    v16 = *(unsigned int *)&v4[v14 - 8];
    if ((_DWORD)v16 == -1)
      goto LABEL_16;
    ((void (*)(char *, char *, char *))off_1E253CAE8[v16])(&v24, (char *)&v11[-1] + v14 - 8, v15 - 32);
    *(_DWORD *)((char *)&v11->__r_.__value_.__l + v14 - 8) = v16;
    v17 = *((unsigned int *)v15 - 2);
    if ((_DWORD)v17 == -1)
      goto LABEL_16;
    if ((_DWORD)v17)
    {
      ((void (*)(char *, char *))off_1E253D240[v17])(&v25, v15 - 32);
LABEL_16:
      *((_DWORD *)v15 - 2) = 0;
    }
    v14 -= 32;
  }
  while (&v4[v14] != v3);
  v13 = &v11[1].__r_.__value_.__s.__data_[8];
  v3 = *a1;
  v18 = a1[1];
  *a1 = (char *)v11 + v14;
  a1[1] = &v11[1].__r_.__value_.__s.__data_[8];
  a1[2] = v22;
  if (v18 != v3)
  {
    do
    {
      v19 = v18 - 32;
      v20 = *((unsigned int *)v18 - 2);
      if ((_DWORD)v20 != -1)
        ((void (*)(char *, char *))off_1E253D240[v20])(&v23, v18 - 32);
      *((_DWORD *)v18 - 2) = -1;
      v18 -= 32;
    }
    while (v19 != v3);
  }
LABEL_28:
  if (v3)
    operator delete(v3);
  return v13;
}

uint64_t *std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>(_QWORD **a1, const void **a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t *result;
  uint64_t *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  char v31;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_39;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 >= v10)
        goto LABEL_23;
LABEL_9:
      v7 = (uint64_t *)v7[1];
      if (!v7)
        goto LABEL_24;
    }
    if (v16 < 0)
      goto LABEL_9;
LABEL_23:
    v11 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_24:
  if (v11 == v6)
    goto LABEL_39;
  v17 = *((char *)v11 + 55);
  if (v17 >= 0)
    v18 = v11 + 4;
  else
    v18 = (_QWORD *)v11[4];
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v11 + 55);
  else
    v19 = v11[5];
  if (v19 >= v10)
    v20 = v10;
  else
    v20 = v19;
  v21 = memcmp(v9, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0)
      return (uint64_t *)AMSCore::Any::operator=((uint64_t)(v11 + 7), a3);
LABEL_38:
    v6 = v11;
LABEL_39:
    result = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, &v30, &v29, a2);
    if (!*result)
    {
      v23 = result;
      v24 = operator new(0x58uLL);
      v24[2] = *(_OWORD *)a2;
      *((_QWORD *)v24 + 6) = a2[2];
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *((_BYTE *)v24 + 56) = 0;
      *((_DWORD *)v24 + 20) = -1;
      v25 = *(unsigned int *)(a3 + 24);
      if ((_DWORD)v25 == -1
        || (((void (*)(char *, char *, uint64_t))off_1E253CAE8[v25])(&v31, (char *)v24 + 56, a3),
            *((_DWORD *)v24 + 20) = v25,
            v26 = *(unsigned int *)(a3 + 24),
            (_DWORD)v26 == -1))
      {
LABEL_44:
        *(_DWORD *)(a3 + 24) = 0;
      }
      else if ((_DWORD)v26)
      {
        ((void (*)(char *, uint64_t))off_1E253D240[v26])(&v31, a3);
        goto LABEL_44;
      }
      v27 = v30;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v27;
      *v23 = (uint64_t)v24;
      v28 = (_QWORD *)**a1;
      if (v28)
      {
        *a1 = v28;
        v24 = (_OWORD *)*v23;
      }
      result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
      a1[2] = (_QWORD *)((char *)a1[2] + 1);
    }
  }
  else
  {
    if (v10 < v19)
      goto LABEL_38;
    return (uint64_t *)AMSCore::Any::operator=((uint64_t)(v11 + 7), a3);
  }
  return result;
}

void std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(uint64_t a1)
{
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 224, *(unsigned int **)(a1 + 232));
  if (*(char *)(a1 + 223) < 0)
  {
    operator delete(*(void **)(a1 + 200));
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    {
LABEL_5:
      if (!*(_BYTE *)(a1 + 160))
        return;
      goto LABEL_6;
    }
  }
  else if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 168));
  if (*(_BYTE *)(a1 + 160))
LABEL_6:
    AMSCore::URL::~URL((AMSCore::URL *)a1);
}

void AMSCore::UnavailableCancellationContextProvider::~UnavailableCancellationContextProvider(AMSCore::UnavailableCancellationContextProvider *this)
{
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::UnavailableCancellationContextProvider::getStopToken(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void std::__shared_ptr_emplace<AMSCore::UnavailableCancellationContextProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::UnavailableCancellationContextProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::LocalNotificationCenter::~LocalNotificationCenter(AMSCore::LocalNotificationCenter *this)
{
  *(_QWORD *)this = &off_1E2521008;
  std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(*((char **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_1E2521008;
  std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(*((char **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::LocalNotificationCenter::observe(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  std::mutex *v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  size_t v20;
  size_t v21;
  int v22;
  std::string::size_type v23;
  std::string *v24;
  BOOL v25;
  char *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const void *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  int v38;
  int v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  int v45;
  const void *v46;
  size_t v47;
  int v48;
  const void *v49;
  size_t v50;
  size_t v51;
  int v52;
  uint64_t *v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;
  BOOL v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  const void *v69;
  const void *v70;
  int v71;
  const void *v72;
  size_t v73;
  size_t v74;
  int v75;
  uint64_t *v76;
  _QWORD *v77;
  const void *v78;
  const void *v79;
  int v80;
  const void *v81;
  size_t v82;
  size_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  _QWORD *v89;
  std::string::size_type v90;
  std::string::size_type v91;
  unint64_t v92;
  char *v93;
  __int128 v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  __int128 v105;
  unint64_t *v106;
  unint64_t v107;
  char *v108;
  __int128 v109;
  char *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  std::mutex *v118;
  _QWORD *v119;
  __int128 v120;
  std::string v121;
  int v122;
  char v123;
  _QWORD v124[3];
  _QWORD *v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v10 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(_BYTE *)(a1 + 96))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v121);
    AMSCore::Logger::log<char [69]>((uint64_t)v121.__r_.__value_.__l.__data_, 4, (uint64_t)"default", 7, "Ignoring attempt to register an observer after shutdown has started.");
    size = (std::__shared_weak_count *)v121.__r_.__value_.__l.__size_;
    if (v121.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v121.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    *a5 = 0;
    a5[1] = 0;
    goto LABEL_213;
  }
  v119 = a4;
  v14 = (char *)(a1 + 80);
  v15 = *(char **)(a1 + 80);
  v16 = (char *)(a1 + 80);
  if (!v15)
    goto LABEL_38;
  v17 = (char *)(a1 + 80);
  do
  {
    while (1)
    {
      v18 = v15[55];
      v19 = v18 >= 0 ? v15 + 32 : (char *)*((_QWORD *)v15 + 4);
      v20 = v18 >= 0 ? v15[55] : *((_QWORD *)v15 + 5);
      v21 = v20 >= a3 ? a3 : v20;
      v22 = memcmp(a2, v19, v21);
      if (v22)
        break;
      if (a3 <= v20)
        goto LABEL_24;
LABEL_10:
      v15 = (char *)*((_QWORD *)v15 + 1);
      if (!v15)
        goto LABEL_25;
    }
    if ((v22 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_24:
    v17 = v15;
    v15 = *(char **)v15;
  }
  while (v15);
LABEL_25:
  v16 = (char *)(a1 + 80);
  if (v17 != v14)
  {
    if (v17[55] < 0)
      std::string::__init_copy_ctor_external(&v121, *((const std::string::value_type **)v17 + 4), *((_QWORD *)v17 + 5));
    else
      v121 = *(std::string *)(v17 + 32);
    v122 = 5;
    v23 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = v121.__r_.__value_.__l.__size_;
    if (v23 == a3)
    {
      v24 = (v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v121
          : (std::string *)v121.__r_.__value_.__r.__words[0];
      v25 = memcmp(v24, a2, a3) != 0;
    }
    else
    {
      v25 = 1;
    }
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v123, (uint64_t)&v121);
    v16 = v17;
    if (!v25)
      goto LABEL_167;
  }
LABEL_38:
  v118 = v10;
  v26 = (char *)operator new(0x90uLL);
  v17 = v26;
  v27 = v26 + 32;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  v117 = a5;
  if (a3 >= 0x17)
  {
    v29 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v29 = a3 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    *((_QWORD *)v17 + 5) = a3;
    *((_QWORD *)v17 + 6) = v30 | 0x8000000000000000;
    *((_QWORD *)v17 + 4) = v28;
    goto LABEL_45;
  }
  v26[55] = a3;
  v28 = v26 + 32;
  if (a3)
LABEL_45:
    memmove(v28, a2, a3);
  *((_BYTE *)v28 + a3) = 0;
  *((_QWORD *)v17 + 7) = 850045863;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  if (v14 == v16)
    goto LABEL_68;
  v31 = v17[55];
  if (v31 >= 0)
    v32 = v27;
  else
    v32 = (const void *)*((_QWORD *)v17 + 4);
  if (v31 >= 0)
    v33 = v17[55];
  else
    v33 = *((_QWORD *)v17 + 5);
  v34 = v16[55];
  if (v34 >= 0)
    v35 = v16 + 32;
  else
    v35 = (const void *)*((_QWORD *)v16 + 4);
  if (v34 >= 0)
    v36 = v16[55];
  else
    v36 = *((_QWORD *)v16 + 5);
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  v38 = memcmp(v32, v35, v37);
  if (!v38)
  {
    if (v33 < v36)
      goto LABEL_68;
LABEL_64:
    v39 = memcmp(v35, v32, v37);
    if (v39)
    {
      if ((v39 & 0x80000000) == 0)
      {
LABEL_66:
        v40 = v16;
        goto LABEL_121;
      }
    }
    else if (v36 >= v33)
    {
      goto LABEL_66;
    }
    v64 = v16 + 8;
    v65 = (char *)*((_QWORD *)v16 + 1);
    if (v65)
    {
      do
      {
        v64 = v65;
        v65 = *(char **)v65;
        v16 = v64;
        v66 = v64;
      }
      while (v65);
    }
    else
    {
      v66 = v16;
      do
      {
        v67 = v66;
        v66 = (char *)*((_QWORD *)v66 + 2);
      }
      while (*(char **)v66 != v67);
    }
    if (v66 == v14)
      goto LABEL_120;
    v70 = (const void *)*((_QWORD *)v66 + 4);
    v68 = v66 + 32;
    v69 = v70;
    v71 = *((char *)v68 + 23);
    if (v71 >= 0)
      v72 = v68;
    else
      v72 = v69;
    if (v71 >= 0)
      v73 = *((unsigned __int8 *)v68 + 23);
    else
      v73 = v68[1];
    if (v73 >= v33)
      v74 = v33;
    else
      v74 = v73;
    v75 = memcmp(v32, v72, v74);
    if (v75)
    {
      if (v75 < 0)
        goto LABEL_120;
    }
    else if (v33 < v73)
    {
      goto LABEL_120;
    }
    v76 = *(uint64_t **)v14;
    if (!*(_QWORD *)v14)
      goto LABEL_93;
    while (1)
    {
      v16 = (char *)v76;
      v79 = (const void *)v76[4];
      v77 = v76 + 4;
      v78 = v79;
      v80 = *((char *)v77 + 23);
      if (v80 >= 0)
        v81 = v77;
      else
        v81 = v78;
      if (v80 >= 0)
        v82 = *((unsigned __int8 *)v77 + 23);
      else
        v82 = v77[1];
      if (v82 >= v33)
        v83 = v33;
      else
        v83 = v82;
      v84 = memcmp(v32, v81, v83);
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_144;
LABEL_158:
        v85 = memcmp(v81, v32, v83);
        if (v85)
        {
          if ((v85 & 0x80000000) == 0)
            goto LABEL_214;
        }
        else if (v82 >= v33)
        {
          goto LABEL_214;
        }
        v14 = v16 + 8;
        v76 = (uint64_t *)*((_QWORD *)v16 + 1);
        if (!v76)
          goto LABEL_163;
      }
      else
      {
        if (v33 >= v82)
          goto LABEL_158;
LABEL_144:
        v76 = *(uint64_t **)v16;
        v14 = v16;
        if (!*(_QWORD *)v16)
          goto LABEL_163;
      }
    }
  }
  if ((v38 & 0x80000000) == 0)
    goto LABEL_64;
LABEL_68:
  v41 = *(uint64_t **)v16;
  v42 = v16;
  if (*(char **)(a1 + 72) == v16)
    goto LABEL_115;
  if (v41)
  {
    v43 = *(uint64_t **)v16;
    do
    {
      v42 = (char *)v43;
      v43 = (uint64_t *)v43[1];
    }
    while (v43);
  }
  else
  {
    v44 = v16;
    do
    {
      v42 = (char *)*((_QWORD *)v44 + 2);
      v63 = *(_QWORD *)v42 == (_QWORD)v44;
      v44 = v42;
    }
    while (v63);
  }
  v45 = v42[55];
  if (v45 >= 0)
    v46 = v42 + 32;
  else
    v46 = (const void *)*((_QWORD *)v42 + 4);
  if (v45 >= 0)
    v47 = v42[55];
  else
    v47 = *((_QWORD *)v42 + 5);
  v48 = v17[55];
  if (v48 >= 0)
    v49 = v27;
  else
    v49 = (const void *)*((_QWORD *)v17 + 4);
  if (v48 >= 0)
    v50 = v17[55];
  else
    v50 = *((_QWORD *)v17 + 5);
  if (v50 >= v47)
    v51 = v47;
  else
    v51 = v50;
  v52 = memcmp(v46, v49, v51);
  if (!v52)
  {
    if (v47 < v50)
      goto LABEL_115;
LABEL_92:
    v53 = *(uint64_t **)v14;
    if (!*(_QWORD *)v14)
    {
LABEL_93:
      v16 = (char *)(a1 + 80);
      goto LABEL_163;
    }
    while (1)
    {
      v16 = (char *)v53;
      v56 = (const void *)v53[4];
      v54 = v53 + 4;
      v55 = v56;
      v57 = *((char *)v54 + 23);
      if (v57 >= 0)
        v58 = v54;
      else
        v58 = v55;
      if (v57 >= 0)
        v59 = *((unsigned __int8 *)v54 + 23);
      else
        v59 = v54[1];
      if (v59 >= v50)
        v60 = v50;
      else
        v60 = v59;
      v61 = memcmp(v49, v58, v60);
      if (v61)
      {
        if (v61 < 0)
          goto LABEL_94;
LABEL_108:
        v62 = memcmp(v58, v49, v60);
        if (v62)
        {
          if ((v62 & 0x80000000) == 0)
            goto LABEL_214;
        }
        else if (v59 >= v50)
        {
LABEL_214:
          v64 = v14;
          goto LABEL_120;
        }
        v14 = v16 + 8;
        v53 = (uint64_t *)*((_QWORD *)v16 + 1);
        if (!v53)
          goto LABEL_163;
      }
      else
      {
        if (v50 >= v59)
          goto LABEL_108;
LABEL_94:
        v53 = *(uint64_t **)v16;
        v14 = v16;
        if (!*(_QWORD *)v16)
          goto LABEL_163;
      }
    }
  }
  if ((v52 & 0x80000000) == 0)
    goto LABEL_92;
LABEL_115:
  v63 = v41 == 0;
  if (v41)
    v64 = v42 + 8;
  else
    v64 = v16;
  if (!v63)
    v16 = v42;
LABEL_120:
  v40 = *(char **)v64;
  v14 = v64;
  if (*(_QWORD *)v64)
  {
LABEL_121:
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::Subject<>>,void *>>>::operator()[abi:fe180100](1, v17);
    v17 = v40;
    goto LABEL_166;
  }
LABEL_163:
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = v16;
  *(_QWORD *)v14 = v17;
  v86 = **(_QWORD **)(a1 + 72);
  v87 = (uint64_t *)v17;
  if (v86)
  {
    *(_QWORD *)(a1 + 72) = v86;
    v87 = *(uint64_t **)v14;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v87);
  ++*(_QWORD *)(a1 + 88);
LABEL_166:
  a5 = v117;
  v10 = v118;
LABEL_167:
  v88 = (_QWORD *)v119[3];
  if (v88)
  {
    if (v88 == v119)
    {
      v125 = v124;
      (*(void (**)(void))(*v119 + 24))();
    }
    else
    {
      v125 = (_QWORD *)v119[3];
      v119[3] = 0;
    }
  }
  else
  {
    v125 = 0;
  }
  v89 = operator new(0x38uLL);
  v90 = (std::string::size_type)v89;
  v89[1] = 0;
  v89[2] = 0;
  *v89 = &off_1E2523110;
  v91 = (std::string::size_type)(v89 + 3);
  if (v125)
  {
    if (v125 == v124)
    {
      v89[6] = v91;
      (*(void (**)(_QWORD *, std::string::size_type))(v124[0] + 24))(v124, v91);
    }
    else
    {
      v89[6] = v125;
      v125 = 0;
    }
  }
  else
  {
    v89[6] = 0;
  }
  v121.__r_.__value_.__r.__words[0] = v91;
  v121.__r_.__value_.__l.__size_ = v90;
  std::mutex::lock((std::mutex *)(v17 + 56));
  v93 = (char *)*((_QWORD *)v17 + 16);
  v92 = *((_QWORD *)v17 + 17);
  if ((unint64_t)v93 >= v92)
  {
    v98 = (char *)*((_QWORD *)v17 + 15);
    v99 = (v93 - v98) >> 4;
    v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v101 = v92 - (_QWORD)v98;
    if (v101 >> 3 > v100)
      v100 = v101 >> 3;
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF0)
      v102 = 0xFFFFFFFFFFFFFFFLL;
    else
      v102 = v100;
    if (v102 >> 60)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v103 = (char *)operator new(16 * v102);
    v104 = &v103[16 * v99];
    v105 = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
    *(_OWORD *)v104 = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
    v120 = v105;
    if (*((_QWORD *)&v105 + 1))
    {
      v106 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 16);
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      v98 = (char *)*((_QWORD *)v17 + 15);
      v93 = (char *)*((_QWORD *)v17 + 16);
    }
    v108 = &v103[16 * v102];
    v97 = v104 + 16;
    if (v93 == v98)
    {
      *((_QWORD *)v17 + 15) = v104;
      *((_QWORD *)v17 + 16) = v97;
      *((_QWORD *)v17 + 17) = v108;
    }
    else
    {
      do
      {
        v109 = *((_OWORD *)v93 - 1);
        v93 -= 16;
        *((_OWORD *)v104 - 1) = v109;
        v104 -= 16;
        *(_QWORD *)v93 = 0;
        *((_QWORD *)v93 + 1) = 0;
      }
      while (v93 != v98);
      v98 = (char *)*((_QWORD *)v17 + 15);
      v110 = (char *)*((_QWORD *)v17 + 16);
      *((_QWORD *)v17 + 15) = v104;
      *((_QWORD *)v17 + 16) = v97;
      *((_QWORD *)v17 + 17) = v108;
      while (v110 != v98)
      {
        v111 = (std::__shared_weak_count *)*((_QWORD *)v110 - 1);
        if (v111)
          std::__shared_weak_count::__release_weak(v111);
        v110 -= 16;
      }
    }
    if (v98)
    {
      operator delete(v98);
      v120 = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
    }
  }
  else
  {
    v94 = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
    *(_OWORD *)v93 = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
    v120 = v94;
    if (*((_QWORD *)&v94 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 16);
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    v97 = v93 + 16;
  }
  *((_QWORD *)v17 + 16) = v97;
  *(_OWORD *)&v121.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)a5 = v120;
  std::mutex::unlock((std::mutex *)(v17 + 56));
  v112 = (std::__shared_weak_count *)v121.__r_.__value_.__l.__size_;
  if (v121.__r_.__value_.__l.__size_)
  {
    v113 = (unint64_t *)(v121.__r_.__value_.__l.__size_ + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v125;
  if (v125 == v124)
  {
    v116 = 4;
    v115 = v124;
LABEL_212:
    (*(void (**)(void))(*v115 + 8 * v116))();
  }
  else if (v125)
  {
    v116 = 5;
    goto LABEL_212;
  }
LABEL_213:
  std::mutex::unlock(v10);
}

void sub_18CBE7384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::LocalNotificationCenter::postNotification(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  size_t v18;
  size_t v19;
  int v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  std::runtime_error v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(_BYTE *)(a1 + 96))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[48]>((uint64_t)&v26, 2u, "Notification posted after shutdown has started.");
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v26);
    *(_OWORD *)(a4 + 16) = v27;
    *(_QWORD *)a4 = off_1E2521330;
    v9 = v29;
    *(_QWORD *)(a4 + 32) = v28;
    *(_QWORD *)(a4 + 40) = v9;
    v10 = a4 + 40;
    v11 = v30;
    *(_QWORD *)(a4 + 48) = v30;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      v28 = &v29;
      v29 = 0;
      v30 = 0;
      v9 = 0;
    }
    else
    {
      *(_QWORD *)(a4 + 32) = v10;
    }
    *(_OWORD *)(a4 + 56) = v31;
    v31 = 0uLL;
    *(_BYTE *)(a4 + 72) = 0;
    v26.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v9);
    MEMORY[0x18D7898AC](&v26);
    goto LABEL_38;
  }
  v14 = *(uint64_t **)(a1 + 80);
  v12 = (uint64_t *)(a1 + 80);
  v13 = v14;
  if (!v14)
    goto LABEL_37;
  v15 = v12;
  do
  {
    while (1)
    {
      v16 = *((char *)v13 + 55);
      v17 = v16 >= 0 ? v13 + 4 : (uint64_t *)v13[4];
      v18 = v16 >= 0 ? *((unsigned __int8 *)v13 + 55) : v13[5];
      v19 = v18 >= a3 ? a3 : v18;
      v20 = memcmp(a2, v17, v19);
      if (v20)
        break;
      if (a3 <= v18)
        goto LABEL_20;
LABEL_6:
      v13 = (uint64_t *)v13[1];
      if (!v13)
        goto LABEL_21;
    }
    if ((v20 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_20:
    v15 = v13;
    v13 = (uint64_t *)*v13;
  }
  while (v13);
LABEL_21:
  if (v15 == v12)
    goto LABEL_37;
  v21 = *((char *)v15 + 55);
  if (v21 >= 0)
    v22 = v15 + 4;
  else
    v22 = (const void *)v15[4];
  if (v21 >= 0)
    v23 = *((unsigned __int8 *)v15 + 55);
  else
    v23 = v15[5];
  if (v23 >= a3)
    v24 = a3;
  else
    v24 = v23;
  v25 = memcmp(a2, v22, v24);
  if (v25)
  {
    if ((v25 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_37:
    *(_BYTE *)(a4 + 72) = 1;
LABEL_38:
    std::mutex::unlock(v8);
  }
  else
  {
    if (a3 < v23)
      goto LABEL_37;
LABEL_33:
    std::mutex::unlock(v8);
    AMSCore::Subject<>::notify((uint64_t)(v15 + 7));
    *(_BYTE *)(a4 + 72) = 1;
  }
}

void sub_18CBE7614(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::LocalNotificationCenter::shutdown(AMSCore::LocalNotificationCenter *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 96) = 1;
  std::mutex::unlock(v2);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[48]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [48]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CBE7764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMSCore::Subject<>::notify(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  char *v30;
  std::__shared_weak_count *v31;

  std::mutex::lock((std::mutex *)a1);
  v3 = *(char **)(a1 + 64);
  v2 = *(char **)(a1 + 72);
  if (v3 != v2)
  {
    v4 = *(char **)(a1 + 64);
    while (1)
    {
      v5 = *((_QWORD *)v4 + 1);
      if (!v5 || *(_QWORD *)(v5 + 8) == -1)
        break;
      v4 += 16;
      if (v4 == v2)
      {
        v6 = v2 - v3;
        if (v2 == v3)
          goto LABEL_51;
LABEL_7:
        if ((v6 & 0x8000000000000000) != 0)
          std::vector<std::string>::__throw_length_error[abi:fe180100]();
        v7 = operator new(v6);
        v8 = v7;
        v9 = (char *)v7;
        do
        {
          v10 = *((_QWORD *)v3 + 1);
          *(_QWORD *)v9 = *(_QWORD *)v3;
          *((_QWORD *)v9 + 1) = v10;
          if (v10)
          {
            v11 = (unint64_t *)(v10 + 16);
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
          }
          v3 += 16;
          v9 += 16;
        }
        while (v3 != v2);
        v17 = v9 - (char *)v7;
        v18 = (v9 - (char *)v7) & 0xFFFFFFFFFFFFFFF0;
        std::mutex::unlock((std::mutex *)a1);
        if (v18)
        {
          v19 = v17 >> 4;
          v20 = (_QWORD *)((char *)v8 + v18);
          v21 = v8;
          do
          {
            v22 = (std::__shared_weak_count *)v21[1];
            if (v22)
            {
              v23 = std::__shared_weak_count::lock(v22);
              if (v23)
              {
                v24 = v23;
                if (*v21)
                {
                  v25 = *(_QWORD *)(*v21 + 24);
                  if (!v25)
                    std::__throw_bad_function_call[abi:fe180100]();
                  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
                }
                p_shared_owners = (unint64_t *)&v24->__shared_owners_;
                do
                  v27 = __ldaxr(p_shared_owners);
                while (__stlxr(v27 - 1, p_shared_owners));
                if (!v27)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
            }
            v21 += 2;
          }
          while (v21 != v20);
          if (v8 != v20)
          {
            v28 = 2 * v19;
            do
            {
              v29 = (std::__shared_weak_count *)v8[v28 - 1];
              if (v29)
                std::__shared_weak_count::__release_weak(v29);
              v28 -= 2;
            }
            while (v28 * 8);
          }
        }
        operator delete(v8);
        return;
      }
    }
    if (v4 != v2)
    {
      v13 = v4 + 16;
      if (v4 + 16 != v2)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 && *(_QWORD *)(v14 + 8) != -1)
          {
            v15 = *(_QWORD *)v13;
            *(_QWORD *)v13 = 0;
            *((_QWORD *)v13 + 1) = 0;
            v16 = (std::__shared_weak_count *)*((_QWORD *)v4 + 1);
            *(_QWORD *)v4 = v15;
            *((_QWORD *)v4 + 1) = v14;
            if (v16)
              std::__shared_weak_count::__release_weak(v16);
            v4 += 16;
          }
          v13 += 16;
        }
        while (v13 != v2);
        v2 = *(char **)(a1 + 72);
      }
    }
    if (v2 < v4)
    {
      __break(1u);
      return;
    }
    if (v4 != v2)
    {
      v30 = v2;
      v2 = v4;
      while (v30 != v4)
      {
        v31 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
        if (v31)
          std::__shared_weak_count::__release_weak(v31);
        v30 -= 16;
      }
      *(_QWORD *)(a1 + 72) = v4;
    }
    v3 = *(char **)(a1 + 64);
    v6 = v2 - v3;
    if (v2 != v3)
      goto LABEL_7;
  }
LABEL_51:
  std::mutex::unlock((std::mutex *)a1);
}

uint64_t AMSCore::StringUtils::join<char [48]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CBE7B60(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Logger::log<char [69]>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v9 = result;
    v10 = MEMORY[0x1E0DE4FE0];
    v11 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v28[0] = MEMORY[0x1E0DE4FE0] + 64;
    v23 = v13;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v13 - 24)) = v14;
    v15 = (std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24));
    std::ios_base::init(v15, v24);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v23 = v10 + 24;
    v28[0] = v11;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8];
    v24[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v27 = 16;
    v17 = *(_QWORD *)(v23 - 24);
    if ((v18 & 1) == 0
    {
    }
    v19 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v23, (uint64_t)a5, v19);
    v20 = v24[5];
    v21 = (char *)&v24[-1] + *(_QWORD *)(v23 - 24);
    if ((v21[32] & 5) != 0)
    {
      v22 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5) + 32))(&rep, *((_QWORD *)v21 + 5), 0, 1, 16);
      v22 = v33;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v30 = a2;
    v31 = v20;
    v32 = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v9 + 16) + 16))(*(_QWORD *)(v9 + 16), a3, a4, &rep);
    v23 = *v12;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = v12[3];
    v24[0] = v16 + 16;
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v28);
  }
  return result;
}

void sub_18CBE7DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::function<void ()(void)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2523110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<void ()(void)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2523110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__shared_ptr_emplace<std::function<void ()(void)>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::Subject<>>,void *>>>::operator()[abi:fe180100](char a1, char *__p)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  if (a1)
  {
    v3 = *((_QWORD *)__p + 15);
    if (v3)
    {
      v4 = *((_QWORD *)__p + 16);
      v5 = (void *)*((_QWORD *)__p + 15);
      if (v4 != v3)
      {
        do
        {
          v6 = *(std::__shared_weak_count **)(v4 - 8);
          if (v6)
            std::__shared_weak_count::__release_weak(v6);
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = (void *)*((_QWORD *)__p + 15);
      }
      *((_QWORD *)__p + 16) = v3;
      operator delete(v5);
    }
    std::mutex::~mutex((std::mutex *)(__p + 56));
    if (__p[55] < 0)
      operator delete(*((void **)__p + 4));
    goto LABEL_14;
  }
  if (__p)
LABEL_14:
    operator delete(__p);
}

void std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 15);
    if (v2)
    {
      v3 = *((_QWORD *)a1 + 16);
      v4 = (void *)*((_QWORD *)a1 + 15);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
            std::__shared_weak_count::__release_weak(v5);
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = (void *)*((_QWORD *)a1 + 15);
      }
      *((_QWORD *)a1 + 16) = v2;
      operator delete(v4);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 56));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<AMSCore::LocalNotificationCenter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::LocalNotificationCenter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::LocalNotificationCenter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMSCore::TaskCounter::TaskCounter(AMSCore::TaskCounter *this)
{
  unsigned int v1;

  do
    v1 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v1 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
}

void AMSCore::TaskCounter::~TaskCounter(AMSCore::TaskCounter *this)
{
  unsigned int v1;
  unsigned int v2;

  do
  {
    v1 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v2)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
}

void std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::less<std::tuple<std::string,std::string,std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::less<std::tuple<std::string,std::string,std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::less<std::tuple<std::string,std::string,std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 160);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 151) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*(char *)(a1 + 127) & 0x80000000) == 0)
          goto LABEL_8;
        goto LABEL_15;
      }
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 151) & 0x80000000) == 0)
        goto LABEL_7;
    }
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_15:
    operator delete(*(void **)(a1 + 104));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
LABEL_16:
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_10:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_11:
        operator delete((void *)a1);
        return;
      }
LABEL_18:
      operator delete(*(void **)(a1 + 32));
      goto LABEL_11;
    }
LABEL_17:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
}

void std::__shared_ptr_emplace<AMSCore::BagService::MutableBagContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::BagService::MutableBagContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<AMSCore::BagService::MutableBagContext>::__on_zero_shared(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::mutex *)(a1 + 88);
  if (*(_QWORD *)(a1 + 176))
  {
    v3 = (uint64_t *)(a1 + 160);
    v5 = *(_QWORD *)(a1 + 160);
    v4 = *(uint64_t **)(a1 + 168);
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    *(_QWORD *)(a1 + 176) = 0;
    if (v4 != (uint64_t *)(a1 + 160))
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::~mutex(v2);
  if (*(_BYTE *)(a1 + 80))
  {
    v8 = *(std::__shared_weak_count **)(a1 + 72);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = *(_QWORD **)(a1 + 40);
  while (v11)
  {
    v13 = v11;
    v11 = (_QWORD *)*v11;
    v14 = (std::__shared_weak_count *)v13[9];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    operator delete(v13);
  }
  v12 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v12)
    operator delete(v12);
}

uint64_t std::__tuple_compare_three_way[abi:fe180100]<std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,0ul,1ul,2ul,3ul,4ul>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  size_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  int v9;
  BOOL v11;
  int v12;
  const void *v13;
  size_t v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  const void *v20;
  size_t v21;
  int v22;
  const void *v23;
  size_t v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  int v29;
  const void *v30;
  size_t v31;
  size_t v32;
  const void *v33;
  _QWORD *v34;
  const void *v35;
  int v36;
  const void *v37;
  size_t v38;
  const void *v39;
  _QWORD *v40;
  const void *v41;
  int v42;
  const void *v43;
  size_t v44;
  size_t v45;

  v2 = a2;
  v3 = a1;
  v4 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v5 = v4;
  }
  v6 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v7 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v7 = v6;
  }
  if (v7 >= v5)
    v8 = v5;
  else
    v8 = v7;
  v9 = memcmp(a1, a2, v8);
  if (v9)
    goto LABEL_11;
  v11 = v5 >= v7;
  if (v5 == v7)
  {
    v12 = *((char *)v3 + 47);
    if (v12 >= 0)
      v13 = v3 + 3;
    else
      v13 = (const void *)v3[3];
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)v3 + 47);
    else
      v14 = v3[4];
    v15 = *((char *)v2 + 47);
    if (v15 >= 0)
      v16 = v2 + 3;
    else
      v16 = (const void *)v2[3];
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)v2 + 47);
    else
      v17 = v2[4];
    if (v17 >= v14)
      v18 = v14;
    else
      v18 = v17;
    v9 = memcmp(v13, v16, v18);
    if (v9)
      goto LABEL_11;
    v11 = v14 >= v17;
    if (v14 == v17)
    {
      v19 = *((char *)v3 + 71);
      if (v19 >= 0)
        v20 = v3 + 6;
      else
        v20 = (const void *)v3[6];
      if (v19 >= 0)
        v21 = *((unsigned __int8 *)v3 + 71);
      else
        v21 = v3[7];
      v22 = *((char *)v2 + 71);
      if (v22 >= 0)
        v23 = v2 + 6;
      else
        v23 = (const void *)v2[6];
      if (v22 >= 0)
        v24 = *((unsigned __int8 *)v2 + 71);
      else
        v24 = v2[7];
      if (v24 >= v21)
        v25 = v21;
      else
        v25 = v24;
      v9 = memcmp(v20, v23, v25);
      if (v9)
        goto LABEL_11;
      v11 = v21 >= v24;
      if (v21 == v24)
      {
        v26 = *((char *)v3 + 95);
        if (v26 >= 0)
          v27 = v3 + 9;
        else
          v27 = (const void *)v3[9];
        if (v26 >= 0)
          v28 = *((unsigned __int8 *)v3 + 95);
        else
          v28 = v3[10];
        v29 = *((char *)v2 + 95);
        if (v29 >= 0)
          v30 = v2 + 9;
        else
          v30 = (const void *)v2[9];
        if (v29 >= 0)
          v31 = *((unsigned __int8 *)v2 + 95);
        else
          v31 = v2[10];
        if (v31 >= v28)
          v32 = v28;
        else
          v32 = v31;
        v9 = memcmp(v27, v30, v32);
        if (v9)
          goto LABEL_11;
        v11 = v28 >= v31;
        if (v28 == v31)
        {
          v35 = (const void *)v3[12];
          v34 = v3 + 12;
          v33 = v35;
          v36 = *((char *)v34 + 23);
          if (v36 >= 0)
            v37 = v34;
          else
            v37 = v33;
          if (v36 >= 0)
            v38 = *((unsigned __int8 *)v34 + 23);
          else
            v38 = v34[1];
          v41 = (const void *)v2[12];
          v40 = v2 + 12;
          v39 = v41;
          v42 = *((char *)v40 + 23);
          if (v42 >= 0)
            v43 = v40;
          else
            v43 = v39;
          if (v42 >= 0)
            v44 = *((unsigned __int8 *)v40 + 23);
          else
            v44 = v40[1];
          if (v44 >= v38)
            v45 = v38;
          else
            v45 = v44;
          v9 = memcmp(v37, v43, v45);
          if (!v9)
          {
            v11 = v38 >= v44;
            if (v38 == v44)
              return 0;
            goto LABEL_83;
          }
LABEL_11:
          if ((v9 & 0x80000000) == 0)
            return 1;
          return 255;
        }
      }
    }
  }
LABEL_83:
  if (v11)
    return 1;
  return 255;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EEbENSB_ISP_EEFS6_SE_SI_SK_SN_bEED0Ev()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EEbENSB_ISP_EEFS6_SE_SI_SK_SN_bEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E25214F8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EEbENSB_ISP_EEFS6_SE_SI_SK_SN_bEE7__cloneEPNS0_6__baseISR_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E25214F8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EEbENSB_ISP_EEFS6_SE_SI_SK_SN_bEEclEOSE_OSI_OSK_OSN_Ob(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, std::runtime_error *a5, unsigned __int8 *a6)
{
  void (*v7)(__int128 *, __int128 *, __int128 *, std::runtime_error *, _QWORD, __n128);
  __int128 v8;
  unsigned __int8 imp;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error v17[4];
  char v18;
  void *__p;
  char v20;
  unsigned __int8 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v7 = *(void (**)(__int128 *, __int128 *, __int128 *, std::runtime_error *, _QWORD, __n128))(a1 + 8);
  v8 = *a2;
  v25 = *((_QWORD *)a2 + 2);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v26 = *(__int128 *)((char *)a2 + 24);
  v27 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v23 = *a3;
  v24 = v8;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v22 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  imp = a5[7].__imp_.__imp_;
  v10 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(v17, imp, a5);
  v21 = imp;
  v7(&v24, &v23, &v22, v17, *a6, v10);
  if (v21)
  {
    if (v20 < 0)
    {
      operator delete(__p);
      if (v18)
      {
LABEL_4:
        v11 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
        if (!*((_QWORD *)&v22 + 1))
          goto LABEL_11;
        goto LABEL_8;
      }
    }
    else if (v18)
    {
      goto LABEL_4;
    }
  }
  ((void (*)(std::runtime_error *))v17[0].~runtime_error)(v17);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (!*((_QWORD *)&v22 + 1))
    goto LABEL_11;
LABEL_8:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (!*((_QWORD *)&v23 + 1))
      goto LABEL_17;
    goto LABEL_12;
  }
LABEL_11:
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_17;
LABEL_12:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_17:
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete((void *)v24);
    return;
  }
  operator delete((void *)v26);
  if (SHIBYTE(v25) < 0)
    goto LABEL_21;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EEbENSB_ISP_EEFS6_SE_SI_SK_SN_bEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stringIcNS4_11c"
                     "har_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountEEENSD_INS_11IBundleInf"
                     "oEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EEbE"
    || ((v3 & (unint64_t)"PDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stri"
                                "ngIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountE"
                                "EENSD_INS_11IBundleInfoEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EEbE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountEEENSD_INS_11IBundleInfoEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EEbE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountEEENSD_INS_11IBundleInfoEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EEbE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EEbENSB_ISP_EEFS6_SE_SI_SK_SN_bEE11target_typeEv()
{
  return &_ZTIPDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountEEENSD_INS_11IBundleInfoEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EEbE;
}

__n128 std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(std::runtime_error *a1, int a2, std::runtime_error *a3)
{
  char imp;
  std::runtime_error *v5;
  std::runtime_error_vtbl *v6;
  const char *v7;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;
  std::runtime_error_vtbl *p_imp;
  const char *v11;
  std::runtime_error_vtbl *v12;
  std::runtime_error_vtbl *v13;
  __n128 result;
  std::runtime_error v15;

  if (a2)
  {
    imp = (char)a3[4].__imp_.__imp_;
    if (imp)
    {
      a1->__vftable = a3->__vftable;
    }
    else
    {
      a1 = std::runtime_error::runtime_error(a1, a3);
      p_imp = (std::runtime_error_vtbl *)&a3[2].__imp_;
      v11 = a3[2].__imp_.__imp_;
      a1[1] = a3[1];
      a1->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      a1[2].__vftable = a3[2].__vftable;
      a1[2].__imp_.__imp_ = v11;
      v12 = (std::runtime_error_vtbl *)&a1[2].__imp_;
      v13 = a3[3].__vftable;
      a1[3].__vftable = v13;
      if (v13)
      {
        *((_QWORD *)v11 + 2) = v12;
        a3[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a3[3].__vftable = 0;
      }
      else
      {
        a1[2].__vftable = v12;
      }
      *(std::runtime_error *)((char *)a1 + 56) = *(std::runtime_error *)((char *)a3 + 56);
      a3[3].__imp_.__imp_ = 0;
      a3[4].__vftable = 0;
    }
    LOBYTE(a1[4].__imp_.__imp_) = imp;
    result = (__n128)a3[5];
    v15 = a3[6];
    a1[5] = (std::runtime_error)result;
    a1[6] = v15;
    a1[7].__vftable = a3[7].__vftable;
    a3[6].__vftable = 0;
    a3[6].__imp_.__imp_ = 0;
    a3[7].__vftable = 0;
  }
  else
  {
    v5 = std::runtime_error::runtime_error(a1, a3);
    v6 = (std::runtime_error_vtbl *)&a3[2].__imp_;
    v7 = a3[2].__imp_.__imp_;
    v5[1] = a3[1];
    v5->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v5[2].__vftable = a3[2].__vftable;
    v5[2].__imp_.__imp_ = v7;
    v8 = (std::runtime_error_vtbl *)&v5[2].__imp_;
    v9 = a3[3].__vftable;
    v5[3].__vftable = v9;
    if (v9)
    {
      *((_QWORD *)v7 + 2) = v8;
      a3[2].__vftable = v6;
      v6->~runtime_error = 0;
      a3[3].__vftable = 0;
    }
    else
    {
      v5[2].__vftable = v8;
    }
    result = *(__n128 *)&a3[3].__imp_.__imp_;
    *(__n128 *)((char *)v5 + 56) = result;
    a3[3].__imp_.__imp_ = 0;
    a3[4].__vftable = 0;
  }
  return result;
}

_QWORD *AMSCore::BagService::BagService(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  std::string::size_type v4;
  std::string::value_type *v5;
  int v6;
  std::string::value_type *v7;
  std::string::size_type v8;
  int v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  __int128 *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  _QWORD *v60;
  char *v61;
  uint64_t *v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  __int128 v68;
  _BYTE v69[7];
  _BYTE v70[7];
  int v71;
  int v72;
  std::string v73;
  std::string v74;
  void *v75[2];
  uint64_t v76;
  void *v77[2];
  _QWORD *v78;
  void *__p[2];
  uint64_t v80;
  __int128 v81;
  _DWORD v82[2];
  _DWORD v83[2];
  _DWORD v84[2];
  __int128 v85;
  uint64_t v86;
  __int128 *v87;
  __int128 v88;
  _QWORD *v89;
  __int128 *v90;
  __int128 v91;
  uint64_t v92;
  __int128 *v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v5 = *(std::string::value_type **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v70 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v70[3] = *(_DWORD *)(a2 + 19);
  v6 = *(char *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *(std::string::value_type **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)&v69[3] = *(_DWORD *)(a3 + 19);
  *(_DWORD *)v69 = *(_DWORD *)(a3 + 16);
  v9 = *(char *)(a3 + 23);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v68 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  {
    qword_1ECEAC870 = 0;
    qword_1ECEAC868 = 0;
  }
  v11 = v68;
  (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v68 + 32))(&v91, v68);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v11 + 48))(&v88, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v11 + 72))(&v85, v11);
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(&v73, v5, v4);
  }
  else
  {
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    v73.__r_.__value_.__l.__size_ = v4;
    LODWORD(v73.__r_.__value_.__r.__words[2]) = *(_DWORD *)v70;
    *(_DWORD *)((char *)&v73.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v70[3];
    *((_BYTE *)&v73.__r_.__value_.__s + 23) = v6;
  }
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external(&v74, v7, v8);
  }
  else
  {
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    v74.__r_.__value_.__l.__size_ = v8;
    LODWORD(v74.__r_.__value_.__r.__words[2]) = *(_DWORD *)v69;
    *(_DWORD *)((char *)&v74.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v69[3];
    *((_BYTE *)&v74.__r_.__value_.__s + 23) = v9;
  }
  *(_OWORD *)v75 = v91;
  v76 = v92;
  *(_OWORD *)v77 = v88;
  v78 = v89;
  *(_OWORD *)__p = v85;
  v80 = v86;
  v12 = qword_1ECEAC868;
  if (qword_1ECEAC868)
  {
    v13 = &qword_1ECEAC868;
    do
    {
      v14 = std::__tuple_compare_three_way[abi:fe180100]<std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,0ul,1ul,2ul,3ul,4ul>((_QWORD *)(v12 + 32), &v73);
      if (v14 >= 0)
        v15 = (uint64_t *)v12;
      else
        v15 = (uint64_t *)(v12 + 8);
      if (v14 >= 0)
        v13 = (uint64_t *)v12;
      v12 = *v15;
    }
    while (*v15);
    if (v13 != &qword_1ECEAC868
      && (std::__tuple_compare_three_way[abi:fe180100]<std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,0ul,1ul,2ul,3ul,4ul>(&v73, v13 + 4) & 0x80) == 0)
    {
      v16 = a1;
      *a1 = v13[19];
      v17 = v13[20];
      a1[1] = v17;
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
      if (v17)
      {
        v19 = (unint64_t *)(v17 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      if ((SHIBYTE(v80) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_99;
    }
  }
  v72 = *(_DWORD *)v70;
  HIBYTE(v72) = v70[3];
  v71 = *(_DWORD *)v69;
  HIBYTE(v71) = v69[3];
  *(_QWORD *)&v85 = &off_1E25214F8;
  *((_QWORD *)&v85 + 1) = AMSCore::LoadNetworkBagTask::perform;
  v87 = &v85;
  v25 = operator new();
  v83[0] = v72;
  *(_DWORD *)((char *)v83 + 3) = *(_DWORD *)&v70[3];
  v82[0] = v71;
  *(_DWORD *)((char *)v82 + 3) = *(_DWORD *)&v69[3];
  if (v87)
  {
    if (v87 == &v85)
    {
      v93 = &v91;
      (*(void (**)(__int128 *, __int128 *))(v85 + 24))(&v85, &v91);
    }
    else
    {
      v93 = v87;
      v87 = 0;
    }
  }
  else
  {
    v93 = 0;
  }
  LODWORD(v81) = v83[0];
  *(_DWORD *)((char *)&v81 + 3) = *(_DWORD *)((char *)v83 + 3);
  v83[0] = 0;
  *(_DWORD *)((char *)v83 + 3) = 0;
  v84[0] = v82[0];
  *(_DWORD *)((char *)v84 + 3) = *(_DWORD *)((char *)v82 + 3);
  v82[0] = 0;
  *(_DWORD *)((char *)v82 + 3) = 0;
  *(_QWORD *)v25 = off_1E2520748;
  *(_QWORD *)(v25 + 8) = v5;
  *(_QWORD *)(v25 + 16) = v4;
  v26 = v81;
  *(_DWORD *)(v25 + 27) = *(_DWORD *)((char *)&v81 + 3);
  *(_DWORD *)(v25 + 24) = v26;
  *(_BYTE *)(v25 + 31) = v6;
  LODWORD(v81) = 0;
  *(_DWORD *)((char *)&v81 + 3) = 0;
  *(_QWORD *)(v25 + 32) = v7;
  *(_QWORD *)(v25 + 40) = v8;
  v27 = v84[0];
  *(_DWORD *)(v25 + 51) = *(_DWORD *)((char *)v84 + 3);
  *(_DWORD *)(v25 + 48) = v27;
  *(_BYTE *)(v25 + 55) = v9;
  v84[0] = 0;
  *(_DWORD *)((char *)v84 + 3) = 0;
  *(_OWORD *)(v25 + 56) = v68;
  *(_QWORD *)(v25 + 72) = 850045863;
  *(_OWORD *)(v25 + 128) = 0u;
  *(_OWORD *)(v25 + 144) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 112) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_QWORD *)(v25 + 160) = 850045863;
  *(_OWORD *)(v25 + 232) = 0u;
  *(_OWORD *)(v25 + 216) = 0u;
  *(_OWORD *)(v25 + 200) = 0u;
  *(_OWORD *)(v25 + 184) = 0u;
  *(_OWORD *)(v25 + 168) = 0u;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v25 + 248));
  v28 = operator new(0x30uLL);
  v28[1] = 0;
  v28[2] = 0;
  *v28 = &off_1E2523068;
  v28[5] = 0;
  v28[4] = 0;
  v28[3] = v28 + 4;
  *(_QWORD *)(v25 + 416) = v28 + 3;
  *(_QWORD *)(v25 + 424) = v28;
  *(_QWORD *)(v25 + 440) = 0;
  *(_QWORD *)(v25 + 448) = 0;
  *(_QWORD *)(v25 + 432) = v25 + 440;
  *(_BYTE *)(v25 + 456) = 0;
  *(_BYTE *)(v25 + 464) = 0;
  *(_QWORD *)(v25 + 472) = 850045863;
  *(_OWORD *)(v25 + 480) = 0u;
  *(_OWORD *)(v25 + 496) = 0u;
  *(_OWORD *)(v25 + 512) = 0u;
  *(_OWORD *)(v25 + 521) = 0u;
  *(_QWORD *)(v25 + 544) = v25 + 544;
  *(_QWORD *)(v25 + 552) = v25 + 544;
  *(_QWORD *)(v25 + 560) = 0;
  *(_QWORD *)v25 = off_1E2520D68;
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(&v88);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  *(_QWORD *)(v25 + 568) = v88;
  *(_QWORD *)(v25 + 576) = v29;
  if (v29)
  {
    p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *(_QWORD *)(v25 + 616) = 0;
  *(_OWORD *)(v25 + 584) = 0u;
  *(_OWORD *)(v25 + 600) = 0u;
  if (v93)
  {
    if (v93 == &v91)
    {
      *(_QWORD *)(v25 + 648) = v25 + 624;
      (*(void (**)(__int128 *))(v91 + 24))(&v91);
    }
    else
    {
      *(_QWORD *)(v25 + 648) = v93;
      v93 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v25 + 648) = 0;
  }
  v34 = (_QWORD *)operator new();
  v34[1] = 0;
  v35 = v34 + 1;
  *v34 = &off_1E2523228;
  v34[2] = 0;
  v34[3] = v25;
  v36 = v93;
  if (v93 == &v91)
  {
    v37 = 4;
    v36 = &v91;
    goto LABEL_57;
  }
  if (v93)
  {
    v37 = 5;
LABEL_57:
    (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
  }
  v38 = *(std::__shared_weak_count **)(v25 + 576);
  if (!v38)
    goto LABEL_82;
  v39 = std::__shared_weak_count::lock(v38);
  if (!v39)
    goto LABEL_82;
  v40 = v39;
  v41 = *(_QWORD *)(v25 + 568);
  if (v41)
  {
    v42 = v34 + 2;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    *(_QWORD *)&v88 = &off_1E2521D90;
    *((_QWORD *)&v88 + 1) = v25;
    v89 = v34;
    v90 = &v88;
    (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v41 + 72))(&v81, v41, &v88);
    v44 = v81;
    v81 = 0uLL;
    v45 = *(std::__shared_weak_count **)(v25 + 592);
    *(_OWORD *)(v25 + 584) = v44;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v90;
    if (v90 == &v88)
    {
      v52 = 4;
      v51 = &v88;
      goto LABEL_77;
    }
    if (v90)
    {
      v52 = 5;
LABEL_77:
      (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
    }
  }
  v53 = (unint64_t *)&v40->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_82:
  v55 = v87;
  if (v87 == &v85)
  {
    v56 = 4;
    v55 = &v85;
  }
  else
  {
    if (!v87)
      goto LABEL_87;
    v56 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
LABEL_87:
  v57 = qword_1ECEAC868;
  if (qword_1ECEAC868)
  {
    while (1)
    {
      while (1)
      {
        v59 = (uint64_t *)v57;
        v60 = (_QWORD *)(v57 + 32);
        if ((std::__tuple_compare_three_way[abi:fe180100]<std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,0ul,1ul,2ul,3ul,4ul>(&v73, (_QWORD *)(v57 + 32)) & 0x80) == 0)break;
        v57 = *v59;
        v58 = v59;
        if (!*v59)
          goto LABEL_93;
      }
      if ((std::__tuple_compare_three_way[abi:fe180100]<std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,0ul,1ul,2ul,3ul,4ul>(v60, &v73) & 0x80) == 0)break;
      v58 = v59 + 1;
      v57 = v59[1];
      if (!v57)
        goto LABEL_93;
    }
  }
  else
  {
    v58 = &qword_1ECEAC868;
    v59 = &qword_1ECEAC868;
LABEL_93:
    v61 = (char *)operator new(0xA8uLL);
    v62 = (uint64_t *)v61;
    *(std::string *)(v61 + 32) = v73;
    memset(&v73, 0, sizeof(v73));
    *(std::string *)(v61 + 56) = v74;
    memset(&v74, 0, sizeof(v74));
    *((_QWORD *)v61 + 12) = v76;
    *((_OWORD *)v61 + 5) = *(_OWORD *)v75;
    v75[1] = 0;
    v76 = 0;
    v75[0] = 0;
    v63 = *(_OWORD *)v77;
    *((_QWORD *)v61 + 15) = v78;
    *(_OWORD *)(v61 + 104) = v63;
    v77[0] = 0;
    v77[1] = 0;
    v78 = 0;
    v64 = v80;
    *((_OWORD *)v61 + 8) = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v80 = 0;
    *((_QWORD *)v61 + 18) = v64;
    *((_QWORD *)v61 + 19) = v25;
    *((_QWORD *)v61 + 20) = v34;
    do
      v65 = __ldxr(v35);
    while (__stxr(v65 + 1, v35));
    *(_QWORD *)v61 = 0;
    *((_QWORD *)v61 + 1) = 0;
    *((_QWORD *)v61 + 2) = v59;
    *v58 = (uint64_t)v61;
    {
      v62 = (uint64_t *)*v58;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ECEAC868, v62);
    ++qword_1ECEAC870;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v9 = 0;
  v18 = 0;
  *(_QWORD *)&v66 = v25;
  *((_QWORD *)&v66 + 1) = v34;
  v16 = a1;
  *(_OWORD *)a1 = v66;
  if ((SHIBYTE(v80) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v78) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_100;
  }
LABEL_99:
  operator delete(__p[0]);
  if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v76) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_101;
  }
LABEL_100:
  operator delete(v77[0]);
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_102:
    operator delete(v74.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_103:
    operator delete(v73.__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
LABEL_101:
  operator delete(v75[0]);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_102;
LABEL_25:
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_103;
LABEL_26:
  if (!v18)
    goto LABEL_30;
  v21 = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_30:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_31;
LABEL_38:
    operator delete(v7);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_39:
    operator delete(v5);
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (v9 < 0)
    goto LABEL_38;
LABEL_31:
  if (v6 < 0)
    goto LABEL_39;
LABEL_32:
  v23 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_1E2522700;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *((_DWORD *)v23 + 14) = 1065353216;
  *((_QWORD *)v23 + 11) = 850045863;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 7) = 0u;
  *((_OWORD *)v23 + 8) = 0u;
  *((_QWORD *)v23 + 19) = 0;
  *((_QWORD *)v23 + 20) = v23 + 160;
  *(_OWORD *)(v23 + 137) = 0u;
  *((_QWORD *)v23 + 21) = v23 + 160;
  *((_QWORD *)v23 + 22) = 0;
  v16[2] = v23 + 24;
  v16[3] = v23;
  return v16;
}

void sub_18CBE9224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::ClockProvider::~ClockProvider(AMSCore::ClockProvider *this)
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *AMSCore::BagService::configureMutableBagUpdateObservation(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  _QWORD *result;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v9 = a2[2];
  v8 = a2[3];
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v15 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v12 = (char *)operator new(0x38uLL);
  *(_QWORD *)v12 = &off_1E25217B8;
  *((_QWORD *)v12 + 1) = v4;
  *((_QWORD *)v12 + 2) = v5;
  *((_QWORD *)v12 + 3) = v9;
  *((_QWORD *)v12 + 4) = v8;
  *(_OWORD *)(v12 + 40) = v15;
  v17 = v12;
  AMSCore::BagDataSource::observeChanged(a1, v4, v16);
  result = v17;
  if (v17 == v16)
  {
    v14 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_18CBE9474(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_1E25217B8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_1E25217B8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x18D789BDCLL);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E25217B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E25217B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::operator()(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  unsigned int v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  const std::runtime_error *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::ios_base *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  std::ios_base *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 v79;
  _QWORD *v80;
  std::mutex *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  void *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::mutex **v130;
  char *v131;
  char *v132;
  _QWORD *v133;
  std::runtime_error *v134;
  std::__shared_weak_count *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140[5];
  uint64_t v141[5];
  uint64_t v142;
  void *__p[2];
  __int128 v144;
  int v145;
  _QWORD v146[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::__shared_weak_count *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v140);
  AMSCore::Logger::log<char [51]>(v140[0], 2, (uint64_t)"bag", 3, "Mutable bag datasource change-observer was called.");
  v2 = (std::__shared_weak_count *)v141[0];
  if (v141[0])
  {
    v3 = (unint64_t *)(v141[0] + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[1];
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = a1[3];
  v10 = (std::__shared_weak_count *)a1[4];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a1[5];
  v14 = a1[6];
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (char *)operator new(0x158uLL);
  v18 = (unint64_t)v17;
  v19 = v17 + 296;
  *(_QWORD *)v17 = _ZZZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEENK3__0clINS_8MapUtils10UpdateDiffINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEDaRKT_ENKUlNS1_8weak_ptrINS_13BagDataSourceEEENSL_INS0_17MutableBagContextEEES5_E_clESN_SP_S5__resume;
  *((_QWORD *)v17 + 1) = _ZZZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEENK3__0clINS_8MapUtils10UpdateDiffINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEDaRKT_ENKUlNS1_8weak_ptrINS_13BagDataSourceEEENSL_INS0_17MutableBagContextEEES5_E_clESN_SP_S5__destroy;
  v130 = (std::mutex **)(v17 + 176);
  v131 = v17 + 144;
  v133 = v17 + 192;
  v134 = (std::runtime_error *)(v17 + 64);
  v20 = v17 + 208;
  v21 = v17 + 240;
  *((_QWORD *)v17 + 34) = v6;
  *((_QWORD *)v17 + 35) = v9;
  v132 = v17 + 256;
  v136 = v17 + 224;
  v137 = (uint64_t)(v17 + 16);
  *((_QWORD *)v17 + 36) = v10;
  *((_QWORD *)v17 + 37) = v13;
  *((_QWORD *)v17 + 38) = v14;
  do
    v22 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v22 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_WORD *)(v17 + 17) = 0;
  *((_QWORD *)v17 + 3) = 0;
  *((_QWORD *)v17 + 7) = 0;
  std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(v140, v137);
  v135 = (std::__shared_weak_count *)v141[0];
  *v136 = 0;
  v136[1] = 0;
  if (!v6 || (v23 = std::__shared_weak_count::lock(v6), (*(_QWORD *)(v18 + 232) = v23) == 0) || (*v136 = v5) == 0)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v138);
    v36 = v138;
    if (*(int *)(v138 + 8) <= 2)
    {
      v37 = MEMORY[0x1E0DE4FE0];
      v38 = MEMORY[0x1E0DE4FE0] + 64;
      v39 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v40 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v41 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v146[0] = MEMORY[0x1E0DE4FE0] + 64;
      v140[0] = v40;
      *(uint64_t *)((char *)v140 + *(_QWORD *)(v40 - 24)) = v41;
      v42 = (std::ios_base *)((char *)v140 + *(_QWORD *)(v140[0] - 24));
      std::ios_base::init(v42, v141);
      v42[1].__vftable = 0;
      v42[1].__fmtflags_ = -1;
      v140[0] = v37 + 24;
      v146[0] = v38;
      std::streambuf::basic_streambuf();
      v43 = MEMORY[0x1E0DE4FB8];
      v141[0] = MEMORY[0x1E0DE4FB8] + 16;
      *(_OWORD *)__p = 0u;
      v144 = 0u;
      v145 = 16;
      v44 = *(_QWORD *)(v140[0] - 24);
      if ((v45 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v140, (uint64_t)"Bag data source has been deallocated. No mutable bag update will occur.", 71);
      v46 = v142;
      v47 = (char *)v140 + *(_QWORD *)(v140[0] - 24);
      if ((v47[32] & 5) != 0)
      {
        v48 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v47 + 5) + 32))(&rep, *((_QWORD *)v47 + 5), 0, 1, 16);
        v48 = v151;
      }
      rep = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v148) = 2;
      v149 = v46;
      v150 = v48;
      (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v36 + 16) + 16))(*(_QWORD *)(v36 + 16), "bag", 3, &rep);
      v140[0] = *v39;
      *(uint64_t *)((char *)v140 + *(_QWORD *)(v140[0] - 24)) = v39[3];
      v141[0] = v43 + 16;
      if (SBYTE7(v144) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v146);
    }
    v62 = v139;
    if (v139)
    {
      p_shared_owners = (unint64_t *)&v139->__shared_owners_;
      do
        v64 = __ldaxr(p_shared_owners);
      while (__stlxr(v64 - 1, p_shared_owners));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    *(_BYTE *)(v18 + 18) = 1;
    v65 = 3;
    goto LABEL_51;
  }
  *v133 = 0;
  v133[1] = 0;
  if (!v10 || (v24 = std::__shared_weak_count::lock(v10), (*(_QWORD *)(v18 + 200) = v24) == 0) || (*v133 = v9) == 0)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v138);
    v49 = v138;
    if (*(int *)(v138 + 8) <= 2)
    {
      v50 = MEMORY[0x1E0DE4FE0];
      v51 = MEMORY[0x1E0DE4FE0] + 64;
      v52 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v53 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v54 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v146[0] = MEMORY[0x1E0DE4FE0] + 64;
      v140[0] = v53;
      *(uint64_t *)((char *)v140 + *(_QWORD *)(v53 - 24)) = v54;
      v55 = (std::ios_base *)((char *)v140 + *(_QWORD *)(v140[0] - 24));
      std::ios_base::init(v55, v141);
      v55[1].__vftable = 0;
      v55[1].__fmtflags_ = -1;
      v140[0] = v50 + 24;
      v146[0] = v51;
      std::streambuf::basic_streambuf();
      v56 = MEMORY[0x1E0DE4FB8];
      v141[0] = MEMORY[0x1E0DE4FB8] + 16;
      *(_OWORD *)__p = 0u;
      v144 = 0u;
      v145 = 16;
      v57 = *(_QWORD *)(v140[0] - 24);
      if ((v58 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v140, (uint64_t)"Mutable bag context has been deallocated. No mutable bag update will occur.", 75);
      v59 = v142;
      v60 = (char *)v140 + *(_QWORD *)(v140[0] - 24);
      if ((v60[32] & 5) != 0)
      {
        v61 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v60 + 5) + 32))(&rep, *((_QWORD *)v60 + 5), 0, 1, 16);
        v61 = v151;
      }
      rep = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v148) = 2;
      v149 = v59;
      v150 = v61;
      (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v49 + 16) + 16))(*(_QWORD *)(v49 + 16), "bag", 3, &rep);
      v140[0] = *v52;
      *(uint64_t *)((char *)v140 + *(_QWORD *)(v140[0] - 24)) = v52[3];
      v141[0] = v56 + 16;
      if (SBYTE7(v144) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v146);
    }
    v71 = v139;
    if (v139)
    {
      v72 = (unint64_t *)&v139->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    *(_BYTE *)(v18 + 18) = 1;
    v65 = 3;
    v74 = *(std::__shared_weak_count **)(v18 + 200);
    if (v74)
      goto LABEL_76;
LABEL_51:
    *(_QWORD *)(v18 + 328) = v14;
    v66 = *(std::__shared_weak_count **)(v18 + 232);
    if (!v66)
      goto LABEL_55;
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
      if (v65 == 3)
        goto LABEL_57;
    }
    else
    {
LABEL_55:
      if (v65 == 3)
      {
LABEL_57:
        *(_QWORD *)(v18 + 64) = v137;
        *(_QWORD *)v18 = 0;
        AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v134);
        goto LABEL_60;
      }
    }
    *(_BYTE *)(v18 + 18) = 1;
    goto LABEL_57;
  }
  v25 = (unsigned __int8 *)(v9 + 128);
  do
    v26 = __ldaxr(v25);
  while (__stxr(1u, v25));
  if ((v26 & 1) != 0)
  {
    v19[40] = 0;
    std::mutex::lock((std::mutex *)(*(_QWORD *)(v18 + 280) + 64));
    v77 = *(_QWORD *)(v18 + 280);
    if (*(_QWORD *)(v77 + 152))
      goto LABEL_85;
    v78 = (unsigned __int8 *)(v77 + 128);
    do
      v79 = __ldxr(v78);
    while (__stlxr(1u, v78));
    if ((v79 & 1) != 0)
    {
LABEL_85:
      v80 = operator new(0x18uLL);
      v81 = (std::mutex *)(*(_QWORD *)(v18 + 280) + 64);
      v80[1] = v77 + 136;
      v80[2] = v18;
      v82 = *(_QWORD *)(v77 + 136);
      *v80 = v82;
      *(_QWORD *)(v82 + 8) = v80;
      *(_QWORD *)(v77 + 136) = v80;
      ++*(_QWORD *)(v77 + 152);
      std::mutex::unlock(v81);
      goto LABEL_60;
    }
    std::mutex::unlock((std::mutex *)(*(_QWORD *)(v18 + 280) + 64));
  }
  *(_QWORD *)(v18 + 176) = *(_QWORD *)(v18 + 280) + 64;
  *(_BYTE *)(v18 + 184) = 1;
  v27 = *(_QWORD *)(v18 + 224);
  v28 = *(_OWORD *)v19;
  *(_DWORD *)(v18 + 168) = 0;
  *(_OWORD *)(v18 + 240) = v28;
  (*(void (**)(uint64_t, _QWORD, char *, char *))(*(_QWORD *)v27 + 24))(v27, 0, v131, v21);
  v29 = *(_OWORD *)(v18 + 208);
  *((_OWORD *)v19 + 1) = v29;
  *v20 = 0;
  v20[1] = 0;
  if (atomic_load((unint64_t *)(v29 + 96)))
    goto LABEL_30;
  v19[40] = 1;
  v31 = (unint64_t *)(*(_QWORD *)(v18 + 312) + 96);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v18, v31));
  if (v32)
  {
LABEL_30:
    v33 = *((_QWORD *)v19 + 2);
    if (!*(_BYTE *)(v33 + 88))
      __break(1u);
    v34 = (const std::runtime_error *)(v33 + 8);
    v35 = *(_BYTE *)(v33 + 80);
    if (v35)
    {
      *(_OWORD *)(v18 + 64) = *(_OWORD *)(v33 + 8);
      v34->__vftable = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_OWORD *)(v18 + 80) = *(_OWORD *)(v33 + 24);
      *(_QWORD *)(v18 + 96) = *(_QWORD *)(v33 + 40);
      *(_QWORD *)(v33 + 32) = 0;
      *(_QWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v18 + 104) = *(_QWORD *)(v33 + 48);
    }
    else
    {
      std::runtime_error::runtime_error(v134, v34);
      *(_OWORD *)(v18 + 80) = *(_OWORD *)(v33 + 24);
      v83 = (_QWORD *)(v33 + 48);
      v84 = *(_QWORD *)(v33 + 48);
      *(_QWORD *)(v18 + 104) = v84;
      v85 = v18 + 104;
      *(_QWORD *)(v18 + 64) = off_1E2521330;
      *(_QWORD *)(v18 + 96) = *(_QWORD *)(v33 + 40);
      v86 = *(_QWORD *)(v33 + 56);
      *(_QWORD *)(v18 + 112) = v86;
      if (v86)
      {
        *(_QWORD *)(v84 + 16) = v85;
        *(_QWORD *)(v33 + 40) = v83;
        *v83 = 0;
        *(_QWORD *)(v33 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v18 + 96) = v85;
      }
      v87 = *(_QWORD *)(v18 + 312);
      *(_OWORD *)(v18 + 120) = *(_OWORD *)(v87 + 64);
      *(_QWORD *)(v87 + 64) = 0;
      *(_QWORD *)(v87 + 72) = 0;
    }
    *(_BYTE *)(v18 + 136) = v35;
    v88 = *(_QWORD *)(v18 + 320);
    if (v88)
    {
      v89 = (unint64_t *)(v88 + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        v91 = *(std::__shared_weak_count **)(v18 + 320);
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v92 = *(std::__shared_weak_count **)(v18 + 216);
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v95 = *(std::__shared_weak_count **)(v18 + 248);
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (*(_BYTE *)(v18 + 136))
    {
      v98 = operator new(0x50uLL);
      v98[1] = 0;
      v98[2] = 0;
      *v98 = &off_1E2522818;
      v99 = *(_OWORD *)(v18 + 64);
      v100 = *(_OWORD *)(v18 + 80);
      v134->__vftable = 0;
      v134->__imp_.__imp_ = 0;
      v101 = *(_QWORD *)(v18 + 96);
      v102 = *(_QWORD *)(v18 + 104);
      *(_QWORD *)(v18 + 88) = 0;
      *(_QWORD *)(v18 + 96) = 0;
      *(_QWORD *)(v18 + 80) = 0;
      v98[3] = off_1E25205C0;
      *((_OWORD *)v98 + 2) = v99;
      *((_OWORD *)v98 + 3) = v100;
      v98[8] = v101;
      v98[9] = v102;
      rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)(v98 + 3);
      v148 = (std::__shared_weak_count *)v98;
      for (i = *(_QWORD **)(*(_QWORD *)(v18 + 192) + 16); i; i = (_QWORD *)*i)
      {
        v110 = i[8];
        v111 = v148;
        *(_QWORD *)(v18 + 256) = rep;
        *(_QWORD *)(v18 + 264) = v111;
        if (v111)
        {
          v112 = (unint64_t *)&v111->__shared_owners_;
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v110 + 24));
        v114 = *(_OWORD *)v132;
        *(_QWORD *)v132 = 0;
        *((_QWORD *)v132 + 1) = 0;
        v115 = *(std::__shared_weak_count **)(v110 + 16);
        *(_OWORD *)(v110 + 8) = v114;
        if (v115)
        {
          v116 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v110 + 24));
        v118 = *(std::__shared_weak_count **)(v18 + 264);
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v140);
      AMSCore::Logger::log<char [57]>(v140[0]);
      v104 = (std::__shared_weak_count *)v141[0];
      if (v141[0])
      {
        v105 = (unint64_t *)(v141[0] + 8);
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = v148;
      if (v148)
      {
        v108 = (unint64_t *)&v148->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v65 = 0;
    }
    else
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v140);
      AMSCore::Logger::log<char [97]>(v140[0]);
      v121 = (std::__shared_weak_count *)v141[0];
      if (v141[0])
      {
        v122 = (unint64_t *)(v141[0] + 8);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      *(_BYTE *)(v18 + 18) = 1;
      v65 = 3;
    }
    if (*(_BYTE *)(v18 + 136))
    {
      v124 = *(uint64_t **)(v18 + 80);
      if (v124)
      {
        v125 = *(uint64_t **)(v18 + 88);
        v126 = *(void **)(v18 + 80);
        if (v125 != v124)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v125, 0);
          while (v125 != v124);
          v126 = *(void **)(v18 + 80);
        }
        *(_QWORD *)(v18 + 88) = v124;
        operator delete(v126);
      }
      v127 = *(std::__shared_weak_count **)(v18 + 72);
      if (v127)
      {
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v134->~runtime_error)(v134);
    }
    if (*(_BYTE *)(v18 + 184))
      AMSCore::AwaitableMutex::unlock(*v130);
    v14 = 0;
    v74 = *(std::__shared_weak_count **)(v18 + 200);
    if (!v74)
      goto LABEL_51;
LABEL_76:
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
    goto LABEL_51;
  }
LABEL_60:
  if (v135)
  {
    v69 = (unint64_t *)&v135->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
}

void sub_18CBEA4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13C"
                                "lockProviderEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::target_type()
{
}

uint64_t AMSCore::Logger::log<char [51]>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v9 = result;
    v10 = MEMORY[0x1E0DE4FE0];
    v11 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v28[0] = MEMORY[0x1E0DE4FE0] + 64;
    v23 = v13;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v13 - 24)) = v14;
    v15 = (std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24));
    std::ios_base::init(v15, v24);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v23 = v10 + 24;
    v28[0] = v11;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8];
    v24[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v27 = 16;
    v17 = *(_QWORD *)(v23 - 24);
    if ((v18 & 1) == 0
    {
    }
    v19 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v23, (uint64_t)a5, v19);
    v20 = v24[5];
    v21 = (char *)&v24[-1] + *(_QWORD *)(v23 - 24);
    if ((v21[32] & 5) != 0)
    {
      v22 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5) + 32))(&rep, *((_QWORD *)v21 + 5), 0, 1, 16);
      v22 = v33;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v30 = a2;
    v31 = v20;
    v32 = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v9 + 16) + 16))(*(_QWORD *)(v9 + 16), a3, a4, &rep);
    v23 = *v12;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = v12[3];
    v24[0] = v16 + 16;
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v28);
  }
  return result;
}

void sub_18CBEA940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void _ZZZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEENK3__0clINS_8MapUtils10UpdateDiffINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEDaRKT_ENKUlNS1_8weak_ptrINS_13BagDataSourceEEENSL_INS0_17MutableBagContextEEES5_E_clESN_SP_S5__resume(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  __int128 v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void (***v9)(uint64_t);
  const std::runtime_error *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;

  if (*(_BYTE *)(a1 + 336))
    goto LABEL_6;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 296);
  v2 = a1 + 144;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 280) + 64;
  *(_BYTE *)(a1 + 184) = 1;
  v3 = *(_QWORD *)(a1 + 224);
  *(_DWORD *)(a1 + 168) = 0;
  (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t))(*(_QWORD *)v3 + 24))(v3, 0, v2, a1 + 240);
  v4 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 312) = v4;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  if (atomic_load((unint64_t *)(v4 + 96)))
    goto LABEL_6;
  *(_BYTE *)(a1 + 336) = 1;
  v6 = (unint64_t *)(*(_QWORD *)(a1 + 312) + 96);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(a1, v6));
  if (v7)
  {
LABEL_6:
    v8 = *(_QWORD *)(a1 + 312);
    if (*(_BYTE *)(v8 + 88))
    {
      v9 = (void (***)(uint64_t))(a1 + 64);
      v10 = (const std::runtime_error *)(v8 + 8);
      v11 = *(_BYTE *)(v8 + 80);
      if (v11)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 + 8);
        v10->__vftable = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(v8 + 24);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(v8 + 40);
        *(_QWORD *)(v8 + 32) = 0;
        *(_QWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(v8 + 48);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 64), v10);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(v8 + 24);
        v12 = (_QWORD *)(v8 + 48);
        v13 = *(_QWORD *)(v8 + 48);
        *(_QWORD *)(a1 + 104) = v13;
        v14 = a1 + 104;
        *(_QWORD *)(a1 + 64) = off_1E2521330;
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(v8 + 40);
        v15 = *(_QWORD *)(v8 + 56);
        *(_QWORD *)(a1 + 112) = v15;
        if (v15)
        {
          *(_QWORD *)(v13 + 16) = v14;
          *(_QWORD *)(v8 + 40) = v12;
          *v12 = 0;
          *(_QWORD *)(v8 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 96) = v14;
        }
        v16 = *(_QWORD *)(a1 + 312);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(v16 + 64);
        *(_QWORD *)(v16 + 64) = 0;
        *(_QWORD *)(v16 + 72) = 0;
      }
      *(_BYTE *)(a1 + 136) = v11;
      v17 = *(_QWORD *)(a1 + 320);
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          v20 = *(std::__shared_weak_count **)(a1 + 320);
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v21 = *(std::__shared_weak_count **)(a1 + 216);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = *(std::__shared_weak_count **)(a1 + 248);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (*(_BYTE *)(a1 + 136))
      {
        v27 = operator new(0x50uLL);
        v27[1] = 0;
        v27[2] = 0;
        *v27 = &off_1E2522818;
        v28 = *(_OWORD *)(a1 + 64);
        v29 = *(_OWORD *)(a1 + 80);
        *v9 = 0;
        *(_QWORD *)(a1 + 72) = 0;
        v30 = *(_QWORD *)(a1 + 96);
        v31 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        v27[3] = off_1E25205C0;
        *((_OWORD *)v27 + 2) = v28;
        *((_OWORD *)v27 + 3) = v29;
        v27[8] = v30;
        v27[9] = v31;
        v69 = v27 + 3;
        v70 = (std::__shared_weak_count *)v27;
        v32 = *(_QWORD **)(*(_QWORD *)(a1 + 192) + 16);
        if (v32)
        {
          v33 = (__int128 *)(a1 + 256);
          do
          {
            v34 = v32[8];
            v35 = v70;
            *(_QWORD *)(a1 + 256) = v69;
            *(_QWORD *)(a1 + 264) = v35;
            if (v35)
            {
              v36 = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }
            std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v34 + 24));
            v38 = *v33;
            *(_QWORD *)v33 = 0;
            *(_QWORD *)(a1 + 264) = 0;
            v39 = *(std::__shared_weak_count **)(v34 + 16);
            *(_OWORD *)(v34 + 8) = v38;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v34 + 24));
            v42 = *(std::__shared_weak_count **)(a1 + 264);
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v32 = (_QWORD *)*v32;
          }
          while (v32);
        }
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v67);
        AMSCore::Logger::log<char [57]>(v67);
        v45 = v68;
        if (v68)
        {
          v46 = (unint64_t *)&v68->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = v70;
        if (v70)
        {
          v49 = (unint64_t *)&v70->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = 0;
        if (*(_BYTE *)(a1 + 136))
          goto LABEL_56;
      }
      else
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v69);
        AMSCore::Logger::log<char [97]>((uint64_t)v69);
        v58 = v70;
        if (v70)
        {
          v59 = (unint64_t *)&v70->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        *(_BYTE *)(a1 + 18) = 1;
        v51 = 3;
        if (*(_BYTE *)(a1 + 136))
        {
LABEL_56:
          v52 = *(uint64_t **)(a1 + 80);
          if (v52)
          {
            v53 = *(uint64_t **)(a1 + 88);
            v54 = *(void **)(a1 + 80);
            if (v53 != v52)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v53, 0);
              while (v53 != v52);
              v54 = *(void **)(a1 + 80);
            }
            *(_QWORD *)(a1 + 88) = v52;
            operator delete(v54);
          }
          v55 = *(std::__shared_weak_count **)(a1 + 72);
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          if (!*(_BYTE *)(a1 + 184))
          {
LABEL_76:
            v61 = *(std::__shared_weak_count **)(a1 + 200);
            if (v61)
            {
              v62 = (unint64_t *)&v61->__shared_owners_;
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            *(_QWORD *)(a1 + 328) = 0;
            v64 = *(std::__shared_weak_count **)(a1 + 232);
            if (!v64)
              goto LABEL_85;
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
              if (v51 == 3)
                goto LABEL_87;
            }
            else
            {
LABEL_85:
              if (v51 == 3)
              {
LABEL_87:
                *(_QWORD *)(a1 + 64) = a1 + 16;
                *(_QWORD *)a1 = 0;
                AMSCore::Task<void,void>::Promise::Awaiter::await_suspend((_QWORD *)(a1 + 64));
                return;
              }
            }
            *(_BYTE *)(a1 + 18) = 1;
            goto LABEL_87;
          }
LABEL_75:
          AMSCore::AwaitableMutex::unlock(*(std::mutex **)(a1 + 176));
          goto LABEL_76;
        }
      }
      (**v9)(a1 + 64);
      if (!*(_BYTE *)(a1 + 184))
        goto LABEL_76;
      goto LABEL_75;
    }
    __break(1u);
  }
}

void sub_18CBEAFD0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  std::expected<AMSCore::SynchronousBagData,AMSCore::Error>::~expected[abi:fe180100](v4);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v5);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v3 + 192);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v3 + 224);
  __cxa_begin_catch(a1);
  std::terminate();
}

void _ZZZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEENK3__0clINS_8MapUtils10UpdateDiffINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEDaRKT_ENKUlNS1_8weak_ptrINS_13BagDataSourceEEENSL_INS0_17MutableBagContextEEES5_E_clESN_SP_S5__destroy(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;

  if (!*(_QWORD *)__p)
    goto LABEL_31;
  if (__p[336])
  {
    v2 = *((_QWORD *)__p + 40);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 40);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 27);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 31);
    if (!v9)
      goto LABEL_17;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!__p[184])
      {
LABEL_19:
        v12 = 0;
        v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 25);
        if (!v13)
          goto LABEL_26;
LABEL_22:
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        goto LABEL_26;
      }
    }
    else
    {
LABEL_17:
      if (!__p[184])
        goto LABEL_19;
    }
    AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 22));
    goto LABEL_19;
  }
  v12 = *((_QWORD *)__p + 38);
  v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 25);
  if (v13)
    goto LABEL_22;
LABEL_26:
  *((_QWORD *)__p + 41) = v12;
  v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 29);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_31:
  v19 = (char *)*((_QWORD *)__p + 7);
  if (v19 == __p + 32)
  {
    v20 = 4;
    v19 = __p + 32;
    goto LABEL_35;
  }
  if (v19)
  {
    v20 = 5;
LABEL_35:
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
  }
  v21 = *((_QWORD *)__p + 41);
  do
  {
    v22 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v23)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v21)
  {
    v24 = (unint64_t *)(*((_QWORD *)__p + 41) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 41);
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)__p + 36);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = (std::__shared_weak_count *)*((_QWORD *)__p + 34);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523B20;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CBEB2D0(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CBEB304(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Logger::log<char [97]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Failed to fetch synchronous bag data after data source update. No mutable bag update will occur.", 96);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 4;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "bag", 3, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CBEB558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [57]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Finished updating mutable bags after data source update.", 56);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "bag", 3, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CBEB7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::expected<AMSCore::SynchronousBagData,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(uint64_t **)(a1 + 16);
    if (v2)
    {
      v3 = *(uint64_t **)(a1 + 24);
      v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
        while (v3 != v2);
        v4 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v4);
    }
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

_QWORD *AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(_QWORD *result)
{
  unint64_t *v1;
  void (**v2)(_QWORD);
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = (unint64_t *)(*result + 8);
  do
    v2 = (void (**)(_QWORD))__ldaxr(v1);
  while (__stlxr(1uLL, v1));
  if (v2)
  {
    if (v2 == (void (**)(_QWORD))2)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*result - 8))(*result - 16);
    v3 = *result;
    v5 = (_QWORD *)(*result + 40);
    v4 = (_BYTE *)*v5;
    if (*v5)
    {
      if (v4 == (_BYTE *)(v3 + 16))
      {
        v8 = v7;
        (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v4 + 24))(v4, v7);
      }
      else
      {
        v8 = (_BYTE *)*v5;
        *v5 = 0;
      }
    }
    else
    {
      v8 = 0;
    }
    if (v8)
      (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 48))(v8);
    else
      (*v2)(v2);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_18CBEBA14(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMSCore::ImmutableBag>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::ImmutableBag>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::ImmutableBag>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
}

void std::__shared_ptr_pointer<AMSCore::Task<void,void>::Promise *,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<void,void>::Promise *,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<void,void>::Promise *,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskIvvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskIvvE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskIvvE7Promise17get_return_objectEvE13DetachPromise")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskIvvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::BagService::getSynchronousBag(uint64_t a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  const std::runtime_error *v23;
  char v24;
  char *v25;
  std::runtime_error_vtbl *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  std::runtime_error *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int **v70;
  _QWORD *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unsigned int *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::runtime_error_vtbl *v86;
  const char *imp;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  std::mutex *v108;
  uint64_t v109;
  __int128 v110;
  std::runtime_error v111;
  __int128 v112;
  unsigned int **v113;
  unsigned int *v114;
  unsigned int *v115;
  __int128 v116;
  std::runtime_error v117;
  __int128 v118;
  unsigned int **v119;
  unsigned int *v120[2];
  __int128 v121;
  std::runtime_error v122;
  __int128 v123;
  unsigned int **v124;
  unsigned int *v125;
  unsigned int *v126;
  __int128 v127;
  char v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 280;
  v3 = (std::runtime_error *)(a1 + 152);
  v4 = a1 + 16;
  if (*(_BYTE *)(a1 + 464))
    goto LABEL_2;
  v22 = *(_QWORD *)(a1 + 432);
  if (!*(_BYTE *)(v22 + 88))
    goto LABEL_151;
  v23 = (const std::runtime_error *)(v22 + 8);
  v24 = *(_BYTE *)(v22 + 80);
  if (v24)
  {
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v22 + 8);
    v23->__vftable = 0;
    *(_QWORD *)(v22 + 16) = 0;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v22 + 24);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(v22 + 48);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v23);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v22 + 24);
    v43 = (_QWORD *)(v22 + 48);
    v44 = *(_QWORD *)(v22 + 48);
    *(_QWORD *)(a1 + 192) = v44;
    v45 = a1 + 192;
    *(_QWORD *)(a1 + 152) = off_1E2521330;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(v22 + 40);
    v46 = *(_QWORD *)(v22 + 56);
    *(_QWORD *)(a1 + 200) = v46;
    if (v46)
    {
      *(_QWORD *)(v44 + 16) = v45;
      *(_QWORD *)(v22 + 40) = v43;
      *v43 = 0;
      *(_QWORD *)(v22 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 184) = v45;
    }
    v50 = *(_QWORD *)(a1 + 432);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(v50 + 64);
    *(_QWORD *)(v50 + 64) = 0;
    *(_QWORD *)(v50 + 72) = 0;
  }
  *(_BYTE *)(a1 + 224) = v24;
  v51 = *(_QWORD *)(a1 + 440);
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      v54 = *(std::__shared_weak_count **)(a1 + 440);
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v55 = *(std::__shared_weak_count **)(a1 + 384);
  if (!v55)
    goto LABEL_55;
  p_shared_owners = (unint64_t *)&v55->__shared_owners_;
  do
    v57 = __ldaxr(p_shared_owners);
  while (__stlxr(v57 - 1, p_shared_owners));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    v58 = *(std::__shared_weak_count **)(a1 + 368);
    if (!v58)
      goto LABEL_59;
  }
  else
  {
LABEL_55:
    v58 = *(std::__shared_weak_count **)(a1 + 368);
    if (!v58)
      goto LABEL_59;
  }
  v59 = (unint64_t *)&v58->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (v60)
  {
LABEL_59:
    if (*(_BYTE *)(a1 + 224))
      goto LABEL_60;
LABEL_73:
    std::runtime_error::runtime_error(&v122, v3);
    v68 = (_QWORD *)(a1 + 192);
    v69 = *(_QWORD *)(a1 + 192);
    v123 = *(_OWORD *)(a1 + 168);
    v70 = *(unsigned int ***)(a1 + 184);
    v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v124 = v70;
    v125 = (unsigned int *)v69;
    v126 = *(unsigned int **)(a1 + 200);
    if (v126)
    {
      *(_QWORD *)(v69 + 16) = &v125;
      *(_QWORD *)(a1 + 184) = v68;
      *v68 = 0;
      *(_QWORD *)(a1 + 200) = 0;
    }
    else
    {
      v124 = &v125;
    }
    v127 = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    v128 = 1;
    std::runtime_error::runtime_error(&v111, &v122);
    v112 = v123;
    v111.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v113 = v124;
    v114 = v125;
    v115 = v126;
    if (v126)
    {
      *((_QWORD *)v125 + 2) = &v114;
      v124 = &v125;
      v125 = 0;
      v126 = 0;
    }
    else
    {
      v113 = &v114;
    }
    v116 = v127;
    v127 = 0uLL;
    std::runtime_error::runtime_error(&v117, &v111);
    v118 = v112;
    v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v79 = v114;
    v119 = v113;
    v120[0] = v114;
    v120[1] = v115;
    if (v115)
    {
      *((_QWORD *)v114 + 2) = v120;
      v79 = 0;
      v113 = &v114;
      v114 = 0;
      v115 = 0;
    }
    else
    {
      v119 = v120;
    }
    v121 = v116;
    v116 = 0uLL;
    v111.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v113, v79);
    MEMORY[0x18D7898AC](&v111);
    std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v117);
    v117.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (*((_QWORD *)&v121 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v119, v120[0]);
    MEMORY[0x18D7898AC](&v117);
    if (v128)
    {
      v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
      if (*((_QWORD *)&v127 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, v125);
      MEMORY[0x18D7898AC](&v122);
    }
    v29 = *(_QWORD *)(a1 + 424);
    goto LABEL_133;
  }
  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
  std::__shared_weak_count::__release_weak(v58);
  if (!*(_BYTE *)(a1 + 224))
    goto LABEL_73;
LABEL_60:
  v61 = *(_DWORD *)(a1 + 272);
  if (!v61)
  {
    v71 = operator new(0x50uLL);
    v71[1] = 0;
    v71[2] = 0;
    *v71 = &off_1E2522818;
    v71[3] = off_1E25205C0;
    v72 = *(_OWORD *)(a1 + 152);
    v3->__vftable = 0;
    v3->__imp_.__imp_ = 0;
    v73 = *(_OWORD *)(a1 + 168);
    v74 = *(_QWORD *)(a1 + 184);
    v75 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *((_OWORD *)v71 + 2) = v72;
    *((_OWORD *)v71 + 3) = v73;
    v71[8] = v74;
    v71[9] = v75;
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
      {
        v76 = *(std::__shared_weak_count **)(a1 + 32);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
      }
      else
      {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
    }
    *(_QWORD *)(a1 + 24) = v71 + 3;
    *(_QWORD *)(a1 + 32) = v71;
    *(_BYTE *)(a1 + 96) = 1;
    *(_BYTE *)(a1 + 104) = 1;
LABEL_148:
    v29 = *(_QWORD *)(a1 + 424);
    if (*(_BYTE *)(a1 + 224))
      goto LABEL_134;
    goto LABEL_149;
  }
  if (v61 != 1)
    goto LABEL_148;
  v62 = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 16);
  *(_QWORD *)(a1 + 448) = v62;
  v63 = (unsigned __int8 *)(v62 + 128);
  do
    v64 = __ldaxr(v63);
  while (__stxr(1u, v63));
  if ((v64 & 1) != 0)
  {
    *(_BYTE *)(v2 + 184) = 1;
    std::mutex::lock((std::mutex *)(*(_QWORD *)(a1 + 448) + 64));
    v65 = *(_QWORD *)(a1 + 448);
    if (*(_QWORD *)(v65 + 152))
      goto LABEL_145;
    v66 = (unsigned __int8 *)(v65 + 128);
    do
      v67 = __ldxr(v66);
    while (__stlxr(1u, v66));
    if ((v67 & 1) != 0)
    {
LABEL_145:
      v107 = operator new(0x18uLL);
      v108 = *(std::mutex **)(a1 + 448);
      v107[1] = v65 + 136;
      v107[2] = a1;
      v109 = *(_QWORD *)(v65 + 136);
      *v107 = v109;
      *(_QWORD *)(v109 + 8) = v107;
      *(_QWORD *)(v65 + 136) = v107;
      ++*(_QWORD *)(v65 + 152);
      std::mutex::unlock(v108 + 1);
      return;
    }
    std::mutex::unlock((std::mutex *)(*(_QWORD *)(a1 + 448) + 64));
  }
LABEL_2:
  v5 = *(_QWORD **)(a1 + 448);
  *(_QWORD *)(a1 + 376) = v5 + 8;
  *(_BYTE *)(a1 + 384) = 1;
  v6 = std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::find<AMSCore::SynchronousBagPolicy>(v5, (unsigned __int8 *)(a1 + 232));
  v7 = v6;
  if (v6)
  {
    if (*(_BYTE *)(a1 + 224))
    {
      v8 = v6[8];
      v9 = *(_OWORD *)(a1 + 152);
      v3->__vftable = 0;
      v3->__imp_.__imp_ = 0;
      v10 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)v2 = v9;
      *(_OWORD *)(v2 + 16) = v10;
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      v11 = *(_QWORD *)(a1 + 184);
      v12 = *(_QWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 312) = v11;
      *(_QWORD *)(a1 + 320) = v12;
      AMSCore::MutableBag::setBagData(v8, (__int128 *)v2);
      v13 = *(uint64_t **)(a1 + 296);
      if (v13)
      {
        v14 = *(uint64_t **)(a1 + 304);
        v15 = *(void **)(a1 + 296);
        if (v14 != v13)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v14, 0);
          while (v14 != v13);
          v15 = *(void **)(v2 + 16);
        }
        *(_QWORD *)(a1 + 304) = v13;
        operator delete(v15);
      }
      v16 = *(std::__shared_weak_count **)(a1 + 288);
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (*(_BYTE *)(a1 + 104))
      {
        if (*(_BYTE *)(a1 + 96))
        {
          v19 = *(std::__shared_weak_count **)(a1 + 32);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
        else
        {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        }
        *(_BYTE *)(a1 + 104) = 0;
      }
      *(_QWORD *)(a1 + 24) = v7[8];
      v47 = v7[9];
      *(_QWORD *)(a1 + 32) = v47;
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      *(_BYTE *)(a1 + 96) = 1;
      *(_BYTE *)(a1 + 104) = 1;
      v29 = *(_QWORD *)(a1 + 424);
      if (!*(_BYTE *)(a1 + 384))
        goto LABEL_133;
LABEL_132:
      AMSCore::AwaitableMutex::unlock(*(std::mutex **)(a1 + 376));
      goto LABEL_133;
    }
LABEL_151:
    __break(1u);
  }
  if (!*(_BYTE *)(a1 + 224))
    goto LABEL_151;
  v25 = (char *)operator new(0xD8uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = &off_1E2522738;
  v26 = (std::runtime_error_vtbl *)std::construct_at[abi:fe180100]<AMSCore::MutableBag,AMSCore::SynchronousBagData,AMSCore::MutableBag*>((uint64_t)(v25 + 24), (uint64_t *)v3);
  v27 = *(uint64_t **)(a1 + 448);
  v111.__vftable = v26;
  v111.__imp_.__imp_ = v25;
  std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::__emplace_unique_key_args<AMSCore::SynchronousBagPolicy,AMSCore::SynchronousBagPolicy&,std::shared_ptr<AMSCore::MutableBag>&>(v27, (unsigned __int8 *)(a1 + 232), (_OWORD *)(a1 + 232), &v111);
  v28 = *(_QWORD *)(a1 + 448);
  v29 = *(_QWORD *)(a1 + 424);
  if (*(_BYTE *)(v28 + 56))
    goto LABEL_123;
  v30 = *(uint64_t **)(a1 + 408);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 400) = v29;
  v31 = *v30;
  v32 = v30[1];
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 16);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = (__int128 *)(a1 + 392);
  v37 = v30[2];
  v36 = v30[3];
  if (v36)
  {
    v38 = (unint64_t *)(v36 + 16);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v110 = *v35;
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(a1 + 400) = 0;
  v40 = (char *)operator new(0x38uLL);
  *(_QWORD *)v40 = &off_1E25217B8;
  *((_QWORD *)v40 + 1) = v31;
  *((_QWORD *)v40 + 2) = v32;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v36;
  *(_OWORD *)(v40 + 40) = v110;
  *((_QWORD *)&v123 + 1) = v40;
  AMSCore::BagDataSource::observeChanged(&v117, v31, &v122);
  v41 = (std::runtime_error *)*((_QWORD *)&v123 + 1);
  if (*((std::runtime_error **)&v123 + 1) == &v122)
  {
    v42 = 4;
    v41 = &v122;
    goto LABEL_104;
  }
  if (*((_QWORD *)&v123 + 1))
  {
    v42 = 5;
LABEL_104:
    (*((void (**)(void))&v41->~runtime_error + v42))();
  }
  v86 = v117.__vftable;
  if (*(_BYTE *)(v28 + 56))
  {
    imp = v117.__imp_.__imp_;
    v117.__vftable = 0;
    v117.__imp_.__imp_ = 0;
    v88 = *(std::__shared_weak_count **)(v28 + 48);
    *(_QWORD *)(v28 + 40) = v86;
    *(_QWORD *)(v28 + 48) = imp;
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
  }
  else
  {
    v91 = v117.__imp_.__imp_;
    *(_QWORD *)(v28 + 40) = v117.__vftable;
    *(_QWORD *)(v28 + 48) = v91;
    v117.__vftable = 0;
    v117.__imp_.__imp_ = 0;
    *(_BYTE *)(v28 + 56) = 1;
  }
  v92 = (std::__shared_weak_count *)v117.__imp_.__imp_;
  if (v117.__imp_.__imp_)
  {
    v93 = (unint64_t *)(v117.__imp_.__imp_ + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = *(std::__shared_weak_count **)(a1 + 400);
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v29 = 0;
LABEL_123:
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      v98 = *(std::__shared_weak_count **)(a1 + 32);
      if (v98)
      {
        v99 = (unint64_t *)&v98->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    }
  }
  *(std::runtime_error *)(a1 + 24) = v111;
  *(_BYTE *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 1;
  if (*(_BYTE *)(a1 + 384))
    goto LABEL_132;
LABEL_133:
  if (*(_BYTE *)(a1 + 224))
  {
LABEL_134:
    v101 = *(uint64_t **)(a1 + 168);
    if (v101)
    {
      v102 = *(uint64_t **)(a1 + 176);
      v103 = *(void **)(a1 + 168);
      if (v102 != v101)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v102, 0);
        while (v102 != v101);
        v103 = *(void **)(a1 + 168);
      }
      *(_QWORD *)(a1 + 176) = v101;
      operator delete(v103);
    }
    v104 = *(std::__shared_weak_count **)(a1 + 160);
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    goto LABEL_150;
  }
LABEL_149:
  ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
LABEL_150:
  *(_QWORD *)(a1 + 456) = v29;
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)a1 = 0;
  AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CBEC6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::BagService::getSynchronousBag(_QWORD *__p)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;

  v3 = *__p;
  v2 = (void (***)(_QWORD))(__p + 19);
  if (v3)
  {
    if (*((_BYTE *)__p + 464))
    {
      v4 = (std::__shared_weak_count *)__p[53];
      if (*((_BYTE *)__p + 224))
      {
        v5 = (uint64_t *)__p[21];
        if (v5)
        {
          v6 = (uint64_t *)__p[22];
          v7 = (void *)__p[21];
          if (v6 != v5)
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v6, 0);
            while (v6 != v5);
            v7 = (void *)__p[21];
          }
          __p[22] = v5;
          operator delete(v7);
        }
        v8 = (std::__shared_weak_count *)__p[20];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
        (**v2)(v2);
      }
    }
    else
    {
      v11 = __p[55];
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          v14 = (std::__shared_weak_count *)__p[55];
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v15 = (std::__shared_weak_count *)__p[48];
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)__p[46];
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v4 = (std::__shared_weak_count *)__p[53];
    }
  }
  else
  {
    v4 = (std::__shared_weak_count *)__p[57];
  }
  v21 = (_QWORD *)__p[18];
  if (v21 == __p + 15)
  {
    v22 = 4;
    v21 = __p + 15;
  }
  else
  {
    if (!v21)
      goto LABEL_37;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_37:
  if (*((_BYTE *)__p + 104))
  {
    if (*((_BYTE *)__p + 96))
    {
      v23 = (std::__shared_weak_count *)__p[4];
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    else
    {
      (*(void (**)(char *))__p[3])((char *)__p + 24);
    }
  }
  do
  {
    v26 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v27)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v4)
  {
    v28 = (unint64_t *)&v4->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(__p);
}

std::runtime_error *std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  std::__shared_weak_count *imp;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::runtime_error_vtbl *p_imp;
  const char *v8;
  std::runtime_error_vtbl *v9;
  std::runtime_error_vtbl *v10;

  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      imp = (std::__shared_weak_count *)this->__imp_.__imp_;
      if (imp)
      {
        p_shared_owners = (unint64_t *)&imp->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  std::runtime_error::runtime_error(this, a2);
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  this[1] = a2[1];
  this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  this[2].__vftable = a2[2].__vftable;
  p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  v8 = a2[2].__imp_.__imp_;
  this[2].__imp_.__imp_ = v8;
  v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
  v10 = a2[3].__vftable;
  this[3].__vftable = v10;
  if (v10)
  {
    *((_QWORD *)v8 + 2) = v9;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    this[2].__vftable = v9;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  LOBYTE(this[4].__imp_.__imp_) = 0;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

uint64_t *std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::find<AMSCore::SynchronousBagPolicy>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v20;
  BOOL v22;
  char v23;
  char v25;
  char *v26;

  v2 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:fe180100]();
  v5 = *a2;
  v6 = *((int *)a2 + 10);
  v26 = &v25;
  v7 = a2 + 16;
  v8 = ((uint64_t (*)(char **, unsigned __int8 *))off_1E253CAD8[v2])(&v26, a2 + 16);
  v9 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v9)
    return 0;
  v10 = (v5 | (2 * v6)) ^ (2 * v8);
  v11 = (uint8x8_t)vcnt_s8(v9);
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    v13 = v10;
    if (v10 >= *(_QWORD *)&v9)
      v13 = v10 % *(_QWORD *)&v9;
  }
  else
  {
    v13 = v10 & (*(_QWORD *)&v9 - 1);
  }
  v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14)
    return 0;
  for (i = *v14; i; i = (uint64_t *)*i)
  {
    v16 = i[1];
    if (v16 == v10)
    {
      if (*((unsigned __int8 *)i + 16) == *a2 && *((_DWORD *)i + 14) == *((_DWORD *)a2 + 10))
      {
        v17 = *((unsigned int *)i + 12);
        v18 = *((_DWORD *)a2 + 8);
        v20 = v18 == (_DWORD)v17 && v18 != -1;
        if ((_DWORD)v17 == -1 || !v20)
        {
          v22 = v18 == -1;
          if ((_DWORD)v17 == -1)
            v23 = v22;
          else
            v23 = v20;
          if ((v23 & 1) != 0)
            return i;
        }
        else
        {
          v26 = &v25;
          if ((((uint64_t (*)(char **, uint64_t *, unsigned __int8 *))off_1E253CAC8[v17])(&v26, i + 4, v7) & 1) != 0)
            return i;
        }
      }
    }
    else
    {
      if (v12 <= 1)
      {
        v16 &= *(_QWORD *)&v9 - 1;
      }
      else if (v16 >= *(_QWORD *)&v9)
      {
        v16 %= *(_QWORD *)&v9;
      }
      if (v16 != v13)
        return 0;
    }
  }
  return i;
}

uint64_t std::construct_at[abi:fe180100]<AMSCore::MutableBag,AMSCore::SynchronousBagData,AMSCore::MutableBag*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *a2;
  v4 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *(_QWORD *)a1 = off_1E2520538;
  v9 = operator new(0x50uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1E2522818;
  v9[3] = off_1E25205C0;
  v9[4] = v3;
  v9[5] = v4;
  v9[6] = v5;
  v9[7] = v6;
  v9[8] = v7;
  v9[9] = v8;
  *(_QWORD *)(a1 + 8) = v9 + 3;
  *(_QWORD *)(a1 + 16) = v9;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(a1 + 24));
  return a1;
}

void sub_18CBECD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v11 = *(std::__shared_weak_count **)(v9 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  AMSCore::SynchronousBagData::~SynchronousBagData((AMSCore::SynchronousBagData *)&a9);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::__emplace_unique_key_args<AMSCore::SynchronousBagPolicy,AMSCore::SynchronousBagPolicy&,std::shared_ptr<AMSCore::MutableBag>&>(uint64_t *a1, unsigned __int8 *a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL4 v23;
  BOOL v25;
  char v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  float v39;
  float v40;
  _BOOL8 v41;
  unint64_t v42;
  unint64_t v43;
  int8x8_t prime;
  void *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  void *v60;
  _OWORD *v61;
  _QWORD v62[2];
  char v63;
  char v64;

  v5 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v5 == -1)
    std::__throw_bad_variant_access[abi:fe180100]();
  v10 = *a2 | (unint64_t)(2 * *((int *)a2 + 10));
  v62[0] = &v64;
  v11 = a2 + 16;
  v12 = v10 ^ (2 * ((uint64_t (*)(_QWORD *, unsigned __int8 *))off_1E253CAD8[v5])(v62, a2 + 16));
  v13 = a1[1];
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v4 = v12;
      if (v12 >= v13)
        v4 = v12 % v13;
    }
    else
    {
      v4 = v12 & (v13 - 1);
    }
    v16 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = v13 - 1;
        v61 = a3;
        do
        {
          v19 = v17[1];
          if (v19 == v12)
          {
            if (*((unsigned __int8 *)v17 + 16) == *a2 && *((_DWORD *)v17 + 14) == *((_DWORD *)a2 + 10))
            {
              v20 = *((unsigned int *)v17 + 12);
              v21 = *((_DWORD *)a2 + 8);
              v23 = v21 == (_DWORD)v20 && v21 != -1;
              if ((_DWORD)v20 == -1 || !v23)
              {
                v25 = v21 == -1;
                if ((_DWORD)v20 == -1)
                  v26 = v25;
                else
                  v26 = v23;
                if ((v26 & 1) != 0)
                  return;
              }
              else
              {
                v62[0] = &v64;
                v27 = v11;
                v28 = v12;
                v29 = v11;
                v30 = a4;
                v31 = v18;
                v32 = ((uint64_t (*)(_QWORD *, uint64_t *, unsigned __int8 *))off_1E253CAC8[v20])(v62, v17 + 4, v27);
                v18 = v31;
                a4 = v30;
                v11 = v29;
                v12 = v28;
                a3 = v61;
                if ((v32 & 1) != 0)
                  return;
              }
            }
          }
          else
          {
            if (v15 <= 1)
            {
              v19 &= v18;
            }
            else if (v19 >= v13)
            {
              v19 %= v13;
            }
            if (v19 != v4)
              break;
          }
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
    }
  }
  v33 = a1 + 2;
  v34 = operator new(0x50uLL);
  v62[0] = v34;
  v62[1] = a1 + 2;
  *v34 = 0;
  v34[1] = v12;
  v35 = a3[1];
  *((_OWORD *)v34 + 1) = *a3;
  *((_OWORD *)v34 + 2) = v35;
  *((_OWORD *)v34 + 3) = a3[2];
  v36 = a4[1];
  v34[8] = *a4;
  v34[9] = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v63 = 1;
  v39 = (float)(unint64_t)(a1[3] + 1);
  v40 = *((float *)a1 + 8);
  if (!v13 || (float)(v40 * (float)v13) < v39)
  {
    v41 = 1;
    if (v13 >= 3)
      v41 = (v13 & (v13 - 1)) != 0;
    v42 = v41 | (2 * v13);
    v43 = vcvtps_u32_f32(v39 / v40);
    if (v42 <= v43)
      prime = (int8x8_t)v43;
    else
      prime = (int8x8_t)v42;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = a1[1];
    if (*(_QWORD *)&prime > v13)
      goto LABEL_53;
    if (*(_QWORD *)&prime < v13)
    {
      v51 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v13 < 3 || (v52 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
      {
        v51 = std::__next_prime(v51);
      }
      else
      {
        v53 = 1 << -(char)__clz(v51 - 1);
        if (v51 >= 2)
          v51 = v53;
      }
      if (*(_QWORD *)&prime <= v51)
        prime = (int8x8_t)v51;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_53:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:fe180100]();
          v45 = operator new(8 * *(_QWORD *)&prime);
          v46 = (void *)*a1;
          *a1 = (uint64_t)v45;
          if (v46)
            operator delete(v46);
          v47 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v47++) = 0;
          while (*(_QWORD *)&prime != v47);
          v48 = (_QWORD *)*v33;
          if (*v33)
          {
            v49 = v48[1];
            v50 = (uint8x8_t)vcnt_s8(prime);
            v50.i16[0] = vaddlv_u8(v50);
            if (v50.u32[0] > 1uLL)
            {
              if (v49 >= *(_QWORD *)&prime)
                v49 %= *(_QWORD *)&prime;
            }
            else
            {
              v49 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v49) = v33;
            v54 = (_QWORD *)*v48;
            if (*v48)
            {
              do
              {
                v56 = v54[1];
                if (v50.u32[0] > 1uLL)
                {
                  if (v56 >= *(_QWORD *)&prime)
                    v56 %= *(_QWORD *)&prime;
                }
                else
                {
                  v56 &= *(_QWORD *)&prime - 1;
                }
                if (v56 != v49)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v56))
                  {
                    *(_QWORD *)(*a1 + 8 * v56) = v48;
                    goto LABEL_73;
                  }
                  *v48 = *v54;
                  v55 = 8 * v56;
                  *v54 = **(_QWORD **)(*a1 + v55);
                  **(_QWORD **)(*a1 + v55) = v54;
                  v54 = v48;
                }
                v56 = v49;
LABEL_73:
                v48 = v54;
                v54 = (_QWORD *)*v54;
                v49 = v56;
              }
              while (v54);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_82;
        }
        v60 = (void *)*a1;
        *a1 = 0;
        if (v60)
          operator delete(v60);
        v13 = 0;
        a1[1] = 0;
      }
    }
LABEL_82:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v4 = v12 % v13;
      else
        v4 = v12;
    }
    else
    {
      v4 = (v13 - 1) & v12;
    }
  }
  v57 = *a1;
  v58 = *(_QWORD **)(*a1 + 8 * v4);
  if (v58)
  {
    *v34 = *v58;
LABEL_95:
    *v58 = v34;
    goto LABEL_96;
  }
  *v34 = *v33;
  *v33 = v34;
  *(_QWORD *)(v57 + 8 * v4) = v33;
  if (*v34)
  {
    v59 = *(_QWORD *)(*v34 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v59 >= v13)
        v59 %= v13;
    }
    else
    {
      v59 &= v13 - 1;
    }
    v58 = (_QWORD *)(*a1 + 8 * v59);
    goto LABEL_95;
  }
LABEL_96:
  ++a1[3];
}

void sub_18CBED2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<AMSCore::Subject<AMSCore::MapUtils::UpdateDiff<std::string>>::ObserverToken>::operator=[abi:fe180100]<AMSCore::Subject<AMSCore::MapUtils::UpdateDiff<std::string>>::ObserverToken,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 16))
  {
    v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v8;
    *a2 = 0;
    a2[1] = 0;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::__libcpp_refstring *p_imp;
  const char **v9;
  _QWORD *v10;
  uint64_t v11;
  const std::runtime_error *v12;
  uint64_t v13;
  std::__shared_weak_count *imp;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v1 = result;
  v28 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v27 = v26;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v26);
      }
      else
      {
        v27 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v27 = 0;
    }
    if (v27)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v18.__vftable = *(std::runtime_error_vtbl **)(v5 + 8);
        p_imp = &v18.__imp_;
        v9 = (const char **)(v5 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v18, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v19 = *(_OWORD *)(v5 + 24);
        v18.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v20 = *(uint64_t **)(v5 + 40);
        v21 = v11;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v11 + 16) = &v21;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v20 = &v21;
        }
        v13 = *(_QWORD *)(v5 + 64);
        v12 = (const std::runtime_error *)(v5 + 64);
        v23 = v13;
        p_imp = (std::__libcpp_refstring *)&v24;
        v9 = &v12->__imp_.__imp_;
        v6 = v12;
      }
      p_imp->__imp_ = *v9;
      v6->__vftable = 0;
      v6->__imp_.__imp_ = 0;
      v25 = v7;
      if (!v27)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v27 + 48))(v27, &v18);
      if (v25)
      {
        imp = (std::__shared_weak_count *)v18.__imp_.__imp_;
        if (v18.__imp_.__imp_)
        {
          v15 = (unint64_t *)(v18.__imp_.__imp_ + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v18.~runtime_error)(&v18);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v27;
    if (v27 == v26)
    {
      v17 = 4;
      result = v26;
    }
    else
    {
      if (!v27)
        return result;
      v17 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
  }
  return result;
}

void sub_18CBED77C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[9];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void AMSCore::SynchronousBagData::~SynchronousBagData(AMSCore::SynchronousBagData *this)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void std::__shared_ptr_emplace<AMSCore::MutableBag>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::MutableBag>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::MutableBag>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 104))(a1 + 24);
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrINS_4IBagEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_4IBagEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrINS_4IBagEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_4IBagEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *AMSCore::BagDataAccessor::getValue(uint64_t a1, void **a2, uint64_t *a3, uint64_t a4)
{
  int v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::runtime_error *v23;
  _DWORD *v24;
  std::runtime_error v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  std::runtime_error v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  std::runtime_error v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;

  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (unint64_t)a2[1];
  AMSCore::getValueByKey((uint64_t)&v31, a3, v9, v10);
  if (v37)
  {
    LOBYTE(v38.__vftable) = 0;
    DWORD2(v39) = -1;
    v11 = LODWORD(v31.__vftable[1].~runtime_error);
    if ((_DWORD)v11 == -1)
    {
      LOBYTE(v40) = 0;
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
    }
    else
    {
      ((void (*)(char *, std::runtime_error *))off_1E253D1E0[v11])(&v44, &v38);
      DWORD2(v39) = v11;
      LOBYTE(v40) = 0;
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
      ((void (*)(std::runtime_error *, uint64_t, std::runtime_error *))off_1E253CAE8[v11])(&v25, a1, &v38);
      *(_DWORD *)(a1 + 24) = v11;
      if (DWORD2(v39) != -1)
      {
        if (!DWORD2(v39))
        {
LABEL_20:
          *(_BYTE *)(a1 + 32) = (_BYTE)v40;
          *(_BYTE *)(a1 + 72) = 1;
          result = (_QWORD *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v25, &v38);
          goto LABEL_43;
        }
        ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[DWORD2(v39)])(&v25, &v38);
      }
    }
    DWORD2(v39) = 0;
    goto LABEL_20;
  }
  if (*((_UNKNOWN ***)&v32 + 1) == &AMSCore::Error::Category::generic(void)::instance && (_DWORD)v32 == 12)
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (!v14)
    {
LABEL_26:
      LODWORD(v25.__vftable) = 204;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v38, (uint64_t)&v31, (unsigned int *)&v25);
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v38);
      *(_OWORD *)(a1 + 16) = v39;
      *(_QWORD *)a1 = off_1E2521330;
      v16 = v41;
      *(_QWORD *)(a1 + 32) = v40;
      *(_QWORD *)(a1 + 40) = v16;
      v17 = a1 + 40;
      v18 = v42;
      *(_QWORD *)(a1 + 48) = v42;
      if (v18)
      {
        *(_QWORD *)(v16 + 16) = v17;
        v40 = &v41;
        v41 = 0;
        v42 = 0;
        v16 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v17;
      }
      *(_OWORD *)(a1 + 56) = v43;
      v43 = 0uLL;
      *(_BYTE *)(a1 + 72) = 0;
      v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, (unsigned int *)v16);
      v23 = &v38;
      goto LABEL_42;
    }
    result = (*(_QWORD *(**)(std::runtime_error *__return_ptr, uint64_t, void **))(*(_QWORD *)v14 + 48))(&v25, v14, a2);
    v15 = DWORD2(v26);
    if ((DWORD2(v26) + 1) < 2)
    {
      if (DWORD2(v26) != -1)
        result = (_QWORD *)((uint64_t (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[DWORD2(v26)])(&v38, &v25);
      if (v37)
      {
        __break(1u);
        return result;
      }
      goto LABEL_26;
    }
    LOBYTE(v38.__vftable) = 0;
    DWORD2(v39) = -1;
    ((void (*)(char *, std::runtime_error *, std::runtime_error *))off_1E253CAE8[DWORD2(v26)])(&v44, &v38, &v25);
    DWORD2(v39) = v15;
    if (DWORD2(v26))
    {
      if (DWORD2(v26) != -1)
      {
        ((void (*)(char *, std::runtime_error *))off_1E253D240[DWORD2(v26)])(&v44, &v25);
        v15 = DWORD2(v39);
        DWORD2(v26) = 0;
        LOBYTE(v40) = 1;
        *(_BYTE *)a1 = 0;
        *(_DWORD *)(a1 + 24) = -1;
        v24 = (_DWORD *)(a1 + 24);
        if (v15 == -1)
          goto LABEL_50;
        goto LABEL_47;
      }
      DWORD2(v26) = 0;
    }
    LOBYTE(v40) = 1;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    v24 = (_DWORD *)(a1 + 24);
LABEL_47:
    ((void (*)(char *, uint64_t, std::runtime_error *))off_1E253CAE8[v15])(&v44, a1, &v38);
    *v24 = v15;
    if (DWORD2(v39) != -1)
    {
      if (!DWORD2(v39))
        goto LABEL_51;
      ((void (*)(char *, std::runtime_error *))off_1E253D240[DWORD2(v39)])(&v44, &v38);
    }
LABEL_50:
    DWORD2(v39) = 0;
LABEL_51:
    *(_BYTE *)(a1 + 32) = (_BYTE)v40;
    *(_BYTE *)(a1 + 72) = 1;
    result = (_QWORD *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v44, &v38);
    if (DWORD2(v26) != -1)
      result = (_QWORD *)((uint64_t (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[DWORD2(v26)])(&v38, &v25);
    goto LABEL_43;
  }
  std::runtime_error::runtime_error(&v38, &v31);
  v39 = v32;
  v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v40 = v33;
  v41 = v34;
  v42 = v35;
  if (v35)
  {
    *(_QWORD *)(v34 + 16) = &v41;
    v33 = &v34;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    v40 = &v41;
  }
  v43 = v36;
  v36 = 0uLL;
  std::runtime_error::runtime_error(&v25, &v38);
  v26 = v39;
  v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v19 = (unsigned int *)v41;
  v27 = v40;
  v28 = v41;
  v29 = v42;
  if (v42)
  {
    *(_QWORD *)(v41 + 16) = &v28;
    v19 = 0;
    v40 = &v41;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v27 = &v28;
  }
  v30 = v43;
  v43 = 0uLL;
  v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, v19);
  MEMORY[0x18D7898AC](&v38);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v25);
  *(_OWORD *)(a1 + 16) = v26;
  *(_QWORD *)a1 = off_1E2521330;
  v20 = v28;
  *(_QWORD *)(a1 + 32) = v27;
  *(_QWORD *)(a1 + 40) = v20;
  v21 = a1 + 40;
  v22 = v29;
  *(_QWORD *)(a1 + 48) = v29;
  if (v22)
  {
    *(_QWORD *)(v20 + 16) = v21;
    v20 = 0;
    v27 = &v28;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v21;
  }
  *(_OWORD *)(a1 + 56) = v30;
  v30 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, (unsigned int *)v20);
  v23 = &v25;
LABEL_42:
  result = (_QWORD *)MEMORY[0x18D7898AC](v23);
LABEL_43:
  if (!v37)
    return (_QWORD *)((uint64_t (*)(std::runtime_error *))v31.~runtime_error)(&v31);
  return result;
}

void sub_18CBEDECC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,int a32)
{
  if (a32 != -1)
    ((void (*)(char *, char *))off_1E253D240[a32])(&a10, &a29);
  a32 = -1;
  __clang_call_terminate(a1);
}

uint64_t AMSCore::StringUtils::join<char [22]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CBEE054(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error v15[2];
  unsigned int **v16;
  unsigned int *v17;
  __int128 v19;
  std::runtime_error v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  std::runtime_error::runtime_error(v15, (const std::runtime_error *)a2);
  v6 = (_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  v15[1] = *(std::runtime_error *)(a2 + 16);
  v15[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v16 = *(unsigned int ***)(a2 + 32);
  v17 = (unsigned int *)v7;
  if (*(_QWORD *)(a2 + 48))
  {
    *(_QWORD *)(v7 + 16) = &v17;
    *(_QWORD *)(a2 + 32) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v16 = &v17;
  }
  v19 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  AMSCore::Error::Error<>((uint64_t)&v20, (uint64_t)v15, *a3, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v20);
  *(_OWORD *)(a1 + 16) = v21;
  *(_QWORD *)a1 = off_1E2521330;
  v8 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a1 + 40;
  v10 = v24;
  *(_QWORD *)(a1 + 48) = v24;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_OWORD *)(a1 + 56) = v25;
  v25 = 0uLL;
  v20.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v8);
  MEMORY[0x18D7898AC](&v20);
  v15[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v17);
  return MEMORY[0x18D7898AC](v15);
}

void sub_18CBEE1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CBEE208()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t AMSCore::Error::Error<>(uint64_t a1, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  uint64_t v8;
  std::runtime_error *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v13;
  _QWORD *v14;
  std::string __what_arg;
  std::error_code v17;

  AMSCore::StringUtils::join<>(&__what_arg);
  *(_QWORD *)&v17.__val_ = a3;
  v17.__cat_ = a4;
  std::system_error::system_error((std::system_error *)a1, v17, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1E2521330;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = operator new();
  v9 = std::runtime_error::runtime_error((std::runtime_error *)v8, (const std::runtime_error *)a2);
  v10 = (_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 40);
  v9[1] = *(std::runtime_error *)(a2 + 16);
  v9->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v9[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v9[2].__imp_.__imp_ = (const char *)v11;
  p_imp = &v9[2].__imp_;
  v13 = *(std::runtime_error_vtbl **)(a2 + 48);
  v9[3].__vftable = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = p_imp;
    *(_QWORD *)(a2 + 32) = v10;
    *v10 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(v8 + 32) = p_imp;
  }
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E2523B58;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v8;
  *(_QWORD *)(a1 + 64) = v14;
  return a1;
}

void sub_18CBEE344(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x18D7898AC](v1);
  _Unwind_Resume(a1);
}

void sub_18CBEE37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<>(std::string *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[8];
  void *__p[2];
  __int128 v13;
  int v14;
  uint64_t v15[19];

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v15[0] = MEMORY[0x1E0DE4FE0] + 64;
  v10 = v5;
  *(_QWORD *)((char *)&v11[-1] + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v11[-1] + *(_QWORD *)(v10 - 24));
  std::ios_base::init(v7, v11);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v10 = v2 + 24;
  v15[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x1E0DE4FB8] + 16;
  v11[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v14 = 16;
  std::stringbuf::str[abi:fe180100]((uint64_t)v11, a1);
  v10 = *v4;
  *(_QWORD *)((char *)&v11[-1] + *(_QWORD *)(v10 - 24)) = v4[3];
  v11[0] = v8;
  if (SBYTE7(v13) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v15);
}

void sub_18CBEE4B8(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<AMSCore::Error  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Error  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Error  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore5ErrorEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore5ErrorEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore5ErrorEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore5ErrorEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[24]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [24]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CBEE67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [24]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CBEE7DC(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::BagDataAccessor::getMapValue(uint64_t a1, void **a2, uint64_t *a3, uint64_t a4)
{
  std::runtime_error_vtbl *v5;
  void (__cdecl *v6)(std::runtime_error *__hidden);
  std::runtime_error *what;
  BOOL v8;
  unsigned int *v9;
  char v10;
  char *imp;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::system_error *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error v25;
  __int128 v26;
  unsigned int **v27;
  unsigned int *v28;
  uint64_t v29;
  __int128 v30;
  std::system_error v31;
  unsigned int **v32;
  unsigned int *v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  std::runtime_error v37;
  std::error_code v38;
  unsigned int **v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  _BYTE __what_arg[32];
  unsigned int **v45;
  unsigned int *v46;
  uint64_t v47;
  __int128 v48;
  std::error_code v49;

  AMSCore::BagDataAccessor::getValue((uint64_t)&v37, a2, a3, a4);
  if (v43)
  {
    if (LODWORD(v38.__cat_) == 8)
    {
      v31.__imp_.__imp_ = 0;
      *(_QWORD *)&v31.__ec_.__val_ = 0;
      v31.__vftable = (std::system_error_vtbl *)&v31.__imp_;
      v5 = v37.__vftable;
      if ((std::__libcpp_refstring *)v37.__vftable != &v37.__imp_)
      {
        do
        {
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v31, (uint64_t *)&v31.__imp_, (const void **)&v5[1].~runtime_error_0, (__int128 *)&v5[1].~runtime_error_0);
          v6 = v5->~runtime_error_0;
          if (v6)
          {
            do
            {
              what = (std::runtime_error *)v6;
              v6 = *(void (__cdecl **)(std::runtime_error *__hidden))v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              what = (std::runtime_error *)v5->what;
              v8 = what->__vftable == v5;
              v5 = (std::runtime_error_vtbl *)what;
            }
            while (!v8);
          }
          v5 = (std::runtime_error_vtbl *)what;
        }
        while (what != (std::runtime_error *)&v37.__imp_);
        if (!v43)
        {
          __break(1u);
          return;
        }
      }
      v10 = (char)v39;
      LOBYTE(v31.__ec_.__cat_) = (_BYTE)v39;
      imp = (char *)v31.__imp_.__imp_;
      *(_QWORD *)a1 = v31.__vftable;
      *(_QWORD *)(a1 + 8) = imp;
      v12 = a1 + 8;
      v13 = *(_QWORD *)&v31.__ec_.__val_;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)&v31.__ec_.__val_;
      if (v13)
      {
        *((_QWORD *)imp + 2) = v12;
        v31.__vftable = (std::system_error_vtbl *)&v31.__imp_;
        v31.__imp_.__imp_ = 0;
        *(_QWORD *)&v31.__ec_.__val_ = 0;
        imp = 0;
      }
      else
      {
        *(_QWORD *)a1 = v12;
      }
      *(_BYTE *)(a1 + 24) = v10;
      *(_BYTE *)(a1 + 72) = 1;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, (unsigned int *)imp);
      if (!v43)
        goto LABEL_49;
      goto LABEL_45;
    }
    AMSCore::StringUtils::join<char [23]>((std::string *)__what_arg, "Bag type is not a map.");
    v49.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
    *(_QWORD *)&v49.__val_ = 202;
    std::system_error::system_error(&v31, v49, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    v33 = 0;
    v34 = 0;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v32 = &v33;
    v35 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v31);
    *(std::error_code *)&__what_arg[16] = v31.__ec_;
    v9 = v33;
    *(_QWORD *)__what_arg = off_1E2521330;
    v45 = v32;
    v46 = v33;
    v47 = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = &v46;
      v9 = 0;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v45 = &v46;
    }
    v48 = v35;
    v35 = 0uLL;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v9);
    MEMORY[0x18D7898AC](&v31);
    std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)__what_arg);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&__what_arg[16];
    *(_QWORD *)a1 = off_1E2521330;
    v22 = v46;
    *(_QWORD *)(a1 + 32) = v45;
    *(_QWORD *)(a1 + 40) = v22;
    v23 = a1 + 40;
    v24 = v47;
    *(_QWORD *)(a1 + 48) = v47;
    if (v24)
    {
      *((_QWORD *)v22 + 2) = v23;
      v22 = 0;
      v45 = &v46;
      v46 = 0;
      v47 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v23;
    }
    *(_OWORD *)(a1 + 56) = v48;
    v48 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    *(_QWORD *)__what_arg = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v45, v22);
    v21 = (std::system_error *)__what_arg;
    goto LABEL_43;
  }
  std::runtime_error::runtime_error(&v31, &v37);
  v31.__ec_ = v38;
  v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v32 = v39;
  v33 = (unsigned int *)v40;
  v34 = v41;
  if (v41)
  {
    *(_QWORD *)(v40 + 16) = &v33;
    v39 = (unsigned int **)&v40;
    v40 = 0;
    v41 = 0;
  }
  else
  {
    v32 = &v33;
  }
  v35 = v42;
  v42 = 0uLL;
  v36 = 1;
  std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v31);
  *(std::error_code *)&__what_arg[16] = v31.__ec_;
  *(_QWORD *)__what_arg = off_1E2521330;
  v45 = v32;
  v46 = v33;
  v47 = v34;
  if (v34)
  {
    *((_QWORD *)v33 + 2) = &v46;
    v32 = &v33;
    v33 = 0;
    v34 = 0;
  }
  else
  {
    v45 = &v46;
  }
  v48 = v35;
  v35 = 0uLL;
  std::runtime_error::runtime_error(&v25, (const std::runtime_error *)__what_arg);
  v26 = *(_OWORD *)&__what_arg[16];
  v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v14 = v46;
  v27 = v45;
  v28 = v46;
  v29 = v47;
  if (v47)
  {
    *((_QWORD *)v46 + 2) = &v28;
    v14 = 0;
    v45 = &v46;
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v27 = &v28;
  }
  v30 = v48;
  v48 = 0uLL;
  *(_QWORD *)__what_arg = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v45, v14);
  MEMORY[0x18D7898AC](__what_arg);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v25);
  *(_OWORD *)(a1 + 16) = v26;
  *(_QWORD *)a1 = off_1E2521330;
  v15 = v28;
  *(_QWORD *)(a1 + 32) = v27;
  *(_QWORD *)(a1 + 40) = v15;
  v16 = a1 + 40;
  v17 = v29;
  *(_QWORD *)(a1 + 48) = v29;
  if (v17)
  {
    *((_QWORD *)v15 + 2) = v16;
    v15 = 0;
    v27 = &v28;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v16;
  }
  *(_OWORD *)(a1 + 56) = v30;
  v30 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v15);
  MEMORY[0x18D7898AC](&v25);
  if (v36)
  {
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
    v21 = &v31;
LABEL_43:
    MEMORY[0x18D7898AC](v21);
  }
  if (!v43)
  {
LABEL_49:
    ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
    return;
  }
LABEL_45:
  if (LODWORD(v38.__cat_) != -1)
    ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[LODWORD(v38.__cat_)])(&v31, &v37);
}

void sub_18CBEECF4(void *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
  {
    operator delete(*(void **)(v1 - 160));
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::StringUtils::join<char [23]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CBEEE70(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::BagDataAccessor::getStringValue(uint64_t a1, void **a2, uint64_t *a3, uint64_t a4)
{
  std::runtime_error *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  std::runtime_error v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::runtime_error v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  std::runtime_error v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  std::runtime_error v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  AMSCore::BagDataAccessor::getValue((uint64_t)&v30, a2, a3, a4);
  if (v36)
  {
    if (DWORD2(v31) == 5)
      v5 = &v30;
    else
      v5 = 0;
    if (DWORD2(v31) != 5)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[24]>((uint64_t)&v23, 0xCAu, "Bag type is not string.");
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v23);
      *(_OWORD *)(a1 + 16) = v24;
      *(_QWORD *)a1 = off_1E2521330;
      v6 = v26;
      *(_QWORD *)(a1 + 32) = v25;
      *(_QWORD *)(a1 + 40) = v6;
      v7 = a1 + 40;
      v8 = v27;
      *(_QWORD *)(a1 + 48) = v27;
      if (v8)
      {
        *(_QWORD *)(v6 + 16) = v7;
        v25 = &v26;
        v26 = 0;
        v27 = 0;
        v6 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v7;
      }
      *(_OWORD *)(a1 + 56) = v28;
      v28 = 0uLL;
      *(_BYTE *)(a1 + 72) = 0;
      v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      goto LABEL_37;
    }
    if (SBYTE7(v31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v23, (const std::string::value_type *)v5->__vftable, (std::string::size_type)v30.__imp_.__imp_);
      if (!v36)
      {
        __break(1u);
        return;
      }
    }
    else
    {
      v23 = *v5;
      *(_QWORD *)&v24 = v5[1].__vftable;
    }
    v16 = (char)v32;
    *(std::runtime_error *)a1 = v23;
    *(_QWORD *)(a1 + 16) = v24;
    *(_BYTE *)(a1 + 24) = v16;
    *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v23, &v30);
    v24 = v31;
    v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v25 = v32;
    v26 = v33;
    v27 = v34;
    if (v34)
    {
      *(_QWORD *)(v33 + 16) = &v26;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v25 = &v26;
    }
    v28 = v35;
    v35 = 0uLL;
    v29 = 1;
    std::runtime_error::runtime_error(&v37, &v23);
    v38 = v24;
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v39 = v25;
    v40 = v26;
    v41 = v27;
    if (v27)
    {
      *(_QWORD *)(v26 + 16) = &v40;
      v25 = &v26;
      v26 = 0;
      v27 = 0;
    }
    else
    {
      v39 = &v40;
    }
    v42 = v28;
    v28 = 0uLL;
    std::runtime_error::runtime_error(&v17, &v37);
    v18 = v38;
    v17.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v9 = (unsigned int *)v40;
    v19 = v39;
    v20 = v40;
    v21 = v41;
    if (v41)
    {
      *(_QWORD *)(v40 + 16) = &v20;
      v9 = 0;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v19 = &v20;
    }
    v22 = v42;
    v42 = 0uLL;
    v37.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v9);
    MEMORY[0x18D7898AC](&v37);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v17);
    *(_OWORD *)(a1 + 16) = v18;
    *(_QWORD *)a1 = off_1E2521330;
    v10 = v20;
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v10;
    v11 = a1 + 40;
    v12 = v21;
    *(_QWORD *)(a1 + 48) = v21;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v10 = 0;
      v19 = &v20;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v11;
    }
    *(_OWORD *)(a1 + 56) = v22;
    v22 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v17.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v17);
    if (v29)
    {
      v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v6 = v26;
LABEL_37:
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v6);
      MEMORY[0x18D7898AC](&v23);
      if (!v36)
        goto LABEL_38;
      goto LABEL_33;
    }
  }
  if (!v36)
  {
LABEL_38:
    ((void (*)(std::runtime_error *))v30.~runtime_error)(&v30);
    return;
  }
LABEL_33:
  if (DWORD2(v31) != -1)
    ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[DWORD2(v31)])(&v23, &v30);
}

_QWORD *std::vector<AMSCore::Any>::vector[abi:fe180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v10;
  _BYTE v11[2];

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >> 59)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v5 = 32 * a3;
    v6 = (char *)operator new(32 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v10 = v6;
    v7 = v6;
    do
    {
      *v7 = 0;
      *((_DWORD *)v7 + 6) = -1;
      v8 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(_BYTE *, char *, uint64_t))off_1E253D1E0[v8])(v11, v7, a2);
        *((_DWORD *)v7 + 6) = v8;
        v7 = v10;
      }
      a2 += 32;
      v7 += 32;
      v10 = v7;
      v5 -= 32;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_18CBEF354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void **v19;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  uint64_t v25;

  v21 = (char *)*v19;
  if (*v19)
  {
    v22 = (char *)v19[1];
    v23 = *v19;
    if (v22 != v21)
    {
      do
      {
        v24 = v22 - 32;
        v25 = *((unsigned int *)v22 - 2);
        if ((_DWORD)v25 != -1)
          ((void (*)(char *, char *))off_1E253D240[v25])(&a10, v22 - 32);
        *((_DWORD *)v22 - 2) = -1;
        v22 -= 32;
      }
      while (v24 != v21);
      v23 = *v19;
    }
    v19[1] = v21;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::URL,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 152))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CBEF680(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CBEF68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

uint64_t std::optional<AMSCore::Error>::~optional(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)a1 = off_1E2521330;
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, *(unsigned int **)(a1 + 40));
    MEMORY[0x18D7898AC](a1);
  }
  return a1;
}

uint64_t AMSCore::IBag::getIsExpired(AMSCore::IBag *this)
{
  void (**v2)(AMSCore::ClockProvider *__hidden);

  v2 = &off_1E2520798;
  return (*(uint64_t (**)(AMSCore::IBag *, void (***)(AMSCore::ClockProvider *__hidden)))(*(_QWORD *)this + 16))(this, &v2);
}

void AMSCore::IBag::getURLValueForKey(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, std::runtime_error *a4@<X8>)
{
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  void (***v16)(uint64_t);
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  std::runtime_error *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  const std::runtime_error *v26;
  char v27;
  const char **v28;
  std::__libcpp_refstring *p_imp;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  const std::runtime_error *v34;
  std::runtime_error_vtbl *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  const std::runtime_error *v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int **v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  void *v87;
  char v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  char *v92;
  std::runtime_error *v93;
  uint64_t v94;
  uint64_t **v95;
  std::runtime_error v96;
  __int128 v97;
  unsigned int **v98;
  unsigned int *v99;
  uint64_t v100;
  __int128 v101;
  char v102;
  int v103;
  std::runtime_error v104;
  __int128 v105;
  unsigned int **v106;
  unsigned int *v107;
  uint64_t v108;
  __int128 v109;
  std::runtime_error v110;
  __int128 v111;
  unsigned int **v112;
  unsigned int *v113;
  uint64_t v114;
  __int128 v115;

  v8 = (char *)operator new(0x210uLL);
  v9 = (unint64_t)v8;
  *(_QWORD *)v8 = AMSCore::IBag::getURLValueForKey;
  *((_QWORD *)v8 + 1) = AMSCore::IBag::getURLValueForKey;
  v10 = v8 + 312;
  v95 = (uint64_t **)(v8 + 416);
  v11 = v8 + 440;
  v12 = v8 + 456;
  v93 = (std::runtime_error *)(v8 + 232);
  v94 = (uint64_t)(v8 + 16);
  v92 = v8 + 392;
  *(_OWORD *)(v8 + 392) = *(_OWORD *)a2;
  *((_QWORD *)v8 + 51) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v14 = *a3;
  v13 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  *((_QWORD *)v8 + 59) = a1;
  *((_QWORD *)v8 + 60) = v13;
  do
    v15 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v15 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v8[24] = 0;
  v16 = (void (***)(uint64_t))(v8 + 24);
  v8[184] = 0;
  *((_QWORD *)v8 + 24) = 0;
  *((_QWORD *)v8 + 28) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v96, v94);
  *a4 = v96;
  *v95 = 0;
  v95[1] = 0;
  v95[2] = 0;
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v10);
  v17 = *(_QWORD *)(v9 + 312);
  *(_QWORD *)(v9 + 440) = v14;
  *(_QWORD *)(v9 + 448) = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 40))(v17, v11);
  v20 = *((_OWORD *)v10 + 9);
  *((_OWORD *)v10 + 11) = v20;
  *v12 = 0;
  v12[1] = 0;
  v21 = atomic_load((unint64_t *)(v20 + 96));
  v22 = v93;
  if (v21)
    goto LABEL_10;
  v10[208] = 0;
  v23 = (unint64_t *)(*(_QWORD *)(v9 + 488) + 96);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v9, v23));
  if (v24)
  {
LABEL_10:
    v25 = *((_QWORD *)v10 + 22);
    if (!*(_BYTE *)(v25 + 88))
      goto LABEL_124;
    v26 = (const std::runtime_error *)(v25 + 8);
    v27 = *(_BYTE *)(v25 + 80);
    if (v27)
    {
      *(_QWORD *)(v9 + 232) = *(_QWORD *)(v25 + 8);
      v28 = (const char **)(v9 + 240);
      p_imp = (std::__libcpp_refstring *)(v25 + 16);
    }
    else
    {
      std::runtime_error::runtime_error(v93, v26);
      *(_OWORD *)(v9 + 248) = *(_OWORD *)(v25 + 24);
      *(_QWORD *)(v9 + 232) = off_1E2521330;
      v30 = (_QWORD *)(v25 + 48);
      v31 = *(_QWORD *)(v25 + 48);
      v32 = v9 + 272;
      *(_QWORD *)(v9 + 264) = *(_QWORD *)(v25 + 40);
      *(_QWORD *)(v9 + 272) = v31;
      v33 = *(_QWORD *)(v25 + 56);
      *(_QWORD *)(v9 + 280) = v33;
      if (v33)
      {
        *(_QWORD *)(v31 + 16) = v32;
        *(_QWORD *)(v25 + 40) = v30;
        *v30 = 0;
        *(_QWORD *)(v25 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 264) = v32;
      }
      v34 = *(const std::runtime_error **)(v9 + 488);
      v35 = v34[4].__vftable;
      v26 = v34 + 4;
      *(_QWORD *)(v9 + 288) = v35;
      v28 = (const char **)(v9 + 296);
      p_imp = &v26->__imp_;
    }
    *v28 = p_imp->__imp_;
    v26->__vftable = 0;
    v26->__imp_.__imp_ = 0;
    *(_BYTE *)(v9 + 304) = v27;
    v36 = *(_QWORD *)(v9 + 496);
    if (v36)
    {
      v37 = (unint64_t *)(v36 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        v39 = *(std::__shared_weak_count **)(v9 + 496);
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v40 = *(std::__shared_weak_count **)(v9 + 464);
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = *(std::__shared_weak_count **)(v9 + 448);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = *(std::__shared_weak_count **)(v9 + 320);
    if (!v46)
      goto LABEL_127;
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if (!*(_BYTE *)(v9 + 304))
        goto LABEL_67;
    }
    else
    {
LABEL_127:
      if (!*(_BYTE *)(v9 + 304))
        goto LABEL_67;
    }
    if (!v93->__vftable)
      goto LABEL_67;
    (*((void (**)(std::runtime_error_vtbl *))v93->~runtime_error + 5))(v93->__vftable);
    v49 = *((_OWORD *)v10 + 9);
    *((_OWORD *)v10 + 12) = v49;
    *v12 = 0;
    v12[1] = 0;
    if (!atomic_load((unint64_t *)(v49 + 96)))
    {
      v10[208] = 1;
      v51 = (unint64_t *)(*(_QWORD *)(v9 + 504) + 96);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v9, v51));
      if (!v52)
        return;
    }
    v53 = *((_QWORD *)v10 + 24);
    if (!*(_BYTE *)(v53 + 88))
    {
LABEL_124:
      __break(1u);
      return;
    }
    v54 = (const std::runtime_error *)(v53 + 8);
    v55 = *(_BYTE *)(v53 + 80);
    if (v55)
    {
      *(_OWORD *)v10 = *(_OWORD *)(v53 + 8);
      *(_QWORD *)(v9 + 328) = *(_QWORD *)(v53 + 24);
      *(_QWORD *)(v53 + 16) = 0;
      *(_QWORD *)(v53 + 24) = 0;
      v54->__vftable = 0;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)v10, v54);
      *(_OWORD *)(v9 + 328) = *(_OWORD *)(v53 + 24);
      *(_QWORD *)(v9 + 312) = off_1E2521330;
      v56 = (_QWORD *)(v53 + 48);
      v57 = *(_QWORD *)(v53 + 48);
      v58 = v9 + 352;
      *(_QWORD *)(v9 + 344) = *(_QWORD *)(v53 + 40);
      *(_QWORD *)(v9 + 352) = v57;
      v59 = *(_QWORD *)(v53 + 56);
      *(_QWORD *)(v9 + 360) = v59;
      if (v59)
      {
        *(_QWORD *)(v57 + 16) = v58;
        *(_QWORD *)(v53 + 40) = v56;
        *v56 = 0;
        *(_QWORD *)(v53 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v9 + 344) = v58;
      }
      v60 = *(_QWORD *)(v9 + 504);
      *(_OWORD *)(v9 + 368) = *(_OWORD *)(v60 + 64);
      *(_QWORD *)(v60 + 64) = 0;
      *(_QWORD *)(v60 + 72) = 0;
    }
    *(_BYTE *)(v9 + 384) = v55;
    v61 = *(_QWORD *)(v9 + 512);
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        v64 = *(std::__shared_weak_count **)(v9 + 512);
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v65 = *(std::__shared_weak_count **)(v9 + 464);
    if (!v65)
      goto LABEL_60;
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
      v68 = *(unsigned __int8 *)(v9 + 384);
      if (*(_BYTE *)(v9 + 384))
        goto LABEL_61;
    }
    else
    {
LABEL_60:
      v68 = *(unsigned __int8 *)(v9 + 384);
      if (*(_BYTE *)(v9 + 384))
      {
LABEL_61:
        v69 = *v95;
        if (*v95)
        {
          v70 = *(uint64_t **)(v9 + 424);
          v71 = *v95;
          if (v70 != v69)
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v70, 0);
            while (v70 != v69);
            v71 = *v95;
          }
          *(_QWORD *)(v9 + 424) = v69;
          operator delete(v71);
        }
        *(_OWORD *)(v9 + 416) = *(_OWORD *)v10;
        *(_QWORD *)(v9 + 432) = *(_QWORD *)(v9 + 328);
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = 0;
        *(_QWORD *)v10 = 0;
        goto LABEL_67;
      }
    }
    std::runtime_error::runtime_error(&v96, (const std::runtime_error *)v10);
    v97 = *(_OWORD *)(v9 + 328);
    v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v76 = *(_QWORD *)(v9 + 352);
    v98 = *(unsigned int ***)(v9 + 344);
    v99 = (unsigned int *)v76;
    v100 = *(_QWORD *)(v9 + 360);
    if (v100)
    {
      *(_QWORD *)(v76 + 16) = &v99;
      *(_QWORD *)(v9 + 344) = v9 + 352;
      *(_QWORD *)(v9 + 352) = 0;
      *(_QWORD *)(v9 + 360) = 0;
    }
    else
    {
      v98 = &v99;
    }
    v101 = *(_OWORD *)(v9 + 368);
    *(_QWORD *)(v9 + 368) = 0;
    *(_QWORD *)(v9 + 376) = 0;
    v102 = 1;
    std::runtime_error::runtime_error(&v110, &v96);
    v111 = v97;
    v110.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v112 = v98;
    v113 = v99;
    v114 = v100;
    if (v100)
    {
      *((_QWORD *)v99 + 2) = &v113;
      v98 = &v99;
      v99 = 0;
      v100 = 0;
    }
    else
    {
      v112 = &v113;
    }
    v115 = v101;
    v101 = 0uLL;
    std::runtime_error::runtime_error(&v104, &v110);
    v105 = v111;
    v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v77 = v113;
    v106 = v112;
    v107 = v113;
    v108 = v114;
    if (v114)
    {
      *((_QWORD *)v113 + 2) = &v107;
      v77 = 0;
      v112 = &v113;
      v113 = 0;
      v114 = 0;
    }
    else
    {
      v106 = &v107;
    }
    v109 = v115;
    v115 = 0uLL;
    v110.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112, v77);
    MEMORY[0x18D7898AC](&v110);
    v22 = v93;
    if (*(_BYTE *)(v9 + 184))
    {
      if (*(_BYTE *)(v9 + 176))
        AMSCore::URL::~URL((AMSCore::URL *)(v9 + 24));
      else
        (**v16)(v9 + 24);
      *(_BYTE *)(v9 + 184) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v9 + 24), &v104);
    v79 = v106;
    v78 = v107;
    *(_QWORD *)(v9 + 64) = v107;
    v80 = v9 + 64;
    *(_OWORD *)(v9 + 40) = v105;
    *(_QWORD *)(v9 + 24) = off_1E2521330;
    *(_QWORD *)(v9 + 56) = v79;
    v81 = v108;
    *(_QWORD *)(v9 + 72) = v108;
    if (v81)
    {
      *((_QWORD *)v78 + 2) = v80;
      v78 = 0;
      v106 = &v107;
      v107 = 0;
      v108 = 0;
    }
    else
    {
      *(_QWORD *)(v9 + 56) = v80;
    }
    *(_OWORD *)(v9 + 80) = v109;
    v109 = 0uLL;
    *(_BYTE *)(v9 + 176) = 0;
    *(_BYTE *)(v9 + 184) = 1;
    v104.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v106, v78);
    MEMORY[0x18D7898AC](&v104);
    if (v102)
    {
      v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v99);
      MEMORY[0x18D7898AC](&v96);
    }
    v85 = *(uint64_t **)(v9 + 312);
    if (*(_BYTE *)(v9 + 384))
    {
      if (v85)
      {
        v86 = *(uint64_t **)(v9 + 320);
        v87 = *(void **)(v9 + 312);
        if (v86 != v85)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v86, 0);
          while (v86 != v85);
          v87 = *(void **)v10;
        }
        *(_QWORD *)(v9 + 320) = v85;
        operator delete(v87);
        if (v68)
        {
LABEL_67:
          v72 = 0;
          if (*(_BYTE *)(v9 + 304))
          {
LABEL_68:
            v73 = *(std::__shared_weak_count **)(v9 + 240);
            if (v73)
            {
              v74 = (unint64_t *)&v73->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            goto LABEL_108;
          }
LABEL_107:
          ((void (*)(std::runtime_error *))v22->~runtime_error)(v22);
LABEL_108:
          if (!v72)
          {
            (*(void (**)(std::runtime_error *__return_ptr, _QWORD, char *, uint64_t **))(**(_QWORD **)(v9 + 472)
                                                                                                 + 88))(&v96, *(_QWORD *)(v9 + 472), v92, v95);
            if (*(_BYTE *)(v9 + 184))
            {
              if (*(_BYTE *)(v9 + 176))
                AMSCore::URL::~URL((AMSCore::URL *)(v9 + 24));
              else
                (**v16)(v9 + 24);
              *(_BYTE *)(v9 + 184) = 0;
            }
            v88 = v103;
            std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>((std::runtime_error *)(v9 + 24), v103, &v96);
            *(_BYTE *)(v9 + 176) = v88;
            *(_BYTE *)(v9 + 184) = 1;
            if ((_BYTE)v103)
              AMSCore::URL::~URL((AMSCore::URL *)&v96);
            else
              ((void (*)(std::runtime_error *))v96.~runtime_error)(&v96);
          }
          v89 = *v95;
          if (*v95)
          {
            v90 = *(uint64_t **)(v9 + 424);
            v91 = *v95;
            if (v90 != v89)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v90, 0);
              while (v90 != v89);
              v91 = *v95;
            }
            *(_QWORD *)(v9 + 424) = v89;
            operator delete(v91);
          }
          *(_QWORD *)(v9 + 232) = v94;
          *(_QWORD *)v9 = 0;
          AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::Awaiter::await_suspend(v22);
          return;
        }
      }
    }
    else
    {
      ((void (*)(char *))*v85)(v10);
    }
    v72 = 3;
    if (*(_BYTE *)(v9 + 304))
      goto LABEL_68;
    goto LABEL_107;
  }
}

void AMSCore::IBag::getURLValueForKey(unint64_t a1)
{
  unint64_t v2;
  _BYTE *v3;
  uint64_t **v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  const std::runtime_error *v10;
  char v11;
  const char **v12;
  std::__libcpp_refstring *p_imp;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int **v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  void *v45;
  int v46;
  unint64_t v47;
  const std::runtime_error *v48;
  std::runtime_error_vtbl *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  AMSCore::URL *v70;
  char v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  std::runtime_error v75;
  __int128 v76;
  unsigned int **v77;
  unsigned int *v78;
  uint64_t v79;
  __int128 v80;
  std::runtime_error v81;
  __int128 v82;
  unsigned int **v83;
  unsigned int *v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  int v88;
  std::runtime_error v89;
  __int128 v90;
  unsigned int **v91;
  unsigned int *v92;
  uint64_t v93;
  __int128 v94;

  v2 = a1 + 312;
  v3 = (_BYTE *)(a1 + 232);
  v4 = (uint64_t **)(a1 + 416);
  if (!*(_BYTE *)(a1 + 520))
  {
    v9 = *(_QWORD *)(a1 + 488);
    if (!*(_BYTE *)(v9 + 88))
      goto LABEL_117;
    v10 = (const std::runtime_error *)(v9 + 8);
    v11 = *(_BYTE *)(v9 + 80);
    if (v11)
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(v9 + 8);
      v12 = (const char **)(a1 + 240);
      p_imp = (std::__libcpp_refstring *)(v9 + 16);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 232), v10);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(v9 + 24);
      *(_QWORD *)(a1 + 232) = off_1E2521330;
      v18 = (_QWORD *)(v9 + 48);
      v19 = *(_QWORD *)(v9 + 48);
      v20 = a1 + 272;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(a1 + 272) = v19;
      v21 = *(_QWORD *)(v9 + 56);
      *(_QWORD *)(a1 + 280) = v21;
      if (v21)
      {
        *(_QWORD *)(v19 + 16) = v20;
        *(_QWORD *)(v9 + 40) = v18;
        *v18 = 0;
        *(_QWORD *)(v9 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 264) = v20;
      }
      v48 = *(const std::runtime_error **)(a1 + 488);
      v49 = v48[4].__vftable;
      v10 = v48 + 4;
      *(_QWORD *)(a1 + 288) = v49;
      v12 = (const char **)(a1 + 296);
      p_imp = &v10->__imp_;
    }
    *v12 = p_imp->__imp_;
    v10->__vftable = 0;
    v10->__imp_.__imp_ = 0;
    *(_BYTE *)(a1 + 304) = v11;
    v50 = *(_QWORD *)(a1 + 496);
    if (v50)
    {
      v51 = (unint64_t *)(v50 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        v53 = *(std::__shared_weak_count **)(a1 + 496);
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v54 = *(std::__shared_weak_count **)(a1 + 464);
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = *(std::__shared_weak_count **)(a1 + 448);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(std::__shared_weak_count **)(a1 + 320);
    if (!v60)
      goto LABEL_87;
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      if (!*(_BYTE *)(a1 + 304))
        goto LABEL_95;
    }
    else
    {
LABEL_87:
      if (!*(_BYTE *)(a1 + 304))
        goto LABEL_95;
    }
    if (!*(_QWORD *)v3)
      goto LABEL_95;
    (*(void (**)(_QWORD))(**(_QWORD **)v3 + 40))(*(_QWORD *)v3);
    v63 = *(_OWORD *)(v2 + 144);
    *(_OWORD *)(v2 + 192) = v63;
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
    if (!atomic_load((unint64_t *)(v63 + 96)))
    {
      *(_BYTE *)(v2 + 208) = 1;
      v65 = (unint64_t *)(*(_QWORD *)(a1 + 504) + 96);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(a1, v65));
      if (!v66)
        return;
    }
  }
  v5 = *(_QWORD *)(a1 + 504);
  if (!*(_BYTE *)(v5 + 88))
  {
LABEL_117:
    __break(1u);
    return;
  }
  v6 = (const std::runtime_error *)(v5 + 8);
  v7 = *(_BYTE *)(v5 + 80);
  v8 = (_QWORD *)(a1 + 328);
  if (v7)
  {
    *(_OWORD *)v2 = *(_OWORD *)(v5 + 8);
    *v8 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    v6->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)v2, v6);
    *(_OWORD *)v8 = *(_OWORD *)(v5 + 24);
    *(_QWORD *)(a1 + 312) = off_1E2521330;
    v14 = (_QWORD *)(v5 + 48);
    v15 = *(_QWORD *)(v5 + 48);
    v16 = a1 + 352;
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(a1 + 352) = v15;
    v17 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(a1 + 360) = v17;
    if (v17)
    {
      *(_QWORD *)(v15 + 16) = v16;
      *(_QWORD *)(v5 + 40) = v14;
      *v14 = 0;
      *(_QWORD *)(v5 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 344) = v16;
    }
    v22 = *(_QWORD *)(a1 + 504);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(v22 + 64);
    *(_QWORD *)(v22 + 64) = 0;
    *(_QWORD *)(v22 + 72) = 0;
  }
  *(_BYTE *)(a1 + 384) = v7;
  v23 = *(_QWORD *)(a1 + 512);
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      v26 = *(std::__shared_weak_count **)(a1 + 512);
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v27 = *(std::__shared_weak_count **)(a1 + 464);
  if (!v27)
    goto LABEL_23;
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = *(unsigned __int8 *)(a1 + 384);
    if (*(_BYTE *)(a1 + 384))
      goto LABEL_24;
  }
  else
  {
LABEL_23:
    v30 = *(unsigned __int8 *)(a1 + 384);
    if (*(_BYTE *)(a1 + 384))
    {
LABEL_24:
      v31 = *v4;
      if (*v4)
      {
        v32 = *(uint64_t **)(a1 + 424);
        v33 = *v4;
        if (v32 != v31)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v32, 0);
          while (v32 != v31);
          v33 = *v4;
        }
        *(_QWORD *)(a1 + 424) = v31;
        operator delete(v33);
      }
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v2;
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 328);
      *(_QWORD *)(v2 + 8) = 0;
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)v2 = 0;
      goto LABEL_95;
    }
  }
  std::runtime_error::runtime_error(&v81, (const std::runtime_error *)v2);
  v82 = *(_OWORD *)v8;
  v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v34 = *(_QWORD *)(a1 + 352);
  v83 = *(unsigned int ***)(a1 + 344);
  v84 = (unsigned int *)v34;
  v85 = *(_QWORD *)(a1 + 360);
  if (v85)
  {
    *(_QWORD *)(v34 + 16) = &v84;
    *(_QWORD *)(a1 + 344) = a1 + 352;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
  }
  else
  {
    v83 = &v84;
  }
  v86 = *(_OWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v87 = 1;
  std::runtime_error::runtime_error(&v89, &v81);
  v90 = v82;
  v89.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v91 = v83;
  v92 = v84;
  v93 = v85;
  if (v85)
  {
    *((_QWORD *)v84 + 2) = &v92;
    v83 = &v84;
    v84 = 0;
    v85 = 0;
  }
  else
  {
    v91 = &v92;
  }
  v94 = v86;
  v86 = 0uLL;
  std::runtime_error::runtime_error(&v75, &v89);
  v76 = v90;
  v75.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v35 = v92;
  v77 = v91;
  v78 = v92;
  v79 = v93;
  if (v93)
  {
    *((_QWORD *)v92 + 2) = &v78;
    v35 = 0;
    v91 = &v92;
    v92 = 0;
    v93 = 0;
  }
  else
  {
    v77 = &v78;
  }
  v80 = v94;
  v94 = 0uLL;
  v89.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v91, v35);
  MEMORY[0x18D7898AC](&v89);
  if (*(_BYTE *)(a1 + 184))
  {
    if (*(_BYTE *)(a1 + 176))
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 24));
    else
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    *(_BYTE *)(a1 + 184) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v75);
  v37 = v77;
  v36 = v78;
  *(_QWORD *)(a1 + 64) = v78;
  v38 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v76;
  *(_QWORD *)(a1 + 24) = off_1E2521330;
  *(_QWORD *)(a1 + 56) = v37;
  v39 = v79;
  *(_QWORD *)(a1 + 72) = v79;
  if (v39)
  {
    *((_QWORD *)v36 + 2) = v38;
    v36 = 0;
    v77 = &v78;
    v78 = 0;
    v79 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v38;
  }
  *(_OWORD *)(a1 + 80) = v80;
  v80 = 0uLL;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 1;
  v75.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v77, v36);
  MEMORY[0x18D7898AC](&v75);
  if (v87)
  {
    v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, v84);
    MEMORY[0x18D7898AC](&v81);
  }
  v43 = *(uint64_t **)(a1 + 312);
  if (*(_BYTE *)(a1 + 384))
  {
    if (v43)
    {
      v44 = *(uint64_t **)(a1 + 320);
      v45 = *(void **)(a1 + 312);
      if (v44 != v43)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v44, 0);
        while (v44 != v43);
        v45 = *(void **)v2;
      }
      *(_QWORD *)(a1 + 320) = v43;
      operator delete(v45);
      if (v30)
      {
LABEL_95:
        v46 = 0;
        if (*(_BYTE *)(a1 + 304))
          goto LABEL_96;
LABEL_64:
        (**(void (***)(_BYTE *))v3)(v3);
        v47 = a1 + 392;
        if (!v46)
          goto LABEL_101;
        goto LABEL_111;
      }
    }
  }
  else
  {
    ((void (*)(unint64_t))*v43)(v2);
  }
  v46 = 3;
  if (!*(_BYTE *)(a1 + 304))
    goto LABEL_64;
LABEL_96:
  v67 = *(std::__shared_weak_count **)(a1 + 240);
  if (!v67)
    goto LABEL_100;
  v68 = (unint64_t *)&v67->__shared_owners_;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    v47 = a1 + 392;
    if (!v46)
      goto LABEL_101;
  }
  else
  {
LABEL_100:
    v47 = a1 + 392;
    if (!v46)
    {
LABEL_101:
      (*(void (**)(std::runtime_error *__return_ptr, _QWORD, unint64_t, uint64_t **))(**(_QWORD **)(a1 + 472) + 88))(&v81, *(_QWORD *)(a1 + 472), v47, v4);
      if (*(_BYTE *)(a1 + 184))
      {
        v70 = (AMSCore::URL *)(a1 + 24);
        if (*(_BYTE *)(a1 + 176))
          AMSCore::URL::~URL(v70);
        else
          (**(void (***)(AMSCore::URL *))v70)(v70);
        *(_BYTE *)(a1 + 184) = 0;
      }
      v71 = v88;
      std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>((std::runtime_error *)(a1 + 24), v88, &v81);
      *(_BYTE *)(a1 + 176) = v71;
      *(_BYTE *)(a1 + 184) = 1;
      if ((_BYTE)v88)
        AMSCore::URL::~URL((AMSCore::URL *)&v81);
      else
        ((void (*)(std::runtime_error *))v81.~runtime_error)(&v81);
    }
  }
LABEL_111:
  v72 = *v4;
  if (*v4)
  {
    v73 = *(uint64_t **)(a1 + 424);
    v74 = *v4;
    if (v73 != v72)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v73, 0);
      while (v73 != v72);
      v74 = *v4;
    }
    *(_QWORD *)(a1 + 424) = v72;
    operator delete(v74);
  }
  *(_QWORD *)(a1 + 232) = a1 + 16;
  *(_QWORD *)a1 = 0;
  AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void AMSCore::IBag::getURLValueForKey(char *__p)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  AMSCore::URL *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;

  v2 = (void (***)(_QWORD))(__p + 232);
  if (!*(_QWORD *)__p)
    goto LABEL_41;
  if (__p[520])
  {
    v3 = *((_QWORD *)__p + 64);
    if (!v3)
      goto LABEL_7;
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      v35 = (std::__shared_weak_count *)*((_QWORD *)__p + 64);
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 58);
      if (!v6)
        goto LABEL_11;
    }
    else
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 58);
      if (!v6)
        goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (__p[304])
        goto LABEL_12;
      goto LABEL_66;
    }
LABEL_11:
    if (__p[304])
    {
LABEL_12:
      v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 30);
      if (!v9)
        goto LABEL_36;
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_34;
    }
LABEL_66:
    (**v2)(v2);
    v23 = (uint64_t *)*((_QWORD *)__p + 52);
    if (!v23)
      goto LABEL_41;
    goto LABEL_37;
  }
  v12 = *((_QWORD *)__p + 62);
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 62);
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 58);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 56);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 40);
  if (v9)
  {
    v22 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v22);
    while (__stlxr(v11 - 1, v22));
LABEL_34:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_36:
  v23 = (uint64_t *)*((_QWORD *)__p + 52);
  if (!v23)
    goto LABEL_41;
LABEL_37:
  v24 = (uint64_t *)*((_QWORD *)__p + 53);
  v25 = v23;
  if (v24 != v23)
  {
    do
      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v24, 0);
    while (v24 != v23);
    v25 = (uint64_t *)*((_QWORD *)__p + 52);
  }
  *((_QWORD *)__p + 53) = v23;
  operator delete(v25);
LABEL_41:
  v26 = (char *)*((_QWORD *)__p + 28);
  if (v26 == __p + 200)
  {
    v27 = 4;
    v26 = __p + 200;
  }
  else
  {
    if (!v26)
      goto LABEL_46;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_46:
  if (__p[184])
  {
    v28 = (AMSCore::URL *)(__p + 24);
    if (__p[176])
      AMSCore::URL::~URL(v28);
    else
      (**(void (***)(AMSCore::URL *))v28)(v28);
  }
  v29 = *((_QWORD *)__p + 60);
  do
  {
    v30 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v31)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v29)
  {
    v32 = (unint64_t *)(*((_QWORD *)__p + 60) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      v34 = (std::__shared_weak_count *)*((_QWORD *)__p + 60);
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if ((__p[415] & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_59;
    }
  }
  if (__p[415] < 0)
LABEL_59:
    operator delete(*((void **)__p + 49));
LABEL_60:
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523768;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CBF0DC0(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 176);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CBF0DF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  std::runtime_error v8[9];
  unsigned __int8 v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v1 = result;
  v12 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 176);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 208);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 184))
      {
        v11 = v10;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v10);
      }
      else
      {
        v11 = *(_BYTE **)(*(_QWORD *)v1 + 208);
        *v4 = 0;
      }
    }
    else
    {
      v11 = 0;
    }
    if (v11)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 168))
      {
        __break(1u);
        return result;
      }
      v6 = *(_BYTE *)(v5 + 160);
      std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>(v8, v6, (std::runtime_error *)(v5 + 8));
      v9 = v6;
      if (!v11)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v11 + 48))(v11, v8);
      if (v9)
        AMSCore::URL::~URL((AMSCore::URL *)v8);
      else
        ((void (*)(std::runtime_error *))v8[0].~runtime_error)(v8);
    }
    else
    {
      (*v3)(v3);
    }
    result = v11;
    if (v11 == v10)
    {
      v7 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v7 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v7))();
  }
  return result;
}

void sub_18CBF0F8C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>(std::runtime_error *result, int a2, std::runtime_error *a3)
{
  const char *imp;
  std::runtime_error_vtbl *v5;
  const char *v6;
  void (__cdecl *v7)(std::runtime_error *__hidden);
  char *v8;
  std::runtime_error_vtbl *p_imp;
  const char *v10;
  std::runtime_error_vtbl *v11;
  std::runtime_error_vtbl *v12;

  if (a2)
  {
    LOBYTE(result->__vftable) = 0;
    LOBYTE(result[1].__imp_.__imp_) = 0;
    if (LOBYTE(a3[1].__imp_.__imp_))
    {
      *result = *a3;
      result[1].__vftable = a3[1].__vftable;
      a3->__imp_.__imp_ = 0;
      a3[1].__vftable = 0;
      a3->__vftable = 0;
      LOBYTE(result[1].__imp_.__imp_) = 1;
    }
    LOBYTE(result[2].__vftable) = 0;
    LOBYTE(result[3].__imp_.__imp_) = 0;
    if (LOBYTE(a3[3].__imp_.__imp_))
    {
      result[2] = a3[2];
      result[3].__vftable = a3[3].__vftable;
      a3[2].__imp_.__imp_ = 0;
      a3[3].__vftable = 0;
      a3[2].__vftable = 0;
      LOBYTE(result[3].__imp_.__imp_) = 1;
    }
    LOBYTE(result[4].__vftable) = 0;
    LOBYTE(result[5].__imp_.__imp_) = 0;
    if (LOBYTE(a3[5].__imp_.__imp_))
    {
      result[4] = a3[4];
      result[5].__vftable = a3[5].__vftable;
      a3[4].__imp_.__imp_ = 0;
      a3[5].__vftable = 0;
      a3[4].__vftable = 0;
      LOBYTE(result[5].__imp_.__imp_) = 1;
    }
    LODWORD(result[6].__vftable) = a3[6].__vftable;
    result[6].__imp_.__imp_ = (const char *)&result[6].__imp_;
    result[7].__vftable = (std::runtime_error_vtbl *)&result[6].__imp_;
    result[7].__imp_.__imp_ = 0;
    if (result == a3)
    {
      __break(1u);
    }
    else
    {
      imp = a3[7].__imp_.__imp_;
      if (imp)
      {
        v6 = a3[6].__imp_.__imp_;
        v5 = a3[7].__vftable;
        v7 = v5->~runtime_error;
        *((_QWORD *)v7 + 1) = *((_QWORD *)v6 + 1);
        **((_QWORD **)v6 + 1) = v7;
        v8 = (char *)result[6].__imp_.__imp_;
        *((_QWORD *)v8 + 1) = v5;
        v5->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))v8;
        result[6].__imp_.__imp_ = v6;
        *((_QWORD *)v6 + 1) = (char *)result + 104;
        result[7].__imp_.__imp_ = imp;
        a3[7].__imp_.__imp_ = 0;
      }
      result[8] = a3[8];
      result[9].__vftable = a3[9].__vftable;
      a3[8].__imp_.__imp_ = 0;
      a3[9].__vftable = 0;
      a3[8].__vftable = 0;
    }
  }
  else
  {
    result = std::runtime_error::runtime_error(result, a3);
    p_imp = (std::runtime_error_vtbl *)&a3[2].__imp_;
    v10 = a3[2].__imp_.__imp_;
    result[1] = a3[1];
    result->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    result[2].__vftable = a3[2].__vftable;
    result[2].__imp_.__imp_ = v10;
    v11 = (std::runtime_error_vtbl *)&result[2].__imp_;
    v12 = a3[3].__vftable;
    result[3].__vftable = v12;
    if (v12)
    {
      *((_QWORD *)v10 + 2) = v11;
      a3[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a3[3].__vftable = 0;
    }
    else
    {
      result[2].__vftable = v11;
    }
    *(std::runtime_error *)((char *)result + 56) = *(std::runtime_error *)((char *)a3 + 56);
    a3[3].__imp_.__imp_ = 0;
    a3[4].__vftable = 0;
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 176);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_3URLENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_3URLENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_3URLENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_3URLENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t AMSCore::ImmutableBag::getExpirationTimePoint(AMSCore::ImmutableBag *this)
{
  return *((_QWORD *)this + 6);
}

BOOL AMSCore::ImmutableBag::getIsExpired(AMSCore::ImmutableBag *this, const AMSCore::ClockProvider *a2)
{
  return *((_QWORD *)this + 6) <= (*(uint64_t (**)(const AMSCore::ClockProvider *))(*(_QWORD *)a2 + 16))(a2);
}

_QWORD *AMSCore::ImmutableBag::getBoolValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  int cat;
  BOOL v6;
  unsigned int *v7;
  unsigned int *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::system_error *v12;
  __int16 v13;
  unsigned int *v14;
  unsigned int *v15;
  _QWORD *result;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error v25;
  std::error_code v26;
  unsigned int **v27;
  unsigned int *v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  std::runtime_error v32;
  std::error_code ec;
  unsigned int **v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  std::system_error v38;
  unsigned int **v39;
  unsigned int *v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  std::runtime_error v44;
  std::error_code v45;
  unsigned int **v46;
  unsigned int *v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;
  std::error_code v54;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 8);
  v52 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v44, a2, v4, (uint64_t)v51);
  if (v50)
  {
    cat = (int)v45.__cat_;
    if (LODWORD(v45.__cat_) == -1)
      cat = 0;
    switch(cat)
    {
      case 1:
        v13 = LOBYTE(v44.__vftable);
        goto LABEL_30;
      case 2:
        v6 = *(double *)&v44.__vftable == 0.0;
        goto LABEL_27;
      case 3:
      case 4:
        v6 = v44.__vftable == 0;
LABEL_27:
        v13 = !v6;
LABEL_30:
        LOWORD(v25.__vftable) = v13 | (v46 << 8);
        v31 = 1;
        break;
      default:
        AMSCore::StringUtils::join<char [22]>((std::string *)&v25, "Bag type is not BOOL.");
        v54.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
        *(_QWORD *)&v54.__val_ = 202;
        std::system_error::system_error(&v38, v54, (const std::string *)&v25);
        if (*((char *)&v26.__val_ + 7) < 0)
          operator delete(v25.__vftable);
        v40 = 0;
        v41 = 0;
        v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v39 = &v40;
        v42 = 0uLL;
        std::runtime_error::runtime_error(&v32, &v38);
        ec = v38.__ec_;
        v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v14 = v40;
        v34 = v39;
        v35 = v40;
        v36 = v41;
        if (v41)
        {
          *((_QWORD *)v40 + 2) = &v35;
          v14 = 0;
          v39 = &v40;
          v40 = 0;
          v41 = 0;
        }
        else
        {
          v34 = &v35;
        }
        v37 = v42;
        v42 = 0uLL;
        v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v14);
        MEMORY[0x18D7898AC](&v38);
        std::runtime_error::runtime_error(&v25, &v32);
        v26 = ec;
        v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v15 = v35;
        v27 = v34;
        v28 = v35;
        v29 = v36;
        if (v36)
        {
          *((_QWORD *)v35 + 2) = &v28;
          v15 = 0;
          v34 = &v35;
          v35 = 0;
          v36 = 0;
        }
        else
        {
          v27 = &v28;
        }
        v30 = v37;
        v37 = 0uLL;
        v31 = 0;
        v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v15);
        v12 = (std::system_error *)&v32;
        goto LABEL_43;
    }
  }
  else
  {
    std::runtime_error::runtime_error(&v38, &v44);
    v38.__ec_ = v45;
    v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v39 = v46;
    v40 = v47;
    v41 = v48;
    if (v48)
    {
      *((_QWORD *)v47 + 2) = &v40;
      v46 = &v47;
      v47 = 0;
      v48 = 0;
    }
    else
    {
      v39 = &v40;
    }
    v42 = v49;
    v49 = 0uLL;
    v43 = 1;
    std::runtime_error::runtime_error(&v25, &v38);
    v26 = v38.__ec_;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v39;
    v28 = v40;
    v29 = v41;
    if (v41)
    {
      *((_QWORD *)v40 + 2) = &v28;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v42;
    v42 = 0uLL;
    std::runtime_error::runtime_error(&v32, &v25);
    ec = v26;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v7 = v28;
    v34 = v27;
    v35 = v28;
    v36 = v29;
    if (v29)
    {
      *((_QWORD *)v28 + 2) = &v35;
      v7 = 0;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v30;
    v30 = 0uLL;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v7);
    MEMORY[0x18D7898AC](&v25);
    std::runtime_error::runtime_error(&v25, &v32);
    v26 = ec;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v8 = v35;
    v27 = v34;
    v28 = v35;
    v29 = v36;
    if (v36)
    {
      *((_QWORD *)v35 + 2) = &v28;
      v8 = 0;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v37;
    v37 = 0uLL;
    v31 = 0;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v8);
    MEMORY[0x18D7898AC](&v32);
    if (v43)
    {
      v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
      v12 = &v38;
LABEL_43:
      MEMORY[0x18D7898AC](v12);
      if (v50)
        goto LABEL_32;
LABEL_44:
      ((void (*)(std::runtime_error *))v44.~runtime_error)(&v44);
      goto LABEL_45;
    }
  }
  if (!v50)
    goto LABEL_44;
LABEL_32:
  if (LODWORD(v45.__cat_) != -1)
    ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[LODWORD(v45.__cat_)])(&v38, &v44);
LABEL_45:
  result = v52;
  if (v52 == v51)
  {
    v17 = 4;
    result = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_50;
    v17 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
LABEL_50:
  if (v31)
  {
    *(_BYTE *)a3 = v25.__vftable;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v44, &v25);
    v45 = v26;
    v44.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v46 = v27;
    v47 = v28;
    v48 = v29;
    if (v29)
    {
      *((_QWORD *)v28 + 2) = &v47;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v46 = &v47;
    }
    v49 = v30;
    v30 = 0uLL;
    v50 = 1;
    std::runtime_error::runtime_error(&v38, &v44);
    v38.__ec_ = v45;
    v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v39 = v46;
    v40 = v47;
    v41 = v48;
    if (v48)
    {
      *((_QWORD *)v47 + 2) = &v40;
      v46 = &v47;
      v47 = 0;
      v48 = 0;
    }
    else
    {
      v39 = &v40;
    }
    v42 = v49;
    v49 = 0uLL;
    std::runtime_error::runtime_error(&v32, &v38);
    ec = v38.__ec_;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v18 = v40;
    v34 = v39;
    v35 = v40;
    v36 = v41;
    if (v41)
    {
      *((_QWORD *)v40 + 2) = &v35;
      v18 = 0;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v42;
    v42 = 0uLL;
    v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v18);
    MEMORY[0x18D7898AC](&v38);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v32);
    *(std::error_code *)(a3 + 16) = ec;
    *(_QWORD *)a3 = off_1E2521330;
    v19 = v35;
    *(_QWORD *)(a3 + 32) = v34;
    *(_QWORD *)(a3 + 40) = v19;
    v20 = a3 + 40;
    v21 = v36;
    *(_QWORD *)(a3 + 48) = v36;
    if (v21)
    {
      *((_QWORD *)v19 + 2) = v20;
      v19 = 0;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v20;
    }
    *(_OWORD *)(a3 + 56) = v37;
    v37 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v19);
    result = (_QWORD *)MEMORY[0x18D7898AC](&v32);
    if (v50)
    {
      v44.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v46, v47);
      result = (_QWORD *)MEMORY[0x18D7898AC](&v44);
    }
    if (!v31)
      return (_QWORD *)((uint64_t (*)(std::runtime_error *))v25.~runtime_error)(&v25);
  }
  return result;
}

void sub_18CBF196C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *AMSCore::ImmutableBag::getDoubleValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  int v5;
  double v6;
  unsigned int *v7;
  unsigned int *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  _QWORD *result;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error v22;
  __int128 v23;
  unsigned int **v24;
  unsigned int *v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  unsigned int **v31;
  unsigned int *v32;
  uint64_t v33;
  __int128 v34;
  std::runtime_error v35;
  __int128 v36;
  unsigned int **v37;
  unsigned int *v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  std::runtime_error v42;
  __int128 v43;
  unsigned int **v44;
  unsigned int *v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 8);
  v50 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v42, a2, v4, (uint64_t)v49);
  if (v48)
  {
    v5 = DWORD2(v43);
    if (DWORD2(v43) == -1)
      v5 = 0;
    switch(v5)
    {
      case 1:
        v6 = 0.0;
        if (LOBYTE(v42.__vftable))
          v6 = 1.0;
        break;
      case 2:
        v6 = *(double *)&v42.__vftable;
        break;
      case 3:
        v6 = (double)(uint64_t)v42.__vftable;
        break;
      case 4:
        v6 = (double)(unint64_t)v42.__vftable;
        break;
      default:
        AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[24]>((uint64_t)&v35, 0xCAu, "Bag type is not double.");
        std::runtime_error::runtime_error(&v22, &v35);
        v23 = v36;
        v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v12 = v38;
        v24 = v37;
        v25 = v38;
        v26 = v39;
        if (v39)
        {
          *((_QWORD *)v38 + 2) = &v25;
          v37 = &v38;
          v38 = 0;
          v39 = 0;
          v12 = 0;
        }
        else
        {
          v24 = &v25;
        }
        v27 = v40;
        v40 = 0uLL;
        v28 = 0;
        v35.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        goto LABEL_38;
    }
    *(double *)&v22.__vftable = v6;
    LOBYTE(v22.__imp_.__imp_) = (_BYTE)v44;
    v28 = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v35, &v42);
    v36 = v43;
    v35.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v37 = v44;
    v38 = v45;
    v39 = v46;
    if (v46)
    {
      *((_QWORD *)v45 + 2) = &v38;
      v44 = &v45;
      v45 = 0;
      v46 = 0;
    }
    else
    {
      v37 = &v38;
    }
    v40 = v47;
    v47 = 0uLL;
    v41 = 1;
    std::runtime_error::runtime_error(&v22, &v35);
    v23 = v36;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v24 = v37;
    v25 = v38;
    v26 = v39;
    if (v39)
    {
      *((_QWORD *)v38 + 2) = &v25;
      v37 = &v38;
      v38 = 0;
      v39 = 0;
    }
    else
    {
      v24 = &v25;
    }
    v27 = v40;
    v40 = 0uLL;
    std::runtime_error::runtime_error(&v29, &v22);
    v30 = v23;
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v7 = v25;
    v31 = v24;
    v32 = v25;
    v33 = v26;
    if (v26)
    {
      *((_QWORD *)v25 + 2) = &v32;
      v7 = 0;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v31 = &v32;
    }
    v34 = v27;
    v27 = 0uLL;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v7);
    MEMORY[0x18D7898AC](&v22);
    std::runtime_error::runtime_error(&v22, &v29);
    v23 = v30;
    v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v8 = v32;
    v24 = v31;
    v25 = v32;
    v26 = v33;
    if (v33)
    {
      *((_QWORD *)v32 + 2) = &v25;
      v8 = 0;
      v31 = &v32;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      v24 = &v25;
    }
    v27 = v34;
    v34 = 0uLL;
    v28 = 0;
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, v8);
    MEMORY[0x18D7898AC](&v29);
    if (v41)
    {
      v35.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = v38;
LABEL_38:
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v37, v12);
      MEMORY[0x18D7898AC](&v35);
      if (v48)
        goto LABEL_32;
LABEL_39:
      ((void (*)(std::runtime_error *))v42.~runtime_error)(&v42);
      goto LABEL_40;
    }
  }
  if (!v48)
    goto LABEL_39;
LABEL_32:
  if (DWORD2(v43) != -1)
    ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[DWORD2(v43)])(&v35, &v42);
LABEL_40:
  result = v50;
  if (v50 == v49)
  {
    v14 = 4;
    result = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_45;
    v14 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
LABEL_45:
  if (v28)
  {
    *(_QWORD *)a3 = v22.__vftable;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v42, &v22);
    v43 = v23;
    v42.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v44 = v24;
    v45 = v25;
    v46 = v26;
    if (v26)
    {
      *((_QWORD *)v25 + 2) = &v45;
      v24 = &v25;
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v44 = &v45;
    }
    v47 = v27;
    v27 = 0uLL;
    v48 = 1;
    std::runtime_error::runtime_error(&v35, &v42);
    v36 = v43;
    v35.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v37 = v44;
    v38 = v45;
    v39 = v46;
    if (v46)
    {
      *((_QWORD *)v45 + 2) = &v38;
      v44 = &v45;
      v45 = 0;
      v46 = 0;
    }
    else
    {
      v37 = &v38;
    }
    v40 = v47;
    v47 = 0uLL;
    std::runtime_error::runtime_error(&v29, &v35);
    v30 = v36;
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v15 = v38;
    v31 = v37;
    v32 = v38;
    v33 = v39;
    if (v39)
    {
      *((_QWORD *)v38 + 2) = &v32;
      v15 = 0;
      v37 = &v38;
      v38 = 0;
      v39 = 0;
    }
    else
    {
      v31 = &v32;
    }
    v34 = v40;
    v40 = 0uLL;
    v35.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v37, v15);
    MEMORY[0x18D7898AC](&v35);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v29);
    *(_OWORD *)(a3 + 16) = v30;
    *(_QWORD *)a3 = off_1E2521330;
    v16 = v32;
    *(_QWORD *)(a3 + 32) = v31;
    *(_QWORD *)(a3 + 40) = v16;
    v17 = a3 + 40;
    v18 = v33;
    *(_QWORD *)(a3 + 48) = v33;
    if (v18)
    {
      *((_QWORD *)v16 + 2) = v17;
      v16 = 0;
      v31 = &v32;
      v32 = 0;
      v33 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v17;
    }
    *(_OWORD *)(a3 + 56) = v34;
    v34 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, v16);
    result = (_QWORD *)MEMORY[0x18D7898AC](&v29);
    if (v48)
    {
      v42.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v44, v45);
      result = (_QWORD *)MEMORY[0x18D7898AC](&v42);
    }
    if (!v28)
      return (_QWORD *)((uint64_t (*)(std::runtime_error *))v22.~runtime_error)(&v22);
  }
  return result;
}

void sub_18CBF2030(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *AMSCore::ImmutableBag::getIntValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  int cat;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::system_error *v12;
  std::system_error_vtbl *v13;
  uint64_t v14;
  uint64_t v15;
  std::system_error_vtbl *v16;
  std::system_error_vtbl *v17;
  std::ios_base *v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int *v22;
  _QWORD *result;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::runtime_error v32;
  std::error_code v33;
  unsigned int **v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  std::runtime_error v39;
  std::error_code ec;
  unsigned int **v41;
  unsigned int *v42;
  uint64_t v43;
  __int128 v44;
  std::runtime_error v45;
  std::error_code v46;
  unsigned int **v47;
  unsigned int *v48;
  uint64_t v49;
  __int128 v50;
  char v51;
  std::system_error v52;
  unsigned int **v53;
  unsigned int *v54;
  uint64_t v55;
  __int128 v56;
  __int128 __p;
  __int128 v58;
  int v59;
  uint64_t v60[19];
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;
  std::error_code v64;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 8);
  v62 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v45, a2, v4, (uint64_t)v61);
  if (v51)
  {
    cat = (int)v46.__cat_;
    if (LODWORD(v46.__cat_) == -1)
      cat = 0;
    switch(cat)
    {
      case 1:
        v21 = 0;
        LOBYTE(v6) = v45.__vftable;
        goto LABEL_35;
      case 2:
        v6 = (uint64_t)*(double *)&v45.__vftable;
        goto LABEL_34;
      case 3:
      case 4:
        v6 = (uint64_t)v45.__vftable;
        goto LABEL_34;
      case 7:
        v6 = (uint64_t)v45.__vftable / 1000;
LABEL_34:
        v21 = v6 & 0xFFFFFFFFFFFFFF00;
LABEL_35:
        v32.__vftable = (std::runtime_error_vtbl *)(v21 | v6);
        LOBYTE(v32.__imp_.__imp_) = (_BYTE)v47;
        v38 = 1;
        break;
      default:
        v13 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
        v14 = MEMORY[0x1E0DE4FE0] + 64;
        v15 = MEMORY[0x1E0DE4F60];
        v16 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
        v17 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
        v60[0] = MEMORY[0x1E0DE4FE0] + 64;
        v52.__vftable = v16;
        *(std::system_error_vtbl **)((char *)&v52.__vftable + (unint64_t)v16[-1].~system_error) = v17;
        v18 = (std::ios_base *)((char *)&v52 + (unint64_t)v52.__vftable[-1].~system_error);
        std::ios_base::init(v18, &v52.__imp_);
        v18[1].__vftable = 0;
        v18[1].__fmtflags_ = -1;
        v52.__vftable = v13 + 1;
        v60[0] = v14;
        std::streambuf::basic_streambuf();
        v19 = MEMORY[0x1E0DE4FB8];
        v52.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
        __p = 0u;
        v58 = 0u;
        v59 = 16;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Bag type is not int.", 20);
        std::stringbuf::str[abi:fe180100]((uint64_t)&v52.__imp_, (std::string *)&v32);
        v52.__vftable = *(std::system_error_vtbl **)v15;
        *(std::system_error_vtbl **)((char *)&v52.__vftable + (unint64_t)v52.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v15 + 24);
        v52.__imp_.__imp_ = (const char *)(v19 + 16);
        if (SBYTE7(v58) < 0)
          operator delete((void *)__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D789B58](v60);
        v64.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
        *(_QWORD *)&v64.__val_ = 202;
        std::system_error::system_error(&v52, v64, (const std::string *)&v32);
        if (*((char *)&v33.__val_ + 7) < 0)
          operator delete(v32.__vftable);
        v54 = 0;
        v55 = 0;
        v52.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v53 = &v54;
        v56 = 0uLL;
        std::runtime_error::runtime_error(&v39, &v52);
        ec = v52.__ec_;
        v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v20 = v54;
        v41 = v53;
        v42 = v54;
        v43 = v55;
        if (v55)
        {
          *((_QWORD *)v54 + 2) = &v42;
          v20 = 0;
          v53 = &v54;
          v54 = 0;
          v55 = 0;
        }
        else
        {
          v41 = &v42;
        }
        v44 = v56;
        v56 = 0uLL;
        v52.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v53, v20);
        MEMORY[0x18D7898AC](&v52);
        std::runtime_error::runtime_error(&v32, &v39);
        v33 = ec;
        v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v22 = v42;
        v34 = v41;
        v35 = v42;
        v36 = v43;
        if (v43)
        {
          *((_QWORD *)v42 + 2) = &v35;
          v22 = 0;
          v41 = &v42;
          v42 = 0;
          v43 = 0;
        }
        else
        {
          v34 = &v35;
        }
        v37 = v44;
        v44 = 0uLL;
        v38 = 0;
        v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, v22);
        v12 = (std::system_error *)&v39;
        goto LABEL_44;
    }
  }
  else
  {
    std::runtime_error::runtime_error(&v52, &v45);
    v52.__ec_ = v46;
    v52.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v53 = v47;
    v54 = v48;
    v55 = v49;
    if (v49)
    {
      *((_QWORD *)v48 + 2) = &v54;
      v47 = &v48;
      v48 = 0;
      v49 = 0;
    }
    else
    {
      v53 = &v54;
    }
    v56 = v50;
    v50 = 0uLL;
    LOBYTE(__p) = 1;
    std::runtime_error::runtime_error(&v32, &v52);
    v33 = v52.__ec_;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v34 = v53;
    v35 = v54;
    v36 = v55;
    if (v55)
    {
      *((_QWORD *)v54 + 2) = &v35;
      v53 = &v54;
      v54 = 0;
      v55 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v56;
    v56 = 0uLL;
    std::runtime_error::runtime_error(&v39, &v32);
    ec = v33;
    v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v7 = v35;
    v41 = v34;
    v42 = v35;
    v43 = v36;
    if (v36)
    {
      *((_QWORD *)v35 + 2) = &v42;
      v7 = 0;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v41 = &v42;
    }
    v44 = v37;
    v37 = 0uLL;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v7);
    MEMORY[0x18D7898AC](&v32);
    std::runtime_error::runtime_error(&v32, &v39);
    v33 = ec;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v8 = v42;
    v34 = v41;
    v35 = v42;
    v36 = v43;
    if (v43)
    {
      *((_QWORD *)v42 + 2) = &v35;
      v8 = 0;
      v41 = &v42;
      v42 = 0;
      v43 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v44;
    v44 = 0uLL;
    v38 = 0;
    v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, v8);
    MEMORY[0x18D7898AC](&v39);
    if ((_BYTE)__p)
    {
      v52.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v53, v54);
      v12 = &v52;
LABEL_44:
      MEMORY[0x18D7898AC](v12);
      if (v51)
        goto LABEL_37;
LABEL_45:
      ((void (*)(std::runtime_error *))v45.~runtime_error)(&v45);
      goto LABEL_46;
    }
  }
  if (!v51)
    goto LABEL_45;
LABEL_37:
  if (LODWORD(v46.__cat_) != -1)
    ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[LODWORD(v46.__cat_)])(&v52, &v45);
LABEL_46:
  result = v62;
  if (v62 == v61)
  {
    v24 = 4;
    result = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_51;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_51:
  if (v38)
  {
    *(_QWORD *)a3 = v32.__vftable;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v52, &v32);
    v52.__ec_ = v33;
    v52.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v53 = v34;
    v54 = v35;
    v55 = v36;
    if (v36)
    {
      *((_QWORD *)v35 + 2) = &v54;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v53 = &v54;
    }
    v56 = v37;
    v37 = 0uLL;
    LOBYTE(__p) = 1;
    std::runtime_error::runtime_error(&v45, &v52);
    v46 = v52.__ec_;
    v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v47 = v53;
    v48 = v54;
    v49 = v55;
    if (v55)
    {
      *((_QWORD *)v54 + 2) = &v48;
      v53 = &v54;
      v54 = 0;
      v55 = 0;
    }
    else
    {
      v47 = &v48;
    }
    v50 = v56;
    v56 = 0uLL;
    std::runtime_error::runtime_error(&v39, &v45);
    ec = v46;
    v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v25 = v48;
    v41 = v47;
    v42 = v48;
    v43 = v49;
    if (v49)
    {
      *((_QWORD *)v48 + 2) = &v42;
      v25 = 0;
      v47 = &v48;
      v48 = 0;
      v49 = 0;
    }
    else
    {
      v41 = &v42;
    }
    v44 = v50;
    v50 = 0uLL;
    v45.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, v25);
    MEMORY[0x18D7898AC](&v45);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v39);
    *(std::error_code *)(a3 + 16) = ec;
    *(_QWORD *)a3 = off_1E2521330;
    v26 = v42;
    *(_QWORD *)(a3 + 32) = v41;
    *(_QWORD *)(a3 + 40) = v26;
    v27 = a3 + 40;
    v28 = v43;
    *(_QWORD *)(a3 + 48) = v43;
    if (v28)
    {
      *((_QWORD *)v26 + 2) = v27;
      v26 = 0;
      v41 = &v42;
      v42 = 0;
      v43 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v27;
    }
    *(_OWORD *)(a3 + 56) = v44;
    v44 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v39.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, v26);
    result = (_QWORD *)MEMORY[0x18D7898AC](&v39);
    if ((_BYTE)__p)
    {
      v52.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v53, v54);
      result = (_QWORD *)MEMORY[0x18D7898AC](&v52);
    }
    if (!v38)
      return (_QWORD *)((uint64_t (*)(std::runtime_error *))v32.~runtime_error)(&v32);
  }
  return result;
}

void sub_18CBF2890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a2)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      __clang_call_terminate(exception_object);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::ImmutableBag::getMapValueForKey(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  const char *imp;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error v15;
  __int128 v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t v19;
  __int128 v20;
  std::runtime_error v21;
  __int128 v22;
  unsigned int **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  std::runtime_error v28;
  __int128 v29;
  unsigned int **v30;
  unsigned int *v31;
  uint64_t v32;
  __int128 v33;
  std::runtime_error v34;
  __int128 v35;
  unsigned int **v36;
  unsigned int *v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 8);
  *((_QWORD *)&v35 + 1) = 0;
  AMSCore::BagDataAccessor::getMapValue((uint64_t)&v21, a2, v4, (uint64_t)&v34);
  if (v27)
  {
    imp = v21.__imp_.__imp_;
    *(_QWORD *)a3 = v21.__vftable;
    *(_QWORD *)(a3 + 8) = imp;
    v6 = a3 + 8;
    v7 = v22;
    *(_QWORD *)(a3 + 16) = v22;
    if (v7)
    {
      *((_QWORD *)imp + 2) = v6;
      v21.__vftable = (std::runtime_error_vtbl *)&v21.__imp_;
      v21.__imp_.__imp_ = 0;
      *(_QWORD *)&v22 = 0;
    }
    else
    {
      *(_QWORD *)a3 = v6;
    }
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v34, &v21);
    v35 = v22;
    v34.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v36 = v23;
    v37 = (unsigned int *)v24;
    v38 = v25;
    if (v25)
    {
      *(_QWORD *)(v24 + 16) = &v37;
      v23 = (unsigned int **)&v24;
      v24 = 0;
      v25 = 0;
    }
    else
    {
      v36 = &v37;
    }
    v39 = v26;
    v26 = 0uLL;
    v40 = 1;
    std::runtime_error::runtime_error(&v28, &v34);
    v29 = v35;
    v28.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v30 = v36;
    v31 = v37;
    v32 = v38;
    if (v38)
    {
      *((_QWORD *)v37 + 2) = &v31;
      v36 = &v37;
      v37 = 0;
      v38 = 0;
    }
    else
    {
      v30 = &v31;
    }
    v33 = v39;
    v39 = 0uLL;
    std::runtime_error::runtime_error(&v15, &v28);
    v16 = v29;
    v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v8 = v31;
    v17 = v30;
    v18 = v31;
    v19 = v32;
    if (v32)
    {
      *((_QWORD *)v31 + 2) = &v18;
      v8 = 0;
      v30 = &v31;
      v31 = 0;
      v32 = 0;
    }
    else
    {
      v17 = &v18;
    }
    v20 = v33;
    v33 = 0uLL;
    v28.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, v8);
    MEMORY[0x18D7898AC](&v28);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v15);
    *(_OWORD *)(a3 + 16) = v16;
    *(_QWORD *)a3 = off_1E2521330;
    v9 = v18;
    *(_QWORD *)(a3 + 32) = v17;
    *(_QWORD *)(a3 + 40) = v9;
    v10 = a3 + 40;
    v11 = v19;
    *(_QWORD *)(a3 + 48) = v19;
    if (v11)
    {
      *((_QWORD *)v9 + 2) = v10;
      v9 = 0;
      v17 = &v18;
      v18 = 0;
      v19 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v10;
    }
    *(_OWORD *)(a3 + 56) = v20;
    v20 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v9);
    MEMORY[0x18D7898AC](&v15);
    if (v40)
    {
      v34.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v37);
      MEMORY[0x18D7898AC](&v34);
    }
  }
  if (v27)
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v21.__imp_.__imp_);
  else
    ((void (*)(std::runtime_error *))v21.~runtime_error)(&v21);
}

void AMSCore::ImmutableBag::getStringValueForKey(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::runtime_error v12;
  __int128 v13;
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  __int128 v17;
  std::runtime_error v18;
  __int128 v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  std::runtime_error v25;
  __int128 v26;
  unsigned int **v27;
  unsigned int *v28;
  uint64_t v29;
  __int128 v30;
  std::runtime_error v31;
  __int128 v32;
  unsigned int **v33;
  unsigned int *v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 8);
  *((_QWORD *)&v32 + 1) = 0;
  AMSCore::BagDataAccessor::getStringValue((uint64_t)&v18, a2, v4, (uint64_t)&v31);
  if (v24)
  {
    *(std::runtime_error *)a3 = v18;
    *(_QWORD *)(a3 + 16) = v19;
    v18.__vftable = 0;
    v18.__imp_.__imp_ = 0;
    *(_QWORD *)&v19 = 0;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v31, &v18);
    v32 = v19;
    v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v33 = v20;
    v34 = (unsigned int *)v21;
    v35 = v22;
    if (v22)
    {
      *(_QWORD *)(v21 + 16) = &v34;
      v20 = (unsigned int **)&v21;
      v21 = 0;
      v22 = 0;
    }
    else
    {
      v33 = &v34;
    }
    v36 = v23;
    v23 = 0uLL;
    v37 = 1;
    std::runtime_error::runtime_error(&v25, &v31);
    v26 = v32;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v33;
    v28 = v34;
    v29 = v35;
    if (v35)
    {
      *((_QWORD *)v34 + 2) = &v28;
      v33 = &v34;
      v34 = 0;
      v35 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v36;
    v36 = 0uLL;
    std::runtime_error::runtime_error(&v12, &v25);
    v13 = v26;
    v12.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v5 = v28;
    v14 = v27;
    v15 = v28;
    v16 = v29;
    if (v29)
    {
      *((_QWORD *)v28 + 2) = &v15;
      v5 = 0;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v14 = &v15;
    }
    v17 = v30;
    v30 = 0uLL;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v5);
    MEMORY[0x18D7898AC](&v25);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v12);
    *(_OWORD *)(a3 + 16) = v13;
    *(_QWORD *)a3 = off_1E2521330;
    v6 = v15;
    *(_QWORD *)(a3 + 32) = v14;
    *(_QWORD *)(a3 + 40) = v6;
    v7 = a3 + 40;
    v8 = v16;
    *(_QWORD *)(a3 + 48) = v16;
    if (v8)
    {
      *((_QWORD *)v6 + 2) = v7;
      v6 = 0;
      v14 = &v15;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v7;
    }
    *(_OWORD *)(a3 + 56) = v17;
    v17 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v12.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v6);
    MEMORY[0x18D7898AC](&v12);
    if (v37)
    {
      v31.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v33, v34);
      MEMORY[0x18D7898AC](&v31);
    }
    if (v24)
    {
      if (SBYTE7(v19) < 0)
        operator delete(v18.__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))v18.~runtime_error)(&v18);
    }
  }
}

_QWORD *AMSCore::ImmutableBag::getUnsignedIntValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  int cat;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::system_error *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  _QWORD *result;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error v25;
  std::error_code v26;
  unsigned int **v27;
  unsigned int *v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  std::runtime_error v32;
  std::error_code ec;
  unsigned int **v34;
  unsigned int *v35;
  uint64_t v36;
  __int128 v37;
  std::system_error v38;
  unsigned int **v39;
  unsigned int *v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  std::runtime_error v44;
  std::error_code v45;
  unsigned int **v46;
  unsigned int *v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;
  std::error_code v54;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 8);
  v52 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v44, a2, v4, (uint64_t)v51);
  if (v50)
  {
    cat = (int)v45.__cat_;
    if (LODWORD(v45.__cat_) == -1)
      cat = 0;
    switch(cat)
    {
      case 1:
        v13 = 0;
        LOBYTE(v6) = v44.__vftable;
        goto LABEL_28;
      case 2:
        v6 = (unint64_t)*(double *)&v44.__vftable;
        goto LABEL_27;
      case 3:
      case 4:
        v6 = (unint64_t)v44.__vftable;
LABEL_27:
        v13 = v6 & 0xFFFFFFFFFFFFFF00;
LABEL_28:
        v25.__vftable = (std::runtime_error_vtbl *)(v13 | v6);
        LOBYTE(v25.__imp_.__imp_) = (_BYTE)v46;
        v31 = 1;
        break;
      default:
        AMSCore::StringUtils::join<char [48]>((std::string *)&v25, "Bag type is not convertible to an unsigned int.");
        v54.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
        *(_QWORD *)&v54.__val_ = 202;
        std::system_error::system_error(&v38, v54, (const std::string *)&v25);
        if (*((char *)&v26.__val_ + 7) < 0)
          operator delete(v25.__vftable);
        v40 = 0;
        v41 = 0;
        v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v39 = &v40;
        v42 = 0uLL;
        std::runtime_error::runtime_error(&v32, &v38);
        ec = v38.__ec_;
        v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v14 = v40;
        v34 = v39;
        v35 = v40;
        v36 = v41;
        if (v41)
        {
          *((_QWORD *)v40 + 2) = &v35;
          v14 = 0;
          v39 = &v40;
          v40 = 0;
          v41 = 0;
        }
        else
        {
          v34 = &v35;
        }
        v37 = v42;
        v42 = 0uLL;
        v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v14);
        MEMORY[0x18D7898AC](&v38);
        std::runtime_error::runtime_error(&v25, &v32);
        v26 = ec;
        v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v15 = v35;
        v27 = v34;
        v28 = v35;
        v29 = v36;
        if (v36)
        {
          *((_QWORD *)v35 + 2) = &v28;
          v15 = 0;
          v34 = &v35;
          v35 = 0;
          v36 = 0;
        }
        else
        {
          v27 = &v28;
        }
        v30 = v37;
        v37 = 0uLL;
        v31 = 0;
        v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v15);
        v12 = (std::system_error *)&v32;
        goto LABEL_41;
    }
  }
  else
  {
    std::runtime_error::runtime_error(&v38, &v44);
    v38.__ec_ = v45;
    v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v39 = v46;
    v40 = v47;
    v41 = v48;
    if (v48)
    {
      *((_QWORD *)v47 + 2) = &v40;
      v46 = &v47;
      v47 = 0;
      v48 = 0;
    }
    else
    {
      v39 = &v40;
    }
    v42 = v49;
    v49 = 0uLL;
    v43 = 1;
    std::runtime_error::runtime_error(&v25, &v38);
    v26 = v38.__ec_;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v39;
    v28 = v40;
    v29 = v41;
    if (v41)
    {
      *((_QWORD *)v40 + 2) = &v28;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v42;
    v42 = 0uLL;
    std::runtime_error::runtime_error(&v32, &v25);
    ec = v26;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v7 = v28;
    v34 = v27;
    v35 = v28;
    v36 = v29;
    if (v29)
    {
      *((_QWORD *)v28 + 2) = &v35;
      v7 = 0;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v30;
    v30 = 0uLL;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v7);
    MEMORY[0x18D7898AC](&v25);
    std::runtime_error::runtime_error(&v25, &v32);
    v26 = ec;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v8 = v35;
    v27 = v34;
    v28 = v35;
    v29 = v36;
    if (v36)
    {
      *((_QWORD *)v35 + 2) = &v28;
      v8 = 0;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v37;
    v37 = 0uLL;
    v31 = 0;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v8);
    MEMORY[0x18D7898AC](&v32);
    if (v43)
    {
      v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
      v12 = &v38;
LABEL_41:
      MEMORY[0x18D7898AC](v12);
      if (v50)
        goto LABEL_30;
LABEL_42:
      ((void (*)(std::runtime_error *))v44.~runtime_error)(&v44);
      goto LABEL_43;
    }
  }
  if (!v50)
    goto LABEL_42;
LABEL_30:
  if (LODWORD(v45.__cat_) != -1)
    ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[LODWORD(v45.__cat_)])(&v38, &v44);
LABEL_43:
  result = v52;
  if (v52 == v51)
  {
    v17 = 4;
    result = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_48;
    v17 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
LABEL_48:
  if (v31)
  {
    *(_QWORD *)a3 = v25.__vftable;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v44, &v25);
    v45 = v26;
    v44.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v46 = v27;
    v47 = v28;
    v48 = v29;
    if (v29)
    {
      *((_QWORD *)v28 + 2) = &v47;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      v46 = &v47;
    }
    v49 = v30;
    v30 = 0uLL;
    v50 = 1;
    std::runtime_error::runtime_error(&v38, &v44);
    v38.__ec_ = v45;
    v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v39 = v46;
    v40 = v47;
    v41 = v48;
    if (v48)
    {
      *((_QWORD *)v47 + 2) = &v40;
      v46 = &v47;
      v47 = 0;
      v48 = 0;
    }
    else
    {
      v39 = &v40;
    }
    v42 = v49;
    v49 = 0uLL;
    std::runtime_error::runtime_error(&v32, &v38);
    ec = v38.__ec_;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v18 = v40;
    v34 = v39;
    v35 = v40;
    v36 = v41;
    if (v41)
    {
      *((_QWORD *)v40 + 2) = &v35;
      v18 = 0;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v42;
    v42 = 0uLL;
    v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v18);
    MEMORY[0x18D7898AC](&v38);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v32);
    *(std::error_code *)(a3 + 16) = ec;
    *(_QWORD *)a3 = off_1E2521330;
    v19 = v35;
    *(_QWORD *)(a3 + 32) = v34;
    *(_QWORD *)(a3 + 40) = v19;
    v20 = a3 + 40;
    v21 = v36;
    *(_QWORD *)(a3 + 48) = v36;
    if (v21)
    {
      *((_QWORD *)v19 + 2) = v20;
      v19 = 0;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v20;
    }
    *(_OWORD *)(a3 + 56) = v37;
    v37 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v19);
    result = (_QWORD *)MEMORY[0x18D7898AC](&v32);
    if (v50)
    {
      v44.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v46, v47);
      result = (_QWORD *)MEMORY[0x18D7898AC](&v44);
    }
    if (!v31)
      return (_QWORD *)((uint64_t (*)(std::runtime_error *))v25.~runtime_error)(&v25);
  }
  return result;
}

void sub_18CBF3670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::ImmutableBag::getVectorValueForKey(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  int cat;
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  void *v34[2];
  std::error_code v35;
  unsigned int **v36;
  unsigned int *v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  std::runtime_error v41;
  std::error_code v42;
  unsigned int **v43;
  unsigned int *v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  char v48;
  std::system_error v49;
  unsigned int **v50;
  unsigned int *v51;
  uint64_t v52;
  __int128 v53;
  __int128 __p;
  __int128 v55;
  int v56;
  uint64_t v57[20];
  _BYTE v58[24];
  _BYTE *v59;
  std::runtime_error v60;
  std::error_code ec;
  unsigned int **v62;
  unsigned int *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  std::error_code v67;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 8);
  v59 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v41, a2, v4, (uint64_t)v58);
  if (v47)
  {
    cat = (int)v42.__cat_;
    if (LODWORD(v42.__cat_) == 9)
    {
      std::vector<AMSCore::Any>::vector(&v49, (uint64_t *)&v41);
      if (v47)
      {
        *(std::runtime_error *)v34 = v49.std::runtime_error;
        *(_QWORD *)&v35.__val_ = *(_QWORD *)&v49.__ec_.__val_;
        LOBYTE(v35.__cat_) = (_BYTE)v43;
        v40 = 1;
        goto LABEL_40;
      }
      goto LABEL_85;
    }
    if (LODWORD(v42.__cat_) == 8)
    {
      v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v7 = MEMORY[0x1E0DE4FE0] + 64;
      v8 = MEMORY[0x1E0DE4F60];
      v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v57[0] = MEMORY[0x1E0DE4FE0] + 64;
      v49.__vftable = v9;
      *(std::system_error_vtbl **)((char *)&v49.__vftable + (unint64_t)v9[-1].~system_error) = v10;
      v11 = (std::ios_base *)((char *)&v49 + (unint64_t)v49.__vftable[-1].~system_error);
      std::ios_base::init(v11, &v49.__imp_);
      v11[1].__vftable = 0;
      v11[1].__fmtflags_ = -1;
      v49.__vftable = v6 + 1;
      v57[0] = v7;
      std::streambuf::basic_streambuf();
      v12 = MEMORY[0x1E0DE4FB8];
      v49.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      __p = 0u;
      v55 = 0u;
      v56 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v49, (uint64_t)"A vector was requested but the bag contains a map instead.", 58);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v49.__imp_, (std::string *)v34);
      v49.__vftable = *(std::system_error_vtbl **)v8;
      *(std::system_error_vtbl **)((char *)&v49.__vftable + (unint64_t)v49.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
      v49.__imp_.__imp_ = (const char *)(v12 + 16);
      if (SBYTE7(v55) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v57);
      v67.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
      *(_QWORD *)&v67.__val_ = 202;
      std::system_error::system_error(&v49, v67, (const std::string *)v34);
      if (*((char *)&v35.__val_ + 7) < 0)
        operator delete(v34[0]);
      v51 = 0;
      v52 = 0;
      v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v50 = &v51;
      v53 = 0uLL;
      std::runtime_error::runtime_error(&v60, &v49);
      ec = v49.__ec_;
      v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v13 = v51;
      v62 = v50;
      v63 = v51;
      v64 = v52;
      if (v52)
      {
        *((_QWORD *)v51 + 2) = &v63;
        v13 = 0;
        v50 = &v51;
        v51 = 0;
        v52 = 0;
      }
      else
      {
        v62 = &v63;
      }
      v65 = v53;
      v53 = 0uLL;
      v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v13);
      MEMORY[0x18D7898AC](&v49);
      std::runtime_error::runtime_error((std::runtime_error *)v34, &v60);
      v35 = ec;
      v34[0] = off_1E2521330;
      v19 = v63;
      v36 = v62;
      v37 = v63;
      v38 = v64;
      if (v64)
      {
        *((_QWORD *)v63 + 2) = &v37;
        v19 = 0;
        v62 = &v63;
        v63 = 0;
        v64 = 0;
      }
      else
      {
        v36 = &v37;
      }
      v39 = v65;
      v65 = 0uLL;
      v40 = 0;
      v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v19);
      MEMORY[0x18D7898AC](&v60);
      if (!v47)
        goto LABEL_47;
      goto LABEL_40;
    }
    LOBYTE(v60.__vftable) = 0;
    LODWORD(ec.__cat_) = -1;
    if (LODWORD(v42.__cat_) != -1)
    {
      ((void (*)(std::system_error *, std::runtime_error *, std::runtime_error *))off_1E253CAE8[LODWORD(v42.__cat_)])(&v49, &v60, &v41);
      LODWORD(ec.__cat_) = cat;
      if (LODWORD(v42.__cat_) != -1)
      {
        if (!LODWORD(v42.__cat_))
          goto LABEL_19;
        ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[LODWORD(v42.__cat_)])(&v49, &v41);
      }
    }
    LODWORD(v42.__cat_) = 0;
LABEL_19:
    std::vector<AMSCore::Any>::vector[abi:fe180100](&v49, (uint64_t)&v60, 1uLL);
    if (v47)
    {
      LOBYTE(v49.__ec_.__cat_) = (_BYTE)v43;
      *(std::runtime_error *)v34 = v49.std::runtime_error;
      *(_QWORD *)&v35.__val_ = *(_QWORD *)&v49.__ec_.__val_;
      memset(&v49, 0, 24);
      LOBYTE(v35.__cat_) = (_BYTE)v43;
      v40 = 1;
      if (LODWORD(ec.__cat_) != -1)
        ((void (*)(char *, std::runtime_error *))off_1E253D240[LODWORD(ec.__cat_)])(&v48, &v60);
      goto LABEL_39;
    }
LABEL_85:
    __break(1u);
  }
  std::runtime_error::runtime_error(&v49, &v41);
  v49.__ec_ = v42;
  v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v50 = v43;
  v51 = v44;
  v52 = v45;
  if (v45)
  {
    *((_QWORD *)v44 + 2) = &v51;
    v43 = &v44;
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v50 = &v51;
  }
  v53 = v46;
  v46 = 0uLL;
  LOBYTE(__p) = 1;
  std::runtime_error::runtime_error((std::runtime_error *)v34, &v49);
  v35 = v49.__ec_;
  v34[0] = off_1E2521330;
  v36 = v50;
  v37 = v51;
  v38 = v52;
  if (v52)
  {
    *((_QWORD *)v51 + 2) = &v37;
    v50 = &v51;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    v36 = &v37;
  }
  v39 = v53;
  v53 = 0uLL;
  std::runtime_error::runtime_error(&v60, (const std::runtime_error *)v34);
  ec = v35;
  v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v14 = v37;
  v62 = v36;
  v63 = v37;
  v64 = v38;
  if (v38)
  {
    *((_QWORD *)v37 + 2) = &v63;
    v14 = 0;
    v36 = &v37;
    v37 = 0;
    v38 = 0;
  }
  else
  {
    v62 = &v63;
  }
  v65 = v39;
  v39 = 0uLL;
  v34[0] = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v14);
  MEMORY[0x18D7898AC](v34);
  std::runtime_error::runtime_error((std::runtime_error *)v34, &v60);
  v35 = ec;
  v34[0] = off_1E2521330;
  v15 = v63;
  v36 = v62;
  v37 = v63;
  v38 = v64;
  if (v64)
  {
    *((_QWORD *)v63 + 2) = &v37;
    v15 = 0;
    v62 = &v63;
    v63 = 0;
    v64 = 0;
  }
  else
  {
    v36 = &v37;
  }
  v39 = v65;
  v65 = 0uLL;
  v40 = 0;
  v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v15);
  MEMORY[0x18D7898AC](&v60);
  if ((_BYTE)__p)
  {
    v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v51);
    MEMORY[0x18D7898AC](&v49);
  }
LABEL_39:
  if (!v47)
  {
LABEL_47:
    ((void (*)(std::runtime_error *))v41.~runtime_error)(&v41);
    goto LABEL_48;
  }
LABEL_40:
  if (LODWORD(v42.__cat_) != -1)
    ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[LODWORD(v42.__cat_)])(&v49, &v41);
LABEL_48:
  v20 = v59;
  if (v59 == v58)
  {
    v21 = 4;
    v20 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_53;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_53:
  if (v40)
  {
    *(_OWORD *)a3 = *(_OWORD *)v34;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v35.__val_;
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v49, (const std::runtime_error *)v34);
    v49.__ec_ = v35;
    v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v50 = v36;
    v51 = v37;
    v52 = v38;
    if (v38)
    {
      *((_QWORD *)v37 + 2) = &v51;
      v36 = &v37;
      v37 = 0;
      v38 = 0;
    }
    else
    {
      v50 = &v51;
    }
    v53 = v39;
    v39 = 0uLL;
    LOBYTE(__p) = 1;
    std::runtime_error::runtime_error(&v41, &v49);
    v42 = v49.__ec_;
    v41.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v43 = v50;
    v44 = v51;
    v45 = v52;
    if (v52)
    {
      *((_QWORD *)v51 + 2) = &v44;
      v50 = &v51;
      v51 = 0;
      v52 = 0;
    }
    else
    {
      v43 = &v44;
    }
    v46 = v53;
    v53 = 0uLL;
    std::runtime_error::runtime_error(&v60, &v41);
    ec = v42;
    v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v22 = v44;
    v62 = v43;
    v63 = v44;
    v64 = v45;
    if (v45)
    {
      *((_QWORD *)v44 + 2) = &v63;
      v22 = 0;
      v43 = &v44;
      v44 = 0;
      v45 = 0;
    }
    else
    {
      v62 = &v63;
    }
    v65 = v46;
    v46 = 0uLL;
    v41.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v43, v22);
    MEMORY[0x18D7898AC](&v41);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v60);
    *(std::error_code *)(a3 + 16) = ec;
    *(_QWORD *)a3 = off_1E2521330;
    v23 = v63;
    *(_QWORD *)(a3 + 32) = v62;
    *(_QWORD *)(a3 + 40) = v23;
    v24 = a3 + 40;
    v25 = v64;
    *(_QWORD *)(a3 + 48) = v64;
    if (v25)
    {
      *((_QWORD *)v23 + 2) = v24;
      v23 = 0;
      v62 = &v63;
      v63 = 0;
      v64 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v24;
    }
    *(_OWORD *)(a3 + 56) = v65;
    v65 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    v60.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v23);
    MEMORY[0x18D7898AC](&v60);
    if ((_BYTE)__p)
    {
      v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (*((_QWORD *)&v53 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v51);
      MEMORY[0x18D7898AC](&v49);
    }
    v29 = (char *)v34[0];
    if (v40)
    {
      if (v34[0])
      {
        v30 = (char *)v34[1];
        v31 = v34[0];
        if (v34[1] != v34[0])
        {
          do
          {
            v32 = v30 - 32;
            v33 = *((unsigned int *)v30 - 2);
            if ((_DWORD)v33 != -1)
              ((void (*)(std::system_error *, char *))off_1E253D240[v33])(&v49, v30 - 32);
            *((_DWORD *)v30 - 2) = -1;
            v30 -= 32;
          }
          while (v32 != v29);
          v31 = v34[0];
        }
        v34[1] = v29;
        operator delete(v31);
      }
    }
    else
    {
      (*(void (**)(void **))v34[0])(v34);
    }
  }
}

void sub_18CBF400C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::ImmutableBag::getURLValueForKey(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a1 + 24);
}

_QWORD *AMSCore::ImmutableBag::getURLValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::runtime_error_vtbl *v4;
  std::runtime_error *v6;
  uint64_t *v7;
  unint64_t v8;
  size_t size;
  char *v10;
  char *v11;
  unint64_t v12;
  std::string *p_p;
  std::string::size_type v15;
  int v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int *v29;
  unsigned int *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *result;
  uint64_t v48;
  char *v49;
  char *v50;
  BOOL v51;
  int64_t v52;
  std::string::size_type v53;
  std::string::size_type v54;
  int v55;
  std::string::size_type v56;
  unint64_t v57;
  const std::string::value_type *v58;
  const std::string::value_type *v59;
  unint64_t i;
  const std::string::value_type *v61;
  int v62;
  uint64_t v63;
  std::string::size_type v64;
  const std::string::value_type *v65;
  void **v66;
  _BYTE *v67;
  int64_t v68;
  BOOL v69;
  unint64_t v70;
  std::string *v72;
  const std::string::value_type *v73;
  std::string::size_type v74;
  std::string::size_type v75;
  int v76;
  std::string *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  _BYTE *v83;
  int64_t v84;
  int64_t v86;
  _BYTE *v87;
  const char *v88;
  _BYTE *v89;
  _BYTE *v90;
  std::runtime_error_vtbl *v91;
  const char *v92;
  int v93;
  void **v94;
  const std::string::value_type *v95;
  std::string::size_type imp;
  unsigned int *v97;
  unsigned int *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101[2];
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _BYTE v105[24];
  uint64_t v106;
  char v107;
  int v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  std::runtime_error v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _BYTE v119[24];
  uint64_t v120;
  unsigned __int8 v121;
  int v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  char v128;
  std::string v129;
  std::string __p;
  std::runtime_error v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  std::runtime_error v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  char v141;
  _BYTE v142[24];
  _BYTE *v143;
  std::runtime_error v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _BYTE v148[24];
  uint64_t v149;
  char v150;
  int v151;
  uint64_t *v152;
  uint64_t **v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  char v158;
  _QWORD v159[3];
  _QWORD *v160;
  uint64_t v161;

  v6 = &v115;
  v161 = *MEMORY[0x1E0C80C00];
  v159[0] = &off_1E2521810;
  v159[1] = a3;
  v160 = v159;
  v7 = *(uint64_t **)(a1 + 8);
  v143 = 0;
  AMSCore::BagDataAccessor::getStringValue((uint64_t)&v136, a2, v7, (uint64_t)v142);
  if (!v141)
  {
    std::runtime_error::runtime_error(&v115, &v136);
    v116 = v137;
    v115.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v117 = v138;
    v118 = v139;
    if (v139)
    {
      *(_QWORD *)(*((_QWORD *)&v138 + 1) + 16) = (char *)&v117 + 8;
      *(_QWORD *)&v138 = (char *)&v138 + 8;
      *((_QWORD *)&v138 + 1) = 0;
      v139 = 0;
    }
    else
    {
      *(_QWORD *)&v117 = (char *)&v117 + 8;
    }
    *(_OWORD *)v119 = v140;
    v140 = 0uLL;
    v119[16] = 1;
    std::runtime_error::runtime_error((std::runtime_error *)v101, &v115);
    v102 = v116;
    v101[0] = off_1E2521330;
    v103 = v117;
    v104 = v118;
    if (v118)
    {
      *(_QWORD *)(*((_QWORD *)&v117 + 1) + 16) = (char *)&v103 + 8;
      *(_QWORD *)&v117 = (char *)&v117 + 8;
      *((_QWORD *)&v117 + 1) = 0;
      v118 = 0;
    }
    else
    {
      *(_QWORD *)&v103 = (char *)&v103 + 8;
    }
    *(_OWORD *)v105 = *(_OWORD *)v119;
    *(_QWORD *)v119 = 0;
    *(_QWORD *)&v119[8] = 0;
    std::runtime_error::runtime_error(&v131, (const std::runtime_error *)v101);
    v132 = v102;
    size = (size_t)&v133;
    v29 = (unsigned int *)*((_QWORD *)&v103 + 1);
    v131.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v133 = v103;
    v4 = (std::runtime_error_vtbl *)((char *)&v133 + 8);
    v134 = v104;
    if (v104)
    {
      *(_QWORD *)(*((_QWORD *)&v103 + 1) + 16) = (char *)&v133 + 8;
      v29 = 0;
      *(_QWORD *)&v103 = (char *)&v103 + 8;
      *((_QWORD *)&v103 + 1) = 0;
      v104 = 0;
    }
    else
    {
      *(_QWORD *)&v133 = (char *)&v133 + 8;
    }
    v135 = *(_OWORD *)v105;
    *(_OWORD *)v105 = 0uLL;
    v101[0] = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v103, v29);
    MEMORY[0x18D7898AC](v101);
    v8 = (unint64_t)&v144;
    std::runtime_error::runtime_error(&v144, &v131);
    v145 = v132;
    v144.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v30 = (unsigned int *)*((_QWORD *)&v133 + 1);
    v146 = v133;
    v147 = v134;
    if (v134)
    {
      *(_QWORD *)(*((_QWORD *)&v133 + 1) + 16) = (char *)&v146 + 8;
      v30 = 0;
      *(_QWORD *)&v133 = (char *)&v133 + 8;
      *((_QWORD *)&v133 + 1) = 0;
      v134 = 0;
    }
    else
    {
      *(_QWORD *)&v146 = (char *)&v146 + 8;
    }
    *(_OWORD *)v148 = v135;
    v135 = 0uLL;
    v158 = 0;
    v131.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v133, v30);
    MEMORY[0x18D7898AC](&v131);
    v6 = &v115;
    if (v119[16])
    {
      size = (size_t)&v117;
      v115.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v8 = *(_QWORD *)&v119[8];
      if (*(_QWORD *)&v119[8])
      {
        v31 = (unint64_t *)(*(_QWORD *)&v119[8] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v8 + 16))(v8);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, *((unsigned int **)&v117 + 1));
      MEMORY[0x18D7898AC](&v115);
    }
    goto LABEL_67;
  }
  v129.__r_.__value_.__r.__words[2] = v137;
  *(std::runtime_error *)&v129.__r_.__value_.__l.__data_ = v136;
  v136.__vftable = 0;
  v136.__imp_.__imp_ = 0;
  *(_QWORD *)&v137 = 0;
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = (unint64_t)&v129;
  else
    v8 = v129.__r_.__value_.__r.__words[0];
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  else
    size = v129.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_14;
  v10 = (char *)memchr((void *)v8, 123, size);
  if (!v10)
    goto LABEL_14;
  v11 = &v10[-v8];
  v12 = (unint64_t)&v10[-v8 + 1];
  if (&v10[-v8] == (char *)-1 || size <= v12)
    goto LABEL_14;
  v49 = (char *)memchr(v10 + 1, 125, size - v12);
  v50 = &v49[-v8];
  v51 = !v49 || v50 + 1 == 0;
  if (v51
    || ((v52 = v50 - v11, size - (unint64_t)v11 >= v52 + 1) ? (v53 = v52 + 1) : (v53 = size - (_QWORD)v11),
        v101[0] = 0,
        v101[1] = 0,
        *(_QWORD *)&v102 = 0,
        !v53))
  {
LABEL_14:
    __p = v129;
    memset(&v129, 0, sizeof(v129));
    goto LABEL_15;
  }
  size = (size_t)&v11[v8];
  v4 = (std::runtime_error_vtbl *)v101;
  v6 = &v144;
  do
  {
    v54 = 0;
    while (1)
    {
      v55 = *(unsigned __int8 *)(size + v54);
      if (v55 != 125 && v55 != 123)
        break;
      if (v53 == ++v54)
        goto LABEL_132;
    }
    v56 = v54;
    if (v54 == -1)
    {
LABEL_132:
      v57 = 0;
      v58 = 0;
      goto LABEL_133;
    }
    v57 = v53 - v54;
    if (v53 < v56)
      std::__throw_out_of_range[abi:fe180100]("string_view::substr");
    v58 = (const std::string::value_type *)(size + v56);
LABEL_133:
    v59 = v58 - 1;
    for (i = v57; ; --i)
    {
      if (!i)
      {
        v64 = 0;
        v65 = 0;
        goto LABEL_147;
      }
      v61 = &v59[i];
      v62 = v59[i];
      if (v62 != 125 && v62 != 123)
        break;
    }
    v63 = v61 - v58;
    if (v57 >= v61 - v58 + 1)
      v57 = v63 + 1;
    if (v63 == -1)
      v64 = 0;
    else
      v64 = v57;
    if (v63 == -1)
      v65 = 0;
    else
      v65 = v58;
LABEL_147:
    std::string::__assign_external((std::string *)v101, v65, v64);
    v144.__imp_.__imp_ = 0;
    v144.__vftable = 0;
    *(_QWORD *)&v145 = 0;
    if ((SBYTE7(v102) & 0x80u) == 0)
      v66 = v101;
    else
      v66 = (void **)v101[0];
    if ((SBYTE7(v102) & 0x80u) == 0)
      v8 = BYTE7(v102);
    else
      v8 = (unint64_t)v101[1];
    if (v8)
    {
      v67 = memchr(v66, 36, v8);
      v68 = v67 - (_BYTE *)v66;
      v69 = !v67 || v68 == -1;
      v70 = v68 + 1;
      if (!v69 && v8 > v70)
      {
        v83 = memchr((char *)v66 + v70, 36, v8 - v70);
        v84 = v83 - (_BYTE *)v66;
        if (v83 && v84 != -1)
        {
          v86 = v84 - v68;
          if (v8 - v68 >= v86 + 1)
            v8 = v86 + 1;
          else
            v8 -= v68;
          if (v8)
          {
            v87 = (char *)v66 + v68;
            v88 = (const char *)v8;
            v89 = v87;
            while (*v89 == 36)
            {
              ++v89;
              if (!--v88)
                goto LABEL_208;
            }
            v90 = (_BYTE *)(v89 - v87);
            if (v90 == (_BYTE *)-1)
            {
              v88 = 0;
LABEL_208:
              v91 = 0;
              goto LABEL_209;
            }
            v88 = (const char *)(v8 - (_QWORD)v90);
            if (v8 < (unint64_t)v90)
              std::__throw_out_of_range[abi:fe180100]("string_view::substr");
            v91 = (std::runtime_error_vtbl *)&v90[(_QWORD)v87];
LABEL_209:
            v92 = v88;
            do
            {
              if (!v92)
                goto LABEL_216;
              v93 = (v92--)[(_QWORD)v91 - 1];
            }
            while (v93 == 36);
            if (v92 == (const char *)-1)
            {
LABEL_216:
              v88 = 0;
              v91 = 0;
              goto LABEL_217;
            }
            if (v88 >= v92 + 1)
              v88 = v92 + 1;
LABEL_217:
            v131.__vftable = v91;
            v131.__imp_.__imp_ = v88;
            if (!v160)
              std::__throw_bad_function_call[abi:fe180100]();
            (*(void (**)(std::runtime_error *__return_ptr, _QWORD *, std::runtime_error *))(*v160 + 48))(&v115, v160, &v131);
            if (BYTE8(v116))
            {
              if ((SBYTE7(v102) & 0x80u) == 0)
                v94 = v101;
              else
                v94 = (void **)v101[0];
              if ((SBYTE7(v116) & 0x80u) == 0)
                v95 = (const std::string::value_type *)&v115;
              else
                v95 = (const std::string::value_type *)v115.__vftable;
              if ((SBYTE7(v116) & 0x80u) == 0)
                imp = BYTE7(v116);
              else
                imp = (std::string::size_type)v115.__imp_.__imp_;
              std::string::replace((std::string *)v101, v87 - (_BYTE *)v94, v8, v95, imp);
              if (SBYTE7(v145) < 0)
                operator delete(v144.__vftable);
              v144 = *(std::runtime_error *)v101;
              *(_QWORD *)&v145 = v102;
              BYTE7(v102) = 0;
              LOBYTE(v101[0]) = 0;
              if (BYTE8(v116) && SBYTE7(v116) < 0)
                operator delete(v115.__vftable);
            }
          }
        }
      }
    }
    v72 = &v129;
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v72 = (std::string *)v129.__r_.__value_.__r.__words[0];
    if ((SBYTE7(v145) & 0x80u) == 0)
      v73 = (const std::string::value_type *)&v144;
    else
      v73 = (const std::string::value_type *)v144.__vftable;
    if ((SBYTE7(v145) & 0x80u) == 0)
      v74 = BYTE7(v145);
    else
      v74 = (std::string::size_type)v144.__imp_.__imp_;
    std::string::replace(&v129, size - (_QWORD)v72, v53, v73, v74);
    v75 = BYTE7(v145);
    v76 = SBYTE7(v145);
    if (SBYTE7(v145) < 0)
      v75 = (std::string::size_type)v144.__imp_.__imp_;
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v129.__r_.__value_.__l.__size_ < v75)
        goto LABEL_234;
      v77 = (std::string *)v129.__r_.__value_.__r.__words[0];
      v8 = v129.__r_.__value_.__l.__size_ - v75;
      if (v129.__r_.__value_.__l.__size_ == v75)
        goto LABEL_187;
    }
    else
    {
      if (v75 > HIBYTE(v129.__r_.__value_.__r.__words[2]))
        goto LABEL_234;
      v77 = &v129;
      v8 = HIBYTE(v129.__r_.__value_.__r.__words[2]) - v75;
      if (HIBYTE(v129.__r_.__value_.__r.__words[2]) == v75)
        goto LABEL_187;
    }
    v78 = (char *)v77 + v75;
    v79 = (char *)memchr((char *)v77 + v75, 123, v8);
    v53 = 0;
    if (!v79)
      goto LABEL_202;
    v80 = (char *)(v79 - v78);
    size = 0;
    if (v79 - v78 == -1)
      goto LABEL_188;
    if (v8 <= (unint64_t)(v80 + 1))
    {
LABEL_187:
      v53 = 0;
      size = 0;
LABEL_188:
      if ((v76 & 0x80000000) == 0)
        continue;
LABEL_189:
      operator delete(v144.__vftable);
      continue;
    }
    v81 = (char *)memchr(v79 + 1, 125, v8 - (v79 - v78 + 1));
    v53 = 0;
    if (v81)
    {
      size = 0;
      if (v81 - v78 == -1)
        goto LABEL_188;
      v82 = (char *)(v81 - v78 - (_QWORD)v80);
      size = (size_t)&v80[(_QWORD)v78];
      if (v8 - (unint64_t)v80 >= (unint64_t)(v82 + 1))
        v53 = (std::string::size_type)(v82 + 1);
      else
        v53 = v8 - (_QWORD)v80;
      if (v76 < 0)
        goto LABEL_189;
    }
    else
    {
LABEL_202:
      size = 0;
      if (v76 < 0)
        goto LABEL_189;
    }
  }
  while (v53);
  __p = v129;
  memset(&v129, 0, sizeof(v129));
  v6 = &v115;
  if (SBYTE7(v102) < 0)
  {
    operator delete(v101[0]);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v129.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  AMSCore::URL::parse((uint64_t)p_p, v15, (uint64_t)&v115);
  if (!v128)
  {
    AMSCore::nestedError<std::expected<AMSCore::URL,AMSCore::Error> &>(v101, (uint64_t)&v115, 200, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
    if (v105[16])
    {
      std::runtime_error::runtime_error(&v144, (const std::runtime_error *)v101);
      size = (size_t)&v145;
      v145 = v102;
      v4 = (std::runtime_error_vtbl *)off_1E2521330;
      v144.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v8 = (unint64_t)&v146;
      v6 = (std::runtime_error *)((char *)&v146 + 8);
      v146 = v103;
      v147 = v104;
      if (v104)
      {
        *(_QWORD *)(*((_QWORD *)&v103 + 1) + 16) = (char *)&v146 + 8;
        *(_QWORD *)&v103 = (char *)&v103 + 8;
        *((_QWORD *)&v103 + 1) = 0;
        v104 = 0;
        goto LABEL_236;
      }
      goto LABEL_235;
    }
    if (!v128)
      goto LABEL_234;
  }
  LOBYTE(v101[0]) = 0;
  BYTE8(v102) = 0;
  v16 = BYTE8(v116);
  if (BYTE8(v116))
  {
    *(std::runtime_error *)v101 = v115;
    *(_QWORD *)&v102 = v116;
    v115.__imp_.__imp_ = 0;
    *(_QWORD *)&v116 = 0;
    v115.__vftable = 0;
    BYTE8(v102) = 1;
  }
  LOBYTE(v103) = 0;
  v105[0] = 0;
  v17 = v119[0];
  if (v119[0])
  {
    v103 = v117;
    v104 = v118;
    v118 = 0;
    v117 = 0uLL;
    v105[0] = 1;
  }
  v105[8] = 0;
  v107 = 0;
  v18 = v121;
  if (v121)
  {
    *(_OWORD *)&v105[8] = *(_OWORD *)&v119[8];
    v106 = v120;
    v120 = 0;
    *(_OWORD *)&v119[8] = 0uLL;
    v107 = 1;
  }
  v108 = v122;
  v19 = &v109;
  v109 = (uint64_t)&v109;
  v110 = &v109;
  v111 = 0;
  v20 = v125;
  if (v125)
  {
    v22 = v123;
    v21 = v124;
    v23 = *v124;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v123 + 8);
    **(_QWORD **)(v22 + 8) = v23;
    v24 = v109;
    *(_QWORD *)(v109 + 8) = v21;
    *v21 = v24;
    v109 = v22;
    *(_QWORD *)(v22 + 8) = &v109;
    v111 = v20;
    v125 = 0;
    v19 = (uint64_t *)v22;
  }
  v112 = v126;
  v113 = v127;
  v127 = 0;
  v126 = 0uLL;
  if (!v141)
    goto LABEL_234;
  v25 = BYTE8(v137);
  v114 = BYTE8(v137);
  LOBYTE(v144.__vftable) = 0;
  BYTE8(v145) = 0;
  if (v16)
  {
    v144 = *(std::runtime_error *)v101;
    *(_QWORD *)&v145 = v102;
    v101[1] = 0;
    *(_QWORD *)&v102 = 0;
    v101[0] = 0;
    BYTE8(v145) = 1;
  }
  LOBYTE(v146) = 0;
  v148[0] = 0;
  if (v17)
  {
    v146 = v103;
    v147 = v104;
    v104 = 0;
    v103 = 0uLL;
    v148[0] = 1;
  }
  v148[8] = 0;
  v150 = 0;
  if (v18)
  {
    *(_OWORD *)&v148[8] = *(_OWORD *)&v105[8];
    v149 = v106;
    *(_QWORD *)&v105[16] = 0;
    v106 = 0;
    *(_QWORD *)&v105[8] = 0;
    v150 = 1;
  }
  v151 = v108;
  v152 = (uint64_t *)&v152;
  v153 = &v152;
  v154 = 0;
  if (v20)
  {
    v26 = v110;
    v27 = *v110;
    *(_QWORD *)(v27 + 8) = v19[1];
    *(_QWORD *)v19[1] = v27;
    v28 = v152;
    v152[1] = (uint64_t)v26;
    *v26 = (uint64_t)v28;
    v152 = v19;
    v19[1] = (uint64_t)&v152;
    v154 = v20;
    v111 = 0;
  }
  v155 = v112;
  v156 = v113;
  v113 = 0;
  v112 = 0uLL;
  v157 = v25;
  v158 = 1;
  AMSCore::URL::~URL((AMSCore::URL *)v101);
  while (2)
  {
    if (v128)
    {
      AMSCore::URL::~URL((AMSCore::URL *)&v115);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_49:
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      ((void (*)(std::runtime_error *))v115.~runtime_error)(&v115);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_49;
    }
LABEL_67:
    if (v141)
    {
      if (SBYTE7(v137) < 0)
        operator delete(v136.__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))v136.~runtime_error)(&v136);
    }
    v33 = v143;
    if (v143 == v142)
    {
      v34 = 4;
      v33 = v142;
LABEL_75:
      (*(void (**)(void))(*v33 + 8 * v34))();
    }
    else if (v143)
    {
      v34 = 5;
      goto LABEL_75;
    }
    if (v158)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      if (BYTE8(v145))
      {
        *(std::runtime_error *)a4 = v144;
        *(_QWORD *)(a4 + 16) = v145;
        *(_QWORD *)&v145 = 0;
        v144.__vftable = 0;
        v144.__imp_.__imp_ = 0;
        *(_BYTE *)(a4 + 24) = 1;
      }
      *(_BYTE *)(a4 + 32) = 0;
      *(_BYTE *)(a4 + 56) = 0;
      if (v148[0])
      {
        *(_OWORD *)(a4 + 32) = v146;
        *(_QWORD *)(a4 + 48) = v147;
        v147 = 0;
        v146 = 0uLL;
        *(_BYTE *)(a4 + 56) = 1;
      }
      *(_BYTE *)(a4 + 64) = 0;
      *(_BYTE *)(a4 + 88) = 0;
      if (v150)
      {
        *(_OWORD *)(a4 + 64) = *(_OWORD *)&v148[8];
        *(_QWORD *)(a4 + 80) = v149;
        v149 = 0;
        *(_OWORD *)&v148[8] = 0uLL;
        *(_BYTE *)(a4 + 88) = 1;
      }
      *(_DWORD *)(a4 + 96) = v151;
      *(_QWORD *)(a4 + 104) = a4 + 104;
      *(_QWORD *)(a4 + 112) = a4 + 104;
      *(_QWORD *)(a4 + 120) = 0;
      if (&v144 != (std::runtime_error *)a4)
      {
        v35 = v154;
        if (v154)
        {
          v36 = v153;
          v37 = v152;
          v38 = *v153;
          v38[1] = v152[1];
          *(_QWORD *)v37[1] = v38;
          v39 = *(uint64_t **)(a4 + 104);
          v39[1] = (uint64_t)v36;
          *v36 = v39;
          *(_QWORD *)(a4 + 104) = v37;
          v37[1] = a4 + 104;
          *(_QWORD *)(a4 + 120) = v35;
          v154 = 0;
        }
        *(_OWORD *)(a4 + 128) = v155;
        *(_QWORD *)(a4 + 144) = v156;
        v156 = 0;
        v155 = 0uLL;
        *(_BYTE *)(a4 + 152) = 1;
        goto LABEL_106;
      }
LABEL_234:
      __break(1u);
LABEL_235:
      *(_QWORD *)&v146 = v6;
LABEL_236:
      *(_OWORD *)v148 = *(_OWORD *)v105;
      *(_OWORD *)v105 = 0uLL;
      std::runtime_error::runtime_error(&v131, &v144);
      v132 = *(_OWORD *)size;
      size = (size_t)&v133;
      v97 = (unsigned int *)*((_QWORD *)&v146 + 1);
      v131.__vftable = v4;
      v133 = v146;
      v134 = v147;
      if (v147)
      {
        *(_QWORD *)(*((_QWORD *)&v146 + 1) + 16) = (char *)&v133 + 8;
        v97 = 0;
        *(_QWORD *)&v146 = v6;
        v6->__vftable = 0;
        v6->__imp_.__imp_ = 0;
      }
      else
      {
        *(_QWORD *)&v133 = (char *)&v133 + 8;
      }
      v135 = *(_OWORD *)v148;
      *(_QWORD *)v148 = 0;
      *(_QWORD *)&v148[8] = 0;
      v144.__vftable = v4;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v8, v97);
      MEMORY[0x18D7898AC](&v144);
      std::runtime_error::runtime_error(&v144, &v131);
      v145 = v132;
      v144.__vftable = v4;
      v98 = (unsigned int *)*((_QWORD *)&v133 + 1);
      v146 = v133;
      v147 = v134;
      v8 = (unint64_t)v101;
      if (v134)
      {
        *(_QWORD *)(*((_QWORD *)&v133 + 1) + 16) = (char *)&v146 + 8;
        v98 = 0;
        *(_QWORD *)&v133 = (char *)&v133 + 8;
        *((_QWORD *)&v133 + 1) = 0;
        v134 = 0;
      }
      else
      {
        *(_QWORD *)&v146 = (char *)&v146 + 8;
      }
      *(_OWORD *)v148 = v135;
      v135 = 0uLL;
      v158 = 0;
      v131.__vftable = v4;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v133, v98);
      MEMORY[0x18D7898AC](&v131);
      v6 = &v115;
      if (v105[16])
      {
        size = (size_t)&v103;
        v101[0] = v4;
        v8 = *(_QWORD *)&v105[8];
        if (*(_QWORD *)&v105[8])
        {
          v99 = (unint64_t *)(*(_QWORD *)&v105[8] + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v8 + 16))(v8);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v103, *((unsigned int **)&v103 + 1));
        MEMORY[0x18D7898AC](v101);
      }
      continue;
    }
    break;
  }
  std::runtime_error::runtime_error(&v115, &v144);
  v116 = v145;
  v115.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v117 = v146;
  v118 = v147;
  if (v147)
  {
    *(_QWORD *)(*((_QWORD *)&v146 + 1) + 16) = (char *)&v117 + 8;
    *(_QWORD *)&v146 = (char *)&v146 + 8;
    *((_QWORD *)&v146 + 1) = 0;
    v147 = 0;
  }
  else
  {
    *(_QWORD *)&v117 = (char *)&v117 + 8;
  }
  *(_OWORD *)v119 = *(_OWORD *)v148;
  *(_QWORD *)&v148[8] = 0;
  *(_QWORD *)v148 = 0;
  v119[16] = 1;
  std::runtime_error::runtime_error((std::runtime_error *)v101, &v115);
  v102 = v116;
  v101[0] = off_1E2521330;
  v103 = v117;
  v104 = v118;
  if (v118)
  {
    *(_QWORD *)(*((_QWORD *)&v117 + 1) + 16) = (char *)&v103 + 8;
    *(_QWORD *)&v117 = (char *)&v117 + 8;
    *((_QWORD *)&v117 + 1) = 0;
    v118 = 0;
  }
  else
  {
    *(_QWORD *)&v103 = (char *)&v103 + 8;
  }
  *(_OWORD *)v105 = *(_OWORD *)v119;
  *(_QWORD *)v119 = 0;
  *(_QWORD *)&v119[8] = 0;
  std::runtime_error::runtime_error(&v136, (const std::runtime_error *)v101);
  v137 = v102;
  v136.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v40 = (unsigned int *)*((_QWORD *)&v103 + 1);
  v138 = v103;
  v139 = v104;
  if (v104)
  {
    *(_QWORD *)(*((_QWORD *)&v103 + 1) + 16) = (char *)&v138 + 8;
    v40 = 0;
    *(_QWORD *)&v103 = (char *)&v103 + 8;
    *((_QWORD *)&v103 + 1) = 0;
    v104 = 0;
  }
  else
  {
    *(_QWORD *)&v138 = (char *)&v138 + 8;
  }
  v140 = *(_OWORD *)v105;
  *(_OWORD *)v105 = 0uLL;
  v101[0] = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v103, v40);
  MEMORY[0x18D7898AC](v101);
  std::runtime_error::runtime_error((std::runtime_error *)a4, &v136);
  *(_OWORD *)(a4 + 16) = v137;
  *(_QWORD *)a4 = off_1E2521330;
  v41 = *((_QWORD *)&v138 + 1);
  *(_QWORD *)(a4 + 32) = v138;
  *(_QWORD *)(a4 + 40) = v41;
  v42 = a4 + 40;
  v43 = v139;
  *(_QWORD *)(a4 + 48) = v139;
  if (v43)
  {
    *(_QWORD *)(v41 + 16) = v42;
    v41 = 0;
    *(_QWORD *)&v138 = (char *)&v138 + 8;
    *((_QWORD *)&v138 + 1) = 0;
    v139 = 0;
  }
  else
  {
    *(_QWORD *)(a4 + 32) = v42;
  }
  *(_OWORD *)(a4 + 56) = v140;
  v140 = 0uLL;
  *(_BYTE *)(a4 + 152) = 0;
  v136.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v138, (unsigned int *)v41);
  MEMORY[0x18D7898AC](&v136);
  if (v119[16])
  {
    v115.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v44 = *(std::__shared_weak_count **)&v119[8];
    if (*(_QWORD *)&v119[8])
    {
      v45 = (unint64_t *)(*(_QWORD *)&v119[8] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, *((unsigned int **)&v117 + 1));
    MEMORY[0x18D7898AC](&v115);
  }
LABEL_106:
  if (v158)
    AMSCore::URL::~URL((AMSCore::URL *)&v144);
  else
    ((void (*)(std::runtime_error *))v144.~runtime_error)(&v144);
  result = v160;
  if (v160 == v159)
  {
    v48 = 4;
    result = v159;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v48))();
  }
  else if (v160)
  {
    v48 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v48))();
  }
  return result;
}

void sub_18CBF50F4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x247]) < 0)
      operator delete((void *)STACK[0x230]);
    if (a14 < 0)
      operator delete(a9);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMSCore::ImmutableBag::~ImmutableBag(AMSCore::ImmutableBag *this)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = off_1E25205C0;
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)this = off_1E25205C0;
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

void std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2521810;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2521810;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  size_t v9;
  std::string::size_type size;
  std::string *v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  std::string v16;
  int v17;
  char v18;

  v4 = *(uint64_t ***)(a1 + 8);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 == v6)
  {
LABEL_15:
    v13 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    while (1)
    {
      v8 = *v5;
      if (*(char *)(*v5 + 71) < 0)
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v8 + 48), *(_QWORD *)(v8 + 56));
      else
        v16 = *(std::string *)(v8 + 48);
      v17 = 5;
      v9 = *(_QWORD *)(a2 + 8);
      size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v16.__r_.__value_.__l.__size_;
      if (size == v9)
      {
        v11 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v16
            : (std::string *)v16.__r_.__value_.__r.__words[0];
        v12 = memcmp(v11, *(const void **)a2, v9) == 0;
      }
      else
      {
        v12 = 0;
      }
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v18, (uint64_t)&v16);
      if (v12)
        break;
      if (++v5 == v6)
        goto LABEL_15;
    }
    v14 = *v5;
    if (*(char *)(*v5 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v14 + 96), *(_QWORD *)(v14 + 104));
    }
    else
    {
      v15 = *(_OWORD *)(v14 + 96);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 112);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v15;
    }
    v13 = 1;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v13;
}

uint64_t std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore12ImmutableBag17getURLValueForKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allo"
                     "catorIcEEEERKNS1_6vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteISC_EEEENS5_ISF_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore12ImmutableBag17getURLValueForKeyERKNSt3__112basic_stringIcNS1_11char_traitsIc"
                                "EENS1_9allocatorIcEEEERKNS1_6vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_delet"
                                "eISC_EEEENS5_ISF_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore12ImmutableBag17getURLValueForKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteISC_EEEENS5_ISF_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore12ImmutableBag17getURLValueForKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteISC_EEEENS5_ISF_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::target_type()
{
}

uint64_t AMSCore::MutableBag::getExpirationTimePoint(AMSCore::MutableBag *this)
{
  std::__shared_mutex_base *v2;
  uint64_t v3;

  v2 = (std::__shared_mutex_base *)((char *)this + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 24));
  v3 = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
  std::__shared_mutex_base::unlock_shared(v2);
  return v3;
}

uint64_t AMSCore::MutableBag::getIsExpired(AMSCore::MutableBag *this, const AMSCore::ClockProvider *a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;

  v4 = (std::__shared_mutex_base *)((char *)this + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 24));
  v5 = (*(uint64_t (**)(_QWORD, const AMSCore::ClockProvider *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2);
  std::__shared_mutex_base::unlock_shared(v4);
  return v5;
}

void AMSCore::MutableBag::getBoolValueForKey(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;

  v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getDoubleValueForKey(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;

  v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getIntValueForKey(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;

  v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getMapValueForKey(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;

  v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getStringValueForKey(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;

  v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getUnsignedIntValueForKey(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;

  v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getVectorValueForKey(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;

  v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getURLValueForKey(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base *v4;

  v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getURLValueForKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_mutex_base *v6;

  v6 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a2, a3);
  std::__shared_mutex_base::unlock_shared(v6);
}

void AMSCore::MutableBag::~MutableBag(AMSCore::MutableBag *this)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = off_1E2520538;
  v2 = (std::mutex *)((char *)this + 24);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = off_1E2520538;
  v2 = (std::mutex *)((char *)this + 24);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::MutableBag::setBagData(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v4 = operator new(0x50uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2522818;
  v4[3] = off_1E25205C0;
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_OWORD *)v4 + 2) = v5;
  *((_OWORD *)v4 + 3) = v6;
  v4[8] = v7;
  v4[9] = v8;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 24));
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4 + 3;
  *(_QWORD *)(a1 + 16) = v4;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(a1 + 24));
}

void AMSCore::BagDataSource::getSynchronousBagData(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X8>)
{
  char *v10;
  _QWORD *v11;
  char *v12;
  std::runtime_error *v13;
  _OWORD *v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  const std::runtime_error *v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  const std::runtime_error *v49;
  char v50;
  const char **v51;
  std::__libcpp_refstring *p_imp;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int **v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  const std::runtime_error *v69;
  std::runtime_error_vtbl *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  const std::runtime_error *v86;
  char v87;
  uint64_t v88;
  std::__shared_weak_count *imp;
  unint64_t *v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int **v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  uint64_t *v114;
  uint64_t *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int **v139;
  _QWORD *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  std::runtime_error_vtbl *v147;
  std::runtime_error *v148;
  std::runtime_error *v149;
  std::runtime_error *v150;
  char *v151;
  _QWORD *v152;
  _QWORD *v153;
  __int128 v154;
  std::runtime_error *v155;
  __int128 v156;
  __int128 v157;
  char *v158;
  std::runtime_error *v159;
  std::runtime_error v160;
  __int128 v161;
  unsigned int **v162;
  unsigned int *v163;
  uint64_t v164;
  __int128 v165;
  std::runtime_error v166;
  __int128 v167;
  unsigned int **v168;
  unsigned int *v169;
  uint64_t v170;
  __int128 v171;
  char v172;
  std::runtime_error v173;
  __int128 v174;
  unsigned int **v175;
  unsigned int *v176;
  uint64_t v177;
  __int128 v178;

  v10 = (char *)operator new(0x268uLL);
  v11 = v10;
  v12 = v10 + 456;
  *(_QWORD *)v10 = AMSCore::BagDataSource::getSynchronousBagData;
  *((_QWORD *)v10 + 1) = AMSCore::BagDataSource::getSynchronousBagData;
  v13 = (std::runtime_error *)(v10 + 232);
  v155 = (std::runtime_error *)(v10 + 312);
  v14 = v10 + 392;
  v152 = v10 + 528;
  v153 = v10 + 480;
  v151 = v10 + 544;
  v158 = v10 + 16;
  v159 = (std::runtime_error *)(v10 + 152);
  *((_QWORD *)v10 + 70) = a1;
  v15 = a3[1];
  *(_OWORD *)(v10 + 392) = *a3;
  *(_OWORD *)(v10 + 408) = v15;
  v156 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  do
    v16 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v16 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v10 + 14) = 0;
  v10[24] = 0;
  v17 = (uint64_t)(v10 + 24);
  v10[104] = 0;
  *((_QWORD *)v10 + 18) = 0;
  v18 = (_QWORD *)operator new();
  *v18 = &off_1E2523500;
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = v158;
  *(_QWORD *)&v19 = v158;
  *((_QWORD *)&v19 + 1) = v18;
  *a5 = v19;
  v20 = v14[1];
  *(_OWORD *)(v11 + 53) = *v14;
  *(_OWORD *)(v11 + 55) = v20;
  *((_OWORD *)v11 + 31) = v156;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
  v21 = *(_OWORD *)(v11 + 29);
  *((_OWORD *)v12 + 7) = v21;
  v13->__vftable = 0;
  v13->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v21 + 96)))
  {
    v12[152] = 0;
    v23 = (unint64_t *)(v11[71] + 96);
    do
      v24 = __ldaxr(v23);
    while (__stlxr((unint64_t)v11, v23));
    if (!v24)
      return;
  }
  v25 = *((_QWORD *)v12 + 14);
  if (!*(_BYTE *)(v25 + 88))
    goto LABEL_203;
  v26 = (const std::runtime_error *)(v25 + 8);
  v27 = *(_BYTE *)(v25 + 80);
  if (v27)
  {
    *(_OWORD *)(v11 + 19) = *(_OWORD *)(v25 + 8);
    v26->__vftable = 0;
    *(_QWORD *)(v25 + 16) = 0;
    v11[21] = *(_QWORD *)(v25 + 24);
  }
  else
  {
    std::runtime_error::runtime_error(v159, v26);
    *(_OWORD *)(v11 + 21) = *(_OWORD *)(v25 + 24);
    v28 = (_QWORD *)(v25 + 48);
    v29 = *(_QWORD *)(v25 + 48);
    v11[24] = v29;
    v30 = v11 + 24;
    v11[19] = off_1E2521330;
    v11[23] = *(_QWORD *)(v25 + 40);
    v31 = *(_QWORD *)(v25 + 56);
    v11[25] = v31;
    if (v31)
    {
      *(_QWORD *)(v29 + 16) = v30;
      *(_QWORD *)(v25 + 40) = v28;
      *v28 = 0;
      *(_QWORD *)(v25 + 56) = 0;
    }
    else
    {
      v11[23] = v30;
    }
    v32 = v11[71];
    *((_OWORD *)v11 + 13) = *(_OWORD *)(v32 + 64);
    *(_QWORD *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 72) = 0;
  }
  *((_BYTE *)v11 + 224) = v27;
  v33 = v11[72];
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      v36 = (std::__shared_weak_count *)v11[72];
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v37 = (std::__shared_weak_count *)v11[30];
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)v11[63];
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      if (*((_BYTE *)v11 + 224))
        goto LABEL_29;
LABEL_37:
      std::runtime_error::runtime_error(&v166, v159);
      v53 = v11 + 24;
      v54 = v11[24];
      v167 = *(_OWORD *)(v11 + 21);
      v166.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v168 = (unsigned int **)v11[23];
      v169 = (unsigned int *)v54;
      v170 = v11[25];
      v148 = (std::runtime_error *)(v11 + 3);
      if (v170)
      {
        *(_QWORD *)(v54 + 16) = &v169;
        v11[23] = v53;
        *v53 = 0;
        v11[25] = 0;
      }
      else
      {
        v168 = &v169;
      }
      v171 = *((_OWORD *)v11 + 13);
      v11[26] = 0;
      v11[27] = 0;
      v172 = 1;
      std::runtime_error::runtime_error(&v173, &v166);
      v174 = v167;
      v173.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v175 = v168;
      v176 = v169;
      v177 = v170;
      if (v170)
      {
        *((_QWORD *)v169 + 2) = &v176;
        v168 = &v169;
        v169 = 0;
        v170 = 0;
      }
      else
      {
        v175 = &v176;
      }
      v178 = v171;
      v171 = 0uLL;
      std::runtime_error::runtime_error(&v160, &v173);
      v161 = v174;
      v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v59 = v176;
      v162 = v175;
      v163 = v176;
      v164 = v177;
      if (v177)
      {
        *((_QWORD *)v176 + 2) = &v163;
        v59 = 0;
        v175 = &v176;
        v176 = 0;
        v177 = 0;
      }
      else
      {
        v162 = &v163;
      }
      v60 = (uint64_t)(v11 + 3);
      v165 = v178;
      v178 = 0uLL;
      v173.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, v59);
      MEMORY[0x18D7898AC](&v173);
      std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v148);
      std::runtime_error::runtime_error(v148, &v160);
      v62 = v162;
      v61 = v163;
      v11[8] = v163;
      v63 = v11 + 8;
      *(_OWORD *)(v11 + 5) = v161;
      v11[3] = off_1E2521330;
      v11[7] = v62;
      v64 = v164;
      v11[9] = v164;
      if (v64)
      {
        *((_QWORD *)v61 + 2) = v63;
        v61 = 0;
        v162 = &v163;
        v163 = 0;
        v164 = 0;
      }
      else
      {
        v11[7] = v63;
      }
      *((_OWORD *)v11 + 5) = v165;
      v165 = 0uLL;
      *((_BYTE *)v11 + 96) = 0;
      *((_BYTE *)v11 + 104) = 1;
      v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v162, v61);
      MEMORY[0x18D7898AC](&v160);
      if (v172)
      {
        v166.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
        if (*((_QWORD *)&v171 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v168, v169);
        MEMORY[0x18D7898AC](&v166);
      }
      v68 = 3;
      if (*((_BYTE *)v11 + 224))
      {
LABEL_153:
        v129 = (std::__shared_weak_count *)v11[20];
        if (v129)
        {
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        if (v68 != 3)
        {
LABEL_163:
          v132 = (_QWORD *)v11[18];
          if (v132 == v11 + 15)
          {
            v133 = 4;
            v132 = v11 + 15;
          }
          else
          {
            if (!v132)
              goto LABEL_168;
            v133 = 5;
          }
          (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_168:
          std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::~__optional_destruct_base[abi:fe180100](v60);
          do
          {
            v134 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
            v135 = v134 - 1;
          }
          while (__stlxr(v135, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
          if (!v135)
            MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
          operator delete(v11);
          return;
        }
LABEL_162:
        v11[19] = v158;
        *v11 = 0;
        AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::Awaiter::await_suspend(v159);
        return;
      }
LABEL_161:
      ((void (*)(std::runtime_error *))v159->~runtime_error)(v159);
      if (v68 != 3)
        goto LABEL_163;
      goto LABEL_162;
    }
  }
  if (!*((_BYTE *)v11 + 224))
    goto LABEL_37;
LABEL_29:
  v43 = v11[70];
  *((_OWORD *)v11 + 30) = *(_OWORD *)(v11 + 19);
  v159->__vftable = 0;
  v159->__imp_.__imp_ = 0;
  v11[73] = v11[21];
  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
  v44 = *(_OWORD *)(v11 + 29);
  *((_OWORD *)v11 + 37) = v44;
  v13->__vftable = 0;
  v13->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v44 + 96)))
  {
    v12[152] = 1;
    v46 = (unint64_t *)(v11[74] + 96);
    do
      v47 = __ldaxr(v46);
    while (__stlxr((unint64_t)v11, v46));
    if (!v47)
      return;
  }
  v48 = v11[74];
  if (!*(_BYTE *)(v48 + 88))
    goto LABEL_203;
  v49 = (const std::runtime_error *)(v48 + 8);
  v50 = *(_BYTE *)(v48 + 80);
  if (v50)
  {
    v11[39] = *(_QWORD *)(v48 + 8);
    v51 = (const char **)(v11 + 40);
    p_imp = (std::__libcpp_refstring *)(v48 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v155, v49);
    *(_OWORD *)(v11 + 41) = *(_OWORD *)(v48 + 24);
    v11[39] = off_1E2521330;
    v55 = (_QWORD *)(v48 + 48);
    v56 = *(_QWORD *)(v48 + 48);
    v57 = v11 + 44;
    v11[43] = *(_QWORD *)(v48 + 40);
    v11[44] = v56;
    v58 = *(_QWORD *)(v48 + 56);
    v11[45] = v58;
    if (v58)
    {
      *(_QWORD *)(v56 + 16) = v57;
      *(_QWORD *)(v48 + 40) = v55;
      *v55 = 0;
      *(_QWORD *)(v48 + 56) = 0;
    }
    else
    {
      v11[43] = v57;
    }
    v69 = (const std::runtime_error *)v11[74];
    v70 = v69[4].__vftable;
    v49 = v69 + 4;
    v11[46] = v70;
    v51 = (const char **)(v11 + 47);
    p_imp = &v49->__imp_;
  }
  *v51 = p_imp->__imp_;
  v49->__vftable = 0;
  v49->__imp_.__imp_ = 0;
  *((_BYTE *)v11 + 384) = v50;
  v71 = v11[75];
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      v74 = (std::__shared_weak_count *)v11[75];
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v75 = (std::__shared_weak_count *)v11[30];
  if (!v75)
    goto LABEL_206;
  v76 = (unint64_t *)&v75->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
  {
LABEL_206:
    if (*((_BYTE *)v11 + 384))
      goto LABEL_72;
LABEL_84:
    std::runtime_error::runtime_error(&v166, v155);
    v167 = *(_OWORD *)(v11 + 41);
    v166.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v88 = v11[44];
    v168 = (unsigned int **)v11[43];
    v169 = (unsigned int *)v88;
    v170 = v11[45];
    v149 = (std::runtime_error *)(v11 + 3);
    if (v170)
    {
      *(_QWORD *)(v88 + 16) = &v169;
      v11[43] = v11 + 44;
      v11[44] = 0;
      v11[45] = 0;
    }
    else
    {
      v168 = &v169;
    }
    v171 = *((_OWORD *)v11 + 23);
    v11[46] = 0;
    v11[47] = 0;
    v172 = 1;
    std::runtime_error::runtime_error(&v173, &v166);
    v174 = v167;
    v173.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v175 = v168;
    v176 = v169;
    v177 = v170;
    if (v170)
    {
      *((_QWORD *)v169 + 2) = &v176;
      v168 = &v169;
      v169 = 0;
      v170 = 0;
    }
    else
    {
      v175 = &v176;
    }
    v178 = v171;
    v171 = 0uLL;
    std::runtime_error::runtime_error(&v160, &v173);
    v161 = v174;
    v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v92 = v176;
    v162 = v175;
    v163 = v176;
    v164 = v177;
    if (v177)
    {
      *((_QWORD *)v176 + 2) = &v163;
      v92 = 0;
      v175 = &v176;
      v176 = 0;
      v177 = 0;
    }
    else
    {
      v162 = &v163;
    }
    v60 = (uint64_t)(v11 + 3);
    v165 = v178;
    v178 = 0uLL;
    v173.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, v92);
    MEMORY[0x18D7898AC](&v173);
    std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v149);
    std::runtime_error::runtime_error(v149, &v160);
    v94 = v162;
    v93 = v163;
    v11[8] = v163;
    v95 = v11 + 8;
    *(_OWORD *)(v11 + 5) = v161;
    v11[3] = off_1E2521330;
    v11[7] = v94;
    v96 = v164;
    v11[9] = v164;
    if (v96)
    {
      *((_QWORD *)v93 + 2) = v95;
      v93 = 0;
      v162 = &v163;
      v163 = 0;
      v164 = 0;
    }
    else
    {
      v11[7] = v95;
    }
    *((_OWORD *)v11 + 5) = v165;
    v165 = 0uLL;
    *((_BYTE *)v11 + 96) = 0;
    *((_BYTE *)v11 + 104) = 1;
    v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v162, v93);
    MEMORY[0x18D7898AC](&v160);
    if (v172)
    {
      v166.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
      if (*((_QWORD *)&v171 + 1))
      {
        v98 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v168, v169);
      MEMORY[0x18D7898AC](&v166);
    }
    v68 = 3;
    if (*((_BYTE *)v11 + 384))
      goto LABEL_143;
    goto LABEL_109;
  }
  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
  std::__shared_weak_count::__release_weak(v75);
  if (!*((_BYTE *)v11 + 384))
    goto LABEL_84;
LABEL_72:
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  if (!v155->__vftable)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v166);
    AMSCore::Logger::log<char [69]>((uint64_t)v166.__vftable, 2, (uint64_t)"bag", 3, "No account was found. Synchronous bag data will not contain cookies.");
    imp = (std::__shared_weak_count *)v166.__imp_.__imp_;
    if (v166.__imp_.__imp_)
    {
      v90 = (unint64_t *)(v166.__imp_.__imp_ + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    goto LABEL_136;
  }
  v11[68] = v155->__vftable;
  v78 = v11[40];
  v11[69] = v78;
  if (v78)
  {
    v79 = (unint64_t *)(v78 + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  (*(void (**)(_QWORD, char *))(*(_QWORD *)v11[70] + 56))(v11[70], v151);
  v81 = *((_OWORD *)v11 + 33);
  *v152 = 0;
  v152[1] = 0;
  *((_OWORD *)v11 + 32) = v81;
  if (atomic_load((unint64_t *)(v81 + 96)))
    goto LABEL_80;
  v12[152] = 2;
  v83 = (unint64_t *)(v11[64] + 96);
  do
    v84 = __ldaxr(v83);
  while (__stlxr((unint64_t)v11, v83));
  if (v84)
  {
LABEL_80:
    v85 = v11[64];
    if (*(_BYTE *)(v85 + 88))
    {
      v86 = (const std::runtime_error *)(v85 + 8);
      v87 = *(_BYTE *)(v85 + 80);
      if (v87)
      {
        *(_OWORD *)(v11 + 29) = *(_OWORD *)(v85 + 8);
        v11[31] = *(_QWORD *)(v85 + 24);
        *(_QWORD *)(v85 + 16) = 0;
        *(_QWORD *)(v85 + 24) = 0;
        v86->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v13, v86);
        *(_OWORD *)(v11 + 31) = *(_OWORD *)(v85 + 24);
        v11[29] = off_1E2521330;
        v100 = (_QWORD *)(v85 + 48);
        v101 = *(_QWORD *)(v85 + 48);
        v102 = v11 + 34;
        v11[33] = *(_QWORD *)(v85 + 40);
        v11[34] = v101;
        v103 = *(_QWORD *)(v85 + 56);
        v11[35] = v103;
        if (v103)
        {
          *(_QWORD *)(v101 + 16) = v102;
          *(_QWORD *)(v85 + 40) = v100;
          *v100 = 0;
          *(_QWORD *)(v85 + 56) = 0;
        }
        else
        {
          v11[33] = v102;
        }
        *((_OWORD *)v11 + 18) = *(_OWORD *)(v85 + 64);
        *(_QWORD *)(v85 + 64) = 0;
        *(_QWORD *)(v85 + 72) = 0;
      }
      *((_BYTE *)v11 + 304) = v87;
      v104 = (std::__shared_weak_count *)v11[65];
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = (std::__shared_weak_count *)v11[67];
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v110 = (std::__shared_weak_count *)v11[69];
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v113 = *((unsigned __int8 *)v11 + 304);
      if (*((_BYTE *)v11 + 304))
      {
        v114 = *(uint64_t **)v12;
        if (*(_QWORD *)v12)
        {
          v115 = (uint64_t *)v11[58];
          v116 = *(void **)v12;
          if (v115 != v114)
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v115, 0);
            while (v115 != v114);
            v116 = *(void **)v12;
          }
          v11[58] = v114;
          operator delete(v116);
        }
        *(_OWORD *)v12 = *(_OWORD *)(v11 + 29);
        v11[59] = v11[31];
        v13->__imp_.__imp_ = 0;
        v13[1].__vftable = 0;
        v13->__vftable = 0;
        if (v113)
          goto LABEL_136;
        v119 = v11 + 3;
        v68 = 0;
      }
      else
      {
        std::runtime_error::runtime_error(&v166, v13);
        v167 = *(_OWORD *)(v11 + 31);
        v166.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v136 = v11[34];
        v168 = (unsigned int **)v11[33];
        v169 = (unsigned int *)v136;
        v170 = v11[35];
        v150 = (std::runtime_error *)(v11 + 3);
        if (v170)
        {
          *(_QWORD *)(v136 + 16) = &v169;
          v11[33] = v11 + 34;
          v11[34] = 0;
          v11[35] = 0;
        }
        else
        {
          v168 = &v169;
        }
        v171 = *((_OWORD *)v11 + 18);
        v11[36] = 0;
        v11[37] = 0;
        v172 = 1;
        std::runtime_error::runtime_error(&v173, &v166);
        v174 = v167;
        v173.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v175 = v168;
        v176 = v169;
        v177 = v170;
        if (v170)
        {
          *((_QWORD *)v169 + 2) = &v176;
          v168 = &v169;
          v169 = 0;
          v170 = 0;
        }
        else
        {
          v175 = &v176;
        }
        v17 = (uint64_t)(v11 + 3);
        v178 = v171;
        v171 = 0uLL;
        std::runtime_error::runtime_error(&v160, &v173);
        v161 = v174;
        v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v137 = v176;
        v162 = v175;
        v163 = v176;
        v164 = v177;
        if (v177)
        {
          *((_QWORD *)v176 + 2) = &v163;
          v137 = 0;
          v175 = &v176;
          v176 = 0;
          v177 = 0;
        }
        else
        {
          v162 = &v163;
        }
        v165 = v178;
        v178 = 0uLL;
        v173.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, v137);
        MEMORY[0x18D7898AC](&v173);
        std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v150);
        std::runtime_error::runtime_error(v150, &v160);
        v139 = v162;
        v138 = v163;
        v11[8] = v163;
        v140 = v11 + 8;
        *(_OWORD *)(v11 + 5) = v161;
        v11[3] = off_1E2521330;
        v11[7] = v139;
        v141 = v164;
        v11[9] = v164;
        if (v141)
        {
          *((_QWORD *)v138 + 2) = v140;
          v138 = 0;
          v162 = &v163;
          v163 = 0;
          v164 = 0;
        }
        else
        {
          v11[7] = v140;
        }
        *((_OWORD *)v11 + 5) = v165;
        v165 = 0uLL;
        *((_BYTE *)v11 + 96) = 0;
        *((_BYTE *)v11 + 104) = 1;
        v160.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v162, v138);
        MEMORY[0x18D7898AC](&v160);
        if (v172)
        {
          v166.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v142 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
          if (*((_QWORD *)&v171 + 1))
          {
            v143 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v168, v169);
          MEMORY[0x18D7898AC](&v166);
        }
        v145 = (uint64_t *)v11[29];
        if (*((_BYTE *)v11 + 304))
        {
          if (v145)
          {
            v146 = (uint64_t *)v11[30];
            v147 = (std::runtime_error_vtbl *)v11[29];
            if (v146 != v145)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v146, 0);
              while (v146 != v145);
              v147 = v13->__vftable;
            }
            v11[30] = v145;
            operator delete(v147);
            if (v113)
              goto LABEL_136;
          }
        }
        else
        {
          ((void (*)(std::runtime_error *))*v145)(v13);
          if (v113)
          {
LABEL_136:
            v117 = v11[73];
            v157 = *((_OWORD *)v11 + 30);
            *v153 = 0;
            v153[1] = 0;
            v118 = v11[59];
            v154 = *(_OWORD *)v12;
            *((_QWORD *)v12 + 1) = 0;
            *((_QWORD *)v12 + 2) = 0;
            *(_QWORD *)v12 = 0;
            v119 = (_QWORD *)v17;
            std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100](v17);
            *(_OWORD *)(v11 + 3) = v157;
            *(_OWORD *)(v11 + 5) = v154;
            v11[7] = v118;
            v11[8] = v117;
            *((_BYTE *)v11 + 96) = 1;
            v68 = 3;
            *((_BYTE *)v11 + 104) = 1;
            goto LABEL_137;
          }
        }
        v119 = v11 + 3;
        v68 = 3;
      }
LABEL_137:
      v120 = *(uint64_t **)v12;
      if (*(_QWORD *)v12)
      {
        v121 = (uint64_t *)v11[58];
        v122 = *(void **)v12;
        if (v121 != v120)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v121, 0);
          while (v121 != v120);
          v122 = *(void **)v12;
        }
        v11[58] = v120;
        operator delete(v122);
      }
      v60 = (uint64_t)v119;
      if (*((_BYTE *)v11 + 384))
      {
LABEL_143:
        v123 = (std::__shared_weak_count *)v11[40];
        if (v123)
        {
          v124 = (unint64_t *)&v123->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
LABEL_148:
        v126 = (std::__shared_weak_count *)v11[61];
        if (!v126)
          goto LABEL_207;
        v127 = (unint64_t *)&v126->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
          if (*((_BYTE *)v11 + 224))
            goto LABEL_153;
        }
        else
        {
LABEL_207:
          if (*((_BYTE *)v11 + 224))
            goto LABEL_153;
        }
        goto LABEL_161;
      }
LABEL_109:
      ((void (*)(std::runtime_error *))v155->~runtime_error)(v155);
      goto LABEL_148;
    }
LABEL_203:
    __break(1u);
  }
}

void sub_18CBF6BE0(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

uint64_t AMSCore::BagDataSource::shouldUseLoadedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char *v14;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  v7 = v6 - a2;
  if (v6 < a2)
    return 1;
  v9 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_9;
  v14 = &v13;
  result = ((uint64_t (*)(char **, uint64_t))off_1E253CAA8[v9])(&v14, a3 + 8);
  if (!(_DWORD)result)
    return result;
  v10 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v10 == -1)
LABEL_9:
    std::__throw_bad_variant_access[abi:fe180100]();
  v14 = &v13;
  v11 = ((uint64_t (*)(char **, uint64_t))*(&off_1E253CAB8 + v10))(&v14, a3 + 8);
  if (!v12)
    return 1;
  return v7 < 1000000 * v11;
}

void AMSCore::BagDataSource::getSynchronousBagValues(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X2>, __int128 *a4@<X3>, _OWORD *a5@<X8>)
{
  char *v10;
  unint64_t v11;
  __int128 v12;
  char *v13;
  _OWORD *v14;
  _OWORD *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  void (***v19)(uint64_t);
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  std::__shared_mutex_base **v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 v42;
  _QWORD *v43;
  std::mutex *v44;
  uint64_t v45;
  __int128 v46;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *imp;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::mutex **v86;
  std::__shared_mutex_base *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unsigned int *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  const char *v121;
  int v122;
  _OWORD *v123;
  std::mutex **v124;
  __int128 v125;
  std::__shared_mutex_base **v126;
  char *v127;
  _OWORD *v128;
  std::runtime_error *v129;
  char *v130;
  __int128 v131;
  std::runtime_error v132;
  __int128 v133;
  unsigned int **v134;
  unsigned int *v135[2];
  __int128 v136;
  std::runtime_error v137;
  __int128 v138;
  unsigned int **v139;
  unsigned int *v140;
  unsigned int *v141;
  __int128 v142;
  char v143;
  std::runtime_error v144;
  __int128 v145;
  unsigned int **v146;
  unsigned int *v147;
  unsigned int *v148;
  __int128 v149;

  v10 = (char *)operator new(0x1C8uLL);
  v11 = (unint64_t)v10;
  v12 = a3[1];
  *(_OWORD *)(v10 + 232) = *a3;
  v13 = v10 + 328;
  *(_QWORD *)v10 = AMSCore::BagDataSource::getSynchronousBagValues;
  *((_QWORD *)v10 + 1) = AMSCore::BagDataSource::getSynchronousBagValues;
  v128 = v10 + 232;
  v129 = (std::runtime_error *)(v10 + 152);
  v14 = v10 + 264;
  v15 = v10 + 296;
  v16 = v10 + 344;
  v126 = (std::__shared_mutex_base **)(v10 + 360);
  v124 = (std::mutex **)(v10 + 376);
  v17 = v10 + 16;
  v10[449] = a2;
  *((_QWORD *)v10 + 49) = a1;
  *(_OWORD *)(v10 + 248) = v12;
  v125 = *a4;
  *((_OWORD *)v10 + 25) = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  do
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v18 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v10 + 14) = 0;
  v10[24] = 0;
  v19 = (void (***)(uint64_t))(v10 + 24);
  v10[104] = 0;
  *((_QWORD *)v10 + 18) = 0;
  v20 = (_QWORD *)operator new();
  v130 = v13;
  *v20 = &off_1E2523A08;
  v20[1] = 0;
  *(_QWORD *)&v21 = v17;
  *((_QWORD *)&v21 + 1) = v20;
  v20[2] = 0;
  v20[3] = v17;
  v127 = v17;
  *a5 = v21;
  *(_QWORD *)(v11 + 360) = a1 + 248;
  *(_BYTE *)(v11 + 368) = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 248));
  v123 = v15;
  v22 = *(_QWORD *)(a1 + 416);
  v23 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(v11 + 328) = v22;
  *(_QWORD *)(v11 + 336) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *(_QWORD *)(a1 + 456);
  v27 = *(unsigned __int8 *)(a1 + 464);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(a1 + 248));
  *(_BYTE *)(v11 + 368) = 0;
  if (*(_QWORD *)(v22 + 16))
  {
    if (!v27)
      goto LABEL_157;
    v28 = v128[1];
    *v14 = *v128;
    v14[1] = v28;
    if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, v26, v14, v125))
    {
      *(_QWORD *)v130 = 0;
      *((_QWORD *)v130 + 1) = 0;
      v29 = v126;
      if (*(_BYTE *)(v11 + 104))
      {
        if (*(_BYTE *)(v11 + 96))
        {
          v30 = *(std::__shared_weak_count **)(v11 + 32);
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        else
        {
          (**v19)(v11 + 24);
        }
      }
      *(_QWORD *)(v11 + 24) = v22;
      *(_QWORD *)(v11 + 32) = v23;
      *(_QWORD *)(v11 + 40) = v26;
      *(_BYTE *)(v11 + 96) = 1;
      *(_BYTE *)(v11 + 104) = 1;
      v56 = v127;
      goto LABEL_141;
    }
  }
  v33 = (unsigned __int8 *)(a1 + 536);
  do
    v34 = __ldaxr(v33);
  while (__stxr(1u, v33));
  if ((v34 & 1) != 0)
  {
    v130[120] = 0;
    std::mutex::lock((std::mutex *)(*(_QWORD *)(v11 + 392) + 472));
    v40 = *(_QWORD *)(v11 + 392);
    if (*(_QWORD *)(v40 + 560))
      goto LABEL_27;
    v41 = (unsigned __int8 *)(v40 + 536);
    do
      v42 = __ldxr(v41);
    while (__stlxr(1u, v41));
    if ((v42 & 1) != 0)
    {
LABEL_27:
      v43 = operator new(0x18uLL);
      v44 = (std::mutex *)(*(_QWORD *)(v11 + 392) + 472);
      v43[1] = v40 + 544;
      v43[2] = v11;
      v45 = *(_QWORD *)(v40 + 544);
      *v43 = v45;
      *(_QWORD *)(v45 + 8) = v43;
      *(_QWORD *)(v40 + 544) = v43;
      ++*(_QWORD *)(v40 + 560);
      std::mutex::unlock(v44);
      return;
    }
    std::mutex::unlock((std::mutex *)(*(_QWORD *)(v11 + 392) + 472));
  }
  v35 = *(_QWORD *)(v11 + 392);
  *(_QWORD *)(v11 + 376) = v35 + 472;
  *(_BYTE *)(v11 + 384) = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v35 + 248));
  v36 = *(_QWORD *)(v11 + 392);
  v37 = *(_QWORD *)(*(_QWORD *)(v36 + 416) + 16);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v36 + 248));
  if (v37)
  {
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(*(_QWORD *)(v11 + 392) + 248));
    v38 = *(_QWORD *)(v11 + 392);
    if (*(_BYTE *)(v38 + 464))
    {
      v39 = *(_QWORD *)(v38 + 456) <= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 400) + 16))(*(_QWORD *)(v11 + 400));
      v38 = *(_QWORD *)(v11 + 392);
    }
    else
    {
      v39 = 0;
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v38 + 248));
    if (!v39)
      goto LABEL_82;
  }
  if (v130[121] == 1)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 392) + 32))(*(_QWORD *)(v11 + 392), 1);
    v46 = *(_OWORD *)v16;
    *(_OWORD *)(v11 + 416) = *(_OWORD *)v16;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    if (!atomic_load((unint64_t *)(v46 + 96)))
    {
      v130[120] = 1;
      v48 = (unint64_t *)(*(_QWORD *)(v11 + 416) + 96);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v11, v48));
      if (!v49)
        return;
    }
    v50 = *(_QWORD *)(v11 + 416);
    if (!*(_BYTE *)(v50 + 88))
      goto LABEL_157;
    v51 = *(_BYTE *)(v50 + 80);
    if (!v51)
    {
      std::runtime_error::runtime_error(v129, (const std::runtime_error *)(v50 + 8));
      *(_OWORD *)(v11 + 168) = *(_OWORD *)(v50 + 24);
      v52 = (_QWORD *)(v50 + 48);
      v53 = *(_QWORD *)(v50 + 48);
      *(_QWORD *)(v11 + 192) = v53;
      v54 = v11 + 192;
      *(_QWORD *)(v11 + 152) = off_1E2521330;
      *(_QWORD *)(v11 + 184) = *(_QWORD *)(v50 + 40);
      v55 = *(_QWORD *)(v50 + 56);
      *(_QWORD *)(v11 + 200) = v55;
      if (v55)
      {
        *(_QWORD *)(v53 + 16) = v54;
        *(_QWORD *)(v50 + 40) = v52;
        *v52 = 0;
        *(_QWORD *)(v50 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v11 + 184) = v54;
      }
      v57 = *(_QWORD *)(v11 + 416);
      *(_OWORD *)(v11 + 208) = *(_OWORD *)(v57 + 64);
      *(_QWORD *)(v57 + 64) = 0;
      *(_QWORD *)(v57 + 72) = 0;
    }
    *(_BYTE *)(v11 + 224) = v51;
    v58 = *(_QWORD *)(v11 + 424);
    if (v58)
    {
      v59 = (unint64_t *)(v58 + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        v61 = *(std::__shared_weak_count **)(v11 + 424);
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v62 = *(std::__shared_weak_count **)(v11 + 352);
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (*(_BYTE *)(v11 + 224))
      goto LABEL_82;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v137);
    AMSCore::Logger::log<char [101]>((uint64_t)v137.__vftable);
    imp = (std::__shared_weak_count *)v137.__imp_.__imp_;
    if (v137.__imp_.__imp_)
    {
      v66 = (unint64_t *)(v137.__imp_.__imp_ + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    if (!*(_BYTE *)(v11 + 224))
      ((void (*)(std::runtime_error *))v129->~runtime_error)(v129);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 392) + 32))(*(_QWORD *)(v11 + 392), 0);
  v68 = *(_OWORD *)v16;
  *(_OWORD *)(v11 + 432) = *(_OWORD *)v16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  if (atomic_load((unint64_t *)(v68 + 96)))
    goto LABEL_65;
  v130[120] = 2;
  v70 = (unint64_t *)(*(_QWORD *)(v11 + 432) + 96);
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v11, v70));
  if (v71)
  {
LABEL_65:
    v72 = *(_QWORD *)(v11 + 432);
    if (*(_BYTE *)(v72 + 88))
    {
      v73 = *(_BYTE *)(v72 + 80);
      if (!v73)
      {
        std::runtime_error::runtime_error(v129, (const std::runtime_error *)(v72 + 8));
        *(_OWORD *)(v11 + 168) = *(_OWORD *)(v72 + 24);
        v74 = (_QWORD *)(v72 + 48);
        v75 = *(_QWORD *)(v72 + 48);
        *(_QWORD *)(v11 + 192) = v75;
        v76 = v11 + 192;
        *(_QWORD *)(v11 + 152) = off_1E2521330;
        *(_QWORD *)(v11 + 184) = *(_QWORD *)(v72 + 40);
        v77 = *(_QWORD *)(v72 + 56);
        *(_QWORD *)(v11 + 200) = v77;
        if (v77)
        {
          *(_QWORD *)(v75 + 16) = v76;
          *(_QWORD *)(v72 + 40) = v74;
          *v74 = 0;
          *(_QWORD *)(v72 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v11 + 184) = v76;
        }
        v78 = *(_QWORD *)(v11 + 432);
        *(_OWORD *)(v11 + 208) = *(_OWORD *)(v78 + 64);
        *(_QWORD *)(v78 + 64) = 0;
        *(_QWORD *)(v78 + 72) = 0;
      }
      *(_BYTE *)(v11 + 224) = v73;
      v79 = *(_QWORD *)(v11 + 440);
      if (v79)
      {
        v80 = (unint64_t *)(v79 + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          v82 = *(std::__shared_weak_count **)(v11 + 440);
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v83 = *(std::__shared_weak_count **)(v11 + 352);
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if (!*(_BYTE *)(v11 + 224))
      {
        std::runtime_error::runtime_error(&v137, v129);
        v109 = (_QWORD *)(v11 + 192);
        v110 = *(_QWORD *)(v11 + 192);
        v138 = *(_OWORD *)(v11 + 168);
        v137.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v139 = *(unsigned int ***)(v11 + 184);
        v140 = (unsigned int *)v110;
        v141 = *(unsigned int **)(v11 + 200);
        if (v141)
        {
          *(_QWORD *)(v110 + 16) = &v140;
          *(_QWORD *)(v11 + 184) = v109;
          *v109 = 0;
          *(_QWORD *)(v11 + 200) = 0;
        }
        else
        {
          v139 = &v140;
        }
        v142 = *(_OWORD *)(v11 + 208);
        *(_QWORD *)(v11 + 208) = 0;
        *(_QWORD *)(v11 + 216) = 0;
        v143 = 1;
        std::runtime_error::runtime_error(&v144, &v137);
        v145 = v138;
        v144.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v146 = v139;
        v147 = v140;
        v148 = v141;
        if (v141)
        {
          *((_QWORD *)v140 + 2) = &v147;
          v139 = &v140;
          v140 = 0;
          v141 = 0;
        }
        else
        {
          v146 = &v147;
        }
        v149 = v142;
        v142 = 0uLL;
        std::runtime_error::runtime_error(&v132, &v144);
        v133 = v145;
        v132.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v111 = v147;
        v134 = v146;
        v135[0] = v147;
        v135[1] = v148;
        if (v148)
        {
          *((_QWORD *)v147 + 2) = v135;
          v111 = 0;
          v146 = &v147;
          v147 = 0;
          v148 = 0;
        }
        else
        {
          v134 = v135;
        }
        v56 = v127;
        v136 = v149;
        v149 = 0uLL;
        v144.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v146, v111);
        MEMORY[0x18D7898AC](&v144);
        std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v11 + 24), &v132);
        v132.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v112 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
        v29 = v126;
        v86 = v124;
        if (*((_QWORD *)&v136 + 1))
        {
          v113 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v134, v135[0]);
        MEMORY[0x18D7898AC](&v132);
        if (v143)
        {
          v137.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v115 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          if (*((_QWORD *)&v142 + 1))
          {
            v116 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v140);
          MEMORY[0x18D7898AC](&v137);
        }
        if (!*(_BYTE *)(v11 + 224))
          ((void (*)(std::runtime_error *))v129->~runtime_error)(v129);
        goto LABEL_139;
      }
LABEL_82:
      if (*(_BYTE *)(v11 + 384))
      {
        v86 = v124;
        v29 = v126;
        v56 = v127;
        AMSCore::AwaitableMutex::unlock(*v124);
        *(_BYTE *)(v11 + 384) = 0;
        v87 = *(std::__shared_mutex_base **)(v11 + 360);
        if (v87)
        {
          if (*(_BYTE *)(v11 + 368))
          {
            v121 = "shared_lock::lock: already locked";
            v122 = 11;
LABEL_156:
            std::__throw_system_error(v122, v121);
            goto LABEL_157;
          }
          std::__shared_mutex_base::lock_shared(v87);
          v88 = *(_QWORD *)(v11 + 392);
          *(_BYTE *)(v11 + 368) = 1;
          v90 = *(_QWORD *)(v88 + 416);
          v89 = *(_QWORD *)(v88 + 424);
          if (v89)
          {
            v91 = (unint64_t *)(v89 + 8);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v93 = *(std::__shared_weak_count **)(v11 + 336);
          *(_QWORD *)(v11 + 328) = v90;
          *(_QWORD *)(v11 + 336) = v89;
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          if (*(_BYTE *)(v11 + 368))
          {
            v96 = *(_QWORD *)(v11 + 392);
            v97 = *(_QWORD *)(v96 + 456);
            v98 = *(unsigned __int8 *)(v96 + 464);
            std::__shared_mutex_base::unlock_shared(*v126);
            *(_BYTE *)(v11 + 368) = 0;
            if (v98)
            {
              v99 = *(_QWORD *)(v11 + 392);
              v100 = v128[1];
              *v123 = *v128;
              v123[1] = v100;
              if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v99 + 40))(v99, v97) & 1) != 0)
              {
                v101 = *(_OWORD *)v130;
                *(_QWORD *)v130 = 0;
                *((_QWORD *)v130 + 1) = 0;
                if (*(_BYTE *)(v11 + 104))
                {
                  if (*(_BYTE *)(v11 + 96))
                  {
                    v102 = *(std::__shared_weak_count **)(v11 + 32);
                    if (!v102)
                      goto LABEL_138;
                    v103 = (unint64_t *)&v102->__shared_owners_;
                    do
                      v104 = __ldaxr(v103);
                    while (__stlxr(v104 - 1, v103));
                    if (v104)
                      goto LABEL_138;
                    v131 = v101;
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                  else
                  {
                    v131 = v101;
                    (**v19)(v11 + 24);
                  }
                  v101 = v131;
                }
LABEL_138:
                *(_OWORD *)(v11 + 24) = v101;
                *(_QWORD *)(v11 + 40) = v97;
                *(_BYTE *)(v11 + 96) = 1;
                *(_BYTE *)(v11 + 104) = 1;
LABEL_139:
                if (*(_BYTE *)(v11 + 384))
                  AMSCore::AwaitableMutex::unlock(*v86);
LABEL_141:
                v118 = *(std::__shared_weak_count **)(v11 + 336);
                if (!v118)
                  goto LABEL_145;
                v119 = (unint64_t *)&v118->__shared_owners_;
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                  if (!*(_BYTE *)(v11 + 368))
                    goto LABEL_147;
                }
                else
                {
LABEL_145:
                  if (!*(_BYTE *)(v11 + 368))
                  {
LABEL_147:
                    *(_QWORD *)(v11 + 152) = v56;
                    *(_QWORD *)v11 = 0;
                    AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v129);
                    return;
                  }
                }
                std::__shared_mutex_base::unlock_shared(*v29);
                goto LABEL_147;
              }
              AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[39]>((uint64_t)&v137, 0xCBu);
              std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v11 + 24), &v137);
              v137.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v105 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
              if (*((_QWORD *)&v142 + 1))
              {
                v108 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
                do
                  v107 = __ldaxr(v108);
                while (__stlxr(v107 - 1, v108));
                goto LABEL_110;
              }
            }
            else
            {
              AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[37]>((uint64_t)&v137, 0xCBu);
              std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v11 + 24), &v137);
              v137.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v105 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
              if (*((_QWORD *)&v142 + 1))
              {
                v106 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
                do
                  v107 = __ldaxr(v106);
                while (__stlxr(v107 - 1, v106));
LABEL_110:
                if (!v107)
                {
                  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                  std::__shared_weak_count::__release_weak(v105);
                }
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v140);
            MEMORY[0x18D7898AC](&v137);
            goto LABEL_139;
          }
          v121 = "shared_lock::unlock: not locked";
        }
        else
        {
          v121 = "shared_lock::lock: references null mutex";
        }
      }
      else
      {
        v121 = "unique_lock::unlock: not locked";
      }
      v122 = 1;
      goto LABEL_156;
    }
LABEL_157:
    __break(1u);
  }
}

void sub_18CBF78F8(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_18CBF793C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBF77D0);
}

void AMSCore::BagDataSource::getSynchronousBagCookies(uint64_t *a1@<X1>, std::runtime_error *a2@<X8>)
{
  char *v4;
  unint64_t v5;
  char *v6;
  std::runtime_error *v7;
  std::runtime_error *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void **v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  std::runtime_error *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  const std::runtime_error *v23;
  char v24;
  const char **v25;
  std::__libcpp_refstring *p_imp;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const std::runtime_error *v31;
  std::runtime_error_vtbl *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::runtime_error_vtbl *v46;
  __int128 v47;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  const std::runtime_error *v52;
  char v53;
  int v54;
  std::__shared_weak_count *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unsigned int *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  std::runtime_error_vtbl *v86;
  uint64_t v87;
  std::runtime_error v88;
  __int128 v89;
  unsigned int **v90;
  unsigned int *v91[2];
  __int128 v92;
  std::runtime_error v93;
  __int128 v94;
  unsigned int **v95;
  unsigned int *v96;
  unsigned int *v97;
  __int128 v98;
  char v99;
  std::runtime_error v100;
  __int128 v101;
  unsigned int **v102;
  unsigned int *v103;
  unsigned int *v104;
  __int128 v105;

  v4 = (char *)operator new(0x188uLL);
  v5 = (unint64_t)v4;
  v6 = v4 + 328;
  *(_QWORD *)v4 = AMSCore::BagDataSource::getSynchronousBagCookies;
  *((_QWORD *)v4 + 1) = AMSCore::BagDataSource::getSynchronousBagCookies;
  v7 = (std::runtime_error *)(v4 + 152);
  v8 = (std::runtime_error *)(v4 + 232);
  v9 = v4 + 312;
  v87 = (uint64_t)(v4 + 16);
  v10 = *a1;
  v11 = a1[1];
  *((_QWORD *)v4 + 43) = v11;
  *a1 = 0;
  a1[1] = 0;
  do
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v12 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v4[24] = 0;
  v13 = (void **)(v4 + 24);
  v4[104] = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v93, v87);
  *a2 = v93;
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault(v8);
  v14 = *(_QWORD *)(v5 + 232);
  *(_QWORD *)(v5 + 312) = v10;
  *(_QWORD *)(v5 + 320) = v11;
  if (v11)
  {
    v15 = (unint64_t *)(v11 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v14 + 40))(v14, v9);
  v17 = *(_OWORD *)v6;
  *(_OWORD *)(v5 + 352) = *(_OWORD *)v6;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v18 = atomic_load((unint64_t *)(v17 + 96));
  v19 = v7;
  if (v18)
    goto LABEL_10;
  v6[56] = 0;
  v20 = (unint64_t *)(*(_QWORD *)(v5 + 352) + 96);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v5, v20));
  if (v21)
  {
LABEL_10:
    v22 = *(_QWORD *)(v5 + 352);
    if (!*(_BYTE *)(v22 + 88))
      goto LABEL_118;
    v23 = (const std::runtime_error *)(v22 + 8);
    v24 = *(_BYTE *)(v22 + 80);
    if (v24)
    {
      *(_QWORD *)(v5 + 152) = *(_QWORD *)(v22 + 8);
      v25 = (const char **)(v5 + 160);
      p_imp = (std::__libcpp_refstring *)(v22 + 16);
    }
    else
    {
      std::runtime_error::runtime_error(v7, v23);
      *(_OWORD *)(v5 + 168) = *(_OWORD *)(v22 + 24);
      v27 = (_QWORD *)(v22 + 48);
      v28 = *(_QWORD *)(v22 + 48);
      *(_QWORD *)(v5 + 192) = v28;
      v29 = v5 + 192;
      *(_QWORD *)(v5 + 152) = off_1E2521330;
      *(_QWORD *)(v5 + 184) = *(_QWORD *)(v22 + 40);
      v30 = *(_QWORD *)(v22 + 56);
      *(_QWORD *)(v5 + 200) = v30;
      if (v30)
      {
        *(_QWORD *)(v28 + 16) = v29;
        *(_QWORD *)(v22 + 40) = v27;
        *v27 = 0;
        *(_QWORD *)(v22 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v5 + 184) = v29;
      }
      v31 = *(const std::runtime_error **)(v5 + 352);
      v32 = v31[4].__vftable;
      v23 = v31 + 4;
      *(_QWORD *)(v5 + 208) = v32;
      v25 = (const char **)(v5 + 216);
      p_imp = &v23->__imp_;
    }
    *v25 = p_imp->__imp_;
    v23->__vftable = 0;
    v23->__imp_.__imp_ = 0;
    *(_BYTE *)(v5 + 224) = v24;
    v33 = *(_QWORD *)(v5 + 360);
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        v36 = *(std::__shared_weak_count **)(v5 + 360);
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v37 = *(std::__shared_weak_count **)(v5 + 336);
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = *(std::__shared_weak_count **)(v5 + 320);
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = *(std::__shared_weak_count **)(v5 + 240);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = *(std::runtime_error_vtbl **)(v5 + 152);
    if (!*(_BYTE *)(v5 + 224))
    {
      v54 = 0;
      goto LABEL_82;
    }
    if (!v46)
    {
      v54 = 0;
      v55 = *(std::__shared_weak_count **)(v5 + 160);
      if (v55)
      {
LABEL_77:
        v72 = (unint64_t *)&v55->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
LABEL_83:
      if (v54 != 3)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[61]>((uint64_t)&v93, 0xCBu);
        std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v5 + 24), &v93);
        v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v74 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
        if (*((_QWORD *)&v98 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v95, v96);
        MEMORY[0x18D7898AC](&v93);
      }
      *(_QWORD *)(v5 + 152) = v87;
      *(_QWORD *)v5 = 0;
      AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v19);
      return;
    }
    (*((void (**)(std::runtime_error_vtbl *))v46->~runtime_error + 5))(v46);
    v47 = *(_OWORD *)v6;
    *(_OWORD *)(v5 + 368) = *(_OWORD *)v6;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    if (!atomic_load((unint64_t *)(v47 + 96)))
    {
      v6[56] = 1;
      v49 = (unint64_t *)(*(_QWORD *)(v5 + 368) + 96);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v5, v49));
      if (!v50)
        return;
    }
    v51 = *(_QWORD *)(v5 + 368);
    if (!*(_BYTE *)(v51 + 88))
    {
LABEL_118:
      __break(1u);
      return;
    }
    v52 = (const std::runtime_error *)(v51 + 8);
    v53 = *(_BYTE *)(v51 + 80);
    if (v53)
    {
      *(_OWORD *)(v5 + 232) = *(_OWORD *)(v51 + 8);
      *(_QWORD *)(v5 + 248) = *(_QWORD *)(v51 + 24);
      *(_QWORD *)(v51 + 16) = 0;
      *(_QWORD *)(v51 + 24) = 0;
      v52->__vftable = 0;
    }
    else
    {
      std::runtime_error::runtime_error(v8, v52);
      *(_OWORD *)(v5 + 248) = *(_OWORD *)(v51 + 24);
      *(_QWORD *)(v5 + 232) = off_1E2521330;
      v56 = (_QWORD *)(v51 + 48);
      v57 = *(_QWORD *)(v51 + 48);
      v58 = v5 + 272;
      *(_QWORD *)(v5 + 264) = *(_QWORD *)(v51 + 40);
      *(_QWORD *)(v5 + 272) = v57;
      v59 = *(_QWORD *)(v51 + 56);
      *(_QWORD *)(v5 + 280) = v59;
      if (v59)
      {
        *(_QWORD *)(v57 + 16) = v58;
        *(_QWORD *)(v51 + 40) = v56;
        *v56 = 0;
        *(_QWORD *)(v51 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v5 + 264) = v58;
      }
      v60 = *(_QWORD *)(v5 + 368);
      *(_OWORD *)(v5 + 288) = *(_OWORD *)(v60 + 64);
      *(_QWORD *)(v60 + 64) = 0;
      *(_QWORD *)(v60 + 72) = 0;
    }
    *(_BYTE *)(v5 + 304) = v53;
    v61 = *(_QWORD *)(v5 + 376);
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        v64 = *(std::__shared_weak_count **)(v5 + 376);
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v65 = *(std::__shared_weak_count **)(v5 + 336);
    if (!v65)
      goto LABEL_121;
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
      if (*(_BYTE *)(v5 + 304))
        goto LABEL_63;
    }
    else
    {
LABEL_121:
      if (*(_BYTE *)(v5 + 304))
      {
LABEL_63:
        if (*(_BYTE *)(v5 + 104))
        {
          v68 = *(uint64_t **)(v5 + 24);
          if (*(_BYTE *)(v5 + 96))
          {
            if (v68)
            {
              v69 = *(uint64_t **)(v5 + 32);
              v70 = *(void **)(v5 + 24);
              if (v69 != v68)
              {
                do
                  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v69, 0);
                while (v69 != v68);
                v70 = *v13;
              }
              *(_QWORD *)(v5 + 32) = v68;
              operator delete(v70);
            }
          }
          else
          {
            ((void (*)(unint64_t))*v68)(v5 + 24);
          }
        }
        *(_OWORD *)(v5 + 24) = *(_OWORD *)(v5 + 232);
        *(_QWORD *)(v5 + 40) = *(_QWORD *)(v5 + 248);
        v8->__imp_.__imp_ = 0;
        v8[1].__vftable = 0;
        v8->__vftable = 0;
        *(_BYTE *)(v5 + 96) = 1;
        *(_BYTE *)(v5 + 104) = 1;
LABEL_75:
        if (*(_BYTE *)(v5 + 224))
        {
          v54 = 3;
          v55 = *(std::__shared_weak_count **)(v5 + 160);
          if (v55)
            goto LABEL_77;
          goto LABEL_83;
        }
        v46 = v19->__vftable;
        v54 = 3;
LABEL_82:
        ((void (*)(std::runtime_error *))v46->~runtime_error)(v19);
        goto LABEL_83;
      }
    }
    std::runtime_error::runtime_error(&v93, v8);
    v94 = *(_OWORD *)(v5 + 248);
    v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v71 = *(_QWORD *)(v5 + 272);
    v95 = *(unsigned int ***)(v5 + 264);
    v96 = (unsigned int *)v71;
    v97 = *(unsigned int **)(v5 + 280);
    if (v97)
    {
      *(_QWORD *)(v71 + 16) = &v96;
      *(_QWORD *)(v5 + 264) = v5 + 272;
      *(_QWORD *)(v5 + 272) = 0;
      *(_QWORD *)(v5 + 280) = 0;
    }
    else
    {
      v95 = &v96;
    }
    v98 = *(_OWORD *)(v5 + 288);
    *(_QWORD *)(v5 + 288) = 0;
    *(_QWORD *)(v5 + 296) = 0;
    v99 = 1;
    std::runtime_error::runtime_error(&v100, &v93);
    v101 = v94;
    v100.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v102 = v95;
    v103 = v96;
    v104 = v97;
    if (v97)
    {
      *((_QWORD *)v96 + 2) = &v103;
      v95 = &v96;
      v96 = 0;
      v97 = 0;
    }
    else
    {
      v102 = &v103;
    }
    v105 = v98;
    v98 = 0uLL;
    std::runtime_error::runtime_error(&v88, &v100);
    v89 = v101;
    v88.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v77 = v103;
    v90 = v102;
    v91[0] = v103;
    v91[1] = v104;
    if (v104)
    {
      *((_QWORD *)v103 + 2) = v91;
      v77 = 0;
      v102 = &v103;
      v103 = 0;
      v104 = 0;
    }
    else
    {
      v90 = v91;
    }
    v92 = v105;
    v105 = 0uLL;
    v100.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v102, v77);
    MEMORY[0x18D7898AC](&v100);
    std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v5 + 24), &v88);
    v88.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    v19 = v7;
    if (*((_QWORD *)&v92 + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v90, v91[0]);
    MEMORY[0x18D7898AC](&v88);
    if (v99)
    {
      v93.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v95, v96);
      MEMORY[0x18D7898AC](&v93);
    }
    v84 = *(uint64_t **)(v5 + 232);
    if (*(_BYTE *)(v5 + 304))
    {
      if (v84)
      {
        v85 = *(uint64_t **)(v5 + 240);
        v86 = *(std::runtime_error_vtbl **)(v5 + 232);
        if (v85 != v84)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v85, 0);
          while (v85 != v84);
          v86 = v8->__vftable;
        }
        *(_QWORD *)(v5 + 240) = v84;
        operator delete(v86);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))*v84)(v8);
    }
    goto LABEL_75;
  }
}

void sub_18CBF8298(void *a1)
{
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBF82A4()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBF7F34);
}

void AMSCore::BagDataSource::getSynchronousBagCookies(char *__p)
{
  char *v2;
  uint64_t v3;
  _OWORD *v4;
  const std::runtime_error *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  const std::runtime_error *v9;
  char v10;
  std::__libcpp_refstring *v11;
  std::__libcpp_refstring *p_imp;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  void *v47;
  const std::runtime_error *v48;
  std::runtime_error_vtbl *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::runtime_error v70;
  __int128 v71;
  unsigned int **v72;
  unsigned int *v73;
  unsigned int *v74;
  __int128 v75;
  char v76;
  std::runtime_error v77;
  __int128 v78;
  unsigned int **v79;
  unsigned int *v80[2];
  __int128 v81;
  std::runtime_error v82;
  __int128 v83;
  unsigned int **v84;
  unsigned int *v85;
  unsigned int *v86;
  __int128 v87;

  v2 = __p + 152;
  if (!__p[384])
  {
    v8 = *((_QWORD *)__p + 44);
    if (!*(_BYTE *)(v8 + 88))
      goto LABEL_110;
    v9 = (const std::runtime_error *)(v8 + 8);
    v10 = *(_BYTE *)(v8 + 80);
    if (v10)
    {
      *((_QWORD *)__p + 19) = *(_QWORD *)(v8 + 8);
      v11 = (std::__libcpp_refstring *)(__p + 160);
      p_imp = (std::__libcpp_refstring *)(v8 + 16);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(__p + 152), v9);
      *(_OWORD *)(__p + 168) = *(_OWORD *)(v8 + 24);
      v17 = (_QWORD *)(v8 + 48);
      v18 = *(_QWORD *)(v8 + 48);
      *((_QWORD *)__p + 24) = v18;
      v19 = __p + 192;
      *((_QWORD *)__p + 19) = off_1E2521330;
      *((_QWORD *)__p + 23) = *(_QWORD *)(v8 + 40);
      v20 = *(_QWORD *)(v8 + 56);
      *((_QWORD *)__p + 25) = v20;
      if (v20)
      {
        *(_QWORD *)(v18 + 16) = v19;
        *(_QWORD *)(v8 + 40) = v17;
        *v17 = 0;
        *(_QWORD *)(v8 + 56) = 0;
      }
      else
      {
        *((_QWORD *)__p + 23) = v19;
      }
      v48 = (const std::runtime_error *)*((_QWORD *)__p + 44);
      v49 = v48[4].__vftable;
      v9 = v48 + 4;
      *((_QWORD *)__p + 26) = v49;
      v11 = (std::__libcpp_refstring *)(__p + 216);
      p_imp = &v9->__imp_;
    }
    v11->__imp_ = p_imp->__imp_;
    v9->__vftable = 0;
    v9->__imp_.__imp_ = 0;
    __p[224] = v10;
    v50 = *((_QWORD *)__p + 45);
    if (v50)
    {
      v51 = (unint64_t *)(v50 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        v53 = (std::__shared_weak_count *)*((_QWORD *)__p + 45);
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v54 = (std::__shared_weak_count *)*((_QWORD *)__p + 42);
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = (std::__shared_weak_count *)*((_QWORD *)__p + 40);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)__p + 30);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v37 = *((_QWORD *)__p + 19);
    if (!__p[224])
    {
      v33 = 0;
      goto LABEL_99;
    }
    if (!v37)
    {
      v33 = 0;
      v34 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
      if (v34)
        goto LABEL_38;
      goto LABEL_100;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
    v63 = *(_OWORD *)(__p + 328);
    *((_OWORD *)__p + 23) = v63;
    *((_QWORD *)__p + 41) = 0;
    *((_QWORD *)__p + 42) = 0;
    if (!atomic_load((unint64_t *)(v63 + 96)))
    {
      __p[384] = 1;
      v65 = (unint64_t *)(*((_QWORD *)__p + 46) + 96);
      do
        v66 = __ldaxr(v65);
      while (__stlxr((unint64_t)__p, v65));
      if (!v66)
        return;
    }
  }
  v3 = *((_QWORD *)__p + 46);
  if (!*(_BYTE *)(v3 + 88))
  {
LABEL_110:
    __break(1u);
    return;
  }
  v4 = __p + 232;
  v5 = (const std::runtime_error *)(v3 + 8);
  v6 = *(_BYTE *)(v3 + 80);
  v7 = __p + 248;
  if (v6)
  {
    *v4 = *(_OWORD *)(v3 + 8);
    *v7 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    v5->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(__p + 232), v5);
    *(_OWORD *)v7 = *(_OWORD *)(v3 + 24);
    *((_QWORD *)__p + 29) = off_1E2521330;
    v13 = (_QWORD *)(v3 + 48);
    v14 = *(_QWORD *)(v3 + 48);
    v15 = __p + 272;
    *((_QWORD *)__p + 33) = *(_QWORD *)(v3 + 40);
    *((_QWORD *)__p + 34) = v14;
    v16 = *(_QWORD *)(v3 + 56);
    *((_QWORD *)__p + 35) = v16;
    if (v16)
    {
      *(_QWORD *)(v14 + 16) = v15;
      *(_QWORD *)(v3 + 40) = v13;
      *v13 = 0;
      *(_QWORD *)(v3 + 56) = 0;
    }
    else
    {
      *((_QWORD *)__p + 33) = v15;
    }
    v21 = *((_QWORD *)__p + 46);
    *((_OWORD *)__p + 18) = *(_OWORD *)(v21 + 64);
    *(_QWORD *)(v21 + 64) = 0;
    *(_QWORD *)(v21 + 72) = 0;
  }
  __p[304] = v6;
  v22 = *((_QWORD *)__p + 47);
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)__p + 47);
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 42);
  if (!v26)
    goto LABEL_113;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (__p[304])
      goto LABEL_24;
  }
  else
  {
LABEL_113:
    if (__p[304])
    {
LABEL_24:
      if (__p[104])
      {
        v29 = (uint64_t *)*((_QWORD *)__p + 3);
        if (__p[96])
        {
          if (v29)
          {
            v30 = (uint64_t *)*((_QWORD *)__p + 4);
            v31 = (void *)*((_QWORD *)__p + 3);
            if (v30 != v29)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v30, 0);
              while (v30 != v29);
              v31 = (void *)*((_QWORD *)__p + 3);
            }
            *((_QWORD *)__p + 4) = v29;
            operator delete(v31);
          }
        }
        else
        {
          ((void (*)(char *))*v29)(__p + 24);
        }
      }
      *(_OWORD *)(__p + 24) = *(_OWORD *)(__p + 232);
      *((_QWORD *)__p + 5) = *((_QWORD *)__p + 31);
      *((_QWORD *)__p + 30) = 0;
      *((_QWORD *)__p + 31) = 0;
      *(_QWORD *)v4 = 0;
      __p[96] = 1;
      __p[104] = 1;
      goto LABEL_36;
    }
  }
  std::runtime_error::runtime_error(&v70, (const std::runtime_error *)(__p + 232));
  v71 = *(_OWORD *)v7;
  v70.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v32 = *((_QWORD *)__p + 34);
  v72 = (unsigned int **)*((_QWORD *)__p + 33);
  v73 = (unsigned int *)v32;
  v74 = (unsigned int *)*((_QWORD *)__p + 35);
  if (v74)
  {
    *(_QWORD *)(v32 + 16) = &v73;
    *((_QWORD *)__p + 33) = __p + 272;
    *((_QWORD *)__p + 34) = 0;
    *((_QWORD *)__p + 35) = 0;
  }
  else
  {
    v72 = &v73;
  }
  v75 = *((_OWORD *)__p + 18);
  *((_QWORD *)__p + 36) = 0;
  *((_QWORD *)__p + 37) = 0;
  v76 = 1;
  std::runtime_error::runtime_error(&v82, &v70);
  v83 = v71;
  v82.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v84 = v72;
  v85 = v73;
  v86 = v74;
  if (v74)
  {
    *((_QWORD *)v73 + 2) = &v85;
    v72 = &v73;
    v73 = 0;
    v74 = 0;
  }
  else
  {
    v84 = &v85;
  }
  v87 = v75;
  v75 = 0uLL;
  std::runtime_error::runtime_error(&v77, &v82);
  v78 = v83;
  v77.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v38 = v85;
  v79 = v84;
  v80[0] = v85;
  v80[1] = v86;
  if (v86)
  {
    *((_QWORD *)v85 + 2) = v80;
    v38 = 0;
    v84 = &v85;
    v85 = 0;
    v86 = 0;
  }
  else
  {
    v79 = v80;
  }
  v81 = v87;
  v87 = 0uLL;
  v82.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v84, v38);
  MEMORY[0x18D7898AC](&v82);
  std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(__p + 24), &v77);
  v77.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v79, v80[0]);
  MEMORY[0x18D7898AC](&v77);
  if (v76)
  {
    v70.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v72, v73);
    MEMORY[0x18D7898AC](&v70);
  }
  v45 = (uint64_t *)*((_QWORD *)__p + 29);
  if (__p[304])
  {
    if (v45)
    {
      v46 = (uint64_t *)*((_QWORD *)__p + 30);
      v47 = (void *)*((_QWORD *)__p + 29);
      if (v46 != v45)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v46, 0);
        while (v46 != v45);
        v47 = *(void **)v4;
      }
      *((_QWORD *)__p + 30) = v45;
      operator delete(v47);
    }
  }
  else
  {
    ((void (*)(char *))*v45)(__p + 232);
  }
LABEL_36:
  if (!__p[224])
  {
    v37 = *(_QWORD *)v2;
    v33 = 3;
LABEL_99:
    (*(void (**)(char *))v37)(v2);
    goto LABEL_100;
  }
  v33 = 3;
  v34 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
  if (v34)
  {
LABEL_38:
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_100:
  if (v33 != 3)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[61]>((uint64_t)&v70, 0xCBu);
    std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(__p + 24), &v70);
    v70.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v72, v73);
    MEMORY[0x18D7898AC](&v70);
  }
  *((_QWORD *)__p + 19) = __p + 16;
  *(_QWORD *)__p = 0;
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
}

void sub_18CBF8B2C(void *a1)
{
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBF8B38()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBF89D8);
}

void AMSCore::BagDataSource::getSynchronousBagCookies(_QWORD *__p)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;

  v2 = (void (***)(_QWORD))(__p + 19);
  if (!*__p)
    goto LABEL_40;
  if (*((_BYTE *)__p + 384))
  {
    v3 = __p[47];
    if (!v3)
      goto LABEL_7;
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      v23 = (std::__shared_weak_count *)__p[47];
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v6 = (std::__shared_weak_count *)__p[42];
      if (!v6)
        goto LABEL_11;
    }
    else
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)__p[42];
      if (!v6)
        goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (*((_BYTE *)__p + 224))
        goto LABEL_12;
      goto LABEL_39;
    }
LABEL_11:
    if (*((_BYTE *)__p + 224))
    {
LABEL_12:
      v9 = (std::__shared_weak_count *)__p[20];
      if (!v9)
        goto LABEL_40;
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_34;
    }
LABEL_39:
    (**v2)(v2);
    goto LABEL_40;
  }
  v12 = __p[45];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      v15 = (std::__shared_weak_count *)__p[45];
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v16 = (std::__shared_weak_count *)__p[42];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)__p[40];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v9 = (std::__shared_weak_count *)__p[30];
  if (v9)
  {
    v22 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v22);
    while (__stlxr(v11 - 1, v22));
LABEL_34:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_40:
  v24 = (_QWORD *)__p[18];
  if (v24 == __p + 15)
  {
    v25 = 4;
    v24 = __p + 15;
  }
  else
  {
    if (!v24)
      goto LABEL_45;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_45:
  if (*((_BYTE *)__p + 104))
  {
    v26 = (uint64_t *)__p[3];
    if (*((_BYTE *)__p + 96))
    {
      if (v26)
      {
        v27 = (uint64_t *)__p[4];
        v28 = (void *)__p[3];
        if (v27 != v26)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v27, 0);
          while (v27 != v26);
          v28 = (void *)__p[3];
        }
        __p[4] = v26;
        operator delete(v28);
      }
    }
    else
    {
      ((void (*)(char *))*v26)((char *)__p + 24);
    }
  }
  v29 = __p[43];
  do
  {
    v30 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v31)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v29)
  {
    v32 = (unint64_t *)(__p[43] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      v34 = (std::__shared_weak_count *)__p[43];
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[61]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string __what_arg;
  std::error_code v14;

  v3 = a2;
  AMSCore::StringUtils::join<char [61]>(&__what_arg, "Couldn't fetch account cookies for synchronous bag creation.");
  *(_QWORD *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v9 = &v10;
  v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v4 = v10;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = a1 + 40;
  v6 = v11;
  *(_QWORD *)(a1 + 48) = v11;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    v4 = 0;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x18D7898AC](&v8);
}

void sub_18CBF8F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [61]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CBF908C(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::BagDataSource::getSynchronousBagValues(unint64_t a1)
{
  unint64_t v2;
  std::runtime_error *v3;
  std::__shared_mutex_base **v4;
  std::mutex **v5;
  unint64_t v6;
  int v7;
  __int128 *v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  __int128 v20;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *imp;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_mutex_base *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  std::__shared_weak_count *v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  const char *v87;
  int v88;
  __int128 v89;
  std::runtime_error v90;
  __int128 v91;
  unsigned int **v92;
  unsigned int *v93;
  unsigned int *v94;
  __int128 v95;
  std::runtime_error v96;
  __int128 v97;
  unsigned int **v98;
  unsigned int *v99;
  unsigned int *v100;
  __int128 v101;
  char v102;
  std::runtime_error v103;
  __int128 v104;
  unsigned int **v105;
  unsigned int *v106[2];
  __int128 v107;

  v2 = a1 + 328;
  v3 = (std::runtime_error *)(a1 + 152);
  v4 = (std::__shared_mutex_base **)(a1 + 360);
  v5 = (std::mutex **)(a1 + 376);
  v6 = a1 + 16;
  v7 = *(unsigned __int8 *)(a1 + 448);
  if (v7 == 2)
  {
LABEL_40:
    v38 = *(_QWORD *)(a1 + 432);
    if (*(_BYTE *)(v38 + 88))
    {
      v39 = *(_BYTE *)(v38 + 80);
      if (!v39)
      {
        std::runtime_error::runtime_error(v3, (const std::runtime_error *)(v38 + 8));
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v38 + 24);
        v40 = (_QWORD *)(v38 + 48);
        v41 = *(_QWORD *)(v38 + 48);
        *(_QWORD *)(a1 + 192) = v41;
        v42 = a1 + 192;
        *(_QWORD *)(a1 + 152) = off_1E2521330;
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(v38 + 40);
        v43 = *(_QWORD *)(v38 + 56);
        *(_QWORD *)(a1 + 200) = v43;
        if (v43)
        {
          *(_QWORD *)(v41 + 16) = v42;
          *(_QWORD *)(v38 + 40) = v40;
          *v40 = 0;
          *(_QWORD *)(v38 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 184) = v42;
        }
        v45 = *(_QWORD *)(a1 + 432);
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v45 + 64);
        *(_QWORD *)(v45 + 64) = 0;
        *(_QWORD *)(v45 + 72) = 0;
      }
      *(_BYTE *)(a1 + 224) = v39;
      v46 = *(_QWORD *)(a1 + 440);
      if (!v46)
        goto LABEL_54;
      v47 = (unint64_t *)(v46 + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        v74 = *(std::__shared_weak_count **)(a1 + 440);
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
        v49 = *(std::__shared_weak_count **)(a1 + 352);
        if (!v49)
          goto LABEL_58;
      }
      else
      {
LABEL_54:
        v49 = *(std::__shared_weak_count **)(a1 + 352);
        if (!v49)
          goto LABEL_58;
      }
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(p_shared_owners);
      while (__stlxr(v51 - 1, p_shared_owners));
      if (v51)
      {
LABEL_58:
        if (*(_BYTE *)(a1 + 224))
          goto LABEL_59;
LABEL_94:
        std::runtime_error::runtime_error(&v96, v3);
        v75 = (_QWORD *)(a1 + 192);
        v76 = *(_QWORD *)(a1 + 192);
        v97 = *(_OWORD *)(a1 + 168);
        v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v98 = *(unsigned int ***)(a1 + 184);
        v99 = (unsigned int *)v76;
        v100 = *(unsigned int **)(a1 + 200);
        if (v100)
        {
          *(_QWORD *)(v76 + 16) = &v99;
          *(_QWORD *)(a1 + 184) = v75;
          *v75 = 0;
          *(_QWORD *)(a1 + 200) = 0;
        }
        else
        {
          v98 = &v99;
        }
        v101 = *(_OWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        v102 = 1;
        std::runtime_error::runtime_error(&v90, &v96);
        v91 = v97;
        v90.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v92 = v98;
        v93 = v99;
        v94 = v100;
        if (v100)
        {
          *((_QWORD *)v99 + 2) = &v93;
          v98 = &v99;
          v99 = 0;
          v100 = 0;
        }
        else
        {
          v92 = &v93;
        }
        v95 = v101;
        v101 = 0uLL;
        std::runtime_error::runtime_error(&v103, &v90);
        v104 = v91;
        v77 = v93;
        v103.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v105 = v92;
        v106[0] = v93;
        v106[1] = v94;
        if (v94)
        {
          *((_QWORD *)v93 + 2) = v106;
          v77 = 0;
          v92 = &v93;
          v93 = 0;
          v94 = 0;
        }
        else
        {
          v105 = v106;
        }
        v107 = v95;
        v95 = 0uLL;
        v90.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v92, v77);
        MEMORY[0x18D7898AC](&v90);
        std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v103);
        v103.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v78 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
        if (*((_QWORD *)&v107 + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v105, v106[0]);
        MEMORY[0x18D7898AC](&v103);
        if (v102)
        {
          v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v81 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
          if (*((_QWORD *)&v101 + 1))
          {
            v82 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v99);
          MEMORY[0x18D7898AC](&v96);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          if (!*(_BYTE *)(a1 + 384))
          {
LABEL_118:
            v84 = *(std::__shared_weak_count **)(a1 + 336);
            if (!v84)
              goto LABEL_122;
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
              if (!*(_BYTE *)(a1 + 368))
                goto LABEL_124;
            }
            else
            {
LABEL_122:
              if (!*(_BYTE *)(a1 + 368))
              {
LABEL_124:
                *(_QWORD *)(a1 + 152) = v6;
                *(_QWORD *)a1 = 0;
                AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
                return;
              }
            }
            std::__shared_mutex_base::unlock_shared(*v4);
            goto LABEL_124;
          }
        }
        else
        {
          ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
          if (!*(_BYTE *)(a1 + 384))
            goto LABEL_118;
        }
LABEL_117:
        AMSCore::AwaitableMutex::unlock(*v5);
        goto LABEL_118;
      }
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      if (!*(_BYTE *)(a1 + 224))
        goto LABEL_94;
LABEL_59:
      if (*(_BYTE *)(a1 + 384))
      {
        AMSCore::AwaitableMutex::unlock(*v5);
        *(_BYTE *)(a1 + 384) = 0;
        v52 = *(std::__shared_mutex_base **)(a1 + 360);
        if (v52)
        {
          if (*(_BYTE *)(a1 + 368))
          {
            v87 = "shared_lock::lock: already locked";
            v88 = 11;
LABEL_139:
            std::__throw_system_error(v88, v87);
            goto LABEL_140;
          }
          std::__shared_mutex_base::lock_shared(v52);
          v53 = *(_QWORD *)(a1 + 392);
          *(_BYTE *)(a1 + 368) = 1;
          v55 = *(_QWORD *)(v53 + 416);
          v54 = *(_QWORD *)(v53 + 424);
          if (v54)
          {
            v56 = (unint64_t *)(v54 + 8);
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v58 = *(std::__shared_weak_count **)(a1 + 336);
          *(_QWORD *)(a1 + 328) = v55;
          *(_QWORD *)(a1 + 336) = v54;
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          if (*(_BYTE *)(a1 + 368))
          {
            v61 = *(_QWORD *)(a1 + 392);
            v62 = *(_QWORD *)(v61 + 456);
            v63 = *(unsigned __int8 *)(v61 + 464);
            std::__shared_mutex_base::unlock_shared(*v4);
            *(_BYTE *)(a1 + 368) = 0;
            if (v63)
            {
              v64 = *(_QWORD *)(a1 + 392);
              v65 = *(_OWORD *)(a1 + 248);
              *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 232);
              *(_OWORD *)(a1 + 312) = v65;
              if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 40))(v64, v62) & 1) != 0)
              {
                v66 = *(_OWORD *)v2;
                *(_QWORD *)v2 = 0;
                *(_QWORD *)(v2 + 8) = 0;
                if (!*(_BYTE *)(a1 + 104))
                  goto LABEL_132;
                if (*(_BYTE *)(a1 + 96))
                {
                  v67 = *(std::__shared_weak_count **)(a1 + 32);
                  if (!v67)
                    goto LABEL_132;
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (v69)
                  {
LABEL_132:
                    *(_OWORD *)(a1 + 24) = v66;
                    *(_QWORD *)(a1 + 40) = v62;
                    *(_BYTE *)(a1 + 96) = 1;
                    *(_BYTE *)(a1 + 104) = 1;
                    if (!*(_BYTE *)(a1 + 384))
                      goto LABEL_118;
                    goto LABEL_117;
                  }
                  v89 = v66;
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
                else
                {
                  v89 = v66;
                  (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                }
                v66 = v89;
                goto LABEL_132;
              }
              AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[39]>((uint64_t)&v96, 0xCBu);
              std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v96);
              v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v70 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
              if (!*((_QWORD *)&v101 + 1))
              {
LABEL_89:
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v99);
                MEMORY[0x18D7898AC](&v96);
                if (!*(_BYTE *)(a1 + 384))
                  goto LABEL_118;
                goto LABEL_117;
              }
              v73 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
              do
                v72 = __ldaxr(v73);
              while (__stlxr(v72 - 1, v73));
            }
            else
            {
              AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[37]>((uint64_t)&v96, 0xCBu);
              std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v96);
              v96.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v70 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
              if (!*((_QWORD *)&v101 + 1))
                goto LABEL_89;
              v71 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
            }
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
            goto LABEL_89;
          }
          v87 = "shared_lock::unlock: not locked";
        }
        else
        {
          v87 = "shared_lock::lock: references null mutex";
        }
      }
      else
      {
        v87 = "unique_lock::unlock: not locked";
      }
      v88 = 1;
      goto LABEL_139;
    }
LABEL_140:
    __break(1u);
    return;
  }
  v8 = (__int128 *)(a1 + 344);
  if (v7 == 1)
    goto LABEL_3;
  v15 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 376) = v15 + 472;
  *(_BYTE *)(a1 + 384) = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v15 + 248));
  v16 = *(_QWORD *)(a1 + 392);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 416) + 16);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v16 + 248));
  if (v17)
  {
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(*(_QWORD *)(a1 + 392) + 248));
    v18 = *(_QWORD *)(a1 + 392);
    if (*(_BYTE *)(v18 + 464))
    {
      v19 = *(_QWORD *)(v18 + 456) <= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 400) + 16))(*(_QWORD *)(a1 + 400));
      v18 = *(_QWORD *)(a1 + 392);
    }
    else
    {
      v19 = 0;
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v18 + 248));
    if (!v19)
      goto LABEL_59;
  }
  if (*(_BYTE *)(v2 + 121) == 1)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 392) + 32))(*(_QWORD *)(a1 + 392), 1);
    v20 = *v8;
    *(_OWORD *)(a1 + 416) = *v8;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(a1 + 352) = 0;
    if (!atomic_load((unint64_t *)(v20 + 96)))
    {
      *(_BYTE *)(v2 + 120) = 1;
      v22 = (unint64_t *)(*(_QWORD *)(a1 + 416) + 96);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(a1, v22));
      if (!v23)
        return;
    }
LABEL_3:
    v9 = *(_QWORD *)(a1 + 416);
    if (!*(_BYTE *)(v9 + 88))
      goto LABEL_140;
    v10 = *(_BYTE *)(v9 + 80);
    if (!v10)
    {
      std::runtime_error::runtime_error(v3, (const std::runtime_error *)(v9 + 8));
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v9 + 24);
      v11 = (_QWORD *)(v9 + 48);
      v12 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(a1 + 192) = v12;
      v13 = a1 + 192;
      *(_QWORD *)(a1 + 152) = off_1E2521330;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(v9 + 40);
      v14 = *(_QWORD *)(v9 + 56);
      *(_QWORD *)(a1 + 200) = v14;
      if (v14)
      {
        *(_QWORD *)(v12 + 16) = v13;
        *(_QWORD *)(v9 + 40) = v11;
        *v11 = 0;
        *(_QWORD *)(v9 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 184) = v13;
      }
      v24 = *(_QWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(v24 + 64);
      *(_QWORD *)(v24 + 64) = 0;
      *(_QWORD *)(v24 + 72) = 0;
    }
    *(_BYTE *)(a1 + 224) = v10;
    v25 = *(_QWORD *)(a1 + 424);
    if (!v25)
      goto LABEL_24;
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      v44 = *(std::__shared_weak_count **)(a1 + 424);
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v28 = *(std::__shared_weak_count **)(a1 + 352);
      if (!v28)
        goto LABEL_28;
    }
    else
    {
LABEL_24:
      v28 = *(std::__shared_weak_count **)(a1 + 352);
      if (!v28)
        goto LABEL_28;
    }
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if (*(_BYTE *)(a1 + 224))
        goto LABEL_59;
      goto LABEL_29;
    }
LABEL_28:
    if (*(_BYTE *)(a1 + 224))
      goto LABEL_59;
LABEL_29:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v96);
    AMSCore::Logger::log<char [101]>((uint64_t)v96.__vftable);
    imp = (std::__shared_weak_count *)v96.__imp_.__imp_;
    if (v96.__imp_.__imp_)
    {
      v32 = (unint64_t *)(v96.__imp_.__imp_ + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    if (!*(_BYTE *)(a1 + 224))
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 392) + 32))(*(_QWORD *)(a1 + 392), 0);
  v34 = *v8;
  *(_OWORD *)(a1 + 432) = *v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(a1 + 352) = 0;
  if (atomic_load((unint64_t *)(v34 + 96)))
    goto LABEL_40;
  *(_BYTE *)(v2 + 120) = 2;
  v36 = (unint64_t *)(*(_QWORD *)(a1 + 432) + 96);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(a1, v36));
  if (v37)
    goto LABEL_40;
}

void sub_18CBF9A0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  void (***v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  if (!*(_BYTE *)(v15 + 224))
    (**v16)(v16);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v17);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v18);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100](v19);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBF9A9C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBF9928);
}

void AMSCore::BagDataSource::getSynchronousBagValues(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;

  if (!*(_QWORD *)__p)
    goto LABEL_30;
  if (!__p[448])
    goto LABEL_24;
  if (__p[448] != 1)
  {
    v9 = *((_QWORD *)__p + 55);
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 55);
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 44);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      goto LABEL_21;
    }
LABEL_22:
    if (!__p[384])
      goto LABEL_24;
    goto LABEL_23;
  }
  v2 = *((_QWORD *)__p + 53);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 53);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 44);
  if (!v6)
    goto LABEL_22;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
LABEL_21:
  if (v8)
    goto LABEL_22;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (__p[384])
LABEL_23:
    AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 47));
LABEL_24:
  v14 = (std::__shared_weak_count *)*((_QWORD *)__p + 42);
  if (!v14)
    goto LABEL_28;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_28:
    if (!__p[368])
      goto LABEL_30;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (__p[368])
LABEL_29:
    std::__shared_mutex_base::unlock_shared(*((std::__shared_mutex_base **)__p + 45));
LABEL_30:
  v17 = (char *)*((_QWORD *)__p + 18);
  if (v17 == __p + 120)
  {
    v18 = 4;
    v17 = __p + 120;
  }
  else
  {
    if (!v17)
      goto LABEL_35;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_35:
  if (__p[104])
  {
    if (__p[96])
    {
      v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 4);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  v22 = *((_QWORD *)__p + 51);
  do
  {
    v23 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v24)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v22)
  {
    v25 = (unint64_t *)(*((_QWORD *)__p + 51) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      v27 = (std::__shared_weak_count *)*((_QWORD *)__p + 51);
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [101]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Failed to load bag data from persistence. Will retry without limiting data source to persisted data.", 100);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "bag", 3, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CBF9F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[37]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string __what_arg;
  std::error_code v14;

  v3 = a2;
  AMSCore::StringUtils::join<char [37]>(&__what_arg, "Bag expiration unexpectedly missing.");
  *(_QWORD *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v9 = &v10;
  v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v4 = v10;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = a1 + 40;
  v6 = v11;
  *(_QWORD *)(a1 + 48) = v11;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    v4 = 0;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x18D7898AC](&v8);
}

void sub_18CBFA0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[39]>(uint64_t a1, unsigned int a2)
{
  std::system_error_vtbl *v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error_vtbl *v7;
  std::system_error_vtbl *v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v15;
  std::system_error v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::error_code v25;

  v4 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = MEMORY[0x1E0DE4F60];
  v7 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16.__vftable = v7;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v7[-1].~system_error) = v8;
  v9 = (std::ios_base *)((char *)&v16 + (unint64_t)v16.__vftable[-1].~system_error);
  std::ios_base::init(v9, &v16.__imp_);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16.__vftable = v4 + 1;
  v24[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Newly loaded data has already expired.", 38);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v16.__imp_, &v15);
  v16.__vftable = *(std::system_error_vtbl **)v6;
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v16.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v6 + 24);
  v16.__imp_.__imp_ = (const char *)(v10 + 16);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v24);
  *(_QWORD *)&v25.__val_ = a2;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v16, v25, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v18 = 0;
  v19 = 0;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v17 = &v18;
  v20 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(std::error_code *)(a1 + 16) = v16.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v11 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = a1 + 40;
  v13 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v11 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v16.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
  return MEMORY[0x18D7898AC](&v16);
}

void sub_18CBFA2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CBFA2F4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  return a1;
}

void AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *imp;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::runtime_error v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v1 = result;
  v23 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v22 = v21;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v21);
      }
      else
      {
        v22 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v22 = 0;
    }
    if (v22)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(v5 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v14 = *(std::runtime_error *)(v5 + 8);
        v6->__vftable = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)&v15 = *(_QWORD *)(v5 + 24);
      }
      else
      {
        std::runtime_error::runtime_error(&v14, v6);
        v8 = (_QWORD *)(v5 + 48);
        v9 = *(_QWORD *)(v5 + 48);
        v15 = *(_OWORD *)(v5 + 24);
        v14.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v16 = *(uint64_t **)(v5 + 40);
        v17 = v9;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v9 + 16) = &v17;
          *(_QWORD *)(v5 + 40) = v8;
          *v8 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v16 = &v17;
        }
        v19 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v20 = v7;
      if (!v22)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v22 + 48))(v22, &v14);
      if (v20)
      {
        imp = (std::__shared_weak_count *)v14.__imp_.__imp_;
        if (v14.__imp_.__imp_)
        {
          v11 = (unint64_t *)(v14.__imp_.__imp_ + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v14.~runtime_error)(&v14);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v22;
    if (v22 == v21)
    {
      v13 = 4;
      result = v21;
    }
    else
    {
      if (!v22)
        return result;
      v13 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v13))();
  }
  return result;
}

void sub_18CBFA768(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StringUtils::join<char [37]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CBFA8C4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise *,AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise *,AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise *,AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__14pairINS1_10shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS"
                     "1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS8_INS2_IKSA_SB_EEEEEEEENS1_6chrono10time_pointINSK_12syste"
                     "m_clockENSK_8durationIxNS1_5ratioILl1ELl1000000EEEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__14pairINS1_10shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_t"
                                "raitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS8_INS2_IKSA_SB_EEEEEEEENS1_6chrono10"
                                "time_pointINSK_12system_clockENSK_8durationIxNS1_5ratioILl1ELl1000000EEEEEEEEENS_5ErrorE"
                                "E7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__14pairINS1_10shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS8_INS2_IKSA_SB_EEEEEEEENS1_6chrono10time_pointINSK_12system_clockENSK_8durationIxNS1_5ratioILl1ELl1000000EEEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__14pairINS1_10shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS8_INS2_IKSA_SB_EEEEEEEENS1_6chrono10time_pointINSK_12system_clockENSK_8durationIxNS1_5ratioILl1ELl1000000EEEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::BagDataSource::getSynchronousBagData(_QWORD *a1)
{
  _QWORD *v2;
  std::runtime_error *v3;
  std::runtime_error *v4;
  std::runtime_error *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  const std::runtime_error *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const std::runtime_error *v32;
  char v33;
  const char **v34;
  std::__libcpp_refstring *p_imp;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  const std::runtime_error *v42;
  std::runtime_error_vtbl *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  const std::runtime_error *v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *imp;
  unint64_t *v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int **v72;
  _QWORD *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  void *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int **v113;
  _QWORD *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  std::runtime_error_vtbl *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int **v124;
  _QWORD *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  _QWORD *v132;
  std::runtime_error v133;
  __int128 v134;
  unsigned int **v135;
  unsigned int *v136;
  uint64_t v137;
  __int128 v138;
  char v139;
  std::runtime_error v140;
  __int128 v141;
  unsigned int **v142;
  unsigned int *v143;
  uint64_t v144;
  __int128 v145;
  std::runtime_error v146;
  __int128 v147;
  unsigned int **v148;
  unsigned int *v149;
  uint64_t v150;
  __int128 v151;

  v2 = a1 + 57;
  v3 = (std::runtime_error *)(a1 + 19);
  v4 = (std::runtime_error *)(a1 + 29);
  v5 = (std::runtime_error *)(a1 + 39);
  v6 = a1 + 60;
  v132 = a1 + 2;
  v7 = *((unsigned __int8 *)a1 + 608);
  if (v7 == 2)
    goto LABEL_57;
  if (v7 == 1)
    goto LABEL_28;
  v8 = a1[71];
  if (!*(_BYTE *)(v8 + 88))
    goto LABEL_201;
  v9 = (const std::runtime_error *)(v8 + 8);
  v10 = *(_BYTE *)(v8 + 80);
  if (v10)
  {
    *(_OWORD *)(a1 + 19) = *(_OWORD *)(v8 + 8);
    v9->__vftable = 0;
    *(_QWORD *)(v8 + 16) = 0;
    a1[21] = *(_QWORD *)(v8 + 24);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 19), v9);
    *(_OWORD *)(a1 + 21) = *(_OWORD *)(v8 + 24);
    v11 = (_QWORD *)(v8 + 48);
    v12 = *(_QWORD *)(v8 + 48);
    a1[24] = v12;
    v13 = a1 + 24;
    a1[19] = off_1E2521330;
    a1[23] = *(_QWORD *)(v8 + 40);
    v14 = *(_QWORD *)(v8 + 56);
    a1[25] = v14;
    if (v14)
    {
      *(_QWORD *)(v12 + 16) = v13;
      *(_QWORD *)(v8 + 40) = v11;
      *v11 = 0;
      *(_QWORD *)(v8 + 56) = 0;
    }
    else
    {
      a1[23] = v13;
    }
    v15 = a1[71];
    *((_OWORD *)a1 + 13) = *(_OWORD *)(v15 + 64);
    *(_QWORD *)(v15 + 64) = 0;
    *(_QWORD *)(v15 + 72) = 0;
  }
  *((_BYTE *)a1 + 224) = v10;
  v16 = a1[72];
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      v19 = (std::__shared_weak_count *)a1[72];
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v20 = (std::__shared_weak_count *)a1[30];
  if (!v20)
    goto LABEL_19;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)a1[63];
    if (!v23)
      goto LABEL_23;
  }
  else
  {
LABEL_19:
    v23 = (std::__shared_weak_count *)a1[63];
    if (!v23)
      goto LABEL_23;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (*((_BYTE *)a1 + 224))
      goto LABEL_24;
LABEL_36:
    std::runtime_error::runtime_error(&v133, v3);
    v40 = a1 + 24;
    v41 = a1[24];
    v134 = *(_OWORD *)(a1 + 21);
    v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v135 = (unsigned int **)a1[23];
    v136 = (unsigned int *)v41;
    v137 = a1[25];
    if (v137)
    {
      *(_QWORD *)(v41 + 16) = &v136;
      a1[23] = v40;
      *v40 = 0;
      a1[25] = 0;
    }
    else
    {
      v135 = &v136;
    }
    v138 = *((_OWORD *)a1 + 13);
    a1[26] = 0;
    a1[27] = 0;
    v139 = 1;
    std::runtime_error::runtime_error(&v140, &v133);
    v141 = v134;
    v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v142 = v135;
    v143 = v136;
    v144 = v137;
    if (v137)
    {
      *((_QWORD *)v136 + 2) = &v143;
      v135 = &v136;
      v136 = 0;
      v137 = 0;
    }
    else
    {
      v142 = &v143;
    }
    v145 = v138;
    v138 = 0uLL;
    std::runtime_error::runtime_error(&v146, &v140);
    v147 = v141;
    v122 = v143;
    v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v148 = v142;
    v149 = v143;
    v150 = v144;
    if (v144)
    {
      *((_QWORD *)v143 + 2) = &v149;
      v122 = 0;
      v142 = &v143;
      v143 = 0;
      v144 = 0;
    }
    else
    {
      v148 = &v149;
    }
    v151 = v145;
    v145 = 0uLL;
    v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v142, v122);
    MEMORY[0x18D7898AC](&v140);
    std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)(a1 + 3));
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 3), &v146);
    v124 = v148;
    v123 = v149;
    a1[8] = v149;
    v125 = a1 + 8;
    *(_OWORD *)(a1 + 5) = v147;
    a1[3] = off_1E2521330;
    a1[7] = v124;
    v126 = v150;
    a1[9] = v150;
    if (v126)
    {
      *((_QWORD *)v123 + 2) = v125;
      v123 = 0;
      v148 = &v149;
      v149 = 0;
      v150 = 0;
    }
    else
    {
      a1[7] = v125;
    }
    *((_OWORD *)a1 + 5) = v151;
    v151 = 0uLL;
    *((_BYTE *)a1 + 96) = 0;
    *((_BYTE *)a1 + 104) = 1;
    v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v148, v123);
    MEMORY[0x18D7898AC](&v146);
    if (v139)
    {
      v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v127 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v128 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v135, v136);
      MEMORY[0x18D7898AC](&v133);
    }
    v78 = 3;
    if (*((_BYTE *)a1 + 224))
    {
LABEL_130:
      v103 = (std::__shared_weak_count *)a1[20];
      if (!v103)
        goto LABEL_134;
      v104 = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
        if (v78 != 3)
          goto LABEL_141;
      }
      else
      {
LABEL_134:
        if (v78 != 3)
        {
LABEL_141:
          v106 = (_QWORD *)a1[18];
          if (v106 == a1 + 15)
          {
            v107 = 4;
            v106 = a1 + 15;
          }
          else
          {
            if (!v106)
              goto LABEL_146;
            v107 = 5;
          }
          (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_146:
          std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::~__optional_destruct_base[abi:fe180100]((uint64_t)(a1 + 3));
          do
          {
            v108 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
            v109 = v108 - 1;
          }
          while (__stlxr(v109, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
          if (!v109)
            MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
          operator delete(a1);
          return;
        }
      }
LABEL_140:
      a1[19] = v132;
      *a1 = 0;
      AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
      return;
    }
LABEL_137:
    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    if (v78 != 3)
      goto LABEL_141;
    goto LABEL_140;
  }
LABEL_23:
  if (!*((_BYTE *)a1 + 224))
    goto LABEL_36;
LABEL_24:
  v26 = a1[70];
  *((_OWORD *)a1 + 30) = *(_OWORD *)(a1 + 19);
  v3->__vftable = 0;
  v3->__imp_.__imp_ = 0;
  a1[73] = a1[21];
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  v27 = *(_OWORD *)(a1 + 29);
  *((_OWORD *)a1 + 37) = v27;
  v4->__vftable = 0;
  v4->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v27 + 96)))
  {
    *((_BYTE *)v2 + 152) = 1;
    v29 = (unint64_t *)(a1[74] + 96);
    do
      v30 = __ldaxr(v29);
    while (__stlxr((unint64_t)a1, v29));
    if (!v30)
      return;
  }
LABEL_28:
  v31 = a1[74];
  if (!*(_BYTE *)(v31 + 88))
    goto LABEL_201;
  v32 = (const std::runtime_error *)(v31 + 8);
  v33 = *(_BYTE *)(v31 + 80);
  if (v33)
  {
    a1[39] = *(_QWORD *)(v31 + 8);
    v34 = (const char **)(a1 + 40);
    p_imp = (std::__libcpp_refstring *)(v31 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v5, v32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(v31 + 24);
    a1[39] = off_1E2521330;
    v36 = (_QWORD *)(v31 + 48);
    v37 = *(_QWORD *)(v31 + 48);
    v38 = a1 + 44;
    a1[43] = *(_QWORD *)(v31 + 40);
    a1[44] = v37;
    v39 = *(_QWORD *)(v31 + 56);
    a1[45] = v39;
    if (v39)
    {
      *(_QWORD *)(v37 + 16) = v38;
      *(_QWORD *)(v31 + 40) = v36;
      *v36 = 0;
      *(_QWORD *)(v31 + 56) = 0;
    }
    else
    {
      a1[43] = v38;
    }
    v42 = (const std::runtime_error *)a1[74];
    v43 = v42[4].__vftable;
    v32 = v42 + 4;
    a1[46] = v43;
    v34 = (const char **)(a1 + 47);
    p_imp = &v32->__imp_;
  }
  *v34 = p_imp->__imp_;
  v32->__vftable = 0;
  v32->__imp_.__imp_ = 0;
  *((_BYTE *)a1 + 384) = v33;
  v44 = a1[75];
  if (!v44)
    goto LABEL_44;
  v45 = (unint64_t *)(v44 + 8);
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    v65 = (std::__shared_weak_count *)a1[75];
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    v47 = (std::__shared_weak_count *)a1[30];
    if (!v47)
      goto LABEL_48;
  }
  else
  {
LABEL_44:
    v47 = (std::__shared_weak_count *)a1[30];
    if (!v47)
      goto LABEL_48;
  }
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_48:
    if (*((_BYTE *)a1 + 384))
      goto LABEL_49;
LABEL_65:
    std::runtime_error::runtime_error(&v133, v5);
    v134 = *(_OWORD *)(a1 + 41);
    v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v66 = a1[44];
    v135 = (unsigned int **)a1[43];
    v136 = (unsigned int *)v66;
    v137 = a1[45];
    if (v137)
    {
      *(_QWORD *)(v66 + 16) = &v136;
      a1[43] = a1 + 44;
      a1[44] = 0;
      a1[45] = 0;
    }
    else
    {
      v135 = &v136;
    }
    v138 = *((_OWORD *)a1 + 23);
    a1[46] = 0;
    a1[47] = 0;
    v139 = 1;
    std::runtime_error::runtime_error(&v140, &v133);
    v141 = v134;
    v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v142 = v135;
    v143 = v136;
    v144 = v137;
    if (v137)
    {
      *((_QWORD *)v136 + 2) = &v143;
      v135 = &v136;
      v136 = 0;
      v137 = 0;
    }
    else
    {
      v142 = &v143;
    }
    v145 = v138;
    v138 = 0uLL;
    std::runtime_error::runtime_error(&v146, &v140);
    v147 = v141;
    v70 = v143;
    v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v148 = v142;
    v149 = v143;
    v150 = v144;
    if (v144)
    {
      *((_QWORD *)v143 + 2) = &v149;
      v70 = 0;
      v142 = &v143;
      v143 = 0;
      v144 = 0;
    }
    else
    {
      v148 = &v149;
    }
    v151 = v145;
    v145 = 0uLL;
    v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v142, v70);
    MEMORY[0x18D7898AC](&v140);
    std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)(a1 + 3));
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 3), &v146);
    v72 = v148;
    v71 = v149;
    a1[8] = v149;
    v73 = a1 + 8;
    *(_OWORD *)(a1 + 5) = v147;
    a1[3] = off_1E2521330;
    a1[7] = v72;
    v74 = v150;
    a1[9] = v150;
    if (v74)
    {
      *((_QWORD *)v71 + 2) = v73;
      v71 = 0;
      v148 = &v149;
      v149 = 0;
      v150 = 0;
    }
    else
    {
      a1[7] = v73;
    }
    *((_OWORD *)a1 + 5) = v151;
    v151 = 0uLL;
    *((_BYTE *)a1 + 96) = 0;
    *((_BYTE *)a1 + 104) = 1;
    v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v148, v71);
    MEMORY[0x18D7898AC](&v146);
    if (v139)
    {
      v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
      if (*((_QWORD *)&v138 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v135, v136);
      MEMORY[0x18D7898AC](&v133);
    }
    v78 = 3;
LABEL_118:
    if (*((_BYTE *)a1 + 384))
    {
      v97 = (std::__shared_weak_count *)a1[40];
      if (v97)
      {
        v98 = (unint64_t *)&v97->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
    }
    v100 = (std::__shared_weak_count *)a1[61];
    if (!v100)
      goto LABEL_204;
    v101 = (unint64_t *)&v100->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
      if (*((_BYTE *)a1 + 224))
        goto LABEL_130;
    }
    else
    {
LABEL_204:
      if (*((_BYTE *)a1 + 224))
        goto LABEL_130;
    }
    goto LABEL_137;
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  if (!*((_BYTE *)a1 + 384))
    goto LABEL_65;
LABEL_49:
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  if (!v5->__vftable)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v133);
    AMSCore::Logger::log<char [69]>((uint64_t)v133.__vftable, 2, (uint64_t)"bag", 3, "No account was found. Synchronous bag data will not contain cookies.");
    imp = (std::__shared_weak_count *)v133.__imp_.__imp_;
    if (v133.__imp_.__imp_)
    {
      v68 = (unint64_t *)(v133.__imp_.__imp_ + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    goto LABEL_112;
  }
  a1[68] = v5->__vftable;
  v50 = a1[40];
  a1[69] = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[70] + 56))(a1[70], a1 + 68);
  v53 = *((_OWORD *)a1 + 33);
  a1[66] = 0;
  a1[67] = 0;
  *((_OWORD *)a1 + 32) = v53;
  if (atomic_load((unint64_t *)(v53 + 96)))
    goto LABEL_57;
  *((_BYTE *)v2 + 152) = 2;
  v55 = (unint64_t *)(a1[64] + 96);
  do
    v56 = __ldaxr(v55);
  while (__stlxr((unint64_t)a1, v55));
  if (v56)
  {
LABEL_57:
    v57 = a1[64];
    if (*(_BYTE *)(v57 + 88))
    {
      v58 = (const std::runtime_error *)(v57 + 8);
      v59 = *(_BYTE *)(v57 + 80);
      v60 = a1 + 31;
      if (v59)
      {
        *v4 = *(std::runtime_error *)(v57 + 8);
        *v60 = *(_QWORD *)(v57 + 24);
        *(_QWORD *)(v57 + 16) = 0;
        *(_QWORD *)(v57 + 24) = 0;
        v58->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v4, v58);
        *(_OWORD *)v60 = *(_OWORD *)(v57 + 24);
        a1[29] = off_1E2521330;
        v61 = (_QWORD *)(v57 + 48);
        v62 = *(_QWORD *)(v57 + 48);
        v63 = a1 + 34;
        a1[33] = *(_QWORD *)(v57 + 40);
        a1[34] = v62;
        v64 = *(_QWORD *)(v57 + 56);
        a1[35] = v64;
        if (v64)
        {
          *(_QWORD *)(v62 + 16) = v63;
          *(_QWORD *)(v57 + 40) = v61;
          *v61 = 0;
          *(_QWORD *)(v57 + 56) = 0;
        }
        else
        {
          a1[33] = v63;
        }
        *((_OWORD *)a1 + 18) = *(_OWORD *)(v57 + 64);
        *(_QWORD *)(v57 + 64) = 0;
        *(_QWORD *)(v57 + 72) = 0;
      }
      *((_BYTE *)a1 + 304) = v59;
      v79 = (std::__shared_weak_count *)a1[65];
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = (std::__shared_weak_count *)a1[67];
      if (!v82)
        goto LABEL_101;
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
        v85 = (std::__shared_weak_count *)a1[69];
        if (!v85)
          goto LABEL_105;
      }
      else
      {
LABEL_101:
        v85 = (std::__shared_weak_count *)a1[69];
        if (!v85)
          goto LABEL_105;
      }
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        v78 = *((unsigned __int8 *)a1 + 304);
        if (*((_BYTE *)a1 + 304))
        {
LABEL_106:
          v88 = (uint64_t *)*v2;
          if (*v2)
          {
            v89 = (uint64_t *)a1[58];
            v90 = (void *)*v2;
            if (v89 != v88)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v89, 0);
              while (v89 != v88);
              v90 = (void *)*v2;
            }
            a1[58] = v88;
            operator delete(v90);
          }
          *(_OWORD *)v2 = *(_OWORD *)(a1 + 29);
          a1[59] = a1[31];
          v4->__imp_.__imp_ = 0;
          v4[1].__vftable = 0;
          v4->__vftable = 0;
          if (!v78)
            goto LABEL_113;
          goto LABEL_112;
        }
        goto LABEL_155;
      }
LABEL_105:
      v78 = *((unsigned __int8 *)a1 + 304);
      if (*((_BYTE *)a1 + 304))
        goto LABEL_106;
LABEL_155:
      std::runtime_error::runtime_error(&v133, v4);
      v134 = *(_OWORD *)v60;
      v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v110 = a1[34];
      v135 = (unsigned int **)a1[33];
      v136 = (unsigned int *)v110;
      v137 = a1[35];
      if (v137)
      {
        *(_QWORD *)(v110 + 16) = &v136;
        a1[33] = a1 + 34;
        a1[34] = 0;
        a1[35] = 0;
      }
      else
      {
        v135 = &v136;
      }
      v138 = *((_OWORD *)a1 + 18);
      a1[36] = 0;
      a1[37] = 0;
      v139 = 1;
      std::runtime_error::runtime_error(&v146, &v133);
      v147 = v134;
      v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v148 = v135;
      v149 = v136;
      v150 = v137;
      if (v137)
      {
        *((_QWORD *)v136 + 2) = &v149;
        v135 = &v136;
        v136 = 0;
        v137 = 0;
      }
      else
      {
        v148 = &v149;
      }
      v151 = v138;
      v138 = 0uLL;
      std::runtime_error::runtime_error(&v140, &v146);
      v141 = v147;
      v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v111 = v149;
      v142 = v148;
      v143 = v149;
      v144 = v150;
      if (v150)
      {
        *((_QWORD *)v149 + 2) = &v143;
        v111 = 0;
        v148 = &v149;
        v149 = 0;
        v150 = 0;
      }
      else
      {
        v142 = &v143;
      }
      v145 = v151;
      v151 = 0uLL;
      v146.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v148, v111);
      MEMORY[0x18D7898AC](&v146);
      std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)(a1 + 3));
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 3), &v140);
      v113 = v142;
      v112 = v143;
      a1[8] = v143;
      v114 = a1 + 8;
      *(_OWORD *)(a1 + 5) = v141;
      a1[3] = off_1E2521330;
      a1[7] = v113;
      v115 = v144;
      a1[9] = v144;
      if (v115)
      {
        *((_QWORD *)v112 + 2) = v114;
        v112 = 0;
        v142 = &v143;
        v143 = 0;
        v144 = 0;
      }
      else
      {
        a1[7] = v114;
      }
      *((_OWORD *)a1 + 5) = v145;
      v145 = 0uLL;
      *((_BYTE *)a1 + 96) = 0;
      *((_BYTE *)a1 + 104) = 1;
      v140.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v142, v112);
      MEMORY[0x18D7898AC](&v140);
      if (v139)
      {
        v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v116 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
        if (*((_QWORD *)&v138 + 1))
        {
          v117 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v135, v136);
        MEMORY[0x18D7898AC](&v133);
      }
      v119 = (uint64_t *)a1[29];
      if (!*((_BYTE *)a1 + 304))
      {
        ((void (*)(std::runtime_error *))*v119)(v4);
        v78 = 3;
LABEL_113:
        v94 = (uint64_t *)*v2;
        if (*v2)
        {
          v95 = (uint64_t *)a1[58];
          v96 = (void *)*v2;
          if (v95 != v94)
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v95, 0);
            while (v95 != v94);
            v96 = (void *)*v2;
          }
          a1[58] = v94;
          operator delete(v96);
        }
        goto LABEL_118;
      }
      if (!v119)
        goto LABEL_180;
      v120 = (uint64_t *)a1[30];
      v121 = (std::runtime_error_vtbl *)a1[29];
      if (v120 != v119)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v120, 0);
        while (v120 != v119);
        v121 = v4->__vftable;
      }
      a1[30] = v119;
      operator delete(v121);
      if (!v78)
      {
LABEL_180:
        v78 = 3;
        goto LABEL_113;
      }
LABEL_112:
      v91 = a1[73];
      v92 = *((_OWORD *)a1 + 30);
      *v6 = 0;
      v6[1] = 0;
      v93 = a1[59];
      v130 = *(_OWORD *)v2;
      v131 = v92;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)(a1 + 3));
      *(_OWORD *)(a1 + 3) = v131;
      *(_OWORD *)(a1 + 5) = v130;
      a1[7] = v93;
      a1[8] = v91;
      *((_BYTE *)a1 + 96) = 1;
      v78 = 3;
      *((_BYTE *)a1 + 104) = 1;
      goto LABEL_113;
    }
LABEL_201:
    __break(1u);
  }
}

void sub_18CBFB95C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100](v11);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v10);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v12);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v13);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBFB998()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBFB39CLL);
}

void AMSCore::BagDataSource::getSynchronousBagData(char *a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  void *v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;

  v2 = (void (***)(_QWORD))(a1 + 152);
  if (!*(_QWORD *)a1)
    goto LABEL_66;
  if (a1[608])
  {
    if (a1[608] == 1)
    {
      v3 = *((_QWORD *)a1 + 75);
      if (v3)
      {
        v4 = (unint64_t *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
        if (!v5)
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 75);
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 30);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        goto LABEL_51;
      }
    }
    else
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 65);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)a1 + 67);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)a1 + 69);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (uint64_t *)*((_QWORD *)a1 + 57);
      if (v29)
      {
        v30 = (uint64_t *)*((_QWORD *)a1 + 58);
        v31 = (void *)*((_QWORD *)a1 + 57);
        if (v30 != v29)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v30, 0);
          while (v30 != v29);
          v31 = (void *)*((_QWORD *)a1 + 57);
        }
        *((_QWORD *)a1 + 58) = v29;
        operator delete(v31);
      }
      if (!a1[384])
      {
        (**((void (***)(uint64_t))a1 + 39))((uint64_t)(a1 + 312));
        v33 = (std::__shared_weak_count *)*((_QWORD *)a1 + 61);
        if (v33)
          goto LABEL_54;
        goto LABEL_59;
      }
      v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 40);
      if (v7)
      {
        v32 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v32);
        while (__stlxr(v9 - 1, v32));
LABEL_51:
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)a1 + 61);
    if (v33)
    {
LABEL_54:
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
LABEL_59:
    if (!a1[224])
    {
      (**v2)(v2);
      goto LABEL_66;
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 20);
    if (!v17)
      goto LABEL_66;
    v36 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v36);
    while (__stlxr(v19 - 1, v36));
    goto LABEL_63;
  }
  v10 = *((_QWORD *)a1 + 72);
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 72);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 30);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 63);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
LABEL_63:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_66:
  v37 = (char *)*((_QWORD *)a1 + 18);
  if (v37 == a1 + 120)
  {
    v38 = 4;
    v37 = a1 + 120;
    goto LABEL_70;
  }
  if (v37)
  {
    v38 = 5;
LABEL_70:
    (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  }
  std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::~__optional_destruct_base[abi:fe180100]((uint64_t)(a1 + 24));
  do
  {
    v39 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v40)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(a1);
}

void std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::reset[abi:fe180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v2 = *(uint64_t **)(a1 + 16);
      if (v2)
      {
        v3 = *(uint64_t **)(a1 + 24);
        v4 = *(void **)(a1 + 16);
        if (v3 != v2)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
          while (v3 != v2);
          v4 = *(void **)(a1 + 16);
        }
        *(_QWORD *)(a1 + 24) = v2;
        operator delete(v4);
      }
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))a1)(a1);
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::runtime_error v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  std::runtime_error::runtime_error(&v10, (const std::runtime_error *)a2);
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  v11 = *(_OWORD *)(a2 + 16);
  v10.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v12 = *(uint64_t **)(a2 + 32);
  v13 = v5;
  v14 = *(_QWORD *)(a2 + 48);
  if (v14)
  {
    *(_QWORD *)(v5 + 16) = &v13;
    *(_QWORD *)(a2 + 32) = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v12 = &v13;
  }
  v15 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v10);
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)a1 = off_1E2521330;
  v6 = v13;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a1 + 40;
  v8 = v14;
  *(_QWORD *)(a1 + 48) = v14;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    v6 = 0;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_OWORD *)(a1 + 56) = v15;
  v15 = 0uLL;
  v10.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v6);
  return MEMORY[0x18D7898AC](&v10);
}

void std::unexpected<AMSCore::Error>::~unexpected(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1E2521330;
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, *(unsigned int **)(a1 + 40));
  JUMPOUT(0x18D7898ACLL);
}

uint64_t std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

void AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  std::__shared_weak_count *imp;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error v18;
  void *__p[2];
  uint64_t *v20;
  uint64_t v21;
  __int128 v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v1 = result;
  v27 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v26 = v25;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v25);
      }
      else
      {
        v26 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v26 = 0;
    }
    if (v26)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(v5 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v18 = *(std::runtime_error *)(v5 + 8);
        v6->__vftable = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_OWORD *)__p = *(_OWORD *)(v5 + 24);
        v8 = *(_QWORD *)(v5 + 48);
        v20 = *(uint64_t **)(v5 + 40);
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 40) = 0;
        v21 = v8;
      }
      else
      {
        std::runtime_error::runtime_error(&v18, v6);
        v9 = (_QWORD *)(v5 + 48);
        v10 = *(_QWORD *)(v5 + 48);
        *(_OWORD *)__p = *(_OWORD *)(v5 + 24);
        v18.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v20 = *(uint64_t **)(v5 + 40);
        v21 = v10;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v10 + 16) = &v21;
          *(_QWORD *)(v5 + 40) = v9;
          *v9 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v20 = &v21;
        }
        v23 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v24 = v7;
      if (!v26)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v26 + 48))(v26, &v18);
      if (v24)
      {
        v11 = (uint64_t *)__p[0];
        if (__p[0])
        {
          v12 = (uint64_t *)__p[1];
          v13 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v12, 0);
            while (v12 != v11);
            v13 = __p[0];
          }
          __p[1] = v11;
          operator delete(v13);
        }
        imp = (std::__shared_weak_count *)v18.__imp_.__imp_;
        if (v18.__imp_.__imp_)
        {
          v15 = (unint64_t *)(v18.__imp_.__imp_ + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v18.~runtime_error)(&v18);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v26;
    if (v26 == v25)
    {
      v17 = 4;
      result = v25;
    }
    else
    {
      if (!v26)
        return result;
      v17 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
  }
  return result;
}

void sub_18CBFC468(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::expected<AMSCore::SynchronousBagData,AMSCore::Error>,false>::~__optional_destruct_base[abi:fe180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v2 = *(uint64_t **)(a1 + 16);
      if (v2)
      {
        v3 = *(uint64_t **)(a1 + 24);
        v4 = *(void **)(a1 + 16);
        if (v3 != v2)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
          while (v3 != v2);
          v4 = *(void **)(a1 + 16);
        }
        *(_QWORD *)(a1 + 24) = v2;
        operator delete(v4);
      }
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))a1)(a1);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_18SynchronousBagDataENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_18SynchronousBagDataENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_18SynchronousBagDataENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_18SynchronousBagDataENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_emplace<std::map<std::string,AMSCore::Any>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2523068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::map<std::string,AMSCore::Any>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2523068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

void std::__shared_ptr_emplace<std::map<std::string,AMSCore::Any>>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 24, *(unsigned int **)(a1 + 32));
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::BagErrorCode>(uint64_t a1, const std::runtime_error *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::runtime_error v12[2];
  unsigned int *v13[4];
  std::__shared_weak_count *v14;
  std::runtime_error v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  AMSCore::Error::Error(v12, a2);
  AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)v12, *a3, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
  *(_OWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v5);
  MEMORY[0x18D7898AC](&v15);
  v12[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v13, v13[1]);
  return MEMORY[0x18D7898AC](v12);
}

void sub_18CBFC770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CBFC77C()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

std::runtime_error *AMSCore::Error::Error(std::runtime_error *this, const std::runtime_error *a2)
{
  std::runtime_error *v4;
  uint64_t *p_imp;
  uint64_t **v6;
  std::__libcpp_refstring *v7;
  std::runtime_error_vtbl *v8;
  unint64_t *v9;
  unint64_t v10;
  const AMSCore::Error *imp;
  const AMSCore::Error *v13;
  BOOL v14;

  v4 = std::runtime_error::runtime_error(this, a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v4[1] = a2[1];
  v4->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v4[2].__imp_.__imp_ = 0;
  p_imp = (uint64_t *)&v4[2].__imp_;
  v4[2].__vftable = (std::runtime_error_vtbl *)&v4[2].__imp_;
  v6 = (uint64_t **)&v4[2];
  v4[3].__vftable = 0;
  v7 = (std::__libcpp_refstring *)a2[2].__vftable;
  if (v7 != &a2[2].__imp_)
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(v6, p_imp, (const void **)&v7[4].__imp_, (__int128 *)&v7[4]);
      imp = (const AMSCore::Error *)v7[1].__imp_;
      if (imp)
      {
        do
        {
          v13 = imp;
          imp = *(const AMSCore::Error **)imp;
        }
        while (imp);
      }
      else
      {
        do
        {
          v13 = (const AMSCore::Error *)v7[2].__imp_;
          v14 = *(_QWORD *)v13 == (_QWORD)v7;
          v7 = (std::__libcpp_refstring *)v13;
        }
        while (!v14);
      }
      v7 = (std::__libcpp_refstring *)v13;
    }
    while (v13 != (const AMSCore::Error *)&a2[2].__imp_);
  }
  v8 = a2[4].__vftable;
  this[3].__imp_.__imp_ = a2[3].__imp_.__imp_;
  this[4].__vftable = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->~runtime_error_0;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

void sub_18CBFC874(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x18D7898AC](v1);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::BagDataSource::sync(_BYTE *result)
{
  unint64_t v1;
  std::runtime_error *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  __int128 v7;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v1 = (unint64_t)result;
  v2 = (std::runtime_error *)(result + 152);
  if (!result[272])
    goto LABEL_11;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(*((_QWORD *)result + 31) + 248));
  v3 = *(_QWORD *)(v1 + 248);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 416) + 16);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v3 + 248));
  if (v4)
  {
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(*(_QWORD *)(v1 + 248) + 248));
    v5 = *(_QWORD *)(v1 + 248);
    if (*(_BYTE *)(v5 + 464))
    {
      v6 = *(_QWORD *)(v5 + 456) <= AMSCore::ClockProvider::now().__d_.__rep_;
      v5 = *(_QWORD *)(v1 + 248);
    }
    else
    {
      v6 = 0;
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v5 + 248));
    if (!v6)
    {
      if (*(_BYTE *)(v1 + 104) && !*(_BYTE *)(v1 + 96))
        (**(void (***)(uint64_t))(v1 + 24))(v1 + 24);
      *(_BYTE *)(v1 + 96) = 1;
      *(_BYTE *)(v1 + 104) = 1;
LABEL_42:
      AMSCore::AwaitableMutex::unlock((std::mutex *)(*(_QWORD *)(v1 + 248) + 472));
      *(_QWORD *)(v1 + 152) = v1 + 16;
      *(_QWORD *)v1 = 0;
      return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
    }
  }
  result = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 248) + 32))(*(_QWORD *)(v1 + 248), 0);
  v7 = *(_OWORD *)(v1 + 232);
  *(_OWORD *)(v1 + 256) = v7;
  *(_QWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 240) = 0;
  if (atomic_load((unint64_t *)(v7 + 96)))
    goto LABEL_11;
  *(_BYTE *)(v1 + 272) = 0;
  v9 = (unint64_t *)(*(_QWORD *)(v1 + 256) + 96);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v1, v9));
  if (v10)
  {
LABEL_11:
    v11 = *(_QWORD *)(v1 + 256);
    if (!*(_BYTE *)(v11 + 88))
    {
      __break(1u);
      return result;
    }
    v12 = *(unsigned __int8 *)(v11 + 80);
    if (!*(_BYTE *)(v11 + 80))
    {
      std::runtime_error::runtime_error(v2, (const std::runtime_error *)(v11 + 8));
      *(_OWORD *)(v1 + 168) = *(_OWORD *)(v11 + 24);
      v13 = (_QWORD *)(v11 + 48);
      v14 = *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v1 + 192) = v14;
      v15 = v1 + 192;
      *(_QWORD *)(v1 + 152) = off_1E2521330;
      *(_QWORD *)(v1 + 184) = *(_QWORD *)(v11 + 40);
      v16 = *(_QWORD *)(v11 + 56);
      *(_QWORD *)(v1 + 200) = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 16) = v15;
        *(_QWORD *)(v11 + 40) = v13;
        *v13 = 0;
        *(_QWORD *)(v11 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v1 + 184) = v15;
      }
      v17 = *(_QWORD *)(v1 + 256);
      *(_OWORD *)(v1 + 208) = *(_OWORD *)(v17 + 64);
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
    }
    *(_BYTE *)(v1 + 224) = v12;
    if (*(_BYTE *)(v1 + 104))
    {
      if (!*(_BYTE *)(v1 + 96))
      {
        (**(void (***)(uint64_t))(v1 + 24))(v1 + 24);
        v12 = *(unsigned __int8 *)(v1 + 224);
      }
      *(_BYTE *)(v1 + 104) = 0;
    }
    if (v12)
    {
      *(_BYTE *)(v1 + 96) = v12;
      *(_BYTE *)(v1 + 104) = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), v2);
      v18 = (_QWORD *)(v1 + 192);
      v19 = *(_QWORD *)(v1 + 192);
      *(_QWORD *)(v1 + 64) = v19;
      v20 = v1 + 64;
      *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 168);
      *(_QWORD *)(v1 + 24) = off_1E2521330;
      *(_QWORD *)(v1 + 56) = *(_QWORD *)(v1 + 184);
      v21 = *(_QWORD *)(v1 + 200);
      *(_QWORD *)(v1 + 72) = v21;
      if (v21)
      {
        *(_QWORD *)(v19 + 16) = v20;
        *(_QWORD *)(v1 + 184) = v18;
        *v18 = 0;
        *(_QWORD *)(v1 + 200) = 0;
      }
      else
      {
        *(_QWORD *)(v1 + 56) = v20;
      }
      *(_OWORD *)(v1 + 80) = *(_OWORD *)(v1 + 208);
      *(_QWORD *)(v1 + 208) = 0;
      *(_QWORD *)(v1 + 216) = 0;
      v22 = *(unsigned __int8 *)(v1 + 224);
      *(_BYTE *)(v1 + 96) = 0;
      *(_BYTE *)(v1 + 104) = 1;
      if (!v22)
        ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
    }
    v23 = *(_QWORD *)(v1 + 264);
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        v26 = *(std::__shared_weak_count **)(v1 + 264);
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v27 = *(std::__shared_weak_count **)(v1 + 240);
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    goto LABEL_42;
  }
  return result;
}

void AMSCore::BagDataSource::sync(_BYTE *__p)
{
  BOOL v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  if (*(_QWORD *)__p)
    v2 = __p[272] == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = *((_QWORD *)__p + 33);
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 33);
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)__p + 30);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    AMSCore::AwaitableMutex::unlock((std::mutex *)(*((_QWORD *)__p + 31) + 472));
  }
  v10 = (_QWORD *)*((_QWORD *)__p + 18);
  if (v10 == (_QWORD *)(__p + 120))
  {
    v11 = 4;
    v10 = __p + 120;
    goto LABEL_21;
  }
  if (v10)
  {
    v11 = 5;
LABEL_21:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v13)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [29]>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p[2];
  __int128 v26;
  int v27;
  uint64_t v28[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v9 = result;
    v10 = MEMORY[0x1E0DE4FE0];
    v11 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v28[0] = MEMORY[0x1E0DE4FE0] + 64;
    v23 = v13;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v13 - 24)) = v14;
    v15 = (std::ios_base *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24));
    std::ios_base::init(v15, v24);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v23 = v10 + 24;
    v28[0] = v11;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8];
    v24[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v26 = 0u;
    v27 = 16;
    v17 = *(_QWORD *)(v23 - 24);
    if ((v18 & 1) == 0
    {
    }
    v19 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v23, (uint64_t)a5, v19);
    v20 = v24[5];
    v21 = (char *)&v24[-1] + *(_QWORD *)(v23 - 24);
    if ((v21[32] & 5) != 0)
    {
      v22 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v21 + 5) + 32))(&rep, *((_QWORD *)v21 + 5), 0, 1, 16);
      v22 = v33;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v30 = a2;
    v31 = v20;
    v32 = v22;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v9 + 16) + 16))(*(_QWORD *)(v9 + 16), a3, a4, &rep);
    v23 = *v12;
    *(_QWORD *)((char *)&v24[-1] + *(_QWORD *)(v23 - 24)) = v12[3];
    v24[0] = v16 + 16;
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v28);
  }
  return result;
}

void sub_18CBFCF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *AMSCore::BagDataSource::observeChanged(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _QWORD *result;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      v31 = v30;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v30);
    }
    else
    {
      v31 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v31 = 0;
  }
  v6 = operator new(0x38uLL);
  v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E25230A0;
  v8 = v6 + 3;
  if (v31)
  {
    if (v31 == v30)
    {
      v6[6] = v8;
      (*(void (**)(_QWORD *, _QWORD *))(v30[0] + 24))(v30, v8);
    }
    else
    {
      v6[6] = v31;
      v31 = 0;
    }
  }
  else
  {
    v6[6] = 0;
  }
  *(_QWORD *)&v29 = v8;
  *((_QWORD *)&v29 + 1) = v7;
  std::mutex::lock((std::mutex *)(a2 + 72));
  v10 = *(char **)(a2 + 144);
  v9 = *(_QWORD *)(a2 + 152);
  if ((unint64_t)v10 >= v9)
  {
    v14 = *(char **)(a2 + 136);
    v15 = (v10 - v14) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v17 = v9 - (_QWORD)v14;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18 >> 60)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v19 = (char *)operator new(16 * v18);
    v20 = &v19[16 * v15];
    *(_OWORD *)v20 = v29;
    v7 = (_QWORD *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 16);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v14 = *(char **)(a2 + 136);
      v10 = *(char **)(a2 + 144);
    }
    v23 = &v19[16 * v18];
    v13 = v20 + 16;
    if (v10 == v14)
    {
      *(_QWORD *)(a2 + 136) = v20;
      *(_QWORD *)(a2 + 144) = v13;
      *(_QWORD *)(a2 + 152) = v23;
    }
    else
    {
      do
      {
        v24 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v20 - 1) = v24;
        v20 -= 16;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
      }
      while (v10 != v14);
      v14 = *(char **)(a2 + 136);
      v25 = *(char **)(a2 + 144);
      *(_QWORD *)(a2 + 136) = v20;
      *(_QWORD *)(a2 + 144) = v13;
      *(_QWORD *)(a2 + 152) = v23;
      while (v25 != v14)
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
        if (v26)
          std::__shared_weak_count::__release_weak(v26);
        v25 -= 16;
      }
    }
    if (v14)
    {
      operator delete(v14);
      v7 = (_QWORD *)*((_QWORD *)&v29 + 1);
      v8 = (_QWORD *)v29;
    }
    else
    {
      v8 = (_QWORD *)v29;
    }
  }
  else
  {
    *(_QWORD *)v10 = v8;
    *((_QWORD *)v10 + 1) = v7;
    v11 = v7 + 2;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = v10 + 16;
  }
  *(_QWORD *)(a2 + 144) = v13;
  *a1 = v8;
  a1[1] = v7;
  std::mutex::unlock((std::mutex *)(a2 + 72));
  result = v31;
  if (v31 == v30)
  {
    v28 = 4;
    result = v30;
  }
  else
  {
    if (!v31)
      return result;
    v28 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
}

void sub_18CBFD238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<std::function<void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25230A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E25230A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__shared_ptr_emplace<std::function<void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v9;
  void **v10;
  void **v11;

  v2 = *(void ***)(a1 + 96);
  if (v2)
  {
    do
    {
      v9 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void ***)(a1 + 56);
  if (v4)
  {
    do
    {
      v10 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v10;
    }
    while (v10);
  }
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(void ***)(a1 + 16);
  if (v6)
  {
    do
    {
      v11 = (void **)*v6;
      if (*((char *)v6 + 39) < 0)
        operator delete(v6[2]);
      operator delete(v6);
      v6 = v11;
    }
    while (v11);
  }
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = (uint64_t *)a3;
  else
    v6 = *(uint64_t **)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v6, v7);
  if (!a2)
    return 0;
  v9 = v8;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v10.i16[0] = vaddlv_u8(v10);
  v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    v12 = v8;
    if (v8 >= a2)
      v12 = v8 % a2;
  }
  else
  {
    v12 = (a2 - 1) & v8;
  }
  v13 = *(uint64_t ***)(a1 + 8 * v12);
  if (!v13)
    return 0;
  for (i = *v13; i; i = (uint64_t *)*i)
  {
    v15 = i[1];
    if (v9 == v15)
    {
      v16 = *((unsigned __int8 *)i + 39);
      if ((v16 & 0x80u) == 0)
        v17 = *((unsigned __int8 *)i + 39);
      else
        v17 = i[3];
      if (v17 == v7)
      {
        if ((v16 & 0x80) != 0)
        {
          if (!memcmp((const void *)i[2], v6, i[3]))
            return i;
        }
        else
        {
          if (!*((_BYTE *)i + 39))
            return i;
          v18 = 0;
          while (*((unsigned __int8 *)i + v18 + 16) == *((unsigned __int8 *)v6 + v18))
          {
            if (v16 == ++v18)
              return i;
          }
        }
      }
    }
    else
    {
      if (v11 <= 1)
      {
        v15 &= a2 - 1;
      }
      else if (v15 >= a2)
      {
        v15 %= a2;
      }
      if (v15 != v12)
        return 0;
    }
  }
  return i;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_18CBFD784(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<std::string>::~unordered_set[abi:fe180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t *j;
  std::string *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          v17 = *((unsigned __int8 *)i + 39);
          if ((v17 & 0x80u) == 0)
            v18 = *((unsigned __int8 *)i + 39);
          else
            v18 = i[3];
          if (v18 == v8)
          {
            v19 = (const void **)(i + 2);
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp(*v19, v7, i[3]))
                return;
            }
            else
            {
              if (!*((_BYTE *)i + 39))
                return;
              for (j = v7; *(unsigned __int8 *)v19 == *(unsigned __int8 *)j; j = (uint64_t *)((char *)j + 1))
              {
                v19 = (const void **)((char *)v19 + 1);
                if (!--v17)
                  return;
              }
            }
          }
        }
        else
        {
          if (v13 <= 1)
          {
            v16 &= v11 - 1;
          }
          else if (v16 >= v11)
          {
            v16 %= v11;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  v34 = operator new(0x28uLL);
  *v34 = 0;
  v34[1] = v10;
  v21 = (std::string *)(v34 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v34[4] = *(_QWORD *)(a3 + 16);
  }
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_50;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_50:
        std::__hash_table<std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *v34 = *v32;
    *v32 = v34;
  }
  else
  {
    *v34 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v34;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v34)
    {
      v33 = *(_QWORD *)(*v34 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11)
          v33 %= v11;
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v34;
    }
  }
  ++*(_QWORD *)(a1 + 24);
}

void sub_18CBFDB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_BYTE *AMSCore::BagDataSource::getAllValues(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_mutex_base *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error v29[2];
  unsigned int *v30[4];
  std::__shared_weak_count *v31;
  unsigned int v32;

  v1 = *((_QWORD *)result + 32);
  if (!*(_BYTE *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = (std::runtime_error *)(result + 152);
  v4 = *(_BYTE *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), (const std::runtime_error *)(v1 + 8));
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
    v5 = (_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v2 + 24) = v6;
    v7 = v2 + 192;
    *((_QWORD *)v2 + 19) = off_1E2521330;
    *((_QWORD *)v2 + 23) = *(_QWORD *)(v1 + 40);
    v8 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v2 + 25) = v8;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v1 + 40) = v5;
      *v5 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v2 + 23) = v7;
    }
    v9 = *((_QWORD *)v2 + 32);
    *((_OWORD *)v2 + 13) = *(_OWORD *)(v9 + 64);
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = 0;
  }
  v2[224] = v4;
  v10 = *((_QWORD *)v2 + 33);
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v2 + 33);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)v2 + 30);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v2[224])
        goto LABEL_17;
LABEL_25:
      v32 = 204;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::BagErrorCode>((uint64_t)v29, v3, &v32);
      std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v2 + 24), v29);
      v29[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v23 = v31;
      if (v31)
      {
        v24 = (unint64_t *)&v31->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v30, v30[1]);
      MEMORY[0x18D7898AC](v29);
      goto LABEL_37;
    }
  }
  if (!v2[224])
    goto LABEL_25;
LABEL_17:
  v17 = (std::__shared_mutex_base *)(*((_QWORD *)v2 + 31) + 248);
  std::__shared_mutex_base::lock_shared(v17);
  v18 = *((_QWORD *)v2 + 31);
  v19 = v18;
  if (v2[104])
  {
    if (v2[96])
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)v2 + 4);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    else
    {
      (**((void (***)(uint64_t))v2 + 3))((uint64_t)(v2 + 24));
    }
    v2[104] = 0;
    v19 = *((_QWORD *)v2 + 31);
  }
  *((_QWORD *)v2 + 3) = *(_QWORD *)(v18 + 416);
  v26 = *(_QWORD *)(v19 + 424);
  *((_QWORD *)v2 + 4) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v2[96] = 1;
  v2[104] = 1;
  std::__shared_mutex_base::unlock_shared(v17);
LABEL_37:
  if (!v2[224])
    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  *((_QWORD *)v2 + 19) = v2 + 16;
  *(_QWORD *)v2 = 0;
  return AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CBFDDC8(void *a1)
{
  uint64_t v1;
  void (***v2)(_QWORD);

  if (!*(_BYTE *)(v1 + 224))
    (**v2)(v2);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CBFDDFC()
{
  __cxa_end_catch();
  JUMPOUT(0x18CBFDD98);
}

void AMSCore::BagDataSource::getAllValues(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;

  if (*__p)
  {
    v2 = __p[33];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[33];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[30];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = (_QWORD *)__p[18];
  if (v9 == __p + 15)
  {
    v10 = 4;
    v9 = __p + 15;
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
  if (*((_BYTE *)__p + 104))
  {
    if (*((_BYTE *)__p + 96))
    {
      v11 = (std::__shared_weak_count *)__p[4];
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      (*(void (**)(char *))__p[3])((char *)__p + 24);
    }
  }
  do
  {
    v14 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v15)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

void AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::__libcpp_refstring *p_imp;
  const char **v9;
  _QWORD *v10;
  uint64_t v11;
  const std::runtime_error *v12;
  uint64_t v13;
  std::__shared_weak_count *imp;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v1 = result;
  v28 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v27 = v26;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v26);
      }
      else
      {
        v27 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v27 = 0;
    }
    if (v27)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v18.__vftable = *(std::runtime_error_vtbl **)(v5 + 8);
        p_imp = &v18.__imp_;
        v9 = (const char **)(v5 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v18, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v19 = *(_OWORD *)(v5 + 24);
        v18.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v20 = *(uint64_t **)(v5 + 40);
        v21 = v11;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v11 + 16) = &v21;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v20 = &v21;
        }
        v13 = *(_QWORD *)(v5 + 64);
        v12 = (const std::runtime_error *)(v5 + 64);
        v23 = v13;
        p_imp = (std::__libcpp_refstring *)&v24;
        v9 = &v12->__imp_.__imp_;
        v6 = v12;
      }
      p_imp->__imp_ = *v9;
      v6->__vftable = 0;
      v6->__imp_.__imp_ = 0;
      v25 = v7;
      if (!v27)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v27 + 48))(v27, &v18);
      if (v25)
      {
        imp = (std::__shared_weak_count *)v18.__imp_.__imp_;
        if (v18.__imp_.__imp_)
        {
          v15 = (unint64_t *)(v18.__imp_.__imp_ + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v18.~runtime_error)(&v18);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v27;
    if (v27 == v26)
    {
      v17 = 4;
      result = v26;
    }
    else
    {
      if (!v27)
        return result;
      v17 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
  }
  return result;
}

void sub_18CBFE388(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocat"
                     "orIcEEEENS_3AnyENS1_4lessIvEENS7_INS1_4pairIKS9_SA_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEv"
                     "E13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEEN"
                                "S1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS7_INS1_4pairIKS9_SA_EEEEEEEENS_5ErrorEE7Promis"
                                "e17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS7_INS1_4pairIKS9_SA_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS7_INS1_4pairIKS9_SA_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

__n128 std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2521D38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2521D38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::operator()(uint64_t a1, _QWORD **a2)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  size_t v18;
  size_t v19;
  int v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string::size_type v30;
  _QWORD *v31;
  std::string v32;
  int v33;
  uint64_t *v34;

  v3 = *(__int128 **)(a1 + 8);
  v4 = *(__int128 **)(a1 + 16);
  if (!*((_BYTE *)v4 + 24))
  {
    v22 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)a2, (const void **)v3);
    if (a2 + 1 != (_QWORD **)v22)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(a2, (uint64_t)v22);
    return;
  }
  v5 = (uint64_t *)(a2 + 1);
  v6 = a2[1];
  if (!v6)
    goto LABEL_43;
  v7 = *((char *)v3 + 23);
  if (v7 >= 0)
    v8 = *(const void **)(a1 + 8);
  else
    v8 = *(const void **)v3;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)v3 + 23);
  else
    v9 = *((_QWORD *)v3 + 1);
  v10 = (uint64_t *)(a2 + 1);
  do
  {
    while (1)
    {
      v11 = *((char *)v6 + 55);
      v12 = v11 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_24;
LABEL_10:
      v6 = (uint64_t *)v6[1];
      if (!v6)
        goto LABEL_25;
    }
    if (v15 < 0)
      goto LABEL_10;
LABEL_24:
    v10 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_25:
  if (v10 == v5)
    goto LABEL_43;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (_QWORD *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= v9)
    v19 = v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_42:
    v5 = v10;
LABEL_43:
    v23 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a2, v5, (uint64_t **)&v32, &v34, (const void **)v3);
    if (!*v23)
    {
      v24 = v23;
      v25 = (char *)operator new(0x58uLL);
      v26 = (std::string *)(v25 + 32);
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v27 = *v3;
        *((_QWORD *)v25 + 6) = *((_QWORD *)v3 + 2);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      }
      v28 = (std::string *)(v25 + 56);
      if (*((char *)v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      }
      else
      {
        v29 = *v4;
        *((_QWORD *)v25 + 9) = *((_QWORD *)v4 + 2);
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      *((_DWORD *)v25 + 20) = 5;
      v30 = v32.__r_.__value_.__r.__words[0];
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v25 + 1) = 0;
      *((_QWORD *)v25 + 2) = v30;
      *v24 = (uint64_t)v25;
      v31 = (_QWORD *)**a2;
      if (v31)
      {
        *a2 = v31;
        v25 = (char *)*v24;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a2[1], (uint64_t *)v25);
      a2[2] = (_QWORD *)((char *)a2[2] + 1);
    }
  }
  else
  {
    if (v9 < v18)
      goto LABEL_42;
LABEL_37:
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v21 = *v4;
      v32.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
    }
    v33 = 5;
    AMSCore::Any::operator=((uint64_t)(v10 + 7), (uint64_t)&v32);
    if (v33 != -1)
      ((void (*)(uint64_t **, std::string *))off_1E253D240[v33])(&v34, &v32);
  }
}

void sub_18CBFE760(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore19setStorefrontSuffixERKNSt3__18optionalINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9al"
                     "locatorIcEEEEEERKS7_E3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore19setStorefrontSuffixERKNSt3__18optionalINS0_12basic_stringIcNS0_11char_traits"
                                "IcEENS0_9allocatorIcEEEEEERKS7_E3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore19setStorefrontSuffixERKNSt3__18optionalINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEERKS7_E3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore19setStorefrontSuffixERKNSt3__18optionalINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEERKS7_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::target_type()
{
}

_QWORD *std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_1E2521DE8;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_1E2521DE8;
  v2 = a1[1];
  if (v2)
  {
    v3 = a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t *a1)
{
  _QWORD *v2;

  v2 = operator new(0x28uLL);
  *v2 = off_1E2521DE8;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v2 + 1, a1[1], a1[2], 0xAAAAAAAAAAAAAAABLL * ((a1[2] - a1[1]) >> 3));
  v2[4] = a1[4];
  return v2;
}

void sub_18CBFE944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t *a1, _QWORD *a2)
{
  *a2 = off_1E2521DE8;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(a2 + 1, a1[1], a1[2], 0xAAAAAAAAAAAAAAABLL * ((a1[2] - a1[1]) >> 3));
  a2[4] = a1[4];
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = __p[1];
  if (v2)
  {
    v3 = __p[2];
    v4 = (void *)__p[1];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  BOOL v9;
  const std::string::value_type **v10;
  void **v11;
  void **v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  void **v19;
  void **v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t *v25;
  void *__p;
  void **v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  int v31;
  __int128 v32;
  char *v33;
  int v34;
  char v35;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3 == v4)
    goto LABEL_41;
  if (v4 - v3 != 48)
    goto LABEL_14;
  v5 = *(unsigned __int8 *)(v3 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(v3 + 8);
  if (v5 != 4)
    goto LABEL_14;
  v7 = v6 >= 0 ? *(_DWORD **)(a1 + 8) : *(_DWORD **)v3;
  v9 = *v7 == 1634563177;
  v8 = (_DWORD *)(v3 + 24);
  v9 = !v9 || v8 == (_DWORD *)v4;
  if (v9)
    goto LABEL_14;
  v22 = *(unsigned __int8 *)(v3 + 47);
  v23 = (char)v22;
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(v3 + 32);
  if (v22 != 4)
    goto LABEL_14;
  if (v23 < 0)
    v8 = *(_DWORD **)(v3 + 24);
  if (*v8 == 1701213289 && v3 + 48 == v4)
  {
LABEL_41:
    v25 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)a2, *(const void ***)(a1 + 32));
    if (a2 + 1 != v25)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(a2, (uint64_t)v25);
  }
  else
  {
LABEL_14:
    v10 = *(const std::string::value_type ***)(a1 + 32);
    v27 = 0;
    v28 = 0;
    __p = 0;
    std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(&__p, v3, v4, 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3));
    v12 = (void **)__p;
    v11 = v27;
    v33 = 0;
    v32 = 0uLL;
    if (v27 == __p)
    {
      v29 = 0uLL;
      v30 = 0;
      v31 = 9;
    }
    else
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (_BYTE *)__p) >> 3);
      if (v13 >> 59)
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      v14 = 0x5555555555555560 * (((char *)v27 - (_BYTE *)__p) >> 3);
      v15 = (char *)operator new(v14);
      v16 = &v15[32 * v13];
      *(_QWORD *)&v32 = v15;
      v33 = v16;
      bzero(v15, v14);
      *((_QWORD *)&v32 + 1) = &v15[v14];
      v29 = v32;
      v30 = v16;
      v31 = 9;
      v17 = v32;
      do
      {
        v18 = *(_OWORD *)v12;
        v33 = (char *)v12[2];
        v32 = v18;
        v12[1] = 0;
        v12[2] = 0;
        *v12 = 0;
        v34 = 5;
        AMSCore::Any::operator=(v17, (uint64_t)&v32);
        if (v34 != -1)
          ((void (*)(char *, __int128 *))off_1E253D240[v34])(&v35, &v32);
        v12 += 3;
        v17 += 32;
      }
      while (v12 != v11);
    }
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>((_QWORD **)a2, v10, (uint64_t)&v29);
    if (v31 != -1)
      ((void (*)(__int128 *, __int128 *))off_1E253D240[v31])(&v32, &v29);
    v31 = -1;
    v19 = (void **)__p;
    if (__p)
    {
      v20 = v27;
      v21 = __p;
      if (v27 != __p)
      {
        do
        {
          if (*((char *)v20 - 1) < 0)
            operator delete(*(v20 - 3));
          v20 -= 3;
        }
        while (v20 != v19);
        v21 = __p;
      }
      v27 = v19;
      operator delete(v21);
    }
  }
}

void sub_18CBFED48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, unsigned int a16, int a17, char a18)
{
  uint64_t v18;
  void **v20;
  void **v21;

  if (a16 != -1)
    (*(void (**)(char *, char *))(v18 + 8 * a16))(&a18, &a13);
  a16 = -1;
  if (__p)
  {
    v20 = a11;
    v21 = __p;
    if (a11 != __p)
    {
      do
      {
        if (*((char *)v20 - 1) < 0)
          operator delete(*(v20 - 3));
        v20 -= 3;
      }
      while (v20 != __p);
      v21 = __p;
    }
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_18CBFEDC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, char *a18)
{
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  if (__p)
  {
    v21 = a18;
    v22 = __p;
    if (a18 != __p)
    {
      do
      {
        v23 = v21 - 32;
        v24 = *((unsigned int *)v21 - 2);
        if ((_DWORD)v24 != -1)
          (*(void (**)(uint64_t, char *))(v18 + 8 * v24))(v19 - 65, v21 - 32);
        *((_DWORD *)v21 - 2) = -1;
        v21 -= 32;
      }
      while (v23 != __p);
      v22 = __p;
    }
    operator delete(v22);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore20setCookiesForProfileERKNSt3__15tupleIJNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9all"
                     "ocatorIcEEEES7_EEENS0_6vectorIS7_NS5_IS7_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore20setCookiesForProfileERKNSt3__15tupleIJNS0_12basic_stringIcNS0_11char_traitsI"
                                "cEENS0_9allocatorIcEEEES7_EEENS0_6vectorIS7_NS5_IS7_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore20setCookiesForProfileERKNSt3__15tupleIJNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_EEENS0_6vectorIS7_NS5_IS7_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore20setCookiesForProfileERKNSt3__15tupleIJNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_EEENS0_6vectorIS7_NS5_IS7_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::target_type()
{
}

void std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v8[v9], *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v11;
          *((_QWORD *)v10 + 2) = *(_QWORD *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_18CBFEF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:fe180100](void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (void **)**a1;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t AMSCore::cookiesUpdated(uint64_t a1, uint64_t a2, unsigned __int8 ***a3)
{
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;

  v4 = a1;
  if (*((_BYTE *)a3 + 24))
  {
    v5 = *a3;
    if (a2 - a1 == (char *)a3[1] - (char *)*a3)
    {
      if (a1 == a2)
        return 0;
      while (1)
      {
        v10 = *(unsigned __int8 *)(v4 + 23);
        if ((v10 & 0x80u) == 0)
          v11 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
        else
          v11 = *(unsigned __int8 **)(v4 + 8);
        v12 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
        v13 = (char)v12;
        if ((char)v12 < 0)
          v12 = v5[1];
        if (v11 != v12)
          break;
        if (v13 >= 0)
          v14 = (unsigned __int8 *)v5;
        else
          v14 = *v5;
        if ((v10 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v4, v14, *(_QWORD *)(v4 + 8)))
            return 1;
        }
        else if (*(_BYTE *)(v4 + 23))
        {
          v15 = 0;
          while (*(unsigned __int8 *)(v4 + v15) == v14[v15])
          {
            if (v10 == ++v15)
              goto LABEL_17;
          }
          return 1;
        }
LABEL_17:
        result = 0;
        v4 += 24;
        v5 += 3;
        if (v4 == a2)
          return result;
      }
    }
    return 1;
  }
  if (a2 - a1 != 48)
    return 1;
  if (a1 != a2)
  {
    v7 = *(unsigned __int8 *)(a1 + 23);
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a1 + 8);
    if (v7 != 4)
      return 1;
    v9 = v8 >= 0 ? (_DWORD *)a1 : *(_DWORD **)a1;
    if (*v9 != 1634563177)
      return 1;
    v16 = (_QWORD *)(a1 + 24);
    if (a1 + 24 != a2)
    {
      v17 = *(unsigned __int8 *)(a1 + 47);
      v18 = (char)v17;
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a1 + 32);
      if (v17 == 4)
      {
        if (v18 < 0)
          v16 = (_QWORD *)*v16;
        if (*(_DWORD *)v16 == 1701213289)
        {
          v19 = a1 + 48;
          v20 = 1;
          goto LABEL_42;
        }
      }
      return 1;
    }
  }
  v20 = 0;
  v19 = a2;
LABEL_42:
  v21 = v20 ^ 1;
  if (v19 == a2)
    return v21;
  else
    return 1;
}

void AMSCore::getStorefrontSuffix(std::string *a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  const std::string::value_type **v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::ios_base *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  _QWORD v41[8];
  void *__p[2];
  __int128 v43;
  int v44;
  uint64_t v45[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(a2 + 8);
  v6 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_51;
  v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      v10 = *((char *)v6 + 55);
      v11 = v10 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      v13 = v12 >= a4 ? a4 : v12;
      v14 = memcmp(__s1, v11, v13);
      if (v14)
        break;
      if (a4 <= v12)
        goto LABEL_17;
LABEL_3:
      v6 = (uint64_t *)v6[1];
      if (!v6)
        goto LABEL_18;
    }
    if ((v14 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v9 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_18:
  if (v9 == v5)
    goto LABEL_51;
  v15 = *((char *)v9 + 55);
  if (v15 >= 0)
    v16 = v9 + 4;
  else
    v16 = (const void *)v9[4];
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)v9 + 55);
  else
    v17 = v9[5];
  if (v17 >= a4)
    v18 = a4;
  else
    v18 = v17;
  v19 = memcmp(__s1, v16, v18);
  if (v19)
  {
    if (v19 < 0)
      goto LABEL_51;
  }
  else if (a4 < v17)
  {
    goto LABEL_51;
  }
  v20 = (const std::string::value_type **)(v9 + 7);
  if (*((_DWORD *)v9 + 20) == 5)
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    if (*((char *)v9 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *v20, v9[8]);
    }
    else
    {
      v21 = *(_OWORD *)v20;
      a1->__r_.__value_.__r.__words[2] = v9[9];
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v21;
    }
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v38);
    v22 = v38;
    if (*(int *)(v38 + 8) <= 4)
    {
      v23 = MEMORY[0x1E0DE4FE0];
      v24 = MEMORY[0x1E0DE4FE0] + 64;
      v25 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v26 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v45[0] = MEMORY[0x1E0DE4FE0] + 64;
      v40 = v26;
      *(_QWORD *)((char *)&v41[-1] + *(_QWORD *)(v26 - 24)) = v27;
      v28 = (std::ios_base *)((char *)&v41[-1] + *(_QWORD *)(v40 - 24));
      std::ios_base::init(v28, v41);
      v28[1].__vftable = 0;
      v28[1].__fmtflags_ = -1;
      v40 = v23 + 24;
      v45[0] = v24;
      std::streambuf::basic_streambuf();
      v29 = MEMORY[0x1E0DE4FB8];
      v41[0] = MEMORY[0x1E0DE4FB8] + 16;
      *(_OWORD *)__p = 0u;
      v43 = 0u;
      v44 = 16;
      v30 = *(_QWORD *)(v40 - 24);
      if ((v31 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v40, (uint64_t)"The bag contained an invalid value. key = ", 42);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v40, (uint64_t)"storefront-header-suffix", 24);
      v32 = v41[5];
      v33 = (char *)&v41[-1] + *(_QWORD *)(v40 - 24);
      if ((v33[32] & 5) != 0)
      {
        v34 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v33 + 5) + 32))(&rep, *((_QWORD *)v33 + 5), 0, 1, 16);
        v34 = v50;
      }
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v47 = 4;
      v48 = v32;
      v49 = v34;
      (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v22 + 16) + 16))(*(_QWORD *)(v22 + 16), "bag", 3, &rep);
      v40 = *v25;
      *(_QWORD *)((char *)&v41[-1] + *(_QWORD *)(v40 - 24)) = v25[3];
      v41[0] = v29 + 16;
      if (SBYTE7(v43) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v45);
    }
    v35 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
LABEL_51:
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_18CBFF59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::getValueByKey<std::vector<AMSCore::Any>,std::map<std::string,AMSCore::Any> const>(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::runtime_error v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  std::runtime_error v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  std::runtime_error v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35[2];
  std::runtime_error v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v35[0] = (uint64_t)a3;
  v35[1] = a4;
  AMSCore::getValueByKey((uint64_t)&v28, a2, a3, a4);
  if (v34)
  {
    if (LODWORD(v28.__vftable[1].~runtime_error) == 9)
    {
      *(_QWORD *)a1 = v28.__vftable;
      *(_BYTE *)(a1 + 72) = 1;
      goto LABEL_28;
    }
    LOBYTE(v36.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v21, 0xCu, "unable to find value with key \"", v35, &v36);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v21);
    *(_OWORD *)(a1 + 16) = v22;
    *(_QWORD *)a1 = off_1E2521330;
    v5 = v24;
    *(_QWORD *)(a1 + 32) = v23;
    *(_QWORD *)(a1 + 40) = v5;
    v6 = a1 + 40;
    v7 = v25;
    *(_QWORD *)(a1 + 48) = v25;
    if (v7)
    {
      *(_QWORD *)(v5 + 16) = v6;
      v23 = &v24;
      v24 = 0;
      v25 = 0;
      v5 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v6;
    }
    *(_OWORD *)(a1 + 56) = v26;
    v26 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    goto LABEL_27;
  }
  std::runtime_error::runtime_error(&v21, &v28);
  v22 = v29;
  v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v23 = v30;
  v24 = v31;
  v25 = v32;
  if (v32)
  {
    *(_QWORD *)(v31 + 16) = &v24;
    v30 = &v31;
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v23 = &v24;
  }
  v26 = v33;
  v33 = 0uLL;
  v27 = 1;
  std::runtime_error::runtime_error(&v36, &v21);
  v37 = v22;
  v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v38 = v23;
  v39 = v24;
  v40 = v25;
  if (v25)
  {
    *(_QWORD *)(v24 + 16) = &v39;
    v23 = &v24;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v38 = &v39;
  }
  v41 = v26;
  v26 = 0uLL;
  std::runtime_error::runtime_error(&v15, &v36);
  v16 = v37;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v8 = (unsigned int *)v39;
  v17 = v38;
  v18 = v39;
  v19 = v40;
  if (v40)
  {
    *(_QWORD *)(v39 + 16) = &v18;
    v8 = 0;
    v38 = &v39;
    v39 = 0;
    v40 = 0;
  }
  else
  {
    v17 = &v18;
  }
  v20 = v41;
  v41 = 0uLL;
  v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v8);
  MEMORY[0x18D7898AC](&v36);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
  *(_OWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = off_1E2521330;
  v9 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a1 + 40;
  v11 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    v9 = 0;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v9);
  MEMORY[0x18D7898AC](&v15);
  if (v27)
  {
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v5 = v24;
LABEL_27:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v5);
    MEMORY[0x18D7898AC](&v21);
  }
LABEL_28:
  if (!v34)
    ((void (*)(std::runtime_error *))v28.~runtime_error)(&v28);
}

void sub_18CBFF978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void (**a29)(_QWORD),uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (!a38)
    (*a29)(&a29);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::string>::vector<std::string_view const*,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v16;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v6 = a2;
    v7 = v4 >> 4;
    v8 = (char *)operator new(24 * (v4 >> 4));
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * v7];
    v16 = v8;
    v9 = v8;
    while (1)
    {
      v10 = *(_QWORD *)(v6 + 8);
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:fe180100]();
      v11 = *(const void **)v6;
      if (v10 >= 0x17)
        break;
      v9[23] = v10;
      if (v10)
        goto LABEL_5;
LABEL_6:
      v9[v10] = 0;
      v9 = v16 + 24;
      v16 += 24;
      v6 += 16;
      if (v6 == a3)
      {
        a1[1] = v9;
        return a1;
      }
    }
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = operator new(v12 + 1);
    *((_QWORD *)v9 + 1) = v10;
    *((_QWORD *)v9 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)v9 = v14;
    v9 = v14;
LABEL_5:
    memmove(v9, v11, v10);
    goto LABEL_6;
  }
  return a1;
}

void sub_18CBFFAE8(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:fe180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523880;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CBFFC08(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CBFFC3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::runtime_error *std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  std::__shared_weak_count *imp;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  std::__libcpp_refstring *p_imp;
  std::__libcpp_refstring *v9;
  std::runtime_error_vtbl *v10;
  const char *v11;
  std::runtime_error_vtbl *v12;
  std::runtime_error_vtbl *v13;
  const char *v14;

  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      imp = (std::__shared_weak_count *)this->__imp_.__imp_;
      if (imp)
      {
        p_shared_owners = (unint64_t *)&imp->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  v7 = (char)a2[4].__imp_.__imp_;
  if (v7)
  {
    p_imp = &a2->__imp_;
    this->__vftable = a2->__vftable;
    v9 = &this->__imp_;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v10 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v11 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v11;
    v12 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v13 = a2[3].__vftable;
    this[3].__vftable = v13;
    if (v13)
    {
      *((_QWORD *)v11 + 2) = v12;
      a2[2].__vftable = v10;
      v10->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v12;
    }
    v14 = a2[3].__imp_.__imp_;
    a2 = (std::runtime_error *)((char *)a2 + 56);
    this[3].__imp_.__imp_ = v14;
    v9 = (std::__libcpp_refstring *)&this[4];
    p_imp = &a2->__imp_;
  }
  v9->__imp_ = p_imp->__imp_;
  a2->__vftable = 0;
  a2->__imp_.__imp_ = 0;
  LOBYTE(this[4].__imp_.__imp_) = v7;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

_BYTE *AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::__libcpp_refstring *p_imp;
  const char **v9;
  _QWORD *v10;
  uint64_t v11;
  const std::runtime_error *v12;
  uint64_t v13;
  std::__shared_weak_count *imp;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v1 = result;
  v28 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v27 = v26;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v26);
      }
      else
      {
        v27 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v27 = 0;
    }
    if (v27)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v18.__vftable = *(std::runtime_error_vtbl **)(v5 + 8);
        p_imp = &v18.__imp_;
        v9 = (const char **)(v5 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v18, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v19 = *(_OWORD *)(v5 + 24);
        v18.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v20 = *(uint64_t **)(v5 + 40);
        v21 = v11;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v11 + 16) = &v21;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v20 = &v21;
        }
        v13 = *(_QWORD *)(v5 + 64);
        v12 = (const std::runtime_error *)(v5 + 64);
        v23 = v13;
        p_imp = (std::__libcpp_refstring *)&v24;
        v9 = &v12->__imp_.__imp_;
        v6 = v12;
      }
      p_imp->__imp_ = *v9;
      v6->__vftable = 0;
      v6->__imp_.__imp_ = 0;
      v25 = v7;
      if (!v27)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v27 + 48))(v27, &v18);
      if (v25)
      {
        imp = (std::__shared_weak_count *)v18.__imp_.__imp_;
        if (v18.__imp_.__imp_)
        {
          v15 = (unint64_t *)(v18.__imp_.__imp_ + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v18.~runtime_error)(&v18);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v27;
    if (v27 == v26)
    {
      v17 = 4;
      result = v26;
    }
    else
    {
      if (!v27)
        return result;
      v17 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v17))();
  }
  return result;
}

void sub_18CBFFFBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrINS_13IMediaAccountEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_13IMediaAccountEEENS_5ErrorEE7Promise17get_return"
                                "_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrINS_13IMediaAccountEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_13IMediaAccountEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::BagDataSource::~BagDataSource(AMSCore::BagDataSource *this)
{
  std::mutex *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)this = off_1E2520748;
  v2 = (std::mutex *)((char *)this + 472);
  if (*((_QWORD *)this + 70))
  {
    v3 = (char *)this + 544;
    v4 = (char *)*((_QWORD *)this + 69);
    v5 = *((_QWORD *)this + 68);
    v6 = *(_QWORD *)v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    *((_QWORD *)this + 70) = 0;
    if (v4 != (char *)this + 544)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::~mutex(v2);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 432, *((unsigned int **)this + 55));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 53);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 360));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 312));
  std::mutex::~mutex((std::mutex *)((char *)this + 248));
  v11 = *((_QWORD *)this + 28);
  if (v11)
  {
    v12 = *((_QWORD *)this + 29);
    v13 = (void *)*((_QWORD *)this + 28);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
          std::__shared_weak_count::__release_weak(v14);
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 28);
    }
    *((_QWORD *)this + 29) = v11;
    operator delete(v13);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 160));
  v15 = *((_QWORD *)this + 17);
  if (v15)
  {
    v16 = *((_QWORD *)this + 18);
    v17 = (void *)*((_QWORD *)this + 17);
    if (v16 != v15)
    {
      do
      {
        v18 = *(std::__shared_weak_count **)(v16 - 8);
        if (v18)
          std::__shared_weak_count::__release_weak(v18);
        v16 -= 16;
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v15;
    operator delete(v17);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 72));
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v19)
    goto LABEL_29;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_30:
      if ((*((char *)this + 31) & 0x80000000) == 0)
        return;
LABEL_34:
      operator delete(*((void **)this + 1));
      return;
    }
  }
  else
  {
LABEL_29:
    if ((*((char *)this + 55) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    goto LABEL_34;
}

void AMSCore::BagNetworkDataSource::~BagNetworkDataSource(AMSCore::BagNetworkDataSource *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (char *)this + 624;
  v3 = (char *)*((_QWORD *)this + 81);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 623) < 0)
  {
    operator delete(*((void **)this + 75));
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 74);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 74);
    if (!v5)
      goto LABEL_13;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
    if (!v8)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v8)
LABEL_14:
    std::__shared_weak_count::__release_weak(v8);
LABEL_15:
  AMSCore::BagDataSource::~BagDataSource(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (char *)this + 624;
  v3 = (char *)*((_QWORD *)this + 81);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 623) < 0)
  {
    operator delete(*((void **)this + 75));
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 74);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 74);
    if (!v5)
      goto LABEL_13;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
    if (!v8)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (!v8)
  {
LABEL_15:
    AMSCore::BagDataSource::~BagDataSource(this);
    JUMPOUT(0x18D789BDCLL);
  }
LABEL_14:
  std::__shared_weak_count::__release_weak(v8);
  goto LABEL_15;
}

void AMSCore::BagNetworkDataSource::getAccount(AMSCore::BagNetworkDataSource *this@<X0>, std::runtime_error *a2@<X8>)
{
  char *v4;
  unint64_t v5;
  _BYTE *v6;
  std::runtime_error *v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  const std::runtime_error *v20;
  char v21;
  std::runtime_error_vtbl *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::runtime_error v43[2];
  unsigned int *v44[4];
  std::__shared_weak_count *v45;

  v4 = (char *)operator new(0x130uLL);
  v5 = (unint64_t)v4;
  v6 = v4 + 280;
  *(_QWORD *)v4 = AMSCore::BagNetworkDataSource::getAccount;
  *((_QWORD *)v4 + 1) = AMSCore::BagNetworkDataSource::getAccount;
  v7 = (std::runtime_error *)(v4 + 152);
  v8 = (void **)(v4 + 232);
  v9 = v4 + 256;
  v10 = (uint64_t)(v4 + 16);
  do
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v11 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v4[24] = 0;
  v4[104] = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v43, v10);
  *a2 = v43[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (!v12)
    goto LABEL_42;
  v13 = std::__shared_weak_count::lock(v12);
  *(_QWORD *)(v5 + 272) = v13;
  if (!v13)
    goto LABEL_42;
  v14 = *((_QWORD *)this + 71);
  if (!v14)
  {
    v23 = 0;
    goto LABEL_36;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  AMSCore::IAccountProvider::getActiveOrLocalMediaAccount(v9, v14, (uint64_t)v8);
  v15 = *(_OWORD *)(v5 + 256);
  *(_OWORD *)v6 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  if (atomic_load((unint64_t *)(v15 + 96)))
    goto LABEL_10;
  v6[16] = 0;
  v17 = (unint64_t *)(*(_QWORD *)(v5 + 280) + 96);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v5, v17));
  if (v18)
  {
LABEL_10:
    v19 = *(_QWORD *)v6;
    if (!*(_BYTE *)(*(_QWORD *)v6 + 88))
    {
      __break(1u);
      return;
    }
    v20 = (const std::runtime_error *)(v19 + 8);
    v21 = *(_BYTE *)(v19 + 80);
    if (v21)
    {
      v22 = v20->__vftable;
      v20->__vftable = 0;
      v7->__vftable = v22;
    }
    else
    {
      std::runtime_error::runtime_error(v7, v20);
      *(_OWORD *)(v5 + 168) = *(_OWORD *)(v19 + 24);
      v24 = (_QWORD *)(v19 + 48);
      v25 = *(_QWORD *)(v19 + 48);
      *(_QWORD *)(v5 + 192) = v25;
      v26 = v5 + 192;
      *(_QWORD *)(v5 + 152) = off_1E2521330;
      *(_QWORD *)(v5 + 184) = *(_QWORD *)(v19 + 40);
      v27 = *(_QWORD *)(v19 + 56);
      *(_QWORD *)(v5 + 200) = v27;
      if (v27)
      {
        *(_QWORD *)(v25 + 16) = v26;
        *(_QWORD *)(v19 + 40) = v24;
        *v24 = 0;
        *(_QWORD *)(v19 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v5 + 184) = v26;
      }
      v28 = *(_QWORD *)(v5 + 280);
      *(_OWORD *)(v5 + 208) = *(_OWORD *)(v28 + 64);
      *(_QWORD *)(v28 + 64) = 0;
      *(_QWORD *)(v28 + 72) = 0;
    }
    *(_BYTE *)(v5 + 224) = v21;
    std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v5 + 24), v7);
    v29 = *(_QWORD *)(v5 + 152);
    if (*(_BYTE *)(v5 + 224))
    {
      v7->__vftable = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      v30 = *(_QWORD *)(v5 + 288);
      if (!v30)
        goto LABEL_28;
    }
    else
    {
      (*(void (**)(std::runtime_error *))v29)(v7);
      v30 = *(_QWORD *)(v5 + 288);
      if (!v30)
      {
LABEL_28:
        v34 = *(std::__shared_weak_count **)(v5 + 264);
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if (*(char *)(v5 + 255) < 0)
          operator delete(*v8);
        v23 = 3;
LABEL_36:
        v37 = (unint64_t *)(*(_QWORD *)(v5 + 272) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (v38)
        {
          if (v23 == 3)
            goto LABEL_48;
        }
        else
        {
          v39 = *(std::__shared_weak_count **)(v5 + 272);
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
          if (v23 == 3)
          {
LABEL_48:
            *(_QWORD *)(v5 + 152) = v10;
            *(_QWORD *)v5 = 0;
            AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v7);
            return;
          }
        }
LABEL_42:
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[30]>((uint64_t)v43, 1u, "Account provider was shutdown");
        std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v5 + 24), v43);
        v43[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v40 = v45;
        if (v45)
        {
          v41 = (unint64_t *)&v45->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v44, v44[1]);
        MEMORY[0x18D7898AC](v43);
        goto LABEL_48;
      }
    }
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = *(std::__shared_weak_count **)(v5 + 288);
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_28;
  }
}

void sub_18CC0084C(void *a1)
{
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC00858()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC00754);
}

void AMSCore::BagNetworkDataSource::load(AMSCore::BagNetworkDataSource *a1@<X0>, int a2@<W1>, std::runtime_error *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  char *v8;
  std::runtime_error *v9;
  std::string *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  void (***v14)(uint64_t);
  __int128 v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  const std::runtime_error *v20;
  char v21;
  const char **v22;
  std::__libcpp_refstring *p_imp;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const std::runtime_error *v28;
  std::runtime_error_vtbl *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_mutex_base *v37;
  char v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void **v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned __int8 v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  const std::runtime_error *v61;
  char v62;
  AMSCore::LoadNetworkBagResult *v63;
  std::runtime_error v64;
  __int128 v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int **v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int **v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::error_code v113;
  unsigned int *v114;
  unsigned int **v115;
  unint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t *v137;
  std::runtime_error *v138;
  AMSCore::LoadNetworkBagResult *v139;
  std::__shared_mutex_base **v140;
  _BYTE *v141;
  std::runtime_error *v142;
  char *v143;
  std::runtime_error *v144;
  std::runtime_error *v145;
  std::runtime_error *v146;
  std::runtime_error v147;
  std::error_code ec;
  unsigned int **v149;
  unsigned int *v150;
  uint64_t v151;
  __int128 v152;
  std::runtime_error v153;
  std::error_code v154;
  unsigned int **v155;
  unsigned int *v156;
  uint64_t v157;
  __int128 v158;
  char v159;
  std::system_error v160;
  unsigned int **v161;
  unsigned int *v162;
  uint64_t v163;
  __int128 v164;
  std::error_code v165;

  v6 = (char *)operator new(0x3F0uLL);
  v7 = (unint64_t)v6;
  v8 = v6 + 472;
  *(_QWORD *)v6 = AMSCore::BagNetworkDataSource::load;
  *((_QWORD *)v6 + 1) = AMSCore::BagNetworkDataSource::load;
  v9 = (std::runtime_error *)(v6 + 280);
  v144 = (std::runtime_error *)(v6 + 408);
  v139 = (AMSCore::LoadNetworkBagResult *)(v6 + 536);
  v145 = (std::runtime_error *)(v6 + 656);
  v146 = (std::runtime_error *)(v6 + 152);
  v141 = v6 + 1004;
  v142 = (std::runtime_error *)(v6 + 736);
  v10 = (std::string *)(v6 + 816);
  v11 = v6 + 864;
  v12 = v6 + 880;
  v140 = (std::__shared_mutex_base **)(v6 + 896);
  v137 = (uint64_t *)(v6 + 944);
  v138 = (std::runtime_error *)(v6 + 928);
  *((_DWORD *)v6 + 250) = a2;
  *((_QWORD *)v6 + 120) = a1;
  do
    v13 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v13 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v6[24] = 0;
  v14 = (void (***)(uint64_t))(v6 + 24);
  v6[104] = 0;
  *((_QWORD *)v6 + 14) = 0;
  *((_QWORD *)v6 + 18) = 0;
  v143 = v6 + 16;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v153, (uint64_t)(v6 + 16));
  *a3 = v153;
  AMSCore::BagNetworkDataSource::getAccount(a1, v146);
  v15 = *(_OWORD *)(v7 + 152);
  *((_OWORD *)v8 + 31) = v15;
  v146->__vftable = 0;
  v146->__imp_.__imp_ = 0;
  if (!atomic_load((unint64_t *)(v15 + 96)))
  {
    *v141 = 0;
    v17 = (unint64_t *)(*(_QWORD *)(v7 + 968) + 96);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v7, v17));
    if (!v18)
      return;
  }
  v19 = *((_QWORD *)v8 + 62);
  if (!*(_BYTE *)(v19 + 88))
    goto LABEL_213;
  v20 = (const std::runtime_error *)(v19 + 8);
  v21 = *(_BYTE *)(v19 + 80);
  if (v21)
  {
    *(_QWORD *)(v7 + 656) = *(_QWORD *)(v19 + 8);
    v22 = (const char **)(v7 + 664);
    p_imp = (std::__libcpp_refstring *)(v19 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v145, v20);
    *(_OWORD *)(v7 + 672) = *(_OWORD *)(v19 + 24);
    *(_QWORD *)(v7 + 656) = off_1E2521330;
    v24 = (_QWORD *)(v19 + 48);
    v25 = *(_QWORD *)(v19 + 48);
    *(_QWORD *)(v7 + 688) = *(_QWORD *)(v19 + 40);
    v26 = v7 + 696;
    *(_QWORD *)(v7 + 696) = v25;
    v27 = *(_QWORD *)(v19 + 56);
    *(_QWORD *)(v7 + 704) = v27;
    if (v27)
    {
      *(_QWORD *)(v25 + 16) = v26;
      *(_QWORD *)(v19 + 40) = v24;
      *v24 = 0;
      *(_QWORD *)(v19 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v7 + 688) = v26;
    }
    v28 = *(const std::runtime_error **)(v7 + 968);
    v29 = v28[4].__vftable;
    v20 = v28 + 4;
    *(_QWORD *)(v7 + 712) = v29;
    v22 = (const char **)(v7 + 720);
    p_imp = &v20->__imp_;
  }
  *v22 = p_imp->__imp_;
  v20->__vftable = 0;
  v20->__imp_.__imp_ = 0;
  *(_BYTE *)(v7 + 728) = v21;
  v30 = *(_QWORD *)(v7 + 976);
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = *(std::__shared_weak_count **)(v7 + 976);
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v34 = *(std::__shared_weak_count **)(v7 + 160);
  if (!v34)
    goto LABEL_217;
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (v36)
  {
LABEL_217:
    if (*(_BYTE *)(v7 + 728))
      goto LABEL_24;
LABEL_30:
    std::runtime_error::runtime_error(&v153, v145);
    v154 = *(std::error_code *)(v7 + 672);
    v153.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v42 = *(_QWORD *)(v7 + 696);
    v155 = *(unsigned int ***)(v7 + 688);
    v156 = (unsigned int *)v42;
    v157 = *(_QWORD *)(v7 + 704);
    if (v157)
    {
      *(_QWORD *)(v42 + 16) = &v156;
      *(_QWORD *)(v7 + 688) = v7 + 696;
      *(_QWORD *)(v7 + 696) = 0;
      *(_QWORD *)(v7 + 704) = 0;
    }
    else
    {
      v155 = &v156;
    }
    v158 = *((_OWORD *)v8 + 15);
    *((_QWORD *)v8 + 30) = 0;
    *((_QWORD *)v8 + 31) = 0;
    v159 = 1;
    std::runtime_error::runtime_error(&v160, &v153);
    v160.__ec_ = v154;
    v160.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v161 = v155;
    v162 = v156;
    v163 = v157;
    if (v157)
    {
      *((_QWORD *)v156 + 2) = &v162;
      v155 = &v156;
      v156 = 0;
      v157 = 0;
    }
    else
    {
      v161 = &v162;
    }
    v164 = v158;
    v158 = 0uLL;
    std::runtime_error::runtime_error(&v147, &v160);
    ec = v160.__ec_;
    v147.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v71 = v162;
    v149 = v161;
    v150 = v162;
    v151 = v163;
    if (v163)
    {
      *((_QWORD *)v162 + 2) = &v150;
      v71 = 0;
      v161 = &v162;
      v162 = 0;
      v163 = 0;
    }
    else
    {
      v149 = &v150;
    }
    v152 = v164;
    v164 = 0uLL;
    v160.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v71);
    MEMORY[0x18D7898AC](&v160);
    if (*(_BYTE *)(v7 + 104))
    {
      if (!*(_BYTE *)(v7 + 96))
        (**v14)(v7 + 24);
      *(_BYTE *)(v7 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), &v147);
    v73 = v149;
    v72 = v150;
    *(_QWORD *)(v7 + 64) = v150;
    v74 = v7 + 64;
    *(std::error_code *)(v7 + 40) = ec;
    *(_QWORD *)(v7 + 24) = off_1E2521330;
    *(_QWORD *)(v7 + 56) = v73;
    v75 = v151;
    *(_QWORD *)(v7 + 72) = v151;
    if (v75)
    {
      *((_QWORD *)v72 + 2) = v74;
      v72 = 0;
      v149 = &v150;
      v150 = 0;
      v151 = 0;
    }
    else
    {
      *(_QWORD *)(v7 + 56) = v74;
    }
    v76 = v143;
    *(_OWORD *)(v7 + 80) = v152;
    v152 = 0uLL;
    *(_BYTE *)(v7 + 96) = 0;
    *(_BYTE *)(v7 + 104) = 1;
    v147.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v149, v72);
    MEMORY[0x18D7898AC](&v147);
    if (v159)
    {
      v153.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
      if (*((_QWORD *)&v158 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, v156);
      MEMORY[0x18D7898AC](&v153);
    }
    goto LABEL_203;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (!*(_BYTE *)(v7 + 728))
    goto LABEL_30;
LABEL_24:
  v37 = (std::__shared_mutex_base *)(*(_QWORD *)(v7 + 960) + 248);
  *(_QWORD *)(v7 + 896) = v37;
  *(_BYTE *)(v7 + 904) = 1;
  std::__shared_mutex_base::lock_shared(v37);
  AMSCore::LoadURLMetricsEventConfig::fromAnyMap((uint64_t)v146, *(uint64_t **)(*(_QWORD *)(v7 + 960) + 416));
  std::__shared_mutex_base::unlock_shared(v37);
  v38 = 0;
  v39 = *(_DWORD *)(v7 + 1000);
  *(_BYTE *)(v7 + 904) = 0;
  if (v39)
  {
    if (v39 != 1)
      goto LABEL_214;
    v38 = 1;
  }
  v40 = *(_QWORD *)(v7 + 960);
  if (*(char *)(v40 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v40 + 8), *(_QWORD *)(v40 + 16));
    v40 = *(_QWORD *)(v7 + 960);
  }
  else
  {
    v41 = *(_OWORD *)(v40 + 8);
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 24);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v41;
  }
  v43 = (void **)(v7 + 840);
  if (*(char *)(v40 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 840), *(const std::string::value_type **)(v40 + 32), *(_QWORD *)(v40 + 40));
  }
  else
  {
    v44 = *(_OWORD *)(v40 + 32);
    *(_QWORD *)(v7 + 856) = *(_QWORD *)(v40 + 48);
    *(_OWORD *)v43 = v44;
  }
  if (!*(_BYTE *)(v7 + 728))
    goto LABEL_213;
  *(_QWORD *)(v7 + 864) = *(_QWORD *)(v7 + 656);
  v45 = *(_QWORD *)(v7 + 664);
  *(_QWORD *)(v7 + 872) = v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = *(_QWORD *)(v7 + 960);
  *(_QWORD *)(v7 + 880) = *(_QWORD *)(v48 + 56);
  v49 = *(_QWORD *)(v48 + 64);
  *(_QWORD *)(v7 + 888) = v49;
  if (v49)
  {
    v50 = (unint64_t *)(v49 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v52 = *(_BYTE *)(v7 + 272);
  v53 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(v9, v52, v146);
  v54 = *(_QWORD *)(v7 + 960);
  *(_BYTE *)(v7 + 400) = v52;
  LOBYTE(v153.__vftable) = v38;
  v55 = *(_QWORD *)(v54 + 648);
  if (!v55)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t, std::string *, char *, char *, std::runtime_error *, std::runtime_error *, __n128))(*(_QWORD *)v55 + 48))(v55, v10, v11, v12, v9, &v153, v53);
  v56 = *(_OWORD *)(v7 + 736);
  *((_OWORD *)v8 + 32) = v56;
  v142->__vftable = 0;
  v142->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v56 + 144)))
    goto LABEL_48;
  *v141 = 1;
  v58 = (unint64_t *)(*(_QWORD *)(v7 + 984) + 144);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v7, v58));
  if (v59)
  {
LABEL_48:
    v60 = *((_QWORD *)v8 + 64);
    if (*(_BYTE *)(v60 + 136))
    {
      v61 = (const std::runtime_error *)(v60 + 8);
      v62 = *(_BYTE *)(v60 + 128);
      if (v62)
      {
        *(_BYTE *)(v7 + 408) = 0;
        *(_BYTE *)(v7 + 432) = 0;
        v63 = (AMSCore::LoadNetworkBagResult *)v144;
        if (*(_BYTE *)(v60 + 32))
        {
          v64 = *v61;
          v144[1].__vftable = *(std::runtime_error_vtbl **)(v60 + 24);
          *v144 = v64;
          *(_QWORD *)(v60 + 16) = 0;
          *(_QWORD *)(v60 + 24) = 0;
          v61->__vftable = 0;
          *(_BYTE *)(v7 + 432) = 1;
        }
        *(_BYTE *)(v7 + 440) = 0;
        *(_BYTE *)(v7 + 464) = 0;
        if (*(_BYTE *)(v60 + 64))
        {
          v65 = *(_OWORD *)(v60 + 40);
          *(_QWORD *)(v7 + 456) = *(_QWORD *)(v60 + 56);
          *(_OWORD *)(v7 + 440) = v65;
          *(_QWORD *)(v60 + 48) = 0;
          *(_QWORD *)(v60 + 56) = 0;
          *(_QWORD *)(v60 + 40) = 0;
          *(_BYTE *)(v7 + 464) = 1;
        }
        *(_OWORD *)v8 = *(_OWORD *)(v60 + 72);
        *(_QWORD *)(v7 + 488) = *(_QWORD *)(v60 + 88);
        *(_QWORD *)(v60 + 80) = 0;
        *(_QWORD *)(v60 + 88) = 0;
        *(_QWORD *)(v60 + 72) = 0;
        v66 = *(_BYTE *)(v60 + 98);
        *(_WORD *)(v7 + 496) = *(_WORD *)(v60 + 96);
        *(_BYTE *)(v7 + 498) = v66;
        *((_OWORD *)v8 + 2) = *(_OWORD *)(v60 + 104);
        *(_QWORD *)(v60 + 104) = 0;
        *(_QWORD *)(v60 + 112) = 0;
        *(_QWORD *)(v7 + 520) = *(_QWORD *)(v60 + 120);
      }
      else
      {
        v63 = (AMSCore::LoadNetworkBagResult *)v144;
        std::runtime_error::runtime_error(v144, v61);
        *(_OWORD *)(v7 + 424) = *(_OWORD *)(v60 + 24);
        *(_QWORD *)(v7 + 408) = off_1E2521330;
        v67 = (_QWORD *)(v60 + 48);
        v68 = *(_QWORD *)(v60 + 48);
        v69 = v7 + 448;
        *(_QWORD *)(v7 + 440) = *(_QWORD *)(v60 + 40);
        *(_QWORD *)(v7 + 448) = v68;
        v70 = *(_QWORD *)(v60 + 56);
        *(_QWORD *)(v7 + 456) = v70;
        if (v70)
        {
          *(_QWORD *)(v68 + 16) = v69;
          *(_QWORD *)(v60 + 40) = v67;
          *v67 = 0;
          *(_QWORD *)(v60 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v7 + 440) = v69;
        }
        *(_OWORD *)(v7 + 464) = *(_OWORD *)(v60 + 64);
        *(_QWORD *)(v60 + 64) = 0;
        *(_QWORD *)(v60 + 72) = 0;
      }
      *(_BYTE *)(v7 + 528) = v62;
      v80 = *(_QWORD *)(v7 + 992);
      if (v80)
      {
        v81 = (unint64_t *)(v80 + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          v83 = *(std::__shared_weak_count **)(v7 + 992);
          ((void (*)(std::__shared_weak_count *, const std::runtime_error *))v83->__on_zero_shared)(v83, v61);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v84 = *(std::__shared_weak_count **)(v7 + 744);
      if (!v84)
        goto LABEL_89;
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *, const std::runtime_error *))v84->__on_zero_shared)(v84, v61);
        std::__shared_weak_count::__release_weak(v84);
        if (!*(_BYTE *)(v7 + 400))
          goto LABEL_97;
      }
      else
      {
LABEL_89:
        if (!*(_BYTE *)(v7 + 400))
          goto LABEL_97;
      }
      if (*(char *)(v7 + 399) < 0)
      {
        operator delete(*(void **)(v7 + 376));
        if (*(_BYTE *)(v7 + 352))
        {
LABEL_92:
          v87 = *(std::__shared_weak_count **)(v7 + 888);
          if (!v87)
            goto LABEL_102;
LABEL_98:
          v88 = (unint64_t *)&v87->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *, const std::runtime_error *))v87->__on_zero_shared)(v87, v61);
            std::__shared_weak_count::__release_weak(v87);
          }
LABEL_102:
          v90 = *(std::__shared_weak_count **)(v7 + 872);
          if (!v90)
            goto LABEL_106;
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *, const std::runtime_error *))v90->__on_zero_shared)(v90, v61);
            std::__shared_weak_count::__release_weak(v90);
            if ((*(char *)(v7 + 863) & 0x80000000) == 0)
            {
LABEL_107:
              if ((*(char *)(v7 + 839) & 0x80000000) == 0)
              {
LABEL_108:
                AMSCore::nestedError<std::expected<AMSCore::LoadNetworkBagResult,AMSCore::Error> &,char const(&)[19]>(&v153, (uint64_t)v63, 203, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
                if (v159)
                {
                  std::runtime_error::runtime_error(&v160, &v153);
                  v160.__ec_ = v154;
                  v160.__vftable = (std::system_error_vtbl *)off_1E2521330;
                  v161 = v155;
                  v162 = v156;
                  v163 = v157;
                  if (v157)
                  {
                    *((_QWORD *)v156 + 2) = &v162;
                    v155 = &v156;
                    v156 = 0;
                    v157 = 0;
                  }
                  else
                  {
                    v161 = &v162;
                  }
                  v164 = v158;
                  v158 = 0uLL;
                  std::runtime_error::runtime_error(&v147, &v160);
                  ec = v160.__ec_;
                  v147.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  v105 = v162;
                  v149 = v161;
                  v150 = v162;
                  v151 = v163;
                  if (v163)
                  {
                    *((_QWORD *)v162 + 2) = &v150;
                    v105 = 0;
                    v161 = &v162;
                    v162 = 0;
                    v163 = 0;
                  }
                  else
                  {
                    v149 = &v150;
                  }
                  v152 = v164;
                  v164 = 0uLL;
                  v160.__vftable = (std::system_error_vtbl *)off_1E2521330;
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v105);
                  MEMORY[0x18D7898AC](&v160);
                  if (*(_BYTE *)(v7 + 104))
                  {
                    if (!*(_BYTE *)(v7 + 96))
                      (**v14)(v7 + 24);
                    *(_BYTE *)(v7 + 104) = 0;
                  }
                  std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), &v147);
                  v107 = v149;
                  v106 = v150;
                  *(_QWORD *)(v7 + 64) = v150;
                  v108 = v7 + 64;
                  *(std::error_code *)(v7 + 40) = ec;
                  *(_QWORD *)(v7 + 24) = off_1E2521330;
                  *(_QWORD *)(v7 + 56) = v107;
                  v109 = v151;
                  *(_QWORD *)(v7 + 72) = v151;
                  if (v109)
                  {
                    *((_QWORD *)v106 + 2) = v108;
                    v106 = 0;
                    v149 = &v150;
                    v150 = 0;
                    v151 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v7 + 56) = v108;
                  }
                  v76 = v143;
                  *(_OWORD *)(v7 + 80) = v152;
                  v152 = 0uLL;
                  *(_BYTE *)(v7 + 96) = 0;
                  *(_BYTE *)(v7 + 104) = 1;
                  v147.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v149, v106);
                  MEMORY[0x18D7898AC](&v147);
                  if (v159)
                  {
                    v153.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                    v110 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
                    if (*((_QWORD *)&v158 + 1))
                    {
                      v111 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
                      do
                        v112 = __ldaxr(v111);
                      while (__stlxr(v112 - 1, v111));
                      if (!v112)
                      {
                        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                        std::__shared_weak_count::__release_weak(v110);
                      }
                    }
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, v156);
                    MEMORY[0x18D7898AC](&v153);
                  }
                  v63 = (AMSCore::LoadNetworkBagResult *)v144;
                  if (!*(_BYTE *)(v7 + 528))
                    goto LABEL_164;
LABEL_195:
                  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v63);
                  if (!*(_BYTE *)(v7 + 272))
                    goto LABEL_201;
                  goto LABEL_196;
                }
                if (*(_BYTE *)(v7 + 528))
                {
                  v93 = *(_QWORD *)(v7 + 504);
                  if (!*(_QWORD *)(v93 + 16))
                  {
                    AMSCore::StringUtils::join<>((std::string *)&v147);
                    v165.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
                    *(_QWORD *)&v165.__val_ = 311;
                    std::system_error::system_error(&v160, v165, (const std::string *)&v147);
                    if (*((char *)&ec.__val_ + 7) < 0)
                      operator delete(v147.__vftable);
                    v162 = 0;
                    v163 = 0;
                    v160.__vftable = (std::system_error_vtbl *)off_1E2521330;
                    v161 = &v162;
                    v164 = 0uLL;
                    LODWORD(v147.__vftable) = 203;
                    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v153, (uint64_t)&v160, (unsigned int *)&v147);
                    if (*(_BYTE *)(v7 + 104))
                    {
                      if (!*(_BYTE *)(v7 + 96))
                        (**v14)(v7 + 24);
                      *(_BYTE *)(v7 + 104) = 0;
                    }
                    std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), &v153);
                    v113 = v154;
                    v115 = v155;
                    v114 = v156;
                    *(_QWORD *)(v7 + 64) = v156;
                    v116 = v7 + 64;
                    *(std::error_code *)(v7 + 40) = v113;
                    *(_QWORD *)(v7 + 24) = off_1E2521330;
                    *(_QWORD *)(v7 + 56) = v115;
                    v117 = v157;
                    *(_QWORD *)(v7 + 72) = v157;
                    if (v117)
                    {
                      *((_QWORD *)v114 + 2) = v116;
                      v155 = &v156;
                      v156 = 0;
                      v157 = 0;
                      v114 = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v7 + 56) = v116;
                    }
                    *(_OWORD *)(v7 + 80) = v158;
                    v158 = 0uLL;
                    *(_BYTE *)(v7 + 96) = 0;
                    *(_BYTE *)(v7 + 104) = 1;
                    v153.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, v114);
                    MEMORY[0x18D7898AC](&v153);
                    v160.__vftable = (std::system_error_vtbl *)off_1E2521330;
                    v118 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
                    v76 = v143;
                    if (*((_QWORD *)&v164 + 1))
                    {
                      v119 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
                      do
                        v120 = __ldaxr(v119);
                      while (__stlxr(v120 - 1, v119));
                      if (!v120)
                      {
                        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                        std::__shared_weak_count::__release_weak(v118);
                      }
                    }
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v162);
                    MEMORY[0x18D7898AC](&v160);
                    if (*(_BYTE *)(v7 + 528))
                      goto LABEL_195;
LABEL_164:
                    (**(void (***)(AMSCore::LoadNetworkBagResult *))v63)(v63);
                    if (!*(_BYTE *)(v7 + 272))
                    {
LABEL_201:
                      ((void (*)(std::runtime_error *))v146->~runtime_error)(v146);
                      if (!*(_BYTE *)(v7 + 904))
                      {
LABEL_203:
                        if (*(_BYTE *)(v7 + 728))
                        {
                          v134 = *(std::__shared_weak_count **)(v7 + 664);
                          if (v134)
                          {
                            v135 = (unint64_t *)&v134->__shared_owners_;
                            do
                              v136 = __ldaxr(v135);
                            while (__stlxr(v136 - 1, v135));
                            if (!v136)
                            {
                              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                              std::__shared_weak_count::__release_weak(v134);
                            }
                          }
                        }
                        else
                        {
                          ((void (*)(std::runtime_error *))v145->~runtime_error)(v145);
                        }
                        *(_QWORD *)(v7 + 152) = v76;
                        *(_QWORD *)v7 = 0;
                        AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v146);
                        return;
                      }
LABEL_202:
                      std::__shared_mutex_base::unlock_shared(*v140);
                      goto LABEL_203;
                    }
LABEL_196:
                    if (*(char *)(v7 + 271) < 0)
                    {
                      operator delete(*(void **)(v7 + 248));
                      if (!*(_BYTE *)(v7 + 224))
                        goto LABEL_201;
                    }
                    else if (!*(_BYTE *)(v7 + 224))
                    {
                      goto LABEL_201;
                    }
                    if (!*(_BYTE *)(v7 + 904))
                      goto LABEL_203;
                    goto LABEL_202;
                  }
                  *(_BYTE *)(v7 + 536) = 0;
                  *(_BYTE *)(v7 + 560) = 0;
                  if (*(_BYTE *)(v7 + 432))
                  {
                    *(_OWORD *)v139 = *(_OWORD *)v63;
                    *((_QWORD *)v139 + 2) = *((_QWORD *)v63 + 2);
                    *((_QWORD *)v63 + 1) = 0;
                    *((_QWORD *)v63 + 2) = 0;
                    *(_QWORD *)v63 = 0;
                    *(_BYTE *)(v7 + 560) = 1;
                  }
                  *(_BYTE *)(v7 + 568) = 0;
                  *(_BYTE *)(v7 + 592) = 0;
                  if (*(_BYTE *)(v7 + 464))
                  {
                    *(_QWORD *)(v7 + 584) = *(_QWORD *)(v7 + 456);
                    *(_OWORD *)(v7 + 568) = *(_OWORD *)(v7 + 440);
                    *(_QWORD *)(v7 + 448) = 0;
                    *(_QWORD *)(v7 + 456) = 0;
                    *(_QWORD *)(v7 + 440) = 0;
                    *(_BYTE *)(v7 + 592) = 1;
                  }
                  *(_QWORD *)(v7 + 600) = *(_QWORD *)(v7 + 472);
                  *(_OWORD *)(v7 + 608) = *(_OWORD *)(v7 + 480);
                  *(_QWORD *)(v7 + 480) = 0;
                  *(_QWORD *)(v7 + 488) = 0;
                  *(_QWORD *)(v7 + 472) = 0;
                  *(_WORD *)(v7 + 624) = *(_WORD *)(v7 + 496);
                  *(_BYTE *)(v7 + 626) = *(_BYTE *)(v7 + 498);
                  *(_QWORD *)(v7 + 632) = v93;
                  *(_QWORD *)(v7 + 640) = *(_QWORD *)(v7 + 512);
                  *(_QWORD *)(v7 + 504) = 0;
                  *(_QWORD *)(v7 + 512) = 0;
                  *(_QWORD *)(v7 + 648) = *(_QWORD *)(v7 + 520);
                  if (*(_BYTE *)(v7 + 728))
                  {
                    v94 = *(_QWORD *)(v7 + 960);
                    *(_OWORD *)(v7 + 944) = *(_OWORD *)(v7 + 656);
                    v145->__vftable = 0;
                    v145->__imp_.__imp_ = 0;
                    AMSCore::BagNetworkDataSource::update(v138, v94, (uint64_t)v139, v137);
                    v95 = *(_OWORD *)(v7 + 928);
                    v138->__vftable = 0;
                    v138->__imp_.__imp_ = 0;
                    *(_OWORD *)(v7 + 912) = v95;
                    if (!atomic_load((unint64_t *)(v95 + 96)))
                    {
                      *v141 = 2;
                      v97 = (unint64_t *)(*(_QWORD *)(v7 + 912) + 96);
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v7, v97));
                      if (!v98)
                        return;
                    }
                    v99 = *(_QWORD *)(v7 + 912);
                    if (*(_BYTE *)(v99 + 88))
                    {
                      v100 = *(unsigned __int8 *)(v99 + 80);
                      if (!*(_BYTE *)(v99 + 80))
                      {
                        std::runtime_error::runtime_error(v142, (const std::runtime_error *)(v99 + 8));
                        *(_OWORD *)(v7 + 752) = *(_OWORD *)(v99 + 24);
                        *(_QWORD *)(v7 + 736) = off_1E2521330;
                        v101 = (_QWORD *)(v99 + 48);
                        v102 = *(_QWORD *)(v99 + 48);
                        *(_QWORD *)(v7 + 768) = *(_QWORD *)(v99 + 40);
                        v103 = v7 + 776;
                        *(_QWORD *)(v7 + 776) = v102;
                        v104 = *(_QWORD *)(v99 + 56);
                        *(_QWORD *)(v7 + 784) = v104;
                        if (v104)
                        {
                          *(_QWORD *)(v102 + 16) = v103;
                          *(_QWORD *)(v99 + 40) = v101;
                          *v101 = 0;
                          *(_QWORD *)(v99 + 56) = 0;
                        }
                        else
                        {
                          *(_QWORD *)(v7 + 768) = v103;
                        }
                        *((_OWORD *)v8 + 20) = *(_OWORD *)(v99 + 64);
                        *(_QWORD *)(v99 + 64) = 0;
                        *(_QWORD *)(v99 + 72) = 0;
                      }
                      *(_BYTE *)(v7 + 808) = v100;
                      if (*(_BYTE *)(v7 + 104))
                      {
                        v63 = (AMSCore::LoadNetworkBagResult *)v144;
                        if (!*(_BYTE *)(v7 + 96))
                        {
                          (**(void (***)(uint64_t))(v7 + 24))(v7 + 24);
                          v100 = *(unsigned __int8 *)(v7 + 808);
                        }
                        *(_BYTE *)(v7 + 104) = 0;
                        if (v100)
                          goto LABEL_172;
                      }
                      else
                      {
                        v63 = (AMSCore::LoadNetworkBagResult *)v144;
                        if (v100)
                        {
LABEL_172:
                          *(_BYTE *)(v7 + 96) = v100;
                          *(_BYTE *)(v7 + 104) = 1;
                          v76 = v143;
                          goto LABEL_179;
                        }
                      }
                      std::runtime_error::runtime_error((std::runtime_error *)(v7 + 24), v142);
                      v121 = *(_QWORD *)(v7 + 776);
                      *(_QWORD *)(v7 + 64) = v121;
                      v122 = v7 + 64;
                      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v7 + 752);
                      *(_QWORD *)(v7 + 24) = off_1E2521330;
                      *(_QWORD *)(v7 + 56) = *(_QWORD *)(v7 + 768);
                      v123 = *(_QWORD *)(v7 + 784);
                      *(_QWORD *)(v7 + 72) = v123;
                      if (v123)
                      {
                        *(_QWORD *)(v121 + 16) = v122;
                        *(_QWORD *)(v7 + 768) = v7 + 776;
                        *(_QWORD *)(v7 + 776) = 0;
                        *(_QWORD *)(v7 + 784) = 0;
                      }
                      else
                      {
                        *(_QWORD *)(v7 + 56) = v122;
                      }
                      v76 = v143;
                      *(_OWORD *)(v7 + 80) = *((_OWORD *)v8 + 20);
                      *((_QWORD *)v8 + 40) = 0;
                      *((_QWORD *)v8 + 41) = 0;
                      v124 = *(unsigned __int8 *)(v7 + 808);
                      *(_BYTE *)(v7 + 96) = 0;
                      *(_BYTE *)(v7 + 104) = 1;
                      if (!v124)
                        ((void (*)(std::runtime_error *))v142->~runtime_error)(v142);
LABEL_179:
                      v125 = *(std::__shared_weak_count **)(v7 + 920);
                      if (v125)
                      {
                        v126 = (unint64_t *)&v125->__shared_owners_;
                        do
                          v127 = __ldaxr(v126);
                        while (__stlxr(v127 - 1, v126));
                        if (!v127)
                        {
                          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                          std::__shared_weak_count::__release_weak(v125);
                        }
                      }
                      v128 = *(std::__shared_weak_count **)(v7 + 936);
                      if (v128)
                      {
                        v129 = (unint64_t *)&v128->__shared_owners_;
                        do
                          v130 = __ldaxr(v129);
                        while (__stlxr(v130 - 1, v129));
                        if (!v130)
                        {
                          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                          std::__shared_weak_count::__release_weak(v128);
                        }
                      }
                      v131 = *(std::__shared_weak_count **)(v7 + 952);
                      if (v131)
                      {
                        v132 = (unint64_t *)&v131->__shared_owners_;
                        do
                          v133 = __ldaxr(v132);
                        while (__stlxr(v133 - 1, v132));
                        if (!v133)
                        {
                          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                          std::__shared_weak_count::__release_weak(v131);
                        }
                      }
                      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v139);
                      if (*(_BYTE *)(v7 + 528))
                        goto LABEL_195;
                      goto LABEL_164;
                    }
                  }
                }
                goto LABEL_213;
              }
LABEL_128:
              operator delete(v10->__r_.__value_.__l.__data_);
              goto LABEL_108;
            }
          }
          else
          {
LABEL_106:
            if ((*(char *)(v7 + 863) & 0x80000000) == 0)
              goto LABEL_107;
          }
          operator delete(*v43);
          if ((*(char *)(v7 + 839) & 0x80000000) == 0)
            goto LABEL_108;
          goto LABEL_128;
        }
      }
      else if (*(_BYTE *)(v7 + 352))
      {
        goto LABEL_92;
      }
LABEL_97:
      ((void (*)(std::runtime_error *, const std::runtime_error *))v9->~runtime_error)(v9, v61);
      v87 = *(std::__shared_weak_count **)(v7 + 888);
      if (!v87)
        goto LABEL_102;
      goto LABEL_98;
    }
LABEL_213:
    __break(1u);
LABEL_214:
    std::terminate();
  }
}

void sub_18CC01938()
{
  uint64_t v0;

  AMSCore::Error::~Error((AMSCore::Error *)(v0 - 168));
}

void sub_18CC01944(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, AMSCore::LoadNetworkBagResult *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void *v26;

  if (*(_BYTE *)(v25 + 528))
    AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(a17);
  else
    (**(void (***)(AMSCore::LoadNetworkBagResult *))a17)(a17);
  std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::~expected[abi:fe180100](a19);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100](a13);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a18);
  __cxa_begin_catch(v26);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC01A18()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC018FCLL);
}

void AMSCore::BagNetworkDataSource::load(unint64_t a1)
{
  unint64_t v2;
  std::runtime_error *v3;
  std::runtime_error *v4;
  AMSCore::LoadNetworkBagResult *v5;
  std::runtime_error *v6;
  int v7;
  void **v8;
  uint64_t v9;
  const std::runtime_error *v10;
  char v11;
  const char **v12;
  std::__libcpp_refstring *p_imp;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const std::runtime_error *v18;
  std::runtime_error_vtbl *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_mutex_base *v27;
  char v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned __int8 v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  const std::runtime_error *v51;
  char v52;
  std::runtime_error v53;
  __int128 v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int **v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::error_code v94;
  unsigned int *v95;
  unsigned int **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  unsigned int **v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  AMSCore::LoadNetworkBagResult *v128;
  std::runtime_error *v129;
  std::__shared_mutex_base **v130;
  std::runtime_error *v131;
  unint64_t v132;
  std::runtime_error v133;
  std::error_code ec;
  unsigned int **v135;
  unsigned int *v136;
  uint64_t v137;
  __int128 v138;
  std::system_error v139;
  unsigned int **v140;
  unsigned int *v141;
  uint64_t v142;
  __int128 v143;
  char v144;
  std::runtime_error v145;
  std::error_code v146;
  unsigned int **v147;
  unsigned int *v148;
  uint64_t v149;
  __int128 v150;
  std::error_code v151;

  v2 = a1 + 472;
  v3 = (std::runtime_error *)(a1 + 152);
  v4 = (std::runtime_error *)(a1 + 408);
  v5 = (AMSCore::LoadNetworkBagResult *)(a1 + 536);
  v6 = (std::runtime_error *)(a1 + 736);
  v130 = (std::__shared_mutex_base **)(a1 + 896);
  v131 = (std::runtime_error *)(a1 + 656);
  v132 = a1 + 16;
  v7 = *(unsigned __int8 *)(a1 + 1004);
  if (v7 == 2)
  {
LABEL_97:
    v79 = *(_QWORD *)(a1 + 912);
    if (*(_BYTE *)(v79 + 88))
    {
      v80 = *(unsigned __int8 *)(v79 + 80);
      if (!*(_BYTE *)(v79 + 80))
      {
        std::runtime_error::runtime_error(v6, (const std::runtime_error *)(v79 + 8));
        *(_OWORD *)(a1 + 752) = *(_OWORD *)(v79 + 24);
        *(_QWORD *)(a1 + 736) = off_1E2521330;
        v81 = (_QWORD *)(v79 + 48);
        v82 = *(_QWORD *)(v79 + 48);
        *(_QWORD *)(a1 + 768) = *(_QWORD *)(v79 + 40);
        v83 = a1 + 776;
        *(_QWORD *)(a1 + 776) = v82;
        v84 = *(_QWORD *)(v79 + 56);
        *(_QWORD *)(a1 + 784) = v84;
        if (v84)
        {
          *(_QWORD *)(v82 + 16) = v83;
          *(_QWORD *)(v79 + 40) = v81;
          *v81 = 0;
          *(_QWORD *)(v79 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 768) = v83;
        }
        *(_OWORD *)(v2 + 320) = *(_OWORD *)(v79 + 64);
        *(_QWORD *)(v79 + 64) = 0;
        *(_QWORD *)(v79 + 72) = 0;
      }
      *(_BYTE *)(a1 + 808) = v80;
      if (*(_BYTE *)(a1 + 104))
      {
        if (!*(_BYTE *)(a1 + 96))
        {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          v80 = *(unsigned __int8 *)(a1 + 808);
        }
        *(_BYTE *)(a1 + 104) = 0;
      }
      if (v80)
      {
        *(_BYTE *)(a1 + 96) = v80;
        *(_BYTE *)(a1 + 104) = 1;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v6);
        v99 = *(_QWORD *)(a1 + 776);
        *(_QWORD *)(a1 + 64) = v99;
        v100 = a1 + 64;
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 752);
        *(_QWORD *)(a1 + 24) = off_1E2521330;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 768);
        v101 = *(_QWORD *)(a1 + 784);
        *(_QWORD *)(a1 + 72) = v101;
        if (v101)
        {
          *(_QWORD *)(v99 + 16) = v100;
          *(_QWORD *)(a1 + 768) = a1 + 776;
          *(_QWORD *)(a1 + 776) = 0;
          *(_QWORD *)(a1 + 784) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 56) = v100;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(v2 + 320);
        *(_QWORD *)(v2 + 320) = 0;
        *(_QWORD *)(v2 + 328) = 0;
        v102 = *(unsigned __int8 *)(a1 + 808);
        *(_BYTE *)(a1 + 96) = 0;
        *(_BYTE *)(a1 + 104) = 1;
        if (!v102)
          ((void (*)(std::runtime_error *))v6->~runtime_error)(v6);
      }
      v103 = *(std::__shared_weak_count **)(a1 + 920);
      v90 = v132;
      if (v103)
      {
        p_shared_owners = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(p_shared_owners);
        while (__stlxr(v105 - 1, p_shared_owners));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = *(std::__shared_weak_count **)(a1 + 936);
      if (v106)
      {
        v107 = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = *(std::__shared_weak_count **)(a1 + 952);
      if (v109)
      {
        v110 = (unint64_t *)&v109->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v5);
      if (*(_BYTE *)(a1 + 528))
        goto LABEL_161;
      goto LABEL_191;
    }
    goto LABEL_209;
  }
  v128 = (AMSCore::LoadNetworkBagResult *)(a1 + 1004);
  v129 = (std::runtime_error *)(a1 + 152);
  v8 = (void **)(a1 + 816);
  if (v7 == 1)
    goto LABEL_44;
  v9 = *(_QWORD *)(a1 + 968);
  if (!*(_BYTE *)(v9 + 88))
    goto LABEL_209;
  v126 = a1 + 880;
  v127 = a1 + 864;
  v10 = (const std::runtime_error *)(v9 + 8);
  v11 = *(_BYTE *)(v9 + 80);
  if (v11)
  {
    *(_QWORD *)(a1 + 656) = *(_QWORD *)(v9 + 8);
    v12 = (const char **)(a1 + 664);
    p_imp = (std::__libcpp_refstring *)(v9 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v131, v10);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(v9 + 24);
    *(_QWORD *)(a1 + 656) = off_1E2521330;
    v14 = (_QWORD *)(v9 + 48);
    v15 = *(_QWORD *)(v9 + 48);
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(v9 + 40);
    v16 = a1 + 696;
    *(_QWORD *)(a1 + 696) = v15;
    v17 = *(_QWORD *)(v9 + 56);
    *(_QWORD *)(a1 + 704) = v17;
    if (v17)
    {
      *(_QWORD *)(v15 + 16) = v16;
      *(_QWORD *)(v9 + 40) = v14;
      *v14 = 0;
      *(_QWORD *)(v9 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 688) = v16;
    }
    v18 = *(const std::runtime_error **)(a1 + 968);
    v19 = v18[4].__vftable;
    v10 = v18 + 4;
    *(_QWORD *)(a1 + 712) = v19;
    v12 = (const char **)(a1 + 720);
    p_imp = &v10->__imp_;
  }
  *v12 = p_imp->__imp_;
  v10->__vftable = 0;
  v10->__imp_.__imp_ = 0;
  *(_BYTE *)(a1 + 728) = v11;
  v20 = *(_QWORD *)(a1 + 976);
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      v23 = *(std::__shared_weak_count **)(a1 + 976);
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v24 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v24)
    goto LABEL_213;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_213:
    if (*(_BYTE *)(a1 + 728))
      goto LABEL_20;
LABEL_26:
    std::runtime_error::runtime_error(&v139, v131);
    v139.__ec_ = *(std::error_code *)(a1 + 672);
    v139.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v32 = *(_QWORD *)(a1 + 696);
    v140 = *(unsigned int ***)(a1 + 688);
    v141 = (unsigned int *)v32;
    v142 = *(_QWORD *)(a1 + 704);
    if (v142)
    {
      *(_QWORD *)(v32 + 16) = &v141;
      *(_QWORD *)(a1 + 688) = a1 + 696;
      *(_QWORD *)(a1 + 696) = 0;
      *(_QWORD *)(a1 + 704) = 0;
    }
    else
    {
      v140 = &v141;
    }
    v143 = *(_OWORD *)(v2 + 240);
    *(_QWORD *)(v2 + 240) = 0;
    *(_QWORD *)(v2 + 248) = 0;
    v144 = 1;
    std::runtime_error::runtime_error(&v133, &v139);
    ec = v139.__ec_;
    v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v135 = v140;
    v136 = v141;
    v137 = v142;
    if (v142)
    {
      *((_QWORD *)v141 + 2) = &v136;
      v140 = &v141;
      v141 = 0;
      v142 = 0;
    }
    else
    {
      v135 = &v136;
    }
    v138 = v143;
    v143 = 0uLL;
    std::runtime_error::runtime_error(&v145, &v133);
    v146 = ec;
    v112 = v136;
    v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v147 = v135;
    v148 = v136;
    v149 = v137;
    if (v137)
    {
      *((_QWORD *)v136 + 2) = &v148;
      v112 = 0;
      v135 = &v136;
      v136 = 0;
      v137 = 0;
    }
    else
    {
      v147 = &v148;
    }
    v150 = v138;
    v138 = 0uLL;
    v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v135, v112);
    MEMORY[0x18D7898AC](&v133);
    if (*(_BYTE *)(a1 + 104))
    {
      if (!*(_BYTE *)(a1 + 96))
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      *(_BYTE *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v145);
    v114 = v147;
    v113 = v148;
    *(_QWORD *)(a1 + 64) = v148;
    v115 = a1 + 64;
    *(std::error_code *)(a1 + 40) = v146;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v114;
    v116 = v149;
    *(_QWORD *)(a1 + 72) = v149;
    if (v116)
    {
      *((_QWORD *)v113 + 2) = v115;
      v113 = 0;
      v147 = &v148;
      v148 = 0;
      v149 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v115;
    }
    v3 = v129;
    *(_OWORD *)(a1 + 80) = v150;
    v150 = 0uLL;
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v147, v113);
    MEMORY[0x18D7898AC](&v145);
    v90 = v132;
    if (v144)
    {
      v139.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v117 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
      if (*((_QWORD *)&v143 + 1))
      {
        v118 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v140, v141);
      MEMORY[0x18D7898AC](&v139);
    }
    goto LABEL_199;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!*(_BYTE *)(a1 + 728))
    goto LABEL_26;
LABEL_20:
  v27 = (std::__shared_mutex_base *)(*(_QWORD *)(a1 + 960) + 248);
  *(_QWORD *)(a1 + 896) = v27;
  *(_BYTE *)(a1 + 904) = 1;
  std::__shared_mutex_base::lock_shared(v27);
  AMSCore::LoadURLMetricsEventConfig::fromAnyMap((uint64_t)v3, *(uint64_t **)(*(_QWORD *)(a1 + 960) + 416));
  std::__shared_mutex_base::unlock_shared(v27);
  v28 = 0;
  v29 = *(_DWORD *)(a1 + 1000);
  *(_BYTE *)(a1 + 904) = 0;
  if (v29)
  {
    if (v29 != 1)
      goto LABEL_210;
    v28 = 1;
  }
  v30 = *(_QWORD *)(a1 + 960);
  if (*(char *)(v30 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 816), *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
    v30 = *(_QWORD *)(a1 + 960);
  }
  else
  {
    v31 = *(_OWORD *)(v30 + 8);
    *(_QWORD *)(a1 + 832) = *(_QWORD *)(v30 + 24);
    *(_OWORD *)v8 = v31;
  }
  v33 = (std::string *)(a1 + 840);
  if (*(char *)(v30 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(v30 + 32), *(_QWORD *)(v30 + 40));
  }
  else
  {
    v34 = *(_OWORD *)(v30 + 32);
    *(_QWORD *)(a1 + 856) = *(_QWORD *)(v30 + 48);
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
  }
  if (!*(_BYTE *)(a1 + 728))
    goto LABEL_209;
  *(_QWORD *)(a1 + 864) = *(_QWORD *)(a1 + 656);
  v35 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 872) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(v38 + 56);
  v39 = *(_QWORD *)(v38 + 64);
  *(_QWORD *)(a1 + 888) = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = *(_BYTE *)(a1 + 272);
  v43 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)(a1 + 280), v42, v3);
  v44 = *(_QWORD *)(a1 + 960);
  *(_BYTE *)(a1 + 400) = v42;
  LOBYTE(v139.__vftable) = v28;
  v45 = *(_QWORD *)(v44 + 648);
  if (!v45)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, std::system_error *, __n128))(*(_QWORD *)v45 + 48))(v45, a1 + 816, v127, v126, a1 + 280, &v139, v43);
  v46 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)(v2 + 512) = v46;
  v6->__vftable = 0;
  v6->__imp_.__imp_ = 0;
  if (atomic_load((unint64_t *)(v46 + 144)))
    goto LABEL_44;
  *(_BYTE *)v128 = 1;
  v48 = (unint64_t *)(*(_QWORD *)(a1 + 984) + 144);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(a1, v48));
  if (v49)
  {
LABEL_44:
    v50 = *(_QWORD *)(a1 + 984);
    if (*(_BYTE *)(v50 + 136))
    {
      v51 = (const std::runtime_error *)(v50 + 8);
      v52 = *(_BYTE *)(v50 + 128);
      if (v52)
      {
        *(_BYTE *)(a1 + 408) = 0;
        *(_BYTE *)(a1 + 432) = 0;
        if (*(_BYTE *)(v50 + 32))
        {
          v53 = *v51;
          v4[1].__vftable = *(std::runtime_error_vtbl **)(v50 + 24);
          *v4 = v53;
          *(_QWORD *)(v50 + 16) = 0;
          *(_QWORD *)(v50 + 24) = 0;
          v51->__vftable = 0;
          *(_BYTE *)(a1 + 432) = 1;
        }
        *(_BYTE *)(a1 + 440) = 0;
        *(_BYTE *)(a1 + 464) = 0;
        if (*(_BYTE *)(v50 + 64))
        {
          v54 = *(_OWORD *)(v50 + 40);
          *(_QWORD *)(a1 + 456) = *(_QWORD *)(v50 + 56);
          *(_OWORD *)(a1 + 440) = v54;
          *(_QWORD *)(v50 + 48) = 0;
          *(_QWORD *)(v50 + 56) = 0;
          *(_QWORD *)(v50 + 40) = 0;
          *(_BYTE *)(a1 + 464) = 1;
        }
        *(_OWORD *)v2 = *(_OWORD *)(v50 + 72);
        *(_QWORD *)(a1 + 488) = *(_QWORD *)(v50 + 88);
        *(_QWORD *)(v50 + 80) = 0;
        *(_QWORD *)(v50 + 88) = 0;
        *(_QWORD *)(v50 + 72) = 0;
        v55 = *(_BYTE *)(v50 + 98);
        *(_WORD *)(a1 + 496) = *(_WORD *)(v50 + 96);
        *(_BYTE *)(a1 + 498) = v55;
        *(_OWORD *)(v2 + 32) = *(_OWORD *)(v50 + 104);
        *(_QWORD *)(v50 + 104) = 0;
        *(_QWORD *)(v50 + 112) = 0;
        *(_QWORD *)(a1 + 520) = *(_QWORD *)(v50 + 120);
      }
      else
      {
        std::runtime_error::runtime_error(v4, v51);
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(v50 + 24);
        *(_QWORD *)(a1 + 408) = off_1E2521330;
        v56 = (_QWORD *)(v50 + 48);
        v57 = *(_QWORD *)(v50 + 48);
        v58 = a1 + 448;
        *(_QWORD *)(a1 + 440) = *(_QWORD *)(v50 + 40);
        *(_QWORD *)(a1 + 448) = v57;
        v59 = *(_QWORD *)(v50 + 56);
        *(_QWORD *)(a1 + 456) = v59;
        if (v59)
        {
          *(_QWORD *)(v57 + 16) = v58;
          *(_QWORD *)(v50 + 40) = v56;
          *v56 = 0;
          *(_QWORD *)(v50 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 440) = v58;
        }
        *(_OWORD *)(a1 + 464) = *(_OWORD *)(v50 + 64);
        *(_QWORD *)(v50 + 64) = 0;
        *(_QWORD *)(v50 + 72) = 0;
      }
      *(_BYTE *)(a1 + 528) = v52;
      v60 = *(_QWORD *)(a1 + 992);
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          v63 = *(std::__shared_weak_count **)(a1 + 992);
          ((void (*)(std::__shared_weak_count *, const std::runtime_error *))v63->__on_zero_shared)(v63, v51);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v64 = *(std::__shared_weak_count **)(a1 + 744);
      if (!v64)
        goto LABEL_64;
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *, const std::runtime_error *))v64->__on_zero_shared)(v64, v51);
        std::__shared_weak_count::__release_weak(v64);
        if (!*(_BYTE *)(a1 + 400))
          goto LABEL_72;
      }
      else
      {
LABEL_64:
        if (!*(_BYTE *)(a1 + 400))
          goto LABEL_72;
      }
      if (*(char *)(a1 + 399) < 0)
      {
        operator delete(*(void **)(a1 + 376));
        if (*(_BYTE *)(a1 + 352))
        {
LABEL_67:
          v67 = *(std::__shared_weak_count **)(a1 + 888);
          if (!v67)
            goto LABEL_77;
LABEL_73:
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *, const std::runtime_error *))v67->__on_zero_shared)(v67, v51);
            std::__shared_weak_count::__release_weak(v67);
          }
LABEL_77:
          v70 = *(std::__shared_weak_count **)(a1 + 872);
          if (!v70)
            goto LABEL_81;
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *, const std::runtime_error *))v70->__on_zero_shared)(v70, v51);
            std::__shared_weak_count::__release_weak(v70);
            if ((*(char *)(a1 + 863) & 0x80000000) == 0)
            {
LABEL_82:
              if ((*(char *)(a1 + 839) & 0x80000000) == 0)
                goto LABEL_83;
LABEL_103:
              operator delete(*v8);
LABEL_83:
              AMSCore::nestedError<std::expected<AMSCore::LoadNetworkBagResult,AMSCore::Error> &,char const(&)[19]>(&v139, (uint64_t)v4, 203, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
              if (v144)
              {
                std::runtime_error::runtime_error(&v133, &v139);
                ec = v139.__ec_;
                v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v135 = v140;
                v136 = v141;
                v137 = v142;
                if (v142)
                {
                  *((_QWORD *)v141 + 2) = &v136;
                  v140 = &v141;
                  v141 = 0;
                  v142 = 0;
                }
                else
                {
                  v135 = &v136;
                }
                v138 = v143;
                v143 = 0uLL;
                std::runtime_error::runtime_error(&v145, &v133);
                v146 = ec;
                v85 = v136;
                v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v147 = v135;
                v148 = v136;
                v149 = v137;
                if (v137)
                {
                  *((_QWORD *)v136 + 2) = &v148;
                  v85 = 0;
                  v135 = &v136;
                  v136 = 0;
                  v137 = 0;
                }
                else
                {
                  v147 = &v148;
                }
                v150 = v138;
                v138 = 0uLL;
                v133.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v135, v85);
                MEMORY[0x18D7898AC](&v133);
                if (*(_BYTE *)(a1 + 104))
                {
                  if (!*(_BYTE *)(a1 + 96))
                    (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                  *(_BYTE *)(a1 + 104) = 0;
                }
                std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v145);
                v87 = v147;
                v86 = v148;
                *(_QWORD *)(a1 + 64) = v148;
                v88 = a1 + 64;
                *(std::error_code *)(a1 + 40) = v146;
                *(_QWORD *)(a1 + 24) = off_1E2521330;
                *(_QWORD *)(a1 + 56) = v87;
                v89 = v149;
                *(_QWORD *)(a1 + 72) = v149;
                if (v89)
                {
                  *((_QWORD *)v86 + 2) = v88;
                  v86 = 0;
                  v147 = &v148;
                  v148 = 0;
                  v149 = 0;
                }
                else
                {
                  *(_QWORD *)(a1 + 56) = v88;
                }
                v3 = v129;
                *(_OWORD *)(a1 + 80) = v150;
                v150 = 0uLL;
                *(_BYTE *)(a1 + 96) = 0;
                *(_BYTE *)(a1 + 104) = 1;
                v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v147, v86);
                MEMORY[0x18D7898AC](&v145);
                v90 = v132;
                if (v144)
                {
                  v139.__vftable = (std::system_error_vtbl *)off_1E2521330;
                  v91 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
                  if (*((_QWORD *)&v143 + 1))
                  {
                    v92 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
                    do
                      v93 = __ldaxr(v92);
                    while (__stlxr(v93 - 1, v92));
                    if (!v93)
                    {
                      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                      std::__shared_weak_count::__release_weak(v91);
                    }
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v140, v141);
                  MEMORY[0x18D7898AC](&v139);
                }
                if (!*(_BYTE *)(a1 + 528))
                  goto LABEL_191;
LABEL_161:
                AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v4);
                if (!*(_BYTE *)(a1 + 272))
                  goto LABEL_197;
                goto LABEL_192;
              }
              if (!*(_BYTE *)(a1 + 528))
                goto LABEL_209;
              v73 = *(_QWORD *)(a1 + 504);
              v3 = v129;
              if (!*(_QWORD *)(v73 + 16))
              {
                AMSCore::StringUtils::join<>((std::string *)&v133);
                v151.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
                *(_QWORD *)&v151.__val_ = 311;
                std::system_error::system_error(&v139, v151, (const std::string *)&v133);
                if (*((char *)&ec.__val_ + 7) < 0)
                  operator delete(v133.__vftable);
                v141 = 0;
                v142 = 0;
                v139.__vftable = (std::system_error_vtbl *)off_1E2521330;
                v140 = &v141;
                v143 = 0uLL;
                LODWORD(v133.__vftable) = 203;
                AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v145, (uint64_t)&v139, (unsigned int *)&v133);
                if (*(_BYTE *)(a1 + 104))
                {
                  if (!*(_BYTE *)(a1 + 96))
                    (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                  *(_BYTE *)(a1 + 104) = 0;
                }
                std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v145);
                v94 = v146;
                v96 = v147;
                v95 = v148;
                *(_QWORD *)(a1 + 64) = v148;
                v97 = a1 + 64;
                *(std::error_code *)(a1 + 40) = v94;
                *(_QWORD *)(a1 + 24) = off_1E2521330;
                *(_QWORD *)(a1 + 56) = v96;
                v98 = v149;
                *(_QWORD *)(a1 + 72) = v149;
                if (v98)
                {
                  *((_QWORD *)v95 + 2) = v97;
                  v147 = &v148;
                  v148 = 0;
                  v149 = 0;
                  v95 = 0;
                }
                else
                {
                  *(_QWORD *)(a1 + 56) = v97;
                }
                v3 = v129;
                *(_OWORD *)(a1 + 80) = v150;
                v150 = 0uLL;
                *(_BYTE *)(a1 + 96) = 0;
                *(_BYTE *)(a1 + 104) = 1;
                v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v147, v95);
                MEMORY[0x18D7898AC](&v145);
                v139.__vftable = (std::system_error_vtbl *)off_1E2521330;
                v120 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
                v90 = v132;
                if (*((_QWORD *)&v143 + 1))
                {
                  v121 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
                  do
                    v122 = __ldaxr(v121);
                  while (__stlxr(v122 - 1, v121));
                  if (!v122)
                  {
                    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                    std::__shared_weak_count::__release_weak(v120);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v140, v141);
                MEMORY[0x18D7898AC](&v139);
                if (*(_BYTE *)(a1 + 528))
                  goto LABEL_161;
LABEL_191:
                ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
                if (!*(_BYTE *)(a1 + 272))
                  goto LABEL_197;
LABEL_192:
                if (*(char *)(a1 + 271) < 0)
                {
                  operator delete(*(void **)(a1 + 248));
                  if (*(_BYTE *)(a1 + 224))
                  {
LABEL_194:
                    if (!*(_BYTE *)(a1 + 904))
                      goto LABEL_199;
                    goto LABEL_198;
                  }
                }
                else if (*(_BYTE *)(a1 + 224))
                {
                  goto LABEL_194;
                }
LABEL_197:
                ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
                if (!*(_BYTE *)(a1 + 904))
                {
LABEL_199:
                  if (*(_BYTE *)(a1 + 728))
                  {
                    v123 = *(std::__shared_weak_count **)(a1 + 664);
                    if (v123)
                    {
                      v124 = (unint64_t *)&v123->__shared_owners_;
                      do
                        v125 = __ldaxr(v124);
                      while (__stlxr(v125 - 1, v124));
                      if (!v125)
                      {
                        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                        std::__shared_weak_count::__release_weak(v123);
                      }
                    }
                  }
                  else
                  {
                    ((void (*)(std::runtime_error *))v131->~runtime_error)(v131);
                  }
                  *(_QWORD *)(a1 + 152) = v90;
                  *(_QWORD *)a1 = 0;
                  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
                  return;
                }
LABEL_198:
                std::__shared_mutex_base::unlock_shared(*v130);
                goto LABEL_199;
              }
              *(_BYTE *)(a1 + 536) = 0;
              *(_BYTE *)(a1 + 560) = 0;
              if (*(_BYTE *)(a1 + 432))
              {
                *(std::runtime_error *)v5 = *v4;
                *((_QWORD *)v5 + 2) = v4[1].__vftable;
                v4->__imp_.__imp_ = 0;
                v4[1].__vftable = 0;
                v4->__vftable = 0;
                *(_BYTE *)(a1 + 560) = 1;
              }
              *(_BYTE *)(a1 + 568) = 0;
              *(_BYTE *)(a1 + 592) = 0;
              if (*(_BYTE *)(a1 + 464))
              {
                *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 456);
                *(_OWORD *)(a1 + 568) = *(_OWORD *)(a1 + 440);
                *(_QWORD *)(a1 + 448) = 0;
                *(_QWORD *)(a1 + 456) = 0;
                *(_QWORD *)(a1 + 440) = 0;
                *(_BYTE *)(a1 + 592) = 1;
              }
              *(_QWORD *)(a1 + 600) = *(_QWORD *)(a1 + 472);
              *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 480);
              *(_QWORD *)(a1 + 480) = 0;
              *(_QWORD *)(a1 + 488) = 0;
              *(_QWORD *)(a1 + 472) = 0;
              *(_WORD *)(a1 + 624) = *(_WORD *)(a1 + 496);
              *(_BYTE *)(a1 + 626) = *(_BYTE *)(a1 + 498);
              *(_QWORD *)(a1 + 632) = v73;
              *(_QWORD *)(a1 + 640) = *(_QWORD *)(a1 + 512);
              *(_QWORD *)(a1 + 504) = 0;
              *(_QWORD *)(a1 + 512) = 0;
              *(_QWORD *)(a1 + 648) = *(_QWORD *)(a1 + 520);
              if (!*(_BYTE *)(a1 + 728))
                goto LABEL_209;
              v74 = *(_QWORD *)(a1 + 960);
              *(_OWORD *)(a1 + 944) = *(_OWORD *)(a1 + 656);
              v131->__vftable = 0;
              v131->__imp_.__imp_ = 0;
              AMSCore::BagNetworkDataSource::update((std::runtime_error *)(a1 + 928), v74, (uint64_t)v5, (uint64_t *)(a1 + 944));
              v75 = *(_OWORD *)(a1 + 928);
              *(_QWORD *)(a1 + 928) = 0;
              *(_QWORD *)(a1 + 936) = 0;
              *(_OWORD *)(a1 + 912) = v75;
              if (!atomic_load((unint64_t *)(v75 + 96)))
              {
                *(_BYTE *)v128 = 2;
                v77 = (unint64_t *)(*(_QWORD *)(a1 + 912) + 96);
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(a1, v77));
                if (!v78)
                  return;
              }
              goto LABEL_97;
            }
          }
          else
          {
LABEL_81:
            if ((*(char *)(a1 + 863) & 0x80000000) == 0)
              goto LABEL_82;
          }
          operator delete(*(void **)(a1 + 840));
          if ((*(char *)(a1 + 839) & 0x80000000) == 0)
            goto LABEL_83;
          goto LABEL_103;
        }
      }
      else if (*(_BYTE *)(a1 + 352))
      {
        goto LABEL_67;
      }
LABEL_72:
      (**(void (***)(uint64_t, const std::runtime_error *))(a1 + 280))(a1 + 280, v51);
      v67 = *(std::__shared_weak_count **)(a1 + 888);
      if (!v67)
        goto LABEL_77;
      goto LABEL_73;
    }
LABEL_209:
    __break(1u);
LABEL_210:
    std::terminate();
  }
}

void sub_18CC02A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC02A50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  AMSCore::LoadNetworkBagResult *v22;
  void *v23;

  if (*(_BYTE *)(v21 + 528))
    AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v22);
  else
    (**(void (***)(AMSCore::LoadNetworkBagResult *))v22)(v22);
  std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::~expected[abi:fe180100](a12);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100](a13);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a14);
  __cxa_begin_catch(v23);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC02B1C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC02A04);
}

void AMSCore::BagNetworkDataSource::load(char *__p)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;

  v2 = (void (***)(_QWORD))(__p + 152);
  if (!*(_QWORD *)__p)
    goto LABEL_82;
  if (__p[1004])
  {
    if (__p[1004] != 1)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 115);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 117);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)__p + 119);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(__p + 536));
      if (__p[528])
      {
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(__p + 408));
        if (!__p[272])
          goto LABEL_73;
      }
      else
      {
        (**((void (***)(char *))__p + 51))(__p + 408);
        if (!__p[272])
          goto LABEL_73;
      }
LABEL_64:
      if (__p[271] < 0)
      {
        operator delete(*((void **)__p + 31));
        if (!__p[224])
          goto LABEL_73;
      }
      else if (!__p[224])
      {
LABEL_73:
        (**v2)(v2);
        if (!__p[904])
        {
LABEL_75:
          if (!__p[728])
          {
            (**((void (***)(char *))__p + 82))(__p + 656);
            goto LABEL_82;
          }
          v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 83);
          if (!v13)
            goto LABEL_82;
          v32 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v32);
          while (__stlxr(v15 - 1, v32));
          goto LABEL_79;
        }
LABEL_74:
        std::__shared_mutex_base::unlock_shared(*((std::__shared_mutex_base **)__p + 112));
        goto LABEL_75;
      }
      if (!__p[904])
        goto LABEL_75;
      goto LABEL_74;
    }
    v3 = *((_QWORD *)__p + 124);
    if (!v3)
      goto LABEL_8;
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)__p + 124);
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 93);
      if (!v6)
        goto LABEL_12;
    }
    else
    {
LABEL_8:
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 93);
      if (!v6)
        goto LABEL_12;
    }
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!__p[400])
      {
LABEL_52:
        (**((void (***)(char *))__p + 35))(__p + 280);
        v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 111);
        if (!v26)
          goto LABEL_57;
        goto LABEL_53;
      }
LABEL_13:
      if (__p[399] < 0)
      {
        operator delete(*((void **)__p + 47));
        if (!__p[352])
          goto LABEL_52;
      }
      else if (!__p[352])
      {
        goto LABEL_52;
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 111);
      if (!v26)
        goto LABEL_57;
LABEL_53:
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
LABEL_57:
      v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 109);
      if (!v29)
        goto LABEL_61;
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        if ((__p[863] & 0x80000000) == 0)
        {
LABEL_62:
          if ((__p[839] & 0x80000000) == 0)
            goto LABEL_63;
LABEL_72:
          operator delete(*((void **)__p + 102));
          if (!__p[272])
            goto LABEL_73;
          goto LABEL_64;
        }
      }
      else
      {
LABEL_61:
        if ((__p[863] & 0x80000000) == 0)
          goto LABEL_62;
      }
      operator delete(*((void **)__p + 105));
      if ((__p[839] & 0x80000000) == 0)
      {
LABEL_63:
        if (!__p[272])
          goto LABEL_73;
        goto LABEL_64;
      }
      goto LABEL_72;
    }
LABEL_12:
    if (!__p[400])
      goto LABEL_52;
    goto LABEL_13;
  }
  v9 = *((_QWORD *)__p + 122);
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 122);
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 20);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_79:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_82:
  v33 = (char *)*((_QWORD *)__p + 18);
  if (v33 == __p + 120)
  {
    v34 = 4;
    v33 = __p + 120;
    goto LABEL_86;
  }
  if (v33)
  {
    v34 = 5;
LABEL_86:
    (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
  }
  if (__p[104] && !__p[96])
    (**((void (***)(char *))__p + 3))(__p + 24);
  do
  {
    v35 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v36)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

uint64_t std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_4;
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if (*(_BYTE *)(a1 + 72))
      return a1;
    goto LABEL_4;
  }
  if (!*(_BYTE *)(a1 + 72))
LABEL_4:
    (**(void (***)(uint64_t))a1)(a1);
  return a1;
}

uint64_t std::tuple<std::string,std::string>::~tuple(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_5;
  return a1;
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::LoadNetworkBagResult,AMSCore::Error> &,char const(&)[19]>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *v18;
  unsigned int *v19;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::runtime_error v32;
  std::runtime_error v33;
  unsigned int **v34;
  unsigned int *v35;
  std::runtime_error_vtbl *v36;
  __int128 v37;
  std::system_error v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  std::runtime_error v43;
  std::runtime_error v44;
  unsigned int **v45;
  unsigned int *v46;
  std::runtime_error_vtbl *v47;
  __int128 v48;
  char v49;
  std::string __what_arg;
  uint64_t v51;
  _QWORD v52[8];
  __int128 __p;
  __int128 v54;
  int v55;
  uint64_t v56[20];
  std::error_code v57;

  v4 = result;
  if (*(_BYTE *)(a2 + 120))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v43, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v44 = *(std::runtime_error *)(a2 + 16);
    v43.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v45 = *(unsigned int ***)(a2 + 32);
    v46 = (unsigned int *)v9;
    v47 = *(std::runtime_error_vtbl **)(a2 + 48);
    if (v47)
    {
      *(_QWORD *)(v9 + 16) = &v46;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v45 = &v46;
    }
    v48 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v49 = 1;
    std::runtime_error::runtime_error(&v32, &v43);
    v33 = v44;
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v34 = v45;
    v35 = v46;
    v36 = v47;
    if (v47)
    {
      *((_QWORD *)v46 + 2) = &v35;
      v45 = &v46;
      v46 = 0;
      v47 = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = v48;
    v48 = 0uLL;
    v10 = MEMORY[0x1E0DE4FE0];
    v11 = MEMORY[0x1E0DE4FE0] + 64;
    v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v56[0] = MEMORY[0x1E0DE4FE0] + 64;
    v51 = v13;
    *(_QWORD *)((char *)&v52[-1] + *(_QWORD *)(v13 - 24)) = v14;
    v15 = (std::ios_base *)((char *)&v52[-1] + *(_QWORD *)(v51 - 24));
    std::ios_base::init(v15, v52);
    v15[1].__vftable = 0;
    v15[1].__fmtflags_ = -1;
    v51 = v10 + 24;
    v56[0] = v11;
    std::streambuf::basic_streambuf();
    v16 = MEMORY[0x1E0DE4FB8];
    v52[0] = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v54 = 0u;
    v55 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v51, (uint64_t)"mDataSource failed", 18);
    std::stringbuf::str[abi:fe180100]((uint64_t)v52, &__what_arg);
    v51 = *v12;
    *(_QWORD *)((char *)&v52[-1] + *(_QWORD *)(v51 - 24)) = v12[3];
    v52[0] = v16 + 16;
    if (SBYTE7(v54) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v56);
    *(_QWORD *)&v57.__val_ = a3;
    v57.__cat_ = a4;
    std::system_error::system_error(&v38, v57, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v40 = 0;
    v41 = 0;
    v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v39 = &v40;
    v17 = operator new();
    v18 = std::runtime_error::runtime_error((std::runtime_error *)v17, &v32);
    v18[1] = v33;
    v18->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v19 = v35;
    v18[2].__vftable = (std::runtime_error_vtbl *)v34;
    v18[2].__imp_.__imp_ = (const char *)v19;
    p_imp = &v18[2].__imp_;
    v21 = v36;
    v18[3].__vftable = v36;
    if (v21)
    {
      *((_QWORD *)v19 + 2) = p_imp;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      *(_QWORD *)(v17 + 32) = p_imp;
    }
    *(_OWORD *)(v17 + 56) = v37;
    v37 = 0uLL;
    *(_QWORD *)&v42 = v17;
    v22 = (_QWORD *)operator new();
    *v22 = &off_1E2523B58;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v17;
    *((_QWORD *)&v42 + 1) = v22;
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v38);
    *((_OWORD *)v4 + 1) = v38.__ec_;
    *(_QWORD *)v4 = off_1E2521330;
    v23 = v40;
    *((_QWORD *)v4 + 4) = v39;
    *((_QWORD *)v4 + 5) = v23;
    v24 = v4 + 40;
    v25 = v41;
    *((_QWORD *)v4 + 6) = v41;
    if (v25)
    {
      *(_QWORD *)(v23 + 16) = v24;
      v23 = 0;
      v39 = &v40;
      v40 = 0;
      v41 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v24;
    }
    *(_OWORD *)(v4 + 56) = v42;
    v42 = 0uLL;
    v4[72] = 1;
    v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, (unsigned int *)v23);
    MEMORY[0x18D7898AC](&v38);
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v35);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v32);
    if (v49)
    {
      v43.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v45, v46);
      return (_BYTE *)MEMORY[0x18D7898AC](&v43);
    }
  }
  return result;
}

void sub_18CC03468(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;

  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v43, a24);
  MEMORY[0x18D7898AC](&a19);
  AMSCore::Error::~Error((AMSCore::Error *)&a10);
}

void sub_18CC034B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

void sub_18CC034C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostream::~ostream();
  MEMORY[0x18D789B58](a9);
  __clang_call_terminate(a1);
}

__n128 AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>(uint64_t a1, std::runtime_error *a2)
{
  std::runtime_error *v4;
  std::runtime_error_vtbl *p_imp;
  const char *imp;
  uint64_t v7;
  std::runtime_error_vtbl *v8;
  __n128 result;

  v4 = (std::runtime_error *)(a1 + 8);
  if (*(_BYTE *)(a1 + 88))
  {
    if (!*(_BYTE *)(a1 + 80))
      ((void (*)(uint64_t))v4->~runtime_error)(a1 + 8);
    *(_BYTE *)(a1 + 88) = 0;
  }
  std::runtime_error::runtime_error(v4, a2);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4F90] + 16;
  *(std::runtime_error *)(a1 + 24) = a2[1];
  *(_QWORD *)(a1 + 8) = off_1E2521330;
  *(_QWORD *)(a1 + 40) = a2[2].__vftable;
  p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  imp = a2[2].__imp_.__imp_;
  *(_QWORD *)(a1 + 48) = imp;
  v7 = a1 + 48;
  v8 = a2[3].__vftable;
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
  {
    *((_QWORD *)imp + 2) = v7;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = v7;
  }
  result = *(__n128 *)&a2[3].__imp_.__imp_;
  *(__n128 *)(a1 + 64) = result;
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  return result;
}

void AMSCore::BagNetworkDataSource::update(std::runtime_error *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v8;
  char *v9;
  _OWORD *v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  std::mutex *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void (__cdecl **v20)(std::runtime_error *__hidden);
  int v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  void (__cdecl **v26)(std::runtime_error *__hidden);
  const char *imp;
  uint8x8_t v28;
  void (__cdecl **v29)(std::runtime_error *__hidden);
  unint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  char *v35;
  const char *(__cdecl **p_what)(const std::runtime_error *__hidden);
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  void **v41;
  std::runtime_error_vtbl *v42;
  void **v43;
  std::runtime_error_vtbl *v44;
  void **v45;
  void **v46;
  std::runtime_error *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  int v53;
  unsigned int *v54;
  uint64_t v55;
  __int128 *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::runtime_error_vtbl *v62;
  uint64_t v63;
  char *v64;
  std::runtime_error *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void **v70;
  void **v71;
  void *v72;
  int v73;
  unsigned int *v74;
  uint64_t v75;
  __int128 *v76;
  char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  uint64_t v86;
  void **v87;
  char v88;
  __int128 v89;
  uint64_t v90;
  __int128 *v91;
  char *v92;
  uint64_t v93;
  AMSCore::LoadNetworkBagResult *v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  char *v119;
  size_t v120;
  uint64_t *v121;
  uint64_t *v122;
  char *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  __int128 v144;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  int v168;
  unsigned int *v169;
  uint64_t v170;
  __int128 *v171;
  char *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  _BYTE *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  std::runtime_error *v191;
  _BYTE *v192;
  std::string *v193;
  uint64_t v194;
  void **v195;
  char *v196;
  __int128 v197;
  std::__shared_mutex_base **v198;
  AMSCore::LoadNetworkBagResult *v199;
  char *v200;
  std::mutex *v201;
  uint64_t v202;
  uint64_t v203;
  std::runtime_error *v204;
  std::runtime_error v205;
  __int128 v206;
  __int128 *v207;
  __int128 v208;
  __int128 v209;
  std::runtime_error __p;
  __int128 v211;
  __int128 *v212;
  __int128 v213;
  __int128 v214;
  std::runtime_error_vtbl *v215;
  unsigned __int16 v216;
  std::runtime_error v217;
  __int128 v218;
  __int128 *v219;
  __int128 v220;
  __int128 v221;
  int v222;
  __int128 v223;
  __int128 v224;
  int v225;
  std::runtime_error v226;
  __int128 v227;
  __int128 *v228;
  __int128 v229;
  __int128 v230;
  unsigned __int8 v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
  v8 = (char *)operator new(0x2E8uLL);
  v9 = v8;
  *(_QWORD *)v8 = AMSCore::BagNetworkDataSource::update;
  *((_QWORD *)v8 + 1) = AMSCore::BagNetworkDataSource::update;
  v8[152] = 0;
  v8[176] = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    *(_OWORD *)(v8 + 152) = *(_OWORD *)a3;
    *((_QWORD *)v8 + 21) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v8[176] = 1;
  }
  v199 = (AMSCore::LoadNetworkBagResult *)(v8 + 152);
  v194 = (uint64_t)(v8 + 392);
  v189 = v8 + 696;
  v8[184] = 0;
  v10 = v8 + 184;
  v8[208] = 0;
  if (*(_BYTE *)(a3 + 56))
  {
    *v10 = *(_OWORD *)(a3 + 32);
    *((_QWORD *)v8 + 25) = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v8[208] = 1;
  }
  *((_WORD *)v8 + 120) = *(_WORD *)(a3 + 88);
  v186 = v8 + 568;
  v11 = v8 + 272;
  v191 = (std::runtime_error *)(v8 + 512);
  *(_OWORD *)(v8 + 216) = *(_OWORD *)(a3 + 64);
  v193 = (std::string *)(v8 + 592);
  v195 = (void **)(v8 + 624);
  v198 = (std::__shared_mutex_base **)(v8 + 648);
  v188 = v8 + 664;
  *((_QWORD *)v8 + 29) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v12 = *(_BYTE *)(a3 + 90);
  *(_OWORD *)(v8 + 248) = *(_OWORD *)(a3 + 96);
  v200 = v8 + 248;
  v8[242] = v12;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *((_QWORD *)v8 + 33) = *(_QWORD *)(a3 + 112);
  v190 = *a4;
  v13 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v187 = v13;
  v192 = v8 + 240;
  *((_QWORD *)v8 + 89) = v13;
  do
    v14 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v14 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v8[24] = 0;
  v8[104] = 0;
  *((_QWORD *)v8 + 14) = 0;
  v204 = (std::runtime_error *)(v8 + 24);
  *((_QWORD *)v8 + 18) = 0;
  v196 = v8 + 16;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v217, (uint64_t)(v8 + 16));
  *a1 = v217;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v9 + 18) = 0u;
  *((_DWORD *)v9 + 76) = 1065353216;
  *(_OWORD *)(v9 + 312) = 0u;
  *(_OWORD *)(v9 + 328) = 0u;
  *((_DWORD *)v9 + 86) = 1065353216;
  *((_OWORD *)v9 + 22) = 0u;
  *((_OWORD *)v9 + 23) = 0u;
  *((_DWORD *)v9 + 96) = 1065353216;
  *((_QWORD *)v9 + 81) = a2 + 248;
  v9[656] = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a2 + 248));
  v15 = (std::mutex *)(a2 + 72);
  std::mutex::lock((std::mutex *)(a2 + 72));
  v16 = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a2 + 144);
  std::mutex::unlock((std::mutex *)(a2 + 72));
  v201 = (std::mutex *)(a2 + 72);
  v203 = a2;
  if (v16 == v17)
    goto LABEL_80;
  v18 = *(_QWORD **)(a2 + 416);
  v19 = *(_QWORD **)v200;
  if (!v18[2])
  {
    v217 = (std::runtime_error)0;
    v218 = 0u;
    LODWORD(v219) = 1065353216;
    AMSCore::MapUtils::getKeys<std::map<std::string,AMSCore::Any>>((uint64_t)&v220, v19);
    v223 = 0u;
    v224 = 0u;
    v225 = 1065353216;
    a2 = v203;
    goto LABEL_79;
  }
  if (!v19[2])
  {
    v217 = (std::runtime_error)0;
    v218 = 0u;
    v220 = 0u;
    v221 = 0u;
    LODWORD(v219) = 1065353216;
    v222 = 1065353216;
    AMSCore::MapUtils::getKeys<std::map<std::string,AMSCore::Any>>((uint64_t)&v223, v18);
    a2 = v203;
    goto LABEL_79;
  }
  AMSCore::MapUtils::getKeys<std::map<std::string,AMSCore::Any>>((uint64_t)&v226, *(_QWORD **)v200);
  AMSCore::MapUtils::getKeys<std::map<std::string,AMSCore::Any>>((uint64_t)&__p, v18);
  v20 = (void (__cdecl **)(std::runtime_error *__hidden))v227;
  if ((_QWORD)v227)
  {
    do
    {
      v21 = *((char *)v20 + 39);
      if (v21 >= 0)
        v22 = (uint64_t *)(v20 + 2);
      else
        v22 = (uint64_t *)v20[2];
      if (v21 >= 0)
        v23 = *((unsigned __int8 *)v20 + 39);
      else
        v23 = (unint64_t)v20[3];
      v24 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v22, v23);
      v25 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:fe180100]((uint64_t)&__p, v24, (unsigned __int8 **)v20 + 2);
      v26 = (void (__cdecl **)(std::runtime_error *__hidden))*v20;
      if (v25)
        goto LABEL_15;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove((uint64_t)&v205, &v226, v20);
      v20[1] = (void (__cdecl *)(std::runtime_error *__hidden))v24;
      imp = __p.__imp_.__imp_;
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)__p.__imp_.__imp_);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        if ((const char *)v24 >= __p.__imp_.__imp_)
          v24 %= (unint64_t)__p.__imp_.__imp_;
      }
      else
      {
        v24 &= (unint64_t)(__p.__imp_.__imp_ - 1);
      }
      v29 = (void (__cdecl **)(std::runtime_error *__hidden))*((_QWORD *)&__p.~runtime_error + v24);
      if (v29)
      {
        *v20 = *v29;
      }
      else
      {
        *v20 = (void (__cdecl *)(std::runtime_error *__hidden))v211;
        *(_QWORD *)&v211 = v20;
        *((_QWORD *)&__p.~runtime_error + v24) = &v211;
        if (!*v20)
          goto LABEL_14;
        v30 = *((_QWORD *)*v20 + 1);
        if (v28.u32[0] > 1uLL)
        {
          if (v30 >= (unint64_t)imp)
            v30 %= (unint64_t)imp;
        }
        else
        {
          v30 &= (unint64_t)(imp - 1);
        }
        v29 = &__p.~runtime_error + v30;
      }
      *v29 = (void (__cdecl *)(std::runtime_error *__hidden))v20;
LABEL_14:
      ++*((_QWORD *)&v211 + 1);
LABEL_15:
      v20 = v26;
    }
    while (v26);
  }
  v217 = (std::runtime_error)0;
  v218 = 0u;
  v220 = 0u;
  v221 = 0u;
  LODWORD(v219) = 1065353216;
  v222 = 1065353216;
  v223 = 0u;
  v224 = 0u;
  v225 = 1065353216;
  v31 = (_QWORD *)v211;
  v15 = v201;
  if (!(_QWORD)v211)
    goto LABEL_67;
  v32 = v18 + 1;
  v33 = v19 + 1;
  do
  {
    while (1)
    {
      v34 = v31;
      v31 = (_QWORD *)*v31;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove((uint64_t)&v205, &__p, v34);
      v35 = (char *)v205.__vftable;
      v215 = v205.__vftable;
      HIBYTE(v216) = 1;
      p_what = &v205.what;
      v37 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)v18, (const void **)&v205.what);
      v38 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)v19, (const void **)p_what);
      v39 = v32 != v37 && v33 == v38;
      if (v39)
      {
        if (!v35
          || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(&v223, (uint64_t)v35))
        {
          goto LABEL_37;
        }
        if (v216 <= 0xFFu)
          goto LABEL_370;
        goto LABEL_52;
      }
      if (v33 == v38 || v32 != v37)
        break;
      if (!v35
        || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(&v220, (uint64_t)v35))
      {
        goto LABEL_37;
      }
      v215 = 0;
      if (v216 <= 0xFFu)
        goto LABEL_370;
LABEL_63:
      HIBYTE(v216) = 0;
      if (v35[39] < 0)
LABEL_64:
        operator delete(*p_what);
LABEL_36:
      operator delete(v35);
LABEL_37:
      if (!v31)
        goto LABEL_66;
    }
    if ((AMSCore::operator==((unsigned __int8 *)v37 + 56, (unsigned __int8 *)v38 + 56) & 1) != 0)
    {
      if (!v35)
        goto LABEL_37;
LABEL_52:
      if (v35[39] < 0)
        goto LABEL_64;
      goto LABEL_36;
    }
    if (!v35)
      goto LABEL_37;
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(&v217, (uint64_t)v35))
    {
      v215 = 0;
      if (v216 < 0x100u)
        goto LABEL_370;
      goto LABEL_63;
    }
    HIBYTE(v216) = 0;
  }
  while (v31);
LABEL_66:
  v41 = (void **)v211;
  v10 = v9 + 184;
  v11 = v9 + 272;
  v15 = v201;
  if ((_QWORD)v211)
  {
    do
    {
      v46 = (void **)*v41;
      if (*((char *)v41 + 39) < 0)
        operator delete(v41[2]);
      operator delete(v41);
      v41 = v46;
    }
    while (v46);
  }
LABEL_67:
  v42 = __p.__vftable;
  __p.__vftable = 0;
  if (v42)
    operator delete(v42);
  v43 = (void **)v227;
  a2 = v203;
  if ((_QWORD)v227)
  {
    do
    {
      v45 = (void **)*v43;
      if (*((char *)v43 + 39) < 0)
        operator delete(v43[2]);
      operator delete(v43);
      v43 = v45;
    }
    while (v45);
  }
  v44 = v226.__vftable;
  v226.__vftable = 0;
  if (v44)
    operator delete(v44);
LABEL_79:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v11, (uint64_t *)&v217);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v9 + 312), (uint64_t *)&v220);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)(v9 + 352), (uint64_t *)&v223);
  AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff((uint64_t)&v217);
LABEL_80:
  if (!v9[241])
    goto LABEL_120;
  (*(void (**)(std::runtime_error *__return_ptr))(**(_QWORD **)(a2 + 56) + 32))(&__p);
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v205);
  v226.__vftable = (std::runtime_error_vtbl *)&off_1E2521D38;
  v226.__imp_.__imp_ = (const char *)&__p;
  *(_QWORD *)&v227 = v10;
  *((_QWORD *)&v227 + 1) = &v226;
  (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, const char *, uint64_t, std::runtime_error *))v205.~runtime_error
   + 9))(&v217, v205.__vftable, "AMSStorefrontSuffixes", 21, &v226);
  v47 = (std::runtime_error *)*((_QWORD *)&v227 + 1);
  if (*((std::runtime_error **)&v227 + 1) == &v226)
  {
    v48 = 4;
    v47 = &v226;
LABEL_85:
    (*((void (**)(void))&v47->~runtime_error + v48))();
  }
  else if (*((_QWORD *)&v227 + 1))
  {
    v48 = 5;
    goto LABEL_85;
  }
  v49 = (std::__shared_weak_count *)v205.__imp_.__imp_;
  if (!v205.__imp_.__imp_)
    goto LABEL_90;
  v50 = (unint64_t *)(v205.__imp_.__imp_ + 8);
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    if (SBYTE7(v211) < 0)
LABEL_91:
      operator delete(__p.__vftable);
  }
  else
  {
LABEL_90:
    if (SBYTE7(v211) < 0)
      goto LABEL_91;
  }
  AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v226, (uint64_t)&v217, 203, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
  v52 = v231;
  if (!v231)
  {
    v53 = 0;
    if ((_BYTE)v222)
      goto LABEL_119;
LABEL_96:
    ((void (*)(std::runtime_error *))v217.~runtime_error)(&v217);
    if (v52)
      goto LABEL_344;
LABEL_120:
    if (!v9[242])
      goto LABEL_165;
    *v195 = 0;
    v195[1] = 0;
    v195[2] = 0;
    std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v195, *((_QWORD *)v9 + 27), *((_QWORD *)v9 + 28), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v9 + 28) - *((_QWORD *)v9 + 27)) >> 3));
    AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&__p);
    v62 = __p.__vftable;
    v197 = *((_OWORD *)v9 + 39);
    v63 = *((_QWORD *)v9 + 80);
    *v195 = 0;
    v195[1] = 0;
    v195[2] = 0;
    *((_QWORD *)&v227 + 1) = 0;
    v64 = (char *)operator new(0x28uLL);
    *(_QWORD *)v64 = off_1E2521DE8;
    *(_OWORD *)(v64 + 8) = v197;
    *((_QWORD *)v64 + 3) = v63;
    *((_QWORD *)v64 + 4) = a2 + 8;
    *((_QWORD *)&v227 + 1) = v64;
    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, const char *, uint64_t, std::runtime_error *))v62->~runtime_error
     + 9))(&v217, v62, "AMSBagURLCookies", 16, &v226);
    v65 = (std::runtime_error *)*((_QWORD *)&v227 + 1);
    if (*((std::runtime_error **)&v227 + 1) == &v226)
    {
      v66 = 4;
      v65 = &v226;
    }
    else
    {
      if (!*((_QWORD *)&v227 + 1))
      {
LABEL_126:
        v67 = (std::__shared_weak_count *)__p.__imp_.__imp_;
        if (__p.__imp_.__imp_)
        {
          v68 = (unint64_t *)(__p.__imp_.__imp_ + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v70 = (void **)*v195;
        if (*v195)
        {
          v71 = (void **)*((_QWORD *)v9 + 79);
          v72 = *v195;
          if (v71 != v70)
          {
            do
            {
              if (*((char *)v71 - 1) < 0)
                operator delete(*(v71 - 3));
              v71 -= 3;
            }
            while (v71 != v70);
            v72 = *v195;
          }
          *((_QWORD *)v9 + 79) = v70;
          operator delete(v72);
        }
        AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v226, (uint64_t)&v217, 203, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
        v73 = v231;
        if (v231)
        {
          std::runtime_error::runtime_error(&__p, &v226);
          v211 = v227;
          __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v212 = v228;
          v213 = v229;
          if (*((_QWORD *)&v229 + 1))
          {
            *(_QWORD *)(v229 + 16) = &v213;
            v228 = &v229;
            v229 = 0uLL;
          }
          else
          {
            v212 = &v213;
          }
          v214 = v230;
          v230 = 0uLL;
          std::runtime_error::runtime_error(&v205, &__p);
          v206 = v211;
          v205.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v74 = (unsigned int *)v213;
          v207 = v212;
          v208 = v213;
          if (*((_QWORD *)&v213 + 1))
          {
            *(_QWORD *)(v213 + 16) = &v208;
            v74 = 0;
            v212 = &v213;
            v213 = 0uLL;
          }
          else
          {
            v207 = &v208;
          }
          v209 = v214;
          v214 = 0uLL;
          __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v212, v74);
          MEMORY[0x18D7898AC](&__p);
          v15 = v201;
          if (v9[104])
          {
            if (!v9[96])
              ((void (*)(std::runtime_error *))v204->~runtime_error)(v204);
            v9[104] = 0;
          }
          std::runtime_error::runtime_error(v204, &v205);
          v76 = v207;
          v75 = v208;
          *((_QWORD *)v9 + 8) = v208;
          v77 = v9 + 64;
          *(_OWORD *)(v9 + 40) = v206;
          *((_QWORD *)v9 + 3) = off_1E2521330;
          *((_QWORD *)v9 + 7) = v76;
          v78 = *((_QWORD *)&v208 + 1);
          *((_QWORD *)v9 + 9) = *((_QWORD *)&v208 + 1);
          if (v78)
          {
            *(_QWORD *)(v75 + 16) = v77;
            v75 = 0;
            v207 = &v208;
            v208 = 0uLL;
          }
          else
          {
            *((_QWORD *)v9 + 7) = v77;
          }
          a2 = v203;
          *((_OWORD *)v9 + 5) = v209;
          v209 = 0uLL;
          v9[96] = 0;
          v9[104] = 1;
          v205.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v207, (unsigned int *)v75);
          MEMORY[0x18D7898AC](&v205);
          if (v231)
          {
            v226.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v79 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
            if (*((_QWORD *)&v230 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v228, (unsigned int *)v229);
            MEMORY[0x18D7898AC](&v226);
          }
          v53 = 3;
          if ((_BYTE)v222)
          {
LABEL_164:
            if (v73)
              goto LABEL_344;
LABEL_165:
            v82 = *(_OWORD *)v200;
            *(_QWORD *)v200 = 0;
            *((_QWORD *)v200 + 1) = 0;
            v83 = *(std::__shared_weak_count **)(a2 + 424);
            *(_OWORD *)(a2 + 416) = v82;
            if (v83)
            {
              p_shared_owners = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldaxr(p_shared_owners);
              while (__stlxr(v85 - 1, p_shared_owners));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            v86 = *((_QWORD *)v9 + 33);
            if (!*(_BYTE *)(a2 + 464))
              *(_BYTE *)(a2 + 464) = 1;
            *(_QWORD *)(a2 + 456) = v86;
            if (!v9[176])
            {
              AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[24]>((uint64_t)&v217, 0xCBu, "Storefront not present.");
              if (v9[104])
              {
                if (!v9[96])
                  ((void (*)(std::runtime_error *))v204->~runtime_error)(v204);
                v9[104] = 0;
              }
              std::runtime_error::runtime_error(v204, &v217);
              v89 = v218;
              v91 = v219;
              v90 = v220;
              *((_QWORD *)v9 + 8) = v220;
              v92 = v9 + 64;
              *(_OWORD *)(v9 + 40) = v89;
              *((_QWORD *)v9 + 3) = off_1E2521330;
              *((_QWORD *)v9 + 7) = v91;
              v93 = *((_QWORD *)&v220 + 1);
              *((_QWORD *)v9 + 9) = *((_QWORD *)&v220 + 1);
              if (v93)
              {
                *(_QWORD *)(v90 + 16) = v92;
                v219 = &v220;
                v220 = 0uLL;
                v90 = 0;
              }
              else
              {
                *((_QWORD *)v9 + 7) = v92;
              }
              *((_OWORD *)v9 + 5) = v221;
              v221 = 0uLL;
              v9[96] = 0;
              v9[104] = 1;
              v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v219, (unsigned int *)v90);
              MEMORY[0x18D7898AC](&v217);
              goto LABEL_343;
            }
            v87 = (void **)(a2 + 600);
            if ((AMSCore::LoadNetworkBagResult *)(a2 + 600) != v199)
            {
              v88 = v9[175];
              if (*(char *)(a2 + 623) < 0)
              {
                if (v88 >= 0)
                  v94 = v199;
                else
                  v94 = (AMSCore::LoadNetworkBagResult *)*((_QWORD *)v9 + 19);
                if (v88 >= 0)
                  v95 = v9[175];
                else
                  v95 = *((_QWORD *)v9 + 20);
                std::string::__assign_no_alias<false>(v87, v94, v95);
              }
              else if (v9[175] < 0)
              {
                std::string::__assign_no_alias<true>(v87, *((void **)v9 + 19), *((_QWORD *)v9 + 20));
              }
              else
              {
                *(_OWORD *)v87 = *(_OWORD *)v199;
                *(_QWORD *)(a2 + 616) = *((_QWORD *)v199 + 2);
              }
            }
            if (v9[656])
            {
              std::__shared_mutex_base::unlock(*v198);
              v9[656] = 0;
              v96 = *((_QWORD *)v9 + 37);
              v97 = *((_QWORD *)v9 + 42);
              if (v96 || v97 || *((_QWORD *)v9 + 47))
              {
                v98 = *((_QWORD *)v9 + 34);
                v99 = *((_QWORD *)v9 + 35);
                *((_QWORD *)v9 + 34) = 0;
                *((_QWORD *)v9 + 35) = 0;
                *((_QWORD *)v9 + 49) = v98;
                *((_QWORD *)v9 + 50) = v99;
                v100 = *((_QWORD *)v9 + 36);
                *((_QWORD *)v9 + 51) = v100;
                *((_QWORD *)v9 + 52) = v96;
                *((_DWORD *)v9 + 106) = *((_DWORD *)v9 + 76);
                if (v96)
                {
                  v101 = *(_QWORD *)(v100 + 8);
                  if ((v99 & (v99 - 1)) != 0)
                  {
                    if (v101 >= v99)
                      v101 %= v99;
                  }
                  else
                  {
                    v101 &= v99 - 1;
                  }
                  *(_QWORD *)(v98 + 8 * v101) = v9 + 408;
                  *((_QWORD *)v9 + 36) = 0;
                  *((_QWORD *)v9 + 37) = 0;
                  v97 = *((_QWORD *)v9 + 42);
                }
                v102 = *((_QWORD *)v9 + 39);
                v103 = *((_QWORD *)v9 + 40);
                *((_QWORD *)v9 + 39) = 0;
                *((_QWORD *)v9 + 40) = 0;
                *((_QWORD *)v9 + 54) = v102;
                *((_QWORD *)v9 + 55) = v103;
                v104 = *((_QWORD *)v9 + 41);
                *((_QWORD *)v9 + 56) = v104;
                *((_QWORD *)v9 + 57) = v97;
                *((_DWORD *)v9 + 116) = *((_DWORD *)v9 + 86);
                if (v97)
                {
                  v105 = *(_QWORD *)(v104 + 8);
                  if ((v103 & (v103 - 1)) != 0)
                  {
                    if (v105 >= v103)
                      v105 %= v103;
                  }
                  else
                  {
                    v105 &= v103 - 1;
                  }
                  *(_QWORD *)(v102 + 8 * v105) = v9 + 448;
                  *((_QWORD *)v9 + 41) = 0;
                  *((_QWORD *)v9 + 42) = 0;
                }
                v106 = *((_QWORD *)v9 + 44);
                v107 = *((_QWORD *)v9 + 45);
                *((_QWORD *)v9 + 44) = 0;
                *((_QWORD *)v9 + 45) = 0;
                *((_QWORD *)v9 + 59) = v106;
                *((_QWORD *)v9 + 60) = v107;
                v109 = *((_QWORD *)v9 + 46);
                v108 = *((_QWORD *)v9 + 47);
                *((_QWORD *)v9 + 61) = v109;
                *((_QWORD *)v9 + 62) = v108;
                *((_DWORD *)v9 + 126) = *((_DWORD *)v9 + 96);
                if (v108)
                {
                  v110 = *(_QWORD *)(v109 + 8);
                  if ((v107 & (v107 - 1)) != 0)
                  {
                    if (v110 >= v107)
                      v110 %= v107;
                  }
                  else
                  {
                    v110 &= v107 - 1;
                  }
                  *(_QWORD *)(v106 + 8 * v110) = v9 + 488;
                  *((_QWORD *)v9 + 46) = 0;
                  *((_QWORD *)v9 + 47) = 0;
                }
                std::mutex::lock(v15);
                v112 = *(char **)(a2 + 136);
                v111 = *(char **)(a2 + 144);
                if (v112 == v111)
                {
LABEL_249:
                  std::mutex::unlock(v15);
                }
                else
                {
                  v113 = *(char **)(a2 + 136);
                  while (1)
                  {
                    v114 = *((_QWORD *)v113 + 1);
                    if (!v114 || *(_QWORD *)(v114 + 8) == -1)
                      break;
                    v113 += 16;
                    if (v113 == v111)
                    {
                      v15 = v201;
                      goto LABEL_238;
                    }
                  }
                  if (v113 != v111)
                  {
                    v115 = v113 + 16;
                    if (v113 + 16 != v111)
                    {
                      do
                      {
                        v116 = *((_QWORD *)v115 + 1);
                        if (v116 && *(_QWORD *)(v116 + 8) != -1)
                        {
                          v117 = *(_QWORD *)v115;
                          *(_QWORD *)v115 = 0;
                          *((_QWORD *)v115 + 1) = 0;
                          v118 = (std::__shared_weak_count *)*((_QWORD *)v113 + 1);
                          *(_QWORD *)v113 = v117;
                          *((_QWORD *)v113 + 1) = v116;
                          if (v118)
                            std::__shared_weak_count::__release_weak(v118);
                          v113 += 16;
                        }
                        v115 += 16;
                      }
                      while (v115 != v111);
                      v111 = *(char **)(a2 + 144);
                    }
                  }
                  if (v111 < v113)
                    goto LABEL_370;
                  if (v113 == v111)
                  {
                    v112 = *(char **)(a2 + 136);
                    v15 = v201;
                  }
                  else
                  {
                    v119 = v111;
                    v111 = v113;
                    v39 = v119 == v113;
                    v15 = v201;
                    if (!v39)
                    {
                      do
                      {
                        v127 = (std::__shared_weak_count *)*((_QWORD *)v119 - 1);
                        if (v127)
                          std::__shared_weak_count::__release_weak(v127);
                        v119 -= 16;
                      }
                      while (v119 != v111);
                    }
                    *(_QWORD *)(a2 + 144) = v111;
                    v112 = *(char **)(a2 + 136);
                  }
LABEL_238:
                  v120 = v111 - v112;
                  if (v111 == v112)
                    goto LABEL_249;
                  if ((v120 & 0x8000000000000000) != 0)
                    std::vector<std::string>::__throw_length_error[abi:fe180100]();
                  v121 = (uint64_t *)operator new(v120);
                  v122 = v121;
                  v123 = (char *)v121;
                  do
                  {
                    *(_QWORD *)v123 = *(_QWORD *)v112;
                    v124 = *((_QWORD *)v112 + 1);
                    *((_QWORD *)v123 + 1) = v124;
                    if (v124)
                    {
                      v125 = (unint64_t *)(v124 + 16);
                      do
                        v126 = __ldxr(v125);
                      while (__stxr(v126 + 1, v125));
                    }
                    v112 += 16;
                    v123 += 16;
                  }
                  while (v112 != v111);
                  v128 = v123 - (char *)v121;
                  v129 = (v123 - (char *)v121) & 0xFFFFFFFFFFFFFFF0;
                  std::mutex::unlock(v15);
                  if (v129)
                  {
                    v185 = v11;
                    v202 = v128 >> 4;
                    v130 = (uint64_t *)((char *)v122 + v129);
                    v131 = v122;
                    do
                    {
                      v132 = (std::__shared_weak_count *)v131[1];
                      if (v132)
                      {
                        v133 = std::__shared_weak_count::lock(v132);
                        if (v133)
                        {
                          v134 = v133;
                          v135 = *v131;
                          if (*v131)
                          {
                            std::unordered_set<std::string>::unordered_set((uint64_t)&v217, v194);
                            std::unordered_set<std::string>::unordered_set((uint64_t)&v220, (uint64_t)(v9 + 432));
                            std::unordered_set<std::string>::unordered_set((uint64_t)&v223, (uint64_t)(v9 + 472));
                            v136 = *(_QWORD *)(v135 + 24);
                            if (!v136)
                              std::__throw_bad_function_call[abi:fe180100]();
                            (*(void (**)(uint64_t, std::runtime_error *))(*(_QWORD *)v136 + 48))(v136, &v217);
                            AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff((uint64_t)&v217);
                          }
                          v137 = (unint64_t *)&v134->__shared_owners_;
                          do
                            v138 = __ldaxr(v137);
                          while (__stlxr(v138 - 1, v137));
                          if (!v138)
                          {
                            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                            std::__shared_weak_count::__release_weak(v134);
                          }
                        }
                      }
                      v131 += 2;
                    }
                    while (v131 != v130);
                    v39 = v122 == v130;
                    v11 = v185;
                    a2 = v203;
                    if (!v39)
                    {
                      v139 = 2 * v202;
                      do
                      {
                        v140 = (std::__shared_weak_count *)v122[v139 - 1];
                        if (v140)
                          std::__shared_weak_count::__release_weak(v140);
                        v139 -= 2;
                      }
                      while (v139 * 8);
                    }
                  }
                  operator delete(v122);
                }
                AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff(v194);
              }
              if (!*v192)
              {
LABEL_339:
                if (v9[104] && !v9[96])
                  ((void (*)(std::runtime_error *))v204->~runtime_error)(v204);
                v9[96] = 1;
                v9[104] = 1;
LABEL_343:
                v53 = 3;
                goto LABEL_344;
              }
              v9[592] = 0;
              v9[616] = 0;
              if (v9[176])
              {
                if (v9[175] < 0)
                {
                  std::string::__init_copy_ctor_external(v193, *((const std::string::value_type **)v9 + 19), *((_QWORD *)v9 + 20));
                }
                else
                {
                  *(_OWORD *)&v193->__r_.__value_.__l.__data_ = *(_OWORD *)v199;
                  v193->__r_.__value_.__r.__words[2] = *((_QWORD *)v199 + 2);
                }
                v9[616] = 1;
              }
              (*(void (**)(std::runtime_error *__return_ptr))(**(_QWORD **)(a2 + 56) + 16))(&v217);
              (*(void (**)(uint64_t, std::string *, std::runtime_error *))(*(_QWORD *)v190 + 160))(v190, v193, &v217);
              if (SBYTE7(v218) < 0)
                operator delete(v217.__vftable);
              if (v9[616] && v9[615] < 0)
                operator delete(v193->__r_.__value_.__l.__data_);
              AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault((_QWORD *)v9 + 85);
              v141 = *((_QWORD *)v9 + 85);
              *((_QWORD *)v9 + 87) = v190;
              *((_QWORD *)v9 + 88) = v187;
              if (v187)
              {
                v142 = (unint64_t *)(v187 + 8);
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              (*(void (**)(uint64_t, char *))(*(_QWORD *)v141 + 88))(v141, v189);
              v144 = *(_OWORD *)v188;
              *((_OWORD *)v9 + 45) = *(_OWORD *)v188;
              *(_QWORD *)v188 = 0;
              *((_QWORD *)v188 + 1) = 0;
              if (!atomic_load((unint64_t *)(v144 + 96)))
              {
                v186[168] = 0;
                v146 = (unint64_t *)(*((_QWORD *)v9 + 90) + 96);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr((unint64_t)v9, v146));
                if (!v147)
                  return;
              }
              v148 = *((_QWORD *)v9 + 90);
              if (*(_BYTE *)(v148 + 88))
              {
                v149 = *(_BYTE *)(v148 + 80);
                if (!v149)
                {
                  std::runtime_error::runtime_error(v191, (const std::runtime_error *)(v148 + 8));
                  *((_OWORD *)v9 + 33) = *(_OWORD *)(v148 + 24);
                  *((_QWORD *)v9 + 64) = off_1E2521330;
                  v150 = (_QWORD *)(v148 + 48);
                  v151 = *(_QWORD *)(v148 + 48);
                  *((_QWORD *)v9 + 68) = *(_QWORD *)(v148 + 40);
                  v152 = v9 + 552;
                  *((_QWORD *)v9 + 69) = v151;
                  v153 = *(_QWORD *)(v148 + 56);
                  *((_QWORD *)v9 + 70) = v153;
                  if (v153)
                  {
                    *(_QWORD *)(v151 + 16) = v152;
                    *(_QWORD *)(v148 + 40) = v150;
                    *v150 = 0;
                    *(_QWORD *)(v148 + 56) = 0;
                  }
                  else
                  {
                    *((_QWORD *)v9 + 68) = v152;
                  }
                  v154 = *((_QWORD *)v9 + 90);
                  *(_OWORD *)v186 = *(_OWORD *)(v154 + 64);
                  *(_QWORD *)(v154 + 64) = 0;
                  *(_QWORD *)(v154 + 72) = 0;
                }
                v9[584] = v149;
                v155 = *((_QWORD *)v9 + 91);
                if (v155)
                {
                  v156 = (unint64_t *)(v155 + 8);
                  do
                    v157 = __ldaxr(v156);
                  while (__stlxr(v157 - 1, v156));
                  if (!v157)
                  {
                    v158 = (std::__shared_weak_count *)*((_QWORD *)v9 + 91);
                    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                    std::__shared_weak_count::__release_weak(v158);
                  }
                }
                v159 = (std::__shared_weak_count *)*((_QWORD *)v9 + 84);
                if (v159)
                {
                  v160 = (unint64_t *)&v159->__shared_owners_;
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                    std::__shared_weak_count::__release_weak(v159);
                  }
                }
                v162 = (std::__shared_weak_count *)*((_QWORD *)v9 + 88);
                if (v162)
                {
                  v163 = (unint64_t *)&v162->__shared_owners_;
                  do
                    v164 = __ldaxr(v163);
                  while (__stlxr(v164 - 1, v163));
                  if (!v164)
                  {
                    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                    std::__shared_weak_count::__release_weak(v162);
                  }
                }
                v165 = (std::__shared_weak_count *)*((_QWORD *)v9 + 86);
                if (v165)
                {
                  v166 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v167 = __ldaxr(v166);
                  while (__stlxr(v167 - 1, v166));
                  if (!v167)
                  {
                    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                    std::__shared_weak_count::__release_weak(v165);
                  }
                }
                AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v217, (uint64_t)v191, 203, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
                v168 = v222;
                if ((_BYTE)v222)
                {
                  std::runtime_error::runtime_error(&v226, &v217);
                  v227 = v218;
                  v226.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  v228 = v219;
                  v229 = v220;
                  if (*((_QWORD *)&v220 + 1))
                  {
                    *(_QWORD *)(v220 + 16) = &v229;
                    v219 = &v220;
                    v220 = 0uLL;
                  }
                  else
                  {
                    v228 = &v229;
                  }
                  v230 = v221;
                  v221 = 0uLL;
                  std::runtime_error::runtime_error(&__p, &v226);
                  v211 = v227;
                  __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  v169 = (unsigned int *)v229;
                  v212 = v228;
                  v213 = v229;
                  if (*((_QWORD *)&v229 + 1))
                  {
                    *(_QWORD *)(v229 + 16) = &v213;
                    v169 = 0;
                    v228 = &v229;
                    v229 = 0uLL;
                  }
                  else
                  {
                    v212 = &v213;
                  }
                  v214 = v230;
                  v230 = 0uLL;
                  v226.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v228, v169);
                  MEMORY[0x18D7898AC](&v226);
                  if (v9[104])
                  {
                    if (!v9[96])
                      ((void (*)(std::runtime_error *))v204->~runtime_error)(v204);
                    v9[104] = 0;
                  }
                  std::runtime_error::runtime_error(v204, &__p);
                  v171 = v212;
                  v170 = v213;
                  *((_QWORD *)v9 + 8) = v213;
                  v172 = v9 + 64;
                  *(_OWORD *)(v9 + 40) = v211;
                  *((_QWORD *)v9 + 3) = off_1E2521330;
                  *((_QWORD *)v9 + 7) = v171;
                  v173 = *((_QWORD *)&v213 + 1);
                  *((_QWORD *)v9 + 9) = *((_QWORD *)&v213 + 1);
                  if (v173)
                  {
                    *(_QWORD *)(v170 + 16) = v172;
                    v170 = 0;
                    v212 = &v213;
                    v213 = 0uLL;
                  }
                  else
                  {
                    *((_QWORD *)v9 + 7) = v172;
                  }
                  *((_OWORD *)v9 + 5) = v214;
                  v214 = 0uLL;
                  v9[96] = 0;
                  v9[104] = 1;
                  __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v212, (unsigned int *)v170);
                  MEMORY[0x18D7898AC](&__p);
                  if ((_BYTE)v222)
                  {
                    v217.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                    v174 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
                    if (*((_QWORD *)&v221 + 1))
                    {
                      v175 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
                      do
                        v176 = __ldaxr(v175);
                      while (__stlxr(v176 - 1, v175));
                      if (!v176)
                      {
                        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                        std::__shared_weak_count::__release_weak(v174);
                      }
                    }
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v219, (unsigned int *)v220);
                    MEMORY[0x18D7898AC](&v217);
                  }
                  v53 = 3;
                  if (v9[584])
                  {
LABEL_338:
                    if (v168)
                      goto LABEL_344;
                    goto LABEL_339;
                  }
                }
                else
                {
                  v53 = 0;
                  if (v9[584])
                    goto LABEL_338;
                }
                ((void (*)(std::runtime_error *))v191->~runtime_error)(v191);
                goto LABEL_338;
              }
            }
            else
            {
              std::__throw_system_error(1, "unique_lock::unlock: not locked");
            }
LABEL_370:
            __break(1u);
            return;
          }
        }
        else
        {
          v53 = 0;
          if ((_BYTE)v222)
            goto LABEL_164;
        }
        ((void (*)(std::runtime_error *))v217.~runtime_error)(&v217);
        if (v73)
          goto LABEL_344;
        goto LABEL_165;
      }
      v66 = 5;
    }
    (*((void (**)(void))&v65->~runtime_error + v66))();
    goto LABEL_126;
  }
  std::runtime_error::runtime_error(&__p, &v226);
  v211 = v227;
  __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v212 = v228;
  v213 = v229;
  if (*((_QWORD *)&v229 + 1))
  {
    *(_QWORD *)(v229 + 16) = &v213;
    v228 = &v229;
    v229 = 0uLL;
  }
  else
  {
    v212 = &v213;
  }
  v214 = v230;
  v230 = 0uLL;
  std::runtime_error::runtime_error(&v205, &__p);
  v206 = v211;
  v205.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v54 = (unsigned int *)v213;
  v207 = v212;
  v208 = v213;
  if (*((_QWORD *)&v213 + 1))
  {
    *(_QWORD *)(v213 + 16) = &v208;
    v54 = 0;
    v212 = &v213;
    v213 = 0uLL;
  }
  else
  {
    v207 = &v208;
  }
  v209 = v214;
  v214 = 0uLL;
  __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v212, v54);
  MEMORY[0x18D7898AC](&__p);
  v15 = v201;
  if (v9[104])
  {
    if (!v9[96])
      ((void (*)(std::runtime_error *))v204->~runtime_error)(v204);
    v9[104] = 0;
  }
  std::runtime_error::runtime_error(v204, &v205);
  v56 = v207;
  v55 = v208;
  *((_QWORD *)v9 + 8) = v208;
  v57 = v9 + 64;
  *(_OWORD *)(v9 + 40) = v206;
  *((_QWORD *)v9 + 3) = off_1E2521330;
  *((_QWORD *)v9 + 7) = v56;
  v58 = *((_QWORD *)&v208 + 1);
  *((_QWORD *)v9 + 9) = *((_QWORD *)&v208 + 1);
  if (v58)
  {
    *(_QWORD *)(v55 + 16) = v57;
    v55 = 0;
    v207 = &v208;
    v208 = 0uLL;
  }
  else
  {
    *((_QWORD *)v9 + 7) = v57;
  }
  a2 = v203;
  *((_OWORD *)v9 + 5) = v209;
  v209 = 0uLL;
  v9[96] = 0;
  v9[104] = 1;
  v205.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v207, (unsigned int *)v55);
  MEMORY[0x18D7898AC](&v205);
  if (v231)
  {
    v226.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
    if (*((_QWORD *)&v230 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v228, (unsigned int *)v229);
    MEMORY[0x18D7898AC](&v226);
  }
  v53 = 3;
  if (!(_BYTE)v222)
    goto LABEL_96;
LABEL_119:
  if (!v52)
    goto LABEL_120;
LABEL_344:
  if (v9[656])
    std::__shared_mutex_base::unlock(*v198);
  AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff((uint64_t)v11);
  if (v53 == 3)
  {
    *((_QWORD *)v9 + 34) = v196;
    *(_QWORD *)v9 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v11);
    return;
  }
  v177 = (char *)*((_QWORD *)v9 + 18);
  if (v177 == v9 + 120)
  {
    v178 = 4;
    v177 = v9 + 120;
LABEL_352:
    (*(void (**)(void))(*(_QWORD *)v177 + 8 * v178))();
  }
  else if (v177)
  {
    v178 = 5;
    goto LABEL_352;
  }
  if (v9[104] && !v9[96])
    ((void (*)(std::runtime_error *))v204->~runtime_error)(v204);
  v179 = *((_QWORD *)v9 + 89);
  do
  {
    v180 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v181 = v180 - 1;
  }
  while (__stlxr(v181, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v181)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v179)
  {
    v182 = (unint64_t *)(*((_QWORD *)v9 + 89) + 8);
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      v184 = (std::__shared_weak_count *)*((_QWORD *)v9 + 89);
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v199);
  operator delete(v9);
}

void sub_18CC04F18(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;

  if (a2)
  {
    if (*(_BYTE *)(v27 + 616))
    {
      if (*(char *)(v27 + 615) < 0)
        operator delete(*a20);
    }
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:fe180100](a27);
    AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff(v28);
    __cxa_begin_catch(a1);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(a1);
}

void AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(AMSCore::LoadNetworkBagResult *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void **)*((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    v5 = (void **)*((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_13;
  }
  v6 = (void **)*((_QWORD *)this + 9);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v5);
    v7 = (void **)*((_QWORD *)this + 8);
  }
  *((_QWORD *)this + 9) = v5;
  operator delete(v7);
LABEL_13:
  if (*((_BYTE *)this + 56) && *((char *)this + 55) < 0)
  {
    operator delete(*((void **)this + 4));
    if (!*((_BYTE *)this + 24))
      return;
  }
  else if (!*((_BYTE *)this + 24))
  {
    return;
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void AMSCore::BagNetworkDataSource::update(char *a1)
{
  uint64_t v1;
  void (***v3)(_QWORD);
  char v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_mutex_base **v25;
  int v26;
  int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int **v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  std::runtime_error v44;
  __int128 v45;
  unsigned int **v46;
  unsigned int *v47;
  uint64_t v48;
  __int128 v49;
  std::runtime_error v50;
  __int128 v51;
  unsigned int **v52;
  unsigned int *v53;
  uint64_t v54;
  __int128 v55;
  unsigned __int8 v56;
  std::runtime_error v57;
  __int128 v58;
  unsigned int **v59;
  unsigned int *v60;
  uint64_t v61;
  __int128 v62;

  v1 = *((_QWORD *)a1 + 90);
  if (!*(_BYTE *)(v1 + 88))
  {
    __break(1u);
    return;
  }
  v3 = (void (***)(_QWORD))(a1 + 512);
  v4 = *(_BYTE *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)a1 + 32, (const std::runtime_error *)(v1 + 8));
    *((_OWORD *)a1 + 33) = *(_OWORD *)(v1 + 24);
    *((_QWORD *)a1 + 64) = off_1E2521330;
    v5 = (_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)a1 + 68) = *(_QWORD *)(v1 + 40);
    v7 = a1 + 552;
    *((_QWORD *)a1 + 69) = v6;
    v8 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)a1 + 70) = v8;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v1 + 40) = v5;
      *v5 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)a1 + 68) = v7;
    }
    v9 = *((_QWORD *)a1 + 90);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(v9 + 64);
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = 0;
  }
  a1[584] = v4;
  v10 = *((_QWORD *)a1 + 91);
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)a1 + 91);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 84);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 88);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = a1 + 272;
  v21 = a1 + 16;
  v22 = (std::__shared_weak_count *)*((_QWORD *)a1 + 86);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_mutex_base **)(a1 + 648);
  AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&v50, (uint64_t)v3, 203, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
  v26 = v56;
  if (!v56)
  {
    v27 = 0;
    if (a1[584])
      goto LABEL_51;
    goto LABEL_50;
  }
  std::runtime_error::runtime_error(&v44, &v50);
  v45 = v51;
  v44.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v46 = v52;
  v47 = v53;
  v48 = v54;
  if (v54)
  {
    *((_QWORD *)v53 + 2) = &v47;
    v52 = &v53;
    v53 = 0;
    v54 = 0;
  }
  else
  {
    v46 = &v47;
  }
  v49 = v55;
  v55 = 0uLL;
  std::runtime_error::runtime_error(&v57, &v44);
  v58 = v45;
  v28 = v47;
  v57.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v59 = v46;
  v60 = v47;
  v61 = v48;
  if (v48)
  {
    *((_QWORD *)v47 + 2) = &v60;
    v28 = 0;
    v46 = &v47;
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v59 = &v60;
  }
  v62 = v49;
  v49 = 0uLL;
  v44.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v46, v28);
  MEMORY[0x18D7898AC](&v44);
  if (a1[104])
  {
    if (!a1[96])
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    a1[104] = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v57);
  v30 = v59;
  v29 = v60;
  *((_QWORD *)a1 + 8) = v60;
  v31 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v58;
  *((_QWORD *)a1 + 3) = off_1E2521330;
  *((_QWORD *)a1 + 7) = v30;
  v32 = v61;
  *((_QWORD *)a1 + 9) = v61;
  if (v32)
  {
    *((_QWORD *)v29 + 2) = v31;
    v29 = 0;
    v59 = &v60;
    v60 = 0;
    v61 = 0;
  }
  else
  {
    *((_QWORD *)a1 + 7) = v31;
  }
  v25 = (std::__shared_mutex_base **)(a1 + 648);
  *((_OWORD *)a1 + 5) = v62;
  v62 = 0uLL;
  a1[96] = 0;
  a1[104] = 1;
  v57.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v59, v29);
  MEMORY[0x18D7898AC](&v57);
  if (v56)
  {
    v50.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
    v21 = a1 + 16;
    v20 = a1 + 272;
    if (*((_QWORD *)&v55 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v52, v53);
    MEMORY[0x18D7898AC](&v50);
    v27 = 3;
    if (!a1[584])
      goto LABEL_50;
  }
  else
  {
    v27 = 3;
    v21 = a1 + 16;
    v20 = a1 + 272;
    if (!a1[584])
LABEL_50:
      (**v3)(v3);
  }
LABEL_51:
  if (v26)
  {
    if (!a1[656])
      goto LABEL_59;
LABEL_58:
    std::__shared_mutex_base::unlock(*v25);
    goto LABEL_59;
  }
  if (a1[104] && !a1[96])
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  a1[96] = 1;
  a1[104] = 1;
  v27 = 3;
  if (a1[656])
    goto LABEL_58;
LABEL_59:
  AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff((uint64_t)v20);
  if (v27 == 3)
  {
    *((_QWORD *)a1 + 34) = v21;
    *(_QWORD *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v20);
    return;
  }
  v36 = (char *)*((_QWORD *)a1 + 18);
  if (v36 == a1 + 120)
  {
    v37 = 4;
    v36 = a1 + 120;
  }
  else
  {
    if (!v36)
      goto LABEL_68;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_68:
  if (a1[104] && !a1[96])
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  v38 = *((_QWORD *)a1 + 89);
  do
  {
    v39 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v40)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v38)
  {
    v41 = (unint64_t *)(*((_QWORD *)a1 + 89) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      v43 = (std::__shared_weak_count *)*((_QWORD *)a1 + 89);
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(a1 + 152));
  operator delete(a1);
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;

  if (*(_QWORD *)a1)
  {
    v2 = *((_QWORD *)a1 + 91);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 91);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 84);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 88);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 86);
    if (!v12)
      goto LABEL_21;
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!a1[656])
        goto LABEL_23;
    }
    else
    {
LABEL_21:
      if (!a1[656])
      {
LABEL_23:
        AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff((uint64_t)(a1 + 272));
        goto LABEL_24;
      }
    }
    std::__shared_mutex_base::unlock(*((std::__shared_mutex_base **)a1 + 81));
    goto LABEL_23;
  }
LABEL_24:
  v15 = (char *)*((_QWORD *)a1 + 18);
  if (v15 == a1 + 120)
  {
    v16 = 4;
    v15 = a1 + 120;
    goto LABEL_28;
  }
  if (v15)
  {
    v16 = 5;
LABEL_28:
    (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  }
  if (a1[104] && !a1[96])
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  v17 = *((_QWORD *)a1 + 89);
  do
  {
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v19)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v17)
  {
    v20 = (unint64_t *)(*((_QWORD *)a1 + 89) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      v22 = (std::__shared_weak_count *)*((_QWORD *)a1 + 89);
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(a1 + 152));
  operator delete(a1);
}

void sub_18CC057BC(void *a1)
{
  uint64_t v1;
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(v1 + 584))
    (**v2)(v2);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:fe180100](v4);
  AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff(v3);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC057FC()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC0569CLL);
}

_BYTE *AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  unsigned int **v21;
  unsigned int *v22[2];
  __int128 v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::runtime_error v30;
  __int128 v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  __int128 v35;
  char v36;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v30, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v31 = *(_OWORD *)(a2 + 16);
    v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v32 = *(unsigned int ***)(a2 + 32);
    v33 = (unsigned int *)v9;
    v34 = *(unsigned int **)(a2 + 48);
    if (v34)
    {
      *(_QWORD *)(v9 + 16) = &v33;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v32 = &v33;
    }
    v35 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v36 = 1;
    std::runtime_error::runtime_error(&v19, &v30);
    v20 = v31;
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v21 = v32;
    v22[0] = v33;
    v22[1] = v34;
    if (v34)
    {
      *((_QWORD *)v33 + 2) = v22;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      v21 = v22;
    }
    v23 = v35;
    v35 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v24, (uint64_t)&v19, a3, a4);
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v24);
    *((_OWORD *)v4 + 1) = v25;
    *(_QWORD *)v4 = off_1E2521330;
    v10 = v27;
    *((_QWORD *)v4 + 4) = v26;
    *((_QWORD *)v4 + 5) = v10;
    v11 = v4 + 40;
    v12 = v28;
    *((_QWORD *)v4 + 6) = v28;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
      v10 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11;
    }
    *(_OWORD *)(v4 + 56) = v29;
    v29 = 0uLL;
    v4[72] = 1;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v10);
    MEMORY[0x18D7898AC](&v24);
    v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v19);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      return (_BYTE *)MEMORY[0x18D7898AC](&v30);
    }
  }
  return result;
}

void sub_18CC05C70(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC05C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

uint64_t std::unique_lock<std::shared_mutex>::~unique_lock[abi:fe180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  return a1;
}

void AMSCore::MapUtils::getKeys<std::map<std::string,AMSCore::Any>>(uint64_t a1, _QWORD *a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t v13;
  char *v14;
  void *v15;
  void *__p[2];
  __int128 v17;
  int v18;

  *(_OWORD *)__p = 0u;
  v17 = 0u;
  v3 = 1065353216;
  v18 = 1065353216;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)(v5 + 4), (uint64_t)(v5 + 4));
      v10 = (_QWORD *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v12 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
    }
    while (v11 != v4);
    v9 = __p[0];
    v8 = (unint64_t)__p[1];
    v7 = *((_QWORD *)&v17 + 1);
    v6 = (char *)v17;
    v3 = v18;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = v3;
  if (v7)
  {
    v13 = *((_QWORD *)v6 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v13 >= v8)
        v13 %= v8;
    }
    else
    {
      v13 &= v8 - 1;
    }
    v9[v13] = a1 + 16;
    v17 = 0uLL;
  }
  else if (v6)
  {
    do
    {
      v14 = *(char **)v6;
      if (v6[39] < 0)
        operator delete(*((void **)v6 + 2));
      operator delete(v6);
      v6 = v14;
    }
    while (v14);
  }
  v15 = __p[0];
  __p[0] = 0;
  if (v15)
    operator delete(v15);
}

void sub_18CC05E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_set<std::string>::~unordered_set[abi:fe180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  unint64_t v14;

  v4 = (unsigned __int8 **)(a2 + 16);
  v5 = *(char *)(a2 + 39);
  if (v5 >= 0)
    v6 = (uint64_t *)(a2 + 16);
  else
    v6 = *(uint64_t **)(a2 + 16);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 39);
  else
    v7 = *(_QWORD *)(a2 + 24);
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v6, v7);
  *(v4 - 1) = (unsigned __int8 *)v8;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:fe180100]((uint64_t)a1, v8, v4))
  {
    return 0;
  }
  v10 = (int8x8_t)a1[1];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v10)
      v11 %= *(_QWORD *)&v10;
  }
  else
  {
    v11 &= *(_QWORD *)&v10 - 1;
  }
  v13 = *(_QWORD **)(*a1 + 8 * v11);
  if (v13)
  {
    *(_QWORD *)a2 = *v13;
LABEL_21:
    *v13 = a2;
    goto LABEL_22;
  }
  *(_QWORD *)a2 = a1[2];
  a1[2] = a2;
  *(_QWORD *)(*a1 + 8 * v11) = a1 + 2;
  if (*(_QWORD *)a2)
  {
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v10)
        v14 %= *(_QWORD *)&v10;
    }
    else
    {
      v14 &= *(_QWORD *)&v10 - 1;
    }
    v13 = (_QWORD *)(*a1 + 8 * v14);
    goto LABEL_21;
  }
LABEL_22:
  ++a1[3];
  return 1;
}

_QWORD *std::__basic_node_handle<std::__hash_node<std::string,void *>,std::allocator<std::string>,std::__set_node_handle_specifics>::~__basic_node_handle[abi:fe180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = result;
  v2 = *result;
  if (!*result)
    return v1;
  if (*((_BYTE *)result + 9))
  {
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
    *v1 = 0;
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:fe180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v6.i16[0] = vaddlv_u8(v6);
    v7 = v6.u32[0];
    if (v6.u32[0] > 1uLL)
      v8 = v4 <= a2 ? a2 % v4 : a2;
    else
      v8 = (v4 - 1) & a2;
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *((_BYTE *)a3 + 23);
        if (v11 >= 0)
          v12 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
        else
          v12 = a3[1];
        if (v11 >= 0)
          v13 = (unsigned __int8 *)a3;
        else
          v13 = *a3;
        do
        {
          v14 = v10[1];
          if (v14 == a2)
          {
            v15 = *((unsigned __int8 *)v10 + 39);
            if ((v15 & 0x80u) == 0)
              v16 = (unsigned __int8 *)*((unsigned __int8 *)v10 + 39);
            else
              v16 = (unsigned __int8 *)v10[3];
            if (v16 == v12)
            {
              if ((v15 & 0x80) != 0)
              {
                if (!memcmp((const void *)v10[2], v13, v10[3]))
                  return v10;
              }
              else
              {
                if (!*((_BYTE *)v10 + 39))
                  return v10;
                v17 = 0;
                while (*((unsigned __int8 *)v10 + v17 + 16) == v13[v17])
                {
                  if (v15 == ++v17)
                    return v10;
                }
              }
            }
          }
          else
          {
            if (v7 <= 1)
            {
              v14 &= v4 - 1;
            }
            else if (v14 >= v4)
            {
              v14 %= v4;
            }
            if (v14 != v8)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v4 || (float)(v19 * (float)v4) < v18)
  {
    v20 = 1;
    if (v4 >= 3)
      v20 = (v4 & (v4 - 1)) != 0;
    v21 = v20 | (2 * v4);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v4 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v4)
      goto LABEL_56;
    if (prime < v4)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v4 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v4)
LABEL_56:
        std::__hash_table<std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
  }
  return 0;
}

_BYTE *AMSCore::BagNetworkDataSource::getAccount(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  std::runtime_error_vtbl *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;

  v1 = *((_QWORD *)result + 35);
  if (!*(_BYTE *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = (std::runtime_error *)(result + 152);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 80);
  if (v5)
  {
    v6 = v4->__vftable;
    v4->__vftable = 0;
    v3->__vftable = v6;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), v4);
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
    v7 = (_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 48);
    *((_QWORD *)v2 + 24) = v8;
    v9 = v2 + 192;
    *((_QWORD *)v2 + 19) = off_1E2521330;
    *((_QWORD *)v2 + 23) = *(_QWORD *)(v1 + 40);
    v10 = *(_QWORD *)(v1 + 56);
    *((_QWORD *)v2 + 25) = v10;
    if (v10)
    {
      *(_QWORD *)(v8 + 16) = v9;
      *(_QWORD *)(v1 + 40) = v7;
      *v7 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v2 + 23) = v9;
    }
    v11 = *((_QWORD *)v2 + 35);
    *((_OWORD *)v2 + 13) = *(_OWORD *)(v11 + 64);
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 72) = 0;
  }
  v2[224] = v5;
  std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v2 + 24), v3);
  v12 = *((_QWORD *)v2 + 19);
  if (!v2[224])
  {
    (*(void (**)(std::runtime_error *))v12)(v3);
    v13 = *((_QWORD *)v2 + 36);
    if (!v13)
      goto LABEL_18;
    goto LABEL_14;
  }
  v3->__vftable = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)v2 + 36);
  if (v13)
  {
LABEL_14:
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v2 + 36);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_18:
  v17 = (std::__shared_weak_count *)*((_QWORD *)v2 + 33);
  if (!v17)
    goto LABEL_22;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
LABEL_22:
    if (((char)v2[255] & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if ((char)v2[255] < 0)
LABEL_23:
    operator delete(*((void **)v2 + 29));
LABEL_24:
  v20 = (unint64_t *)(*((_QWORD *)v2 + 34) + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    v22 = (std::__shared_weak_count *)*((_QWORD *)v2 + 34);
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  *((_QWORD *)v2 + 19) = v2 + 16;
  *(_QWORD *)v2 = 0;
  return AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void AMSCore::BagNetworkDataSource::getAccount(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (!*(_QWORD *)__p)
    goto LABEL_17;
  v2 = *((_QWORD *)__p + 36);
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 36);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 33);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((__p[255] & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  if (__p[255] < 0)
LABEL_12:
    operator delete(*((void **)__p + 29));
LABEL_13:
  v9 = (unint64_t *)(*((_QWORD *)__p + 34) + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)__p + 34);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_17:
  v12 = (char *)*((_QWORD *)__p + 18);
  if (v12 == __p + 120)
  {
    v13 = 4;
    v12 = __p + 120;
  }
  else
  {
    if (!v12)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_22:
  if (__p[104])
  {
    if (__p[96])
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)__p + 4);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  do
  {
    v17 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v18)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

std::runtime_error *std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  std::__shared_weak_count *imp;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  std::runtime_error_vtbl *v8;
  uint64_t v9;
  std::runtime_error_vtbl *v10;
  std::runtime_error_vtbl *p_imp;
  const char *v12;
  std::runtime_error_vtbl *v13;
  std::runtime_error_vtbl *v14;

  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      imp = (std::__shared_weak_count *)this->__imp_.__imp_;
      if (imp)
      {
        p_shared_owners = (unint64_t *)&imp->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  v7 = (char)a2[4].__imp_.__imp_;
  if (v7)
  {
    v8 = a2->__vftable;
    this->__vftable = a2->__vftable;
    if (v8)
    {
      v9 = operator new();
      v10 = a2->__vftable;
      *(_QWORD *)v9 = &off_1E2523180;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = v10;
    }
    else
    {
      v9 = 0;
    }
    this->__imp_.__imp_ = (const char *)v9;
    a2->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v12 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v12;
    v13 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v14 = a2[3].__vftable;
    this[3].__vftable = v14;
    if (v14)
    {
      *((_QWORD *)v12 + 2) = v13;
      a2[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v13;
    }
    *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
  }
  LOBYTE(this[4].__imp_.__imp_) = v7;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[30]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [30]>(a3, &__what_arg);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC067BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t std::default_delete<AMSCore::BagNetworkDataSource>::operator()[abi:fe180100](uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  if (this)
  {
    v1 = this;
    v2 = (_QWORD *)(this + 624);
    v3 = *(_QWORD **)(this + 648);
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    if (*(char *)(v1 + 623) < 0)
      operator delete(*(void **)(v1 + 600));
    v5 = *(std::__shared_weak_count **)(v1 + 592);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)(v1 + 576);
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
    AMSCore::BagDataSource::~BagDataSource((AMSCore::BagDataSource *)v1);
    JUMPOUT(0x18D789BDCLL);
  }
  return this;
}

_QWORD *std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E2521D90;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E2521D90;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E2521D90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E2521D90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  AMSCore::BagNetworkDataSource *v6;
  char *v7;
  unint64_t v8;
  std::runtime_error *v9;
  uint64_t v10;
  unsigned int v11;
  __int128 v12;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const std::runtime_error *v17;
  char v18;
  const char **v19;
  std::__libcpp_refstring *p_imp;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const std::runtime_error *v25;
  std::runtime_error_vtbl *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_mutex_base *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  std::string::size_type size;
  char v42;
  std::string *v43;
  void **v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_mutex_base **v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::string::__raw *v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  _QWORD *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  std::string *p_p;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  std::string v93;
  std::__shared_mutex_base *v94;
  AMSCore::BagNetworkDataSource *v95;
  std::__shared_weak_count *v96;
  std::__shared_mutex_base **v97;
  std::string v98;
  char v99;
  std::string *v100;
  std::string __p;
  _QWORD v102[3];

  v102[1] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v93 = *(std::string *)a2;
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v4 = std::__shared_weak_count::lock(v3)) == 0)
  {
LABEL_116:
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_117;
  }
  v5 = v4;
  v6 = *(AMSCore::BagNetworkDataSource **)(a1 + 8);
  if (!v6)
    goto LABEL_113;
  v7 = (char *)operator new(0xC0uLL);
  v8 = (unint64_t)v7;
  *(_QWORD *)v7 = AMSCore::BagNetworkDataSource::onAccountChanged;
  *((_QWORD *)v7 + 1) = AMSCore::BagNetworkDataSource::onAccountChanged;
  v9 = (std::runtime_error *)(v7 + 64);
  v10 = (uint64_t)(v7 + 16);
  *((_QWORD *)v7 + 20) = v6;
  do
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v11 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *(_WORD *)(v7 + 17) = 0;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 7) = 0;
  std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(&v98, v10);
  v92 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
  AMSCore::BagNetworkDataSource::getAccount(v6, (std::runtime_error *)(v8 + 144));
  v12 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v8 + 168) = v12;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  if (atomic_load((unint64_t *)(v12 + 96)))
    goto LABEL_13;
  *(_BYTE *)(v8 + 184) = 0;
  v14 = (unint64_t *)(*(_QWORD *)(v8 + 168) + 96);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v8, v14));
  if (v15)
  {
LABEL_13:
    v16 = *(_QWORD *)(v8 + 168);
    if (!*(_BYTE *)(v16 + 88))
      goto LABEL_160;
    v17 = (const std::runtime_error *)(v16 + 8);
    v18 = *(_BYTE *)(v16 + 80);
    if (v18)
    {
      *(_QWORD *)(v8 + 64) = *(_QWORD *)(v16 + 8);
      v19 = (const char **)(v8 + 72);
      p_imp = (std::__libcpp_refstring *)(v16 + 16);
    }
    else
    {
      std::runtime_error::runtime_error(v9, v17);
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(v16 + 24);
      v21 = (_QWORD *)(v16 + 48);
      v22 = *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v8 + 104) = v22;
      v23 = v8 + 104;
      *(_QWORD *)(v8 + 64) = off_1E2521330;
      *(_QWORD *)(v8 + 96) = *(_QWORD *)(v16 + 40);
      v24 = *(_QWORD *)(v16 + 56);
      *(_QWORD *)(v8 + 112) = v24;
      if (v24)
      {
        *(_QWORD *)(v22 + 16) = v23;
        *(_QWORD *)(v16 + 40) = v21;
        *v21 = 0;
        *(_QWORD *)(v16 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(v8 + 96) = v23;
      }
      v25 = *(const std::runtime_error **)(v8 + 168);
      v26 = v25[4].__vftable;
      v17 = v25 + 4;
      *(_QWORD *)(v8 + 120) = v26;
      v19 = (const char **)(v8 + 128);
      p_imp = &v17->__imp_;
    }
    *v19 = p_imp->__imp_;
    v17->__vftable = 0;
    v17->__imp_.__imp_ = 0;
    *(_BYTE *)(v8 + 136) = v18;
    v27 = *(_QWORD *)(v8 + 176);
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        v30 = *(std::__shared_weak_count **)(v8 + 176);
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v31 = *(std::__shared_weak_count **)(v8 + 152);
    if (!v31)
      goto LABEL_163;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      if (*(_BYTE *)(v8 + 136))
      {
LABEL_30:
        v34 = (std::__shared_mutex_base *)(*(_QWORD *)(v8 + 160) + 248);
        v94 = v34;
        LOBYTE(v95) = 1;
        std::__shared_mutex_base::lock(v34);
        if (!*(_BYTE *)(v8 + 136))
          goto LABEL_160;
        v35 = *(_QWORD *)(v8 + 64);
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v8 + 160) + 56) + 16))(&__p);
        (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v35 + 128))(&v98, v35, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v36 = *(_QWORD *)(v8 + 160);
        v37 = (void **)(v36 + 600);
        if (!v99)
          goto LABEL_57;
        v38 = *(unsigned __int8 *)(v36 + 623);
        v39 = *(_QWORD *)(v36 + 608);
        if ((v38 & 0x80u) == 0)
          v40 = *(unsigned __int8 *)(v36 + 623);
        else
          v40 = *(_QWORD *)(v36 + 608);
        size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
        v42 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v98.__r_.__value_.__l.__size_;
        if (v40 != size)
          goto LABEL_57;
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = &v98;
        else
          v43 = (std::string *)v98.__r_.__value_.__r.__words[0];
        if ((v38 & 0x80) != 0)
        {
          if (memcmp(*v37, v43, v39))
          {
LABEL_57:
            AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__p);
            AMSCore::Logger::log<char [37],std::string,char [20],std::optional<std::string>>((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)v37, (uint64_t)&v98);
            v49 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v50 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v52 = operator new(0x30uLL);
            v53 = *(_QWORD *)(v8 + 160);
            v52[1] = 0;
            v52[2] = 0;
            *v52 = &off_1E2523068;
            v52[5] = 0;
            v52[4] = 0;
            v52[3] = v52 + 4;
            v54 = *(std::__shared_weak_count **)(v53 + 424);
            *(_QWORD *)(v53 + 416) = v52 + 3;
            *(_QWORD *)(v53 + 424) = v52;
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = *(_QWORD *)(v8 + 160);
            if (*(_BYTE *)(v57 + 464))
              *(_BYTE *)(v57 + 464) = 0;
            if (v99)
            {
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&__p, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
              else
                __p = v98;
            }
            else
            {
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
              __p.__r_.__value_.__s.__data_[0] = 0;
            }
            if (*(char *)(*(_QWORD *)(v8 + 160) + 623) < 0)
              operator delete(*v37);
            *(std::string *)v37 = __p;
            if ((_BYTE)v95)
            {
              v34 = v94;
              std::__shared_mutex_base::unlock(v94);
              v58 = *(_QWORD *)(v8 + 160);
              LOBYTE(v95) = 0;
              AMSCore::Subject<>::notify(v58 + 160);
              v48 = 0;
              v42 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
              v59 = 1;
              if (!v99)
              {
LABEL_80:
                if ((v59 & 1) == 0)
                  std::__shared_mutex_base::unlock(v34);
LABEL_82:
                if (*(_BYTE *)(v8 + 136))
                {
                  v60 = *(std::__shared_weak_count **)(v8 + 72);
                  if (v60)
                  {
                    v61 = (unint64_t *)&v60->__shared_owners_;
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                }
                else
                {
                  ((void (*)(std::runtime_error *))v9->~runtime_error)(v9);
                }
                if (v48 != 3)
                  *(_BYTE *)(v8 + 18) = 1;
                *(_QWORD *)(v8 + 64) = v10;
                *(_QWORD *)v8 = 0;
                AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v9);
                goto LABEL_92;
              }
LABEL_78:
              if (v42 < 0)
                operator delete(v98.__r_.__value_.__l.__data_);
              goto LABEL_80;
            }
            std::__throw_system_error(1, "unique_lock::unlock: not locked");
LABEL_160:
            __break(1u);
            return;
          }
        }
        else if ((_DWORD)v38)
        {
          v44 = v37;
          while (*(unsigned __int8 *)v44 == v43->__r_.__value_.__s.__data_[0])
          {
            v44 = (void **)((char *)v44 + 1);
            v43 = (std::string *)((char *)v43 + 1);
            if (!--v38)
              goto LABEL_122;
          }
          goto LABEL_57;
        }
LABEL_122:
        v59 = 0;
        *(_BYTE *)(v8 + 18) = 1;
        v48 = 3;
        goto LABEL_78;
      }
    }
    else
    {
LABEL_163:
      if (*(_BYTE *)(v8 + 136))
        goto LABEL_30;
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v98);
    AMSCore::Logger::log<char [31],AMSCore::Error>((uint64_t)v98.__r_.__value_.__l.__data_, 4, (uint64_t)"bag", 3, "Account could not be fetched. ", (uint64_t)v9);
    v45 = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
    if (v98.__r_.__value_.__l.__size_)
    {
      v46 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    *(_BYTE *)(v8 + 18) = 1;
    v48 = 3;
    goto LABEL_82;
  }
LABEL_92:
  v63 = (unint64_t *)&v5->__shared_owners_;
  do
    v64 = __ldxr(v63);
  while (__stxr(v64 + 1, v63));
  v94 = (std::__shared_mutex_base *)&off_1E25222B8;
  v95 = v6;
  v96 = v5;
  v97 = &v94;
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  v66 = (unint64_t *)(v92 + 8);
  v67 = atomic_load((unint64_t *)(v92 + 8));
  v68 = v65;
  if (!v67)
  {
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v92;
    if (*((_QWORD *)&v92 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    v75 = (std::string::__raw *)&v98.__r_.__value_.__r.__words[2];
    if (v97)
    {
      if (v97 == &v94)
      {
        v100 = (std::string *)&v98.__r_.__value_.__r.__words[2];
        (*(void (**)(std::__shared_mutex_base **, std::string::size_type *))&v94->__mut_.__m_.__opaque[16])(&v94, &v98.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v100 = (std::string *)v97;
        v97 = 0;
      }
    }
    else
    {
      v100 = 0;
    }
    v102[0] = 0;
    v78 = (char *)operator new(0x38uLL);
    v79 = v78;
    *(_QWORD *)v78 = &off_1E25220A8;
    *(_OWORD *)(v78 + 8) = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = 0uLL;
    if (v100)
    {
      if (v100 == (std::string *)&v98.__r_.__value_.__r.__words[2])
      {
        *((_QWORD *)v78 + 6) = v78 + 24;
        (*(void (**)(std::string::size_type *))(v98.__r_.__value_.__r.__words[2] + 24))(&v98.__r_.__value_.__r.__words[2]);
      }
      else
      {
        *((_QWORD *)v78 + 6) = v100;
        v100 = 0;
      }
    }
    else
    {
      *((_QWORD *)v78 + 6) = 0;
    }
    v102[0] = v79;
    v81 = (unint64_t *)(v92 + 40);
    v80 = *(_QWORD **)(v92 + 40);
    v82 = v92 + 16;
    *(_QWORD *)(v92 + 40) = 0;
    if (v80 == (_QWORD *)(v92 + 16))
    {
      v83 = 4;
      v80 = (_QWORD *)(v92 + 16);
    }
    else
    {
      if (!v80)
        goto LABEL_135;
      v83 = 5;
    }
    (*(void (**)(void))(*v80 + 8 * v83))();
    v79 = (char *)v102[0];
    v84 = (_QWORD *)(v92 + 40);
    if (!v102[0])
    {
LABEL_136:
      *v84 = 0;
      goto LABEL_137;
    }
    if ((std::string *)v102[0] == &__p)
    {
      *v81 = v82;
      (*(void (**)(std::string *, uint64_t))(__p.__r_.__value_.__r.__words[0] + 24))(&__p, v92 + 16);
      do
LABEL_137:
        v85 = __ldaxr(v66);
      while (__stlxr(v82, v66));
      if (v85)
      {
        if (!*v81)
          std::__throw_bad_function_call[abi:fe180100]();
        (*(void (**)(unint64_t))(*(_QWORD *)*v81 + 48))(*v81);
      }
      p_p = (std::string *)v102[0];
      if ((std::string *)v102[0] == &__p)
      {
        v87 = 4;
        p_p = &__p;
      }
      else
      {
        if (!v102[0])
          goto LABEL_146;
        v87 = 5;
      }
      (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v87))();
LABEL_146:
      if (v100 == (std::string *)&v98.__r_.__value_.__r.__words[2])
      {
        v88 = 4;
      }
      else
      {
        if (!v100)
        {
LABEL_151:
          v89 = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
          if (v98.__r_.__value_.__l.__size_)
          {
            v90 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          goto LABEL_97;
        }
        v88 = 5;
        v75 = (std::string::__raw *)v100;
      }
      (*(void (**)(std::string::__raw *))(v75->__words[0] + 8 * v88))(v75);
      goto LABEL_151;
    }
LABEL_135:
    v84 = v102;
    *v81 = (unint64_t)v79;
    goto LABEL_136;
  }
  if (!v97)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(std::__shared_mutex_base **))&(*v97)->__mut_.__m_.__opaque[40])(v97);
LABEL_97:
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v97;
  if (v97 == &v94)
  {
    v72 = 4;
    v71 = &v94;
    goto LABEL_112;
  }
  if (v97)
  {
    v72 = 5;
LABEL_112:
    (*((void (**)(void))&(*v71)->__mut_.__m_.__sig + v72))();
  }
LABEL_113:
  v76 = (unint64_t *)&v5->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (v77)
    goto LABEL_116;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
LABEL_117:
    operator delete(v93.__r_.__value_.__l.__data_);
}

void sub_18CC07554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcE"
                     "EEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5Err"
                     "orEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfi"
                     "gESE_EEbEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9a"
                                "llocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNe"
                                "tworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expec"
                                "tedINS_25LoadURLMetricsEventConfigESE_EEbEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EEbEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EEbEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::target_type()
{
}

_QWORD *std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E25220A8;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *a1 = &off_1E25220A8;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v2 = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *v2 = &off_1E25220A8;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[6];
  if (v7)
  {
    if ((_QWORD *)v7 == a1 + 3)
    {
      v2[6] = v2 + 3;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      return v2;
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  v2[6] = v7;
  return v2;
}

void sub_18CC0785C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::__clone(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v4 = a1[1];
  v3 = a1[2];
  *a2 = &off_1E25220A8;
  a2[1] = v4;
  a2[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (_QWORD *)a1[6];
  if (v7)
  {
    if (v7 == a1 + 3)
    {
      a2[6] = a2 + 3;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[6] + 24))(a1[6]);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*v7 + 16))(a1[6]);
      a2[6] = result;
    }
  }
  else
  {
    result = 0;
    a2[6] = 0;
  }
  return result;
}

void sub_18CC07940(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::destroy(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = a1[6];
  if (!v2)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  a1[1] = 0;
  a1[2] = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNO7AMSCore4TaskIvvE4thenEONSt3__18functionIFvvEEEEUlvE_"
    || ((v3 & (unint64_t)"ZNO7AMSCore4TaskIvvE4thenEONSt3__18functionIFvvEEEEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNO7AMSCore4TaskIvvE4thenEONSt3__18functionIFvvEEEEUlvE_")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNO7AMSCore4TaskIvvE4thenEONSt3__18functionIFvvEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::target_type()
{
}

_QWORD *_ZNSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EEbEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_ISY_EEFvvEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E25222B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EEbEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_ISY_EEFvvEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E25222B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EEbEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_ISY_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E25222B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EEbEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_ISY_EEFvvEE7__cloneEPNS0_6__baseIS10_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E25222B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EEbEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_ISY_EEFvvEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EEbEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_ISY_EEFvvEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t _ZNKSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EEbEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_ISY_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIc"
                     "EEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5Er"
                     "rorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConf"
                     "igESE_EEbEEEENK3$_0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_"
    || ((v3 & (unint64_t)"ZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9"
                                "allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadN"
                                "etworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expe"
                                "ctedINS_25LoadURLMetricsEventConfigESE_EEbEEEENK3$_0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EEbEEEENK3$_0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EEbEEEENK3$_0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EEbEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_ISY_EEFvvEE11target_typeEv()
{
  return &_ZTIZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EEbEEEENK3__0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_;
}

void AMSCore::BagNetworkDataSource::onAccountChanged(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  const std::runtime_error *v4;
  char v5;
  const char **v6;
  std::__libcpp_refstring *p_imp;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const std::runtime_error *v12;
  std::runtime_error_vtbl *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_mutex_base *v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  std::string::size_type v28;
  char v29;
  std::string *v30;
  const void **v31;
  std::__shared_weak_count *size;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_mutex_base *v49;
  std::string v50;
  char v51;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 168);
  if (!*(_BYTE *)(v1 + 88))
    goto LABEL_81;
  v3 = (_QWORD *)(a1 + 64);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(v1 + 8);
    v6 = (const char **)(a1 + 72);
    p_imp = (std::__libcpp_refstring *)(v1 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 64), v4);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(v1 + 24);
    v8 = (_QWORD *)(v1 + 48);
    v9 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(a1 + 104) = v9;
    v10 = a1 + 104;
    *(_QWORD *)(a1 + 64) = off_1E2521330;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v1 + 40);
    v11 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(a1 + 112) = v11;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v1 + 40) = v8;
      *v8 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 96) = v10;
    }
    v12 = *(const std::runtime_error **)(a1 + 168);
    v13 = v12[4].__vftable;
    v4 = v12 + 4;
    *(_QWORD *)(a1 + 120) = v13;
    v6 = (const char **)(a1 + 128);
    p_imp = &v4->__imp_;
  }
  *v6 = p_imp->__imp_;
  v4->__vftable = 0;
  v4->__imp_.__imp_ = 0;
  *(_BYTE *)(a1 + 136) = v5;
  v14 = *(_QWORD *)(a1 + 176);
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      v17 = *(std::__shared_weak_count **)(a1 + 176);
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v18 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v18)
    goto LABEL_84;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
  {
LABEL_84:
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_18;
LABEL_38:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v50);
    AMSCore::Logger::log<char [31],AMSCore::Error>((uint64_t)v50.__r_.__value_.__l.__data_, 4, (uint64_t)"bag", 3, "Account could not be fetched. ", (uint64_t)v3);
    size = (std::__shared_weak_count *)v50.__r_.__value_.__l.__size_;
    if (v50.__r_.__value_.__l.__size_)
    {
      v33 = (unint64_t *)(v50.__r_.__value_.__l.__size_ + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    *(_BYTE *)(a1 + 18) = 1;
    v35 = 3;
LABEL_69:
    if (*(_BYTE *)(a1 + 136))
    {
      v46 = *(std::__shared_weak_count **)(a1 + 72);
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v35 == 3)
        goto LABEL_79;
    }
    else
    {
      (*(void (**)(_QWORD *))*v3)(v3);
      if (v35 == 3)
      {
LABEL_79:
        *(_QWORD *)(a1 + 64) = a1 + 16;
        *(_QWORD *)a1 = 0;
        AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(v3);
        return;
      }
    }
    *(_BYTE *)(a1 + 18) = 1;
    goto LABEL_79;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a1 + 136))
    goto LABEL_38;
LABEL_18:
  v21 = (std::__shared_mutex_base *)(*(_QWORD *)(a1 + 160) + 248);
  v49 = v21;
  std::__shared_mutex_base::lock(v21);
  if (*(_BYTE *)(a1 + 136))
  {
    v22 = *(_QWORD *)(a1 + 64);
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 160) + 56) + 16))(&__p);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v22 + 128))(&v50, v22, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v23 = *(_QWORD *)(a1 + 160);
    v24 = (const void **)(v23 + 600);
    if (!v51)
      goto LABEL_45;
    v25 = *(unsigned __int8 *)(v23 + 623);
    v26 = *(_QWORD *)(v23 + 608);
    if ((v25 & 0x80u) == 0)
      v27 = *(unsigned __int8 *)(v23 + 623);
    else
      v27 = *(_QWORD *)(v23 + 608);
    v28 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    v29 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = v50.__r_.__value_.__l.__size_;
    if (v27 != v28)
      goto LABEL_45;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v50;
    else
      v30 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if ((v25 & 0x80) != 0)
    {
      if (memcmp(*v24, v30, v26))
        goto LABEL_45;
    }
    else if ((_DWORD)v25)
    {
      v31 = v24;
      while (*(unsigned __int8 *)v31 == v30->__r_.__value_.__s.__data_[0])
      {
        v31 = (const void **)((char *)v31 + 1);
        v30 = (std::string *)((char *)v30 + 1);
        if (!--v25)
          goto LABEL_80;
      }
LABEL_45:
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__p);
      AMSCore::Logger::log<char [37],std::string,char [20],std::optional<std::string>>((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)v24, (uint64_t)&v50);
      v36 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = operator new(0x30uLL);
      v40 = *(_QWORD *)(a1 + 160);
      v39[1] = 0;
      v39[2] = 0;
      *v39 = &off_1E2523068;
      v39[5] = 0;
      v39[4] = 0;
      v39[3] = v39 + 4;
      v41 = *(std::__shared_weak_count **)(v40 + 424);
      *(_QWORD *)(v40 + 416) = v39 + 3;
      *(_QWORD *)(v40 + 424) = v39;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = *(_QWORD *)(a1 + 160);
      if (*(_BYTE *)(v44 + 464))
        *(_BYTE *)(v44 + 464) = 0;
      if (v51)
      {
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
        else
          __p = v50;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
      }
      if (*(char *)(*(_QWORD *)(a1 + 160) + 623) < 0)
        operator delete((void *)*v24);
      *(std::string *)v24 = __p;
      v21 = v49;
      std::__shared_mutex_base::unlock(v49);
      AMSCore::Subject<>::notify(*(_QWORD *)(a1 + 160) + 160);
      v35 = 0;
      v29 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      v45 = 1;
      if (!v51)
        goto LABEL_67;
      goto LABEL_65;
    }
LABEL_80:
    v45 = 0;
    *(_BYTE *)(a1 + 18) = 1;
    v35 = 3;
LABEL_65:
    if (v29 < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
LABEL_67:
    if ((v45 & 1) == 0)
      std::__shared_mutex_base::unlock(v21);
    goto LABEL_69;
  }
LABEL_81:
  __break(1u);
}

void sub_18CC08344(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:fe180100]((uint64_t)&a9);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v23);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::BagNetworkDataSource::onAccountChanged(_QWORD *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  if (*__p)
  {
    v2 = __p[22];
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)__p[22];
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)__p[19];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = (_QWORD *)__p[7];
  if (v9 == __p + 4)
  {
    v10 = 4;
    v9 = __p + 4;
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
  do
  {
LABEL_17:
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v12)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [31],AMSCore::Error>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v11 = result;
    v12 = MEMORY[0x1E0DE4FE0];
    v13 = MEMORY[0x1E0DE4FE0] + 64;
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v29[0] = MEMORY[0x1E0DE4FE0] + 64;
    v24 = v14;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v14 - 24)) = v15;
    v16 = (std::ios_base *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24));
    std::ios_base::init(v16, v25);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v24 = v12 + 24;
    v29[0] = v13;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8];
    v25[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v27 = 0u;
    v28 = 16;
    v18 = *(_QWORD *)(v24 - 24);
    if ((v19 & 1) == 0
    {
    }
    v20 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)a5, v20);
    AMSCore::operator<<(&v24, a6);
    v21 = v25[5];
    v22 = (char *)&v25[-1] + *(_QWORD *)(v24 - 24);
    if ((v22[32] & 5) != 0)
    {
      v23 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(&rep, *((_QWORD *)v22 + 5), 0, 1, 16);
      v23 = v34;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v31 = a2;
    v32 = v21;
    v33 = v23;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), a3, a4, &rep);
    v24 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v25[0] = v17 + 16;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v29);
  }
  return result;
}

void sub_18CC08734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [37],std::string,char [20],std::optional<std::string>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v5 = result;
    v6 = MEMORY[0x1E0DE4FE0];
    v7 = MEMORY[0x1E0DE4FE0] + 64;
    v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v29[0] = MEMORY[0x1E0DE4FE0] + 64;
    v24 = v9;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v9 - 24)) = v10;
    v11 = (std::ios_base *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24));
    std::ios_base::init(v11, v25);
    v11[1].__vftable = 0;
    v11[1].__fmtflags_ = -1;
    v24 = v6 + 24;
    v29[0] = v7;
    std::streambuf::basic_streambuf();
    v12 = MEMORY[0x1E0DE4FB8];
    v25[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v27 = 0u;
    v28 = 16;
    v13 = *(_QWORD *)(v24 - 24);
    if ((v14 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Storefront changed. oldStorefront = ", 36);
    v15 = *(char *)(a2 + 23);
    if (v15 >= 0)
      v16 = a2;
    else
      v16 = *(_QWORD *)a2;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a2 + 23);
    else
      v17 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, v16, v17);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)" | newStorefront = ", 19);
    if (*(_BYTE *)(a3 + 24))
    {
      v18 = *(char *)(a3 + 23);
      if (v18 >= 0)
        v19 = a3;
      else
        v19 = *(_QWORD *)a3;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(a3 + 23);
      else
        v20 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, v19, v20);
    }
    else
    {
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)"nullopt", 7);
    }
    v21 = v25[5];
    v22 = (char *)&v25[-1] + *(_QWORD *)(v24 - 24);
    if ((v22[32] & 5) != 0)
    {
      v23 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(&rep, *((_QWORD *)v22 + 5), 0, 1, 16);
      v23 = v34;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v31 = 2;
    v32 = v21;
    v33 = v23;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v5 + 16) + 16))(*(_QWORD *)(v5 + 16), "bag", 3, &rep);
    v24 = *v8;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = v8[3];
    v25[0] = v12 + 16;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v29);
  }
  return result;
}

void sub_18CC08A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<AMSCore::BagNetworkDataSource *,std::shared_ptr<AMSCore::BagNetworkDataSource>::__shared_ptr_default_delete<AMSCore::BagNetworkDataSource,AMSCore::BagNetworkDataSource>,std::allocator<AMSCore::BagNetworkDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::BagNetworkDataSource *,std::shared_ptr<AMSCore::BagNetworkDataSource>::__shared_ptr_default_delete<AMSCore::BagNetworkDataSource,AMSCore::BagNetworkDataSource>,std::allocator<AMSCore::BagNetworkDataSource>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AMSCore::BagNetworkDataSource>::operator()[abi:fe180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AMSCore::BagNetworkDataSource *,std::shared_ptr<AMSCore::BagNetworkDataSource>::__shared_ptr_default_delete<AMSCore::BagNetworkDataSource,AMSCore::BagNetworkDataSource>,std::allocator<AMSCore::BagNetworkDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN7AMSCore20BagNetworkDataSourceEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN7AMSCore20BagNetworkDataSourceEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN7AMSCore20BagNetworkDataSourceEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN7AMSCore20BagNetworkDataSourceEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::LoadNetworkBagTask::encodeHTTPRequest(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, __int128 *a6, char a7)
{
  char *v14;
  std::string::size_type v15;
  char v16;
  int v17;
  int v18;
  int v19;
  const std::string::value_type *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void **v24;
  void **v25;
  uint64_t v26;
  __int128 v27;
  void **v28;
  char *v29;
  unsigned int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void **v70;
  char *v71;
  _BYTE *v72;
  unint64_t v73;
  _BYTE *v74;
  unint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  BOOL v78;
  const char *v79;
  _QWORD *v80;
  std::runtime_error_vtbl *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  const void *v85;
  void **v86;
  unint64_t v87;
  int v88;
  char *v89;
  uint64_t v90;
  void **p_data;
  void **v92;
  uint64_t v93;
  uint64_t Parameter;
  void **v95;
  void **v96;
  void *v97;
  int v98;
  char *v99;
  __int128 *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  _QWORD *v105;
  __int128 v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v110;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  const std::runtime_error *v115;
  char v116;
  const char **v117;
  std::__libcpp_refstring *p_imp;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  const std::runtime_error *v123;
  std::runtime_error_vtbl *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  __int128 v138;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  const std::runtime_error *v143;
  char v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int *v151;
  unsigned int **v152;
  char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::string *v165;
  uint64_t v166;
  uint64_t v167;
  const std::string::value_type *v168;
  int v169;
  std::string::size_type v170;
  uint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  std::string::size_type v180;
  __int128 v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int *v185;
  unsigned int **v186;
  char *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  std::runtime_error_vtbl *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  __int128 v198;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  std::runtime_error *v203;
  char v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  int v224;
  int v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  unsigned int *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  int v246;
  int v247;
  const std::string::value_type *v248;
  std::string::size_type v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  AMSCore::UserAgent *v253;
  __int128 v254;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  const std::runtime_error *v259;
  char v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  unsigned int v295;
  unsigned int v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  void **v300;
  void **v301;
  void **v302;
  std::string *v303;
  char *v304;
  char *v305;
  __int128 *v306;
  std::string *v307;
  char *v308;
  _QWORD *v309;
  _DWORD *v310;
  std::string *v311;
  char v312;
  std::string::size_type v313;
  const std::string::value_type *v314;
  uint64_t v315;
  _DWORD *v316;
  _DWORD *v317;
  _OWORD *v318;
  void **v319;
  std::runtime_error *v320;
  char *v321;
  _QWORD *v322;
  void **v323;
  uint64_t v324;
  uint64_t v325;
  void **v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  std::string::size_type v331;
  const std::string::value_type *v332;
  int v333;
  std::string::value_type *__s;
  std::string::size_type v335;
  std::string *v336;
  uint64_t v337;
  void **v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  AMSCore::EncodeHTTPRequestTask::Options *v342;
  AMSCore::URL *v343;
  _BYTE *v344;
  uint64_t v345;
  void **v346;
  std::runtime_error *v347;
  std::runtime_error *v348;
  std::runtime_error *v349;
  AMSCore::URL *v350;
  std::string *v351;
  std::string *v352;
  std::string *v353;
  uint64_t v354;
  char *v355;
  AMSCore::URLBuilder *v356;
  std::runtime_error *v357;
  std::runtime_error *v358;
  AMSCore::EncodeHTTPRequestTask::Options *v359;
  std::runtime_error *v360;
  void **v361;
  char *v362;
  std::string *v363;
  std::string *v364;
  uint64_t v365;
  char *v366;
  unint64_t v367;
  std::string *v368;
  std::string *v369;
  _BYTE __p[32];
  unsigned int **v371;
  unsigned int *v372;
  uint64_t v373;
  __int128 v374;
  char v375;
  _BYTE v376[104];
  _QWORD v377[7];
  std::runtime_error v378;
  __int128 v379;
  unsigned int **v380;
  unsigned int *v381;
  uint64_t v382;
  __int128 v383;
  _BYTE v384[32];
  unsigned int **v385;
  unsigned int *v386;
  uint64_t v387;
  __int128 v388;

  v14 = (char *)operator new(0xC78uLL);
  *(_QWORD *)v14 = AMSCore::LoadNetworkBagTask::encodeHTTPRequest;
  *((_QWORD *)v14 + 1) = AMSCore::LoadNetworkBagTask::encodeHTTPRequest;
  v14[3175] = a7;
  v319 = (void **)(v14 + 872);
  v360 = (std::runtime_error *)(v14 + 1624);
  v356 = (AMSCore::URLBuilder *)(v14 + 1856);
  v361 = (void **)(v14 + 2944);
  v362 = v14 + 3032;
  __s = *(std::string::value_type **)a2;
  v335 = *(_QWORD *)(a2 + 8);
  v306 = (__int128 *)(v14 + 2984);
  v309 = v14 + 3016;
  *((_QWORD *)v14 + 381) = *(_QWORD *)a2;
  *((_DWORD *)v14 + 794) = *(_DWORD *)(a2 + 16);
  v316 = v14 + 3168;
  v317 = v14 + 3176;
  *(_DWORD *)(v14 + 3179) = *(_DWORD *)(a2 + 19);
  v333 = *(char *)(a2 + 23);
  v14[3183] = v333;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v331 = *(_QWORD *)(a2 + 32);
  v332 = *(const std::string::value_type **)(a2 + 24);
  *((_QWORD *)v14 + 382) = v332;
  v17 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v14 + 3171) = *(_DWORD *)(a2 + 43);
  *((_DWORD *)v14 + 792) = v17;
  v18 = *(char *)(a2 + 47);
  v14[3184] = *(_BYTE *)(a2 + 47);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v19 = *(unsigned __int8 *)(a3 + 24);
  v14[3185] = v19;
  v367 = (unint64_t)v14;
  v327 = v19;
  v310 = v14 + 3160;
  v330 = v18;
  if (v19)
  {
    v20 = *(const std::string::value_type **)a3;
    v15 = *(_QWORD *)(a3 + 8);
    *((_DWORD *)v14 + 790) = *(_DWORD *)(a3 + 16);
    *(_DWORD *)(v14 + 3163) = *(_DWORD *)(a3 + 19);
    v16 = *(_BYTE *)(a3 + 23);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
  }
  else
  {
    v20 = 0;
  }
  v320 = (std::runtime_error *)(v14 + 472);
  v359 = (AMSCore::EncodeHTTPRequestTask::Options *)(v14 + 1248);
  v21 = *a4;
  v22 = a4[1];
  v350 = (AMSCore::URL *)(v14 + 2088);
  v305 = v14 + 2240;
  a4[1] = 0;
  a4[2] = 0;
  v307 = (std::string *)(v14 + 2272);
  v308 = v14 + 2304;
  v23 = v14 + 2336;
  v365 = (uint64_t)(v14 + 2368);
  *a4 = 0;
  v24 = (void **)(v14 + 2392);
  v339 = (uint64_t)(v14 + 2416);
  v25 = (void **)(v14 + 2440);
  v354 = (uint64_t)(v14 + 2464);
  v325 = *a5;
  v340 = a5[1];
  v351 = (std::string *)(v14 + 2488);
  v338 = (void **)(v14 + 2512);
  v348 = (std::runtime_error *)(v14 + 2536);
  v337 = (uint64_t)(v14 + 2560);
  *a5 = 0;
  a5[1] = 0;
  v336 = (std::string *)(v14 + 2584);
  v26 = (uint64_t)(v14 + 2608);
  v27 = *a6;
  v368 = (std::string *)(v14 + 2632);
  v363 = (std::string *)(v14 + 2656);
  v326 = (void **)(v14 + 2680);
  v314 = v20;
  v315 = (uint64_t)(v14 + 2704);
  *(_QWORD *)a6 = 0;
  *((_QWORD *)a6 + 1) = 0;
  v311 = (std::string *)(v14 + 2728);
  v302 = (void **)(v14 + 2752);
  v303 = (std::string *)(v14 + 2776);
  *((_QWORD *)v14 + 384) = v20;
  v312 = v16;
  v14[3186] = v16;
  v313 = v15;
  *((_QWORD *)v14 + 383) = v15;
  v328 = v22;
  v329 = v21;
  *((_QWORD *)v14 + 385) = v21;
  *((_QWORD *)v14 + 386) = v22;
  v345 = v27;
  *(_OWORD *)(v14 + 3096) = v27;
  v323 = (void **)(v14 + 2824);
  v324 = (uint64_t)(v14 + 2800);
  v357 = (std::runtime_error *)(v14 + 2848);
  v28 = (void **)(v14 + 2872);
  v353 = (std::string *)(v14 + 2896);
  v29 = v14 + 2920;
  v341 = v14 + 2968;
  v322 = v14 + 3000;
  do
    v30 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v30 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v14[24] = 0;
  v14[424] = 0;
  *((_QWORD *)v14 + 54) = 0;
  v342 = (AMSCore::EncodeHTTPRequestTask::Options *)(v14 + 24);
  *((_QWORD *)v14 + 58) = 0;
  v304 = v14 + 16;
  std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(__p, (uint64_t)(v14 + 16));
  *a1 = *(_OWORD *)__p;
  __p[0] = 0;
  v375 = 0;
  v376[0] = 0;
  v376[24] = 0;
  v376[32] = 0;
  v376[56] = 0;
  v376[64] = 0;
  v376[88] = 0;
  v376[96] = 0;
  v376[98] = 0;
  v377[0] = v377;
  v377[1] = v377;
  memset(&v377[2], 0, 32);
  qmemcpy(&v377[3], "https", 5);
  HIBYTE(v377[5]) = 5;
  *(_BYTE *)(v367 + 2943) = 5;
  *(_DWORD *)v29 = 1886680168;
  v29[4] = 115;
  *(_BYTE *)(v367 + 2925) = 0;
  v377[5] = *((_QWORD *)v29 + 2);
  *(_OWORD *)&v377[3] = *(_OWORD *)v29;
  *(_BYTE *)(v367 + 2943) = 0;
  *(_BYTE *)(v367 + 2920) = 0;
  std::__optional_move_base<AMSCore::Error,false>::__optional_move_base[abi:fe180100](v356, (uint64_t)__p);
  v343 = (AMSCore::URL *)(v367 + 1936);
  AMSCore::URL::URL((std::string *)(v367 + 1936), (const AMSCore::URL *)v376);
  if (*(char *)(v367 + 2943) < 0)
    operator delete(*(void **)v29);
  AMSCore::URL::~URL((AMSCore::URL *)v376);
  if (v375)
  {
    *(_QWORD *)__p = off_1E2521330;
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
    if (*((_QWORD *)&v374 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v371, v372);
    MEMORY[0x18D7898AC](__p);
  }
  v34 = v345;
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v345 + 16))(__p, v345);
  v35 = __p[23];
  if (__p[23] < 0)
    v35 = *(_QWORD *)&__p[8];
  if (v35 == 62)
  {
    v52 = *(uint64_t **)__p;
    if (__p[23] >= 0)
      v52 = (uint64_t *)__p;
    v53 = *v52;
    v54 = v52[1];
    v55 = v52[2];
    v56 = v52[3];
    v57 = v52[4];
    v58 = v52[5];
    v59 = v52[6];
    v44 = *(uint64_t *)((char *)v52 + 54);
    v50 = v53 == 0x6C7070612E6D6F63
       && v54 == 0x4D656C7070412E65
       && v55 == 0x7672655361696465
       && v56 == 0x65726F4373656369
       && v57 == 0x41616964654D492ELL
       && v58 == 0x612E746E756F6363
       && v59 == 0x5365726F74537070;
    v51 = 0x786F62646E615365;
  }
  else
  {
    if (v35 != 59)
    {
      v66 = 0;
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_68;
LABEL_71:
      operator delete(*(void **)__p);
      if (v66)
        goto LABEL_69;
      goto LABEL_72;
    }
    v36 = *(uint64_t **)__p;
    if (__p[23] >= 0)
      v36 = (uint64_t *)__p;
    v37 = *v36;
    v38 = v36[1];
    v39 = v36[2];
    v40 = v36[3];
    v41 = v36[4];
    v42 = v36[5];
    v43 = v36[6];
    v44 = *(uint64_t *)((char *)v36 + 51);
    v50 = v37 == 0x6C7070612E6D6F63
       && v38 == 0x4D656C7070412E65
       && v39 == 0x7672655361696465
       && v40 == 0x65726F4373656369
       && v41 == 0x41616964654D492ELL
       && v42 == 0x612E746E756F6363
       && v43 == 0x4265726F74537070;
    v51 = 0x6174654265726F74;
  }
  v66 = v50 && v44 == v51;
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_71;
LABEL_68:
  if (v66)
  {
LABEL_69:
    v67 = (uint64_t)operator new(0x20uLL);
    strcpy((char *)v67, "sandbox.itunes.apple.com");
    v68 = 0x8000000000000020;
    v69 = 24;
    goto LABEL_73;
  }
LABEL_72:
  v68 = 0x140000006D6F632ELL;
  v69 = 0x656C7070612E7365;
  v67 = 0x6E7574692E676162;
LABEL_73:
  *(_QWORD *)(v367 + 2336) = v67;
  *(_QWORD *)(v367 + 2344) = v69;
  *(_QWORD *)(v367 + 2352) = v68;
  *(_BYTE *)(v367 + 2360) = 1;
  v70 = (void **)(v367 + 1968);
  if (*(_BYTE *)(v367 + 1992))
  {
    if (*(char *)(v367 + 1991) < 0)
      operator delete(*v70);
    *(_OWORD *)v70 = *(_OWORD *)v23;
    *(_QWORD *)(v367 + 1984) = *((_QWORD *)v23 + 2);
    *(_BYTE *)(v367 + 2359) = 0;
    *(_BYTE *)(v367 + 2336) = 0;
    if ((v66 & 1) != 0)
      goto LABEL_77;
LABEL_79:
    v73 = 7;
    v384[23] = 7;
    qmemcpy(v384, "bag.xml", 7);
    v72 = &v384[7];
    goto LABEL_80;
  }
  *(_OWORD *)v70 = *(_OWORD *)v23;
  *(_QWORD *)(v367 + 1984) = *((_QWORD *)v23 + 2);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v367 + 1992) = 1;
  if ((v66 & 1) == 0)
    goto LABEL_79;
LABEL_77:
  v71 = (char *)operator new(0x30uLL);
  *(_QWORD *)v384 = v71;
  *(_OWORD *)&v384[8] = xmmword_18CF51B10;
  qmemcpy(v71, "WebObjects/MZInit.woa/wa/initiateSession", 40);
  v72 = v71 + 40;
  v73 = 40;
LABEL_80:
  *v72 = 0;
  v74 = *(_BYTE **)v384;
  if (!v66)
    v74 = v384;
  v75 = v73;
  v76 = v74;
  while (*v76 == 47)
  {
    ++v76;
    if (!--v75)
      goto LABEL_90;
  }
  v77 = v76 - v74;
  if (v77 == -1)
  {
LABEL_90:
    v79 = 0;
    v81 = 0;
    v80 = v341;
    goto LABEL_91;
  }
  v78 = v73 >= v77;
  v79 = (const char *)(v73 - v77);
  v80 = v341;
  if (!v78)
    std::__throw_out_of_range[abi:fe180100]("string_view::substr");
  v81 = (std::runtime_error_vtbl *)&v74[v77];
LABEL_91:
  v378.__vftable = v81;
  v378.__imp_.__imp_ = v79;
  AMSCore::StringUtils::join<char [2],std::string_view>((std::string *)__p, (uint64_t *)&v378);
  v82 = v367 + 2000;
  v318 = (_OWORD *)(v367 + 2000);
  if (!*(_BYTE *)(v367 + 2024))
  {
    *(_OWORD *)v82 = *(_OWORD *)__p;
    *(_QWORD *)(v367 + 2016) = *(_QWORD *)&__p[16];
    *(_BYTE *)(v367 + 2024) = 1;
    if ((v384[23] & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_95;
  }
  if (*(char *)(v367 + 2023) < 0)
  {
    operator delete(*(void **)v82);
    v82 = v367 + 2000;
  }
  *(_OWORD *)v82 = *(_OWORD *)__p;
  *(_QWORD *)(v82 + 16) = *(_QWORD *)&__p[16];
  if ((v384[23] & 0x80000000) != 0)
LABEL_95:
    operator delete(*(void **)v384);
LABEL_96:
  if (*(_BYTE *)(v367 + 2360) && *(char *)(v367 + 2359) < 0)
    operator delete(*(void **)v23);
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(v80);
  (*(void (**)(_QWORD))(*(_QWORD *)*v80 + 80))(*v80);
  v83 = *(unsigned __int8 *)(v367 + 2967);
  v84 = (char)v83;
  if ((v83 & 0x80u) != 0)
    v83 = *(_QWORD *)(v367 + 2952);
  v346 = v24;
  if (v83 == 65
    && (v84 >= 0 ? (v85 = v361) : (v85 = *v361),
        !memcmp(v85, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL)))
  {
    v86 = v28;
    *(_BYTE *)(v367 + 2919) = 4;
    v87 = v367 + 2919;
    strcpy((char *)(v367 + 2896), "OS X");
    v89 = (char *)(v367 + 2871);
    *(_BYTE *)(v367 + 2871) = 2;
    strcpy((char *)(v367 + 2848), "os");
  }
  else
  {
    v86 = v28;
    AMSCore::toString(v353, (uint64_t)v361);
    v87 = v367 + 2919;
    v88 = *(char *)(v367 + 2919);
    v89 = (char *)(v367 + 2871);
    *(_BYTE *)(v367 + 2871) = 2;
    strcpy((char *)(v367 + 2848), "os");
    if (v88 < 0)
    {
      v321 = (char *)(v367 + 2871);
      std::string::__init_copy_ctor_external(v363, *(const std::string::value_type **)(v367 + 2896), *(_QWORD *)(v367 + 2904));
      v90 = (uint64_t)v363;
      goto LABEL_112;
    }
  }
  v321 = v89;
  v90 = (uint64_t)v363;
  *(_OWORD *)&v363->__r_.__value_.__l.__data_ = *(_OWORD *)&v353->__r_.__value_.__l.__data_;
  v363->__r_.__value_.__r.__words[2] = v353->__r_.__value_.__r.__words[2];
LABEL_112:
  *(_QWORD *)(v367 + 3112) = v87;
  AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, (uint64_t)v357, v90);
  *(_BYTE *)(v367 + 2391) = 9;
  *(_BYTE *)(v365 + 8) = 110;
  *(_QWORD *)v365 = *(_QWORD *)"osVersion";
  *(_BYTE *)(v367 + 2377) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(v367 + 2968) + 88))(*(_QWORD *)(v367 + 2968));
  AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, v365, (uint64_t)v346);
  *(_BYTE *)(v367 + 2439) = 11;
  *(_DWORD *)(v339 + 7) = 1936941420;
  *(_QWORD *)v339 = *(_QWORD *)"deviceClass";
  *(_BYTE *)(v367 + 2427) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(v367 + 2968) + 72))(*(_QWORD *)(v367 + 2968));
  AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, v339, (uint64_t)v25);
  *(_BYTE *)(v367 + 2487) = 7;
  *(_DWORD *)v354 = 1685025392;
  *(_DWORD *)(v354 + 3) = 1952675172;
  *(_BYTE *)(v367 + 2471) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34);
  AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, v354, (uint64_t)v351);
  *(_BYTE *)(v367 + 2535) = 14;
  qmemcpy(v338, "productVersion", 14);
  *(_BYTE *)(v367 + 2526) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 72))(v34);
  AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, (uint64_t)v338, (uint64_t)v348);
  *(_BYTE *)(v367 + 2583) = 7;
  *(_DWORD *)v337 = 1718579824;
  *(_DWORD *)(v337 + 3) = 1701603686;
  *(_BYTE *)(v367 + 2567) = 0;
  if (v333 < 0)
  {
    p_data = (void **)&v336->__r_.__value_.__l.__data_;
    std::string::__init_copy_ctor_external(v336, __s, v335);
  }
  else
  {
    *(_QWORD *)(v367 + 2584) = __s;
    p_data = (void **)&v336->__r_.__value_.__l.__data_;
    *(_QWORD *)(v367 + 2592) = v335;
    *(_DWORD *)(v367 + 2600) = *v317;
    *(_DWORD *)(v367 + 2603) = *(_DWORD *)((char *)v317 + 3);
    *(_BYTE *)(v367 + 2607) = v333;
  }
  v92 = v86;
  AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, v337, (uint64_t)p_data);
  *(_BYTE *)(v367 + 2895) = 14;
  qmemcpy(v86, "profileVersion", 14);
  *(_BYTE *)(v367 + 2886) = 0;
  if (v330 < 0)
  {
    v93 = (uint64_t)v368;
    std::string::__init_copy_ctor_external(v368, v332, v331);
  }
  else
  {
    *(_QWORD *)(v367 + 2632) = v332;
    *(_QWORD *)(v367 + 2640) = v331;
    *(_DWORD *)(v367 + 2648) = *v316;
    *(_DWORD *)(v367 + 2651) = *(_DWORD *)((char *)v316 + 3);
    *(_BYTE *)(v367 + 2655) = v330;
    v93 = (uint64_t)v368;
  }
  Parameter = AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, (uint64_t)v92, v93);
  *(_BYTE *)(v367 + 2631) = 6;
  *(_DWORD *)v26 = 1836216166;
  *(_WORD *)(v26 + 4) = 29793;
  *(_BYTE *)(v367 + 2614) = 0;
  *(_BYTE *)(v367 + 2703) = 4;
  strcpy((char *)(v367 + 2680), "json");
  AMSCore::URLBuilder::withQueryParameter(Parameter, v26, (uint64_t)v326);
  if (*(char *)(v367 + 2703) < 0)
    operator delete(*v326);
  v95 = (void **)&v368->__r_.__value_.__l.__data_;
  if (*(char *)(v367 + 2631) < 0)
  {
    operator delete(*(void **)v26);
    v95 = (void **)&v368->__r_.__value_.__l.__data_;
    if ((*(char *)(v367 + 2655) & 0x80000000) == 0)
    {
LABEL_122:
      if ((*(char *)(v367 + 2895) & 0x80000000) == 0)
        goto LABEL_123;
LABEL_140:
      operator delete(*v92);
      if ((*(char *)(v367 + 2607) & 0x80000000) == 0)
        goto LABEL_124;
      goto LABEL_141;
    }
  }
  else if ((*(char *)(v367 + 2655) & 0x80000000) == 0)
  {
    goto LABEL_122;
  }
  operator delete(*v95);
  if (*(char *)(v367 + 2895) < 0)
    goto LABEL_140;
LABEL_123:
  if ((*(char *)(v367 + 2607) & 0x80000000) == 0)
    goto LABEL_124;
LABEL_141:
  operator delete(*p_data);
LABEL_124:
  if (*(char *)(v367 + 2583) < 0)
  {
    operator delete(*(void **)v337);
    if ((*(char *)(v367 + 2559) & 0x80000000) == 0)
      goto LABEL_126;
  }
  else if ((*(char *)(v367 + 2559) & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(v348->__vftable);
LABEL_126:
  if (*(char *)(v367 + 2535) < 0)
  {
    operator delete(*v338);
    if ((*(char *)(v367 + 2511) & 0x80000000) == 0)
      goto LABEL_128;
  }
  else if ((*(char *)(v367 + 2511) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
  operator delete(v351->__r_.__value_.__l.__data_);
LABEL_128:
  if (*(char *)(v367 + 2487) < 0)
  {
    operator delete(*(void **)v354);
    if ((*(char *)(v367 + 2463) & 0x80000000) == 0)
    {
LABEL_130:
      if ((*(char *)(v367 + 2439) & 0x80000000) == 0)
        goto LABEL_131;
LABEL_148:
      operator delete(*(void **)v339);
      if ((*(char *)(v367 + 2415) & 0x80000000) == 0)
        goto LABEL_132;
      goto LABEL_149;
    }
  }
  else if ((*(char *)(v367 + 2463) & 0x80000000) == 0)
  {
    goto LABEL_130;
  }
  operator delete(*v25);
  if (*(char *)(v367 + 2439) < 0)
    goto LABEL_148;
LABEL_131:
  if ((*(char *)(v367 + 2415) & 0x80000000) == 0)
    goto LABEL_132;
LABEL_149:
  operator delete(*v346);
LABEL_132:
  if (*(char *)(v367 + 2391) < 0)
  {
    operator delete(*(void **)v365);
    if ((*(char *)(v367 + 2679) & 0x80000000) == 0)
    {
LABEL_134:
      if ((*v321 & 0x80000000) == 0)
        goto LABEL_135;
LABEL_152:
      operator delete(v357->__vftable);
      if (v327)
        goto LABEL_136;
      goto LABEL_153;
    }
  }
  else if ((*(char *)(v367 + 2679) & 0x80000000) == 0)
  {
    goto LABEL_134;
  }
  operator delete(v363->__r_.__value_.__l.__data_);
  if (*v321 < 0)
    goto LABEL_152;
LABEL_135:
  if (v327)
  {
LABEL_136:
    *(_BYTE *)(v367 + 2727) = 10;
    *(_WORD *)(v315 + 8) = 29806;
    *(_QWORD *)v315 = *(_QWORD *)"storefront";
    *(_BYTE *)(v367 + 2714) = 0;
    if (v312 < 0)
    {
      v96 = (void **)&v311->__r_.__value_.__l.__data_;
      std::string::__init_copy_ctor_external(v311, v314, v313);
    }
    else
    {
      *(_QWORD *)(v367 + 2728) = v314;
      *(_QWORD *)(v367 + 2736) = v313;
      v96 = (void **)&v311->__r_.__value_.__l.__data_;
      *(_DWORD *)(v367 + 2744) = *v310;
      *(_DWORD *)(v367 + 2747) = *(_DWORD *)((char *)v310 + 3);
      *(_BYTE *)(v367 + 2751) = v312;
    }
    AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, v315, (uint64_t)v96);
    if (*(char *)(v367 + 2751) < 0)
    {
      operator delete(*v96);
      if ((*(char *)(v367 + 2727) & 0x80000000) == 0)
        goto LABEL_172;
    }
    else if ((*(char *)(v367 + 2727) & 0x80000000) == 0)
    {
      goto LABEL_172;
    }
    v97 = *(void **)v315;
LABEL_171:
    operator delete(v97);
    goto LABEL_172;
  }
LABEL_153:
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*v80 + 64))(__p);
  if (!__p[24])
    goto LABEL_172;
  *(_BYTE *)(v367 + 2775) = 2;
  strcpy((char *)(v367 + 2752), "cc");
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v303, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
  }
  else
  {
    *(_OWORD *)&v303->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v303->__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[16];
  }
  AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, (uint64_t)v302, (uint64_t)v303);
  if ((*(char *)(v367 + 2799) & 0x80000000) == 0)
  {
    if ((*(char *)(v367 + 2775) & 0x80000000) == 0)
      goto LABEL_165;
LABEL_168:
    operator delete(*v302);
    if (!__p[24])
      goto LABEL_172;
    goto LABEL_169;
  }
  operator delete(v303->__r_.__value_.__l.__data_);
  if (*(char *)(v367 + 2775) < 0)
    goto LABEL_168;
LABEL_165:
  if (__p[24])
  {
LABEL_169:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_172;
    v97 = *(void **)__p;
    goto LABEL_171;
  }
LABEL_172:
  v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v80 + 24))(*v80);
  if (v98)
  {
    *(_BYTE *)(v367 + 2823) = 12;
    *(_DWORD *)(v324 + 8) = 1953390953;
    *(_QWORD *)v324 = *(_QWORD *)"buildVariant";
    *(_BYTE *)(v367 + 2812) = 0;
    if (v98 == 2)
    {
      *(_BYTE *)(v367 + 2847) = 4;
      strcpy((char *)(v367 + 2824), "seed");
    }
    else
    {
      *(_BYTE *)(v367 + 2847) = 8;
      strcpy((char *)(v367 + 2824), "internal");
    }
    AMSCore::URLBuilder::withQueryParameter((uint64_t)v356, v324, (uint64_t)v323);
    if (*(char *)(v367 + 2847) < 0)
    {
      operator delete(*v323);
      if ((*(char *)(v367 + 2823) & 0x80000000) == 0)
        goto LABEL_178;
    }
    else if ((*(char *)(v367 + 2823) & 0x80000000) == 0)
    {
      goto LABEL_178;
    }
    operator delete(*(void **)v324);
  }
LABEL_178:
  AMSCore::URLBuilder::URLBuilder(v360, (std::runtime_error *)v356);
  *(_QWORD *)(v367 + 3000) = v325;
  *(_QWORD *)(v367 + 3008) = v340;
  v99 = (char *)operator new(0x350uLL);
  v100 = (__int128 *)(v99 + 600);
  v101 = v99 + 544;
  v349 = (std::runtime_error *)(v99 + 624);
  v369 = (std::string *)(v99 + 704);
  v352 = (std::string *)(v99 + 728);
  v355 = v99 + 16;
  *((_QWORD *)v99 + 99) = 0xAAAAAAAAAAAAAAABLL * ((v328 - v329) >> 3);
  *((_QWORD *)v99 + 98) = v329;
  v358 = (std::runtime_error *)(v99 + 312);
  AMSCore::URLBuilder::URLBuilder((std::runtime_error *)(v99 + 312), v360);
  v102 = *(_QWORD *)(v367 + 3000);
  v103 = *(_QWORD *)(v367 + 3008);
  *((_QWORD *)v99 + 100) = v103;
  *v322 = 0;
  v322[1] = 0;
  do
    v104 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v104 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v99[24] = 0;
  v99[264] = 0;
  *((_QWORD *)v99 + 34) = 0;
  v347 = (std::runtime_error *)(v99 + 24);
  *((_QWORD *)v99 + 38) = 0;
  v366 = v99;
  v105 = (_QWORD *)operator new();
  *v105 = &off_1E25233B0;
  v105[1] = 0;
  v105[2] = 0;
  v105[3] = v355;
  *(_QWORD *)&v106 = v99 + 16;
  *((_QWORD *)&v106 + 1) = v105;
  *(_OWORD *)v359 = v106;
  if (v328 == v329)
  {
    std::__optional_destruct_base<std::expected<AMSCore::URLBuilder,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v347);
    AMSCore::URLBuilder::URLBuilder(v347, v358);
    v99[256] = 1;
    v99[264] = 1;
LABEL_328:
    *((_QWORD *)v99 + 68) = v355;
    *(_QWORD *)v99 = 0;
    AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend(v101);
    goto LABEL_329;
  }
  AMSCore::ServiceProvider<AMSCore::IAccountProvider>::getDefault((_QWORD *)v99 + 94);
  v107 = *((_QWORD *)v99 + 94);
  *((_QWORD *)v99 + 96) = v102;
  *((_QWORD *)v99 + 97) = v103;
  if (v103)
  {
    v108 = (unint64_t *)(v103 + 8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v107 + 40))(v107, v99 + 768);
  v110 = *((_OWORD *)v99 + 39);
  *(_OWORD *)(v99 + 808) = v110;
  v349->__vftable = 0;
  *((_QWORD *)v99 + 79) = 0;
  if (!atomic_load((unint64_t *)(v110 + 96)))
  {
    v99[840] = 0;
    v112 = (unint64_t *)(*((_QWORD *)v99 + 101) + 96);
    do
      v113 = __ldaxr(v112);
    while (__stlxr((unint64_t)v99, v112));
    if (!v113)
      goto LABEL_329;
  }
  v114 = *((_QWORD *)v99 + 101);
  if (!*(_BYTE *)(v114 + 88))
    goto LABEL_522;
  v115 = (const std::runtime_error *)(v114 + 8);
  v116 = *(_BYTE *)(v114 + 80);
  if (v116)
  {
    *((_QWORD *)v99 + 68) = *(_QWORD *)(v114 + 8);
    v117 = (const char **)(v99 + 552);
    p_imp = (std::__libcpp_refstring *)(v114 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)v99 + 34, v115);
    *((_OWORD *)v99 + 35) = *(_OWORD *)(v114 + 24);
    *((_QWORD *)v99 + 68) = off_1E2521330;
    v119 = (_QWORD *)(v114 + 48);
    v120 = *(_QWORD *)(v114 + 48);
    *((_QWORD *)v99 + 72) = *(_QWORD *)(v114 + 40);
    v121 = v99 + 584;
    *((_QWORD *)v99 + 73) = v120;
    v122 = *(_QWORD *)(v114 + 56);
    *((_QWORD *)v99 + 74) = v122;
    if (v122)
    {
      *(_QWORD *)(v120 + 16) = v121;
      *(_QWORD *)(v114 + 40) = v119;
      *v119 = 0;
      *(_QWORD *)(v114 + 56) = 0;
    }
    else
    {
      *((_QWORD *)v99 + 72) = v121;
    }
    v123 = (const std::runtime_error *)*((_QWORD *)v99 + 101);
    v124 = v123[4].__vftable;
    v115 = v123 + 4;
    *((_QWORD *)v99 + 75) = v124;
    v117 = (const char **)(v99 + 608);
    p_imp = &v115->__imp_;
  }
  *v117 = p_imp->__imp_;
  v115->__vftable = 0;
  v115->__imp_.__imp_ = 0;
  v99[616] = v116;
  v125 = *((_QWORD *)v99 + 102);
  if (v125)
  {
    v126 = (unint64_t *)(v125 + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      v128 = (std::__shared_weak_count *)*((_QWORD *)v99 + 102);
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)v99 + 79);
  if (v129)
  {
    p_shared_owners = (unint64_t *)&v129->__shared_owners_;
    do
      v131 = __ldaxr(p_shared_owners);
    while (__stlxr(v131 - 1, p_shared_owners));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)v99 + 97);
  if (!v132)
    goto LABEL_212;
  v133 = (unint64_t *)&v132->__shared_owners_;
  do
    v134 = __ldaxr(v133);
  while (__stlxr(v134 - 1, v133));
  if (!v134)
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
    v135 = (std::__shared_weak_count *)*((_QWORD *)v99 + 95);
    if (!v135)
      goto LABEL_216;
  }
  else
  {
LABEL_212:
    v135 = (std::__shared_weak_count *)*((_QWORD *)v99 + 95);
    if (!v135)
      goto LABEL_216;
  }
  v136 = (unint64_t *)&v135->__shared_owners_;
  do
    v137 = __ldaxr(v136);
  while (__stlxr(v137 - 1, v136));
  if (!v137)
  {
    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
    std::__shared_weak_count::__release_weak(v135);
    if (v99[616])
      goto LABEL_217;
LABEL_227:
    std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::runtime_error *)v99 + 34);
    *(_OWORD *)&__p[16] = *((_OWORD *)v99 + 35);
    *(_QWORD *)__p = off_1E2521330;
    v145 = *((_QWORD *)v99 + 73);
    v371 = (unsigned int **)*((_QWORD *)v99 + 72);
    v372 = (unsigned int *)v145;
    v373 = *((_QWORD *)v99 + 74);
    if (v373)
    {
      *(_QWORD *)(v145 + 16) = &v372;
      *((_QWORD *)v99 + 72) = v99 + 584;
      *((_QWORD *)v99 + 73) = 0;
      *((_QWORD *)v99 + 74) = 0;
    }
    else
    {
      v371 = &v372;
    }
    v374 = *v100;
    *(_QWORD *)v100 = 0;
    *((_QWORD *)v99 + 76) = 0;
    v375 = 1;
    std::runtime_error::runtime_error((std::runtime_error *)v384, (const std::runtime_error *)__p);
    *(_OWORD *)&v384[16] = *(_OWORD *)&__p[16];
    *(_QWORD *)v384 = off_1E2521330;
    v385 = v371;
    v386 = v372;
    v387 = v373;
    if (v373)
    {
      *((_QWORD *)v372 + 2) = &v386;
      v371 = &v372;
      v372 = 0;
      v373 = 0;
    }
    else
    {
      v385 = &v386;
    }
    v388 = v374;
    v374 = 0uLL;
    std::runtime_error::runtime_error(&v378, (const std::runtime_error *)v384);
    v379 = *(_OWORD *)&v384[16];
    v378.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v150 = v386;
    v380 = v385;
    v381 = v386;
    v382 = v387;
    if (v387)
    {
      *((_QWORD *)v386 + 2) = &v381;
      v150 = 0;
      v385 = &v386;
      v386 = 0;
      v387 = 0;
    }
    else
    {
      v380 = &v381;
    }
    v383 = v388;
    v388 = 0uLL;
    *(_QWORD *)v384 = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v385, v150);
    MEMORY[0x18D7898AC](v384);
    std::__optional_destruct_base<std::expected<AMSCore::URLBuilder,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v347);
    std::runtime_error::runtime_error(v347, &v378);
    v152 = v380;
    v151 = v381;
    *((_QWORD *)v99 + 8) = v381;
    v153 = v99 + 64;
    *(_OWORD *)(v99 + 40) = v379;
    *((_QWORD *)v99 + 3) = off_1E2521330;
    *((_QWORD *)v99 + 7) = v152;
    v154 = v382;
    *((_QWORD *)v99 + 9) = v382;
    if (v154)
    {
      *((_QWORD *)v151 + 2) = v153;
      v151 = 0;
      v380 = &v381;
      v381 = 0;
      v382 = 0;
    }
    else
    {
      *((_QWORD *)v99 + 7) = v153;
    }
    *((_OWORD *)v99 + 5) = v383;
    v383 = 0uLL;
    v99[256] = 0;
    v99[264] = 1;
    v378.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v380, v151);
    MEMORY[0x18D7898AC](&v378);
    if (!v375)
      goto LABEL_322;
    *(_QWORD *)__p = off_1E2521330;
    v155 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
    if (*((_QWORD *)&v374 + 1))
    {
      v156 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v371, v372);
    MEMORY[0x18D7898AC](__p);
    if (v99[616])
      goto LABEL_323;
    goto LABEL_248;
  }
LABEL_216:
  if (!v99[616])
    goto LABEL_227;
LABEL_217:
  (*(void (**)(_QWORD))(**((_QWORD **)v99 + 68) + 40))(*((_QWORD *)v99 + 68));
  v138 = *((_OWORD *)v99 + 47);
  *(_OWORD *)(v99 + 824) = v138;
  *((_QWORD *)v99 + 94) = 0;
  *((_QWORD *)v99 + 95) = 0;
  if (atomic_load((unint64_t *)(v138 + 96)))
    goto LABEL_221;
  v99[840] = 1;
  v140 = (unint64_t *)(*((_QWORD *)v99 + 103) + 96);
  do
    v141 = __ldaxr(v140);
  while (__stlxr((unint64_t)v99, v140));
  if (v141)
  {
LABEL_221:
    v142 = *((_QWORD *)v99 + 103);
    if (!*(_BYTE *)(v142 + 88))
      goto LABEL_522;
    v143 = (const std::runtime_error *)(v142 + 8);
    v144 = *(_BYTE *)(v142 + 80);
    if (v144)
    {
      *((_OWORD *)v99 + 39) = *(_OWORD *)(v142 + 8);
      *((_QWORD *)v99 + 80) = *(_QWORD *)(v142 + 24);
      *(_QWORD *)(v142 + 16) = 0;
      *(_QWORD *)(v142 + 24) = 0;
      v143->__vftable = 0;
    }
    else
    {
      std::runtime_error::runtime_error(v349, v143);
      *((_OWORD *)v99 + 40) = *(_OWORD *)(v142 + 24);
      *((_QWORD *)v99 + 78) = off_1E2521330;
      v146 = (_QWORD *)(v142 + 48);
      v147 = *(_QWORD *)(v142 + 48);
      *((_QWORD *)v99 + 82) = *(_QWORD *)(v142 + 40);
      v148 = v99 + 664;
      *((_QWORD *)v99 + 83) = v147;
      v149 = *(_QWORD *)(v142 + 56);
      *((_QWORD *)v99 + 84) = v149;
      if (v149)
      {
        *(_QWORD *)(v147 + 16) = v148;
        *(_QWORD *)(v142 + 40) = v146;
        *v146 = 0;
        *(_QWORD *)(v142 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v99 + 82) = v148;
      }
      v158 = *((_QWORD *)v99 + 103);
      *(_OWORD *)(v99 + 680) = *(_OWORD *)(v158 + 64);
      *(_QWORD *)(v158 + 64) = 0;
      *(_QWORD *)(v158 + 72) = 0;
    }
    v99[696] = v144;
    v159 = *((_QWORD *)v99 + 104);
    if (!v159)
      goto LABEL_255;
    v160 = (unint64_t *)(v159 + 8);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      v182 = (std::__shared_weak_count *)*((_QWORD *)v99 + 104);
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
      v162 = (std::__shared_weak_count *)*((_QWORD *)v99 + 95);
      if (!v162)
        goto LABEL_259;
    }
    else
    {
LABEL_255:
      v162 = (std::__shared_weak_count *)*((_QWORD *)v99 + 95);
      if (!v162)
        goto LABEL_259;
    }
    v163 = (unint64_t *)&v162->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
      if (v99[696])
        goto LABEL_260;
      goto LABEL_297;
    }
LABEL_259:
    if (v99[696])
    {
LABEL_260:
      v344 = v99 + 544;
      v165 = (std::string *)*((_QWORD *)v99 + 78);
      v364 = (std::string *)*((_QWORD *)v99 + 79);
      if (v165 != v364)
      {
        v166 = *((_QWORD *)v99 + 98) + 24 * *((_QWORD *)v99 + 99);
        do
        {
          v167 = v165->__r_.__value_.__r.__words[0] + 48;
          v168 = *(const std::string::value_type **)v167;
          v169 = *(char *)(v165->__r_.__value_.__r.__words[0] + 71);
          v170 = *(_QWORD *)(v165->__r_.__value_.__r.__words[0] + 56);
          if (v169 >= 0)
            v171 = *(unsigned __int8 *)(v165->__r_.__value_.__r.__words[0] + 71);
          else
            v171 = *(_QWORD *)(v165->__r_.__value_.__r.__words[0] + 56);
          if (v169 >= 0)
            v172 = (unsigned __int8 *)(v165->__r_.__value_.__r.__words[0] + 48);
          else
            v172 = *(unsigned __int8 **)(v165->__r_.__value_.__r.__words[0] + 48);
          v173 = *((_QWORD *)v99 + 98);
          v174 = v173;
          do
          {
            v175 = *(unsigned __int8 *)(v174 + 23);
            if ((v175 & 0x80u) == 0)
              v176 = *(unsigned __int8 *)(v174 + 23);
            else
              v176 = *(_QWORD *)(v174 + 8);
            if (v176 == v171)
            {
              if ((v175 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v174, v172, *(_QWORD *)(v174 + 8)))
                  goto LABEL_282;
              }
              else
              {
                if (!*(_BYTE *)(v174 + 23))
                  goto LABEL_282;
                v177 = 0;
                while (*(unsigned __int8 *)(v174 + v177) == v172[v177])
                {
                  if (v175 == ++v177)
                    goto LABEL_282;
                }
              }
            }
            v174 += 24;
          }
          while (v174 != v166);
          v174 = v166;
LABEL_282:
          v178 = v174 - v173;
          v99 = v366;
          if (0xAAAAAAAAAAAAAAABLL * (v178 >> 3) == *((_QWORD *)v366 + 99))
            goto LABEL_263;
          if (v169 < 0)
          {
            std::string::__init_copy_ctor_external(v369, v168, v170);
          }
          else
          {
            v179 = *(_OWORD *)v167;
            v369->__r_.__value_.__r.__words[2] = *(_QWORD *)(v167 + 16);
            *(_OWORD *)&v369->__r_.__value_.__l.__data_ = v179;
          }
          v180 = v165->__r_.__value_.__r.__words[0];
          if (*(char *)(v165->__r_.__value_.__r.__words[0] + 119) < 0)
          {
            std::string::__init_copy_ctor_external(v352, *(const std::string::value_type **)(v180 + 96), *(_QWORD *)(v180 + 104));
          }
          else
          {
            v181 = *(_OWORD *)(v180 + 96);
            v352->__r_.__value_.__r.__words[2] = *(_QWORD *)(v180 + 112);
            *(_OWORD *)&v352->__r_.__value_.__l.__data_ = v181;
          }
          AMSCore::URLBuilder::withQueryParameter((uint64_t)v358, (uint64_t)v369, (uint64_t)v352);
          if (v366[751] < 0)
          {
            operator delete(v352->__r_.__value_.__l.__data_);
            if (v366[727] < 0)
              goto LABEL_291;
          }
          else if (v366[727] < 0)
          {
LABEL_291:
            operator delete(v369->__r_.__value_.__l.__data_);
          }
LABEL_263:
          v165 = (std::string *)((char *)v165 + 8);
        }
        while (v165 != v364);
      }
      std::__optional_destruct_base<std::expected<AMSCore::URLBuilder,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v347);
      AMSCore::URLBuilder::URLBuilder(v347, v358);
      v99[256] = 1;
      v99[264] = 1;
      v101 = v344;
      goto LABEL_316;
    }
LABEL_297:
    std::runtime_error::runtime_error((std::runtime_error *)__p, v349);
    *(_OWORD *)&__p[16] = *((_OWORD *)v99 + 40);
    *(_QWORD *)__p = off_1E2521330;
    v183 = *((_QWORD *)v99 + 83);
    v371 = (unsigned int **)*((_QWORD *)v99 + 82);
    v372 = (unsigned int *)v183;
    v373 = *((_QWORD *)v99 + 84);
    if (v373)
    {
      *(_QWORD *)(v183 + 16) = &v372;
      *((_QWORD *)v99 + 82) = v99 + 664;
      *((_QWORD *)v99 + 83) = 0;
      *((_QWORD *)v99 + 84) = 0;
    }
    else
    {
      v371 = &v372;
    }
    v374 = *(_OWORD *)(v99 + 680);
    *((_QWORD *)v99 + 85) = 0;
    *((_QWORD *)v99 + 86) = 0;
    v375 = 1;
    std::runtime_error::runtime_error((std::runtime_error *)v384, (const std::runtime_error *)__p);
    *(_OWORD *)&v384[16] = *(_OWORD *)&__p[16];
    *(_QWORD *)v384 = off_1E2521330;
    v385 = v371;
    v386 = v372;
    v387 = v373;
    if (v373)
    {
      *((_QWORD *)v372 + 2) = &v386;
      v371 = &v372;
      v372 = 0;
      v373 = 0;
    }
    else
    {
      v385 = &v386;
    }
    v388 = v374;
    v374 = 0uLL;
    std::runtime_error::runtime_error(&v378, (const std::runtime_error *)v384);
    v379 = *(_OWORD *)&v384[16];
    v378.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v184 = v386;
    v380 = v385;
    v381 = v386;
    v382 = v387;
    if (v387)
    {
      *((_QWORD *)v386 + 2) = &v381;
      v184 = 0;
      v385 = &v386;
      v386 = 0;
      v387 = 0;
    }
    else
    {
      v380 = &v381;
    }
    v383 = v388;
    v388 = 0uLL;
    *(_QWORD *)v384 = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v385, v184);
    MEMORY[0x18D7898AC](v384);
    std::__optional_destruct_base<std::expected<AMSCore::URLBuilder,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v347);
    std::runtime_error::runtime_error(v347, &v378);
    v186 = v380;
    v185 = v381;
    *((_QWORD *)v99 + 8) = v381;
    v187 = v99 + 64;
    *(_OWORD *)(v99 + 40) = v379;
    *((_QWORD *)v99 + 3) = off_1E2521330;
    *((_QWORD *)v99 + 7) = v186;
    v188 = v382;
    *((_QWORD *)v99 + 9) = v382;
    if (v188)
    {
      *((_QWORD *)v185 + 2) = v187;
      v185 = 0;
      v380 = &v381;
      v381 = 0;
      v382 = 0;
    }
    else
    {
      *((_QWORD *)v99 + 7) = v187;
    }
    *((_OWORD *)v99 + 5) = v383;
    v383 = 0uLL;
    v99[256] = 0;
    v99[264] = 1;
    v378.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v380, v185);
    MEMORY[0x18D7898AC](&v378);
    if (v375)
    {
      *(_QWORD *)__p = off_1E2521330;
      v189 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
      if (*((_QWORD *)&v374 + 1))
      {
        v190 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v371, v372);
      MEMORY[0x18D7898AC](__p);
    }
LABEL_316:
    v192 = (uint64_t *)*((_QWORD *)v99 + 78);
    if (v99[696])
    {
      if (v192)
      {
        v193 = (uint64_t *)*((_QWORD *)v99 + 79);
        v194 = (std::runtime_error_vtbl *)*((_QWORD *)v99 + 78);
        if (v193 != v192)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v193, 0);
          while (v193 != v192);
          v194 = v349->__vftable;
        }
        *((_QWORD *)v99 + 79) = v192;
        operator delete(v194);
      }
LABEL_322:
      if (v99[616])
      {
LABEL_323:
        v195 = (std::__shared_weak_count *)*((_QWORD *)v99 + 69);
        if (v195)
        {
          v196 = (unint64_t *)&v195->__shared_owners_;
          do
            v197 = __ldaxr(v196);
          while (__stlxr(v197 - 1, v196));
          if (!v197)
          {
            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
            std::__shared_weak_count::__release_weak(v195);
          }
        }
        goto LABEL_328;
      }
      goto LABEL_248;
    }
    ((void (*)(std::runtime_error *))*v192)(v349);
    if (v99[616])
      goto LABEL_323;
LABEL_248:
    (**(void (***)(_BYTE *))v101)(v101);
    goto LABEL_328;
  }
LABEL_329:
  v198 = *(_OWORD *)(v367 + 1248);
  *(_OWORD *)(v367 + 3120) = v198;
  *(_QWORD *)v359 = 0;
  *((_QWORD *)v359 + 1) = 0;
  if (!atomic_load((unint64_t *)(v198 + 256)))
  {
    v362[135] = 0;
    v200 = (unint64_t *)(*(_QWORD *)(v367 + 3120) + 256);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v367, v200));
    if (!v201)
      return;
  }
  v202 = *(_QWORD *)(v367 + 3120);
  if (!*(_BYTE *)(v202 + 248))
    goto LABEL_522;
  v203 = (std::runtime_error *)(v202 + 8);
  v204 = *(_BYTE *)(v202 + 240);
  if (v204)
  {
    AMSCore::URLBuilder::URLBuilder(v320, v203);
  }
  else
  {
    std::runtime_error::runtime_error(v320, v203);
    *(_OWORD *)(v367 + 488) = *(_OWORD *)(v202 + 24);
    *(_QWORD *)(v367 + 472) = off_1E2521330;
    v205 = (_QWORD *)(v202 + 48);
    v206 = *(_QWORD *)(v202 + 48);
    v207 = v367 + 512;
    *(_QWORD *)(v367 + 504) = *(_QWORD *)(v202 + 40);
    *(_QWORD *)(v367 + 512) = v206;
    v208 = *(_QWORD *)(v202 + 56);
    *(_QWORD *)(v367 + 520) = v208;
    if (v208)
    {
      *(_QWORD *)(v206 + 16) = v207;
      *(_QWORD *)(v202 + 40) = v205;
      *v205 = 0;
      *(_QWORD *)(v202 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(v367 + 504) = v207;
    }
    v209 = *(_QWORD *)(v367 + 3120);
    *(_OWORD *)(v367 + 528) = *(_OWORD *)(v209 + 64);
    *(_QWORD *)(v209 + 64) = 0;
    *(_QWORD *)(v209 + 72) = 0;
  }
  *(_BYTE *)(v367 + 704) = v204;
  v210 = *(_QWORD *)(v367 + 3128);
  v211 = v367 + 1968;
  if (v210)
  {
    v212 = (unint64_t *)(v210 + 8);
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      v214 = *(std::__shared_weak_count **)(v367 + 3128);
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v215 = *(std::__shared_weak_count **)(v367 + 1256);
  if (v215)
  {
    v216 = (unint64_t *)&v215->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = *(std::__shared_weak_count **)(v367 + 3008);
  if (v218)
  {
    v219 = (unint64_t *)&v218->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)(v367 + 1704));
  if (*(_BYTE *)(v367 + 1696))
  {
    *(_QWORD *)(v367 + 1624) = off_1E2521330;
    v221 = *(std::__shared_weak_count **)(v367 + 1688);
    if (v221)
    {
      v222 = (unint64_t *)&v221->__shared_owners_;
      do
        v223 = __ldaxr(v222);
      while (__stlxr(v223 - 1, v222));
      if (!v223)
      {
        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
        std::__shared_weak_count::__release_weak(v221);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v367 + 1656, *(unsigned int **)(v367 + 1664));
    MEMORY[0x18D7898AC](v360);
  }
  v224 = *(unsigned __int8 *)(v367 + 704);
  if (*(_BYTE *)(v367 + 704))
  {
    AMSCore::URLBuilder::operator=(v356, (AMSCore::Error *)v320);
    v225 = 0;
    if (*(_BYTE *)(v367 + 704))
      goto LABEL_364;
LABEL_385:
    ((void (*)(std::runtime_error *))v320->~runtime_error)(v320);
    if (!v224)
      goto LABEL_464;
    goto LABEL_386;
  }
  std::runtime_error::runtime_error((std::runtime_error *)__p, v320);
  *(_OWORD *)&__p[16] = *(_OWORD *)(v367 + 488);
  *(_QWORD *)__p = off_1E2521330;
  v229 = *(_QWORD *)(v367 + 512);
  v371 = *(unsigned int ***)(v367 + 504);
  v372 = (unsigned int *)v229;
  v373 = *(_QWORD *)(v367 + 520);
  if (v373)
  {
    *(_QWORD *)(v229 + 16) = &v372;
    *(_QWORD *)(v367 + 504) = v367 + 512;
    *(_QWORD *)(v367 + 512) = 0;
    *(_QWORD *)(v367 + 520) = 0;
  }
  else
  {
    v371 = &v372;
  }
  v374 = *(_OWORD *)(v367 + 528);
  *(_QWORD *)(v367 + 536) = 0;
  *(_QWORD *)(v367 + 528) = 0;
  std::runtime_error::runtime_error((std::runtime_error *)v384, (const std::runtime_error *)__p);
  *(_OWORD *)&v384[16] = *(_OWORD *)&__p[16];
  v230 = v372;
  *(_QWORD *)v384 = off_1E2521330;
  v385 = v371;
  v386 = v372;
  v387 = v373;
  if (v373)
  {
    *((_QWORD *)v372 + 2) = &v386;
    v230 = 0;
    v371 = &v372;
    v372 = 0;
    v373 = 0;
  }
  else
  {
    v385 = &v386;
  }
  v211 = v367 + 1968;
  v388 = v374;
  v374 = 0uLL;
  *(_QWORD *)__p = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v371, v230);
  MEMORY[0x18D7898AC](__p);
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v342, (std::runtime_error *)v384);
  *(_QWORD *)v384 = off_1E2521330;
  v231 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
  if (*((_QWORD *)&v388 + 1))
  {
    v232 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v385, v386);
  MEMORY[0x18D7898AC](v384);
  v225 = 3;
  if (!*(_BYTE *)(v367 + 704))
    goto LABEL_385;
LABEL_364:
  AMSCore::URL::~URL((AMSCore::URL *)(v367 + 552));
  if (*(_BYTE *)(v367 + 544))
  {
    *(_QWORD *)(v367 + 472) = off_1E2521330;
    v226 = *(std::__shared_weak_count **)(v367 + 536);
    if (v226)
    {
      v227 = (unint64_t *)&v226->__shared_owners_;
      do
        v228 = __ldaxr(v227);
      while (__stlxr(v228 - 1, v227));
      if (!v228)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v367 + 504, *(unsigned int **)(v367 + 512));
    MEMORY[0x18D7898AC](v320);
  }
  if (!v224)
  {
LABEL_464:
    if (**(char **)(v367 + 3112) < 0)
    {
      operator delete(v353->__r_.__value_.__l.__data_);
      if ((*(char *)(v367 + 2967) & 0x80000000) == 0)
      {
LABEL_466:
        v283 = *(std::__shared_weak_count **)(v367 + 2976);
        if (!v283)
          goto LABEL_474;
        goto LABEL_470;
      }
    }
    else if ((*(char *)(v367 + 2967) & 0x80000000) == 0)
    {
      goto LABEL_466;
    }
    operator delete(*v361);
    v283 = *(std::__shared_weak_count **)(v367 + 2976);
    if (!v283)
      goto LABEL_474;
LABEL_470:
    v284 = (unint64_t *)&v283->__shared_owners_;
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
LABEL_474:
    AMSCore::URL::~URL(v343);
    if (*(_BYTE *)(v367 + 1928))
    {
      *(_QWORD *)(v367 + 1856) = off_1E2521330;
      v286 = *(std::__shared_weak_count **)(v367 + 1920);
      if (v286)
      {
        v287 = (unint64_t *)&v286->__shared_owners_;
        do
          v288 = __ldaxr(v287);
        while (__stlxr(v288 - 1, v287));
        if (!v288)
        {
          ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
          std::__shared_weak_count::__release_weak(v286);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v367 + 1888, *(unsigned int **)(v367 + 1896));
      MEMORY[0x18D7898AC](v356);
    }
    if (v225 == 3)
    {
      *(_QWORD *)(v367 + 3152) = 0;
      *(_QWORD *)(v367 + 472) = v304;
      *(_QWORD *)v367 = 0;
      AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v320);
      return;
    }
    v289 = *(_QWORD **)(v367 + 464);
    if (v289 == (_QWORD *)(v367 + 440))
    {
      v290 = 4;
      v289 = (_QWORD *)(v367 + 440);
    }
    else
    {
      if (!v289)
        goto LABEL_488;
      v290 = 5;
    }
    (*(void (**)(void))(*v289 + 8 * v290))();
LABEL_488:
    if (*(_BYTE *)(v367 + 424))
    {
      if (*(_BYTE *)(v367 + 416))
      {
        v291 = *(std::__shared_weak_count **)(v367 + 408);
        if (v291)
        {
          v292 = (unint64_t *)&v291->__shared_owners_;
          do
            v293 = __ldaxr(v292);
          while (__stlxr(v293 - 1, v292));
          if (!v293)
          {
            ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
            std::__shared_weak_count::__release_weak(v291);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v342);
      }
      else
      {
        (**(void (***)(AMSCore::EncodeHTTPRequestTask::Options *))v342)(v342);
      }
    }
    v294 = *(_QWORD *)(v367 + 3104);
    do
    {
      v295 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
      v296 = v295 - 1;
    }
    while (__stlxr(v296, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
    if (!v296)
      MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
    if (v294)
    {
      v297 = (unint64_t *)(*(_QWORD *)(v367 + 3104) + 8);
      do
        v298 = __ldaxr(v297);
      while (__stlxr(v298 - 1, v297));
      if (!v298)
      {
        v299 = *(std::__shared_weak_count **)(v367 + 3104);
        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
        std::__shared_weak_count::__release_weak(v299);
      }
    }
    v300 = *(void ***)(v367 + 3080);
    if (v300)
    {
      v301 = *(void ***)(v367 + 3088);
      if (v301 == v300)
      {
        v301 = *(void ***)(v367 + 3080);
      }
      else
      {
        do
        {
          if (*((char *)v301 - 1) < 0)
          {
            operator delete(*(v301 - 3));
            v300 = *(void ***)(v367 + 3080);
          }
          v301 -= 3;
        }
        while (v301 != v300);
      }
      operator delete(v301);
    }
    if (*(_BYTE *)(v367 + 3185))
    {
      if (*(char *)(v367 + 3186) < 0)
        operator delete(*(void **)(v367 + 3072));
    }
    if (*(char *)(v367 + 3184) < 0)
    {
      operator delete(*(void **)(v367 + 3056));
      if ((*(char *)(v367 + 3183) & 0x80000000) == 0)
        goto LABEL_515;
    }
    else if ((*(char *)(v367 + 3183) & 0x80000000) == 0)
    {
LABEL_515:
      operator delete((void *)v367);
      return;
    }
    operator delete(*(void **)(v367 + 3048));
    goto LABEL_515;
  }
LABEL_386:
  *(_BYTE *)(v367 + 2088) = 0;
  *(_BYTE *)(v367 + 2112) = 0;
  if (*(_BYTE *)(v367 + 1960))
  {
    *(_OWORD *)v350 = *(_OWORD *)v343;
    *((_QWORD *)v350 + 2) = *(_QWORD *)(v367 + 1952);
    *(_QWORD *)(v367 + 1944) = 0;
    *(_QWORD *)(v367 + 1952) = 0;
    *(_QWORD *)v343 = 0;
    *(_BYTE *)(v367 + 2112) = 1;
  }
  *(_BYTE *)(v367 + 2120) = 0;
  *(_BYTE *)(v367 + 2144) = 0;
  if (*(_BYTE *)(v367 + 1992))
  {
    *(_OWORD *)(v367 + 2120) = *(_OWORD *)v211;
    *(_QWORD *)(v367 + 2136) = *(_QWORD *)(v211 + 16);
    *(_QWORD *)(v211 + 8) = 0;
    *(_QWORD *)(v211 + 16) = 0;
    *(_QWORD *)v211 = 0;
    *(_BYTE *)(v367 + 2144) = 1;
  }
  *(_BYTE *)(v367 + 2152) = 0;
  *(_BYTE *)(v367 + 2176) = 0;
  if (*(_BYTE *)(v367 + 2024))
  {
    *(_OWORD *)(v367 + 2152) = *v318;
    *(_QWORD *)(v367 + 2168) = *(_QWORD *)(v367 + 2016);
    *(_QWORD *)(v367 + 2008) = 0;
    *(_QWORD *)(v367 + 2016) = 0;
    *(_QWORD *)v318 = 0;
    *(_BYTE *)(v367 + 2176) = 1;
  }
  *(_DWORD *)(v367 + 2184) = *(_DWORD *)(v367 + 2032);
  *(_QWORD *)(v367 + 2192) = v367 + 2192;
  *(_QWORD *)(v367 + 2200) = v367 + 2192;
  *(_QWORD *)(v367 + 2208) = 0;
  v234 = *(_QWORD *)(v367 + 2056);
  if (v234)
  {
    v235 = *(uint64_t **)(v367 + 2048);
    v236 = *(_QWORD *)(v367 + 2040);
    v237 = *v235;
    *(_QWORD *)(v237 + 8) = *(_QWORD *)(v236 + 8);
    **(_QWORD **)(v236 + 8) = v237;
    v238 = *(_QWORD *)(v367 + 2192);
    *(_QWORD *)(v238 + 8) = v235;
    *v235 = v238;
    *(_QWORD *)(v367 + 2192) = v236;
    *(_QWORD *)(v236 + 8) = v367 + 2192;
    *(_QWORD *)(v367 + 2208) = v234;
    *(_QWORD *)(v367 + 2056) = 0;
  }
  v239 = *(_QWORD *)(v367 + 3104);
  v240 = *(_QWORD *)(v367 + 3096);
  *(_OWORD *)(v367 + 2216) = *(_OWORD *)(v367 + 2064);
  *(_QWORD *)(v367 + 2232) = *(_QWORD *)(v367 + 2080);
  *(_QWORD *)(v367 + 2072) = 0;
  *(_QWORD *)(v367 + 2064) = 0;
  *(_QWORD *)(v367 + 2080) = 0;
  *(_QWORD *)(v367 + 2984) = v240;
  *(_QWORD *)(v367 + 2992) = v239;
  if (v239)
  {
    v241 = (unint64_t *)(v239 + 8);
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  AMSCore::EncodeHTTPRequestTask::internal::makeOptionsBuilder((uint64_t)v359, (__int128 *)v350, v306);
  v243 = *(std::__shared_weak_count **)(v367 + 2992);
  if (v243)
  {
    v244 = (unint64_t *)&v243->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = *(unsigned __int8 *)(v367 + 3185);
  AMSCore::URL::~URL(v350);
  if (v246)
  {
    v247 = *(char *)(v367 + 3186);
    __p[23] = 19;
    strcpy(__p, "X-Apple-Store-Front");
    v248 = *(const std::string::value_type **)(v367 + 3072);
    v249 = *(_QWORD *)(v367 + 3064);
    v250 = (uint64_t)v308;
    if (v247 < 0)
    {
      std::string::__init_copy_ctor_external(v307, v248, v249);
    }
    else
    {
      *(_QWORD *)(v367 + 2272) = v248;
      *(_QWORD *)(v367 + 2280) = v249;
      *(_DWORD *)(v367 + 2288) = *v310;
      *(_DWORD *)(v367 + 2291) = *(_DWORD *)((char *)v310 + 3);
      *(_BYTE *)(v367 + 2295) = v247;
    }
    *(_BYTE *)(v367 + 2296) = 1;
    AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v359, (uint64_t)__p, (uint64_t)v307);
    v252 = (uint64_t)v305;
    if (*(_BYTE *)(v367 + 2296) && *(char *)(v367 + 2295) < 0)
      operator delete(v307->__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v251 = 2;
  }
  else
  {
    v251 = 3;
    v252 = (uint64_t)v305;
    v250 = (uint64_t)v308;
  }
  *(_DWORD *)(v367 + 1424) = v251;
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(v309);
  __p[23] = 15;
  strcpy(__p, "Accept-Language");
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v367 + 3016) + 56))(v384);
  *(_OWORD *)v250 = *(_OWORD *)v384;
  *(_QWORD *)(v250 + 16) = *(_QWORD *)&v384[16];
  memset(v384, 0, 24);
  *(_BYTE *)(v367 + 2328) = 1;
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v359, (uint64_t)__p, v250);
  if (*(_BYTE *)(v367 + 2328) && *(char *)(v367 + 2327) < 0)
    operator delete(*(void **)v250);
  if ((v384[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v384);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_418;
LABEL_431:
    operator delete(*(void **)__p);
    goto LABEL_418;
  }
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_431;
LABEL_418:
  v253 = (AMSCore::UserAgent *)*((_QWORD *)v362 + 8);
  __p[23] = 10;
  strcpy(__p, "User-Agent");
  AMSCore::UserAgent::create(v253, (std::string *)v384);
  *(_OWORD *)v252 = *(_OWORD *)v384;
  *(_QWORD *)(v252 + 16) = *(_QWORD *)&v384[16];
  memset(v384, 0, 24);
  *(_BYTE *)(v367 + 2264) = 1;
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v359, (uint64_t)__p, v252);
  if (*(_BYTE *)(v367 + 2264) && *(char *)(v367 + 2263) < 0)
    operator delete(*(void **)v252);
  if ((v384[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v384);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_423;
LABEL_433:
    operator delete(*(void **)__p);
    goto LABEL_423;
  }
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_433;
LABEL_423:
  *(_BYTE *)(v367 + 1584) = v362[143];
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v319, (uint64_t)v359);
  AMSCore::EncodeHTTPRequestTask::perform(v362, (uint64_t)v319);
  v254 = *(_OWORD *)v362;
  *(_OWORD *)(v367 + 3136) = *(_OWORD *)v362;
  *(_QWORD *)v362 = 0;
  *((_QWORD *)v362 + 1) = 0;
  if (atomic_load((unint64_t *)(v254 + 416)))
    goto LABEL_427;
  v362[135] = 1;
  v256 = (unint64_t *)(*(_QWORD *)(v367 + 3136) + 416);
  do
    v257 = __ldaxr(v256);
  while (__stlxr(v367, v256));
  if (v257)
  {
LABEL_427:
    v258 = *(_QWORD *)(v367 + 3136);
    if (*(_BYTE *)(v258 + 408))
    {
      v259 = (const std::runtime_error *)(v258 + 8);
      v260 = *(_BYTE *)(v258 + 400);
      if (v260)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v320, (uint64_t)v259);
        v261 = (_QWORD *)(v258 + 384);
        *(_QWORD *)(v367 + 848) = *(_QWORD *)(v258 + 384);
        v262 = (_QWORD *)(v367 + 856);
        v263 = (_QWORD *)(v258 + 392);
      }
      else
      {
        std::runtime_error::runtime_error(v320, v259);
        *(_OWORD *)(v367 + 488) = *(_OWORD *)(v258 + 24);
        *(_QWORD *)(v367 + 472) = off_1E2521330;
        v264 = (_QWORD *)(v258 + 48);
        v265 = *(_QWORD *)(v258 + 48);
        v266 = v367 + 512;
        *(_QWORD *)(v367 + 504) = *(_QWORD *)(v258 + 40);
        *(_QWORD *)(v367 + 512) = v265;
        v267 = *(_QWORD *)(v258 + 56);
        *(_QWORD *)(v367 + 520) = v267;
        if (v267)
        {
          *(_QWORD *)(v265 + 16) = v266;
          *(_QWORD *)(v258 + 40) = v264;
          *v264 = 0;
          *(_QWORD *)(v258 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v367 + 504) = v266;
        }
        v268 = *(_QWORD *)(v367 + 3136);
        v269 = *(_QWORD *)(v268 + 64);
        v261 = (_QWORD *)(v268 + 64);
        *(_QWORD *)(v367 + 528) = v269;
        v262 = (_QWORD *)(v367 + 536);
        v263 = v261 + 1;
      }
      *v262 = *v263;
      *v261 = 0;
      v261[1] = 0;
      *(_BYTE *)(v367 + 864) = v260;
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)v342, v320);
      if (*(_BYTE *)(v367 + 864))
      {
        v270 = *(std::__shared_weak_count **)(v367 + 856);
        if (v270)
        {
          v271 = (unint64_t *)&v270->__shared_owners_;
          do
            v272 = __ldaxr(v271);
          while (__stlxr(v272 - 1, v271));
          if (!v272)
          {
            ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
            std::__shared_weak_count::__release_weak(v270);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v320->__vftable);
        v273 = *(_QWORD *)(v367 + 3144);
        if (!v273)
          goto LABEL_453;
      }
      else
      {
        ((void (*)(std::runtime_error *))v320->~runtime_error)(v320);
        v273 = *(_QWORD *)(v367 + 3144);
        if (!v273)
        {
LABEL_453:
          v277 = *(std::__shared_weak_count **)(v367 + 3040);
          if (v277)
          {
            v278 = (unint64_t *)&v277->__shared_owners_;
            do
              v279 = __ldaxr(v278);
            while (__stlxr(v279 - 1, v278));
            if (!v279)
            {
              ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
              std::__shared_weak_count::__release_weak(v277);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v319);
          v280 = *(std::__shared_weak_count **)(v367 + 3024);
          if (v280)
          {
            v281 = (unint64_t *)&v280->__shared_owners_;
            do
              v282 = __ldaxr(v281);
            while (__stlxr(v282 - 1, v281));
            if (!v282)
            {
              ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
              std::__shared_weak_count::__release_weak(v280);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v359);
          v225 = 3;
          goto LABEL_464;
        }
      }
      v274 = (unint64_t *)(v273 + 8);
      do
        v275 = __ldaxr(v274);
      while (__stlxr(v275 - 1, v274));
      if (!v275)
      {
        v276 = *(std::__shared_weak_count **)(v367 + 3144);
        ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
        std::__shared_weak_count::__release_weak(v276);
      }
      goto LABEL_453;
    }
LABEL_522:
    __break(1u);
  }
}

void sub_18CC0B6C8(void *a1)
{
  __cxa_end_catch();
  __clang_call_terminate(a1);
}

void sub_18CC0B7C0()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC0B20CLL);
}

void sub_18CC0B7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  void **v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;

  if (*(_BYTE *)(v72 + 1928))
  {
    *(_QWORD *)(a71 + 1856) = off_1E2521330;
    v73 = *(std::__shared_weak_count **)(a71 + 1920);
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(p_shared_owners);
      while (__stlxr(v75 - 1, p_shared_owners));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a71 + 1888, *(unsigned int **)(a71 + 1896));
    MEMORY[0x18D7898AC](a63);
  }
  if (*(char *)(a71 + 2943) < 0)
    operator delete(*v71);
  JUMPOUT(0x18CC0B7ACLL);
}

void AMSCore::LoadNetworkBagTask::encodeHTTPRequest(unint64_t a1)
{
  AMSCore::Error *v2;
  void **v3;
  void **v4;
  AMSCore::Error *v5;
  unint64_t v6;
  uint64_t v7;
  const std::runtime_error *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  std::runtime_error *v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  void **v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  int v95;
  const std::string::value_type *v96;
  std::string::size_type v97;
  int v98;
  AMSCore::UserAgent *v99;
  __int128 *v100;
  __int128 v101;
  unint64_t *v103;
  unint64_t v104;
  AMSCore::Error *v105;
  std::runtime_error v106;
  __int128 v107;
  unsigned int **v108;
  uint64_t v109;
  unsigned int *v110;
  __int128 v111;
  _BYTE v112[32];
  unsigned int **v113;
  unsigned int *v114[2];
  __int128 v115;

  v2 = (AMSCore::Error *)(a1 + 472);
  v3 = (void **)(a1 + 872);
  v4 = (void **)(a1 + 1248);
  v5 = (AMSCore::Error *)(a1 + 1856);
  v6 = a1 + 16;
  if (*(_BYTE *)(a1 + 3167))
    goto LABEL_2;
  v105 = (AMSCore::Error *)(a1 + 1856);
  v13 = *(_QWORD *)(a1 + 3120);
  if (!*(_BYTE *)(v13 + 248))
  {
LABEL_189:
    __break(1u);
    return;
  }
  v14 = (std::runtime_error *)(v13 + 8);
  v15 = *(_BYTE *)(v13 + 240);
  if (v15)
  {
    AMSCore::URLBuilder::URLBuilder((std::runtime_error *)(a1 + 472), v14);
    v5 = v105;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 472), v14);
    *(_OWORD *)(a1 + 488) = *(_OWORD *)(v13 + 24);
    *(_QWORD *)(a1 + 472) = off_1E2521330;
    v20 = (_QWORD *)(v13 + 48);
    v21 = *(_QWORD *)(v13 + 48);
    v22 = a1 + 512;
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(a1 + 512) = v21;
    v23 = *(_QWORD *)(v13 + 56);
    *(_QWORD *)(a1 + 520) = v23;
    if (v23)
    {
      *(_QWORD *)(v21 + 16) = v22;
      *(_QWORD *)(v13 + 40) = v20;
      *v20 = 0;
      *(_QWORD *)(v13 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 504) = v22;
    }
    v5 = v105;
    v59 = *(_QWORD *)(a1 + 3120);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(v59 + 64);
    *(_QWORD *)(v59 + 64) = 0;
    *(_QWORD *)(v59 + 72) = 0;
  }
  *(_BYTE *)(a1 + 704) = v15;
  v60 = *(_QWORD *)(a1 + 3128);
  if (v60)
  {
    v61 = (unint64_t *)(v60 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      v63 = *(std::__shared_weak_count **)(a1 + 3128);
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v64 = *(std::__shared_weak_count **)(a1 + 1256);
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(p_shared_owners);
    while (__stlxr(v66 - 1, p_shared_owners));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = *(std::__shared_weak_count **)(a1 + 3008);
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1704));
  if (*(_BYTE *)(a1 + 1696))
  {
    *(_QWORD *)(a1 + 1624) = off_1E2521330;
    v70 = *(std::__shared_weak_count **)(a1 + 1688);
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1656, *(unsigned int **)(a1 + 1664));
    MEMORY[0x18D7898AC](a1 + 1624);
  }
  v73 = *(unsigned __int8 *)(a1 + 704);
  if (*(_BYTE *)(a1 + 704))
  {
    AMSCore::URLBuilder::operator=(v5, v2);
    v39 = 0;
    if (*(_BYTE *)(a1 + 704))
      goto LABEL_121;
LABEL_142:
    (**(void (***)(AMSCore::Error *))v2)(v2);
    if (!v73)
      goto LABEL_38;
    goto LABEL_143;
  }
  std::runtime_error::runtime_error(&v106, (const std::runtime_error *)v2);
  v107 = *(_OWORD *)(a1 + 488);
  v106.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v77 = *(_QWORD *)(a1 + 512);
  v108 = *(unsigned int ***)(a1 + 504);
  v109 = v77;
  v110 = *(unsigned int **)(a1 + 520);
  if (v110)
  {
    *(_QWORD *)(v77 + 16) = &v109;
    *(_QWORD *)(a1 + 504) = a1 + 512;
    *(_QWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 520) = 0;
  }
  else
  {
    v108 = (unsigned int **)&v109;
  }
  v111 = *(_OWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  std::runtime_error::runtime_error((std::runtime_error *)v112, &v106);
  *(_OWORD *)&v112[16] = v107;
  *(_QWORD *)v112 = off_1E2521330;
  v78 = (unsigned int *)v109;
  v113 = v108;
  v114[0] = (unsigned int *)v109;
  v114[1] = v110;
  if (v110)
  {
    *(_QWORD *)(v109 + 16) = v114;
    v78 = 0;
    v108 = (unsigned int **)&v109;
    v109 = 0;
    v110 = 0;
  }
  else
  {
    v113 = v114;
  }
  v115 = v111;
  v111 = 0uLL;
  v106.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v108, v78);
  MEMORY[0x18D7898AC](&v106);
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), (std::runtime_error *)v112);
  *(_QWORD *)v112 = off_1E2521330;
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
  v5 = v105;
  if (*((_QWORD *)&v115 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v113, v114[0]);
  MEMORY[0x18D7898AC](v112);
  v39 = 3;
  if (!*(_BYTE *)(a1 + 704))
    goto LABEL_142;
LABEL_121:
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 552));
  if (*(_BYTE *)(a1 + 544))
  {
    *(_QWORD *)(a1 + 472) = off_1E2521330;
    v74 = *(std::__shared_weak_count **)(a1 + 536);
    if (v74)
    {
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 504, *(unsigned int **)(a1 + 512));
    MEMORY[0x18D7898AC](v2);
  }
  if (!v73)
  {
LABEL_38:
    if (**(char **)(a1 + 3112) < 0)
    {
      operator delete(*(void **)(a1 + 2896));
      if ((*(char *)(a1 + 2967) & 0x80000000) == 0)
      {
LABEL_40:
        v40 = *(std::__shared_weak_count **)(a1 + 2976);
        if (!v40)
          goto LABEL_48;
        goto LABEL_44;
      }
    }
    else if ((*(char *)(a1 + 2967) & 0x80000000) == 0)
    {
      goto LABEL_40;
    }
    operator delete(*(void **)(a1 + 2944));
    v40 = *(std::__shared_weak_count **)(a1 + 2976);
    if (!v40)
      goto LABEL_48;
LABEL_44:
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
LABEL_48:
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1936));
    if (*(_BYTE *)(a1 + 1928))
    {
      *(_QWORD *)(a1 + 1856) = off_1E2521330;
      v43 = *(std::__shared_weak_count **)(a1 + 1920);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1888, *(unsigned int **)(a1 + 1896));
      MEMORY[0x18D7898AC](v5);
    }
    if (v39 == 3)
    {
      *(_QWORD *)(a1 + 3152) = 0;
      *(_QWORD *)(a1 + 472) = v6;
      *(_QWORD *)a1 = 0;
      AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v2);
      return;
    }
    v46 = *(_QWORD **)(a1 + 464);
    if (v46 == (_QWORD *)(a1 + 440))
    {
      v47 = 4;
      v46 = (_QWORD *)(a1 + 440);
    }
    else
    {
      if (!v46)
        goto LABEL_62;
      v47 = 5;
    }
    (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_62:
    if (*(_BYTE *)(a1 + 424))
    {
      if (*(_BYTE *)(a1 + 416))
      {
        v48 = *(std::__shared_weak_count **)(a1 + 408);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 24));
      }
      else
      {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
    }
    v51 = *(_QWORD *)(a1 + 3104);
    do
    {
      v52 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
    if (!v53)
      MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
    if (v51)
    {
      v54 = (unint64_t *)(*(_QWORD *)(a1 + 3104) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        v56 = *(std::__shared_weak_count **)(a1 + 3104);
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v57 = *(void ***)(a1 + 3080);
    if (v57)
    {
      v58 = *(void ***)(a1 + 3088);
      if (v58 == v57)
      {
        v58 = *(void ***)(a1 + 3080);
      }
      else
      {
        do
        {
          if (*((char *)v58 - 1) < 0)
          {
            operator delete(*(v58 - 3));
            v57 = *(void ***)(a1 + 3080);
          }
          v58 -= 3;
        }
        while (v58 != v57);
      }
      operator delete(v58);
    }
    if (*(_BYTE *)(a1 + 3185))
    {
      if (*(char *)(a1 + 3186) < 0)
        operator delete(*(void **)(a1 + 3072));
    }
    if (*(char *)(a1 + 3184) < 0)
    {
      operator delete(*(void **)(a1 + 3056));
      if ((*(char *)(a1 + 3183) & 0x80000000) == 0)
        goto LABEL_89;
    }
    else if ((*(char *)(a1 + 3183) & 0x80000000) == 0)
    {
LABEL_89:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 3048));
    goto LABEL_89;
  }
LABEL_143:
  *(_BYTE *)(a1 + 2088) = 0;
  *(_BYTE *)(a1 + 2112) = 0;
  if (*(_BYTE *)(a1 + 1960))
  {
    *(_OWORD *)(a1 + 2088) = *(_OWORD *)(a1 + 1936);
    *(_QWORD *)(a1 + 2104) = *(_QWORD *)(a1 + 1952);
    *(_QWORD *)(a1 + 1936) = 0;
    *(_QWORD *)(a1 + 1952) = 0;
    *(_QWORD *)(a1 + 1944) = 0;
    *(_BYTE *)(a1 + 2112) = 1;
  }
  *(_BYTE *)(a1 + 2120) = 0;
  *(_BYTE *)(a1 + 2144) = 0;
  if (*(_BYTE *)(a1 + 1992))
  {
    *(_OWORD *)(a1 + 2120) = *(_OWORD *)(a1 + 1968);
    *(_QWORD *)(a1 + 2136) = *(_QWORD *)(a1 + 1984);
    *(_QWORD *)(a1 + 1968) = 0;
    *(_QWORD *)(a1 + 1984) = 0;
    *(_QWORD *)(a1 + 1976) = 0;
    *(_BYTE *)(a1 + 2144) = 1;
  }
  *(_BYTE *)(a1 + 2152) = 0;
  *(_BYTE *)(a1 + 2176) = 0;
  if (*(_BYTE *)(a1 + 2024))
  {
    *(_OWORD *)(a1 + 2152) = *(_OWORD *)(a1 + 2000);
    *(_QWORD *)(a1 + 2168) = *(_QWORD *)(a1 + 2016);
    *(_QWORD *)(a1 + 2000) = 0;
    *(_QWORD *)(a1 + 2016) = 0;
    *(_QWORD *)(a1 + 2008) = 0;
    *(_BYTE *)(a1 + 2176) = 1;
  }
  *(_DWORD *)(a1 + 2184) = *(_DWORD *)(a1 + 2032);
  *(_QWORD *)(a1 + 2192) = a1 + 2192;
  *(_QWORD *)(a1 + 2200) = a1 + 2192;
  *(_QWORD *)(a1 + 2208) = 0;
  v82 = *(_QWORD *)(a1 + 2056);
  if (v82)
  {
    v83 = *(uint64_t **)(a1 + 2048);
    v84 = *(_QWORD *)(a1 + 2040);
    v85 = *v83;
    *(_QWORD *)(v85 + 8) = *(_QWORD *)(v84 + 8);
    **(_QWORD **)(v84 + 8) = v85;
    v86 = *(_QWORD *)(a1 + 2192);
    *(_QWORD *)(v86 + 8) = v83;
    *v83 = v86;
    *(_QWORD *)(a1 + 2192) = v84;
    *(_QWORD *)(v84 + 8) = a1 + 2192;
    *(_QWORD *)(a1 + 2208) = v82;
    *(_QWORD *)(a1 + 2056) = 0;
  }
  v87 = *(_QWORD *)(a1 + 3104);
  v88 = *(_QWORD *)(a1 + 3096);
  *(_OWORD *)(a1 + 2216) = *(_OWORD *)(a1 + 2064);
  *(_QWORD *)(a1 + 2232) = *(_QWORD *)(a1 + 2080);
  *(_QWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2064) = 0;
  *(_QWORD *)(a1 + 2080) = 0;
  *(_QWORD *)(a1 + 2984) = v88;
  *(_QWORD *)(a1 + 2992) = v87;
  if (v87)
  {
    v89 = (unint64_t *)(v87 + 8);
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
  }
  AMSCore::EncodeHTTPRequestTask::internal::makeOptionsBuilder((uint64_t)v4, (__int128 *)(a1 + 2088), (__int128 *)(a1 + 2984));
  v91 = *(std::__shared_weak_count **)(a1 + 2992);
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = *(unsigned __int8 *)(a1 + 3185);
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 2088));
  if (v94)
  {
    v95 = *(char *)(a1 + 3186);
    v112[23] = 19;
    strcpy(v112, "X-Apple-Store-Front");
    v96 = *(const std::string::value_type **)(a1 + 3072);
    v97 = *(_QWORD *)(a1 + 3064);
    if (v95 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 2272), v96, v97);
    }
    else
    {
      *(_QWORD *)(a1 + 2272) = v96;
      *(_QWORD *)(a1 + 2280) = v97;
      *(_DWORD *)(a1 + 2288) = *(_DWORD *)(a1 + 3160);
      *(_DWORD *)(a1 + 2291) = *(_DWORD *)(a1 + 3163);
      *(_BYTE *)(a1 + 2295) = v95;
    }
    *(_BYTE *)(a1 + 2296) = 1;
    AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v4, (uint64_t)v112, a1 + 2272);
    if (*(_BYTE *)(a1 + 2296) && *(char *)(a1 + 2295) < 0)
      operator delete(*(void **)(a1 + 2272));
    if ((v112[23] & 0x80000000) != 0)
      operator delete(*(void **)v112);
    v98 = 2;
  }
  else
  {
    v98 = 3;
  }
  *(_DWORD *)(a1 + 1424) = v98;
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault((_QWORD *)(a1 + 3016));
  BYTE7(v107) = 15;
  strcpy((char *)&v106, "Accept-Language");
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 3016) + 56))(v112);
  *(_OWORD *)(a1 + 2304) = *(_OWORD *)v112;
  *(_QWORD *)(a1 + 2320) = *(_QWORD *)&v112[16];
  memset(v112, 0, 24);
  *(_BYTE *)(a1 + 2328) = 1;
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v4, (uint64_t)&v106, a1 + 2304);
  if (*(_BYTE *)(a1 + 2328) && *(char *)(a1 + 2327) < 0)
    operator delete(*(void **)(a1 + 2304));
  if ((v112[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v112);
    if ((SBYTE7(v107) & 0x80000000) == 0)
      goto LABEL_175;
LABEL_188:
    operator delete(v106.__vftable);
    goto LABEL_175;
  }
  if (SBYTE7(v107) < 0)
    goto LABEL_188;
LABEL_175:
  v99 = *(AMSCore::UserAgent **)(a1 + 3096);
  BYTE7(v107) = 10;
  strcpy((char *)&v106, "User-Agent");
  AMSCore::UserAgent::create(v99, (std::string *)v112);
  *(_OWORD *)(a1 + 2240) = *(_OWORD *)v112;
  *(_QWORD *)(a1 + 2256) = *(_QWORD *)&v112[16];
  memset(v112, 0, 24);
  *(_BYTE *)(a1 + 2264) = 1;
  AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v4, (uint64_t)&v106, a1 + 2240);
  if (*(_BYTE *)(a1 + 2264) && *(char *)(a1 + 2263) < 0)
    operator delete(*(void **)(a1 + 2240));
  if ((v112[23] & 0x80000000) != 0)
    operator delete(*(void **)v112);
  v100 = (__int128 *)(a1 + 3032);
  if (SBYTE7(v107) < 0)
    operator delete(v106.__vftable);
  *(_BYTE *)(a1 + 1584) = *(_BYTE *)(a1 + 3175);
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v4);
  AMSCore::EncodeHTTPRequestTask::perform((_OWORD *)(a1 + 3032), (uint64_t)v3);
  v101 = *v100;
  *(_OWORD *)(a1 + 3136) = *v100;
  *(_QWORD *)v100 = 0;
  *(_QWORD *)(a1 + 3040) = 0;
  if (atomic_load((unint64_t *)(v101 + 416)))
    goto LABEL_2;
  *(_BYTE *)(a1 + 3167) = 1;
  v103 = (unint64_t *)(*(_QWORD *)(a1 + 3136) + 416);
  do
    v104 = __ldaxr(v103);
  while (__stlxr(a1, v103));
  if (v104)
  {
LABEL_2:
    v7 = *(_QWORD *)(a1 + 3136);
    if (*(_BYTE *)(v7 + 408))
    {
      v8 = (const std::runtime_error *)(v7 + 8);
      v9 = *(_BYTE *)(v7 + 400);
      if (v9)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v2, (uint64_t)v8);
        v10 = (_QWORD *)(v7 + 384);
        *(_QWORD *)(a1 + 848) = *(_QWORD *)(v7 + 384);
        v11 = (_QWORD *)(a1 + 856);
        v12 = (_QWORD *)(v7 + 392);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)v2, v8);
        *(_OWORD *)(a1 + 488) = *(_OWORD *)(v7 + 24);
        *(_QWORD *)(a1 + 472) = off_1E2521330;
        v16 = (_QWORD *)(v7 + 48);
        v17 = *(_QWORD *)(v7 + 48);
        v18 = a1 + 512;
        *(_QWORD *)(a1 + 504) = *(_QWORD *)(v7 + 40);
        *(_QWORD *)(a1 + 512) = v17;
        v19 = *(_QWORD *)(v7 + 56);
        *(_QWORD *)(a1 + 520) = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 16) = v18;
          *(_QWORD *)(v7 + 40) = v16;
          *v16 = 0;
          *(_QWORD *)(v7 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 504) = v18;
        }
        v24 = *(_QWORD *)(a1 + 3136);
        v25 = *(_QWORD *)(v24 + 64);
        v10 = (_QWORD *)(v24 + 64);
        *(_QWORD *)(a1 + 528) = v25;
        v11 = (_QWORD *)(a1 + 536);
        v12 = v10 + 1;
      }
      *v11 = *v12;
      *v10 = 0;
      v10[1] = 0;
      *(_BYTE *)(a1 + 864) = v9;
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), (std::runtime_error *)v2);
      if (*(_BYTE *)(a1 + 864))
      {
        v26 = *(std::__shared_weak_count **)(a1 + 856);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2);
        v29 = *(_QWORD *)(a1 + 3144);
        if (!v29)
          goto LABEL_27;
      }
      else
      {
        (**(void (***)(AMSCore::Error *))v2)(v2);
        v29 = *(_QWORD *)(a1 + 3144);
        if (!v29)
        {
LABEL_27:
          v33 = *(std::__shared_weak_count **)(a1 + 3040);
          if (v33)
          {
            v34 = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v3);
          v36 = *(std::__shared_weak_count **)(a1 + 3024);
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
          v39 = 3;
          goto LABEL_38;
        }
      }
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        v32 = *(std::__shared_weak_count **)(a1 + 3144);
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      goto LABEL_27;
    }
    goto LABEL_189;
  }
}

void sub_18CC0C50C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, AMSCore::URLBuilder *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void **v30;

  if (a29 < 0)
    operator delete(__p);
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v30);
  if (**(char **)(v29 + 3112) < 0)
    operator delete(*(void **)(v29 + 2896));
  if (*(char *)(v29 + 2967) < 0)
    operator delete(*(void **)(v29 + 2944));
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v29 + 2968);
  AMSCore::URLBuilder::~URLBuilder(a11);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC0C600()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC0BBE8);
}

void sub_18CC0C60C()
{
  uint64_t v0;

  std::expected<AMSCore::URLBuilder,AMSCore::Error>::~expected[abi:fe180100](v0);
  JUMPOUT(0x18CC0C5B8);
}

void AMSCore::LoadNetworkBagTask::encodeHTTPRequest(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;

  if (!*(_QWORD *)__p)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 394);
    goto LABEL_60;
  }
  if (__p[3167])
  {
    v2 = *((_QWORD *)__p + 393);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 393);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 380);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 109);
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 378);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 156);
  }
  else
  {
    v13 = *((_QWORD *)__p + 391);
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        v16 = (std::__shared_weak_count *)*((_QWORD *)__p + 391);
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)__p + 157);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 376);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 1704));
    if (__p[1696])
    {
      *((_QWORD *)__p + 203) = off_1E2521330;
      v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 211);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(__p + 1656), *((unsigned int **)__p + 208));
      MEMORY[0x18D7898AC](__p + 1624);
    }
  }
  if (**((char **)__p + 389) < 0)
  {
    operator delete(*((void **)__p + 362));
    if ((__p[2967] & 0x80000000) == 0)
    {
LABEL_44:
      v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 372);
      if (!v26)
        goto LABEL_52;
LABEL_48:
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      goto LABEL_52;
    }
  }
  else if ((__p[2967] & 0x80000000) == 0)
  {
    goto LABEL_44;
  }
  operator delete(*((void **)__p + 368));
  v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 372);
  if (v26)
    goto LABEL_48;
LABEL_52:
  AMSCore::URL::~URL((AMSCore::URL *)(__p + 1936));
  if (__p[1928])
  {
    *((_QWORD *)__p + 232) = off_1E2521330;
    v29 = (std::__shared_weak_count *)*((_QWORD *)__p + 240);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(__p + 1888), *((unsigned int **)__p + 237));
    MEMORY[0x18D7898AC](__p + 1856);
  }
  v12 = 0;
LABEL_60:
  v32 = (char *)*((_QWORD *)__p + 58);
  if (v32 == __p + 440)
  {
    v33 = 4;
    v32 = __p + 440;
  }
  else
  {
    if (!v32)
      goto LABEL_65;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_65:
  if (__p[424])
  {
    if (__p[416])
    {
      v34 = (std::__shared_weak_count *)*((_QWORD *)__p + 51);
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 3);
    }
    else
    {
      (**((void (***)(char *))__p + 3))(__p + 24);
    }
  }
  v37 = *((_QWORD *)__p + 388);
  do
  {
    v38 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v39)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v37)
  {
    v40 = (unint64_t *)(*((_QWORD *)__p + 388) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      v42 = (std::__shared_weak_count *)*((_QWORD *)__p + 388);
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v12)
  {
    v43 = (unint64_t *)&v12->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v45 = (void **)*((_QWORD *)__p + 385);
  if (v45)
  {
    v46 = (void **)*((_QWORD *)__p + 386);
    if (v46 == v45)
    {
      v46 = (void **)*((_QWORD *)__p + 385);
    }
    else
    {
      do
      {
        if (*((char *)v46 - 1) < 0)
        {
          operator delete(*(v46 - 3));
          v45 = (void **)*((_QWORD *)__p + 385);
        }
        v46 -= 3;
      }
      while (v46 != v45);
    }
    operator delete(v46);
  }
  if (__p[3185] && __p[3186] < 0)
    operator delete(*((void **)__p + 384));
  if (__p[3184] < 0)
  {
    operator delete(*((void **)__p + 382));
    if ((__p[3183] & 0x80000000) == 0)
      goto LABEL_97;
LABEL_102:
    operator delete(*((void **)__p + 381));
    goto LABEL_97;
  }
  if (__p[3183] < 0)
    goto LABEL_102;
LABEL_97:
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523650;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CC0CB34(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 416);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CC0CB68(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

AMSCore::Error *std::__optional_move_base<AMSCore::Error,false>::__optional_move_base[abi:fe180100](AMSCore::Error *this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    AMSCore::Error::Error((std::runtime_error *)this, (const std::runtime_error *)a2);
    *((_BYTE *)this + 72) = 1;
  }
  return this;
}

void sub_18CC0CBC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(v1 + 72))
  {
    *(_QWORD *)v1 = off_1E2521330;
    v3 = *(std::__shared_weak_count **)(v1 + 64);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v1 + 32, *(unsigned int **)(v1 + 40));
    MEMORY[0x18D7898AC](v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *AMSCore::URL::URL(std::string *this, const AMSCore::URL *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *i;
  char *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *(_OWORD *)a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  this[1].__r_.__value_.__s.__data_[8] = 0;
  this[2].__r_.__value_.__s.__data_[8] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v5 = *((_OWORD *)a2 + 2);
      this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
      *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v5;
    }
    this[2].__r_.__value_.__s.__data_[8] = 1;
  }
  this[2].__r_.__value_.__s.__data_[16] = 0;
  this[3].__r_.__value_.__s.__data_[16] = 0;
  if (*((_BYTE *)a2 + 88))
  {
    if (*((char *)a2 + 87) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
    }
    else
    {
      v6 = *((_OWORD *)a2 + 4);
      this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 10);
      *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v6;
    }
    this[3].__r_.__value_.__s.__data_[16] = 1;
  }
  LODWORD(this[4].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 24);
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)&this[4].__r_.__value_.__l.__size_;
  this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)&this[4].__r_.__value_.__l.__size_;
  this[5].__r_.__value_.__r.__words[0] = 0;
  for (i = (_QWORD *)*((_QWORD *)a2 + 14); i != (_QWORD *)((char *)a2 + 104); i = (_QWORD *)i[1])
  {
    v8 = std::__list_imp<std::pair<std::string,std::string>>::__create_node[abi:fe180100]<std::pair<std::string,std::string> const&>(0, (uint64_t)(i + 2));
    size = this[4].__r_.__value_.__l.__size_;
    *(_QWORD *)v8 = size;
    *((_QWORD *)v8 + 1) = (char *)this + 104;
    *(_QWORD *)(size + 8) = v8;
    this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    ++this[5].__r_.__value_.__r.__words[0];
  }
  v10 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 8);
    this[6].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 18);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_18CC0CDC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(_BYTE *)(v1 + 88) && *(char *)(v1 + 87) < 0)
    operator delete(*v3);
  if (*(_BYTE *)(v1 + 56) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::URLBuilder::~URLBuilder(AMSCore::URLBuilder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  AMSCore::URL::~URL((AMSCore::URLBuilder *)((char *)this + 80));
  if (*((_BYTE *)this + 72))
  {
    *(_QWORD *)this = off_1E2521330;
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 32, *((unsigned int **)this + 5));
    MEMORY[0x18D7898AC](this);
  }
}

std::runtime_error *AMSCore::URLBuilder::URLBuilder(std::runtime_error *result, std::runtime_error *a2)
{
  std::runtime_error_vtbl *p_imp;
  const char *imp;
  std::runtime_error_vtbl *v5;
  std::runtime_error_vtbl *v6;
  std::runtime_error v7;
  std::runtime_error v8;
  std::runtime_error v9;
  const char *v10;
  std::runtime_error_vtbl *v11;
  const char *v12;
  void (__cdecl *v13)(std::runtime_error *__hidden);
  char *v14;
  std::runtime_error v15;

  LOBYTE(result->__vftable) = 0;
  LOBYTE(result[4].__imp_.__imp_) = 0;
  if (LOBYTE(a2[4].__imp_.__imp_))
  {
    result = std::runtime_error::runtime_error(result, a2);
    result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    result[1] = a2[1];
    result->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    result[2].__vftable = a2[2].__vftable;
    p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
    imp = a2[2].__imp_.__imp_;
    result[2].__imp_.__imp_ = imp;
    v5 = (std::runtime_error_vtbl *)&result[2].__imp_;
    v6 = a2[3].__vftable;
    result[3].__vftable = v6;
    if (v6)
    {
      *((_QWORD *)imp + 2) = v5;
      a2[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      result[2].__vftable = v5;
    }
    *(std::runtime_error *)((char *)result + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    LOBYTE(result[4].__imp_.__imp_) = 1;
  }
  LOBYTE(result[5].__vftable) = 0;
  LOBYTE(result[6].__imp_.__imp_) = 0;
  if (LOBYTE(a2[6].__imp_.__imp_))
  {
    v7 = a2[5];
    result[6].__vftable = a2[6].__vftable;
    result[5] = v7;
    a2[5].__imp_.__imp_ = 0;
    a2[6].__vftable = 0;
    a2[5].__vftable = 0;
    LOBYTE(result[6].__imp_.__imp_) = 1;
  }
  LOBYTE(result[7].__vftable) = 0;
  LOBYTE(result[8].__imp_.__imp_) = 0;
  if (LOBYTE(a2[8].__imp_.__imp_))
  {
    v8 = a2[7];
    result[8].__vftable = a2[8].__vftable;
    result[7] = v8;
    a2[7].__imp_.__imp_ = 0;
    a2[8].__vftable = 0;
    a2[7].__vftable = 0;
    LOBYTE(result[8].__imp_.__imp_) = 1;
  }
  LOBYTE(result[9].__vftable) = 0;
  LOBYTE(result[10].__imp_.__imp_) = 0;
  if (LOBYTE(a2[10].__imp_.__imp_))
  {
    v9 = a2[9];
    result[10].__vftable = a2[10].__vftable;
    result[9] = v9;
    a2[9].__imp_.__imp_ = 0;
    a2[10].__vftable = 0;
    a2[9].__vftable = 0;
    LOBYTE(result[10].__imp_.__imp_) = 1;
  }
  LODWORD(result[11].__vftable) = a2[11].__vftable;
  result[11].__imp_.__imp_ = (const char *)&result[11].__imp_;
  result[12].__vftable = (std::runtime_error_vtbl *)&result[11].__imp_;
  result[12].__imp_.__imp_ = 0;
  if (result == a2)
  {
    __break(1u);
  }
  else
  {
    v10 = a2[12].__imp_.__imp_;
    if (v10)
    {
      v12 = a2[11].__imp_.__imp_;
      v11 = a2[12].__vftable;
      v13 = v11->~runtime_error;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v12 + 1);
      **((_QWORD **)v12 + 1) = v13;
      v14 = (char *)result[11].__imp_.__imp_;
      *((_QWORD *)v14 + 1) = v11;
      v11->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))v14;
      result[11].__imp_.__imp_ = v12;
      *((_QWORD *)v12 + 1) = (char *)result + 184;
      result[12].__imp_.__imp_ = v10;
      a2[12].__imp_.__imp_ = 0;
    }
    v15 = a2[13];
    result[14].__vftable = a2[14].__vftable;
    result[13] = v15;
    a2[13].__imp_.__imp_ = 0;
    a2[14].__vftable = 0;
    a2[13].__vftable = 0;
  }
  return result;
}

AMSCore::Error *AMSCore::URLBuilder::operator=(AMSCore::Error *this, AMSCore::Error *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int16 v14;
  void **v15;
  char v16;
  __int128 v17;
  char *v18;
  size_t v19;

  if (*((unsigned __int8 *)this + 72) == *((unsigned __int8 *)a2 + 72))
  {
    if (*((_BYTE *)this + 72))
    {
      std::runtime_error::operator=((std::runtime_error *)this, (const std::runtime_error *)a2);
      *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
      if (this != a2)
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>((uint64_t)this + 32, *((__int128 **)a2 + 4), (__int128 *)((char *)a2 + 40));
      v5 = *((_QWORD *)a2 + 7);
      v4 = *((_QWORD *)a2 + 8);
      if (v4)
      {
        v6 = (unint64_t *)(v4 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 7) = v5;
      *((_QWORD *)this + 8) = v4;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  else if (*((_BYTE *)this + 72))
  {
    *(_QWORD *)this = off_1E2521330;
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 32, *((unsigned int **)this + 5));
    MEMORY[0x18D7898AC](this);
    *((_BYTE *)this + 72) = 0;
  }
  else
  {
    AMSCore::Error::Error((std::runtime_error *)this, (const std::runtime_error *)a2);
    *((_BYTE *)this + 72) = 1;
  }
  std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>((uint64_t)this + 80, (std::string::value_type *)a2 + 80);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>((uint64_t)this + 112, (std::string::value_type *)a2 + 112);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>((uint64_t)this + 144, (std::string::value_type *)a2 + 144);
  v14 = *((_WORD *)a2 + 88);
  *((_BYTE *)this + 178) = *((_BYTE *)a2 + 178);
  *((_WORD *)this + 88) = v14;
  if (this != a2)
  {
    std::list<std::pair<std::string,std::string>>::__assign_with_sentinel[abi:fe180100]<std::__list_const_iterator<std::pair<std::string,std::string>,void *>,std::__list_const_iterator<std::pair<std::string,std::string>,void *>>((char **)this + 23, *((_QWORD *)a2 + 24), (uint64_t)a2 + 184);
    v15 = (void **)((char *)this + 208);
    v16 = *((_BYTE *)a2 + 231);
    if (*((char *)this + 231) < 0)
    {
      if (v16 >= 0)
        v18 = (char *)a2 + 208;
      else
        v18 = (char *)*((_QWORD *)a2 + 26);
      if (v16 >= 0)
        v19 = *((unsigned __int8 *)a2 + 231);
      else
        v19 = *((_QWORD *)a2 + 27);
      std::string::__assign_no_alias<false>(v15, v18, v19);
    }
    else if ((*((_BYTE *)a2 + 231) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v15, *((void **)a2 + 26), *((_QWORD *)a2 + 27));
    }
    else
    {
      v17 = *((_OWORD *)a2 + 13);
      *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
      *(_OWORD *)v15 = v17;
    }
  }
  return this;
}

uint64_t std::expected<AMSCore::URLBuilder,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 232))
  {
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 80));
    if (*(_BYTE *)(a1 + 72))
    {
      *(_QWORD *)a1 = off_1E2521330;
      v2 = *(std::__shared_weak_count **)(a1 + 64);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, *(unsigned int **)(a1 + 40));
      MEMORY[0x18D7898AC](a1);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

AMSCore::EncodeHTTPRequestTask::Options *std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(AMSCore::EncodeHTTPRequestTask::Options *this, std::runtime_error *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::runtime_error_vtbl *p_imp;
  const char *imp;
  char *v9;
  std::runtime_error_vtbl *v10;

  if (*((_BYTE *)this + 400))
  {
    if (*((_BYTE *)this + 392))
    {
      v4 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)this);
    }
    else
    {
      (**(void (***)(AMSCore::EncodeHTTPRequestTask::Options *))this)(this);
    }
    *((_BYTE *)this + 400) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)this, a2);
  *(_QWORD *)this = MEMORY[0x1E0DE4F90] + 16;
  *((std::runtime_error *)this + 1) = a2[1];
  *(_QWORD *)this = off_1E2521330;
  *((_QWORD *)this + 4) = a2[2].__vftable;
  p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  imp = a2[2].__imp_.__imp_;
  *((_QWORD *)this + 5) = imp;
  v9 = (char *)this + 40;
  v10 = a2[3].__vftable;
  *((_QWORD *)this + 6) = v10;
  if (v10)
  {
    *((_QWORD *)imp + 2) = v9;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    *((_QWORD *)this + 4) = v9;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  *((_BYTE *)this + 392) = 0;
  *((_BYTE *)this + 400) = 1;
  return this;
}

uint64_t AMSCore::EncodeHTTPRequestTask::Options::Options(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;

  v3 = result;
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = -1;
  v4 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v4 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E253CAE8[v4])(&v25);
    *(_DWORD *)(v3 + 80) = v4;
    v5 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v5 != -1)
    {
      if (!(_DWORD)v5)
        goto LABEL_6;
      result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v26, a2 + 56);
    }
  }
  *(_DWORD *)(a2 + 80) = 0;
LABEL_6:
  v6 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 88) = v6;
  *(_BYTE *)(v3 + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v7 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(v3 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(v3 + 96) = v7;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_BYTE *)(v3 + 120) = 1;
  }
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(v3 + 128) = v8;
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(v3 + 144) = v9;
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(v3 + 152) = v10;
  *(_DWORD *)(v3 + 160) = *(_DWORD *)(a2 + 160);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD *)(v3 + 136);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(v8 + 8 * v11) = v3 + 144;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
  }
  v13 = *(_QWORD *)(a2 + 168);
  v14 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(v3 + 184) = 0;
  *(_DWORD *)(v3 + 176) = v14;
  *(_QWORD *)(v3 + 168) = v13;
  *(_BYTE *)(v3 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    v15 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(v3 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(v3 + 184) = v15;
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_BYTE *)(v3 + 208) = 1;
  }
  *(_BYTE *)(v3 + 216) = 0;
  *(_BYTE *)(v3 + 240) = 0;
  if (*(_BYTE *)(a2 + 240))
  {
    v16 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(v3 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(v3 + 216) = v16;
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 216) = 0;
    *(_BYTE *)(v3 + 240) = 1;
  }
  *(_BYTE *)(v3 + 248) = 0;
  *(_BYTE *)(v3 + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    v17 = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(v3 + 264) = *(_QWORD *)(a2 + 264);
    *(_OWORD *)(v3 + 248) = v17;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_BYTE *)(v3 + 272) = 1;
  }
  *(_DWORD *)(v3 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(v3 + 288) = v3 + 288;
  *(_QWORD *)(v3 + 296) = v3 + 288;
  *(_QWORD *)(v3 + 304) = 0;
  if (v3 == a2)
  {
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 304);
    if (v18)
    {
      v20 = *(_QWORD *)(a2 + 288);
      v19 = *(uint64_t **)(a2 + 296);
      v21 = *v19;
      *(_QWORD *)(v21 + 8) = *(_QWORD *)(v20 + 8);
      **(_QWORD **)(v20 + 8) = v21;
      v22 = *(_QWORD *)(v3 + 288);
      *(_QWORD *)(v22 + 8) = v19;
      *v19 = v22;
      *(_QWORD *)(v3 + 288) = v20;
      *(_QWORD *)(v20 + 8) = v3 + 288;
      *(_QWORD *)(v3 + 304) = v18;
      *(_QWORD *)(a2 + 304) = 0;
    }
    v23 = *(_OWORD *)(a2 + 312);
    *(_QWORD *)(v3 + 328) = *(_QWORD *)(a2 + 328);
    *(_OWORD *)(v3 + 312) = v23;
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 312) = 0;
    *(_BYTE *)(v3 + 336) = *(_BYTE *)(a2 + 336);
    *(_BYTE *)(v3 + 344) = 0;
    *(_BYTE *)(v3 + 368) = 0;
    if (*(_BYTE *)(a2 + 368))
    {
      v24 = *(_OWORD *)(a2 + 344);
      *(_QWORD *)(v3 + 360) = *(_QWORD *)(a2 + 360);
      *(_OWORD *)(v3 + 344) = v24;
      *(_QWORD *)(a2 + 352) = 0;
      *(_QWORD *)(a2 + 360) = 0;
      *(_QWORD *)(a2 + 344) = 0;
      *(_BYTE *)(v3 + 368) = 1;
    }
    return v3;
  }
  return result;
}

std::runtime_error *std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char imp;
  const char *v8;
  std::runtime_error *v9;
  std::__libcpp_refstring *p_imp;
  std::runtime_error *v11;
  std::runtime_error_vtbl *v12;
  const char *v13;
  std::__libcpp_refstring *v14;
  std::runtime_error_vtbl *v15;
  const char *v16;

  if (LOBYTE(this[25].__vftable))
  {
    if (LOBYTE(this[24].__imp_.__imp_))
    {
      v4 = (std::__shared_weak_count *)this[24].__vftable;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&this->__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[25].__vftable) = 0;
  }
  imp = (char)a2[24].__imp_.__imp_;
  if (imp)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)this, (uint64_t)a2);
    v8 = a2[23].__imp_.__imp_;
    v9 = a2 + 24;
    p_imp = &a2[23].__imp_;
    this[23].__imp_.__imp_ = v8;
    v11 = this + 24;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v13 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v13;
    v14 = &this[2].__imp_;
    v15 = a2[3].__vftable;
    this[3].__vftable = v15;
    if (v15)
    {
      *((_QWORD *)v13 + 2) = v14;
      a2[2].__vftable = v12;
      v12->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = (std::runtime_error_vtbl *)v14;
    }
    v16 = a2[3].__imp_.__imp_;
    p_imp = &a2[3].__imp_;
    this[3].__imp_.__imp_ = v16;
    v11 = this + 4;
    v9 = (std::runtime_error *)&p_imp[1];
  }
  v11->__vftable = v9->__vftable;
  p_imp->__imp_ = 0;
  p_imp[1].__imp_ = 0;
  LOBYTE(this[24].__imp_.__imp_) = imp;
  LOBYTE(this[25].__vftable) = 1;
  return this;
}

void AMSCore::EncodeHTTPRequestTask::Options::~Options(void **this)
{
  void **v2;
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void **v14;
  char v15;

  if (*((_BYTE *)this + 368) && *((char *)this + 367) < 0)
    operator delete(this[43]);
  AMSCore::URL::~URL((AMSCore::URL *)(this + 23));
  v2 = (void **)this[18];
  if (v2)
  {
    do
    {
      v14 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_33:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_33;
      }
      operator delete(v2);
      v2 = v14;
    }
    while (v14);
  }
  v3 = this[16];
  this[16] = 0;
  if (v3)
    operator delete(v3);
  if (*((_BYTE *)this + 120) && *((char *)this + 119) < 0)
    operator delete(this[12]);
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, void **))off_1E253D240[v4])(&v15, this + 7);
  *((_DWORD *)this + 20) = -1;
  v5 = (std::__shared_weak_count *)this[6];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)this[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)this[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::unhandled_exception()
{
  std::runtime_error v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t *AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t *result)
{
  uint64_t *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  uint64_t v8;
  std::__shared_weak_count **v9;
  _QWORD *v10;
  std::__shared_weak_count **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::runtime_error v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[40];
  std::__shared_weak_count *v26;
  char v27;
  _BYTE v28[24];
  uint64_t *v29;
  uint64_t v30;

  v1 = result;
  v30 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*result + 416);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*result - 8))(*result - 16);
    v4 = *result;
    result = *(uint64_t **)(*result + 448);
    if (result)
    {
      if (result == (uint64_t *)(v4 + 424))
      {
        v29 = (uint64_t *)v28;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _BYTE *))(*result + 24))(result, v28);
      }
      else
      {
        v29 = result;
        *(_QWORD *)(v4 + 448) = 0;
      }
    }
    else
    {
      v29 = 0;
    }
    if (v29)
    {
      v5 = *v1;
      if (!*(_BYTE *)(v5 + 408))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 400);
      if (v7)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)&v19, (uint64_t)v6);
        v8 = *(_QWORD *)(v5 + 384);
        v9 = (std::__shared_weak_count **)(v5 + 392);
        v10 = (_QWORD *)(v5 + 384);
        v25[39] = v8;
        v11 = &v26;
      }
      else
      {
        std::runtime_error::runtime_error(&v19, v6);
        v12 = (_QWORD *)(v5 + 48);
        v13 = *(_QWORD *)(v5 + 48);
        v20 = *(_OWORD *)(v5 + 24);
        v19.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v21 = *(uint64_t **)(v5 + 40);
        v22 = v13;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v13 + 16) = &v22;
          *(_QWORD *)(v5 + 40) = v12;
          *v12 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v21 = &v22;
        }
        v14 = *(_QWORD *)(v5 + 64);
        v10 = (_QWORD *)(v5 + 64);
        v24 = v14;
        v11 = (std::__shared_weak_count **)v25;
        v9 = (std::__shared_weak_count **)(v10 + 1);
      }
      *v11 = *v9;
      *v10 = 0;
      v10[1] = 0;
      v27 = v7;
      if (!v29)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t *, std::runtime_error *))(*v29 + 48))(v29, &v19);
      if (v27)
      {
        v15 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v19.__vftable);
      }
      else
      {
        ((void (*)(std::runtime_error *))v19.~runtime_error)(&v19);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v29;
    if (v29 == (uint64_t *)v28)
    {
      v18 = 4;
      result = (uint64_t *)v28;
    }
    else
    {
      if (!v29)
        return result;
      v18 = 5;
    }
    return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v18))();
  }
  return result;
}

void sub_18CC0DE7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>(uint64_t a1, std::string::value_type *a2)
{
  __int128 v3;
  __int128 v4;
  size_t v5;
  size_t v6;

  if (*(unsigned __int8 *)(a1 + 24) == a2[24])
  {
    if ((std::string::value_type *)a1 != a2 && *(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
      {
        v5 = *((_QWORD *)a2 + 1);
        if (a2[23] >= 0)
        {
          v6 = a2[23];
        }
        else
        {
          a2 = *(std::string::value_type **)a2;
          v6 = v5;
        }
        std::string::__assign_no_alias<false>((void **)a1, a2, v6);
      }
      else if (a2[23] < 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)a1, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v3 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v3;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    if (a2[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void std::list<std::pair<std::string,std::string>>::__assign_with_sentinel[abi:fe180100]<std::__list_const_iterator<std::pair<std::string,std::string>,void *>,std::__list_const_iterator<std::pair<std::string,std::string>,void *>>(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v8;
  char **v9;
  void *v10;
  size_t v11;
  void **v13;
  char v14;
  __int128 v15;
  void *v16;
  size_t v17;
  void **v18;
  char v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v4 = a2;
  v6 = a1[1];
  if (a2 != a3 && v6 != (char *)a1)
  {
    do
    {
      if (v6 != (char *)v4)
      {
        v13 = (void **)(v6 + 16);
        v14 = *(_BYTE *)(v4 + 39);
        if (v6[39] < 0)
        {
          if (v14 >= 0)
            v16 = (void *)(v4 + 16);
          else
            v16 = *(void **)(v4 + 16);
          if (v14 >= 0)
            v17 = *(unsigned __int8 *)(v4 + 39);
          else
            v17 = *(_QWORD *)(v4 + 24);
          std::string::__assign_no_alias<false>(v13, v16, v17);
        }
        else if ((*(_BYTE *)(v4 + 39) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v13, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
        }
        else
        {
          v15 = *(_OWORD *)(v4 + 16);
          *((_QWORD *)v6 + 4) = *(_QWORD *)(v4 + 32);
          *(_OWORD *)v13 = v15;
        }
        v18 = (void **)(v6 + 40);
        v19 = *(_BYTE *)(v4 + 63);
        if (v6[63] < 0)
        {
          if (v19 >= 0)
            v10 = (void *)(v4 + 40);
          else
            v10 = *(void **)(v4 + 40);
          if (v19 >= 0)
            v11 = *(unsigned __int8 *)(v4 + 63);
          else
            v11 = *(_QWORD *)(v4 + 48);
          std::string::__assign_no_alias<false>(v18, v10, v11);
        }
        else if ((*(_BYTE *)(v4 + 63) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v18, *(void **)(v4 + 40), *(_QWORD *)(v4 + 48));
        }
        else
        {
          v20 = *(_OWORD *)(v4 + 40);
          *((_QWORD *)v6 + 7) = *(_QWORD *)(v4 + 56);
          *(_OWORD *)v18 = v20;
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
      v6 = (char *)*((_QWORD *)v6 + 1);
    }
    while (v4 != a3 && v6 != (char *)a1);
  }
  if (v6 != (char *)a1)
  {
    v7 = *a1;
    v8 = *(_QWORD *)v6;
    *(_QWORD *)(v8 + 8) = *((_QWORD *)*a1 + 1);
    **((_QWORD **)v7 + 1) = v8;
    while (1)
    {
      v9 = (char **)*((_QWORD *)v6 + 1);
      --a1[2];
      if (v6[63] < 0)
      {
        operator delete(*((void **)v6 + 5));
        if (v6[39] < 0)
LABEL_10:
          operator delete(*((void **)v6 + 2));
      }
      else if (v6[39] < 0)
      {
        goto LABEL_10;
      }
      operator delete(v6);
      v6 = (char *)v9;
      if (v9 == a1)
        return;
    }
  }
  if (v4 != a3)
  {
    v21 = std::__list_imp<std::pair<std::string,std::string>>::__create_node[abi:fe180100]<std::pair<std::string,std::string> const&>(0, v4 + 16);
    v22 = v21;
    v23 = *(_QWORD *)(v4 + 8);
    v24 = 1;
    if (v23 != a3)
    {
      v25 = (uint64_t)v21;
      do
      {
        v21 = std::__list_imp<std::pair<std::string,std::string>>::__create_node[abi:fe180100]<std::pair<std::string,std::string> const&>(v25, v23 + 16);
        *(_QWORD *)(v25 + 8) = v21;
        ++v24;
        v23 = *(_QWORD *)(v23 + 8);
        v25 = (uint64_t)v21;
      }
      while (v23 != a3);
    }
    v26 = *a1;
    *((_QWORD *)v26 + 1) = v22;
    *(_QWORD *)v22 = v26;
    *a1 = v21;
    *((_QWORD *)v21 + 1) = a1;
    a1[2] += v24;
  }
}

void sub_18CC0E170(void *a1)
{
  void **v1;
  void **v2;

  __cxa_begin_catch(a1);
  while (1)
  {
    v2 = (void **)*v1;
    if (*((char *)v1 + 63) < 0)
    {
      operator delete(v1[5]);
      if (*((char *)v1 + 39) < 0)
LABEL_7:
        operator delete(v1[2]);
    }
    else if (*((char *)v1 + 39) < 0)
    {
      goto LABEL_7;
    }
    operator delete(v1);
    v1 = v2;
    if (!v2)
      __cxa_rethrow();
  }
}

void sub_18CC0E1C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *std::__list_imp<std::pair<std::string,std::string>>::__create_node[abi:fe180100]<std::pair<std::string,std::string> const&>(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  std::string *v6;

  v4 = (char *)operator new(0x40uLL);
  v5 = v4;
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 16);
  }
  v6 = (std::string *)(v5 + 40);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    *((_QWORD *)v5 + 7) = *(_QWORD *)(a2 + 40);
  }
  return v5;
}

void sub_18CC0E26C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[39] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *AMSCore::LoadNetworkBagTask::`anonymous namespace'::addCookieToUrl(std::runtime_error *result)
{
  unint64_t v1;
  std::__libcpp_refstring *p_imp;
  const std::runtime_error *v3;
  uint64_t v4;
  _OWORD *v5;
  const std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  const char *imp;
  const std::runtime_error *v10;
  char v11;
  std::__libcpp_refstring *v12;
  std::__libcpp_refstring *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  int v34;
  std::string::size_type v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int **v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  std::runtime_error *v57;
  std::runtime_error *v58;
  uint64_t *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const std::runtime_error *v64;
  std::runtime_error_vtbl *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int **v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _OWORD *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  std::string *v95;
  std::runtime_error *v96;
  unint64_t v97;
  uint64_t *v98;
  std::string *v99;
  std::runtime_error v100;
  __int128 v101;
  unsigned int **v102;
  unsigned int *v103;
  uint64_t v104;
  __int128 v105;
  char v106;
  std::runtime_error v107;
  __int128 v108;
  unsigned int **v109;
  unsigned int *v110;
  uint64_t v111;
  __int128 v112;
  std::runtime_error v113;
  __int128 v114;
  unsigned int **v115;
  unsigned int *v116;
  uint64_t v117;
  __int128 v118;

  v1 = (unint64_t)result;
  p_imp = &result[37].__imp_;
  v3 = result + 34;
  v93 = result + 1;
  v94 = result + 34;
  if (LOBYTE(result[52].__imp_.__imp_))
  {
LABEL_2:
    v4 = *(_QWORD *)(v1 + 824);
    if (*(_BYTE *)(v4 + 88))
    {
      v5 = (_OWORD *)(v1 + 624);
      v6 = (const std::runtime_error *)(v4 + 8);
      v7 = *(_BYTE *)(v4 + 80);
      v8 = (_QWORD *)(v1 + 640);
      if (v7)
      {
        *v5 = *(_OWORD *)(v4 + 8);
        *v8 = *(_QWORD *)(v4 + 24);
        *(_QWORD *)(v4 + 16) = 0;
        *(_QWORD *)(v4 + 24) = 0;
        v6->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(v1 + 624), v6);
        *(_OWORD *)v8 = *(_OWORD *)(v4 + 24);
        *(_QWORD *)(v1 + 624) = off_1E2521330;
        v14 = (_QWORD *)(v4 + 48);
        v15 = *(_QWORD *)(v4 + 48);
        *(_QWORD *)(v1 + 656) = *(_QWORD *)(v4 + 40);
        v16 = v1 + 664;
        *(_QWORD *)(v1 + 664) = v15;
        v17 = *(_QWORD *)(v4 + 56);
        *(_QWORD *)(v1 + 672) = v17;
        if (v17)
        {
          *(_QWORD *)(v15 + 16) = v16;
          *(_QWORD *)(v4 + 40) = v14;
          *v14 = 0;
          *(_QWORD *)(v4 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(v1 + 656) = v16;
        }
        v22 = *(_QWORD *)(v1 + 824);
        *(_OWORD *)&p_imp[10].__imp_ = *(_OWORD *)(v22 + 64);
        *(_QWORD *)(v22 + 64) = 0;
        *(_QWORD *)(v22 + 72) = 0;
      }
      *(_BYTE *)(v1 + 696) = v7;
      v23 = *(_QWORD *)(v1 + 832);
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          v26 = *(std::__shared_weak_count **)(v1 + 832);
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v27 = *(std::__shared_weak_count **)(v1 + 760);
      if (!v27)
        goto LABEL_146;
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if (*(_BYTE *)(v1 + 696))
          goto LABEL_24;
      }
      else
      {
LABEL_146:
        if (*(_BYTE *)(v1 + 696))
        {
LABEL_24:
          v92 = (_OWORD *)(v1 + 624);
          v96 = (std::runtime_error *)(v1 + 312);
          v30 = *(uint64_t **)(v1 + 624);
          v98 = *(uint64_t **)(v1 + 632);
          if (v30 != v98)
          {
            v99 = (std::string *)(v1 + 704);
            v95 = (std::string *)(v1 + 728);
            v31 = *(_QWORD *)(v1 + 784) + 24 * *(_QWORD *)(v1 + 792);
            v97 = v1;
            do
            {
              v32 = *v30 + 48;
              v33 = *(const std::string::value_type **)v32;
              v34 = *(char *)(*v30 + 71);
              v35 = *(_QWORD *)(*v30 + 56);
              if (v34 >= 0)
                v36 = *(unsigned __int8 *)(*v30 + 71);
              else
                v36 = *(_QWORD *)(*v30 + 56);
              v37 = v1;
              if (v34 >= 0)
                v38 = (unsigned __int8 *)(*v30 + 48);
              else
                v38 = *(unsigned __int8 **)(*v30 + 48);
              v39 = *(_QWORD *)(v37 + 784);
              v40 = v39;
              do
              {
                v41 = *(unsigned __int8 *)(v40 + 23);
                if ((v41 & 0x80u) == 0)
                  v42 = *(unsigned __int8 *)(v40 + 23);
                else
                  v42 = *(_QWORD *)(v40 + 8);
                if (v42 == v36)
                {
                  if ((v41 & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)v40, v38, *(_QWORD *)(v40 + 8)))
                      goto LABEL_45;
                  }
                  else
                  {
                    if (!*(_BYTE *)(v40 + 23))
                      goto LABEL_45;
                    v43 = 0;
                    while (*(unsigned __int8 *)(v40 + v43) == v38[v43])
                    {
                      if (v41 == ++v43)
                        goto LABEL_45;
                    }
                  }
                }
                v40 += 24;
              }
              while (v40 != v31);
              v40 = v31;
LABEL_45:
              v1 = v97;
              if (0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 3) == *(_QWORD *)(v97 + 792))
                goto LABEL_26;
              if (v34 < 0)
              {
                std::string::__init_copy_ctor_external(v99, v33, v35);
              }
              else
              {
                v44 = *(_OWORD *)v32;
                v99->__r_.__value_.__r.__words[2] = *(_QWORD *)(v32 + 16);
                *(_OWORD *)&v99->__r_.__value_.__l.__data_ = v44;
              }
              v45 = *v30;
              if (*(char *)(*v30 + 119) < 0)
              {
                std::string::__init_copy_ctor_external(v95, *(const std::string::value_type **)(v45 + 96), *(_QWORD *)(v45 + 104));
              }
              else
              {
                v46 = *(_OWORD *)(v45 + 96);
                v95->__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 112);
                *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v46;
              }
              AMSCore::URLBuilder::withQueryParameter((uint64_t)v96, (uint64_t)v99, (uint64_t)v95);
              if (*(char *)(v97 + 751) < 0)
              {
                operator delete(v95->__r_.__value_.__l.__data_);
                if (*(char *)(v97 + 727) < 0)
LABEL_56:
                  operator delete(v99->__r_.__value_.__l.__data_);
              }
              else if (*(char *)(v97 + 727) < 0)
              {
                goto LABEL_56;
              }
LABEL_26:
              ++v30;
            }
            while (v30 != v98);
          }
          std::__optional_destruct_base<std::expected<AMSCore::URLBuilder,AMSCore::Error>,false>::reset[abi:fe180100](v1 + 24);
          AMSCore::URLBuilder::URLBuilder((std::runtime_error *)(v1 + 24), v96);
          *(_BYTE *)(v1 + 256) = 1;
          *(_BYTE *)(v1 + 264) = 1;
          v5 = v92;
LABEL_79:
          v56 = *(uint64_t **)(v1 + 624);
          v58 = v93;
          v57 = v94;
          if (*(_BYTE *)(v1 + 696))
          {
            if (v56)
            {
              v59 = *(uint64_t **)(v1 + 632);
              v60 = *(void **)(v1 + 624);
              if (v59 != v56)
              {
                do
                  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v59, 0);
                while (v59 != v56);
                v60 = *(void **)v5;
              }
              *(_QWORD *)(v1 + 632) = v56;
              operator delete(v60);
              if (!*(_BYTE *)(v1 + 616))
                goto LABEL_141;
              goto LABEL_88;
            }
          }
          else
          {
            ((void (*)(_OWORD *))*v56)(v5);
          }
          if (!*(_BYTE *)(v1 + 616))
          {
LABEL_141:
            ((void (*)(std::runtime_error *))v57->~runtime_error)(v57);
LABEL_142:
            *(_QWORD *)(v1 + 544) = v58;
            *(_QWORD *)v1 = 0;
            return (std::runtime_error *)AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend(v57);
          }
LABEL_88:
          v61 = *(std::__shared_weak_count **)(v1 + 552);
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          goto LABEL_142;
        }
      }
      std::runtime_error::runtime_error(&v100, (const std::runtime_error *)(v1 + 624));
      v101 = *(_OWORD *)v8;
      v100.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v47 = *(_QWORD *)(v1 + 664);
      v102 = *(unsigned int ***)(v1 + 656);
      v103 = (unsigned int *)v47;
      v104 = *(_QWORD *)(v1 + 672);
      if (v104)
      {
        *(_QWORD *)(v47 + 16) = &v103;
        *(_QWORD *)(v1 + 656) = v1 + 664;
        *(_QWORD *)(v1 + 664) = 0;
        *(_QWORD *)(v1 + 672) = 0;
      }
      else
      {
        v102 = &v103;
      }
      v105 = *(_OWORD *)&p_imp[10].__imp_;
      p_imp[10].__imp_ = 0;
      p_imp[11].__imp_ = 0;
      v106 = 1;
      std::runtime_error::runtime_error(&v113, &v100);
      v114 = v101;
      v113.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v115 = v102;
      v116 = v103;
      v117 = v104;
      if (v104)
      {
        *((_QWORD *)v103 + 2) = &v116;
        v102 = &v103;
        v103 = 0;
        v104 = 0;
      }
      else
      {
        v115 = &v116;
      }
      v118 = v105;
      v105 = 0uLL;
      std::runtime_error::runtime_error(&v107, &v113);
      v108 = v114;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v48 = v116;
      v109 = v115;
      v110 = v116;
      v111 = v117;
      if (v117)
      {
        *((_QWORD *)v116 + 2) = &v110;
        v48 = 0;
        v115 = &v116;
        v116 = 0;
        v117 = 0;
      }
      else
      {
        v109 = &v110;
      }
      v112 = v118;
      v118 = 0uLL;
      v113.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v48);
      MEMORY[0x18D7898AC](&v113);
      std::__optional_destruct_base<std::expected<AMSCore::URLBuilder,AMSCore::Error>,false>::reset[abi:fe180100](v1 + 24);
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), &v107);
      v50 = v109;
      v49 = v110;
      *(_QWORD *)(v1 + 64) = v110;
      v51 = v1 + 64;
      *(_OWORD *)(v1 + 40) = v108;
      *(_QWORD *)(v1 + 24) = off_1E2521330;
      *(_QWORD *)(v1 + 56) = v50;
      v52 = v111;
      *(_QWORD *)(v1 + 72) = v111;
      if (v52)
      {
        *((_QWORD *)v49 + 2) = v51;
        v49 = 0;
        v109 = &v110;
        v110 = 0;
        v111 = 0;
      }
      else
      {
        *(_QWORD *)(v1 + 56) = v51;
      }
      *(_OWORD *)(v1 + 80) = v112;
      v112 = 0uLL;
      *(_BYTE *)(v1 + 256) = 0;
      *(_BYTE *)(v1 + 264) = 1;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v49);
      MEMORY[0x18D7898AC](&v107);
      if (v106)
      {
        v100.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
        if (*((_QWORD *)&v105 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v102, v103);
        MEMORY[0x18D7898AC](&v100);
      }
      goto LABEL_79;
    }
    goto LABEL_143;
  }
  imp = result[50].__imp_.__imp_;
  if (!imp[88])
  {
LABEL_143:
    __break(1u);
    return result;
  }
  v10 = (const std::runtime_error *)(imp + 8);
  v11 = imp[80];
  if (v11)
  {
    result[34].__vftable = (std::runtime_error_vtbl *)*((_QWORD *)imp + 1);
    v12 = &result[34].__imp_;
    v13 = (std::__libcpp_refstring *)(imp + 16);
  }
  else
  {
    std::runtime_error::runtime_error(result + 34, v10);
    *(_OWORD *)(v1 + 560) = *(_OWORD *)(imp + 24);
    *(_QWORD *)(v1 + 544) = off_1E2521330;
    v18 = imp + 48;
    v19 = *((_QWORD *)imp + 6);
    *(_QWORD *)(v1 + 576) = *((_QWORD *)imp + 5);
    v20 = v1 + 584;
    *(_QWORD *)(v1 + 584) = v19;
    v21 = *((_QWORD *)imp + 7);
    *(_QWORD *)(v1 + 592) = v21;
    if (v21)
    {
      *(_QWORD *)(v19 + 16) = v20;
      *((_QWORD *)imp + 5) = v18;
      *v18 = 0;
      *((_QWORD *)imp + 7) = 0;
    }
    else
    {
      *(_QWORD *)(v1 + 576) = v20;
    }
    v64 = *(const std::runtime_error **)(v1 + 808);
    v65 = v64[4].__vftable;
    v10 = v64 + 4;
    *(_QWORD *)(v1 + 600) = v65;
    v12 = (std::__libcpp_refstring *)(v1 + 608);
    v13 = &v10->__imp_;
  }
  v12->__imp_ = v13->__imp_;
  v10->__vftable = 0;
  v10->__imp_.__imp_ = 0;
  *(_BYTE *)(v1 + 616) = v11;
  v66 = *(_QWORD *)(v1 + 816);
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      v69 = *(std::__shared_weak_count **)(v1 + 816);
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v70 = *(std::__shared_weak_count **)(v1 + 632);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(std::__shared_weak_count **)(v1 + 776);
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *(std::__shared_weak_count **)(v1 + 760);
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
      if (*(_BYTE *)(v1 + 616))
        goto LABEL_115;
LABEL_121:
      std::runtime_error::runtime_error(&v100, v3);
      v101 = *(_OWORD *)(v1 + 560);
      v100.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v83 = *(_QWORD *)(v1 + 584);
      v102 = *(unsigned int ***)(v1 + 576);
      v103 = (unsigned int *)v83;
      v104 = *(_QWORD *)(v1 + 592);
      if (v104)
      {
        *(_QWORD *)(v83 + 16) = &v103;
        *(_QWORD *)(v1 + 576) = v1 + 584;
        *(_QWORD *)(v1 + 584) = 0;
        *(_QWORD *)(v1 + 592) = 0;
      }
      else
      {
        v102 = &v103;
      }
      v105 = *(_OWORD *)&p_imp->__imp_;
      p_imp->__imp_ = 0;
      p_imp[1].__imp_ = 0;
      v106 = 1;
      std::runtime_error::runtime_error(&v107, &v100);
      v108 = v101;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v109 = v102;
      v110 = v103;
      v111 = v104;
      if (v104)
      {
        *((_QWORD *)v103 + 2) = &v110;
        v102 = &v103;
        v103 = 0;
        v104 = 0;
      }
      else
      {
        v109 = &v110;
      }
      v112 = v105;
      v105 = 0uLL;
      std::runtime_error::runtime_error(&v113, &v107);
      v114 = v108;
      v84 = v110;
      v113.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v115 = v109;
      v116 = v110;
      v117 = v111;
      if (v111)
      {
        *((_QWORD *)v110 + 2) = &v116;
        v84 = 0;
        v109 = &v110;
        v110 = 0;
        v111 = 0;
      }
      else
      {
        v115 = &v116;
      }
      v118 = v112;
      v112 = 0uLL;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v84);
      MEMORY[0x18D7898AC](&v107);
      std::__optional_destruct_base<std::expected<AMSCore::URLBuilder,AMSCore::Error>,false>::reset[abi:fe180100](v1 + 24);
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), &v113);
      v86 = v115;
      v85 = v116;
      *(_QWORD *)(v1 + 64) = v116;
      v87 = v1 + 64;
      *(_OWORD *)(v1 + 40) = v114;
      *(_QWORD *)(v1 + 24) = off_1E2521330;
      *(_QWORD *)(v1 + 56) = v86;
      v88 = v117;
      *(_QWORD *)(v1 + 72) = v117;
      if (v88)
      {
        *((_QWORD *)v85 + 2) = v87;
        v85 = 0;
        v115 = &v116;
        v116 = 0;
        v117 = 0;
      }
      else
      {
        *(_QWORD *)(v1 + 56) = v87;
      }
      *(_OWORD *)(v1 + 80) = v118;
      v118 = 0uLL;
      *(_BYTE *)(v1 + 256) = 0;
      *(_BYTE *)(v1 + 264) = 1;
      v113.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v85);
      MEMORY[0x18D7898AC](&v113);
      if (v106)
      {
        v100.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
        if (*((_QWORD *)&v105 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v102, v103);
        MEMORY[0x18D7898AC](&v100);
      }
      v58 = v93;
      v57 = v94;
      if (!*(_BYTE *)(v1 + 616))
        goto LABEL_141;
      goto LABEL_88;
    }
  }
  if (!*(_BYTE *)(v1 + 616))
    goto LABEL_121;
LABEL_115:
  result = (std::runtime_error *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 544) + 40))(*(_QWORD *)(v1 + 544));
  v79 = *(_OWORD *)(v1 + 752);
  *(_OWORD *)&p_imp[28].__imp_ = v79;
  *(_QWORD *)(v1 + 752) = 0;
  *(_QWORD *)(v1 + 760) = 0;
  if (atomic_load((unint64_t *)(v79 + 96)))
    goto LABEL_2;
  LOBYTE(p_imp[30].__imp_) = 1;
  v81 = (unint64_t *)(*(_QWORD *)(v1 + 824) + 96);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v1, v81));
  if (v82)
    goto LABEL_2;
  return result;
}

void sub_18CC0ED54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 727) < 0)
    operator delete(*a17);
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](a10);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a12);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC0ED9C()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC0ED20);
}

void AMSCore::LoadNetworkBagTask::`anonymous namespace'::addCookieToUrl(char *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  if (!*(_QWORD *)a1)
    goto LABEL_40;
  if (a1[840])
  {
    v2 = *((_QWORD *)a1 + 104);
    if (!v2)
      goto LABEL_7;
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      v22 = (std::__shared_weak_count *)*((_QWORD *)a1 + 104);
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 95);
      if (!v5)
        goto LABEL_11;
    }
    else
    {
LABEL_7:
      v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 95);
      if (!v5)
        goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (a1[616])
        goto LABEL_12;
      goto LABEL_39;
    }
LABEL_11:
    if (a1[616])
    {
LABEL_12:
      v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 69);
      if (!v8)
        goto LABEL_40;
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_34;
    }
LABEL_39:
    (**((void (***)(uint64_t))a1 + 68))((uint64_t)(a1 + 544));
    goto LABEL_40;
  }
  v11 = *((_QWORD *)a1 + 102);
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 102);
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)a1 + 79);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)a1 + 97);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 95);
  if (v8)
  {
    v21 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v21);
    while (__stlxr(v10 - 1, v21));
LABEL_34:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_40:
  v23 = (char *)*((_QWORD *)a1 + 38);
  if (v23 == a1 + 280)
  {
    v24 = 4;
    v23 = a1 + 280;
  }
  else
  {
    if (!v23)
      goto LABEL_45;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_45:
  v25 = *((_QWORD *)a1 + 100);
  if (a1[264])
  {
    if (a1[256])
    {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 104));
      if (a1[96])
      {
        *((_QWORD *)a1 + 3) = off_1E2521330;
        v26 = (std::__shared_weak_count *)*((_QWORD *)a1 + 11);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 56), *((unsigned int **)a1 + 8));
        MEMORY[0x18D7898AC](a1 + 24);
      }
    }
    else
    {
      (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    }
  }
  do
  {
    v29 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v30)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (v25)
  {
    v31 = (unint64_t *)(*((_QWORD *)a1 + 100) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v33 = (std::__shared_weak_count *)*((_QWORD *)a1 + 100);
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 392));
  if (a1[384])
  {
    *((_QWORD *)a1 + 39) = off_1E2521330;
    v34 = (std::__shared_weak_count *)*((_QWORD *)a1 + 47);
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 344), *((unsigned int **)a1 + 44));
    MEMORY[0x18D7898AC](a1 + 312);
  }
  operator delete(a1);
}

void std::__optional_destruct_base<std::expected<AMSCore::URLBuilder,AMSCore::Error>,false>::reset[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 240))
  {
    if (*(_BYTE *)(a1 + 232))
    {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 80));
      if (*(_BYTE *)(a1 + 72))
      {
        *(_QWORD *)a1 = off_1E2521330;
        v2 = *(std::__shared_weak_count **)(a1 + 64);
        if (v2)
        {
          p_shared_owners = (unint64_t *)&v2->__shared_owners_;
          do
            v4 = __ldaxr(p_shared_owners);
          while (__stlxr(v4 - 1, p_shared_owners));
          if (!v4)
          {
            ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
            std::__shared_weak_count::__release_weak(v2);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, *(unsigned int **)(a1 + 40));
        MEMORY[0x18D7898AC](a1);
      }
    }
    else
    {
      (**(void (***)(uint64_t))a1)(a1);
    }
    *(_BYTE *)(a1 + 240) = 0;
  }
}

uint64_t std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = *(uint64_t **)a1;
  if (*(_BYTE *)(a1 + 72))
  {
    if (v2)
    {
      v3 = *(uint64_t **)(a1 + 8);
      v4 = *(uint64_t **)a1;
      if (v3 != v2)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
        while (v3 != v2);
        v4 = *(uint64_t **)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  else
  {
    ((void (*)(uint64_t))*v2)(a1);
  }
  return a1;
}

void AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::runtime_error v14;
  __int128 v15;
  unsigned int **v16;
  unsigned int *v17;
  __int128 v19;
  char v20;
  uint64_t v21;
  char v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v1 = result;
  v25 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 256);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = *(_QWORD *)result;
    result = *(_BYTE **)(*(_QWORD *)result + 288);
    if (result)
    {
      if (result == (_BYTE *)(v4 + 264))
      {
        v24 = v23;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v23);
      }
      else
      {
        v24 = result;
        *(_QWORD *)(v4 + 288) = 0;
      }
    }
    else
    {
      v24 = 0;
    }
    if (v24)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(*(_QWORD *)v1 + 248))
      {
        __break(1u);
        return result;
      }
      v6 = (std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 240);
      if (v7)
      {
        AMSCore::URLBuilder::URLBuilder(&v14, v6);
      }
      else
      {
        std::runtime_error::runtime_error(&v14, v6);
        v8 = (_QWORD *)(v5 + 48);
        v9 = *(_QWORD *)(v5 + 48);
        v15 = *(_OWORD *)(v5 + 24);
        v14.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v16 = *(unsigned int ***)(v5 + 40);
        v17 = (unsigned int *)v9;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v9 + 16) = &v17;
          *(_QWORD *)(v5 + 40) = v8;
          *v8 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v16 = &v17;
        }
        v19 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v22 = v7;
      if (!v24)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v24 + 48))(v24, &v14);
      if (v22)
      {
        AMSCore::URL::~URL((AMSCore::URL *)&v21);
        if (v20)
        {
          v14.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v10 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
          if (*((_QWORD *)&v19 + 1))
          {
            v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v17);
          MEMORY[0x18D7898AC](&v14);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v14.~runtime_error)(&v14);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v24;
    if (v24 == v23)
    {
      v13 = 4;
      result = v23;
    }
    else
    {
      if (!v24)
        return result;
      v13 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v13))();
  }
  return result;
}

void sub_18CC0F6CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 256);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_10URLBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_10URLBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_10URLBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_10URLBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *AMSCore::OrderedMap<std::string,std::string>::~OrderedMap(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0)
LABEL_9:
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 416);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_object"
                                "EvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void AMSCore::LoadNetworkBagTask::buildStorefront(std::string *this, uint64_t a2, char *a3)
{
  int v5;
  BOOL v6;
  std::string *v7;
  char v9;
  const std::string::value_type *v10;
  int v11;
  char *v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  std::string *p_dst;
  std::string::value_type *v17;
  const std::string::value_type *v18;
  int v19;
  int64_t v20;
  int64_t v21;
  const std::string::value_type *v22;
  const std::string::value_type *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const void *v27;
  size_t v28;
  std::string::size_type v29;
  std::string::size_type size;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  std::string::size_type v34;
  const std::string::value_type *__s;
  std::string __dst;

  v5 = *(unsigned __int8 *)(a2 + 24);
  if (a3[24])
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
LABEL_6:
    this->__r_.__value_.__s.__data_[0] = 0;
    this[1].__r_.__value_.__s.__data_[0] = 0;
    v7 = this + 1;
    if (!v5)
      return;
    if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
      goto LABEL_28;
    goto LABEL_8;
  }
  v9 = *(_BYTE *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  v11 = a3[23];
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(char **)a3;
  if (v11 >= 0)
    v13 = a3[23];
  else
    v13 = *((_QWORD *)a3 + 1);
  if (!v13)
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    this[1].__r_.__value_.__s.__data_[0] = 0;
    v7 = this + 1;
    if (v9 < 0)
    {
LABEL_28:
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      goto LABEL_29;
    }
LABEL_8:
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
LABEL_29:
    v7->__r_.__value_.__s.__data_[0] = 1;
    return;
  }
  __s = v10;
  if (v9 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  if (v14 >= v13)
  {
    v17 = (std::string::value_type *)v10;
    v18 = &v10[v14];
    v19 = *v12;
    v20 = v14;
    do
    {
      v21 = v20 - v13;
      if (v21 == -1)
        break;
      v22 = (const std::string::value_type *)memchr(v17, v19, v21 + 1);
      if (!v22)
        break;
      v23 = v22;
      if (!memcmp(v22, v12, v13))
      {
        if (v23 != v18 && v23 - __s != -1)
          goto LABEL_6;
        break;
      }
      v17 = (std::string::value_type *)(v23 + 1);
      v20 = v18 - (v23 + 1);
    }
    while (v20 >= v13);
  }
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:fe180100]();
  if (v15 >= 0x17)
  {
    v24 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v24 = v15 | 7;
    v25 = v24 + 1;
    p_dst = (std::string *)operator new(v24 + 1);
    __dst.__r_.__value_.__l.__size_ = v14 + 1;
    __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_39;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
  if (v14)
LABEL_39:
    memmove(p_dst, __s, v14);
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 32;
  if (a3[24])
  {
    v26 = a3[23];
    if (v26 >= 0)
      v27 = a3;
    else
      v27 = *(const void **)a3;
    if (v26 >= 0)
      v28 = a3[23];
    else
      v28 = *((_QWORD *)a3 + 1);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = 22;
    else
      v29 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    if (v29 - size >= v28)
    {
      if (v28)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &__dst;
        else
          v31 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        memmove((char *)v31 + size, v27, v28);
        v32 = size + v28;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          __dst.__r_.__value_.__l.__size_ = size + v28;
        else
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32 & 0x7F;
        v31->__r_.__value_.__s.__data_[v32] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&__dst, v29, size + v28 - v29, size, size, 0, v28, (const std::string::value_type *)v27);
    }
    v33 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v34 = __dst.__r_.__value_.__l.__size_;
    this->__r_.__value_.__r.__words[0] = __dst.__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = v34;
    *(std::string::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v33;
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    __break(1u);
  }
}

void sub_18CC0FBC4(void *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

void AMSCore::LoadNetworkBagTask::perform(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _OWORD *a6@<X8>)
{
  char *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *v18;
  unsigned int v19;
  void (***v20)(uint64_t, const std::runtime_error *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::ios_base *v25;
  uint64_t v26;
  unsigned __int8 v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 v46;
  __int128 v47;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  const std::runtime_error *v52;
  int v53;
  std::runtime_error v54;
  __int128 v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::runtime_error *v81;
  std::runtime_error *v82;
  void **v83;
  std::runtime_error *v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  _OWORD v89[3];
  uint64_t v90;
  void *__p[2];
  __int128 v92;
  int v93;
  uint64_t v94[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v11 = (char *)operator new(0x300uLL);
  *(_QWORD *)v11 = AMSCore::LoadNetworkBagTask::perform;
  *((_QWORD *)v11 + 1) = AMSCore::LoadNetworkBagTask::perform;
  v12 = v11 + 520;
  v13 = v11 + 632;
  *(_OWORD *)(v11 + 632) = *(_OWORD *)a1;
  v85 = (std::runtime_error *)(v11 + 456);
  v82 = (std::runtime_error *)(v11 + 200);
  v83 = (void **)(v11 + 584);
  *((_QWORD *)v11 + 81) = *(_QWORD *)(a1 + 16);
  v81 = (std::runtime_error *)(v11 + 680);
  v86 = (uint64_t)(v11 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v14 = v11 + 656;
  *((_OWORD *)v11 + 41) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v11 + 84) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v15 = *a2;
  v16 = a2[1];
  *((_QWORD *)v11 + 91) = v16;
  *a2 = 0;
  a2[1] = 0;
  v17 = a3[1];
  v79 = v15;
  v80 = *a3;
  *((_QWORD *)v11 + 92) = v17;
  *a3 = 0;
  a3[1] = 0;
  v18 = (std::runtime_error *)(v11 + 328);
  LOBYTE(a1) = *(_BYTE *)(a4 + 120);
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)(v11 + 328), a1, (std::runtime_error *)a4);
  v11[448] = a1;
  do
    v19 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v19 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v11[24] = 0;
  v20 = (void (***)(uint64_t, const std::runtime_error *))(v11 + 24);
  v11[152] = 0;
  *((_QWORD *)v11 + 20) = 0;
  *((_QWORD *)v11 + 24) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v89, v86);
  *a6 = v89[0];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v87);
  if (*(int *)(v87 + 8) <= 2)
  {
    v78 = v87;
    v21 = MEMORY[0x1E0DE4FE0];
    v22 = MEMORY[0x1E0DE4FE0] + 64;
    v23 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v94[0] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)&v89[0] = v23;
    *(_QWORD *)((char *)v89 + *(_QWORD *)(v23 - 24)) = v24;
    v25 = (std::ios_base *)((char *)v89 + *(_QWORD *)(*(_QWORD *)&v89[0] - 24));
    std::ios_base::init(v25, (char *)v89 + 8);
    v25[1].__vftable = 0;
    v25[1].__fmtflags_ = -1;
    *(_QWORD *)&v89[0] = v21 + 24;
    v94[0] = v22;
    std::streambuf::basic_streambuf();
    *((_QWORD *)&v89[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v92 = 0u;
    v93 = 16;
    v26 = *(_QWORD *)(*(_QWORD *)&v89[0] - 24);
    if ((v27 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v89, (uint64_t)"Starting a bag load with: ", 26);
    v28 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v89, (uint64_t)"", 0);
    v29 = v11[655];
    if (v29 >= 0)
      v30 = (uint64_t)(v11 + 632);
    else
      v30 = *((_QWORD *)v11 + 79);
    if (v29 >= 0)
      v31 = v11[655];
    else
      v31 = *((_QWORD *)v11 + 80);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v28, v30, v31);
    v32 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v89, (uint64_t)", ", 2);
    v33 = v11[679];
    if (v33 >= 0)
      v34 = (uint64_t)(v11 + 656);
    else
      v34 = *((_QWORD *)v11 + 82);
    if (v33 >= 0)
      v35 = v11[679];
    else
      v35 = *((_QWORD *)v11 + 83);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v32, v34, v35);
    v36 = v90;
    v37 = (char *)v89 + *(_QWORD *)(*(_QWORD *)&v89[0] - 24);
    if ((v37[32] & 5) != 0)
    {
      v38 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v37 + 5) + 32))(&rep, *((_QWORD *)v37 + 5), 0, 1, 16);
      v38 = v99;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v96 = 2;
    v97 = v36;
    v98 = v38;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v78 + 16) + 16))(*(_QWORD *)(v78 + 16), "bag", 3, &rep);
    *(_QWORD *)&v89[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v89 + *(_QWORD *)(*(_QWORD *)&v89[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&v89[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v92) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v94);
    v18 = (std::runtime_error *)(v11 + 328);
  }
  v39 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *(_OWORD *)v83 = *v13;
  *((_QWORD *)v11 + 75) = *((_QWORD *)v11 + 81);
  *((_QWORD *)v11 + 80) = 0;
  *((_QWORD *)v11 + 81) = 0;
  *(_QWORD *)v13 = 0;
  *((_OWORD *)v11 + 38) = *v14;
  *((_QWORD *)v11 + 78) = *((_QWORD *)v11 + 84);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v11 + 83) = 0;
  *((_QWORD *)v11 + 84) = 0;
  *((_QWORD *)v11 + 87) = v79;
  *((_QWORD *)v11 + 88) = v16;
  if (v16)
  {
    v42 = (unint64_t *)(v16 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  *((_QWORD *)v11 + 89) = v80;
  *((_QWORD *)v11 + 90) = v17;
  if (v17)
  {
    v44 = (unint64_t *)(v17 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = v11[448];
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(v82, v46, v18);
  v11[320] = v46;
  v47 = *(_OWORD *)(v11 + 680);
  *(_OWORD *)(v11 + 744) = v47;
  v81->__vftable = 0;
  *((_QWORD *)v11 + 86) = 0;
  if (atomic_load((unint64_t *)(v47 + 144)))
    goto LABEL_38;
  v11[760] = 0;
  v49 = (unint64_t *)(*((_QWORD *)v11 + 93) + 144);
  do
    v50 = __ldaxr(v49);
  while (__stlxr((unint64_t)v11, v49));
  if (v50)
  {
LABEL_38:
    v51 = *((_QWORD *)v11 + 93);
    if (!*(_BYTE *)(v51 + 136))
      __break(1u);
    v52 = (const std::runtime_error *)(v51 + 8);
    v53 = *(unsigned __int8 *)(v51 + 128);
    if (*(_BYTE *)(v51 + 128))
    {
      v11[456] = 0;
      v11[480] = 0;
      if (*(_BYTE *)(v51 + 32))
      {
        v54 = *v52;
        *((_QWORD *)v11 + 59) = *(_QWORD *)(v51 + 24);
        *v85 = v54;
        *(_QWORD *)(v51 + 16) = 0;
        *(_QWORD *)(v51 + 24) = 0;
        v52->__vftable = 0;
        v11[480] = 1;
      }
      v11[488] = 0;
      v11[512] = 0;
      if (*(_BYTE *)(v51 + 64))
      {
        v55 = *(_OWORD *)(v51 + 40);
        *((_QWORD *)v11 + 63) = *(_QWORD *)(v51 + 56);
        *(_OWORD *)(v11 + 488) = v55;
        *(_QWORD *)(v51 + 48) = 0;
        *(_QWORD *)(v51 + 56) = 0;
        *(_QWORD *)(v51 + 40) = 0;
        v11[512] = 1;
      }
      *v12 = *(_OWORD *)(v51 + 72);
      *((_QWORD *)v11 + 67) = *(_QWORD *)(v51 + 88);
      *(_QWORD *)(v51 + 80) = 0;
      *(_QWORD *)(v51 + 88) = 0;
      *(_QWORD *)(v51 + 72) = 0;
      v56 = *(_BYTE *)(v51 + 98);
      *((_WORD *)v11 + 272) = *(_WORD *)(v51 + 96);
      v11[546] = v56;
      *(_OWORD *)(v11 + 552) = *(_OWORD *)(v51 + 104);
      *(_QWORD *)(v51 + 104) = 0;
      *(_QWORD *)(v51 + 112) = 0;
      *((_QWORD *)v11 + 71) = *(_QWORD *)(v51 + 120);
    }
    else
    {
      std::runtime_error::runtime_error(v85, v52);
      *(_OWORD *)(v11 + 472) = *(_OWORD *)(v51 + 24);
      *((_QWORD *)v11 + 57) = off_1E2521330;
      v57 = (_QWORD *)(v51 + 48);
      v58 = *(_QWORD *)(v51 + 48);
      v59 = v11 + 496;
      *((_QWORD *)v11 + 61) = *(_QWORD *)(v51 + 40);
      *((_QWORD *)v11 + 62) = v58;
      v60 = *(_QWORD *)(v51 + 56);
      *((_QWORD *)v11 + 63) = v60;
      if (v60)
      {
        *(_QWORD *)(v58 + 16) = v59;
        *(_QWORD *)(v51 + 40) = v57;
        *v57 = 0;
        *(_QWORD *)(v51 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v11 + 61) = v59;
      }
      *((_OWORD *)v11 + 32) = *(_OWORD *)(v51 + 64);
      *(_QWORD *)(v51 + 64) = 0;
      *(_QWORD *)(v51 + 72) = 0;
    }
    v11[576] = v53;
    if (v11[152])
    {
      if (v11[144])
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(v11 + 24));
      else
        (**v20)((uint64_t)(v11 + 24), v52);
      v11[152] = 0;
      v53 = v11[576];
    }
    if (v53)
    {
      v11[24] = 0;
      v11[48] = 0;
      if (v11[480])
      {
        *(std::runtime_error *)v20 = *v85;
        *((_QWORD *)v11 + 5) = *((_QWORD *)v11 + 59);
        *((_QWORD *)v11 + 58) = 0;
        *((_QWORD *)v11 + 59) = 0;
        v85->__vftable = 0;
        v11[48] = 1;
      }
      v11[56] = 0;
      v11[80] = 0;
      if (v11[512])
      {
        *((_QWORD *)v11 + 9) = *((_QWORD *)v11 + 63);
        *(_OWORD *)(v11 + 56) = *(_OWORD *)(v11 + 488);
        *((_QWORD *)v11 + 62) = 0;
        *((_QWORD *)v11 + 63) = 0;
        *((_QWORD *)v11 + 61) = 0;
        v11[80] = 1;
      }
      *(_OWORD *)(v11 + 88) = *v12;
      *((_QWORD *)v11 + 13) = *((_QWORD *)v11 + 67);
      *((_QWORD *)v11 + 66) = 0;
      *((_QWORD *)v11 + 67) = 0;
      *(_QWORD *)v12 = 0;
      *((_WORD *)v11 + 56) = *((_WORD *)v11 + 272);
      v11[114] = v11[546];
      *(_OWORD *)(v11 + 120) = *(_OWORD *)(v11 + 552);
      *((_QWORD *)v11 + 69) = 0;
      *((_QWORD *)v11 + 70) = 0;
      *((_QWORD *)v11 + 17) = *((_QWORD *)v11 + 71);
      v11[144] = v53;
      v11[152] = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v11 + 24), v85);
      v61 = *((_QWORD *)v11 + 62);
      *((_QWORD *)v11 + 8) = v61;
      v62 = v11 + 64;
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v11 + 472);
      *((_QWORD *)v11 + 3) = off_1E2521330;
      *((_QWORD *)v11 + 7) = *((_QWORD *)v11 + 61);
      v63 = *((_QWORD *)v11 + 63);
      *((_QWORD *)v11 + 9) = v63;
      if (v63)
      {
        *(_QWORD *)(v61 + 16) = v62;
        *((_QWORD *)v11 + 61) = v11 + 496;
        *((_QWORD *)v11 + 62) = 0;
        *((_QWORD *)v11 + 63) = 0;
      }
      else
      {
        *((_QWORD *)v11 + 7) = v62;
      }
      *((_OWORD *)v11 + 5) = *((_OWORD *)v11 + 32);
      *((_QWORD *)v11 + 65) = 0;
      *((_QWORD *)v11 + 64) = 0;
      v64 = v11[576];
      v11[144] = 0;
      v11[152] = 1;
      if (!v64)
      {
        ((void (*)(std::runtime_error *))v85->~runtime_error)(v85);
        v65 = *((_QWORD *)v11 + 94);
        if (!v65)
          goto LABEL_69;
LABEL_65:
        v66 = (unint64_t *)(v65 + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          v68 = (std::__shared_weak_count *)*((_QWORD *)v11 + 94);
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
LABEL_69:
        v69 = (std::__shared_weak_count *)*((_QWORD *)v11 + 86);
        if (!v69)
          goto LABEL_73;
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
          if (!v11[320])
            goto LABEL_81;
        }
        else
        {
LABEL_73:
          if (!v11[320])
            goto LABEL_81;
        }
        if (v11[319] < 0)
        {
          operator delete(*((void **)v11 + 37));
          if (v11[272])
          {
LABEL_76:
            v72 = (std::__shared_weak_count *)*((_QWORD *)v11 + 90);
            if (!v72)
              goto LABEL_86;
LABEL_82:
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
LABEL_86:
            v75 = (std::__shared_weak_count *)*((_QWORD *)v11 + 88);
            if (!v75)
              goto LABEL_90;
            v76 = (unint64_t *)&v75->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
              if ((v11[631] & 0x80000000) == 0)
              {
LABEL_91:
                if (v11[607] < 0)
                  goto LABEL_95;
                goto LABEL_96;
              }
            }
            else
            {
LABEL_90:
              if ((v11[631] & 0x80000000) == 0)
                goto LABEL_91;
            }
            operator delete(*((void **)v11 + 76));
            if (v11[607] < 0)
LABEL_95:
              operator delete(*v83);
LABEL_96:
            *((_QWORD *)v11 + 57) = v86;
            *(_QWORD *)v11 = 0;
            AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v85);
            return;
          }
        }
        else if (v11[272])
        {
          goto LABEL_76;
        }
LABEL_81:
        ((void (*)(std::runtime_error *))v82->~runtime_error)(v82);
        v72 = (std::__shared_weak_count *)*((_QWORD *)v11 + 90);
        if (!v72)
          goto LABEL_86;
        goto LABEL_82;
      }
    }
    AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v85);
    v65 = *((_QWORD *)v11 + 94);
    if (!v65)
      goto LABEL_69;
    goto LABEL_65;
  }
}

void sub_18CC1054C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_BYTE *AMSCore::LoadNetworkBagTask::perform(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  std::runtime_error *v4;
  const std::runtime_error *v5;
  int v6;
  std::runtime_error v7;
  __int128 v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  AMSCore::LoadNetworkBagResult *v14;
  std::runtime_error *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;

  v1 = *((_QWORD *)result + 93);
  if (*(_BYTE *)(v1 + 136))
  {
    v2 = result;
    v3 = result + 520;
    v4 = (std::runtime_error *)(result + 456);
    v5 = (const std::runtime_error *)(v1 + 8);
    v6 = *(unsigned __int8 *)(v1 + 128);
    if (*(_BYTE *)(v1 + 128))
    {
      result[456] = 0;
      result[480] = 0;
      if (*(_BYTE *)(v1 + 32))
      {
        v7 = *v5;
        *((_QWORD *)result + 59) = *(_QWORD *)(v1 + 24);
        *v4 = v7;
        *(_QWORD *)(v1 + 16) = 0;
        *(_QWORD *)(v1 + 24) = 0;
        v5->__vftable = 0;
        result[480] = 1;
      }
      result[488] = 0;
      result[512] = 0;
      if (*(_BYTE *)(v1 + 64))
      {
        v8 = *(_OWORD *)(v1 + 40);
        *((_QWORD *)result + 63) = *(_QWORD *)(v1 + 56);
        *(_OWORD *)(result + 488) = v8;
        *(_QWORD *)(v1 + 48) = 0;
        *(_QWORD *)(v1 + 56) = 0;
        *(_QWORD *)(v1 + 40) = 0;
        result[512] = 1;
      }
      *(_OWORD *)v3 = *(_OWORD *)(v1 + 72);
      *((_QWORD *)result + 67) = *(_QWORD *)(v1 + 88);
      *(_QWORD *)(v1 + 80) = 0;
      *(_QWORD *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 72) = 0;
      v9 = *(_BYTE *)(v1 + 98);
      *((_WORD *)result + 272) = *(_WORD *)(v1 + 96);
      result[546] = v9;
      *(_OWORD *)(result + 552) = *(_OWORD *)(v1 + 104);
      *(_QWORD *)(v1 + 104) = 0;
      *(_QWORD *)(v1 + 112) = 0;
      *((_QWORD *)result + 71) = *(_QWORD *)(v1 + 120);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 456), v5);
      *(_OWORD *)(v2 + 472) = *(_OWORD *)(v1 + 24);
      *((_QWORD *)v2 + 57) = off_1E2521330;
      v10 = (_QWORD *)(v1 + 48);
      v11 = *(_QWORD *)(v1 + 48);
      v12 = v2 + 496;
      *((_QWORD *)v2 + 61) = *(_QWORD *)(v1 + 40);
      *((_QWORD *)v2 + 62) = v11;
      v13 = *(_QWORD *)(v1 + 56);
      *((_QWORD *)v2 + 63) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(v1 + 40) = v10;
        *v10 = 0;
        *(_QWORD *)(v1 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 61) = v12;
      }
      *((_OWORD *)v2 + 32) = *(_OWORD *)(v1 + 64);
      *(_QWORD *)(v1 + 64) = 0;
      *(_QWORD *)(v1 + 72) = 0;
    }
    v2[576] = v6;
    if (v2[152])
    {
      v14 = (AMSCore::LoadNetworkBagResult *)(v2 + 24);
      if (v2[144])
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v14);
      else
        (**(void (***)(AMSCore::LoadNetworkBagResult *, const std::runtime_error *))v14)(v14, v5);
      v2[152] = 0;
      v6 = v2[576];
    }
    v15 = (std::runtime_error *)(v2 + 24);
    if (v6)
    {
      v2[24] = 0;
      v2[48] = 0;
      if (v2[480])
      {
        *v15 = *v4;
        *((_QWORD *)v2 + 5) = v4[1].__vftable;
        v4->__imp_.__imp_ = 0;
        v4[1].__vftable = 0;
        v4->__vftable = 0;
        v2[48] = 1;
      }
      v2[56] = 0;
      v2[80] = 0;
      if (v2[512])
      {
        *((_QWORD *)v2 + 9) = *((_QWORD *)v2 + 63);
        *(_OWORD *)(v2 + 56) = *(_OWORD *)(v2 + 488);
        *((_QWORD *)v2 + 62) = 0;
        *((_QWORD *)v2 + 63) = 0;
        *((_QWORD *)v2 + 61) = 0;
        v2[80] = 1;
      }
      *(_OWORD *)(v2 + 88) = *(_OWORD *)v3;
      *((_QWORD *)v2 + 13) = *((_QWORD *)v2 + 67);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *((_WORD *)v2 + 56) = *((_WORD *)v2 + 272);
      v2[114] = v2[546];
      *(_OWORD *)(v2 + 120) = *((_OWORD *)v3 + 2);
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v2 + 17) = *((_QWORD *)v2 + 71);
      v2[144] = v6;
      v2[152] = 1;
    }
    else
    {
      std::runtime_error::runtime_error(v15, v4);
      v16 = *((_QWORD *)v2 + 62);
      *((_QWORD *)v2 + 8) = v16;
      v17 = v2 + 64;
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(v2 + 472);
      *((_QWORD *)v2 + 3) = off_1E2521330;
      *((_QWORD *)v2 + 7) = *((_QWORD *)v2 + 61);
      v18 = *((_QWORD *)v2 + 63);
      *((_QWORD *)v2 + 9) = v18;
      if (v18)
      {
        *(_QWORD *)(v16 + 16) = v17;
        *((_QWORD *)v2 + 61) = v2 + 496;
        *((_QWORD *)v2 + 62) = 0;
        *((_QWORD *)v2 + 63) = 0;
      }
      else
      {
        *((_QWORD *)v2 + 7) = v17;
      }
      *((_OWORD *)v2 + 5) = *((_OWORD *)v2 + 32);
      *((_QWORD *)v2 + 65) = 0;
      *((_QWORD *)v2 + 64) = 0;
      v19 = v2[576];
      v2[144] = 0;
      v2[152] = 1;
      if (!v19)
      {
        ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
        v20 = *((_QWORD *)v2 + 94);
        if (!v20)
          goto LABEL_32;
LABEL_28:
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          v23 = (std::__shared_weak_count *)*((_QWORD *)v2 + 94);
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
LABEL_32:
        v24 = (std::__shared_weak_count *)*((_QWORD *)v2 + 86);
        if (!v24)
          goto LABEL_36;
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
          if (!v2[320])
            goto LABEL_44;
        }
        else
        {
LABEL_36:
          if (!v2[320])
            goto LABEL_44;
        }
        if ((char)v2[319] < 0)
        {
          operator delete(*((void **)v2 + 37));
          if (v2[272])
          {
LABEL_39:
            v27 = (std::__shared_weak_count *)*((_QWORD *)v2 + 90);
            if (!v27)
              goto LABEL_49;
LABEL_45:
            v28 = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
LABEL_49:
            v30 = (std::__shared_weak_count *)*((_QWORD *)v2 + 88);
            if (!v30)
              goto LABEL_53;
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
              if (((char)v2[631] & 0x80000000) == 0)
              {
LABEL_54:
                if (((char)v2[607] & 0x80000000) == 0)
                {
LABEL_55:
                  *((_QWORD *)v2 + 57) = v2 + 16;
                  *(_QWORD *)v2 = 0;
                  return AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v4);
                }
LABEL_58:
                operator delete(*((void **)v2 + 73));
                goto LABEL_55;
              }
            }
            else
            {
LABEL_53:
              if (((char)v2[631] & 0x80000000) == 0)
                goto LABEL_54;
            }
            operator delete(*((void **)v2 + 76));
            if (((char)v2[607] & 0x80000000) == 0)
              goto LABEL_55;
            goto LABEL_58;
          }
        }
        else if (v2[272])
        {
          goto LABEL_39;
        }
LABEL_44:
        (**((void (***)(uint64_t))v2 + 25))((uint64_t)(v2 + 200));
        v27 = (std::__shared_weak_count *)*((_QWORD *)v2 + 90);
        if (!v27)
          goto LABEL_49;
        goto LABEL_45;
      }
    }
    AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v4);
    v20 = *((_QWORD *)v2 + 94);
    if (!v20)
      goto LABEL_32;
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void AMSCore::LoadNetworkBagTask::perform(char *__p)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  AMSCore::LoadNetworkBagResult *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;

  v2 = (void (***)(_QWORD))(__p + 200);
  if (*(_QWORD *)__p)
  {
    v3 = *((_QWORD *)__p + 94);
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 94);
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)__p + 86);
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!__p[320])
        goto LABEL_19;
    }
    else
    {
LABEL_11:
      if (!__p[320])
        goto LABEL_19;
    }
    if (__p[319] < 0)
    {
      operator delete(*((void **)__p + 37));
      if (__p[272])
      {
LABEL_14:
        v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 90);
        if (!v10)
          goto LABEL_24;
LABEL_20:
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
LABEL_24:
        v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 88);
        if (!v13)
          goto LABEL_28;
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
          if ((__p[631] & 0x80000000) == 0)
          {
LABEL_29:
            if ((__p[607] & 0x80000000) == 0)
              goto LABEL_30;
LABEL_65:
            operator delete(*((void **)__p + 73));
            goto LABEL_30;
          }
        }
        else
        {
LABEL_28:
          if ((__p[631] & 0x80000000) == 0)
            goto LABEL_29;
        }
        operator delete(*((void **)__p + 76));
        if ((__p[607] & 0x80000000) == 0)
          goto LABEL_30;
        goto LABEL_65;
      }
    }
    else if (__p[272])
    {
      goto LABEL_14;
    }
LABEL_19:
    (**v2)(v2);
    v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 90);
    if (!v10)
      goto LABEL_24;
    goto LABEL_20;
  }
LABEL_30:
  v16 = (char *)*((_QWORD *)__p + 24);
  if (v16 == __p + 168)
  {
    v17 = 4;
    v16 = __p + 168;
  }
  else
  {
    if (!v16)
      goto LABEL_35;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_35:
  if (__p[152])
  {
    v18 = (AMSCore::LoadNetworkBagResult *)(__p + 24);
    if (__p[144])
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v18);
    else
      (**(void (***)(AMSCore::LoadNetworkBagResult *))v18)(v18);
  }
  do
  {
    v19 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v20)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (!__p[448])
    goto LABEL_48;
  if ((__p[447] & 0x80000000) == 0)
  {
    if (__p[400])
      goto LABEL_45;
LABEL_48:
    (**((void (***)(char *))__p + 41))(__p + 328);
    v21 = *((_QWORD *)__p + 92);
    if (!v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  operator delete(*((void **)__p + 53));
  if (!__p[400])
    goto LABEL_48;
LABEL_45:
  v21 = *((_QWORD *)__p + 92);
  if (!v21)
    goto LABEL_53;
LABEL_49:
  v22 = (unint64_t *)(v21 + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    v24 = (std::__shared_weak_count *)*((_QWORD *)__p + 92);
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_53:
  v25 = *((_QWORD *)__p + 91);
  if (!v25)
    goto LABEL_57;
  v26 = (unint64_t *)(v25 + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
  {
LABEL_57:
    if ((__p[679] & 0x80000000) == 0)
      goto LABEL_58;
LABEL_61:
    operator delete(*((void **)__p + 82));
    if ((__p[655] & 0x80000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete(*((void **)__p + 79));
    goto LABEL_59;
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)__p + 91);
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (__p[679] < 0)
    goto LABEL_61;
LABEL_58:
  if (__p[655] < 0)
    goto LABEL_62;
LABEL_59:
  operator delete(__p);
}

_QWORD *std::shared_ptr<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2523538;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18CC10D9C(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  __cxa_begin_catch(a1);
  v2 = (unint64_t *)(v1 + 144);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  __cxa_rethrow();
}

void sub_18CC10DD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

void AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::runtime_error *a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5, char a6)
{
  char *v12;
  std::vector<std::string> *v13;
  AMSCore::ExecuteHTTPRequestTask::Options *v14;
  __int128 v15;
  void **v16;
  void **v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  int v21;
  void *v22;
  size_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  int v27;
  BOOL v28;
  char v29;
  void *v30;
  unint64_t v31;
  std::__shared_weak_count *imp;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  char v36;
  std::string *begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  char v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  const std::runtime_error *v61;
  char v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void **v84;
  void **v85;
  void *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  int v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int **v95;
  char *v96;
  __n128 v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  __int128 v117;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  const std::runtime_error *v122;
  char v123;
  _QWORD *v124;
  uint64_t v125;
  unsigned int **v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  const void ***v165;
  const void **v166;
  uint64_t v167;
  _QWORD *v168;
  const void **v169;
  const void ***v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  int v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  void **v210;
  _QWORD *v211;
  _QWORD *v212;
  void **v213;
  void *v214;
  void **v215;
  uint64_t v216;
  uint64_t v217;
  std::vector<std::string>::pointer v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  char *v238;
  std::chrono::system_clock::time_point v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void **v245;
  _QWORD *v246;
  _BYTE *v247;
  uint64_t **v248;
  _QWORD *v249;
  std::string *v250;
  std::string *v251;
  std::string::size_type *v252;
  uint64_t *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  std::runtime_error_vtbl *v260;
  _OWORD *v261;
  _OWORD *v262;
  _OWORD *v263;
  std::__shared_weak_count **v264;
  _QWORD *v265;
  std::string *v266;
  _QWORD *v267;
  char *v268;
  _OWORD *v269;
  char **v270;
  _QWORD *v271;
  const std::runtime_error *v272;
  _OWORD *v273;
  _OWORD *v274;
  _QWORD *v275;
  _OWORD *v276;
  std::__shared_weak_count **v277;
  char *v278;
  _QWORD *v279;
  _OWORD *v280;
  char *v281;
  _QWORD *v282;
  char **v283;
  char *v284;
  unsigned int ***v285;
  char **v286;
  __n128 *v287;
  uint64_t *v288;
  _OWORD *v289;
  char *v290;
  unsigned int **v291;
  unsigned int ***v292;
  _OWORD *v293;
  std::__shared_weak_count **v294;
  _QWORD *v295;
  unsigned int **v296;
  std::runtime_error *v297;
  std::string *v298;
  std::string *v299;
  _OWORD *v300;
  std::string *v301;
  AMSCore::ExecuteHTTPRequestTask::Options *v302;
  uint64_t v303;
  char **v304;
  AMSCore::ExecuteHTTPRequestTask::Options *v305[2];
  AMSCore::ExecuteHTTPRequestTask::Options *v306;
  _BYTE *v307;
  std::runtime_error *v308;
  void **v309;
  std::string *v310;
  int *v311;
  std::string *v312;
  std::string *v313;
  _QWORD *v314;
  uint64_t *v315;
  std::runtime_error *v316;
  std::runtime_error *v317;
  void *__p[2];
  char v319;
  std::vector<std::string> v320;
  char v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  int v324;
  std::runtime_error v325;
  __int128 v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  unsigned __int8 v331;

  v12 = (char *)operator new(0xAB8uLL);
  v12[2741] = a6;
  v307 = v12 + 2740;
  v13 = (std::vector<std::string> *)(v12 + 1912);
  v291 = (unsigned int **)(v12 + 1032);
  v273 = v12 + 2136;
  *(_OWORD *)(v12 + 2136) = *(_OWORD *)a2;
  v317 = (std::runtime_error *)(v12 + 200);
  v309 = (void **)(v12 + 600);
  v14 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v12 + 992);
  v316 = (std::runtime_error *)(v12 + 1200);
  *((_QWORD *)v12 + 269) = *(_QWORD *)(a2 + 16);
  v302 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v12 + 1368);
  v308 = (std::runtime_error *)(v12 + 1536);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v301 = (std::string *)(v12 + 1992);
  v288 = (uint64_t *)(v12 + 2064);
  v15 = *(_OWORD *)(a2 + 24);
  v313 = (std::string *)(v12 + 2184);
  v312 = (std::string *)(v12 + 2232);
  v284 = v12 + 2264;
  v310 = (std::string *)(v12 + 2296);
  *((_QWORD *)v12 + 272) = *(_QWORD *)(a2 + 40);
  v16 = (void **)(v12 + 2328);
  v299 = (std::string *)(v12 + 2360);
  v249 = v12 + 2392;
  v314 = v12 + 2416;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v246 = v12 + 2488;
  v17 = (void **)(v12 + 2536);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v250 = (std::string *)(v12 + 2560);
  v251 = (std::string *)(v12 + 2512);
  v18 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v287 = (__n128 *)(v12 + 2584);
  *((_OWORD *)v12 + 135) = v15;
  v19 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v303 = v19;
  *(_OWORD *)v305 = v18;
  *(_OWORD *)(v12 + 2664) = v18;
  *(_OWORD *)(v12 + 2680) = v19;
  v253 = (uint64_t *)(v12 + 2656);
  v311 = (int *)(v12 + 2736);
  v272 = (const std::runtime_error *)(v12 + 1664);
  LOBYTE(a3) = *(_BYTE *)(a5 + 120);
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)v12 + 104, a3, (std::runtime_error *)a5);
  v12[1784] = (char)a3;
  do
    v20 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v20 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  v12[24] = 0;
  v12[152] = 0;
  *((_QWORD *)v12 + 20) = 0;
  v297 = (std::runtime_error *)(v12 + 24);
  *((_QWORD *)v12 + 24) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v325, (uint64_t)(v12 + 16));
  *a1 = v325;
  *v311 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v303 + 32))(v303);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v303 + 16))(__p, v303);
  (*(void (**)(AMSCore::ExecuteHTTPRequestTask::Options *, void **, __n128))(*(_QWORD *)v305[0] + 128))(v305[0], __p, *(__n128 *)v305);
  v21 = v12[2463];
  if (v21 >= 0)
    v22 = v12 + 2440;
  else
    v22 = (void *)*((_QWORD *)v12 + 305);
  if (v21 >= 0)
    v23 = v12[2463];
  else
    v23 = *((_QWORD *)v12 + 306);
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v322);
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v322 + 32))(&v325, v322, "AMSStorefrontSuffixes", 21);
  v24 = v323;
  if (v323)
  {
    p_shared_owners = (unint64_t *)&v323->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = DWORD2(v326);
  if ((DWORD2(v326) - 1) <= 0xFFFFFFFD)
  {
    v28 = DWORD2(v326) == 8;
    if (DWORD2(v326) == 8)
    {
      AMSCore::getStorefrontSuffix(v299, (uint64_t)&v325, v22, v23);
      v28 = 1;
      v27 = DWORD2(v326);
      if (DWORD2(v326) == -1)
        goto LABEL_20;
    }
    goto LABEL_19;
  }
  v28 = 0;
  if (DWORD2(v326) != -1)
LABEL_19:
    ((void (*)(uint64_t *, std::runtime_error *))off_1E253D240[v27])(&v322, &v325);
LABEL_20:
  if (!v28)
  {
    v12[2360] = 0;
    v12[2384] = 0;
  }
  v29 = v12[2159];
  if (v29 >= 0)
    v30 = v12 + 2136;
  else
    v30 = (void *)*((_QWORD *)v12 + 267);
  if (v29 >= 0)
    v31 = v12[2159];
  else
    v31 = *((_QWORD *)v12 + 268);
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v325);
  (*((void (**)(uint64_t *__return_ptr, std::runtime_error_vtbl *, const char *, uint64_t))v325.~runtime_error
   + 4))(&v322, v325.__vftable, "AMSBagURLCookies", 16);
  imp = (std::__shared_weak_count *)v325.__imp_.__imp_;
  if (v325.__imp_.__imp_)
  {
    v33 = (unint64_t *)(v325.__imp_.__imp_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  v35 = v324;
  if ((v324 - 1) > 0xFFFFFFFD)
  {
    v36 = 0;
    if (v324 == -1)
      goto LABEL_55;
    goto LABEL_54;
  }
  if (v324 != 8)
    goto LABEL_49;
  AMSCore::getValueByKey<std::vector<AMSCore::Any>,std::map<std::string,AMSCore::Any> const>((uint64_t)&v325, &v322, v30, v31);
  if (v331)
  {
    AMSCore::toStringVector(&v320, (__int128 **)v325.__vftable);
    v321 = 1;
    if (v331)
      goto LABEL_42;
  }
  else
  {
    LOBYTE(v320.__begin_) = 0;
    v321 = 0;
  }
  ((void (*)(std::runtime_error *))v325.~runtime_error)(&v325);
  if (!v321)
  {
LABEL_49:
    v36 = 0;
    goto LABEL_53;
  }
LABEL_42:
  *v314 = 0;
  *((_QWORD *)v12 + 303) = 0;
  *((_QWORD *)v12 + 304) = 0;
  std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v314, (uint64_t)v320.__begin_, (uint64_t)v320.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v320.__end_ - (char *)v320.__begin_) >> 3));
  if (v321)
  {
    begin = v320.__begin_;
    if (v320.__begin_)
    {
      end = v320.__end_;
      v39 = v320.__begin_;
      if (v320.__end_ != v320.__begin_)
      {
        do
        {
          if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(end[-1].__r_.__value_.__l.__data_);
          --end;
        }
        while (end != begin);
        v39 = v320.__begin_;
      }
      v320.__end_ = begin;
      operator delete(v39);
    }
  }
  v36 = 1;
LABEL_53:
  v35 = v324;
  if (v324 != -1)
LABEL_54:
    ((void (*)(std::runtime_error *, uint64_t *))off_1E253D240[v35])(&v325, &v322);
LABEL_55:
  if ((v36 & 1) == 0)
    std::vector<std::string>::vector<std::string_view const*,0>(v314, (uint64_t)&AMSCore::getDefaultCookieKeys, (uint64_t)&AMSCore::getDefaultCookieKeys);
  v12[1792] = 0;
  v12[1816] = 0;
  v40 = v12[2352];
  v41 = (uint64_t)(v12 + 1792);
  if (v12[2352])
  {
    *((_OWORD *)v12 + 112) = *(_OWORD *)v16;
    *((_QWORD *)v12 + 226) = *((_QWORD *)v12 + 293);
    *((_QWORD *)v12 + 292) = 0;
    *((_QWORD *)v12 + 293) = 0;
    *v16 = 0;
    v12[1816] = 1;
  }
  v12[1824] = 0;
  v12[1848] = 0;
  v42 = v12[2384];
  if (v12[2384])
  {
    *((_OWORD *)v12 + 114) = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
    *((_QWORD *)v12 + 230) = *((_QWORD *)v12 + 297);
    *((_QWORD *)v12 + 296) = 0;
    *((_QWORD *)v12 + 297) = 0;
    v299->__r_.__value_.__r.__words[0] = 0;
    v12[1848] = 1;
  }
  v290 = v12 + 1824;
  *((_OWORD *)v12 + 116) = *((_OWORD *)v12 + 151);
  *((_QWORD *)v12 + 234) = *((_QWORD *)v12 + 304);
  *((_QWORD *)v12 + 303) = 0;
  *((_QWORD *)v12 + 304) = 0;
  *v314 = 0;
  *((_WORD *)v12 + 940) = 0;
  v12[1882] = 0;
  v43 = operator new(0x30uLL);
  v43[1] = 0;
  v43[2] = 0;
  *v43 = &off_1E2523068;
  v43[5] = 0;
  v43[4] = 0;
  v43[3] = v43 + 4;
  *((_QWORD *)v12 + 236) = v43 + 3;
  *((_QWORD *)v12 + 237) = v43;
  *((_QWORD *)v12 + 238) = 0;
  if (v42 && v12[2383] < 0)
  {
    operator delete(*((void **)v12 + 295));
    v40 = v12[2352];
  }
  if (v40 && v12[2351] < 0)
    operator delete(*v16);
  if (v319 < 0)
    operator delete(__p[0]);
  v245 = (void **)(v12 + 1856);
  v247 = v12 + 1880;
  v248 = (uint64_t **)(v12 + 1888);
  v315 = (uint64_t *)(v12 + 1920);
  v298 = (std::string *)(v12 + 2208);
  v295 = v12 + 576;
  v294 = (std::__shared_weak_count **)(v12 + 584);
  v275 = v12 + 256;
  v276 = v12 + 216;
  v266 = (std::string *)(v12 + 1632);
  v267 = v12 + 240;
  v270 = (char **)(v12 + 2288);
  v306 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v12 + 1008);
  v277 = (std::__shared_weak_count **)(v12 + 1184);
  v292 = (unsigned int ***)(v12 + 1024);
  v282 = v12 + 1048;
  v264 = (std::__shared_weak_count **)(v12 + 1056);
  v252 = (std::string::size_type *)(v12 + 2000);
  v296 = (unsigned int **)(v12 + 1952);
  v285 = (unsigned int ***)(v12 + 1944);
  v281 = v12 + 64;
  v254 = v12 + 56;
  v280 = v12 + 40;
  v300 = v12 + 1928;
  v279 = v12 + 1968;
  v44 = v12 + 2400;
  v263 = v12 + 2080;
  v257 = v12 + 2032;
  v258 = v12 + 2104;
  v255 = v12 + 2024;
  v256 = v12 + 2096;
  v261 = v12 + 2008;
  v262 = v12 + 2120;
  v293 = v12 + 1240;
  v265 = v12 + 1232;
  v274 = v12 + 1216;
  v289 = v12 + 1256;
  v278 = v12 + 1128;
  v304 = (char **)(v12 + 1152);
  v268 = v12 + 1376;
  v269 = v12 + 1224;
  v260 = (std::runtime_error_vtbl *)(v12 + 1208);
  v283 = (char **)(v12 + 1360);
  v286 = (char **)(v12 + 1528);
  v271 = v12 + 1168;
  v45 = 1;
  v259 = v12 + 1016;
  while (*v311 <= 2 && (v45 & 1) != 0)
  {
    v46 = v44;
    ++*v311;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v317);
    AMSCore::Logger::log<char [28],int>((uint64_t)v317->__vftable);
    v47 = (std::__shared_weak_count *)*((_QWORD *)v12 + 26);
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    AMSCore::LoadNetworkBagTask::buildStorefront(v310, v41, v290);
    if (v12[2159] < 0)
    {
      std::string::__init_copy_ctor_external(v313, *((const std::string::value_type **)v12 + 267), *((_QWORD *)v12 + 268));
    }
    else
    {
      *(_OWORD *)&v313->__r_.__value_.__l.__data_ = *v273;
      *((_QWORD *)v12 + 275) = *((_QWORD *)v12 + 269);
    }
    if (v12[2183] < 0)
    {
      std::string::__init_copy_ctor_external(v298, *((const std::string::value_type **)v12 + 270), *((_QWORD *)v12 + 271));
    }
    else
    {
      *(_OWORD *)&v298->__r_.__value_.__l.__data_ = *((_OWORD *)v12 + 135);
      *((_QWORD *)v12 + 278) = *((_QWORD *)v12 + 272);
    }
    v12[2232] = 0;
    v12[2256] = 0;
    if (v12[2320])
    {
      if (v12[2319] < 0)
      {
        std::string::__init_copy_ctor_external(v312, *((const std::string::value_type **)v12 + 287), *((_QWORD *)v12 + 288));
      }
      else
      {
        *(_OWORD *)&v312->__r_.__value_.__l.__data_ = *(_OWORD *)&v310->__r_.__value_.__l.__data_;
        *((_QWORD *)v12 + 281) = *((_QWORD *)v12 + 289);
      }
      v12[2256] = 1;
    }
    *v17 = 0;
    *((_QWORD *)v12 + 318) = 0;
    *((_QWORD *)v12 + 319) = 0;
    std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>((_QWORD *)v12 + 317, *((_QWORD *)v12 + 232), *((_QWORD *)v12 + 233), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 + 233) - *((_QWORD *)v12 + 232)) >> 3));
    v50 = *((_QWORD *)v12 + 334);
    *((_QWORD *)v12 + 330) = *((_QWORD *)v12 + 333);
    *((_QWORD *)v12 + 331) = v50;
    if (v50)
    {
      v51 = (unint64_t *)(v50 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *((_QWORD *)v12 + 336);
    *((_QWORD *)v12 + 328) = *((_QWORD *)v12 + 335);
    *((_QWORD *)v12 + 329) = v53;
    if (v53)
    {
      v54 = (unint64_t *)(v53 + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    AMSCore::LoadNetworkBagTask::encodeHTTPRequest(v14, (uint64_t)v313, (uint64_t)v312, (uint64_t *)v12 + 317, (uint64_t *)v12 + 330, (__int128 *)v12 + 164, v12[2741]);
    v56 = *(_OWORD *)v14;
    *(_OWORD *)(v12 + 2696) = *(_OWORD *)v14;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v12 + 125) = 0;
    if (!atomic_load((unint64_t *)(v56 + 416)))
    {
      *v307 = 0;
      v58 = (unint64_t *)(*((_QWORD *)v12 + 337) + 416);
      do
        v59 = __ldaxr(v58);
      while (__stlxr((unint64_t)v12, v58));
      if (!v59)
        return;
    }
    v60 = *((_QWORD *)v12 + 337);
    if (!*(_BYTE *)(v60 + 408))
    {
LABEL_497:
      __break(1u);
      return;
    }
    v61 = (const std::runtime_error *)(v60 + 8);
    v62 = *(_BYTE *)(v60 + 400);
    if (v62)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v317, (uint64_t)v61);
      v63 = (_QWORD *)(v60 + 384);
      *v295 = *(_QWORD *)(v60 + 384);
      v64 = (_QWORD *)(v60 + 392);
      v65 = v12 + 584;
    }
    else
    {
      std::runtime_error::runtime_error(v317, v61);
      *v276 = *(_OWORD *)(v60 + 24);
      *((_QWORD *)v12 + 25) = off_1E2521330;
      v66 = (_QWORD *)(v60 + 48);
      v67 = *(_QWORD *)(v60 + 48);
      *((_QWORD *)v12 + 29) = *(_QWORD *)(v60 + 40);
      *((_QWORD *)v12 + 30) = v67;
      v68 = *(_QWORD *)(v60 + 56);
      *((_QWORD *)v12 + 31) = v68;
      if (v68)
      {
        *(_QWORD *)(v67 + 16) = v267;
        *(_QWORD *)(v60 + 40) = v66;
        *v66 = 0;
        *(_QWORD *)(v60 + 56) = 0;
      }
      else
      {
        *((_QWORD *)v12 + 29) = v267;
      }
      v69 = *((_QWORD *)v12 + 337);
      v70 = *(_QWORD *)(v69 + 64);
      v63 = (_QWORD *)(v69 + 64);
      *v275 = v70;
      v64 = v63 + 1;
      v65 = v12 + 264;
    }
    *v65 = *v64;
    *v63 = 0;
    v63[1] = 0;
    v12[592] = v62;
    v71 = *((_QWORD *)v12 + 338);
    if (!v71)
      goto LABEL_110;
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      v77 = (std::__shared_weak_count *)*((_QWORD *)v12 + 338);
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
      v74 = (std::__shared_weak_count *)*((_QWORD *)v12 + 125);
      if (!v74)
        goto LABEL_116;
    }
    else
    {
LABEL_110:
      v74 = (std::__shared_weak_count *)*((_QWORD *)v12 + 125);
      if (!v74)
        goto LABEL_116;
    }
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
LABEL_116:
    v78 = (std::__shared_weak_count *)*((_QWORD *)v12 + 329);
    if (!v78)
      goto LABEL_120;
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      v81 = (std::__shared_weak_count *)*((_QWORD *)v12 + 331);
      if (!v81)
        goto LABEL_126;
    }
    else
    {
LABEL_120:
      v81 = (std::__shared_weak_count *)*((_QWORD *)v12 + 331);
      if (!v81)
        goto LABEL_126;
    }
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
LABEL_126:
    v84 = (void **)*v17;
    if (*v17)
    {
      v85 = (void **)*((_QWORD *)v12 + 318);
      v86 = *v17;
      if (v85 != v84)
      {
        do
        {
          if (*((char *)v85 - 1) < 0)
            operator delete(*(v85 - 3));
          v85 -= 3;
        }
        while (v85 != v84);
        v86 = *v17;
      }
      *((_QWORD *)v12 + 318) = v84;
      operator delete(v86);
    }
    if (v12[2256] && v12[2255] < 0)
      operator delete(v312->__r_.__value_.__l.__data_);
    if (v12[2231] < 0)
    {
      operator delete(v298->__r_.__value_.__l.__data_);
      if ((v12[2207] & 0x80000000) == 0)
      {
LABEL_139:
        if (v12[592])
          goto LABEL_140;
        goto LABEL_148;
      }
    }
    else if ((v12[2207] & 0x80000000) == 0)
    {
      goto LABEL_139;
    }
    operator delete(v313->__r_.__value_.__l.__data_);
    if (v12[592])
    {
LABEL_140:
      v87 = *((_QWORD *)v12 + 336);
      *((_QWORD *)v12 + 326) = *((_QWORD *)v12 + 335);
      *((_QWORD *)v12 + 327) = v87;
      if (v87)
      {
        v88 = (unint64_t *)(v87 + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      AMSCore::ExecuteHTTPRequestTask::internal::makeOptionsBuilder(v14, (__int128 *)v12 + 163);
      v90 = operator new(0x20uLL);
      v90[1] = 0;
      v90[2] = 0;
      *v90 = &off_1E2522CE8;
      v90[3] = &off_1E2520F40;
      *((_QWORD *)v12 + 323) = v90 + 3;
      *((_QWORD *)v12 + 324) = v90;
      v13->__begin_ = 0;
      *((_QWORD *)v12 + 240) = 0;
      *((_DWORD *)v12 + 650) = 1;
      v325.__vftable = (std::runtime_error_vtbl *)(v12 + 1080);
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v325, (__n128 *)(v12 + 1080), v287);
      v91 = v12[1784];
      if (v12[1784])
      {
        v92 = v12[1736];
        if (v92)
          v308->__vftable = v272->__vftable;
        else
          AMSCore::Error::Error(v308, v272);
        v12[1608] = v92;
        *((_OWORD *)v12 + 101) = *((_OWORD *)v12 + 109);
        if (v12[1783] < 0)
        {
          std::string::__init_copy_ctor_external(v266, *((const std::string::value_type **)v12 + 220), *((_QWORD *)v12 + 221));
        }
        else
        {
          *(_OWORD *)&v266->__r_.__value_.__l.__data_ = *((_OWORD *)v12 + 110);
          *((_QWORD *)v12 + 206) = *((_QWORD *)v12 + 222);
        }
      }
      else
      {
        AMSCore::Error::Error(v308, v272);
      }
      v12[1656] = v91;
      *((_QWORD *)v12 + 286) = 0;
      v96 = (char *)operator new(0x88uLL);
      *(_QWORD *)v96 = off_1E2521CE0;
      v97 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)(v96 + 8), v91 != 0, v308);
      v96[128] = v91;
      *v270 = v96;
      v98 = *v304;
      *v304 = 0;
      if (v98 != v278)
      {
        if (v98)
        {
          v99 = 5;
          goto LABEL_159;
        }
        goto LABEL_160;
      }
      v98 = v12 + 1128;
      v99 = 4;
LABEL_159:
      (*(void (**)(__n128))(*(_QWORD *)v98 + 8 * v99))(v97);
      v96 = *v270;
      v100 = v12 + 1152;
      if (*v270)
      {
LABEL_160:
        v101 = v12 + 2264;
        if (v96 != v284)
        {
          *v304 = v96;
          v100 = v12 + 2288;
          goto LABEL_162;
        }
        *v304 = v278;
        (*(void (**)(char *, __n128))(*(_QWORD *)v284 + 24))(v284, v97);
      }
      else
      {
LABEL_162:
        *v100 = 0;
        v101 = v12 + 2264;
      }
      AMSCore::ExecuteHTTPRequestTask::Options::Options((AMSCore::ExecuteHTTPRequestTask::Options *)v316, v14);
      v102 = *v270;
      if (*v270 == v101)
      {
        v102 = v101;
        v104 = 4;
        v103 = v12 + 1336;
LABEL_168:
        (*(void (**)(void))(*(_QWORD *)v102 + 8 * v104))();
      }
      else
      {
        v103 = v12 + 1336;
        if (v102)
        {
          v104 = 5;
          goto LABEL_168;
        }
      }
      if (v12[1656])
      {
        if ((v12[1655] & 0x80000000) == 0)
        {
          if (!v12[1608])
            goto LABEL_172;
LABEL_173:
          v105 = *((unsigned int *)v12 + 650);
          if ((_DWORD)v105 != -1)
            ((void (*)(std::string *, __n128 *))off_1E253D230[v105])(v301, v287);
          *((_DWORD *)v12 + 650) = -1;
          v106 = (std::__shared_weak_count *)*((_QWORD *)v12 + 240);
          if (v106)
          {
            v107 = (unint64_t *)&v106->__shared_owners_;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          AMSCore::ExecuteHTTPRequestTask::Options::~Options(v14);
          v109 = (std::__shared_weak_count *)*((_QWORD *)v12 + 327);
          if (v109)
          {
            v110 = (unint64_t *)&v109->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          if (!v12[592])
            goto LABEL_497;
          AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v309, (uint64_t)v317);
          *((_OWORD *)v12 + 61) = *((_OWORD *)v12 + 36);
          *v295 = 0;
          *((_QWORD *)v12 + 73) = 0;
          *((_QWORD *)v12 + 171) = *((_QWORD *)v12 + 150);
          v112 = *((_QWORD *)v12 + 151);
          *((_QWORD *)v12 + 172) = v112;
          v113 = *((_QWORD *)v12 + 152);
          *((_QWORD *)v12 + 173) = v113;
          if (v113)
          {
            *(_QWORD *)(v112 + 16) = v268;
            v316->__vftable = v260;
            v260->~runtime_error = 0;
            *((_QWORD *)v12 + 152) = 0;
          }
          else
          {
            *(_QWORD *)v302 = v268;
          }
          *((_OWORD *)v12 + 87) = *v269;
          *(_QWORD *)v269 = 0;
          *((_QWORD *)v12 + 154) = 0;
          *((_OWORD *)v12 + 88) = *v293;
          *(_QWORD *)v293 = 0;
          *((_QWORD *)v12 + 156) = 0;
          v12[1424] = 0;
          v12[1448] = 0;
          if (v12[1280])
          {
            *((_OWORD *)v12 + 89) = *v289;
            *((_QWORD *)v12 + 180) = *((_QWORD *)v12 + 159);
            *((_QWORD *)v12 + 158) = 0;
            *((_QWORD *)v12 + 159) = 0;
            *(_QWORD *)v289 = 0;
            v12[1448] = 1;
          }
          v12[1456] = 0;
          *((_DWORD *)v12 + 368) = -1;
          v114 = *((unsigned int *)v12 + 326);
          if ((_DWORD)v114 != -1)
          {
            ((void (*)(std::runtime_error *, char *, char *))off_1E253CA98[v114])(&v325, v12 + 1456, v12 + 1288);
            *((_DWORD *)v12 + 368) = v114;
          }
          *(_OWORD *)(v12 + 1480) = *((_OWORD *)v12 + 82);
          *((_DWORD *)v12 + 374) = *((_DWORD *)v12 + 332);
          v115 = *v283;
          v116 = v12 + 1528;
          if (*v283)
          {
            if (v115 != v103)
            {
              *v286 = v115;
              v116 = v12 + 1360;
              goto LABEL_196;
            }
            *v286 = v12 + 1504;
            (*(void (**)(char *))(*(_QWORD *)v103 + 24))(v103);
          }
          else
          {
LABEL_196:
            *v116 = 0;
          }
          v117 = *(_OWORD *)&v13->__begin_;
          *(_OWORD *)(v12 + 2712) = *(_OWORD *)(v12 + 1912);
          v13->__begin_ = 0;
          *((_QWORD *)v12 + 240) = 0;
          if (!atomic_load((unint64_t *)(v117 + 224)))
          {
            *v307 = 1;
            v119 = (unint64_t *)(*((_QWORD *)v12 + 339) + 224);
            do
              v120 = __ldaxr(v119);
            while (__stlxr((unint64_t)v12, v119));
            if (!v120)
              return;
          }
          v121 = *((_QWORD *)v12 + 339);
          if (!*(_BYTE *)(v121 + 216))
            goto LABEL_497;
          v122 = (const std::runtime_error *)(v121 + 8);
          v123 = *(_BYTE *)(v121 + 208);
          if (v123)
          {
            *(_OWORD *)v14 = *(_OWORD *)(v121 + 8);
            v122->__vftable = 0;
            *(_QWORD *)(v121 + 16) = 0;
            *(_QWORD *)v306 = *(_QWORD *)(v121 + 24);
            v124 = (_QWORD *)(v121 + 32);
            v125 = *(_QWORD *)(v121 + 32);
            *v259 = v125;
            v126 = *(unsigned int ***)(v121 + 40);
            *v292 = v126;
            if (v126)
            {
              *(_QWORD *)(v125 + 16) = v259;
              *(_QWORD *)(v121 + 24) = v124;
              *v124 = 0;
              *(_QWORD *)(v121 + 40) = 0;
            }
            else
            {
              *(_QWORD *)v306 = v259;
            }
            *(_OWORD *)v291 = *(_OWORD *)(v121 + 48);
            *(_QWORD *)(v121 + 48) = 0;
            *(_QWORD *)(v121 + 56) = 0;
            *(_OWORD *)(v12 + 1048) = *(_OWORD *)(v121 + 64);
            *(_QWORD *)(v121 + 64) = 0;
            *(_QWORD *)(v121 + 72) = 0;
            v12[1064] = 0;
            v12[1088] = 0;
            if (*(_BYTE *)(v121 + 104))
            {
              v130 = *(_OWORD *)(v121 + 80);
              *((_QWORD *)v12 + 135) = *(_QWORD *)(v121 + 96);
              *(_OWORD *)(v12 + 1064) = v130;
              *(_QWORD *)(v121 + 88) = 0;
              *(_QWORD *)(v121 + 96) = 0;
              *(_QWORD *)(v121 + 80) = 0;
              v12[1088] = 1;
            }
            v12[1096] = 0;
            *((_DWORD *)v12 + 278) = -1;
            v131 = *(unsigned int *)(v121 + 128);
            if ((_DWORD)v131 != -1)
            {
              ((void (*)(std::runtime_error *, char *, uint64_t))off_1E253CA98[v131])(&v325, v12 + 1096, v121 + 112);
              *((_DWORD *)v12 + 278) = v131;
            }
            v132 = *(_OWORD *)(v121 + 136);
            *((_DWORD *)v12 + 284) = *(_DWORD *)(v121 + 152);
            *((_OWORD *)v12 + 70) = v132;
            v133 = *(_QWORD *)(v121 + 184);
            v134 = v12 + 1168;
            if (v133)
            {
              if (v133 != v121 + 160)
              {
                *v271 = v133;
                v134 = (_QWORD *)(v121 + 184);
                goto LABEL_218;
              }
              *v271 = v12 + 1144;
              (*(void (**)(_QWORD))(**(_QWORD **)(v121 + 184) + 24))(*(_QWORD *)(v121 + 184));
            }
            else
            {
LABEL_218:
              *v134 = 0;
            }
            v141 = *(_QWORD *)(v121 + 192);
            v140 = (_QWORD *)(v121 + 192);
            *((_QWORD *)v12 + 147) = v141;
            v142 = v140 + 1;
            v143 = v12 + 1184;
          }
          else
          {
            std::runtime_error::runtime_error((std::runtime_error *)v14, v122);
            *(_OWORD *)v306 = *(_OWORD *)(v121 + 24);
            *((_QWORD *)v12 + 124) = off_1E2521330;
            v127 = (_QWORD *)(v121 + 48);
            v128 = *(_QWORD *)(v121 + 48);
            *((_QWORD *)v12 + 128) = *(_QWORD *)(v121 + 40);
            *((_QWORD *)v12 + 129) = v128;
            v129 = *(_QWORD *)(v121 + 56);
            *((_QWORD *)v12 + 130) = v129;
            if (v129)
            {
              *(_QWORD *)(v128 + 16) = v291;
              *(_QWORD *)(v121 + 40) = v127;
              *v127 = 0;
              *(_QWORD *)(v121 + 56) = 0;
            }
            else
            {
              *v292 = v291;
            }
            v150 = *((_QWORD *)v12 + 339);
            v151 = *(_QWORD *)(v150 + 64);
            v140 = (_QWORD *)(v150 + 64);
            *v282 = v151;
            v142 = v140 + 1;
            v143 = v12 + 1056;
          }
          *v143 = *v142;
          *v140 = 0;
          v140[1] = 0;
          v12[1192] = v123;
          v152 = *((_QWORD *)v12 + 340);
          if (v152)
          {
            v153 = (unint64_t *)(v152 + 8);
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              v155 = (std::__shared_weak_count *)*((_QWORD *)v12 + 340);
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
          v156 = (std::__shared_weak_count *)*v315;
          if (*v315)
          {
            v157 = (unint64_t *)&v156->__shared_owners_;
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          AMSCore::ExecuteHTTPRequestTask::Options::~Options(v302);
          v159 = (std::__shared_weak_count *)*((_QWORD *)v12 + 123);
          if (v159)
          {
            v160 = (unint64_t *)&v159->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v309);
          if (v12[1192])
          {
            v162 = *((_QWORD *)v12 + 147);
            v163 = *(unsigned __int16 *)(v162 + 152);
            if ((v163 - 200) < 0x64)
            {
              if (v12[2320])
              {
                AMSCore::HTTPResponse::getDecodedObject(*((AMSCore::HTTPResponse **)v12 + 147));
                if (*(_BYTE *)(v164 + 72))
                {
                  *v315 = 0;
                  *((_QWORD *)v12 + 241) = 0;
                  v13->__begin_ = (std::vector<std::string>::pointer)v315;
                  v165 = (const void ***)(v164 + 8);
                  v166 = *(const void ***)v164;
                  if (*(_QWORD *)v164 == v164 + 8)
                  {
                    v167 = 0;
                    v12[1984] = 1;
                    v168 = v46;
                    *v46 = 0;
                    v46[1] = 0;
                    goto LABEL_337;
                  }
                  do
                  {
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)v13, v315, v166 + 4, (__int128 *)v166 + 2);
                    v169 = (const void **)v166[1];
                    if (v169)
                    {
                      do
                      {
                        v170 = (const void ***)v169;
                        v169 = (const void **)*v169;
                      }
                      while (v169);
                    }
                    else
                    {
                      do
                      {
                        v170 = (const void ***)v166[2];
                        v171 = *v170 == v166;
                        v166 = (const void **)v170;
                      }
                      while (!v171);
                    }
                    v166 = (const void **)v170;
                  }
                  while (v170 != v165);
                  v12[1984] = 1;
                  v168 = (_QWORD *)*((_QWORD *)v12 + 239);
                  v167 = *((_QWORD *)v12 + 240);
                  v185 = *((_QWORD *)v12 + 241);
                  *((_QWORD *)v12 + 299) = v168;
                  *((_QWORD *)v12 + 300) = v167;
                  *((_QWORD *)v12 + 301) = v185;
                  if (v185)
                  {
                    *(_QWORD *)(v167 + 16) = v46;
                    v13->__begin_ = (std::vector<std::string>::pointer)v315;
                    *v315 = 0;
                    *((_QWORD *)v12 + 241) = 0;
                  }
                  else
                  {
                    v168 = v46;
LABEL_337:
                    *v249 = v168;
                  }
                  v198 = operator new(0x30uLL);
                  v198[1] = 0;
                  v198[2] = 0;
                  v198[3] = v168;
                  v199 = v198 + 3;
                  *v198 = &off_1E2523068;
                  v198[4] = v167;
                  v200 = v198 + 4;
                  v201 = *((_QWORD *)v12 + 301);
                  v198[5] = v201;
                  if (v201)
                  {
                    *(_QWORD *)(v167 + 16) = v200;
                    *v249 = v46;
                    *v46 = 0;
                    v46[1] = 0;
                  }
                  else
                  {
                    *v199 = v200;
                  }
                  *((_QWORD *)v12 + 236) = v199;
                  v202 = (std::__shared_weak_count *)*((_QWORD *)v12 + 237);
                  *((_QWORD *)v12 + 237) = v198;
                  if (v202)
                  {
                    v203 = (unint64_t *)&v202->__shared_owners_;
                    do
                      v204 = __ldaxr(v203);
                    while (__stlxr(v204 - 1, v203));
                    if (!v204)
                    {
                      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                      std::__shared_weak_count::__release_weak(v202);
                    }
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v249, *((unsigned int **)v12 + 300));
                  if (v12[1984])
                  {
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v13, (unsigned int *)*v315);
                    goto LABEL_349;
                  }
                }
                else
                {
                  AMSCore::Error::Error((std::runtime_error *)v13, (const std::runtime_error *)v164);
                  v12[1984] = 0;
                }
                ((void (*)(std::vector<std::string> *))v13->__begin_->__r_.__value_.__l.__data_)(v13);
LABEL_349:
                AMSCore::getValueByKey<std::vector<AMSCore::Any>,std::map<std::string,AMSCore::Any> const>((uint64_t)&v325, *v248, "urlCookies", 0xAuLL);
                if (!v331)
                {
                  v12[1912] = 0;
                  v12[1936] = 0;
                  goto LABEL_353;
                }
                AMSCore::toStringVector(v13, (__int128 **)v325.__vftable);
                v205 = v331;
                v12[1936] = 1;
                if (!v205)
LABEL_353:
                  ((void (*)(std::runtime_error *))v325.~runtime_error)(&v325);
                if (AMSCore::cookiesUpdated(*((_QWORD *)v12 + 232), *((_QWORD *)v12 + 233), (unsigned __int8 ***)v13))
                {
                  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v301);
                  AMSCore::Logger::log<char [42]>(v301->__r_.__value_.__r.__words[0]);
                  v206 = (std::__shared_weak_count *)*v252;
                  if (!*v252)
                    goto LABEL_500;
                  v207 = (unint64_t *)&v206->__shared_owners_;
                  do
                    v208 = __ldaxr(v207);
                  while (__stlxr(v208 - 1, v207));
                  if (!v208)
                  {
                    ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                    std::__shared_weak_count::__release_weak(v206);
                    if (!v12[1936])
                      goto LABEL_370;
LABEL_360:
                    *v246 = 0;
                    *((_QWORD *)v12 + 312) = 0;
                    *((_QWORD *)v12 + 313) = 0;
                    std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v246, (uint64_t)v13->__begin_, *v315, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(*v315 - (unint64_t)v13->__begin_) >> 3));
                    v209 = v12 + 2488;
                    v210 = (void **)*v245;
                    v212 = v12 + 2496;
                    v211 = v12 + 2504;
                    if (*v245)
                    {
                      v213 = (void **)*((_QWORD *)v12 + 233);
                      if (v213 == v210)
                      {
                        v214 = *v245;
                        v212 = v12 + 2496;
                        v211 = v12 + 2504;
                        v209 = v12 + 2488;
                        goto LABEL_378;
                      }
                      do
                      {
                        if (*((char *)v213 - 1) < 0)
                          operator delete(*(v213 - 3));
                        v213 -= 3;
                      }
                      while (v213 != v210);
                      v212 = v12 + 2496;
                      v211 = v12 + 2504;
                      v209 = v12 + 2488;
                      goto LABEL_377;
                    }
                  }
                  else
                  {
LABEL_500:
                    if (v12[1936])
                      goto LABEL_360;
LABEL_370:
                    std::vector<std::string>::vector<std::string_view const*,0>((_QWORD *)v12 + 308, (uint64_t)&AMSCore::getDefaultCookieKeys, (uint64_t)off_1E253CA98);
                    v210 = (void **)*v245;
                    v212 = v12 + 2472;
                    v211 = v12 + 2480;
                    v209 = v12 + 2464;
                    if (*v245)
                    {
                      v215 = (void **)*((_QWORD *)v12 + 233);
                      if (v215 == v210)
                      {
                        v214 = *v245;
                        v212 = v12 + 2472;
                        v211 = v12 + 2480;
                        v209 = v12 + 2464;
                        goto LABEL_378;
                      }
                      do
                      {
                        if (*((char *)v215 - 1) < 0)
                          operator delete(*(v215 - 3));
                        v215 -= 3;
                      }
                      while (v215 != v210);
                      v212 = v12 + 2472;
                      v211 = v12 + 2480;
                      v209 = v12 + 2464;
LABEL_377:
                      v214 = *v245;
LABEL_378:
                      *((_QWORD *)v12 + 233) = v210;
                      operator delete(v214);
                    }
                  }
                  *((_QWORD *)v12 + 232) = *v209;
                  *((_QWORD *)v12 + 233) = *v212;
                  *((_QWORD *)v12 + 234) = *v211;
                  *v209 = 0;
                  v209[1] = 0;
                  v209[2] = 0;
                  v45 = 1;
                  v12[1882] = 1;
                  v41 = (uint64_t)(v12 + 1792);
                  if (v12[1936])
                  {
LABEL_380:
                    v216 = (uint64_t)v13->__begin_;
                    if (v13->__begin_)
                    {
                      v217 = *v315;
                      v218 = v13->__begin_;
                      if (*v315 != v216)
                      {
                        do
                        {
                          if (*(char *)(v217 - 1) < 0)
                            operator delete(*(void **)(v217 - 24));
                          v217 -= 24;
                        }
                        while (v217 != v216);
                        v218 = v13->__begin_;
                      }
                      *v315 = v216;
                      operator delete(v218);
                    }
                  }
                }
                else
                {
                  v45 = 0;
                  if (v12[1936])
                    goto LABEL_380;
                }
              }
              else
              {
                v45 = 0;
              }
              v219 = (char *)operator new(0x19uLL);
              v13->__begin_ = (std::vector<std::string>::pointer)v219;
              *(_OWORD *)v315 = xmmword_18CF51B20;
              strcpy(v219, "X-Set-Apple-Store-Front");
              AMSCore::IHTTPHeaderMap::getSingleValueOrNone(v301, (_QWORD *)(v162 + 160), (char *)v13);
              if (v12[1935] < 0)
              {
                operator delete(v13->__begin_);
                if (!v12[2016])
                  goto LABEL_424;
              }
              else if (!v12[2016])
              {
                goto LABEL_424;
              }
              if (v12[1816])
              {
                v220 = v12[1815];
                if ((v220 & 0x80u) == 0)
                  v221 = v12[1815];
                else
                  v221 = *((_QWORD *)v12 + 225);
                v222 = v12[2015];
                v223 = (char)v222;
                if ((v222 & 0x80u) != 0)
                  v222 = *((_QWORD *)v12 + 250);
                if (v221 == v222)
                {
                  if (v223 >= 0)
                    v224 = (unsigned __int8 *)(v12 + 1992);
                  else
                    v224 = (unsigned __int8 *)v301->__r_.__value_.__r.__words[0];
                  if ((v220 & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)v41, v224, *((_QWORD *)v12 + 225)))
                      goto LABEL_424;
                  }
                  else
                  {
                    if (!v12[1815])
                      goto LABEL_424;
                    v225 = (unsigned __int8 *)v41;
                    while (*v225 == *v224)
                    {
                      ++v225;
                      ++v224;
                      if (!--v220)
                        goto LABEL_424;
                    }
                  }
                }
              }
              *v288 = (uint64_t)v301;
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v13);
              AMSCore::Logger::log<char [65],AMSCore::Log::Redact<std::string>>((uint64_t)v13->__begin_, v288);
              v226 = (std::__shared_weak_count *)*v315;
              if (*v315)
              {
                v227 = (unint64_t *)&v226->__shared_owners_;
                do
                  v228 = __ldaxr(v227);
                while (__stlxr(v228 - 1, v227));
                if (!v228)
                {
                  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                  std::__shared_weak_count::__release_weak(v226);
                }
              }
              if (!v12[2016])
                goto LABEL_497;
              if (v12[2015] < 0)
              {
                std::string::__init_copy_ctor_external(v251, v301->__r_.__value_.__l.__data_, *v252);
              }
              else
              {
                *(_OWORD *)&v251->__r_.__value_.__l.__data_ = *(_OWORD *)&v301->__r_.__value_.__l.__data_;
                *((_QWORD *)v12 + 316) = *((_QWORD *)v12 + 251);
              }
              if (v12[1816])
              {
                if (v12[1815] < 0)
                  operator delete(*(void **)v41);
                *(_OWORD *)v41 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
                *(_QWORD *)(v41 + 16) = *((_QWORD *)v12 + 316);
                v12[2535] = 0;
                v12[2512] = 0;
              }
              else
              {
                *(_OWORD *)v41 = *(_OWORD *)&v251->__r_.__value_.__l.__data_;
                *(_QWORD *)(v41 + 16) = *((_QWORD *)v12 + 316);
                *((_QWORD *)v12 + 315) = 0;
                *((_QWORD *)v12 + 316) = 0;
                v251->__r_.__value_.__r.__words[0] = 0;
                v12[1816] = 1;
              }
              v45 = 1;
              *v247 = 1;
LABEL_424:
              AMSCore::getStorefrontSuffix((std::string *)v13, *((_QWORD *)v12 + 236), "storefront-header-suffix", 0x18uLL);
              if (v12[1936])
              {
                if (!v12[1848])
                  goto LABEL_441;
                v229 = v12[1847];
                if ((v229 & 0x80u) == 0)
                  v230 = v12[1847];
                else
                  v230 = *((_QWORD *)v12 + 229);
                v231 = v12[1935];
                v232 = (char)v231;
                if ((v231 & 0x80u) != 0)
                  v231 = *((_QWORD *)v12 + 240);
                if (v230 != v231)
                  goto LABEL_441;
                if (v232 >= 0)
                  v233 = (unsigned __int8 *)(v12 + 1912);
                else
                  v233 = (unsigned __int8 *)v13->__begin_;
                if ((v229 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)v290, v233, *((_QWORD *)v12 + 229)))
                    goto LABEL_441;
                }
                else
                {
                  v234 = (unsigned __int8 *)(v12 + 1824);
                  if (v12[1847])
                  {
                    while (*v234 == *v233)
                    {
                      ++v234;
                      ++v233;
                      if (!--v229)
                        goto LABEL_456;
                    }
LABEL_441:
                    *v253 = (uint64_t)v13;
                    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v288);
                    AMSCore::Logger::log<char [78],AMSCore::Log::Redact<std::string>>(*v288, v253);
                    v235 = (std::__shared_weak_count *)*((_QWORD *)v12 + 259);
                    if (v235)
                    {
                      v236 = (unint64_t *)&v235->__shared_owners_;
                      do
                        v237 = __ldaxr(v236);
                      while (__stlxr(v237 - 1, v236));
                      if (!v237)
                      {
                        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                        std::__shared_weak_count::__release_weak(v235);
                      }
                    }
                    if (!v12[1936])
                      goto LABEL_497;
                    if (v12[1935] < 0)
                    {
                      std::string::__init_copy_ctor_external(v250, (const std::string::value_type *)v13->__begin_, *v315);
                    }
                    else
                    {
                      *(_OWORD *)&v250->__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__begin_;
                      *((_QWORD *)v12 + 322) = *((_QWORD *)v12 + 241);
                    }
                    v238 = v12 + 1824;
                    if (v12[1848])
                    {
                      if (v12[1847] < 0)
                      {
                        operator delete(*(void **)v290);
                        v238 = v12 + 1824;
                      }
                      *(_OWORD *)v238 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
                      *((_QWORD *)v238 + 2) = *((_QWORD *)v12 + 322);
                      v12[2583] = 0;
                      v12[2560] = 0;
                    }
                    else
                    {
                      *(_OWORD *)v290 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
                      *((_QWORD *)v12 + 230) = *((_QWORD *)v12 + 322);
                      *((_QWORD *)v12 + 321) = 0;
                      *((_QWORD *)v12 + 322) = 0;
                      v250->__r_.__value_.__r.__words[0] = 0;
                      v12[1848] = 1;
                    }
                    v45 = 1;
                    v12[1881] = 1;
                  }
                }
              }
LABEL_456:
              v239.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              AMSCore::HTTPResponse::getCacheControlTimePointIfDefined((uint64_t)&v325, v162, v239.__d_.__rep_, 1);
              if (v331)
                v239.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v325.__vftable;
              else
                ((void (*)(std::runtime_error *))v325.~runtime_error)(&v325);
              *((std::chrono::system_clock::time_point *)v12 + 238) = v239;
              if (v12[1936] && v12[1935] < 0)
                operator delete(v13->__begin_);
              v149 = 0;
              if (v12[2016] && v12[2015] < 0)
              {
                operator delete(v301->__r_.__value_.__l.__data_);
                v149 = 0;
              }
LABEL_314:
              if (v12[1192])
              {
                v189 = *v277;
                if (*v277)
                {
                  v190 = (unint64_t *)&v189->__shared_owners_;
                  do
                    v191 = __ldaxr(v190);
                  while (__stlxr(v191 - 1, v190));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                    std::__shared_weak_count::__release_weak(v189);
                  }
                }
                AMSCore::ExecuteHTTPRequestTask::Options::~Options(v306);
                v192 = (std::__shared_weak_count *)*((_QWORD *)v12 + 125);
                if (v192)
                {
                  v193 = (unint64_t *)&v192->__shared_owners_;
                  do
                    v194 = __ldaxr(v193);
                  while (__stlxr(v194 - 1, v193));
                  if (!v194)
                  {
                    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                    std::__shared_weak_count::__release_weak(v192);
                  }
                }
              }
              else
              {
                (**(void (***)(AMSCore::ExecuteHTTPRequestTask::Options *))v14)(v14);
              }
              AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)v316);
              goto LABEL_327;
            }
            *v252 = 0;
            *((_QWORD *)v12 + 251) = 0;
            v301->__r_.__value_.__r.__words[0] = (std::string::size_type)v252;
            LOWORD(v13->__begin_) = v163;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_impl<char const* const&,AMSCore::HTTPResponse::StatusCode>((uint64_t **)v301, v163);
            *(_DWORD *)v288 = 301;
            *(_WORD *)v253 = *(_WORD *)(v162 + 152);
            AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[33],AMSCore::HTTPResponse::StatusCode>((uint64_t)v13, 0x12Du, v301);
            if (v12[152])
            {
              if (v12[144])
                AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v297);
              else
                ((void (*)(std::runtime_error *))v297->~runtime_error)(v297);
              v12[152] = 0;
            }
            std::runtime_error::runtime_error(v297, (const std::runtime_error *)v13);
            *v280 = *v300;
            *((_QWORD *)v12 + 3) = off_1E2521330;
            v186 = *((_QWORD *)v12 + 244);
            *((_QWORD *)v12 + 7) = *((_QWORD *)v12 + 243);
            *((_QWORD *)v12 + 8) = v186;
            v187 = *((_QWORD *)v12 + 245);
            *((_QWORD *)v12 + 9) = v187;
            if (v187)
            {
              *(_QWORD *)(v186 + 16) = v281;
              v186 = 0;
              v188 = (uint64_t)(v12 + 1944);
              *v285 = v296;
              *v296 = 0;
              *((_QWORD *)v12 + 245) = 0;
            }
            else
            {
              *v254 = v281;
              v188 = (uint64_t)(v12 + 1944);
            }
            *((_OWORD *)v12 + 5) = *((_OWORD *)v12 + 123);
            *v279 = 0;
            *((_QWORD *)v12 + 247) = 0;
            v12[144] = 0;
            v12[152] = 1;
            *((_QWORD *)v12 + 239) = off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v188, (unsigned int *)v186);
            MEMORY[0x18D7898AC](v13);
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v301, *((unsigned int **)v12 + 250));
          }
          else
          {
            std::runtime_error::runtime_error((std::runtime_error *)v13, (const std::runtime_error *)v14);
            *v300 = *(_OWORD *)v306;
            *((_QWORD *)v12 + 239) = off_1E2521330;
            *((_QWORD *)v12 + 243) = *((_QWORD *)v12 + 128);
            v172 = *((_QWORD *)v12 + 129);
            *((_QWORD *)v12 + 244) = v172;
            v173 = *((_QWORD *)v12 + 130);
            *((_QWORD *)v12 + 245) = v173;
            if (v173)
            {
              *(_QWORD *)(v172 + 16) = v296;
              *v292 = v291;
              *v291 = 0;
              *((_QWORD *)v12 + 130) = 0;
            }
            else
            {
              *v285 = v296;
            }
            *((_OWORD *)v12 + 123) = *(_OWORD *)v282;
            *v282 = 0;
            *((_QWORD *)v12 + 132) = 0;
            v12[1984] = 1;
            std::runtime_error::runtime_error((std::runtime_error *)v288, (const std::runtime_error *)v13);
            *v263 = *v300;
            *((_QWORD *)v12 + 258) = off_1E2521330;
            *((_QWORD *)v12 + 262) = *((_QWORD *)v12 + 243);
            v174 = *((_QWORD *)v12 + 244);
            *((_QWORD *)v12 + 263) = v174;
            v175 = *((_QWORD *)v12 + 245);
            *((_QWORD *)v12 + 264) = v175;
            if (v175)
            {
              *(_QWORD *)(v174 + 16) = v258;
              *v285 = v296;
              *v296 = 0;
              *((_QWORD *)v12 + 245) = 0;
            }
            else
            {
              *v256 = v258;
            }
            *v262 = *((_OWORD *)v12 + 123);
            *v279 = 0;
            *((_QWORD *)v12 + 247) = 0;
            std::runtime_error::runtime_error((std::runtime_error *)v301, (const std::runtime_error *)v288);
            *v261 = *v263;
            *((_QWORD *)v12 + 249) = off_1E2521330;
            *((_QWORD *)v12 + 253) = *((_QWORD *)v12 + 262);
            v176 = *((_QWORD *)v12 + 263);
            *((_QWORD *)v12 + 254) = v176;
            v177 = *((_QWORD *)v12 + 264);
            *((_QWORD *)v12 + 255) = v177;
            if (v177)
            {
              *(_QWORD *)(v176 + 16) = v257;
              v176 = 0;
              v178 = (uint64_t)(v12 + 2096);
              *v256 = v258;
              *v258 = 0;
              *((_QWORD *)v12 + 264) = 0;
            }
            else
            {
              v178 = (uint64_t)(v12 + 2096);
              *v255 = v257;
            }
            *((_OWORD *)v12 + 128) = *v262;
            *(_QWORD *)v262 = 0;
            *((_QWORD *)v12 + 266) = 0;
            *((_QWORD *)v12 + 258) = off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v178, (unsigned int *)v176);
            MEMORY[0x18D7898AC](v288);
            if (v12[152])
            {
              if (v12[144])
                AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v297);
              else
                ((void (*)(std::runtime_error *))v297->~runtime_error)(v297);
              v12[152] = 0;
            }
            std::runtime_error::runtime_error(v297, (const std::runtime_error *)v301);
            *v280 = *v261;
            *((_QWORD *)v12 + 3) = off_1E2521330;
            v179 = *((_QWORD *)v12 + 254);
            *((_QWORD *)v12 + 7) = *((_QWORD *)v12 + 253);
            *((_QWORD *)v12 + 8) = v179;
            v180 = *((_QWORD *)v12 + 255);
            *((_QWORD *)v12 + 9) = v180;
            if (v180)
            {
              *(_QWORD *)(v179 + 16) = v281;
              v179 = 0;
              v181 = (uint64_t)(v12 + 2024);
              *v255 = v257;
              *v257 = 0;
              *((_QWORD *)v12 + 255) = 0;
            }
            else
            {
              v181 = (uint64_t)(v12 + 2024);
              *v254 = v281;
            }
            *((_OWORD *)v12 + 5) = *((_OWORD *)v12 + 128);
            *((_QWORD *)v12 + 256) = 0;
            *((_QWORD *)v12 + 257) = 0;
            v12[144] = 0;
            v12[152] = 1;
            *((_QWORD *)v12 + 249) = off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v181, (unsigned int *)v179);
            MEMORY[0x18D7898AC](v301);
            if (v12[1984])
            {
              *((_QWORD *)v12 + 239) = off_1E2521330;
              v182 = (std::__shared_weak_count *)*((_QWORD *)v12 + 247);
              if (v182)
              {
                v183 = (unint64_t *)&v182->__shared_owners_;
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v285, *v296);
              MEMORY[0x18D7898AC](v13);
            }
          }
          v45 = 0;
          v149 = 3;
          goto LABEL_314;
        }
        operator delete(v266->__r_.__value_.__l.__data_);
        if (v12[1608])
          goto LABEL_173;
      }
LABEL_172:
      ((void (*)(std::runtime_error *))v308->~runtime_error)(v308);
      goto LABEL_173;
    }
LABEL_148:
    std::runtime_error::runtime_error((std::runtime_error *)v14, v317);
    *(_OWORD *)v306 = *v276;
    *((_QWORD *)v12 + 124) = off_1E2521330;
    v93 = *((_QWORD *)v12 + 30);
    *((_QWORD *)v12 + 128) = *((_QWORD *)v12 + 29);
    *((_QWORD *)v12 + 129) = v93;
    v94 = *((_QWORD *)v12 + 31);
    *((_QWORD *)v12 + 130) = v94;
    v95 = (unsigned int **)(v12 + 1032);
    if (v94)
    {
      *(_QWORD *)(v93 + 16) = v291;
      *((_QWORD *)v12 + 29) = v267;
      *v267 = 0;
      *((_QWORD *)v12 + 31) = 0;
    }
    else
    {
      *v292 = v291;
    }
    *(_OWORD *)(v12 + 1048) = *((_OWORD *)v12 + 16);
    *v275 = 0;
    *((_QWORD *)v12 + 33) = 0;
    v12[1064] = 1;
    std::runtime_error::runtime_error(v316, (const std::runtime_error *)v14);
    *v274 = *(_OWORD *)v306;
    *((_QWORD *)v12 + 150) = off_1E2521330;
    *((_QWORD *)v12 + 154) = *((_QWORD *)v12 + 128);
    v135 = *((_QWORD *)v12 + 129);
    *((_QWORD *)v12 + 155) = v135;
    v136 = *((_QWORD *)v12 + 130);
    *((_QWORD *)v12 + 156) = v136;
    if (v136)
    {
      *(_QWORD *)(v135 + 16) = v293;
      *v292 = v95;
      *v95 = 0;
      *((_QWORD *)v12 + 130) = 0;
    }
    else
    {
      *v265 = v293;
    }
    v44 = v46;
    *v289 = *(_OWORD *)v282;
    *v282 = 0;
    *((_QWORD *)v12 + 132) = 0;
    std::runtime_error::runtime_error((std::runtime_error *)v13, v316);
    *v300 = *v274;
    *((_QWORD *)v12 + 239) = off_1E2521330;
    *((_QWORD *)v12 + 243) = *((_QWORD *)v12 + 154);
    v137 = *((_QWORD *)v12 + 155);
    *((_QWORD *)v12 + 244) = v137;
    v138 = *((_QWORD *)v12 + 156);
    *((_QWORD *)v12 + 245) = v138;
    if (v138)
    {
      *(_QWORD *)(v137 + 16) = v296;
      v137 = 0;
      v139 = (uint64_t)(v12 + 1232);
      *v265 = v293;
      *(_QWORD *)v293 = 0;
      *((_QWORD *)v12 + 156) = 0;
    }
    else
    {
      *v285 = v296;
      v139 = (uint64_t)(v12 + 1232);
    }
    *((_OWORD *)v12 + 123) = *v289;
    *(_QWORD *)v289 = 0;
    *((_QWORD *)v12 + 158) = 0;
    *((_QWORD *)v12 + 150) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v139, (unsigned int *)v137);
    MEMORY[0x18D7898AC](v316);
    if (v12[152])
    {
      if (v12[144])
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v297);
      else
        ((void (*)(std::runtime_error *))v297->~runtime_error)(v297);
      v12[152] = 0;
    }
    std::runtime_error::runtime_error(v297, (const std::runtime_error *)v13);
    *v280 = *v300;
    *((_QWORD *)v12 + 3) = off_1E2521330;
    v144 = *((_QWORD *)v12 + 244);
    *((_QWORD *)v12 + 7) = *((_QWORD *)v12 + 243);
    *((_QWORD *)v12 + 8) = v144;
    v145 = *((_QWORD *)v12 + 245);
    *((_QWORD *)v12 + 9) = v145;
    if (v145)
    {
      *(_QWORD *)(v144 + 16) = v281;
      v144 = 0;
      *v285 = v296;
      *v296 = 0;
      *((_QWORD *)v12 + 245) = 0;
    }
    else
    {
      *v254 = v281;
    }
    *((_OWORD *)v12 + 5) = *((_OWORD *)v12 + 123);
    *v279 = 0;
    *((_QWORD *)v12 + 247) = 0;
    v12[144] = 0;
    v12[152] = 1;
    *((_QWORD *)v12 + 239) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v285, (unsigned int *)v144);
    MEMORY[0x18D7898AC](v13);
    if (!v12[1064])
    {
      v45 = 0;
      v149 = 3;
      if (v12[592])
        goto LABEL_328;
      goto LABEL_244;
    }
    *(_QWORD *)v14 = off_1E2521330;
    v146 = *v264;
    if (*v264)
    {
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v292, *v95);
    MEMORY[0x18D7898AC](v14);
    v45 = 0;
    v149 = 3;
LABEL_327:
    v44 = v46;
    if (v12[592])
    {
LABEL_328:
      v195 = *v294;
      if (*v294)
      {
        v196 = (unint64_t *)&v195->__shared_owners_;
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v317->__vftable);
      v44 = v46;
      if (!v12[2320])
        goto LABEL_70;
LABEL_334:
      if (v12[2319] < 0)
        operator delete(v310->__r_.__value_.__l.__data_);
      goto LABEL_70;
    }
LABEL_244:
    ((void (*)(std::runtime_error *))v317->~runtime_error)(v317);
    if (v12[2320])
      goto LABEL_334;
LABEL_70:
    if (v149)
      goto LABEL_493;
  }
  if (v12[1816])
  {
    if ((*v248)[2])
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v325);
      AMSCore::Logger::log<char [30],std::tuple<std::string,std::string>>((uint64_t)v325.__vftable, (uint64_t)v273);
      v240 = (std::__shared_weak_count *)v325.__imp_.__imp_;
      if (v325.__imp_.__imp_)
      {
        v241 = (unint64_t *)(v325.__imp_.__imp_ + 8);
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      if (v12[152])
      {
        if (v12[144])
          AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v297);
        else
          ((void (*)(std::runtime_error *))v297->~runtime_error)(v297);
        v12[152] = 0;
      }
      v12[24] = 0;
      v12[48] = 0;
      if (v12[1816])
      {
        *v297 = *(std::runtime_error *)v41;
        *((_QWORD *)v12 + 5) = *(_QWORD *)(v41 + 16);
        *(_QWORD *)(v41 + 8) = 0;
        *(_QWORD *)(v41 + 16) = 0;
        *(_QWORD *)v41 = 0;
        v12[48] = 1;
      }
      v12[56] = 0;
      v12[80] = 0;
      if (v12[1848])
      {
        *(_OWORD *)v254 = *(_OWORD *)v290;
        *((_QWORD *)v12 + 9) = *((_QWORD *)v12 + 230);
        *((_QWORD *)v12 + 229) = 0;
        *((_QWORD *)v12 + 230) = 0;
        *(_QWORD *)v290 = 0;
        v12[80] = 1;
      }
      *(_OWORD *)(v12 + 88) = *((_OWORD *)v12 + 116);
      *((_QWORD *)v12 + 13) = *((_QWORD *)v12 + 234);
      *((_QWORD *)v12 + 233) = 0;
      *((_QWORD *)v12 + 234) = 0;
      *v245 = 0;
      *((_WORD *)v12 + 56) = *(_WORD *)v247;
      v12[114] = v12[1882];
      *(_OWORD *)(v12 + 120) = *((_OWORD *)v12 + 118);
      *v248 = 0;
      *((_QWORD *)v12 + 237) = 0;
      *((_QWORD *)v12 + 17) = *((_QWORD *)v12 + 238);
      v12[144] = 1;
      v12[152] = 1;
      goto LABEL_493;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode>((uint64_t)&v325, 0x137u);
    if (v12[152])
    {
LABEL_478:
      if (v12[144])
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v297);
      else
        ((void (*)(std::runtime_error *))v297->~runtime_error)(v297);
      v12[152] = 0;
    }
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v325, 0xCEu);
    if (v12[152])
      goto LABEL_478;
  }
  std::runtime_error::runtime_error(v297, &v325);
  *v280 = v326;
  *((_QWORD *)v12 + 3) = off_1E2521330;
  v243 = v328;
  *((_QWORD *)v12 + 7) = v327;
  *((_QWORD *)v12 + 8) = v243;
  v244 = v329;
  *((_QWORD *)v12 + 9) = v329;
  if (v244)
  {
    *(_QWORD *)(v243 + 16) = v281;
    v327 = &v328;
    v328 = 0;
    v329 = 0;
    v243 = 0;
  }
  else
  {
    *v254 = v281;
  }
  *((_OWORD *)v12 + 5) = v330;
  v330 = 0uLL;
  v12[144] = 0;
  v12[152] = 1;
  v325.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v327, (unsigned int *)v243);
  MEMORY[0x18D7898AC](&v325);
LABEL_493:
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v41);
  if (v12[2463] < 0)
    operator delete(*((void **)v12 + 305));
  *((_QWORD *)v12 + 341) = v12;
  *((_QWORD *)v12 + 25) = v12 + 16;
  *(_QWORD *)v12 = 0;
  AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v317);
}

void sub_18CC13824(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,AMSCore::LoadNetworkBagResult *a21)
{
  uint64_t v21;

  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(a21);
  if (*(char *)(v21 + 2463) < 0)
    operator delete(*a19);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC13AE8()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC1364CLL);
}

_BYTE *AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  std::runtime_error v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::runtime_error v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  __int16 v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v1 = result;
  v26 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 144);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 176);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 152))
      {
        v25 = v24;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v24);
      }
      else
      {
        v25 = *(_BYTE **)(*(_QWORD *)v1 + 176);
        *v4 = 0;
      }
    }
    else
    {
      v25 = 0;
    }
    if (v25)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(v5 + 136))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 128);
      if (v7)
      {
        LOBYTE(v13.__vftable) = 0;
        BYTE8(v14) = 0;
        if (*(_BYTE *)(v5 + 32))
        {
          v8 = *v6;
          *(_QWORD *)&v14 = *(_QWORD *)(v5 + 24);
          v13 = v8;
          v6->__vftable = 0;
          *(_QWORD *)(v5 + 16) = 0;
          *(_QWORD *)(v5 + 24) = 0;
          BYTE8(v14) = 1;
        }
        LOBYTE(v15) = 0;
        v17[0] = 0;
        if (*(_BYTE *)(v5 + 64))
        {
          v9 = *(_OWORD *)(v5 + 40);
          v16 = *(_QWORD *)(v5 + 56);
          v15 = v9;
          *(_QWORD *)(v5 + 40) = 0;
          *(_QWORD *)(v5 + 48) = 0;
          *(_QWORD *)(v5 + 56) = 0;
          v17[0] = 1;
        }
        *(_OWORD *)&v17[8] = *(_OWORD *)(v5 + 72);
        v18 = *(_QWORD *)(v5 + 88);
        *(_QWORD *)(v5 + 80) = 0;
        *(_QWORD *)(v5 + 88) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        v19 = *(_WORD *)(v5 + 96);
        v20 = *(_BYTE *)(v5 + 98);
        v21 = *(_OWORD *)(v5 + 104);
        *(_QWORD *)(v5 + 104) = 0;
        *(_QWORD *)(v5 + 112) = 0;
        v22 = *(_QWORD *)(v5 + 120);
      }
      else
      {
        std::runtime_error::runtime_error(&v13, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v14 = *(_OWORD *)(v5 + 24);
        v13.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        *(_QWORD *)&v15 = *(_QWORD *)(v5 + 40);
        *((_QWORD *)&v15 + 1) = v11;
        v16 = *(_QWORD *)(v5 + 56);
        if (v16)
        {
          *(_QWORD *)(v11 + 16) = (char *)&v15 + 8;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          *(_QWORD *)&v15 = (char *)&v15 + 8;
        }
        *(_OWORD *)v17 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v23 = v7;
      if (!v25)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v25 + 48))(v25, &v13);
      if (v23)
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)&v13);
      else
        ((void (*)(std::runtime_error *))v13.~runtime_error)(&v13);
    }
    else
    {
      (*v3)(v3);
    }
    result = v25;
    if (v25 == v24)
    {
      v12 = 4;
      result = v24;
    }
    else
    {
      if (!v25)
        return result;
      v12 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
  }
  return result;
}

void sub_18CC13D80(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(unint64_t a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  AMSCore::ExecuteHTTPRequestTask::Options *v4;
  uint64_t v5;
  void **v6;
  void **p_data;
  std::string *v8;
  uint64_t v9;
  const std::runtime_error *v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **v34;
  void **v35;
  void *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  int v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  void **v49;
  __n128 v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  std::string *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  __int128 v72;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  const std::runtime_error *v77;
  char v78;
  _OWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unsigned int **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  char v118;
  const void **v119;
  const void ***v120;
  uint64_t v121;
  const void **v122;
  const void ***v123;
  BOOL v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  AMSCore::LoadNetworkBagResult *v129;
  _OWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  AMSCore::LoadNetworkBagResult *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  AMSCore::LoadNetworkBagResult *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  int v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  std::string *v196;
  unsigned __int8 *v197;
  unsigned int *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int *v205;
  unsigned __int8 *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::chrono::system_clock::time_point v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  __int128 v226;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *imp;
  unint64_t *v231;
  unint64_t v232;
  AMSCore::LoadNetworkBagResult *v233;
  AMSCore::LoadNetworkBagResult *v234;
  uint64_t v235;
  uint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  std::string *v243;
  std::string *v244;
  uint64_t *v245;
  __int128 *v246;
  const std::runtime_error *v247;
  std::string *v248;
  uint64_t v249;
  AMSCore::EncodeHTTPRequestTask::Options *v250;
  uint64_t v251;
  char *v252;
  __n128 *v253;
  uint64_t *v254;
  __int128 *v255;
  std::string *v256;
  std::string *v257;
  std::runtime_error *v258;
  uint64_t *v259;
  AMSCore::ExecuteHTTPRequestTask::Options *v260;
  AMSCore::ExecuteHTTPRequestTask::Options *v261;
  _BYTE *v262;
  void **v263;
  std::string *v264;
  unint64_t v265;
  int *v266;
  AMSCore::ExecuteHTTPRequestTask::Options *v267;
  uint64_t *v268;
  uint64_t v269;
  std::runtime_error v270;
  __int128 v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  unsigned __int8 v276;

  v262 = (_BYTE *)(a1 + 2740);
  v2 = a1 + 1912;
  v265 = a1 + 1032;
  v3 = (std::runtime_error *)(a1 + 200);
  v263 = (void **)(a1 + 600);
  v4 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 992);
  v267 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1200);
  v258 = (std::runtime_error *)(a1 + 1536);
  v247 = (const std::runtime_error *)(a1 + 1664);
  v5 = a1 + 1792;
  v264 = (std::string *)(a1 + 1992);
  v259 = (uint64_t *)(a1 + 2064);
  v260 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1368);
  v6 = (void **)(a1 + 2184);
  p_data = (void **)(a1 + 2232);
  v251 = a1 + 2136;
  v252 = (char *)(a1 + 2264);
  v8 = (std::string *)(a1 + 2296);
  v240 = (_QWORD *)(a1 + 2464);
  v241 = a1 + 2392;
  v242 = (_QWORD *)(a1 + 2488);
  v244 = (std::string *)(a1 + 2512);
  v268 = (uint64_t *)(a1 + 2536);
  v243 = (std::string *)(a1 + 2560);
  v246 = (__int128 *)(a1 + 2608);
  v255 = (__int128 *)(a1 + 2624);
  v253 = (__n128 *)(a1 + 2584);
  v254 = (uint64_t *)(a1 + 2640);
  v245 = (uint64_t *)(a1 + 2656);
  v266 = (int *)(a1 + 2736);
  v239 = a1 + 16;
  v249 = a1 + 1792;
  v250 = (AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 200);
  v248 = (std::string *)(a1 + 2296);
  v261 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 992);
  v269 = a1 + 1912;
  v256 = (std::string *)(a1 + 2232);
  v257 = (std::string *)(a1 + 2184);
  if (*(_BYTE *)(a1 + 2740))
    goto LABEL_104;
  while (1)
  {
    v9 = *(_QWORD *)(a1 + 2696);
    if (!*(_BYTE *)(v9 + 408))
    {
LABEL_427:
      __break(1u);
      return;
    }
    v10 = (const std::runtime_error *)(v9 + 8);
    v11 = *(_BYTE *)(v9 + 400);
    if (v11)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v10);
      v12 = (_QWORD *)(v9 + 384);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(v9 + 384);
      v13 = (_QWORD *)(v9 + 392);
      v14 = (_QWORD *)(a1 + 584);
    }
    else
    {
      std::runtime_error::runtime_error(v3, v10);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(v9 + 24);
      v15 = (_QWORD *)(v9 + 48);
      v16 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(a1 + 240) = v16;
      v17 = a1 + 240;
      *(_QWORD *)(a1 + 200) = off_1E2521330;
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(v9 + 40);
      v18 = *(_QWORD *)(v9 + 56);
      *(_QWORD *)(a1 + 248) = v18;
      if (v18)
      {
        *(_QWORD *)(v16 + 16) = v17;
        *(_QWORD *)(v9 + 40) = v15;
        *v15 = 0;
        *(_QWORD *)(v9 + 56) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 232) = v17;
      }
      v19 = *(_QWORD *)(a1 + 2696);
      v20 = *(_QWORD *)(v19 + 64);
      v12 = (_QWORD *)(v19 + 64);
      *(_QWORD *)(a1 + 256) = v20;
      v13 = v12 + 1;
      v14 = (_QWORD *)(a1 + 264);
    }
    *v14 = *v13;
    *v12 = 0;
    v12[1] = 0;
    *(_BYTE *)(a1 + 592) = v11;
    v21 = *(_QWORD *)(a1 + 2704);
    if (!v21)
      goto LABEL_13;
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      v27 = *(std::__shared_weak_count **)(a1 + 2704);
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      v24 = *(std::__shared_weak_count **)(a1 + 1000);
      if (!v24)
        goto LABEL_19;
    }
    else
    {
LABEL_13:
      v24 = *(std::__shared_weak_count **)(a1 + 1000);
      if (!v24)
        goto LABEL_19;
    }
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    v28 = *(std::__shared_weak_count **)(a1 + 2632);
    if (!v28)
      goto LABEL_23;
LABEL_19:
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      v31 = *(std::__shared_weak_count **)(a1 + 2648);
      if (!v31)
        goto LABEL_29;
    }
    else
    {
LABEL_23:
      v31 = *(std::__shared_weak_count **)(a1 + 2648);
      if (!v31)
        goto LABEL_29;
    }
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
LABEL_29:
    v34 = (void **)*v268;
    if (*v268)
    {
      v35 = *(void ***)(a1 + 2544);
      v36 = (void *)*v268;
      if (v35 != v34)
      {
        do
        {
          if (*((char *)v35 - 1) < 0)
            operator delete(*(v35 - 3));
          v35 -= 3;
        }
        while (v35 != v34);
        v36 = (void *)*v268;
      }
      *(_QWORD *)(a1 + 2544) = v34;
      operator delete(v36);
    }
    if (*(_BYTE *)(a1 + 2256) && *(char *)(a1 + 2255) < 0)
      operator delete(*p_data);
    if (*(char *)(a1 + 2231) < 0)
      operator delete(*(void **)(a1 + 2208));
    if (*(char *)(a1 + 2207) < 0)
    {
      operator delete(*v6);
      if (!*(_BYTE *)(a1 + 592))
        goto LABEL_51;
LABEL_44:
      v37 = *(_QWORD *)(a1 + 2688);
      *(_QWORD *)(a1 + 2608) = *(_QWORD *)(a1 + 2680);
      *(_QWORD *)(a1 + 2616) = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      AMSCore::ExecuteHTTPRequestTask::internal::makeOptionsBuilder(v4, v246);
      v40 = operator new(0x20uLL);
      v40[1] = 0;
      v40[2] = 0;
      *v40 = &off_1E2522CE8;
      v40[3] = &off_1E2520F40;
      *(_QWORD *)(a1 + 2584) = v40 + 3;
      *(_QWORD *)(a1 + 2592) = v40;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(a1 + 2600) = 1;
      v270.__vftable = (std::runtime_error_vtbl *)(a1 + 1080);
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v270, (__n128 *)(a1 + 1080), v253);
      v41 = *(unsigned __int8 *)(a1 + 1784);
      if (*(_BYTE *)(a1 + 1784))
      {
        v42 = *(_BYTE *)(a1 + 1736);
        if (v42)
          v258->__vftable = v247->__vftable;
        else
          AMSCore::Error::Error(v258, v247);
        *(_BYTE *)(a1 + 1608) = v42;
        *(_OWORD *)(a1 + 1616) = *(_OWORD *)(a1 + 1744);
        if (*(char *)(a1 + 1783) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a1 + 1632), *(const std::string::value_type **)(a1 + 1760), *(_QWORD *)(a1 + 1768));
        }
        else
        {
          *(_OWORD *)(a1 + 1632) = *(_OWORD *)(a1 + 1760);
          *(_QWORD *)(a1 + 1648) = *(_QWORD *)(a1 + 1776);
        }
      }
      else
      {
        AMSCore::Error::Error(v258, v247);
      }
      *(_BYTE *)(a1 + 1656) = v41;
      *(_QWORD *)(a1 + 2288) = 0;
      v48 = (char *)operator new(0x88uLL);
      v49 = (void **)(a1 + 2288);
      *(_QWORD *)v48 = off_1E2521CE0;
      v50 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)(v48 + 8), v41 != 0, v258);
      v48[128] = v41;
      *(_QWORD *)(a1 + 2288) = v48;
      v51 = (_QWORD *)(a1 + 1152);
      v52 = *(_QWORD **)(a1 + 1152);
      *(_QWORD *)(a1 + 1152) = 0;
      v53 = 4;
      v54 = (_QWORD *)(a1 + 1128);
      if (v52 != (_QWORD *)(a1 + 1128) && (v53 = 5, (v54 = v52) == 0)
        || ((*(void (**)(__n128))(*v54 + 8 * v53))(v50), (v48 = (char *)*v49) != 0))
      {
        if (v48 == v252)
        {
          *v51 = a1 + 1128;
          (*(void (**)(char *, unint64_t, __n128))(*(_QWORD *)v252 + 24))(v252, a1 + 1128, v50);
          v55 = v264;
          goto LABEL_65;
        }
        *v51 = v48;
        v51 = (_QWORD *)(a1 + 2288);
      }
      *v51 = 0;
      v55 = v264;
LABEL_65:
      v2 = v269;
      AMSCore::ExecuteHTTPRequestTask::Options::Options(v267, v4);
      v56 = 4;
      v57 = v252;
      if (*v49 == v252 || (v56 = 5, (v57 = *v49) != 0))
        (*(void (**)(void))(*v57 + 8 * v56))();
      if (*(_BYTE *)(a1 + 1656))
      {
        if (*(char *)(a1 + 1655) < 0)
        {
          operator delete(*(void **)(a1 + 1632));
          if (*(_BYTE *)(a1 + 1608))
          {
LABEL_72:
            v58 = *(unsigned int *)(a1 + 2600);
            if ((_DWORD)v58 != -1)
              ((void (*)(std::string *, __n128 *))off_1E253D230[v58])(v55, v253);
            *(_DWORD *)(a1 + 2600) = -1;
            v59 = *(std::__shared_weak_count **)(a1 + 1920);
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            AMSCore::ExecuteHTTPRequestTask::Options::~Options(v4);
            v62 = *(std::__shared_weak_count **)(a1 + 2616);
            if (v62)
            {
              v63 = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            if (!*(_BYTE *)(a1 + 592))
              goto LABEL_427;
            AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v263, (uint64_t)v3);
            *(_OWORD *)(a1 + 976) = *(_OWORD *)(a1 + 576);
            *(_QWORD *)(a1 + 584) = 0;
            *(_QWORD *)(a1 + 576) = 0;
            *(_QWORD *)(a1 + 1368) = *(_QWORD *)(a1 + 1200);
            v65 = a1 + 1376;
            v66 = *(_QWORD *)(a1 + 1208);
            *(_QWORD *)(a1 + 1376) = v66;
            v67 = *(_QWORD *)(a1 + 1216);
            *(_QWORD *)(a1 + 1384) = v67;
            if (v67)
            {
              *(_QWORD *)(v66 + 16) = v65;
              *(_QWORD *)v267 = a1 + 1208;
              *(_QWORD *)(a1 + 1208) = 0;
              *(_QWORD *)(a1 + 1216) = 0;
            }
            else
            {
              *(_QWORD *)v260 = v65;
            }
            v68 = *(_OWORD *)(v265 + 208);
            *(_OWORD *)(a1 + 1392) = *(_OWORD *)(v265 + 192);
            *(_QWORD *)(v265 + 192) = 0;
            *(_QWORD *)(v265 + 200) = 0;
            *(_OWORD *)(a1 + 1408) = v68;
            *(_QWORD *)(v265 + 208) = 0;
            *(_QWORD *)(v265 + 216) = 0;
            *(_BYTE *)(a1 + 1424) = 0;
            *(_BYTE *)(a1 + 1448) = 0;
            if (*(_BYTE *)(a1 + 1280))
            {
              *(_QWORD *)(a1 + 1440) = *(_QWORD *)(a1 + 1272);
              *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a1 + 1256);
              *(_QWORD *)(a1 + 1272) = 0;
              *(_QWORD *)(a1 + 1256) = 0;
              *(_QWORD *)(a1 + 1264) = 0;
              *(_BYTE *)(a1 + 1448) = 1;
            }
            *(_BYTE *)(a1 + 1456) = 0;
            *(_DWORD *)(a1 + 1472) = -1;
            v69 = *(unsigned int *)(a1 + 1304);
            if ((_DWORD)v69 != -1)
            {
              ((void (*)(std::runtime_error *, unint64_t, unint64_t))off_1E253CA98[v69])(&v270, a1 + 1456, a1 + 1288);
              *(_DWORD *)(a1 + 1472) = v69;
            }
            *(_OWORD *)(a1 + 1480) = *(_OWORD *)(a1 + 1312);
            *(_DWORD *)(a1 + 1496) = *(_DWORD *)(a1 + 1328);
            v70 = *(_QWORD *)(a1 + 1360);
            if (v70)
            {
              if (v70 == a1 + 1336)
              {
                *(_QWORD *)(a1 + 1528) = a1 + 1504;
                (*(void (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
                goto LABEL_100;
              }
              v71 = (_QWORD *)(a1 + 1360);
              *(_QWORD *)(a1 + 1528) = v70;
            }
            else
            {
              v71 = (_QWORD *)(a1 + 1528);
            }
            *v71 = 0;
LABEL_100:
            v72 = *(_OWORD *)v269;
            *(_OWORD *)(v269 + 800) = *(_OWORD *)v269;
            *(_QWORD *)v269 = 0;
            *(_QWORD *)(v269 + 8) = 0;
            if (!atomic_load((unint64_t *)(v72 + 224)))
            {
              *v262 = 1;
              v74 = (unint64_t *)(*(_QWORD *)(a1 + 2712) + 224);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(a1, v74));
              if (!v75)
                return;
            }
LABEL_104:
            v76 = *(_QWORD *)(a1 + 2712);
            if (!*(_BYTE *)(v76 + 216))
              goto LABEL_427;
            v77 = (const std::runtime_error *)(v76 + 8);
            v78 = *(_BYTE *)(v76 + 208);
            v79 = (_OWORD *)(v76 + 24);
            if (!v78)
            {
              v84 = a1 + 1032;
              std::runtime_error::runtime_error((std::runtime_error *)v4, v77);
              *(_OWORD *)(a1 + 1008) = *v79;
              *(_QWORD *)(a1 + 992) = off_1E2521330;
              v85 = (_QWORD *)(v76 + 48);
              v86 = *(_QWORD *)(v76 + 48);
              *(_QWORD *)(a1 + 1024) = *(_QWORD *)(v76 + 40);
              *(_QWORD *)(a1 + 1032) = v86;
              v87 = *(_QWORD *)(v76 + 56);
              *(_QWORD *)(a1 + 1040) = v87;
              if (v87)
              {
                *(_QWORD *)(v86 + 16) = v84;
                *(_QWORD *)(v76 + 40) = v85;
                *v85 = 0;
                *(_QWORD *)(v76 + 56) = 0;
              }
              else
              {
                *(_QWORD *)(a1 + 1024) = v84;
              }
              v101 = *(_QWORD *)(a1 + 2712);
              v102 = *(_QWORD *)(v101 + 64);
              v93 = (_QWORD *)(v101 + 64);
              *(_QWORD *)(a1 + 1048) = v102;
              v95 = v93 + 1;
              v96 = (_QWORD *)(a1 + 1056);
              v2 = v269;
LABEL_127:
              *v96 = *v95;
              *v93 = 0;
              v93[1] = 0;
              *(_BYTE *)(a1 + 1192) = v78;
              v103 = *(_QWORD *)(a1 + 2720);
              if (v103)
              {
                v104 = (unint64_t *)(v103 + 8);
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  v106 = *(std::__shared_weak_count **)(a1 + 2720);
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              v107 = (unsigned int **)(a1 + 1920);
              v108 = *(std::__shared_weak_count **)(a1 + 1920);
              if (v108)
              {
                v109 = (unint64_t *)&v108->__shared_owners_;
                do
                  v110 = __ldaxr(v109);
                while (__stlxr(v110 - 1, v109));
                if (!v110)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v108);
                }
              }
              AMSCore::ExecuteHTTPRequestTask::Options::~Options(v260);
              v111 = *(std::__shared_weak_count **)(a1 + 984);
              if (v111)
              {
                v112 = (unint64_t *)&v111->__shared_owners_;
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                  std::__shared_weak_count::__release_weak(v111);
                }
              }
              AMSCore::EncodeHTTPRequestTask::Options::~Options(v263);
              if (*(_BYTE *)(a1 + 1192))
              {
                v114 = *(_QWORD *)(a1 + 1176);
                v115 = *(unsigned __int16 *)(v114 + 152);
                if ((v115 - 200) < 0x64)
                {
                  v116 = 0;
                  if (!*(_BYTE *)(a1 + 2320))
                    goto LABEL_271;
                  AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(a1 + 1176));
                  v118 = *(_BYTE *)(v117 + 72);
                  if (!v118)
                  {
                    v2 = v269;
                    AMSCore::Error::Error((std::runtime_error *)v269, (const std::runtime_error *)v117);
                    *(_BYTE *)(a1 + 1984) = 0;
                    goto LABEL_230;
                  }
                  *v107 = 0;
                  *(_QWORD *)(a1 + 1928) = 0;
                  *(_QWORD *)v269 = v107;
                  v120 = (const void ***)(v117 + 8);
                  v119 = *(const void ***)v117;
                  if (*(_QWORD *)v117 == v117 + 8)
                  {
                    v121 = 0;
                    *(_BYTE *)(a1 + 1984) = v118;
                    *(_QWORD *)(a1 + 2408) = 0;
                    *(_QWORD *)(a1 + 2400) = 0;
                  }
                  else
                  {
                    do
                    {
                      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)v269, (uint64_t *)(a1 + 1920), v119 + 4, (__int128 *)v119 + 2);
                      v122 = (const void **)v119[1];
                      if (v122)
                      {
                        do
                        {
                          v123 = (const void ***)v122;
                          v122 = (const void **)*v122;
                        }
                        while (v122);
                      }
                      else
                      {
                        do
                        {
                          v123 = (const void ***)v119[2];
                          v124 = *v123 == v119;
                          v119 = (const void **)v123;
                        }
                        while (!v124);
                      }
                      v119 = (const void **)v123;
                    }
                    while (v123 != v120);
                    *(_BYTE *)(a1 + 1984) = v118;
                    v162 = *(_QWORD *)(a1 + 1912);
                    v121 = *(_QWORD *)(a1 + 1920);
                    v163 = *(_QWORD *)(a1 + 1928);
                    *(_QWORD *)(a1 + 2392) = v162;
                    *(_QWORD *)(a1 + 2400) = v121;
                    *(_QWORD *)(a1 + 2408) = v163;
                    if (v163)
                    {
                      *(_QWORD *)(v121 + 16) = a1 + 2400;
                      v2 = v269;
                      *(_QWORD *)v269 = v107;
                      *v107 = 0;
                      *(_QWORD *)(a1 + 1928) = 0;
                      goto LABEL_212;
                    }
                  }
                  v2 = v269;
                  v162 = a1 + 2400;
                  *(_QWORD *)(a1 + 2392) = a1 + 2400;
LABEL_212:
                  v164 = operator new(0x30uLL);
                  v164[1] = 0;
                  v164[2] = 0;
                  v164[3] = v162;
                  v165 = v164 + 3;
                  *v164 = &off_1E2523068;
                  v164[4] = v121;
                  v166 = v164 + 4;
                  v167 = *(_QWORD *)(a1 + 2408);
                  v164[5] = v167;
                  if (v167)
                  {
                    *(_QWORD *)(v121 + 16) = v166;
                    *(_QWORD *)(a1 + 2392) = a1 + 2400;
                    *(_QWORD *)(a1 + 2408) = 0;
                    *(_QWORD *)(a1 + 2400) = 0;
                  }
                  else
                  {
                    *v165 = v166;
                  }
                  *(_QWORD *)(a1 + 1888) = v165;
                  v172 = *(std::__shared_weak_count **)(a1 + 1896);
                  *(_QWORD *)(a1 + 1896) = v164;
                  if (v172)
                  {
                    v173 = (unint64_t *)&v172->__shared_owners_;
                    do
                      v174 = __ldaxr(v173);
                    while (__stlxr(v174 - 1, v173));
                    if (!v174)
                    {
                      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                      std::__shared_weak_count::__release_weak(v172);
                    }
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v241, *(unsigned int **)(a1 + 2400));
                  if (*(_BYTE *)(a1 + 1984))
                  {
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *v107);
                    goto LABEL_231;
                  }
LABEL_230:
                  (**(void (***)(uint64_t))v2)(v2);
LABEL_231:
                  AMSCore::getValueByKey<std::vector<AMSCore::Any>,std::map<std::string,AMSCore::Any> const>((uint64_t)&v270, *(uint64_t **)(a1 + 1888), "urlCookies", 0xAuLL);
                  if (v276)
                  {
                    AMSCore::toStringVector((std::vector<std::string> *)v2, (__int128 **)v270.__vftable);
                    v175 = v276;
                    *(_BYTE *)(a1 + 1936) = 1;
                    if (v175)
                      goto LABEL_236;
                  }
                  else
                  {
                    *(_BYTE *)(a1 + 1912) = 0;
                    *(_BYTE *)(a1 + 1936) = 0;
                  }
                  ((void (*)(std::runtime_error *))v270.~runtime_error)(&v270);
LABEL_236:
                  v116 = 0;
                  if (!AMSCore::cookiesUpdated(*(_QWORD *)(a1 + 1856), *(_QWORD *)(a1 + 1864), (unsigned __int8 ***)v2))
                  {
LABEL_262:
                    if (*(_BYTE *)(a1 + 1936))
                    {
                      v188 = *(unsigned int **)v2;
                      if (*(_QWORD *)v2)
                      {
                        v189 = *v107;
                        v190 = *(unsigned int **)v2;
                        if (*v107 != v188)
                        {
                          do
                          {
                            if (*((char *)v189 - 1) < 0)
                              operator delete(*((void **)v189 - 3));
                            v189 -= 6;
                          }
                          while (v189 != v188);
                          v190 = *(unsigned int **)v2;
                        }
                        *v107 = v188;
                        operator delete(v190);
                      }
                    }
LABEL_271:
                    v191 = (char *)operator new(0x19uLL);
                    *(_QWORD *)v2 = v191;
                    *(_OWORD *)v107 = xmmword_18CF51B20;
                    strcpy(v191, "X-Set-Apple-Store-Front");
                    AMSCore::IHTTPHeaderMap::getSingleValueOrNone(v264, (_QWORD *)(v114 + 160), (char *)v2);
                    if (*(char *)(a1 + 1935) < 0)
                    {
                      operator delete(*(void **)v2);
                      if (!*(_BYTE *)(a1 + 2016))
                        goto LABEL_307;
                    }
                    else if (!*(_BYTE *)(a1 + 2016))
                    {
                      goto LABEL_307;
                    }
                    if (*(_BYTE *)(a1 + 1816))
                    {
                      v192 = *(unsigned __int8 *)(a1 + 1815);
                      if ((v192 & 0x80u) == 0)
                        v193 = *(unsigned __int8 *)(a1 + 1815);
                      else
                        v193 = *(_QWORD *)(a1 + 1800);
                      v194 = *(unsigned __int8 *)(a1 + 2015);
                      v195 = (char)v194;
                      if ((v194 & 0x80u) != 0)
                        v194 = *(_QWORD *)(a1 + 2000);
                      if (v193 == v194)
                      {
                        if (v195 >= 0)
                          v196 = v264;
                        else
                          v196 = (std::string *)v264->__r_.__value_.__r.__words[0];
                        if ((v192 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v5, v196, *(_QWORD *)(a1 + 1800)))
                            goto LABEL_307;
                        }
                        else
                        {
                          if (!*(_BYTE *)(a1 + 1815))
                            goto LABEL_307;
                          v197 = (unsigned __int8 *)v5;
                          while (*v197 == v196->__r_.__value_.__s.__data_[0])
                          {
                            ++v197;
                            v196 = (std::string *)((char *)v196 + 1);
                            if (!--v192)
                              goto LABEL_307;
                          }
                        }
                      }
                    }
                    *v259 = (uint64_t)v264;
                    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault((_QWORD *)v2);
                    AMSCore::Logger::log<char [65],AMSCore::Log::Redact<std::string>>(*(_QWORD *)v2, v259);
                    v198 = *v107;
                    if (*v107)
                    {
                      v199 = (unint64_t *)(v198 + 2);
                      do
                        v200 = __ldaxr(v199);
                      while (__stlxr(v200 - 1, v199));
                      if (!v200)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v198 + 16))(v198);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v198);
                      }
                    }
                    if (!*(_BYTE *)(a1 + 2016))
                      goto LABEL_427;
                    if (*(char *)(a1 + 2015) < 0)
                    {
                      std::string::__init_copy_ctor_external(v244, *(const std::string::value_type **)(a1 + 1992), *(_QWORD *)(a1 + 2000));
                    }
                    else
                    {
                      *(_OWORD *)&v244->__r_.__value_.__l.__data_ = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
                      v244->__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
                    }
                    if (*(_BYTE *)(a1 + 1816))
                    {
                      if (*(char *)(a1 + 1815) < 0)
                        operator delete(*(void **)v5);
                      *(_OWORD *)v5 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
                      *(_QWORD *)(v5 + 16) = *((_QWORD *)&v244->__r_.__value_.__l + 2);
                      *(_BYTE *)(a1 + 2535) = 0;
                      *(_BYTE *)(a1 + 2512) = 0;
                    }
                    else
                    {
                      *(_OWORD *)v5 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
                      *(_QWORD *)(v5 + 16) = *((_QWORD *)&v244->__r_.__value_.__l + 2);
                      v244->__r_.__value_.__l.__size_ = 0;
                      v244->__r_.__value_.__r.__words[2] = 0;
                      v244->__r_.__value_.__r.__words[0] = 0;
                      *(_BYTE *)(a1 + 1816) = 1;
                    }
                    v116 = 1;
                    *(_BYTE *)(a1 + 1880) = 1;
LABEL_307:
                    AMSCore::getStorefrontSuffix((std::string *)v2, *(_QWORD *)(a1 + 1888), "storefront-header-suffix", 0x18uLL);
                    if (!*(_BYTE *)(a1 + 1936))
                      goto LABEL_340;
                    if (*(_BYTE *)(a1 + 1848))
                    {
                      v201 = *(unsigned __int8 *)(a1 + 1847);
                      if ((v201 & 0x80u) == 0)
                        v202 = *(unsigned __int8 *)(a1 + 1847);
                      else
                        v202 = *(_QWORD *)(a1 + 1832);
                      v203 = *(unsigned __int8 *)(a1 + 1935);
                      v204 = (char)v203;
                      if ((v203 & 0x80u) != 0)
                        v203 = *(_QWORD *)(a1 + 1920);
                      if (v202 == v203)
                      {
                        if (v204 >= 0)
                          v205 = (unsigned int *)v2;
                        else
                          v205 = *(unsigned int **)v2;
                        if ((v201 & 0x80) == 0)
                        {
                          if (*(_BYTE *)(a1 + 1847))
                          {
                            v206 = (unsigned __int8 *)(a1 + 1824);
                            while (*v206 == *(unsigned __int8 *)v205)
                            {
                              ++v206;
                              v205 = (unsigned int *)((char *)v205 + 1);
                              if (!--v201)
                                goto LABEL_340;
                            }
                            goto LABEL_325;
                          }
LABEL_340:
                          v210.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                          AMSCore::HTTPResponse::getCacheControlTimePointIfDefined((uint64_t)&v270, v114, v210.__d_.__rep_, 1);
                          if (v276)
                            v210.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v270.__vftable;
                          else
                            ((void (*)(std::runtime_error *))v270.~runtime_error)(&v270);
                          *(std::chrono::system_clock::time_point *)(a1 + 1904) = v210;
                          if (*(_BYTE *)(a1 + 1936) && *(char *)(a1 + 1935) < 0)
                            operator delete(*(void **)v2);
                          v149 = 0;
                          if (*(_BYTE *)(a1 + 2016) && *(char *)(a1 + 2015) < 0)
                          {
                            operator delete(v264->__r_.__value_.__l.__data_);
                            v149 = 0;
                          }
                          goto LABEL_349;
                        }
                        if (!memcmp(*(const void **)(a1 + 1824), v205, *(_QWORD *)(a1 + 1832)))
                          goto LABEL_340;
                      }
                    }
LABEL_325:
                    *v245 = v2;
                    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v259);
                    AMSCore::Logger::log<char [78],AMSCore::Log::Redact<std::string>>(*v259, v245);
                    v207 = *(std::__shared_weak_count **)(a1 + 2072);
                    if (v207)
                    {
                      v208 = (unint64_t *)&v207->__shared_owners_;
                      do
                        v209 = __ldaxr(v208);
                      while (__stlxr(v209 - 1, v208));
                      if (!v209)
                      {
                        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                        std::__shared_weak_count::__release_weak(v207);
                      }
                    }
                    if (!*(_BYTE *)(a1 + 1936))
                      goto LABEL_427;
                    if (*(char *)(a1 + 1935) < 0)
                    {
                      std::string::__init_copy_ctor_external(v243, *(const std::string::value_type **)v2, (std::string::size_type)*v107);
                    }
                    else
                    {
                      *(_OWORD *)&v243->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
                      v243->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 16);
                    }
                    if (*(_BYTE *)(a1 + 1848))
                    {
                      if (*(char *)(a1 + 1847) < 0)
                        operator delete(*(void **)(a1 + 1824));
                      *(_OWORD *)(a1 + 1824) = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
                      *(_QWORD *)(a1 + 1840) = *((_QWORD *)&v243->__r_.__value_.__l + 2);
                      *(_BYTE *)(a1 + 2583) = 0;
                      *(_BYTE *)(a1 + 2560) = 0;
                    }
                    else
                    {
                      *(_OWORD *)(a1 + 1824) = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
                      *(_QWORD *)(a1 + 1840) = *((_QWORD *)&v243->__r_.__value_.__l + 2);
                      v243->__r_.__value_.__l.__size_ = 0;
                      v243->__r_.__value_.__r.__words[2] = 0;
                      v243->__r_.__value_.__r.__words[0] = 0;
                      *(_BYTE *)(a1 + 1848) = 1;
                    }
                    v116 = 1;
                    *(_BYTE *)(a1 + 1881) = 1;
                    goto LABEL_340;
                  }
                  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v264);
                  AMSCore::Logger::log<char [42]>(v264->__r_.__value_.__r.__words[0]);
                  v176 = *(std::__shared_weak_count **)(a1 + 2000);
                  if (!v176)
                    goto LABEL_430;
                  v177 = (unint64_t *)&v176->__shared_owners_;
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                    std::__shared_weak_count::__release_weak(v176);
                    if (*(_BYTE *)(a1 + 1936))
                      goto LABEL_242;
                  }
                  else
                  {
LABEL_430:
                    if (*(_BYTE *)(a1 + 1936))
                    {
LABEL_242:
                      *v242 = 0;
                      v242[1] = 0;
                      v242[2] = 0;
                      std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v242, *(_QWORD *)v2, (uint64_t)*v107, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)*v107 - *(_QWORD *)v2) >> 3));
                      v179 = *(_QWORD *)(a1 + 1856);
                      if (v179)
                      {
                        v180 = *(_QWORD *)(a1 + 1864);
                        v181 = *(void **)(a1 + 1856);
                        if (v180 != v179)
                        {
                          do
                          {
                            if (*(char *)(v180 - 1) < 0)
                              operator delete(*(void **)(v180 - 24));
                            v180 -= 24;
                          }
                          while (v180 != v179);
                          v181 = *(void **)(a1 + 1856);
                        }
                        *(_QWORD *)(a1 + 1864) = v179;
                        operator delete(v181);
                      }
                      v182 = (_QWORD *)(a1 + 2504);
                      v183 = (_QWORD *)(a1 + 2496);
                      v184 = v242;
LABEL_261:
                      *(_QWORD *)(a1 + 1856) = *v184;
                      *(_QWORD *)(a1 + 1864) = *v183;
                      *(_QWORD *)(a1 + 1872) = *v182;
                      *v184 = 0;
                      v184[1] = 0;
                      v184[2] = 0;
                      v116 = 1;
                      *(_BYTE *)(a1 + 1882) = 1;
                      goto LABEL_262;
                    }
                  }
                  std::vector<std::string>::vector<std::string_view const*,0>(v240, (uint64_t)&AMSCore::getDefaultCookieKeys, (uint64_t)off_1E253CA98);
                  v185 = *(_QWORD *)(a1 + 1856);
                  if (v185)
                  {
                    v186 = *(_QWORD *)(a1 + 1864);
                    v187 = *(void **)(a1 + 1856);
                    if (v186 != v185)
                    {
                      do
                      {
                        if (*(char *)(v186 - 1) < 0)
                          operator delete(*(void **)(v186 - 24));
                        v186 -= 24;
                      }
                      while (v186 != v185);
                      v187 = *(void **)(a1 + 1856);
                    }
                    *(_QWORD *)(a1 + 1864) = v185;
                    operator delete(v187);
                  }
                  v182 = (_QWORD *)(a1 + 2480);
                  v183 = (_QWORD *)(a1 + 2472);
                  v184 = v240;
                  goto LABEL_261;
                }
                *(_QWORD *)(a1 + 2008) = 0;
                *(_QWORD *)(a1 + 2000) = 0;
                *(_QWORD *)(a1 + 1992) = a1 + 2000;
                *(_WORD *)(a1 + 1912) = v115;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_impl<char const* const&,AMSCore::HTTPResponse::StatusCode>((uint64_t **)v264, v115);
                *(_DWORD *)v259 = 301;
                *(_WORD *)v245 = *(_WORD *)(v114 + 152);
                AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[33],AMSCore::HTTPResponse::StatusCode>(v2, 0x12Du, v264);
                if (*(_BYTE *)(a1 + 152))
                {
                  v129 = (AMSCore::LoadNetworkBagResult *)(a1 + 24);
                  if (*(_BYTE *)(a1 + 144))
                    AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v129);
                  else
                    (**(void (***)(AMSCore::LoadNetworkBagResult *))v129)(v129);
                  *(_BYTE *)(a1 + 152) = 0;
                }
                std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v2);
                v168 = *(_QWORD *)(a1 + 1952);
                *(_QWORD *)(a1 + 64) = v168;
                v169 = a1 + 64;
                v170 = (_QWORD *)(a1 + 1944);
                *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 1928);
                *(_QWORD *)(a1 + 24) = off_1E2521330;
                *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 1944);
                v171 = *(_QWORD *)(a1 + 1960);
                *(_QWORD *)(a1 + 72) = v171;
                if (v171)
                {
                  *(_QWORD *)(v168 + 16) = v169;
                  *v170 = a1 + 1952;
                  *(_QWORD *)(a1 + 1952) = 0;
                  *(_QWORD *)(a1 + 1960) = 0;
                  v168 = 0;
                }
                else
                {
                  *(_QWORD *)(a1 + 56) = v169;
                }
                *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 1968);
                *(_QWORD *)(a1 + 1976) = 0;
                *(_QWORD *)(a1 + 1968) = 0;
                *(_BYTE *)(a1 + 144) = 0;
                *(_BYTE *)(a1 + 152) = 1;
                *(_QWORD *)(a1 + 1912) = off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v170, (unsigned int *)v168);
                MEMORY[0x18D7898AC](v2);
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v264, *(unsigned int **)(a1 + 2000));
              }
              else
              {
                v125 = (_QWORD *)(a1 + 1944);
                v126 = (_QWORD *)(a1 + 1952);
                std::runtime_error::runtime_error((std::runtime_error *)v2, (const std::runtime_error *)v4);
                *(_OWORD *)(a1 + 1928) = *(_OWORD *)(a1 + 1008);
                *(_QWORD *)(a1 + 1912) = off_1E2521330;
                *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a1 + 1024);
                v127 = *(_QWORD *)(a1 + 1032);
                *(_QWORD *)(a1 + 1952) = v127;
                v128 = *(_QWORD *)(a1 + 1040);
                *(_QWORD *)(a1 + 1960) = v128;
                if (v128)
                {
                  *(_QWORD *)(v127 + 16) = v126;
                  *(_QWORD *)(a1 + 1024) = a1 + 1032;
                  *(_QWORD *)(a1 + 1032) = 0;
                  *(_QWORD *)(a1 + 1040) = 0;
                }
                else
                {
                  *v125 = v126;
                }
                v136 = (_QWORD *)(a1 + 2096);
                v137 = (_QWORD *)(a1 + 2104);
                *(_OWORD *)(a1 + 1968) = *(_OWORD *)(v265 + 16);
                *(_QWORD *)(v265 + 16) = 0;
                *(_QWORD *)(v265 + 24) = 0;
                *(_BYTE *)(a1 + 1984) = 1;
                std::runtime_error::runtime_error((std::runtime_error *)v259, (const std::runtime_error *)v269);
                *(_OWORD *)(a1 + 2080) = *(_OWORD *)(a1 + 1928);
                *(_QWORD *)(a1 + 2064) = off_1E2521330;
                *(_QWORD *)(a1 + 2096) = *(_QWORD *)(a1 + 1944);
                v138 = *(_QWORD *)(a1 + 1952);
                *(_QWORD *)(a1 + 2104) = v138;
                v139 = *(_QWORD *)(a1 + 1960);
                *(_QWORD *)(a1 + 2112) = v139;
                if (v139)
                {
                  *(_QWORD *)(v138 + 16) = v137;
                  *v125 = v126;
                  *v126 = 0;
                  *(_QWORD *)(a1 + 1960) = 0;
                }
                else
                {
                  *v136 = v137;
                }
                *(_OWORD *)(v269 + 208) = *(_OWORD *)(a1 + 1968);
                v140 = (_OWORD *)(v269 + 208);
                v141 = (_QWORD *)(a1 + 2024);
                v142 = (_QWORD *)(a1 + 2032);
                *(_QWORD *)(a1 + 1968) = 0;
                *(_QWORD *)(a1 + 1976) = 0;
                std::runtime_error::runtime_error((std::runtime_error *)v264, (const std::runtime_error *)v259);
                *(_OWORD *)(a1 + 2008) = *(_OWORD *)(a1 + 2080);
                *(_QWORD *)(a1 + 1992) = off_1E2521330;
                *(_QWORD *)(a1 + 2024) = *(_QWORD *)(a1 + 2096);
                v143 = *(_QWORD *)(a1 + 2104);
                *(_QWORD *)(a1 + 2032) = v143;
                v144 = *(_QWORD *)(a1 + 2112);
                *(_QWORD *)(a1 + 2040) = v144;
                if (v144)
                {
                  *(_QWORD *)(v143 + 16) = v142;
                  v143 = 0;
                  *v136 = v137;
                  *v137 = 0;
                  *(_QWORD *)(a1 + 2112) = 0;
                }
                else
                {
                  *v141 = v142;
                }
                *(_OWORD *)(a1 + 2048) = *v140;
                *(_QWORD *)v140 = 0;
                *(_QWORD *)(v269 + 216) = 0;
                *(_QWORD *)(a1 + 2064) = off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 2096, (unsigned int *)v143);
                MEMORY[0x18D7898AC](v259);
                v8 = v248;
                v5 = v249;
                if (*(_BYTE *)(a1 + 152))
                {
                  v145 = (AMSCore::LoadNetworkBagResult *)(a1 + 24);
                  if (*(_BYTE *)(a1 + 144))
                    AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v145);
                  else
                    (**(void (***)(AMSCore::LoadNetworkBagResult *))v145)(v145);
                  *(_BYTE *)(a1 + 152) = 0;
                }
                std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v264);
                v156 = *(_QWORD *)(a1 + 2032);
                *(_QWORD *)(a1 + 64) = v156;
                v157 = a1 + 64;
                *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 2008);
                *(_QWORD *)(a1 + 24) = off_1E2521330;
                *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 2024);
                v158 = *(_QWORD *)(a1 + 2040);
                *(_QWORD *)(a1 + 72) = v158;
                if (v158)
                {
                  *(_QWORD *)(v156 + 16) = v157;
                  v156 = 0;
                  *v141 = v142;
                  *v142 = 0;
                  *(_QWORD *)(a1 + 2040) = 0;
                }
                else
                {
                  *(_QWORD *)(a1 + 56) = v157;
                }
                v2 = v269;
                *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 2048);
                *(_QWORD *)(a1 + 2048) = 0;
                *(_QWORD *)(a1 + 2056) = 0;
                *(_BYTE *)(a1 + 144) = 0;
                *(_BYTE *)(a1 + 152) = 1;
                *(_QWORD *)(a1 + 1992) = off_1E2521330;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 2024, (unsigned int *)v156);
                MEMORY[0x18D7898AC](v264);
                v116 = 0;
                v149 = 3;
                v3 = (std::runtime_error *)v250;
                if (!*(_BYTE *)(a1 + 1984))
                {
LABEL_349:
                  if (*(_BYTE *)(a1 + 1192))
                  {
                    v211 = *(std::__shared_weak_count **)(a1 + 1184);
                    if (v211)
                    {
                      v212 = (unint64_t *)&v211->__shared_owners_;
                      do
                        v213 = __ldaxr(v212);
                      while (__stlxr(v213 - 1, v212));
                      if (!v213)
                      {
                        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                        std::__shared_weak_count::__release_weak(v211);
                      }
                    }
                    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1008));
                    v214 = *(std::__shared_weak_count **)(a1 + 1000);
                    if (v214)
                    {
                      v215 = (unint64_t *)&v214->__shared_owners_;
                      do
                        v216 = __ldaxr(v215);
                      while (__stlxr(v216 - 1, v215));
                      if (!v216)
                      {
                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                        std::__shared_weak_count::__release_weak(v214);
                      }
                    }
                  }
                  else
                  {
                    (**(void (***)(AMSCore::ExecuteHTTPRequestTask::Options *))v261)(v261);
                  }
                  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v267);
                  if (!*(_BYTE *)(a1 + 592))
                    goto LABEL_362;
                  goto LABEL_190;
                }
                *(_QWORD *)(a1 + 1912) = off_1E2521330;
                v159 = *(std::__shared_weak_count **)(a1 + 1976);
                if (v159)
                {
                  v160 = (unint64_t *)&v159->__shared_owners_;
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                    std::__shared_weak_count::__release_weak(v159);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1944, *(unsigned int **)(a1 + 1952));
                MEMORY[0x18D7898AC](v269);
              }
              v116 = 0;
              v149 = 3;
              goto LABEL_349;
            }
            *(_OWORD *)(a1 + 992) = *(_OWORD *)(v76 + 8);
            v77->__vftable = 0;
            *(_QWORD *)(v76 + 16) = 0;
            *(_QWORD *)(a1 + 1008) = *(_QWORD *)(v76 + 24);
            v80 = a1 + 1016;
            v81 = (_QWORD *)(v76 + 32);
            v82 = *(_QWORD *)(v76 + 32);
            *(_QWORD *)(a1 + 1016) = v82;
            v83 = *(_QWORD *)(v76 + 40);
            *(_QWORD *)(a1 + 1024) = v83;
            if (v83)
            {
              *(_QWORD *)(v82 + 16) = v80;
              *(_QWORD *)v79 = v81;
              *v81 = 0;
              *(_QWORD *)(v76 + 40) = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 1008) = v80;
            }
            *(_OWORD *)v265 = *(_OWORD *)(v76 + 48);
            *(_QWORD *)(v76 + 48) = 0;
            *(_QWORD *)(v76 + 56) = 0;
            *(_OWORD *)(v265 + 16) = *(_OWORD *)(v76 + 64);
            *(_QWORD *)(v76 + 64) = 0;
            *(_QWORD *)(v76 + 72) = 0;
            *(_BYTE *)(a1 + 1064) = 0;
            *(_BYTE *)(a1 + 1088) = 0;
            if (*(_BYTE *)(v76 + 104))
            {
              v88 = *(_OWORD *)(v76 + 80);
              *(_QWORD *)(a1 + 1080) = *(_QWORD *)(v76 + 96);
              *(_OWORD *)(a1 + 1064) = v88;
              *(_QWORD *)(v76 + 88) = 0;
              *(_QWORD *)(v76 + 96) = 0;
              *(_QWORD *)(v76 + 80) = 0;
              *(_BYTE *)(a1 + 1088) = 1;
            }
            *(_BYTE *)(a1 + 1096) = 0;
            *(_DWORD *)(a1 + 1112) = -1;
            v89 = *(unsigned int *)(v76 + 128);
            if ((_DWORD)v89 != -1)
            {
              ((void (*)(std::runtime_error *, unint64_t, uint64_t))off_1E253CA98[v89])(&v270, a1 + 1096, v76 + 112);
              *(_DWORD *)(a1 + 1112) = v89;
            }
            v90 = *(_OWORD *)(v76 + 136);
            *(_DWORD *)(a1 + 1136) = *(_DWORD *)(v76 + 152);
            *(_OWORD *)(a1 + 1120) = v90;
            v91 = (_QWORD *)(v76 + 184);
            v92 = *(_QWORD *)(v76 + 184);
            if (v92)
            {
              if (v92 == v76 + 160)
              {
                *(_QWORD *)(a1 + 1168) = a1 + 1144;
                (*(void (**)(_QWORD))(*(_QWORD *)*v91 + 24))(*v91);
                goto LABEL_121;
              }
              *(_QWORD *)(a1 + 1168) = v92;
            }
            else
            {
              v91 = (_QWORD *)(a1 + 1168);
            }
            *v91 = 0;
LABEL_121:
            v94 = *(_QWORD *)(v76 + 192);
            v93 = (_QWORD *)(v76 + 192);
            *(_QWORD *)(a1 + 1176) = v94;
            v95 = v93 + 1;
            v96 = (_QWORD *)(a1 + 1184);
            goto LABEL_127;
          }
        }
        else if (*(_BYTE *)(a1 + 1608))
        {
          goto LABEL_72;
        }
      }
      ((void (*)(std::runtime_error *))v258->~runtime_error)(v258);
      goto LABEL_72;
    }
    if (*(_BYTE *)(a1 + 592))
      goto LABEL_44;
LABEL_51:
    std::runtime_error::runtime_error((std::runtime_error *)v4, v3);
    v43 = (_QWORD *)(a1 + 240);
    v44 = *(_QWORD *)(a1 + 240);
    v45 = (_QWORD *)(a1 + 1032);
    v46 = (_QWORD *)(a1 + 1024);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 992) = off_1E2521330;
    *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 1032) = v44;
    v47 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 1040) = v47;
    if (v47)
    {
      *(_QWORD *)(v44 + 16) = v45;
      *(_QWORD *)(a1 + 232) = v43;
      *v43 = 0;
      *(_QWORD *)(a1 + 248) = 0;
    }
    else
    {
      *v46 = v45;
    }
    v97 = (_QWORD *)(a1 + 1240);
    *(_OWORD *)(v265 + 16) = *(_OWORD *)(a1 + 256);
    v98 = (_QWORD *)(a1 + 1232);
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_BYTE *)(a1 + 1064) = 1;
    std::runtime_error::runtime_error((std::runtime_error *)v267, (const std::runtime_error *)v4);
    *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a1 + 1008);
    *(_QWORD *)(a1 + 1200) = off_1E2521330;
    *(_QWORD *)(a1 + 1232) = *(_QWORD *)(a1 + 1024);
    v99 = *(_QWORD *)(a1 + 1032);
    *(_QWORD *)(a1 + 1240) = v99;
    v100 = *(_QWORD *)(a1 + 1040);
    *(_QWORD *)(a1 + 1248) = v100;
    if (v100)
    {
      *(_QWORD *)(v99 + 16) = v97;
      *v46 = v45;
      *v45 = 0;
      *(_QWORD *)(a1 + 1040) = 0;
    }
    else
    {
      *v98 = v97;
    }
    *(_OWORD *)(v265 + 224) = *(_OWORD *)(v265 + 16);
    v130 = (_OWORD *)(v265 + 224);
    v131 = (_QWORD *)(a1 + 1944);
    v132 = (_QWORD *)(a1 + 1952);
    *(_QWORD *)(v265 + 16) = 0;
    *(_QWORD *)(v265 + 24) = 0;
    std::runtime_error::runtime_error((std::runtime_error *)v269, (const std::runtime_error *)v267);
    *(_OWORD *)(a1 + 1928) = *(_OWORD *)(a1 + 1216);
    *(_QWORD *)(a1 + 1912) = off_1E2521330;
    *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a1 + 1232);
    v133 = *(_QWORD *)(a1 + 1240);
    *(_QWORD *)(a1 + 1952) = v133;
    v134 = *(_QWORD *)(a1 + 1248);
    *(_QWORD *)(a1 + 1960) = v134;
    if (v134)
    {
      *(_QWORD *)(v133 + 16) = v132;
      v133 = 0;
      *v98 = v97;
      *v97 = 0;
      *(_QWORD *)(a1 + 1248) = 0;
    }
    else
    {
      *v131 = v132;
    }
    *(_OWORD *)(a1 + 1968) = *v130;
    *(_QWORD *)v130 = 0;
    *(_QWORD *)(v265 + 232) = 0;
    *(_QWORD *)(a1 + 1200) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1232, (unsigned int *)v133);
    MEMORY[0x18D7898AC](v267);
    v8 = v248;
    v5 = v249;
    if (*(_BYTE *)(a1 + 152))
    {
      v135 = (AMSCore::LoadNetworkBagResult *)(a1 + 24);
      if (*(_BYTE *)(a1 + 144))
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v135);
      else
        (**(void (***)(AMSCore::LoadNetworkBagResult *))v135)(v135);
      *(_BYTE *)(a1 + 152) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v269);
    v146 = *(_QWORD *)(a1 + 1952);
    *(_QWORD *)(a1 + 64) = v146;
    v147 = a1 + 64;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 1928);
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 1944);
    v148 = *(_QWORD *)(a1 + 1960);
    *(_QWORD *)(a1 + 72) = v148;
    if (v148)
    {
      *(_QWORD *)(v146 + 16) = v147;
      v146 = 0;
      *v131 = v132;
      *v132 = 0;
      *(_QWORD *)(a1 + 1960) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v147;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 1968);
    *(_QWORD *)(a1 + 1968) = 0;
    *(_QWORD *)(a1 + 1976) = 0;
    *(_BYTE *)(a1 + 144) = 0;
    *(_BYTE *)(a1 + 152) = 1;
    *(_QWORD *)(a1 + 1912) = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1944, (unsigned int *)v146);
    v2 = v269;
    MEMORY[0x18D7898AC](v269);
    v116 = 0;
    v149 = 3;
    v3 = (std::runtime_error *)v250;
    if (*(_BYTE *)(a1 + 1064))
    {
      *(_QWORD *)(a1 + 992) = off_1E2521330;
      v150 = *(std::__shared_weak_count **)(a1 + 1056);
      if (v150)
      {
        v151 = (unint64_t *)&v150->__shared_owners_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1024, *(unsigned int **)(a1 + 1032));
      MEMORY[0x18D7898AC](v261);
      v116 = 0;
      v149 = 3;
    }
    if (!*(_BYTE *)(a1 + 592))
    {
LABEL_362:
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
      if (!*(_BYTE *)(a1 + 2320))
        goto LABEL_365;
LABEL_363:
      if (*(char *)(a1 + 2319) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      goto LABEL_365;
    }
LABEL_190:
    v153 = *(std::__shared_weak_count **)(a1 + 584);
    if (v153)
    {
      v154 = (unint64_t *)&v153->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
    if (*(_BYTE *)(a1 + 2320))
      goto LABEL_363;
LABEL_365:
    if (v149)
      goto LABEL_423;
    if (*v266 > 2 || !v116)
      break;
    ++*v266;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v3);
    AMSCore::Logger::log<char [28],int>((uint64_t)v3->__vftable);
    v217 = *(std::__shared_weak_count **)(a1 + 208);
    v4 = v261;
    p_data = (void **)&v256->__r_.__value_.__l.__data_;
    v6 = (void **)&v257->__r_.__value_.__l.__data_;
    if (v217)
    {
      v218 = (unint64_t *)&v217->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    AMSCore::LoadNetworkBagTask::buildStorefront(v8, v5, (char *)(a1 + 1824));
    if (*(char *)(a1 + 2159) < 0)
    {
      std::string::__init_copy_ctor_external(v257, *(const std::string::value_type **)(a1 + 2136), *(_QWORD *)(a1 + 2144));
    }
    else
    {
      *(_OWORD *)&v257->__r_.__value_.__l.__data_ = *(_OWORD *)v251;
      v257->__r_.__value_.__r.__words[2] = *(_QWORD *)(v251 + 16);
    }
    if (*(char *)(a1 + 2183) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 2208), *(const std::string::value_type **)(a1 + 2160), *(_QWORD *)(a1 + 2168));
    }
    else
    {
      *(_OWORD *)(a1 + 2208) = *(_OWORD *)(a1 + 2160);
      *(_QWORD *)(a1 + 2224) = *(_QWORD *)(a1 + 2176);
    }
    *(_BYTE *)(a1 + 2232) = 0;
    *(_BYTE *)(a1 + 2256) = 0;
    if (*(_BYTE *)(a1 + 2320))
    {
      if (*(char *)(a1 + 2319) < 0)
      {
        std::string::__init_copy_ctor_external(v256, *(const std::string::value_type **)(a1 + 2296), *(_QWORD *)(a1 + 2304));
      }
      else
      {
        *(_OWORD *)&v256->__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v256->__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      }
      *(_BYTE *)(a1 + 2256) = 1;
    }
    *v268 = 0;
    v268[1] = 0;
    v268[2] = 0;
    std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v268, *(_QWORD *)(a1 + 1856), *(_QWORD *)(a1 + 1864), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1864) - *(_QWORD *)(a1 + 1856)) >> 3));
    v220 = *(_QWORD *)(a1 + 2672);
    *(_QWORD *)(a1 + 2640) = *(_QWORD *)(a1 + 2664);
    *(_QWORD *)(a1 + 2648) = v220;
    if (v220)
    {
      v221 = (unint64_t *)(v220 + 8);
      do
        v222 = __ldxr(v221);
      while (__stxr(v222 + 1, v221));
    }
    v223 = *(_QWORD *)(a1 + 2688);
    *(_QWORD *)(a1 + 2624) = *(_QWORD *)(a1 + 2680);
    *(_QWORD *)(a1 + 2632) = v223;
    if (v223)
    {
      v224 = (unint64_t *)(v223 + 8);
      do
        v225 = __ldxr(v224);
      while (__stxr(v225 + 1, v224));
    }
    AMSCore::LoadNetworkBagTask::encodeHTTPRequest(v261, (uint64_t)v257, (uint64_t)v256, v268, v254, v255, v262[1]);
    v226 = *(_OWORD *)(a1 + 992);
    *(_OWORD *)(v2 + 784) = v226;
    *(_QWORD *)v261 = 0;
    *((_QWORD *)v261 + 1) = 0;
    if (!atomic_load((unint64_t *)(v226 + 416)))
    {
      *v262 = 0;
      v228 = (unint64_t *)(*(_QWORD *)(a1 + 2696) + 416);
      do
        v229 = __ldaxr(v228);
      while (__stlxr(a1, v228));
      if (!v229)
        return;
    }
  }
  if (!*(_BYTE *)(a1 + 1816))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v270, 0xCEu);
LABEL_407:
    if (*(_BYTE *)(a1 + 152))
    {
      v234 = (AMSCore::LoadNetworkBagResult *)(a1 + 24);
      if (*(_BYTE *)(a1 + 144))
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v234);
      else
        (**(void (***)(AMSCore::LoadNetworkBagResult *))v234)(v234);
      *(_BYTE *)(a1 + 152) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v270);
    v236 = v272;
    v235 = v273;
    *(_QWORD *)(a1 + 64) = v273;
    v237 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v271;
    *(_QWORD *)(a1 + 24) = off_1E2521330;
    *(_QWORD *)(a1 + 56) = v236;
    v238 = v274;
    *(_QWORD *)(a1 + 72) = v274;
    if (v238)
    {
      *(_QWORD *)(v235 + 16) = v237;
      v272 = &v273;
      v273 = 0;
      v274 = 0;
      v235 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v237;
    }
    *(_OWORD *)(a1 + 80) = v275;
    v275 = 0uLL;
    *(_BYTE *)(a1 + 144) = 0;
    *(_BYTE *)(a1 + 152) = 1;
    v270.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v272, (unsigned int *)v235);
    MEMORY[0x18D7898AC](&v270);
    goto LABEL_423;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 1888) + 16))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode>((uint64_t)&v270, 0x137u);
    goto LABEL_407;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v270);
  AMSCore::Logger::log<char [30],std::tuple<std::string,std::string>>((uint64_t)v270.__vftable, v251);
  imp = (std::__shared_weak_count *)v270.__imp_.__imp_;
  if (v270.__imp_.__imp_)
  {
    v231 = (unint64_t *)(v270.__imp_.__imp_ + 8);
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v233 = (AMSCore::LoadNetworkBagResult *)(a1 + 24);
    if (*(_BYTE *)(a1 + 144))
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v233);
    else
      (**(void (***)(AMSCore::LoadNetworkBagResult *))v233)(v233);
    *(_BYTE *)(a1 + 152) = 0;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a1 + 1816))
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a1 + 1848))
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 1824);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 1840);
    *(_QWORD *)(a1 + 1824) = 0;
    *(_QWORD *)(a1 + 1840) = 0;
    *(_QWORD *)(a1 + 1832) = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 1856);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 1872);
  *(_QWORD *)(a1 + 1872) = 0;
  *(_QWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a1 + 1880);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a1 + 1882);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 1888);
  *(_QWORD *)(a1 + 1888) = 0;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 1904);
  *(_BYTE *)(a1 + 144) = 1;
  *(_BYTE *)(a1 + 152) = 1;
LABEL_423:
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v5);
  if (*(char *)(a1 + 2463) < 0)
    operator delete(*(void **)(a1 + 2440));
  *(_QWORD *)(a1 + 2728) = a1;
  *(_QWORD *)(a1 + 200) = v239;
  *(_QWORD *)a1 = 0;
  AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CC15DB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,AMSCore::LoadNetworkBagResult *a21,AMSCore::EncodeHTTPRequestTask::Options *a22,uint64_t a23,uint64_t a24,AMSCore::ExecuteHTTPRequestTask::HandlerType *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,AMSCore::ExecuteHTTPRequestTask::Options *a32,AMSCore::ExecuteHTTPRequestTask::Options *a33,uint64_t a34,AMSCore::EncodeHTTPRequestTask::Result *a35,uint64_t a36)
{
  uint64_t v36;

  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(a21);
  if (*(char *)(v36 + 2463) < 0)
    operator delete(*(void **)(v36 + 2440));
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18CC16034()
{
  __cxa_end_catch();
  JUMPOUT(0x18CC15BE8);
}

void AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(char *__p)
{
  void **v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  AMSCore::LoadNetworkBagResult *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;

  v2 = (void **)(__p + 200);
  if (!*(_QWORD *)__p)
    goto LABEL_66;
  if (!__p[2740])
  {
    v16 = *((_QWORD *)__p + 338);
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        v19 = (std::__shared_weak_count *)*((_QWORD *)__p + 338);
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)__p + 125);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)__p + 329);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)__p + 331);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = *((_QWORD *)__p + 317);
    if (v29)
    {
      v30 = *((_QWORD *)__p + 318);
      v31 = (void *)*((_QWORD *)__p + 317);
      if (v30 != v29)
      {
        do
        {
          if (*(char *)(v30 - 1) < 0)
            operator delete(*(void **)(v30 - 24));
          v30 -= 24;
        }
        while (v30 != v29);
        v31 = (void *)*((_QWORD *)__p + 317);
      }
      *((_QWORD *)__p + 318) = v29;
      operator delete(v31);
    }
    if (__p[2256] && __p[2255] < 0)
      operator delete(*((void **)__p + 279));
    if (__p[2231] < 0)
    {
      operator delete(*((void **)__p + 276));
      if ((__p[2207] & 0x80000000) == 0)
      {
LABEL_61:
        if (!__p[2320])
          goto LABEL_64;
        goto LABEL_62;
      }
    }
    else if ((__p[2207] & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(*((void **)__p + 273));
    if (!__p[2320])
      goto LABEL_64;
LABEL_62:
    if (__p[2319] < 0)
      operator delete(*((void **)__p + 287));
    goto LABEL_64;
  }
  v3 = *((_QWORD *)__p + 340);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 340);
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)__p + 240);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1368));
  v10 = (std::__shared_weak_count *)*((_QWORD *)__p + 123);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 75);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1200));
  if (__p[592])
  {
    v13 = (std::__shared_weak_count *)*((_QWORD *)__p + 73);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v2);
    if (!__p[2320])
      goto LABEL_64;
    goto LABEL_62;
  }
  (*(void (**)(void **))*v2)(v2);
  if (__p[2320])
    goto LABEL_62;
LABEL_64:
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(__p + 1792));
  if (__p[2463] < 0)
    operator delete(*((void **)__p + 305));
LABEL_66:
  v32 = (char *)*((_QWORD *)__p + 24);
  if (v32 == __p + 168)
  {
    v33 = 4;
    v32 = __p + 168;
  }
  else
  {
    if (!v32)
      goto LABEL_71;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_71:
  if (__p[152])
  {
    v34 = (AMSCore::LoadNetworkBagResult *)(__p + 24);
    if (__p[144])
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v34);
    else
      (**(void (***)(AMSCore::LoadNetworkBagResult *))v34)(v34);
  }
  do
  {
    v35 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v36)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  if (!__p[1784])
    goto LABEL_84;
  if ((__p[1783] & 0x80000000) == 0)
  {
    if (__p[1736])
      goto LABEL_81;
LABEL_84:
    (**((void (***)(char *))__p + 208))(__p + 1664);
    v37 = *((_QWORD *)__p + 336);
    if (!v37)
      goto LABEL_89;
    goto LABEL_85;
  }
  operator delete(*((void **)__p + 220));
  if (!__p[1736])
    goto LABEL_84;
LABEL_81:
  v37 = *((_QWORD *)__p + 336);
  if (!v37)
    goto LABEL_89;
LABEL_85:
  v38 = (unint64_t *)(v37 + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    v40 = (std::__shared_weak_count *)*((_QWORD *)__p + 336);
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_89:
  v41 = *((_QWORD *)__p + 334);
  if (!v41)
    goto LABEL_93;
  v42 = (unint64_t *)(v41 + 8);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (v43)
  {
LABEL_93:
    if ((__p[2183] & 0x80000000) == 0)
      goto LABEL_94;
LABEL_97:
    operator delete(*((void **)__p + 270));
    if ((__p[2159] & 0x80000000) == 0)
      goto LABEL_95;
LABEL_98:
    operator delete(*((void **)__p + 267));
    goto LABEL_95;
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)__p + 334);
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if (__p[2183] < 0)
    goto LABEL_97;
LABEL_94:
  if (__p[2159] < 0)
    goto LABEL_98;
LABEL_95:
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [28],int>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Loading the bag. attempt = ", 27);
    std::ostream::operator<<();
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "bag", 3, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CC1674C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

AMSCore::ExecuteHTTPRequestTask::Options *AMSCore::ExecuteHTTPRequestTask::Options::Options(AMSCore::ExecuteHTTPRequestTask::Options *this, const AMSCore::ExecuteHTTPRequestTask::Options *a2)
{
  uint64_t *v4;
  const AMSCore::ExecuteHTTPRequestTask::Options **v5;
  const AMSCore::ExecuteHTTPRequestTask::Options *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  const AMSCore::ExecuteHTTPRequestTask::Options *v14;
  const AMSCore::ExecuteHTTPRequestTask::Options **v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;
  const AMSCore::ExecuteHTTPRequestTask::Options *v19;
  char v21[2];

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  v5 = (const AMSCore::ExecuteHTTPRequestTask::Options **)((char *)a2 + 8);
  v6 = *(const AMSCore::ExecuteHTTPRequestTask::Options **)a2;
  if (*(const AMSCore::ExecuteHTTPRequestTask::Options **)a2 != (const AMSCore::ExecuteHTTPRequestTask::Options *)((char *)a2 + 8))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)this, v4, (const void **)v6 + 4, (__int128 *)v6 + 2);
      v14 = (const AMSCore::ExecuteHTTPRequestTask::Options *)*((_QWORD *)v6 + 1);
      if (v14)
      {
        do
        {
          v15 = (const AMSCore::ExecuteHTTPRequestTask::Options **)v14;
          v14 = *(const AMSCore::ExecuteHTTPRequestTask::Options **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (const AMSCore::ExecuteHTTPRequestTask::Options **)*((_QWORD *)v6 + 2);
          v16 = *v15 == v6;
          v6 = (const AMSCore::ExecuteHTTPRequestTask::Options *)v15;
        }
        while (!v16);
      }
      v6 = (const AMSCore::ExecuteHTTPRequestTask::Options *)v15;
    }
    while (v15 != v5);
  }
  v7 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 6) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    if (*((char *)a2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
    }
    else
    {
      v13 = *(_OWORD *)((char *)a2 + 56);
      *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
      *(_OWORD *)((char *)this + 56) = v13;
    }
    *((_BYTE *)this + 80) = 1;
  }
  *((_BYTE *)this + 88) = 0;
  *((_DWORD *)this + 26) = -1;
  v17 = *((unsigned int *)a2 + 26);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *, char *, char *))off_1E253D160[v17])(v21, (char *)this + 88, (char *)a2 + 88);
    *((_DWORD *)this + 26) = v17;
  }
  v18 = *((_OWORD *)a2 + 7);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_OWORD *)this + 7) = v18;
  v19 = (const AMSCore::ExecuteHTTPRequestTask::Options *)*((_QWORD *)a2 + 20);
  if (v19)
  {
    if (v19 == (const AMSCore::ExecuteHTTPRequestTask::Options *)((char *)a2 + 136))
    {
      *((_QWORD *)this + 20) = (char *)this + 136;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 20) + 24))(*((_QWORD *)a2 + 20));
      return this;
    }
    v19 = (const AMSCore::ExecuteHTTPRequestTask::Options *)(*(uint64_t (**)(const AMSCore::ExecuteHTTPRequestTask::Options *))(*(_QWORD *)v19 + 16))(v19);
  }
  *((_QWORD *)this + 20) = v19;
  return this;
}

void sub_18CC1696C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  if (*(_BYTE *)(v1 + 80))
  {
    if (*(char *)(v1 + 79) < 0)
      operator delete(*v4);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v3);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v1, *(unsigned int **)(v1 + 8));
  _Unwind_Resume(a1);
}

void AMSCore::ExecuteHTTPRequestTask::Options::~Options(AMSCore::ExecuteHTTPRequestTask::Options *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;

  v2 = (char *)this + 136;
  v3 = (char *)*((_QWORD *)this + 20);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = *((unsigned int *)this + 26);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E253D230[v5])(&v12, (char *)this + 88);
  *((_DWORD *)this + 26) = -1;
  if (*((_BYTE *)this + 80) && *((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this, *((unsigned int **)this + 1));
}

void AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_1::operator()(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  AMSCore::ExecuteHTTPRequestTask::Options *v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const std::runtime_error *v32;
  char v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  std::runtime_error v75;
  __int128 v76;
  char *v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  int v81;
  std::__shared_weak_count *imp;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned int *v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::runtime_error *v102;
  char *v103;
  void **v104;
  std::runtime_error *v105;
  _BYTE *v106;
  char *v107;
  std::runtime_error v108;
  __int128 v109;
  __int128 *v110;
  __int128 v111;
  __int128 v112;
  std::runtime_error v113;
  __int128 v114;
  __int128 *v115;
  __int128 v116;
  __int128 v117;
  std::runtime_error v118;
  __int128 v119;
  __int128 *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  char v125;
  __int128 v126;
  _BYTE v127[32];
  __int128 v128;
  _BYTE v129[32];
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD v140[2];
  __int128 v141;
  uint64_t v142;
  char v143;
  char v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v6 = (char *)operator new(0x748uLL);
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v6 + 704), a2);
  *(_OWORD *)(v6 + 1080) = *(_OWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  *((_QWORD *)v6 + 186) = *(_QWORD *)a3;
  v7 = v6 + 1496;
  v8 = (_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 8);
  *((_QWORD *)v6 + 187) = v9;
  v10 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)v6 + 188) = v10;
  if (v10)
  {
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)a3 = v8;
    *v8 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *((_QWORD *)v6 + 186) = v7;
  }
  *(_OWORD *)(v6 + 1512) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)(v6 + 1528) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v11 = v6 + 1544;
  v6[1544] = 0;
  v6[1568] = 0;
  if (*(_BYTE *)(a3 + 80))
  {
    *v11 = *(_OWORD *)(a3 + 56);
    *((_QWORD *)v6 + 195) = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    v6[1568] = 1;
  }
  v6[1576] = 0;
  *((_DWORD *)v6 + 398) = -1;
  v12 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(std::runtime_error *, char *, uint64_t))off_1E253CA98[v12])(&v118, v6 + 1576, a3 + 88);
    *((_DWORD *)v6 + 398) = v12;
  }
  v106 = v6 + 1856;
  v107 = v6 + 16;
  v104 = (void **)(v6 + 1096);
  v13 = v6 + 1080;
  v14 = v6 + 1512;
  v105 = (std::runtime_error *)(v6 + 280);
  v15 = v6 + 1528;
  v17 = (_QWORD *)(a3 + 160);
  v16 = *(_QWORD *)(a3 + 160);
  *((_OWORD *)v6 + 100) = *(_OWORD *)(a3 + 112);
  *((_DWORD *)v6 + 404) = *(_DWORD *)(a3 + 128);
  v103 = v6 + 1624;
  if (!v16)
  {
    v17 = v6 + 1648;
    goto LABEL_12;
  }
  if (v16 != a3 + 136)
  {
    *((_QWORD *)v6 + 206) = v16;
LABEL_12:
    *v17 = 0;
    goto LABEL_14;
  }
  *((_QWORD *)v6 + 206) = v103;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  do
LABEL_14:
    v18 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
  while (__stlxr(v18 + 1, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  *((_QWORD *)v6 + 30) = 0;
  v6[24] = 0;
  v102 = (std::runtime_error *)(v6 + 24);
  v6[232] = 0;
  *((_QWORD *)v6 + 34) = 0;
  v19 = (_QWORD *)operator new();
  *v19 = &off_1E2523688;
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = v107;
  *(_QWORD *)&v20 = v6 + 16;
  *((_QWORD *)&v20 + 1) = v19;
  *a1 = v20;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v104, (uint64_t)(v6 + 704));
  *((_OWORD *)v6 + 92) = *v13;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v6 + 136) = 0;
  *((_QWORD *)v6 + 207) = *((_QWORD *)v6 + 186);
  v21 = v6 + 1664;
  v22 = *((_QWORD *)v6 + 187);
  *((_QWORD *)v6 + 208) = v22;
  v23 = *((_QWORD *)v6 + 188);
  *((_QWORD *)v6 + 209) = v23;
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v21;
    *((_QWORD *)v6 + 186) = v7;
    *v7 = 0;
    *((_QWORD *)v6 + 188) = 0;
    v24 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v6 + 1656);
  }
  else
  {
    v24 = (AMSCore::ExecuteHTTPRequestTask::Options *)(v6 + 1656);
    *((_QWORD *)v6 + 207) = v21;
  }
  *((_OWORD *)v6 + 105) = *v14;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v6 + 190) = 0;
  *((_OWORD *)v6 + 106) = *v15;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v6 + 192) = 0;
  v6[1712] = 0;
  v6[1736] = 0;
  if (v6[1568])
  {
    *((_OWORD *)v6 + 107) = *v11;
    *((_QWORD *)v6 + 216) = *((_QWORD *)v6 + 195);
    *((_QWORD *)v6 + 194) = 0;
    *((_QWORD *)v6 + 195) = 0;
    *(_QWORD *)v11 = 0;
    v6[1736] = 1;
  }
  v6[1744] = 0;
  *((_DWORD *)v6 + 440) = -1;
  v25 = *((unsigned int *)v6 + 398);
  if ((_DWORD)v25 != -1)
  {
    ((void (*)(std::runtime_error *, char *, char *))off_1E253CA98[v25])(&v118, v6 + 1744, v6 + 1576);
    *((_DWORD *)v6 + 440) = v25;
  }
  *(_OWORD *)(v6 + 1768) = *((_OWORD *)v6 + 100);
  *((_DWORD *)v6 + 446) = *((_DWORD *)v6 + 404);
  v26 = (char *)*((_QWORD *)v6 + 206);
  if (v26)
  {
    if (v26 == v103)
    {
      *((_QWORD *)v6 + 227) = v6 + 1792;
      (*(void (**)(void))(*((_QWORD *)v6 + 203) + 24))();
    }
    else
    {
      *((_QWORD *)v6 + 227) = v26;
      *((_QWORD *)v6 + 206) = 0;
    }
  }
  else
  {
    *((_QWORD *)v6 + 227) = 0;
  }
  AMSCore::ExecuteHTTPRequestTask::perform((std::runtime_error *)v6 + 114, (uint64_t)v104, (uint64_t)v24);
  v27 = *((_OWORD *)v6 + 114);
  *((_OWORD *)v6 + 115) = v27;
  *((_QWORD *)v6 + 228) = 0;
  *((_QWORD *)v6 + 229) = 0;
  if (atomic_load((unint64_t *)(v27 + 440)))
    goto LABEL_31;
  *v106 = 0;
  v29 = (unint64_t *)(*((_QWORD *)v6 + 230) + 440);
  do
    v30 = __ldaxr(v29);
  while (__stlxr((unint64_t)v6, v29));
  if (v30)
  {
LABEL_31:
    v31 = *((_QWORD *)v6 + 230);
    if (*(_BYTE *)(v31 + 432))
    {
      v32 = (const std::runtime_error *)(v31 + 8);
      v33 = *(_BYTE *)(v31 + 424);
      if (v33)
      {
        *v105 = *(std::runtime_error *)(v31 + 8);
        v32->__vftable = 0;
        *(_QWORD *)(v31 + 16) = 0;
        *((_QWORD *)v6 + 37) = *(_QWORD *)(v31 + 24);
        v34 = v6 + 304;
        v35 = (_QWORD *)(v31 + 32);
        v36 = *(_QWORD *)(v31 + 32);
        *((_QWORD *)v6 + 38) = v36;
        v37 = *(_QWORD *)(v31 + 40);
        *((_QWORD *)v6 + 39) = v37;
        if (v37)
        {
          *(_QWORD *)(v36 + 16) = v34;
          *(_QWORD *)(v31 + 24) = v35;
          *v35 = 0;
          *(_QWORD *)(v31 + 40) = 0;
        }
        else
        {
          *((_QWORD *)v6 + 37) = v34;
        }
        *((_OWORD *)v6 + 20) = *(_OWORD *)(v31 + 48);
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 56) = 0;
        *((_OWORD *)v6 + 21) = *(_OWORD *)(v31 + 64);
        *(_QWORD *)(v31 + 64) = 0;
        *(_QWORD *)(v31 + 72) = 0;
        v6[352] = 0;
        v6[376] = 0;
        if (*(_BYTE *)(v31 + 104))
        {
          v42 = *(_OWORD *)(v31 + 80);
          *((_QWORD *)v6 + 46) = *(_QWORD *)(v31 + 96);
          *((_OWORD *)v6 + 22) = v42;
          *(_QWORD *)(v31 + 88) = 0;
          *(_QWORD *)(v31 + 96) = 0;
          *(_QWORD *)(v31 + 80) = 0;
          v6[376] = 1;
        }
        v6[384] = 0;
        *((_DWORD *)v6 + 100) = -1;
        v43 = *(unsigned int *)(v31 + 128);
        if ((_DWORD)v43 != -1)
        {
          ((void (*)(std::runtime_error *, char *, uint64_t))off_1E253CA98[v43])(&v118, v6 + 384, v31 + 112);
          *((_DWORD *)v6 + 100) = v43;
        }
        v44 = *(_OWORD *)(v31 + 136);
        *((_DWORD *)v6 + 106) = *(_DWORD *)(v31 + 152);
        *(_OWORD *)(v6 + 408) = v44;
        v45 = (_QWORD *)(v31 + 184);
        v46 = *(_QWORD *)(v31 + 184);
        if (v46)
        {
          if (v46 == v31 + 160)
          {
            *((_QWORD *)v6 + 57) = v6 + 432;
            (*(void (**)(_QWORD))(*(_QWORD *)*v45 + 24))(*v45);
          }
          else
          {
            *((_QWORD *)v6 + 57) = v46;
            *v45 = 0;
          }
        }
        else
        {
          *((_QWORD *)v6 + 57) = 0;
        }
        *((_OWORD *)v6 + 29) = *(_OWORD *)(v31 + 192);
        *(_QWORD *)(v31 + 192) = 0;
        *(_QWORD *)(v31 + 200) = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v105, v32);
        *((_QWORD *)v6 + 35) = MEMORY[0x1E0DE4F90] + 16;
        *(_OWORD *)(v6 + 296) = *(_OWORD *)(v31 + 24);
        *((_QWORD *)v6 + 35) = off_1E2521330;
        *((_QWORD *)v6 + 39) = *(_QWORD *)(v31 + 40);
        v38 = v6 + 320;
        v39 = (_QWORD *)(v31 + 48);
        v40 = *(_QWORD *)(v31 + 48);
        *((_QWORD *)v6 + 40) = v40;
        v41 = *(_QWORD *)(v31 + 56);
        *((_QWORD *)v6 + 41) = v41;
        if (v41)
        {
          *(_QWORD *)(v40 + 16) = v38;
          *(_QWORD *)(v31 + 40) = v39;
          *v39 = 0;
          *(_QWORD *)(v31 + 56) = 0;
        }
        else
        {
          *((_QWORD *)v6 + 39) = v38;
        }
        *((_OWORD *)v6 + 21) = *(_OWORD *)(v31 + 64);
        *(_QWORD *)(v31 + 64) = 0;
        *(_QWORD *)(v31 + 72) = 0;
        *((_QWORD *)v6 + 35) = &off_1E2521420;
        v6[352] = 0;
        v6[376] = 0;
        if (*(_BYTE *)(v31 + 104))
        {
          v47 = *(_OWORD *)(v31 + 80);
          *((_QWORD *)v6 + 46) = *(_QWORD *)(v31 + 96);
          *((_OWORD *)v6 + 22) = v47;
          *(_QWORD *)(v31 + 88) = 0;
          *(_QWORD *)(v31 + 96) = 0;
          *(_QWORD *)(v31 + 80) = 0;
          v6[376] = 1;
        }
        v48 = *(_OWORD *)(v31 + 128);
        *((_OWORD *)v6 + 24) = *(_OWORD *)(v31 + 112);
        *((_OWORD *)v6 + 25) = v48;
        v49 = *(_OWORD *)(v31 + 144);
        v50 = *(_OWORD *)(v31 + 160);
        v51 = *(_OWORD *)(v31 + 176);
        *(_OWORD *)(v6 + 457) = *(_OWORD *)(v31 + 185);
        *((_OWORD *)v6 + 27) = v50;
        *((_OWORD *)v6 + 28) = v51;
        *((_OWORD *)v6 + 26) = v49;
        *((_QWORD *)v6 + 61) = 0;
        *((_QWORD *)v6 + 62) = 0;
        *((_QWORD *)v6 + 60) = 0;
        *((_OWORD *)v6 + 30) = *(_OWORD *)(v31 + 208);
        *((_QWORD *)v6 + 62) = *(_QWORD *)(v31 + 224);
        *(_QWORD *)(v31 + 216) = 0;
        *(_QWORD *)(v31 + 224) = 0;
        *(_QWORD *)(v31 + 208) = 0;
        v52 = *(_OWORD *)(v31 + 248);
        *(_OWORD *)(v6 + 504) = *(_OWORD *)(v31 + 232);
        *(_OWORD *)(v6 + 520) = v52;
        v53 = *(_OWORD *)(v31 + 264);
        v54 = *(_OWORD *)(v31 + 280);
        v55 = *(_OWORD *)(v31 + 312);
        *(_OWORD *)(v6 + 568) = *(_OWORD *)(v31 + 296);
        *(_OWORD *)(v6 + 584) = v55;
        *(_OWORD *)(v6 + 536) = v53;
        *(_OWORD *)(v6 + 552) = v54;
        v56 = *(_OWORD *)(v31 + 328);
        v57 = *(_OWORD *)(v31 + 344);
        v58 = *(_OWORD *)(v31 + 360);
        *(_OWORD *)(v6 + 642) = *(_OWORD *)(v31 + 370);
        *(_OWORD *)(v6 + 616) = v57;
        *(_OWORD *)(v6 + 632) = v58;
        *(_OWORD *)(v6 + 600) = v56;
        v6[664] = 0;
        v6[688] = 0;
        if (*(_BYTE *)(v31 + 416))
        {
          v59 = *(_OWORD *)(v31 + 392);
          *((_QWORD *)v6 + 85) = *(_QWORD *)(v31 + 408);
          *(_OWORD *)(v6 + 664) = v59;
          *(_QWORD *)(v31 + 400) = 0;
          *(_QWORD *)(v31 + 408) = 0;
          *(_QWORD *)(v31 + 392) = 0;
          v6[688] = 1;
        }
      }
      v6[696] = v33;
      v60 = *((_QWORD *)v6 + 231);
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          v63 = (std::__shared_weak_count *)*((_QWORD *)v6 + 231);
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v64 = (std::__shared_weak_count *)*((_QWORD *)v6 + 229);
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(p_shared_owners);
        while (__stlxr(v66 - 1, p_shared_owners));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v24);
      v67 = (std::__shared_weak_count *)*((_QWORD *)v6 + 185);
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v104);
      if (v6[696])
      {
        v118 = *v105;
        v105->__vftable = 0;
        *((_QWORD *)v6 + 36) = 0;
        v70 = *((_QWORD *)v6 + 38);
        *(_QWORD *)&v119 = *((_QWORD *)v6 + 37);
        *((_QWORD *)&v119 + 1) = v70;
        v120 = (__int128 *)*((_QWORD *)v6 + 39);
        if (v120)
        {
          *(_QWORD *)(v70 + 16) = (char *)&v119 + 8;
          *((_QWORD *)v6 + 37) = v6 + 304;
          *((_QWORD *)v6 + 38) = 0;
          *((_QWORD *)v6 + 39) = 0;
        }
        else
        {
          *(_QWORD *)&v119 = (char *)&v119 + 8;
        }
        v72 = *((_OWORD *)v6 + 21);
        v121 = *((_OWORD *)v6 + 20);
        *((_QWORD *)v6 + 40) = 0;
        *((_QWORD *)v6 + 41) = 0;
        v122 = v72;
        *((_QWORD *)v6 + 42) = 0;
        *((_QWORD *)v6 + 43) = 0;
        LOBYTE(v123) = 0;
        v125 = 0;
        if (v6[376])
        {
          v123 = *((_OWORD *)v6 + 22);
          v124 = *((_QWORD *)v6 + 46);
          *((_QWORD *)v6 + 45) = 0;
          *((_QWORD *)v6 + 46) = 0;
          *((_QWORD *)v6 + 44) = 0;
          v125 = 1;
        }
        LOBYTE(v126) = 0;
        *(_DWORD *)v127 = -1;
        v73 = *((unsigned int *)v6 + 100);
        if ((_DWORD)v73 != -1)
        {
          ((void (*)(std::runtime_error *, __int128 *, char *))off_1E253CA98[v73])(&v113, &v126, v6 + 384);
          *(_DWORD *)v127 = v73;
        }
        *(_DWORD *)&v127[24] = *((_DWORD *)v6 + 106);
        *(_OWORD *)&v127[8] = *(_OWORD *)(v6 + 408);
        v74 = (char *)*((_QWORD *)v6 + 57);
        if (v74)
        {
          if (v74 == v6 + 432)
          {
            *(_QWORD *)&v129[8] = &v128;
            (*(void (**)(char *, __int128 *))(*((_QWORD *)v6 + 54) + 24))(v6 + 432, &v128);
          }
          else
          {
            *(_QWORD *)&v129[8] = *((_QWORD *)v6 + 57);
            *((_QWORD *)v6 + 57) = 0;
          }
        }
        else
        {
          *(_QWORD *)&v129[8] = 0;
        }
        *(_OWORD *)&v129[16] = *((_OWORD *)v6 + 29);
        *((_QWORD *)v6 + 58) = 0;
        *((_QWORD *)v6 + 59) = 0;
        std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v102);
        v75 = v118;
        v76 = v119;
        *((_QWORD *)v6 + 6) = *((_QWORD *)&v119 + 1);
        v77 = v6 + 48;
        *(std::runtime_error *)(v6 + 24) = v75;
        v118.__vftable = 0;
        v118.__imp_.__imp_ = 0;
        *((_QWORD *)v6 + 5) = v76;
        v78 = v120;
        *((_QWORD *)v6 + 7) = v120;
        if (v78)
        {
          *(_QWORD *)(*((_QWORD *)&v76 + 1) + 16) = v77;
          *(_QWORD *)&v119 = (char *)&v119 + 8;
          *((_QWORD *)&v119 + 1) = 0;
          v120 = 0;
        }
        else
        {
          *((_QWORD *)v6 + 5) = v77;
        }
        v79 = v121;
        v6[96] = 0;
        v121 = 0uLL;
        v80 = v122;
        *((_OWORD *)v6 + 4) = v79;
        *((_OWORD *)v6 + 5) = v80;
        v122 = 0uLL;
        v6[120] = 0;
        if (v125)
        {
          *((_OWORD *)v6 + 6) = v123;
          *((_QWORD *)v6 + 14) = v124;
          v124 = 0;
          v123 = 0uLL;
          v6[120] = 1;
        }
        v6[128] = 0;
        *((_DWORD *)v6 + 36) = -1;
        v81 = *(_DWORD *)v127;
        if (*(_DWORD *)v127 != -1)
        {
          ((void (*)(std::runtime_error *))off_1E253CA98[*(unsigned int *)v127])(&v113);
          *((_DWORD *)v6 + 36) = v81;
        }
        *(_OWORD *)(v6 + 152) = *(_OWORD *)&v127[8];
        *((_DWORD *)v6 + 42) = *(_DWORD *)&v127[24];
        if (*(_QWORD *)&v129[8])
        {
          if (*(__int128 **)&v129[8] == &v128)
          {
            *((_QWORD *)v6 + 25) = v6 + 176;
            (*(void (**)(__int128 *))(v128 + 24))(&v128);
          }
          else
          {
            *((_QWORD *)v6 + 25) = *(_QWORD *)&v129[8];
            *(_QWORD *)&v129[8] = 0;
          }
        }
        else
        {
          *((_QWORD *)v6 + 25) = 0;
        }
        *((_OWORD *)v6 + 13) = *(_OWORD *)&v129[16];
        *(_QWORD *)&v129[16] = 0;
        *(_QWORD *)&v129[24] = 0;
        v6[224] = 1;
        v6[232] = 1;
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v119);
        imp = (std::__shared_weak_count *)v118.__imp_.__imp_;
        if (v118.__imp_.__imp_)
        {
          v83 = (unint64_t *)(v118.__imp_.__imp_ + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        std::runtime_error::runtime_error(&v118, v105);
        v119 = *(_OWORD *)(v6 + 296);
        v71 = *((_QWORD *)v6 + 40);
        v120 = (__int128 *)*((_QWORD *)v6 + 39);
        *(_QWORD *)&v121 = v71;
        *((_QWORD *)&v121 + 1) = *((_QWORD *)v6 + 41);
        if (*((_QWORD *)&v121 + 1))
        {
          *(_QWORD *)(v71 + 16) = &v121;
          *((_QWORD *)v6 + 39) = v6 + 320;
          *((_QWORD *)v6 + 40) = 0;
          *((_QWORD *)v6 + 41) = 0;
        }
        else
        {
          v120 = &v121;
        }
        v122 = *((_OWORD *)v6 + 21);
        *((_QWORD *)v6 + 42) = 0;
        *((_QWORD *)v6 + 43) = 0;
        v118.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
        LOBYTE(v123) = 0;
        v125 = 0;
        if (v6[376])
        {
          v123 = *((_OWORD *)v6 + 22);
          v124 = *((_QWORD *)v6 + 46);
          *((_QWORD *)v6 + 45) = 0;
          *((_QWORD *)v6 + 46) = 0;
          *((_QWORD *)v6 + 44) = 0;
          v125 = 1;
        }
        v85 = *((_OWORD *)v6 + 27);
        *(_OWORD *)&v127[16] = *((_OWORD *)v6 + 26);
        v128 = v85;
        *(_OWORD *)v129 = *((_OWORD *)v6 + 28);
        v86 = *((_OWORD *)v6 + 25);
        v126 = *((_OWORD *)v6 + 24);
        *(_OWORD *)v127 = v86;
        *(_OWORD *)&v129[9] = *(_OWORD *)(v6 + 457);
        v130 = *((_OWORD *)v6 + 30);
        v131 = *((_QWORD *)v6 + 62);
        *((_QWORD *)v6 + 60) = 0;
        *((_QWORD *)v6 + 61) = 0;
        *((_QWORD *)v6 + 62) = 0;
        *(_OWORD *)((char *)v140 + 10) = *(_OWORD *)(v6 + 642);
        v87 = *(_OWORD *)(v6 + 616);
        v138 = *(_OWORD *)(v6 + 600);
        v139 = v87;
        v140[0] = *(_OWORD *)(v6 + 632);
        v88 = *(_OWORD *)(v6 + 552);
        v134 = *(_OWORD *)(v6 + 536);
        v135 = v88;
        v89 = *(_OWORD *)(v6 + 584);
        v136 = *(_OWORD *)(v6 + 568);
        v137 = v89;
        v90 = *(_OWORD *)(v6 + 520);
        v132 = *(_OWORD *)(v6 + 504);
        v133 = v90;
        LOBYTE(v141) = 0;
        v143 = 0;
        if (v6[688])
        {
          v142 = *((_QWORD *)v6 + 85);
          v141 = *(_OWORD *)(v6 + 664);
          *((_QWORD *)v6 + 85) = 0;
          *((_QWORD *)v6 + 83) = 0;
          *((_QWORD *)v6 + 84) = 0;
          v143 = 1;
        }
        v144 = 1;
        std::runtime_error::runtime_error(&v113, &v118);
        v114 = v119;
        v113.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v115 = v120;
        v116 = v121;
        if (*((_QWORD *)&v121 + 1))
        {
          *(_QWORD *)(v121 + 16) = &v116;
          v120 = &v121;
          v121 = 0uLL;
        }
        else
        {
          v115 = &v116;
        }
        v117 = v122;
        v122 = 0uLL;
        std::runtime_error::runtime_error(&v108, &v113);
        v109 = v114;
        v108.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v91 = (unsigned int *)v116;
        v110 = v115;
        v111 = v116;
        if (*((_QWORD *)&v116 + 1))
        {
          *(_QWORD *)(v116 + 16) = &v111;
          v91 = 0;
          v115 = &v116;
          v116 = 0uLL;
        }
        else
        {
          v110 = &v111;
        }
        v112 = v117;
        v117 = 0uLL;
        v113.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v91);
        MEMORY[0x18D7898AC](&v113);
        std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v102);
        std::runtime_error::runtime_error(v102, &v108);
        v93 = v110;
        v92 = v111;
        *((_QWORD *)v6 + 8) = v111;
        v94 = v6 + 64;
        *(_OWORD *)(v6 + 40) = v109;
        *((_QWORD *)v6 + 3) = off_1E2521330;
        *((_QWORD *)v6 + 7) = v93;
        v95 = *((_QWORD *)&v111 + 1);
        *((_QWORD *)v6 + 9) = *((_QWORD *)&v111 + 1);
        if (v95)
        {
          *(_QWORD *)(v92 + 16) = v94;
          v92 = 0;
          v110 = &v111;
          v111 = 0uLL;
        }
        else
        {
          *((_QWORD *)v6 + 7) = v94;
        }
        *((_OWORD *)v6 + 5) = v112;
        v112 = 0uLL;
        v6[224] = 0;
        v6[232] = 1;
        v108.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v110, (unsigned int *)v92);
        MEMORY[0x18D7898AC](&v108);
        if (v144)
          AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v118);
      }
      if (v6[696])
      {
        v96 = (std::__shared_weak_count *)*((_QWORD *)v6 + 59);
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v6 + 296));
        v99 = (std::__shared_weak_count *)*((_QWORD *)v6 + 36);
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v105->~runtime_error)(v105);
      }
      *((_QWORD *)v6 + 35) = v107;
      *(_QWORD *)v6 = 0;
      *v106 = 1;
      AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v105);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_18CC179DC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x18CC179E4);
  __cxa_end_catch();
  JUMPOUT(0x18CC17938);
}

void AMSCore::ExecuteHTTPRequestTask::HandlerType::~HandlerType(AMSCore::ExecuteHTTPRequestTask::HandlerType *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, AMSCore::ExecuteHTTPRequestTask::HandlerType *))off_1E253D230[v2])(&v3, this);
  *((_DWORD *)this + 4) = -1;
}

void AMSCore::EncodeHTTPRequestTask::Result::~Result(AMSCore::EncodeHTTPRequestTask::Result *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)this);
}

void std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_impl<char const* const&,AMSCore::HTTPResponse::StatusCode>(uint64_t **a1, unsigned __int16 a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  void **v7;
  uint64_t *v8;
  _QWORD *v9;
  const void *v10;
  int v11;
  const void *v12;
  unint64_t v13;
  size_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  int v18;
  char v19;

  v4 = operator new(0x58uLL);
  v5 = (uint64_t *)(a1 + 1);
  v6 = a1[1];
  v4[4] = 0x65646F4370747468;
  v7 = (void **)(v4 + 4);
  *((_BYTE *)v4 + 55) = 8;
  *((_BYTE *)v4 + 40) = 0;
  v4[7] = a2;
  *((_DWORD *)v4 + 20) = 3;
  if (v6)
  {
    while (1)
    {
      v8 = v6;
      v9 = v6 + 4;
      v10 = (const void *)v6[4];
      v11 = *((char *)v9 + 23);
      if (v11 >= 0)
        v12 = v9;
      else
        v12 = v10;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)v9 + 23);
      else
        v13 = v9[1];
      if (v13 >= 8)
        v14 = 8;
      else
        v14 = v13;
      v15 = memcmp(v7, v12, v14);
      if (v15)
      {
        if (v15 < 0)
          goto LABEL_3;
LABEL_17:
        v16 = memcmp(v12, v7, v14);
        if (v16)
        {
          if ((v16 & 0x80000000) == 0)
            goto LABEL_27;
        }
        else if (v13 >= 8)
        {
LABEL_27:
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v19, v4 + 7);
          v18 = *((char *)v4 + 55);
          *((_DWORD *)v4 + 20) = -1;
          if (v18 < 0)
            operator delete(*v7);
          operator delete(v4);
          return;
        }
        v6 = (uint64_t *)v8[1];
        if (!v6)
        {
          v5 = v8 + 1;
          goto LABEL_24;
        }
      }
      else
      {
        if (v13 <= 8)
          goto LABEL_17;
LABEL_3:
        v6 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_24;
      }
    }
  }
  v8 = (uint64_t *)(a1 + 1);
LABEL_24:
  *v4 = 0;
  v4[1] = 0;
  v4[2] = v8;
  *v5 = (uint64_t)v4;
  v17 = (uint64_t *)**a1;
  if (v17)
  {
    *a1 = v17;
    v4 = (_QWORD *)*v5;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[33],AMSCore::HTTPResponse::StatusCode>(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t v19;
  std::system_error v20;
  unsigned int **v21;
  unsigned int *v22;
  uint64_t v23;
  __int128 v24;
  std::string __what_arg;
  uint64_t v26;
  _QWORD v27[8];
  __int128 __p;
  __int128 v29;
  int v30;
  uint64_t v31[20];
  std::error_code v32;

  v5 = a3 + 1;
  v6 = a3[1];
  v17 = (unsigned int **)*a3;
  v18 = (unsigned int *)v6;
  v19 = a3[2];
  if (v19)
  {
    *(_QWORD *)(v6 + 16) = &v18;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v17 = &v18;
  }
  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31[0] = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v10;
  *(_QWORD *)((char *)&v27[-1] + *(_QWORD *)(v10 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v12, v27);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v26 = v7 + 24;
  v31[0] = v8;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v29 = 0u;
  v30 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Bag request failed with status: ", 32);
  std::ostream::operator<<();
  std::stringbuf::str[abi:fe180100]((uint64_t)v27, &__what_arg);
  v26 = *v9;
  *(_QWORD *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24)) = v9[3];
  v27[0] = v13 + 16;
  if (SBYTE7(v29) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v31);
  *(_QWORD *)&v32.__val_ = a2;
  v32.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v20, v32, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v20.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v21 = v17;
  v22 = v18;
  v23 = v19;
  if (v19)
  {
    *((_QWORD *)v18 + 2) = &v22;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v21 = &v22;
  }
  v24 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v20);
  *(std::error_code *)(a1 + 16) = v20.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v14 = v22;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = a1 + 40;
  v16 = v23;
  *(_QWORD *)(a1 + 48) = v23;
  if (v16)
  {
    *((_QWORD *)v14 + 2) = v15;
    v14 = 0;
    v21 = &v22;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v15;
  }
  *(_OWORD *)(a1 + 56) = v24;
  v24 = 0uLL;
  v20.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v14);
  MEMORY[0x18D7898AC](&v20);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v18);
}

void sub_18CC17ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, unsigned int *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_18CC17EF4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Logger::log<char [42]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"The bag load resulted in updated cookies.", 41);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 2;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "bag", 3, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CC18160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::vector<std::string>>::~optional(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*(v3 - 3));
          v3 -= 3;
        }
        while (v3 != v2);
        v4 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t AMSCore::Logger::log<char [65],AMSCore::Log::Redact<std::string>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"The bag load resulted in an updated storefront. newStorefront = ", 64);
    AMSCore::Log::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 2;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "bag", 3, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CC18480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [78],AMSCore::Log::Redact<std::string>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21[0] = MEMORY[0x1E0DE4FE0] + 64;
    v16 = v7;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
    std::ios_base::init(v9, v17);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v16 = v4 + 24;
    v21[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v17[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    v20 = 16;
    v11 = *(_QWORD *)(v16 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)"The bag load resulted in an updated storefront suffix. newStorefrontSuffix = ", 77);
    AMSCore::Log::operator<<(&v16, a2);
    v13 = v17[5];
    v14 = (char *)&v17[-1] + *(_QWORD *)(v16 - 24);
    if ((v14[32] & 5) != 0)
    {
      v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 5) + 32))(&rep, *((_QWORD *)v14 + 5), 0, 1, 16);
      v15 = v26;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v23 = 2;
    v24 = v13;
    v25 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "bag", 3, &rep);
    v16 = *v6;
    *(_QWORD *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
    v17[0] = v10 + 16;
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v21);
  }
  return result;
}

void sub_18CC18728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 200))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 192);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 16));
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

AMSCore::EncodeHTTPRequestTask::Options *std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](AMSCore::EncodeHTTPRequestTask::Options *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*((_BYTE *)this + 392))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)this);
  }
  else
  {
    (**(void (***)(AMSCore::EncodeHTTPRequestTask::Options *))this)(this);
  }
  return this;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string __what_arg;
  std::error_code v14;

  v3 = a2;
  AMSCore::StringUtils::join<>(&__what_arg);
  *(_QWORD *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v9 = &v10;
  v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v4 = v10;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = a1 + 40;
  v6 = v11;
  *(_QWORD *)(a1 + 48) = v11;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    v4 = 0;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x18D7898AC](&v8);
}

void sub_18CC189A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::system_error v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string __what_arg;
  std::error_code v14;

  v3 = a2;
  AMSCore::StringUtils::join<>(&__what_arg);
  *(_QWORD *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v9 = &v10;
  v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v4 = v10;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = a1 + 40;
  v6 = v11;
  *(_QWORD *)(a1 + 48) = v11;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    v4 = 0;
    v9 = &v10;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x18D7898AC](&v8);
}

void sub_18CC18AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [30],std::tuple<std::string,std::string>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  void *__p[2];
  __int128 v30;
  int v31;
  uint64_t v32[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DE4FE0];
    v5 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v32[0] = MEMORY[0x1E0DE4FE0] + 64;
    v27 = v7;
    *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v7 - 24)) = v8;
    v9 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
    std::ios_base::init(v9, v28);
    v9[1].__vftable = 0;
    v9[1].__fmtflags_ = -1;
    v27 = v4 + 24;
    v32[0] = v5;
    std::streambuf::basic_streambuf();
    v10 = MEMORY[0x1E0DE4FB8];
    v28[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    v31 = 16;
    v11 = *(_QWORD *)(v27 - 24);
    if ((v12 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Successfully loaded the bag: ", 29);
    v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)"", 0);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, v15, v16);
    v17 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)", ", 2);
    v20 = *(_QWORD *)(a2 + 24);
    v19 = a2 + 24;
    v18 = v20;
    v21 = *(char *)(v19 + 23);
    if (v21 >= 0)
      v22 = v19;
    else
      v22 = v18;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(v19 + 23);
    else
      v23 = *(_QWORD *)(v19 + 8);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, v22, v23);
    v24 = v28[5];
    v25 = (char *)&v28[-1] + *(_QWORD *)(v27 - 24);
    if ((v25[32] & 5) != 0)
    {
      v26 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v25 + 5) + 32))(&rep, *((_QWORD *)v25 + 5), 0, 1, 16);
      v26 = v37;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v34 = 2;
    v35 = v24;
    v36 = v26;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), "bag", 3, &rep);
    v27 = *v6;
    *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = v6[3];
    v28[0] = v10 + 16;
    if (SBYTE7(v30) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v32);
  }
  return result;
}

void sub_18CC18D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_1::operator()(uint64_t a1)
{
  uint64_t v1;
  std::runtime_error *v3;
  const std::runtime_error *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  std::runtime_error v47;
  __int128 v48;
  uint64_t v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _QWORD *v54;
  std::__shared_weak_count *imp;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unsigned int *v64;
  uint64_t v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::runtime_error v76;
  __int128 v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  std::runtime_error v81;
  __int128 v82;
  __int128 *v83;
  __int128 v84;
  __int128 v85;
  std::runtime_error v86;
  __int128 v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  _BYTE v95[32];
  __int128 v96;
  _BYTE v97[32];
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[2];
  __int128 v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 1840);
  if (!*(_BYTE *)(v1 + 432))
    __break(1u);
  v3 = (std::runtime_error *)(a1 + 280);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 424);
  if (v5)
  {
    *v3 = *(std::runtime_error *)(v1 + 8);
    v4->__vftable = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(v1 + 24);
    v6 = a1 + 304;
    v7 = (_QWORD *)(v1 + 32);
    v8 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(a1 + 304) = v8;
    v9 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(a1 + 312) = v9;
    if (v9)
    {
      *(_QWORD *)(v8 + 16) = v6;
      *(_QWORD *)(v1 + 24) = v7;
      *v7 = 0;
      *(_QWORD *)(v1 + 40) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 296) = v6;
    }
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    *(_BYTE *)(a1 + 352) = 0;
    *(_BYTE *)(a1 + 376) = 0;
    if (*(_BYTE *)(v1 + 104))
    {
      v14 = *(_OWORD *)(v1 + 80);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(v1 + 96);
      *(_OWORD *)(a1 + 352) = v14;
      *(_QWORD *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 96) = 0;
      *(_QWORD *)(v1 + 80) = 0;
      *(_BYTE *)(a1 + 376) = 1;
    }
    *(_BYTE *)(a1 + 384) = 0;
    *(_DWORD *)(a1 + 400) = -1;
    v15 = *(unsigned int *)(v1 + 128);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(std::runtime_error *, uint64_t, uint64_t))off_1E253CA98[v15])(&v86, a1 + 384, v1 + 112);
      *(_DWORD *)(a1 + 400) = v15;
    }
    v16 = *(_OWORD *)(v1 + 136);
    *(_DWORD *)(a1 + 424) = *(_DWORD *)(v1 + 152);
    *(_OWORD *)(a1 + 408) = v16;
    v17 = (_QWORD *)(v1 + 184);
    v18 = *(_QWORD *)(v1 + 184);
    if (v18)
    {
      if (v18 == v1 + 160)
      {
        *(_QWORD *)(a1 + 456) = a1 + 432;
        (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 24))(*v17);
      }
      else
      {
        *(_QWORD *)(a1 + 456) = v18;
        *v17 = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 456) = 0;
    }
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(v1 + 192);
    *(_QWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 200) = 0;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 280), v4);
    *(_QWORD *)(a1 + 280) = MEMORY[0x1E0DE4F90] + 16;
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(v1 + 24);
    *(_QWORD *)(a1 + 280) = off_1E2521330;
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(v1 + 40);
    v10 = a1 + 320;
    v11 = (_QWORD *)(v1 + 48);
    v12 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(a1 + 320) = v12;
    v13 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(a1 + 328) = v13;
    if (v13)
    {
      *(_QWORD *)(v12 + 16) = v10;
      *(_QWORD *)(v1 + 40) = v11;
      *v11 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 312) = v10;
    }
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    *(_QWORD *)(a1 + 280) = &off_1E2521420;
    *(_BYTE *)(a1 + 352) = 0;
    *(_BYTE *)(a1 + 376) = 0;
    if (*(_BYTE *)(v1 + 104))
    {
      v19 = *(_OWORD *)(v1 + 80);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(v1 + 96);
      *(_OWORD *)(a1 + 352) = v19;
      *(_QWORD *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 96) = 0;
      *(_QWORD *)(v1 + 80) = 0;
      *(_BYTE *)(a1 + 376) = 1;
    }
    v20 = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(a1 + 400) = v20;
    v21 = *(_OWORD *)(v1 + 144);
    v22 = *(_OWORD *)(v1 + 160);
    v23 = *(_OWORD *)(v1 + 176);
    *(_OWORD *)(a1 + 457) = *(_OWORD *)(v1 + 185);
    *(_OWORD *)(a1 + 432) = v22;
    *(_OWORD *)(a1 + 448) = v23;
    *(_OWORD *)(a1 + 416) = v21;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 496) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(v1 + 208);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 216) = 0;
    *(_QWORD *)(v1 + 224) = 0;
    *(_QWORD *)(v1 + 208) = 0;
    v24 = *(_OWORD *)(v1 + 248);
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(v1 + 232);
    *(_OWORD *)(a1 + 520) = v24;
    v25 = *(_OWORD *)(v1 + 264);
    v26 = *(_OWORD *)(v1 + 280);
    v27 = *(_OWORD *)(v1 + 312);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(v1 + 296);
    *(_OWORD *)(a1 + 584) = v27;
    *(_OWORD *)(a1 + 536) = v25;
    *(_OWORD *)(a1 + 552) = v26;
    v28 = *(_OWORD *)(v1 + 328);
    v29 = *(_OWORD *)(v1 + 344);
    v30 = *(_OWORD *)(v1 + 360);
    *(_OWORD *)(a1 + 642) = *(_OWORD *)(v1 + 370);
    *(_OWORD *)(a1 + 616) = v29;
    *(_OWORD *)(a1 + 632) = v30;
    *(_OWORD *)(a1 + 600) = v28;
    *(_BYTE *)(a1 + 664) = 0;
    *(_BYTE *)(a1 + 688) = 0;
    if (*(_BYTE *)(v1 + 416))
    {
      v31 = *(_OWORD *)(v1 + 392);
      *(_QWORD *)(a1 + 680) = *(_QWORD *)(v1 + 408);
      *(_OWORD *)(a1 + 664) = v31;
      *(_QWORD *)(v1 + 400) = 0;
      *(_QWORD *)(v1 + 408) = 0;
      *(_QWORD *)(v1 + 392) = 0;
      *(_BYTE *)(a1 + 688) = 1;
    }
  }
  *(_BYTE *)(a1 + 696) = v5;
  v32 = *(_QWORD *)(a1 + 1848);
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      v35 = *(std::__shared_weak_count **)(a1 + 1848);
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v36 = *(std::__shared_weak_count **)(a1 + 1832);
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1656));
  v39 = *(std::__shared_weak_count **)(a1 + 1480);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1096));
  if (*(_BYTE *)(a1 + 696))
  {
    v86 = *v3;
    v3->__vftable = 0;
    v3->__imp_.__imp_ = 0;
    v42 = *(_QWORD *)(a1 + 304);
    *(_QWORD *)&v87 = *(_QWORD *)(a1 + 296);
    *((_QWORD *)&v87 + 1) = v42;
    v88 = *(__int128 **)(a1 + 312);
    if (v88)
    {
      *(_QWORD *)(v42 + 16) = (char *)&v87 + 8;
      *(_QWORD *)(a1 + 296) = a1 + 304;
      *(_QWORD *)(a1 + 304) = 0;
      *(_QWORD *)(a1 + 312) = 0;
    }
    else
    {
      *(_QWORD *)&v87 = (char *)&v87 + 8;
    }
    v44 = *(_OWORD *)(a1 + 336);
    v89 = *(_OWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    v90 = v44;
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    LOBYTE(v91) = 0;
    v93 = 0;
    if (*(_BYTE *)(a1 + 376))
    {
      v91 = *(_OWORD *)(a1 + 352);
      v92 = *(_QWORD *)(a1 + 368);
      *(_QWORD *)(a1 + 360) = 0;
      *(_QWORD *)(a1 + 368) = 0;
      *(_QWORD *)(a1 + 352) = 0;
      v93 = 1;
    }
    LOBYTE(v94) = 0;
    *(_DWORD *)v95 = -1;
    v45 = *(unsigned int *)(a1 + 400);
    if ((_DWORD)v45 != -1)
    {
      ((void (*)(std::runtime_error *, __int128 *, uint64_t))off_1E253CA98[v45])(&v81, &v94, a1 + 384);
      *(_DWORD *)v95 = v45;
    }
    *(_DWORD *)&v95[24] = *(_DWORD *)(a1 + 424);
    *(_OWORD *)&v95[8] = *(_OWORD *)(a1 + 408);
    v46 = *(_QWORD *)(a1 + 456);
    if (v46)
    {
      if (v46 == a1 + 432)
      {
        *(_QWORD *)&v97[8] = &v96;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(a1 + 432) + 24))(a1 + 432, &v96);
      }
      else
      {
        *(_QWORD *)&v97[8] = *(_QWORD *)(a1 + 456);
        *(_QWORD *)(a1 + 456) = 0;
      }
    }
    else
    {
      *(_QWORD *)&v97[8] = 0;
    }
    *(_OWORD *)&v97[16] = *(_OWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>,false>::reset[abi:fe180100](a1 + 24);
    v47 = v86;
    v48 = v87;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)&v87 + 1);
    v49 = a1 + 48;
    *(std::runtime_error *)(a1 + 24) = v47;
    v86.__vftable = 0;
    v86.__imp_.__imp_ = 0;
    *(_QWORD *)(a1 + 40) = v48;
    v50 = v88;
    *(_QWORD *)(a1 + 56) = v88;
    if (v50)
    {
      *(_QWORD *)(*((_QWORD *)&v48 + 1) + 16) = v49;
      *(_QWORD *)&v87 = (char *)&v87 + 8;
      *((_QWORD *)&v87 + 1) = 0;
      v88 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v49;
    }
    v51 = v89;
    *(_BYTE *)(a1 + 96) = 0;
    v89 = 0uLL;
    v52 = v90;
    *(_OWORD *)(a1 + 64) = v51;
    *(_OWORD *)(a1 + 80) = v52;
    v90 = 0uLL;
    *(_BYTE *)(a1 + 120) = 0;
    if (v93)
    {
      *(_OWORD *)(a1 + 96) = v91;
      *(_QWORD *)(a1 + 112) = v92;
      v92 = 0;
      v91 = 0uLL;
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 144) = -1;
    v53 = *(_DWORD *)v95;
    if (*(_DWORD *)v95 != -1)
    {
      ((void (*)(std::runtime_error *))off_1E253CA98[*(unsigned int *)v95])(&v81);
      *(_DWORD *)(a1 + 144) = v53;
    }
    *(_OWORD *)(a1 + 152) = *(_OWORD *)&v95[8];
    *(_DWORD *)(a1 + 168) = *(_DWORD *)&v95[24];
    if (*(_QWORD *)&v97[8])
    {
      if (*(__int128 **)&v97[8] == &v96)
      {
        *(_QWORD *)(a1 + 200) = a1 + 176;
        (*(void (**)(__int128 *))(v96 + 24))(&v96);
        goto LABEL_66;
      }
      v54 = &v97[8];
      *(_QWORD *)(a1 + 200) = *(_QWORD *)&v97[8];
    }
    else
    {
      v54 = (_QWORD *)(a1 + 200);
    }
    *v54 = 0;
LABEL_66:
    *(_OWORD *)(a1 + 208) = *(_OWORD *)&v97[16];
    *(_QWORD *)&v97[16] = 0;
    *(_QWORD *)&v97[24] = 0;
    *(_BYTE *)(a1 + 224) = 1;
    *(_BYTE *)(a1 + 232) = 1;
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v87);
    imp = (std::__shared_weak_count *)v86.__imp_.__imp_;
    if (v86.__imp_.__imp_)
    {
      v56 = (unint64_t *)(v86.__imp_.__imp_ + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    goto LABEL_87;
  }
  std::runtime_error::runtime_error(&v86, v3);
  v87 = *(_OWORD *)(a1 + 296);
  v43 = *(_QWORD *)(a1 + 320);
  v88 = *(__int128 **)(a1 + 312);
  *(_QWORD *)&v89 = v43;
  *((_QWORD *)&v89 + 1) = *(_QWORD *)(a1 + 328);
  if (*((_QWORD *)&v89 + 1))
  {
    *(_QWORD *)(v43 + 16) = &v89;
    *(_QWORD *)(a1 + 312) = a1 + 320;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  else
  {
    v88 = &v89;
  }
  v90 = *(_OWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  v86.__vftable = (std::runtime_error_vtbl *)&off_1E2521420;
  LOBYTE(v91) = 0;
  v93 = 0;
  if (*(_BYTE *)(a1 + 376))
  {
    v91 = *(_OWORD *)(a1 + 352);
    v92 = *(_QWORD *)(a1 + 368);
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 352) = 0;
    v93 = 1;
  }
  v58 = *(_OWORD *)(a1 + 432);
  *(_OWORD *)&v95[16] = *(_OWORD *)(a1 + 416);
  v96 = v58;
  *(_OWORD *)v97 = *(_OWORD *)(a1 + 448);
  v59 = *(_OWORD *)(a1 + 400);
  v94 = *(_OWORD *)(a1 + 384);
  *(_OWORD *)v95 = v59;
  *(_OWORD *)&v97[9] = *(_OWORD *)(a1 + 457);
  v98 = *(_OWORD *)(a1 + 480);
  v99 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)((char *)v108 + 10) = *(_OWORD *)(a1 + 642);
  v60 = *(_OWORD *)(a1 + 616);
  v106 = *(_OWORD *)(a1 + 600);
  v107 = v60;
  v108[0] = *(_OWORD *)(a1 + 632);
  v61 = *(_OWORD *)(a1 + 552);
  v102 = *(_OWORD *)(a1 + 536);
  v103 = v61;
  v62 = *(_OWORD *)(a1 + 584);
  v104 = *(_OWORD *)(a1 + 568);
  v105 = v62;
  v63 = *(_OWORD *)(a1 + 520);
  v100 = *(_OWORD *)(a1 + 504);
  v101 = v63;
  LOBYTE(v109) = 0;
  v111 = 0;
  if (*(_BYTE *)(a1 + 688))
  {
    v110 = *(_QWORD *)(a1 + 680);
    v109 = *(_OWORD *)(a1 + 664);
    *(_QWORD *)(a1 + 680) = 0;
    *(_QWORD *)(a1 + 664) = 0;
    *(_QWORD *)(a1 + 672) = 0;
    v111 = 1;
  }
  v112 = 1;
  std::runtime_error::runtime_error(&v76, &v86);
  v77 = v87;
  v76.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v78 = v88;
  v79 = v89;
  if (*((_QWORD *)&v89 + 1))
  {
    *(_QWORD *)(v89 + 16) = &v79;
    v88 = &v89;
    v89 = 0uLL;
  }
  else
  {
    v78 = &v79;
  }
  v80 = v90;
  v90 = 0uLL;
  std::runtime_error::runtime_error(&v81, &v76);
  v82 = v77;
  v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v64 = (unsigned int *)v79;
  v83 = v78;
  v84 = v79;
  if (*((_QWORD *)&v79 + 1))
  {
    *(_QWORD *)(v79 + 16) = &v84;
    v64 = 0;
    v78 = &v79;
    v79 = 0uLL;
  }
  else
  {
    v83 = &v84;
  }
  v85 = v80;
  v80 = 0uLL;
  v76.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v78, v64);
  MEMORY[0x18D7898AC](&v76);
  std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>,false>::reset[abi:fe180100](a1 + 24);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v81);
  v66 = v83;
  v65 = v84;
  *(_QWORD *)(a1 + 64) = v84;
  v67 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v82;
  *(_QWORD *)(a1 + 24) = off_1E2521330;
  *(_QWORD *)(a1 + 56) = v66;
  v68 = *((_QWORD *)&v84 + 1);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)&v84 + 1);
  if (v68)
  {
    *(_QWORD *)(v65 + 16) = v67;
    v65 = 0;
    v83 = &v84;
    v84 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v67;
  }
  *(_OWORD *)(a1 + 80) = v85;
  v85 = 0uLL;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 1;
  v81.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, (unsigned int *)v65);
  MEMORY[0x18D7898AC](&v81);
  if (v112)
    AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v86);
LABEL_87:
  if (*(_BYTE *)(a1 + 696))
  {
    v69 = *(std::__shared_weak_count **)(a1 + 472);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 296));
    v72 = *(std::__shared_weak_count **)(a1 + 288);
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  }
  *(_QWORD *)(a1 + 280) = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 1856) = 1;
  return AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t *)v3);
}

void sub_18CC19844(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_1::operator()(uint64_t a1)
{
  AMSCore::ExecuteHTTPRequestTask::Options *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1488);
  v3 = a1 + 16;
  if ((*(_BYTE *)(a1 + 1856) & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 1848);
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        v7 = *(std::__shared_weak_count **)(a1 + 1848);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v8 = *(std::__shared_weak_count **)(a1 + 1832);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1656));
    v11 = *(std::__shared_weak_count **)(a1 + 1480);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1096));
  }
  AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::~Promise(v3);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v2);
  v14 = *(std::__shared_weak_count **)(a1 + 1088);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 704));
  operator delete((void *)a1);
}

void AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

void std::__optional_destruct_base<std::expected<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>,false>::reset[abi:fe180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_BYTE *)(a1 + 200))
    {
      v2 = *(std::__shared_weak_count **)(a1 + 192);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 16));
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        v6 = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))a1)(a1);
    }
    *(_BYTE *)(a1 + 208) = 0;
  }
}

uint64_t *AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t *result)
{
  uint64_t *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  const std::runtime_error *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count **v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *imp;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  std::runtime_error v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37[16];
  int v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  char v45;
  _BYTE v46[24];
  uint64_t *v47;
  uint64_t v48;

  v1 = result;
  v48 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*result + 224);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*result - 8))(*result - 16);
    v4 = *result;
    result = *(uint64_t **)(*result + 256);
    if (result)
    {
      if (result == (uint64_t *)(v4 + 232))
      {
        v47 = (uint64_t *)v46;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _BYTE *))(*result + 24))(result, v46);
      }
      else
      {
        v47 = result;
        *(_QWORD *)(v4 + 256) = 0;
      }
    }
    else
    {
      v47 = 0;
    }
    if (v47)
    {
      v5 = *v1;
      if (!*(_BYTE *)(v5 + 216))
      {
        __break(1u);
        return result;
      }
      v6 = (const std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 208);
      if (v7)
      {
        v8 = (_QWORD *)(v5 + 32);
        v9 = *(_QWORD *)(v5 + 32);
        v29 = *(std::runtime_error *)(v5 + 8);
        v6->__vftable = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)&v30 = *(_QWORD *)(v5 + 24);
        *((_QWORD *)&v30 + 1) = v9;
        v31 = *(__int128 **)(v5 + 40);
        if (v31)
        {
          *(_QWORD *)(v9 + 16) = (char *)&v30 + 8;
          *(_QWORD *)(v5 + 24) = v8;
          *v8 = 0;
          *(_QWORD *)(v5 + 40) = 0;
        }
        else
        {
          *(_QWORD *)&v30 = (char *)&v30 + 8;
        }
        v12 = *(_OWORD *)(v5 + 64);
        v32 = *(_OWORD *)(v5 + 48);
        *(_QWORD *)(v5 + 48) = 0;
        *(_QWORD *)(v5 + 56) = 0;
        v33 = v12;
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        LOBYTE(v34) = 0;
        v36 = 0;
        if (*(_BYTE *)(v5 + 104))
        {
          v13 = *(_OWORD *)(v5 + 80);
          v35 = *(_QWORD *)(v5 + 96);
          v34 = v13;
          *(_QWORD *)(v5 + 80) = 0;
          *(_QWORD *)(v5 + 88) = 0;
          *(_QWORD *)(v5 + 96) = 0;
          v36 = 1;
        }
        v37[0] = 0;
        v38 = -1;
        v14 = *(unsigned int *)(v5 + 128);
        if ((_DWORD)v14 != -1)
        {
          ((void (*)(char *, char *, uint64_t))off_1E253CA98[v14])(&v28, v37, v5 + 112);
          v38 = v14;
        }
        v15 = *(uint64_t **)(v5 + 184);
        v16 = *(_OWORD *)(v5 + 136);
        v40 = *(_DWORD *)(v5 + 152);
        v39 = v16;
        if (v15)
        {
          if (v15 == (uint64_t *)(v5 + 160))
          {
            v42 = &v41;
            (*(void (**)(uint64_t *))(*v15 + 24))(v15);
          }
          else
          {
            v42 = v15;
            *(_QWORD *)(v5 + 184) = 0;
          }
        }
        else
        {
          v42 = 0;
        }
        v18 = *(_QWORD *)(v5 + 192);
        v17 = (_QWORD *)(v5 + 192);
        v43 = v18;
        v19 = &v44;
      }
      else
      {
        std::runtime_error::runtime_error(&v29, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v30 = *(_OWORD *)(v5 + 24);
        v29.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v31 = *(__int128 **)(v5 + 40);
        *(_QWORD *)&v32 = v11;
        *((_QWORD *)&v32 + 1) = *(_QWORD *)(v5 + 56);
        if (*((_QWORD *)&v32 + 1))
        {
          *(_QWORD *)(v11 + 16) = &v32;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v31 = &v32;
        }
        v20 = *(_QWORD *)(v5 + 64);
        v17 = (_QWORD *)(v5 + 64);
        *(_QWORD *)&v33 = v20;
        v19 = (std::__shared_weak_count **)&v33 + 1;
      }
      *v19 = (std::__shared_weak_count *)v17[1];
      *v17 = 0;
      v17[1] = 0;
      v45 = v7;
      if (!v47)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t *, std::runtime_error *))(*v47 + 48))(v47, &v29);
      if (v45)
      {
        v21 = v44;
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v30);
        imp = (std::__shared_weak_count *)v29.__imp_.__imp_;
        if (v29.__imp_.__imp_)
        {
          v25 = (unint64_t *)(v29.__imp_.__imp_ + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
            std::__shared_weak_count::__release_weak(imp);
          }
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
      }
    }
    else
    {
      (*v3)(v3);
    }
    result = v47;
    if (v47 == (uint64_t *)v46)
    {
      v27 = 4;
      result = (uint64_t *)v46;
    }
    else
    {
      if (!v47)
        return result;
      v27 = 5;
    }
    return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v27))();
  }
  return result;
}

void sub_18CC1A050(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::~Promise(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v2 = (_QWORD *)(a1 + 232);
  v3 = *(_QWORD **)(a1 + 256);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 216))
  {
    if (*(_BYTE *)(a1 + 208))
    {
      v5 = *(std::__shared_weak_count **)(a1 + 200);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 24));
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
    }
  }
  do
  {
    v11 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v12)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  return a1;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 224);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objec"
                                "tEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_22ExecuteHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE19__generic_constructB8fe180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE19__generic_constructB8fe180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

uint64_t std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2521CE0;
  if (!*(_BYTE *)(a1 + 128))
    goto LABEL_4;
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    if (*(_BYTE *)(a1 + 80))
      return a1;
    goto LABEL_4;
  }
  if (!*(_BYTE *)(a1 + 80))
LABEL_4:
    (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
  return a1;
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2521CE0;
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(char *)(a1 + 127) < 0)
    {
      operator delete(*(void **)(a1 + 104));
      if (*(_BYTE *)(a1 + 80))
LABEL_8:
        JUMPOUT(0x18D789BDCLL);
    }
    else if (*(_BYTE *)(a1 + 80))
    {
      goto LABEL_8;
    }
  }
  (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
  goto LABEL_8;
}

char *std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::__clone(uint64_t a1)
{
  const std::runtime_error *v2;
  char *v3;
  char *v4;
  char v5;
  char v6;
  std::string *v7;

  v2 = (const std::runtime_error *)(a1 + 8);
  v3 = (char *)operator new(0x88uLL);
  v4 = v3;
  *(_QWORD *)v3 = off_1E2521CE0;
  v5 = *(_BYTE *)(a1 + 128);
  if (v5)
  {
    v6 = *(_BYTE *)(a1 + 80);
    if (v6)
      *((_QWORD *)v3 + 1) = v2->__vftable;
    else
      AMSCore::Error::Error((std::runtime_error *)(v3 + 8), v2);
    v4[80] = v6;
    *(_OWORD *)(v4 + 88) = *(_OWORD *)(a1 + 88);
    v7 = (std::string *)(v4 + 104);
    if (*(char *)(a1 + 127) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 104);
      *((_QWORD *)v4 + 15) = *(_QWORD *)(a1 + 120);
    }
  }
  else
  {
    AMSCore::Error::Error((std::runtime_error *)(v3 + 8), v2);
  }
  v4[128] = v5;
  return v4;
}

void sub_18CC1A508(_Unwind_Exception *a1)
{
  _BYTE *v1;
  void (***v2)(_QWORD);

  if (!v1[80])
    (**v2)(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  const std::runtime_error *v3;
  char v4;
  char v6;
  std::string *v7;
  __int128 v8;

  v3 = (const std::runtime_error *)(a1 + 8);
  *(_QWORD *)a2 = off_1E2521CE0;
  v4 = *(_BYTE *)(a1 + 128);
  if (v4)
  {
    v6 = *(_BYTE *)(a1 + 80);
    if (v6)
      *(_QWORD *)(a2 + 8) = v3->__vftable;
    else
      AMSCore::Error::Error((std::runtime_error *)(a2 + 8), v3);
    *(_BYTE *)(a2 + 80) = v6;
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
    v7 = (std::string *)(a2 + 104);
    if (*(char *)(a1 + 127) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
    }
    else
    {
      v8 = *(_OWORD *)(a1 + 104);
      *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    AMSCore::Error::Error((std::runtime_error *)(a2 + 8), v3);
  }
  *(_BYTE *)(a2 + 128) = v4;
}

void sub_18CC1A5EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void (***v2)(_QWORD);

  if (!*(_BYTE *)(v1 + 80))
    (**v2)(v2);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::destroy(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 128))
    goto LABEL_6;
  if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 80))
      return;
LABEL_6:
    (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
    return;
  }
  operator delete(*(void **)(a1 + 104));
  if (!*(_BYTE *)(a1 + 80))
    goto LABEL_6;
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::destroy_deallocate(char *__p)
{
  if (!__p[128])
    goto LABEL_4;
  if (__p[127] < 0)
  {
    operator delete(*((void **)__p + 13));
    if (__p[80])
      goto LABEL_5;
    goto LABEL_4;
  }
  if (!__p[80])
LABEL_4:
    (**((void (***)(char *))__p + 1))(__p + 8);
LABEL_5:
  operator delete(__p);
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::operator()(uint64_t a1@<X0>, AMSCore::HTTPResponse *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const void ***v5;
  const void **v6;
  const void **v7;
  const void ***v8;
  BOOL v9;
  const std::runtime_error *v11;
  char v12;
  char v13;
  std::string *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error v22;
  __int128 v23;
  unsigned int **v24;
  unsigned int *v25;
  uint64_t v26;
  __int128 v27;
  std::runtime_error v28;
  __int128 v29;
  unsigned int **v30;
  unsigned int *v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  std::runtime_error v35;
  __int128 v36;
  unsigned int **v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  std::runtime_error v42;
  __int128 v43;
  unsigned int **v44;
  unsigned int *v45;
  uint64_t v46;
  __int128 v47;

  if (*((_BYTE *)a2 + 656))
  {
    AMSCore::HTTPResponse::getDecodedObject(a2);
    if (*(_BYTE *)(v4 + 72))
    {
      v35.__imp_.__imp_ = 0;
      *(_QWORD *)&v36 = 0;
      v35.__vftable = (std::runtime_error_vtbl *)&v35.__imp_;
      v5 = (const void ***)(v4 + 8);
      v6 = *(const void ***)v4;
      if (*(_QWORD *)v4 != v4 + 8)
      {
        do
        {
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v35, (uint64_t *)&v35.__imp_, v6 + 4, (__int128 *)v6 + 2);
          v7 = (const void **)v6[1];
          if (v7)
          {
            do
            {
              v8 = (const void ***)v7;
              v7 = (const void **)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              v8 = (const void ***)v6[2];
              v9 = *v8 == v6;
              v6 = (const void **)v8;
            }
            while (!v9);
          }
          v6 = (const void **)v8;
        }
        while (v8 != v5);
      }
      v41 = 1;
      AMSCore::LoadURLMetricsEventConfig::fromAnyMap(a3, (uint64_t *)&v35);
    }
    else
    {
      AMSCore::Error::Error(&v35, (const std::runtime_error *)v4);
      v41 = 0;
      std::runtime_error::runtime_error(&v28, &v35);
      v29 = v36;
      v28.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v30 = v37;
      v31 = (unsigned int *)v38;
      v32 = v39;
      if (v39)
      {
        *(_QWORD *)(v38 + 16) = &v31;
        v37 = (unsigned int **)&v38;
        v38 = 0;
        v39 = 0;
      }
      else
      {
        v30 = &v31;
      }
      v33 = v40;
      v40 = 0uLL;
      v34 = 1;
      std::runtime_error::runtime_error(&v42, &v28);
      v43 = v29;
      v42.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v44 = v30;
      v45 = v31;
      v46 = v32;
      if (v32)
      {
        *((_QWORD *)v31 + 2) = &v45;
        v30 = &v31;
        v31 = 0;
        v32 = 0;
      }
      else
      {
        v44 = &v45;
      }
      v47 = v33;
      v33 = 0uLL;
      std::runtime_error::runtime_error(&v22, &v42);
      v23 = v43;
      v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v15 = v45;
      v24 = v44;
      v25 = v45;
      v26 = v46;
      if (v46)
      {
        *((_QWORD *)v45 + 2) = &v25;
        v15 = 0;
        v44 = &v45;
        v45 = 0;
        v46 = 0;
      }
      else
      {
        v24 = &v25;
      }
      v27 = v47;
      v47 = 0uLL;
      v42.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v44, v15);
      MEMORY[0x18D7898AC](&v42);
      std::runtime_error::runtime_error((std::runtime_error *)a3, &v22);
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)a3 = off_1E2521330;
      v16 = v25;
      *(_QWORD *)(a3 + 32) = v24;
      *(_QWORD *)(a3 + 40) = v16;
      v17 = a3 + 40;
      v18 = v26;
      *(_QWORD *)(a3 + 48) = v26;
      if (v18)
      {
        *((_QWORD *)v16 + 2) = v17;
        v16 = 0;
        v24 = &v25;
        v25 = 0;
        v26 = 0;
      }
      else
      {
        *(_QWORD *)(a3 + 32) = v17;
      }
      *(_OWORD *)(a3 + 56) = v27;
      v27 = 0uLL;
      *(_BYTE *)(a3 + 120) = 0;
      v22.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v16);
      MEMORY[0x18D7898AC](&v22);
      if (v34)
      {
        v28.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, v31);
        MEMORY[0x18D7898AC](&v28);
      }
    }
    if (v41)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v35, (unsigned int *)v35.__imp_.__imp_);
    else
      ((void (*)(std::runtime_error *))v35.~runtime_error)(&v35);
  }
  else
  {
    v11 = (const std::runtime_error *)(a1 + 8);
    v12 = *(_BYTE *)(a1 + 128);
    if (v12)
    {
      v13 = *(_BYTE *)(a1 + 80);
      if (v13)
        *(_QWORD *)a3 = v11->__vftable;
      else
        AMSCore::Error::Error((std::runtime_error *)a3, v11);
      *(_BYTE *)(a3 + 72) = v13;
      *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 88);
      v14 = (std::string *)(a3 + 96);
      if (*(char *)(a1 + 127) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
      }
      else
      {
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 104);
        *(_QWORD *)(a3 + 112) = *(_QWORD *)(a1 + 120);
      }
    }
    else
    {
      AMSCore::Error::Error((std::runtime_error *)a3, v11);
    }
    *(_BYTE *)(a3 + 120) = v12;
  }
}

void sub_18CC1AA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (!*(_BYTE *)(v38 + 72))
    (**(void (***)(uint64_t))v38)(v38);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS"
                     "2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBund"
                     "leInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEEbE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic"
                                "_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAcc"
                                "ountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEEbE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEEbE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::`anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,BOOL)::$_0>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::target_type()
{
}

void std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 144);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::pair<std::string const,AMSCore::Any>::~pair(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E253D240[v2])(&v4, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEED0Ev()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2521FF8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2521FF8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEEclESH_(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v8[2];

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v5 + 248));
  v6 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v5 + 432, a2);
  if ((uint64_t *)(v5 + 440) == v6)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 24) = -1;
    v7 = *((unsigned int *)v6 + 20);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t *))off_1E253D1E0[v7])(v8, a3, v6 + 7);
      *(_DWORD *)(a3 + 24) = v7;
    }
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v5 + 248));
}

void sub_18CC1ADC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E253D240[v15])(&a13, v13);
  *(_DWORD *)(v13 + 24) = -1;
  __clang_call_terminate(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_"
    || ((v3 & (unint64_t)"ZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEE11target_typeEv()
{
  return &_ZTIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_;
}

_BYTE *AMSCore::BagValue::getValueWithWrappedError<std::map<std::string,AMSCore::Any>,AMSCore::BagValue::getMapValue(void)::$_0>(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v3;
  const std::runtime_error *v4;
  char v5;
  const char **v6;
  std::__libcpp_refstring *p_imp;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const std::runtime_error *v12;
  std::runtime_error_vtbl *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void **v21;
  uint64_t *v22;
  __int128 *v23;
  uint64_t v24;
  void **v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void (***v31)(_QWORD);
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  std::runtime_error v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  unsigned int **v45;
  unsigned int *v46[2];
  _QWORD v47[3];
  _QWORD *v48;
  __int128 v49[3];
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 256);
  if (!*(_BYTE *)(v1 + 88))
    goto LABEL_56;
  v3 = (_BYTE *)(a1 + 152);
  v4 = (const std::runtime_error *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 80);
  if (v5)
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(v1 + 8);
    v6 = (const char **)(a1 + 160);
    p_imp = (std::__libcpp_refstring *)(v1 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v4);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 24);
    v8 = (_QWORD *)(v1 + 48);
    v9 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(a1 + 192) = v9;
    v10 = a1 + 192;
    *(_QWORD *)(a1 + 152) = off_1E2521330;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(v1 + 40);
    v11 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(a1 + 200) = v11;
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v1 + 40) = v8;
      *v8 = 0;
      *(_QWORD *)(v1 + 56) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 184) = v10;
    }
    v12 = *(const std::runtime_error **)(a1 + 256);
    v13 = v12[4].__vftable;
    v4 = v12 + 4;
    *(_QWORD *)(a1 + 208) = v13;
    v6 = (const char **)(a1 + 216);
    p_imp = &v4->__imp_;
  }
  *v6 = p_imp->__imp_;
  v4->__vftable = 0;
  v4->__imp_.__imp_ = 0;
  *(_BYTE *)(a1 + 224) = v5;
  v14 = *(_QWORD *)(a1 + 264);
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      v17 = *(std::__shared_weak_count **)(a1 + 264);
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v18 = *(std::__shared_weak_count **)(a1 + 240);
  if (!v18)
    goto LABEL_59;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
  {
LABEL_59:
    if (*(_BYTE *)(a1 + 224))
      goto LABEL_18;
LABEL_22:
    v50 = 0;
    memset(v49, 0, sizeof(v49));
    v46[0] = 0;
    v46[1] = 0;
    v45 = v46;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v45, (uint64_t *)v46, (const void **)v49, v49);
    v25 = *(void ***)(a1 + 248);
    v47[0] = &off_1E2521FF8;
    v47[1] = v25;
    v48 = v47;
    AMSCore::BagDataAccessor::getMapValue((uint64_t)&v38, v25, (uint64_t *)&v45, (uint64_t)v47);
    v26 = v48;
    if (v48 == v47)
    {
      v27 = 4;
      v26 = v47;
    }
    else
    {
      if (!v48)
      {
LABEL_30:
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v45, v46[0]);
        if ((_DWORD)v50 != -1)
          ((void (*)(_QWORD *, char *))off_1E253D240[v50])(v47, (char *)&v49[1] + 8);
        LODWORD(v50) = -1;
        if (SBYTE7(v49[1]) < 0)
        {
          operator delete(*(void **)&v49[0]);
          if (v44)
            goto LABEL_34;
        }
        else if (v44)
        {
          goto LABEL_34;
        }
        ((void (*)(std::runtime_error *))v38.~runtime_error)(&v38);
        if (!*(_BYTE *)(a1 + 224))
        {
          LODWORD(v49[0]) = 204;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v38, (uint64_t)v3, (unsigned int *)v49);
          if (*(_BYTE *)(a1 + 104))
          {
            v31 = (void (***)(_QWORD))(a1 + 24);
            if (*(_BYTE *)(a1 + 96))
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v31, *(unsigned int **)(a1 + 32));
            else
              (**v31)(v31);
            *(_BYTE *)(a1 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v38);
          v32 = v39;
          v34 = v40;
          v33 = v41;
          *(_QWORD *)(a1 + 64) = v41;
          v35 = a1 + 64;
          *(_OWORD *)(a1 + 40) = v32;
          *(_QWORD *)(a1 + 24) = off_1E2521330;
          *(_QWORD *)(a1 + 56) = v34;
          v36 = v42;
          *(_QWORD *)(a1 + 72) = v42;
          if (v36)
          {
            *(_QWORD *)(v33 + 16) = v35;
            v40 = &v41;
            v41 = 0;
            v42 = 0;
            v33 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 56) = v35;
          }
          *(_OWORD *)(a1 + 80) = v43;
          v43 = 0uLL;
          *(_BYTE *)(a1 + 96) = 0;
          *(_BYTE *)(a1 + 104) = 1;
          v38.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, (unsigned int *)v33);
          MEMORY[0x18D7898AC](&v38);
          if (!*(_BYTE *)(a1 + 224))
            goto LABEL_54;
          goto LABEL_38;
        }
LABEL_56:
        __break(1u);
      }
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a1 + 224))
    goto LABEL_22;
LABEL_18:
  v21 = *(void ***)(a1 + 248);
  v22 = *(uint64_t **)(a1 + 152);
  *(_QWORD *)&v49[0] = &off_1E2521FF8;
  *((_QWORD *)&v49[0] + 1) = v21;
  *((_QWORD *)&v49[1] + 1) = v49;
  AMSCore::BagDataAccessor::getMapValue((uint64_t)&v38, v21, v22, (uint64_t)v49);
  v23 = (__int128 *)*((_QWORD *)&v49[1] + 1);
  if (*((__int128 **)&v49[1] + 1) == v49)
  {
    v24 = 4;
    v23 = v49;
  }
  else
  {
    if (!*((_QWORD *)&v49[1] + 1))
      goto LABEL_34;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_34:
  std::optional<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v38);
  if (v44)
  {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, (unsigned int *)v38.__imp_.__imp_);
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_54;
  }
  else
  {
    ((void (*)(std::runtime_error *))v38.~runtime_error)(&v38);
    if (!*(_BYTE *)(a1 + 224))
    {
LABEL_54:
      (**(void (***)(_BYTE *))v3)(v3);
      goto LABEL_55;
    }
  }
LABEL_38:
  v28 = *(std::__shared_weak_count **)(a1 + 160);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_55:
  *(_QWORD *)(a1 + 152) = a1 + 16;
  *(_QWORD *)a1 = 0;
  return AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18CC1B2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  uint64_t v21;

  if (a2)
  {
    std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v21);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::BagValue::getValueWithWrappedError<std::map<std::string,AMSCore::Any>,AMSCore::BagValue::getMapValue(void)::$_0>(char *__p)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  unsigned int v12;
  unsigned int v13;

  if (*(_QWORD *)__p)
  {
    v2 = *((_QWORD *)__p + 33);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 33);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)__p + 30);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = (char *)*((_QWORD *)__p + 18);
  if (v9 == __p + 120)
  {
    v10 = 4;
    v9 = __p + 120;
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_17:
  if (__p[104])
  {
    v11 = (void (***)(_QWORD))(__p + 24);
    if (__p[96])
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v11, *((unsigned int **)__p + 4));
    else
      (**v11)(v11);
  }
  do
  {
    v12 = __ldaxr((unsigned int *)&AMSCore::TaskCounter::getCount(void)::count);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)&AMSCore::TaskCounter::getCount(void)::count));
  if (!v13)
    MEMORY[0x18D789A68](&AMSCore::TaskCounter::getCount(void)::count);
  operator delete(__p);
}

std::runtime_error *std::optional<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  char imp;
  std::__libcpp_refstring *p_imp;
  const char *v6;
  std::__libcpp_refstring *v7;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;
  const char *v10;
  std::runtime_error_vtbl *v11;
  std::runtime_error_vtbl *v12;

  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this, (unsigned int *)this->__imp_.__imp_);
    else
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    LOBYTE(this[5].__vftable) = 0;
  }
  imp = (char)a2[4].__imp_.__imp_;
  if (imp)
  {
    p_imp = &a2->__imp_;
    v6 = a2->__imp_.__imp_;
    this->__vftable = a2->__vftable;
    this->__imp_.__imp_ = v6;
    v7 = &this->__imp_;
    v8 = a2[1].__vftable;
    this[1].__vftable = v8;
    if (v8)
    {
      *((_QWORD *)v6 + 2) = v7;
      a2->__vftable = (std::runtime_error_vtbl *)p_imp;
      p_imp->__imp_ = 0;
      a2[1].__vftable = 0;
    }
    else
    {
      this->__vftable = (std::runtime_error_vtbl *)v7;
    }
    LOBYTE(this[1].__imp_.__imp_) = a2[1].__imp_.__imp_;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v9 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v10 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v10;
    v11 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v12 = a2[3].__vftable;
    this[3].__vftable = v12;
    if (v12)
    {
      *((_QWORD *)v10 + 2) = v11;
      a2[2].__vftable = v9;
      v9->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v11;
    }
    *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
  }
  LOBYTE(this[4].__imp_.__imp_) = imp;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

void AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::unhandled_exception()
{
  uint64_t v0;

  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

_BYTE *AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::Awaiter::await_suspend(_BYTE *result)
{
  _BYTE *v1;
  unint64_t *v2;
  void (**v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  std::runtime_error *v6;
  char v7;
  std::runtime_error_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::runtime_error v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v18;
  char v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v1 = result;
  v22 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)(*(_QWORD *)result + 96);
  do
    v3 = (void (**)(_QWORD))__ldaxr(v2);
  while (__stlxr(1uLL, v2));
  if (v3)
  {
    if (v3 == (void (**)(_QWORD))2)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result - 8))(*(_QWORD *)result - 16);
    v4 = (_QWORD *)(*(_QWORD *)result + 128);
    result = (_BYTE *)*v4;
    if (*v4)
    {
      if (result == (_BYTE *)(*(_QWORD *)v1 + 104))
      {
        v21 = v20;
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)result + 24))(result, v20);
      }
      else
      {
        v21 = *(_BYTE **)(*(_QWORD *)v1 + 128);
        *v4 = 0;
      }
    }
    else
    {
      v21 = 0;
    }
    if (v21)
    {
      v5 = *(_QWORD *)v1;
      if (!*(_BYTE *)(v5 + 88))
      {
        __break(1u);
        return result;
      }
      v6 = (std::runtime_error *)(v5 + 8);
      v7 = *(_BYTE *)(v5 + 80);
      if (v7)
      {
        v8 = (std::runtime_error_vtbl *)(v5 + 16);
        v9 = *(_QWORD *)(v5 + 16);
        v13.__vftable = *(std::runtime_error_vtbl **)(v5 + 8);
        v13.__imp_.__imp_ = (const char *)v9;
        *(_QWORD *)&v14 = *(_QWORD *)(v5 + 24);
        if ((_QWORD)v14)
        {
          *(_QWORD *)(v9 + 16) = &v13.__imp_;
          v6->__vftable = v8;
          v8->~runtime_error = 0;
          *(_QWORD *)(v5 + 24) = 0;
        }
        else
        {
          v13.__vftable = (std::runtime_error_vtbl *)&v13.__imp_;
        }
        BYTE8(v14) = *(_BYTE *)(v5 + 32);
      }
      else
      {
        std::runtime_error::runtime_error(&v13, v6);
        v10 = (_QWORD *)(v5 + 48);
        v11 = *(_QWORD *)(v5 + 48);
        v14 = *(_OWORD *)(v5 + 24);
        v13.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v15 = *(uint64_t **)(v5 + 40);
        v16 = v11;
        if (*(_QWORD *)(v5 + 56))
        {
          *(_QWORD *)(v11 + 16) = &v16;
          *(_QWORD *)(v5 + 40) = v10;
          *v10 = 0;
          *(_QWORD *)(v5 + 56) = 0;
        }
        else
        {
          v15 = &v16;
        }
        v18 = *(_OWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
      }
      v19 = v7;
      if (!v21)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, std::runtime_error *))(*(_QWORD *)v21 + 48))(v21, &v13);
      if (v19)
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, (unsigned int *)v13.__imp_.__imp_);
      else
        ((void (*)(std::runtime_error *))v13.~runtime_error)(&v13);
    }
    else
    {
      (*v3)(v3);
    }
    result = v21;
    if (v21 == v20)
    {
      v12 = 4;
      result = v20;
    }
    else
    {
      if (!v21)
        return result;
      v12 = 5;
    }
    return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
  }
  return result;
}

void sub_18CC1B9FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  v2 = (unint64_t *)(v1 + 96);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(2uLL, v2));
  if (v3)
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_8BagValue4ItemINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocat"
                     "orIcEEEENS_3AnyENS3_4lessIvEENS8_INS3_4pairIKSA_SB_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEv"
                     "E13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_8BagValue4ItemINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEEN"
                                "S3_9allocatorIcEEEENS_3AnyENS3_4lessIvEENS8_INS3_4pairIKSA_SB_EEEEEEEENS_5ErrorEE7Promis"
                                "e17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_8BagValue4ItemINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_3AnyENS3_4lessIvEENS8_INS3_4pairIKSA_SB_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_8BagValue4ItemINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_3AnyENS3_4lessIvEENS8_INS3_4pairIKSA_SB_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::runtime_error *std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  std::runtime_error v4;
  std::__shared_weak_count *imp;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::runtime_error_vtbl *p_imp;
  const char *v12;
  std::runtime_error_vtbl *v13;
  std::runtime_error_vtbl *v14;
  unsigned int *v15;
  std::runtime_error_vtbl *v16;
  std::runtime_error_vtbl *v17;
  const char *v18;
  std::runtime_error_vtbl *v19;
  __int128 v20;
  unint64_t *v21;

  if (LOBYTE(this[4].__imp_.__imp_))
  {
    if (LOBYTE(a2[4].__imp_.__imp_))
    {
      v4 = *a2;
      a2->__vftable = 0;
      a2->__imp_.__imp_ = 0;
      imp = (std::__shared_weak_count *)this->__imp_.__imp_;
      *this = v4;
      if (!imp)
        return this;
      p_shared_owners = (unint64_t *)&imp->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_24;
    }
    v8 = (std::__shared_weak_count *)this->__imp_.__imp_;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::runtime_error::runtime_error(this, a2);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    this[2].__vftable = a2[2].__vftable;
    p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v12 = a2[2].__imp_.__imp_;
    this[2].__imp_.__imp_ = v12;
    v13 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v14 = a2[3].__vftable;
    this[3].__vftable = v14;
    if (v14)
    {
      *((_QWORD *)v12 + 2) = v13;
      a2[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v13;
    }
    *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    LOBYTE(this[4].__imp_.__imp_) = 0;
  }
  else
  {
    if (LOBYTE(a2[4].__imp_.__imp_))
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
      *this = *a2;
      a2->__vftable = 0;
      a2->__imp_.__imp_ = 0;
      LOBYTE(this[4].__imp_.__imp_) = 1;
      return this;
    }
    std::runtime_error::operator=(this, a2);
    v16 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v15 = (unsigned int *)this[2].__imp_.__imp_;
    this[1] = a2[1];
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&this[2], v15);
    this[2].__vftable = a2[2].__vftable;
    v17 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v18 = a2[2].__imp_.__imp_;
    this[2].__imp_.__imp_ = v18;
    v19 = a2[3].__vftable;
    this[3].__vftable = v19;
    if (v19)
    {
      *((_QWORD *)v18 + 2) = v16;
      a2[2].__vftable = v17;
      v17->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v16;
    }
    v20 = *(_OWORD *)&a2[3].__imp_.__imp_;
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    imp = (std::__shared_weak_count *)this[4].__vftable;
    *(_OWORD *)&this[3].__imp_.__imp_ = v20;
    if (imp)
    {
      v21 = (unint64_t *)&imp->__shared_owners_;
      do
        v7 = __ldaxr(v21);
      while (__stlxr(v7 - 1, v21));
LABEL_24:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
  }
  return this;
}

void std::__throw_bad_variant_access[abi:fe180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getIsExpiredDataPermitted(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getIsExpiredDataPermitted(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getIsExpiredDataPermitted(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getIsExpiredDataPermitted(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>()
{
  return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getMaxExpirationDuration(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getMaxExpirationDuration(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>()
{
  std::terminate();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getMaxExpirationDuration(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getMaxExpirationDuration(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*(_BYTE *)(a2 + 8))
    v3 = *(_BYTE *)(a3 + 8) == 0;
  else
    v3 = 1;
  if (v3)
    return (*(_BYTE *)(a2 + 8) != 0) == (*(_BYTE *)(a3 + 8) != 0);
  else
    return *(_QWORD *)a2 == *(_QWORD *)a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::hash(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::hash(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>()
{
  return 66740831;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::hash(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::hash(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>(uint64_t a1, _BYTE *a2)
{
  if (a2[8])
    return *(_QWORD *)a2;
  else
    return 0;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[51]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [51]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC1BE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [51]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC1BFE4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::GZip::decompress(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::runtime_error v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[51]>((uint64_t)&v6, 8u, "Gzip compression is not supported on this platform");
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v6);
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)a1 = off_1E2521330;
  v2 = v9;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v2;
  v3 = a1 + 40;
  v4 = v10;
  *(_QWORD *)(a1 + 48) = v10;
  if (v4)
  {
    *(_QWORD *)(v2 + 16) = v3;
    v8 = &v9;
    v9 = 0;
    v10 = 0;
    v2 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v3;
  }
  *(_OWORD *)(a1 + 56) = v11;
  v11 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v6.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v8, (unsigned int *)v2);
  return MEMORY[0x18D7898AC](&v6);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a2 = *a3;
  v3 = a3 + 1;
  v4 = a3[1];
  a2[1] = v4;
  v5 = a2 + 1;
  v6 = a3[2];
  a2[2] = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *a3 = v3;
    *v3 = 0;
    a3[2] = 0;
  }
  else
  {
    *a2 = v5;
  }
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t AMSCore::Any::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 == -1)
  {
    if ((_DWORD)v5 == -1)
    {
LABEL_9:
      *(_DWORD *)(a2 + 24) = 0;
      return a1;
    }
  }
  else if ((_DWORD)v5 == -1)
  {
    ((void (*)(char *, uint64_t))off_1E253D240[v4])(&v9, a1);
    *(_DWORD *)(a1 + 24) = -1;
    goto LABEL_6;
  }
  v8 = a1;
  ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E253CB38[v5])(&v8, a1, a2);
LABEL_6:
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_9;
  if ((_DWORD)v6)
  {
    ((void (*)(char *, uint64_t))off_1E253D240[v6])(&v10, a2);
    goto LABEL_9;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E253D240[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    ((void (*)(char *, __n128 *))off_1E253D240[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[1].n128_u32[2] = 5;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 6)
  {
    ((void (*)(char *, __n128 *))off_1E253D240[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[1].n128_u32[2] = 6;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E253D240[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 7;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 8)
    {
      v7 = (_QWORD *)(a2 + 8);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a2, *(unsigned int **)(a2 + 8));
      *(_QWORD *)a2 = *a3;
      v8 = a3 + 1;
      v9 = a3[1];
      *v7 = v9;
      v10 = a3[2];
      *(_QWORD *)(a2 + 16) = v10;
      if (v10)
      {
        *(_QWORD *)(v9 + 16) = v7;
        *a3 = v8;
        *v8 = 0;
        a3[2] = 0;
      }
      else
      {
        *(_QWORD *)a2 = v7;
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_1E253D240[v5])(&v15, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(_QWORD *)v4 = *a3;
  v11 = a3 + 1;
  v12 = a3[1];
  *(_QWORD *)(v4 + 8) = v12;
  v13 = v4 + 8;
  v14 = a3[2];
  *(_QWORD *)(v4 + 16) = v14;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = v13;
    *a3 = v11;
    *v11 = 0;
    a3[2] = 0;
  }
  else
  {
    *(_QWORD *)v4 = v13;
  }
  *(_DWORD *)(v4 + 24) = 8;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t *a1, void **a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  __n128 result;
  char v13;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 9)
  {
    ((void (*)(char *, uint64_t))off_1E253D240[v5])(&v14, v4);
LABEL_10:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    result = *a3;
    *(__n128 *)v4 = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *(_DWORD *)(v4 + 24) = 9;
    return result;
  }
  v7 = (char *)*a2;
  if (*a2)
  {
    v8 = (char *)a2[1];
    v9 = *a2;
    if (v8 != v7)
    {
      do
      {
        v10 = v8 - 32;
        v11 = *((unsigned int *)v8 - 2);
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, char *))off_1E253D240[v11])(&v13, v8 - 32);
        *((_DWORD *)v8 - 2) = -1;
        v8 -= 32;
      }
      while (v10 != v7);
      v9 = *a2;
    }
    a2[1] = v7;
    operator delete(v9);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *a3;
  *(__n128 *)a2 = *a3;
  a2[2] = (void *)a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t AMSCore::Any::Any(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)result = *a2;
  v2 = a2 + 1;
  v3 = a2[1];
  *(_QWORD *)(result + 8) = v3;
  v4 = result + 8;
  v5 = a2[2];
  *(_QWORD *)(result + 16) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *a2 = v2;
    *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)result = v4;
  }
  *(_DWORD *)(result + 24) = 8;
  return result;
}

__n128 AMSCore::Any::Any(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = 5;
  return result;
}

{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = 6;
  return result;
}

__n128 AMSCore::Any::Any(uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(_DWORD *)(a1 + 24) = 9;
  return result;
}

uint64_t AMSCore::Any::BOOLean(uint64_t a1, void *__s1, size_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 v20;
  BOOL v21;
  uint64_t v22;
  double v24[3];
  int v25;
  char v26;
  char v27;

  v3 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (!v4)
    goto LABEL_32;
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v4 + 55);
      v9 = v8 >= 0 ? v4 + 4 : (uint64_t *)v4[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : v4[5];
      v11 = v10 >= a3 ? a3 : v10;
      v12 = memcmp(__s1, v9, v11);
      if (v12)
        break;
      if (a3 <= v10)
        goto LABEL_17;
LABEL_3:
      v4 = (uint64_t *)v4[1];
      if (!v4)
        goto LABEL_18;
    }
    if ((v12 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v7 = v4;
    v4 = (uint64_t *)*v4;
  }
  while (v4);
LABEL_18:
  if (v7 == v3)
    goto LABEL_32;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= a3)
    v16 = a3;
  else
    v16 = v15;
  v17 = memcmp(__s1, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_30;
LABEL_32:
    v18 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (a3 < v15)
      goto LABEL_32;
LABEL_30:
    v18 = v7 + 7;
  }
  LOBYTE(v24[0]) = 0;
  v25 = -1;
  v19 = *((unsigned int *)v18 + 6);
  if ((_DWORD)v19 == -1)
    return 0;
  ((void (*)(char *, double *))off_1E253D1E0[v19])(&v26, v24);
  v25 = v19;
  switch((int)v19)
  {
    case 1:
      v21 = LOBYTE(v24[0]) == 0;
      goto LABEL_39;
    case 2:
      v20.n128_f64[0] = v24[0];
      v21 = v24[0] == 0.0;
      goto LABEL_39;
    case 3:
    case 4:
      v21 = *(_QWORD *)&v24[0] == 0;
LABEL_39:
      v22 = !v21;
      break;
    default:
      v22 = 0;
      break;
  }
  ((void (*)(char *, double *, __n128))off_1E253D240[v19])(&v27, v24, v20);
  return v22;
}

void sub_18CC1CB98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1)
    ((void (*)(char *, char *))off_1E253D240[a13])(&a18, &a10);
  a13 = -1;
  __clang_call_terminate(a1);
}

uint64_t *AMSCore::Any::Null(AMSCore::Any *this)
{
  return &AMSCore::Any::Null(void)::null;
}

void AMSCore::Any::string(uint64_t a1, uint64_t a2, const void **a3)
{
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;

  v4 = *((char *)a3 + 23);
  if (v4 >= 0)
    v5 = a3;
  else
    v5 = *a3;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = (uint64_t *)(a2 + 8);
  v8 = *(uint64_t **)(a2 + 8);
  if (!v8)
    goto LABEL_40;
  v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      v10 = *((char *)v8 + 55);
      v11 = v10 >= 0 ? v8 + 4 : (uint64_t *)v8[4];
      v12 = v10 >= 0 ? *((unsigned __int8 *)v8 + 55) : v8[5];
      v13 = v12 >= v6 ? v6 : v12;
      v14 = memcmp(v5, v11, v13);
      if (!v14)
        break;
      if ((v14 & 0x80000000) == 0)
        goto LABEL_11;
LABEL_9:
      v9 = v8;
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_26;
    }
    if (v6 <= v12)
      goto LABEL_9;
LABEL_11:
    v8 = (uint64_t *)v8[1];
  }
  while (v8);
LABEL_26:
  if (v9 == v7)
    goto LABEL_40;
  v15 = *((char *)v9 + 55);
  if (v15 >= 0)
    v16 = v9 + 4;
  else
    v16 = (const void *)v9[4];
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)v9 + 55);
  else
    v17 = v9[5];
  if (v17 >= v6)
    v18 = v6;
  else
    v18 = v17;
  v19 = memcmp(v5, v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_40:
    v20 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v6 < v17)
      goto LABEL_40;
LABEL_38:
    v20 = v9 + 7;
  }
  LOBYTE(v22) = 0;
  v24 = -1;
  v21 = *((unsigned int *)v20 + 6);
  if ((_DWORD)v21 == -1
    || (((void (*)(char *, __int128 *))off_1E253D1E0[v21])(&v25, &v22), v24 = v21, (_DWORD)v21 != 5))
  {
    *(_BYTE *)(a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
    if ((_DWORD)v21 == -1)
      return;
    goto LABEL_46;
  }
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    *(_OWORD *)a1 = v22;
    *(_QWORD *)(a1 + 16) = v23;
    LODWORD(v21) = 5;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external((std::string *)a1, (const std::string::value_type *)v22, *((std::string::size_type *)&v22 + 1));
  LODWORD(v21) = v24;
  if (v24 != -1)
LABEL_46:
    ((void (*)(char *, __int128 *))off_1E253D240[v21])(&v26, &v22);
}

void sub_18CC1CDA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1)
    ((void (*)(char *, char *))off_1E253D240[a13])(&a18, &a10);
  a13 = -1;
  __clang_call_terminate(a1);
}

uint64_t AMSCore::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  double v11;
  double v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  BOOL v28;
  const void **v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  const void *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const void **v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  _BOOL4 v63;

  v2 = *((_DWORD *)a1 + 6);
  if (v2 == -1)
    v3 = 0;
  else
    v3 = v2;
  v4 = *((_DWORD *)a2 + 6);
  if (v4 == -1)
    v5 = 0;
  else
    v5 = v4;
  if ((_DWORD)v3 == (_DWORD)v5)
  {
    v6 = 1;
    switch((int)v3)
    {
      case 0:
        return v6;
      case 1:
        return *a1 == *a2;
      case 2:
        return *(double *)a1 == *(double *)a2;
      case 3:
      case 4:
      case 7:
        return *(_QWORD *)a1 == *(_QWORD *)a2;
      case 5:
        if (v2 == 5)
          v13 = a1;
        else
          v13 = 0;
        if (v4 == 5)
          v14 = a2;
        else
          v14 = 0;
        v15 = v13[23];
        v16 = *((_QWORD *)v13 + 1);
        if ((v15 & 0x80u) == 0)
          v17 = v13[23];
        else
          v17 = *((_QWORD *)v13 + 1);
        v18 = v14[23];
        v19 = (char)v18;
        if ((v18 & 0x80u) != 0)
          v18 = *((_QWORD *)v14 + 1);
        if (v17 != v18)
          return 0;
        if (v19 >= 0)
          v20 = v14;
        else
          v20 = *(unsigned __int8 **)v14;
        if ((v15 & 0x80) != 0)
        {
          v34 = *(const void **)v13;
          return memcmp(v34, v20, v16) == 0;
        }
        else if (v13[23])
        {
          v21 = v15 - 1;
          do
          {
            v23 = *a1++;
            v22 = v23;
            v25 = *v20++;
            v24 = v25;
            v27 = v21-- != 0;
            v28 = v22 == v24;
            v6 = v22 == v24;
          }
          while (v28 && v27);
        }
        else
        {
          return 1;
        }
        return v6;
      case 6:
        if (v2 == 6)
          v29 = (const void **)a1;
        else
          v29 = 0;
        if (v4 == 6)
          v30 = a2;
        else
          v30 = 0;
        v31 = *((char *)v29 + 23);
        if (v31 >= 0)
          v16 = *((unsigned __int8 *)v29 + 23);
        else
          v16 = (size_t)v29[1];
        v32 = v30[23];
        v33 = (char)v32;
        if ((v32 & 0x80u) != 0)
          v32 = *((_QWORD *)v30 + 1);
        if (v16 != v32)
          return 0;
        if (v33 >= 0)
          v20 = v30;
        else
          v20 = *(unsigned __int8 **)v30;
        if (v31 >= 0)
          v34 = v29;
        else
          v34 = *v29;
        return memcmp(v34, v20, v16) == 0;
      case 8:
        if (v2 == 8)
          v35 = a1;
        else
          v35 = 0;
        if (v4 == 8)
          v36 = a2;
        else
          v36 = 0;
        if (v35[2] != v36[2])
          return 0;
        v39 = (_QWORD *)*v35;
        v37 = v35 + 1;
        v38 = v39;
        if (v39 == v37)
          return 1;
        v40 = (_QWORD *)*v36;
        break;
      case 9:
        if (v2 == 9)
          v51 = (uint64_t *)a1;
        else
          v51 = 0;
        if (v4 == 9)
          v52 = (uint64_t *)a2;
        else
          v52 = 0;
        v53 = *v51;
        v54 = v51[1];
        v55 = *v52;
        if (v54 - *v51 != v52[1] - *v52)
          return 0;
        if (v53 == v54)
          return 1;
        do
        {
          v6 = AMSCore::operator==(v53, v55);
          if (!(_DWORD)v6)
            break;
          v53 += 32;
          v55 += 32;
        }
        while (v53 != v54);
        return v6;
      default:
        return 0;
    }
    while (1)
    {
      v41 = *((unsigned __int8 *)v38 + 55);
      if ((v41 & 0x80u) == 0)
        v42 = *((unsigned __int8 *)v38 + 55);
      else
        v42 = v38[5];
      v43 = *((unsigned __int8 *)v40 + 55);
      v44 = (char)v43;
      if ((v43 & 0x80u) != 0)
        v43 = v40[5];
      if (v42 != v43)
        return 0;
      v45 = (const void **)(v38 + 4);
      if (v44 >= 0)
        v46 = (unsigned __int8 *)(v40 + 4);
      else
        v46 = (unsigned __int8 *)v40[4];
      if ((v41 & 0x80) != 0)
      {
        if (memcmp(*v45, v46, v38[5]))
          return 0;
      }
      else if (*((_BYTE *)v38 + 55))
      {
        while (*(unsigned __int8 *)v45 == *v46)
        {
          v45 = (const void **)((char *)v45 + 1);
          ++v46;
          if (!--v41)
            goto LABEL_93;
        }
        return 0;
      }
LABEL_93:
      if (!AMSCore::operator==(v38 + 7, v40 + 7))
        return 0;
      v47 = (_QWORD *)v38[1];
      v48 = v38;
      if (v47)
      {
        do
        {
          v38 = v47;
          v47 = (_QWORD *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v48[2];
          v28 = *v38 == (_QWORD)v48;
          v48 = v38;
        }
        while (!v28);
      }
      v49 = (_QWORD *)v40[1];
      if (v49)
      {
        do
        {
          v50 = v49;
          v49 = (_QWORD *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          v50 = (_QWORD *)v40[2];
          v28 = *v50 == (_QWORD)v40;
          v40 = v50;
        }
        while (!v28);
      }
      v6 = 1;
      v40 = v50;
      if (v38 == v37)
        return v6;
    }
  }
  if ((unint64_t)(v3 - 2) > 2 || (unint64_t)(v5 - 2) > 2)
    return 0;
  if (v2 == 2 || v4 == 2)
  {
    v11 = 0.0;
    switch((int)v3)
    {
      case 1:
        v12 = 0.0;
        if (*a1)
          v12 = 1.0;
        goto LABEL_121;
      case 2:
        v12 = *(double *)a1;
        goto LABEL_121;
      case 3:
        v12 = (double)*(uint64_t *)a1;
        goto LABEL_121;
      case 4:
        v12 = (double)*(unint64_t *)a1;
LABEL_121:
        v56 = 1;
        break;
      default:
        v56 = 0;
        v12 = 0.0;
        break;
    }
    switch((int)v5)
    {
      case 1:
        if (*a2)
          v11 = 1.0;
        goto LABEL_130;
      case 2:
        v11 = *(double *)a2;
        goto LABEL_130;
      case 3:
        v11 = (double)*(uint64_t *)a2;
        goto LABEL_130;
      case 4:
        v11 = (double)*(unint64_t *)a2;
LABEL_130:
        v57 = 1;
        break;
      default:
        v57 = 0;
        break;
    }
    if ((v56 & v57) != 0)
      return v12 == v11;
    else
      return v56 ^ v57 ^ 1u;
  }
  else
  {
    v8 = 0;
    LOBYTE(v9) = 0;
    v10 = 0;
    switch((int)v3)
    {
      case 1:
        v8 = 0;
        LOBYTE(v9) = *a1;
        v10 = 1;
        break;
      case 2:
        v9 = (uint64_t)*(double *)a1;
        goto LABEL_138;
      case 3:
      case 4:
        v9 = *(_QWORD *)a1;
        goto LABEL_138;
      case 5:
      case 6:
        break;
      case 7:
        v9 = *(_QWORD *)a1 / 1000;
LABEL_138:
        v8 = v9 & 0xFFFFFFFFFFFFFF00;
        v10 = 1;
        break;
      default:
        v10 = 0;
        break;
    }
    v58 = 0;
    LOBYTE(v59) = 0;
    v60 = v8 | v9;
    v62 = v5 - 1;
    v61 = 0;
    switch(v62)
    {
      case 0:
        v58 = 0;
        LOBYTE(v59) = *a2;
        v61 = 1;
        break;
      case 1:
        v59 = (uint64_t)*(double *)a2;
        goto LABEL_144;
      case 2:
      case 3:
        v59 = *(_QWORD *)a2;
        goto LABEL_144;
      case 4:
      case 5:
        break;
      case 6:
        v59 = *(_QWORD *)a2 / 1000;
LABEL_144:
        v58 = v59 & 0xFFFFFFFFFFFFFF00;
        v61 = 1;
        break;
      default:
        v61 = 0;
        break;
    }
    v63 = v60 == (v58 | v59);
    if ((v10 & v61) != 0)
      return v63;
    else
      return v10 ^ v61 ^ 1u;
  }
}

BOOL AMSCore::operator==(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  if (*((_DWORD *)a1 + 6) != 5)
    return 0;
  v4 = *((char *)a1 + 23);
  v5 = v4 >= 0 ? *((unsigned __int8 *)a1 + 23) : (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

void AMSCore::Log::error<char const(&)[21],std::string_view &>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  _QWORD v21[8];
  void *__p[2];
  __int128 v23;
  int v24;
  uint64_t v25[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v18);
  v2 = v18;
  if (*(int *)(v18 + 8) <= 4)
  {
    v3 = MEMORY[0x1E0DE4FE0];
    v4 = MEMORY[0x1E0DE4FE0] + 64;
    v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v25[0] = MEMORY[0x1E0DE4FE0] + 64;
    v20 = v6;
    *(_QWORD *)((char *)&v21[-1] + *(_QWORD *)(v6 - 24)) = v7;
    v8 = (std::ios_base *)((char *)&v21[-1] + *(_QWORD *)(v20 - 24));
    std::ios_base::init(v8, v21);
    v8[1].__vftable = 0;
    v8[1].__fmtflags_ = -1;
    v20 = v3 + 24;
    v25[0] = v4;
    std::streambuf::basic_streambuf();
    v9 = MEMORY[0x1E0DE4FB8];
    v21[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v23 = 0u;
    v24 = 16;
    v10 = *(_QWORD *)(v20 - 24);
    if ((v11 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Unexpected charset: ", 20);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v20, *a1, a1[1]);
    v12 = v21[5];
    v13 = (char *)&v21[-1] + *(_QWORD *)(v20 - 24);
    if ((v13[32] & 5) != 0)
    {
      v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v13 + 5) + 32))(&rep, *((_QWORD *)v13 + 5), 0, 1, 16);
      v14 = v30;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v27 = 4;
    v28 = v12;
    v29 = v14;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v2 + 16) + 16))(*(_QWORD *)(v2 + 16), "data", 4, &rep);
    v20 = *v5;
    *(_QWORD *)((char *)&v21[-1] + *(_QWORD *)(v20 - 24)) = v5[3];
    v21[0] = v9 + 16;
    if (SBYTE7(v23) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v25);
  }
  v15 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_18CC1D660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[19],AMSCore::IData::Encoding &>(uint64_t a1, unsigned int a2, int *a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  std::system_error v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void *__p[2];
  __int128 v24;
  int v25;
  uint64_t v26[19];
  std::error_code v27;

  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v26[0] = MEMORY[0x1E0DE4FE0] + 64;
  v18.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&v18.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&v18 + (unint64_t)v18.__vftable[-1].~system_error);
  std::ios_base::init(v11, &v18.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v18.__vftable = v6 + 1;
  v26[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v18.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v24 = 0u;
  v25 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Unknown encoding: ", 18);
  AMSCore::IData::operator<<((uint64_t)&v18, *a3);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v18.__imp_, &v17);
  v18.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&v18.__vftable + (unint64_t)v18.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  v18.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v26);
  *(_QWORD *)&v27.__val_ = a2;
  v27.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v18, v27, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v20 = 0;
  v21 = 0;
  v18.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v19 = &v20;
  v22 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v18);
  *(std::error_code *)(a1 + 16) = v18.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v13 = v20;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v13;
  v14 = a1 + 40;
  v15 = v21;
  *(_QWORD *)(a1 + 48) = v21;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    v13 = 0;
    v19 = &v20;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v14;
  }
  *(_OWORD *)(a1 + 56) = v22;
  v22 = 0uLL;
  v18.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, (unsigned int *)v13);
  return MEMORY[0x18D7898AC](&v18);
}

void sub_18CC1D8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC1D8E4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::IData::operator<<(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_18CC1D940(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, char a10, int a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;
  void *v20[2];
  char v21;

  v21 = 7;
  strcpy((char *)v20, "UNKNOWN");
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, 7);
  if (v21 < 0)
    operator delete(v20[0]);
}

void sub_18CC1DA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 AMSCore::serialize(std::string *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  __n128 result;
  std::string v12;
  std::string v13;
  uint64_t v14;
  _QWORD v15[8];
  __int128 __p;
  __int128 v17;
  int v18;
  uint64_t v19[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v19[0] = MEMORY[0x1E0DE4FE0] + 64;
  v14 = v7;
  *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
  std::ios_base::init(v9, v15);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v14 = v4 + 24;
  v19[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8] + 16;
  v15[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v17 = 0u;
  v18 = 16;
  std::stringbuf::str[abi:fe180100]((uint64_t)v15, &v13);
  v12 = v13;
  v14 = *v6;
  *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v6[3];
  v15[0] = v10;
  if (SBYTE7(v17) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v19);
  result = *(__n128 *)&v12.__r_.__value_.__l.__data_;
  *a1 = v12;
  a1[3].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_18CC1DBE0(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::deserialize(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  std::runtime_error_vtbl *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  char v32;
  const void *v33;
  const char *imp;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  size_t v40;
  size_t v41;
  int v42;
  int v43;
  _OWORD *v44;
  int v45;
  std::system_error_vtbl *v46;
  uint64_t *v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  __n128 v53;
  std::system_error_vtbl *v54;
  uint64_t v55;
  uint64_t v56;
  std::system_error_vtbl *v57;
  std::ios_base *v58;
  uint64_t v59;
  unsigned int *v60;
  std::runtime_error *v61;
  uint64_t v62;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v64;
  uint64_t v65;
  uint64_t v66;
  char *v68;
  int v69;
  _BYTE __what_arg[32];
  std::runtime_error_vtbl *v71;
  uint64_t v72;
  std::runtime_error_vtbl *v73;
  __int128 v74;
  void *__p;
  _BYTE *v76;
  void *v77;
  char *v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t v81;
  std::system_error v82;
  std::runtime_error_vtbl *v83;
  uint64_t v84;
  std::runtime_error_vtbl *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90[22];
  std::error_code v91;

  v69 = a3;
  switch(a3)
  {
    case 1:
      AMSCore::JsonData::decode((uint64_t *)a2, a1);
      return;
    case 2:
      v7 = *(char *)(a2 + 23);
      if (v7 >= 0)
        v8 = a2;
      else
        v8 = *(_QWORD *)a2;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(a2 + 23);
      else
        v9 = *(_QWORD *)(a2 + 8);
      AMSCore::PListData::decode(v8, v9, a1);
      return;
    case 3:
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__what_arg, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)__what_arg = *(_OWORD *)a2;
        *(_QWORD *)&__what_arg[16] = *(_QWORD *)(a2 + 16);
      }
      v82.std::runtime_error = *(std::runtime_error *)__what_arg;
      *(_QWORD *)&v82.__ec_.__val_ = *(_QWORD *)&__what_arg[16];
      memset(__what_arg, 0, 24);
      LODWORD(v82.__ec_.__cat_) = 6;
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
      v52 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_((uint64_t)&v79, (__n128 *)a1, (__n128 *)&v82);
      *(_DWORD *)(a1 + 24) = 6;
      if (LODWORD(v82.__ec_.__cat_) == -1)
        goto LABEL_100;
      if (LODWORD(v82.__ec_.__cat_))
      {
        ((void (*)(uint64_t ***, std::system_error *, __n128))off_1E253D240[LODWORD(v82.__ec_.__cat_)])(&v79, &v82, v52);
LABEL_100:
        LODWORD(v82.__ec_.__cat_) = 0;
      }
      *(_BYTE *)(a1 + 72) = 1;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v79, &v82);
      LODWORD(v82.__ec_.__cat_) = -1;
      if ((__what_arg[23] & 0x80000000) != 0)
        operator delete(*(void **)__what_arg);
      return;
    case 4:
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v82, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v82.std::runtime_error = *(std::runtime_error *)a2;
        *(_QWORD *)&v82.__ec_.__val_ = *(_QWORD *)(a2 + 16);
      }
      LODWORD(v82.__ec_.__cat_) = 6;
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
      v53 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_((uint64_t)__what_arg, (__n128 *)a1, (__n128 *)&v82);
      *(_DWORD *)(a1 + 24) = 6;
      if (LODWORD(v82.__ec_.__cat_) == -1)
        goto LABEL_107;
      if (LODWORD(v82.__ec_.__cat_))
      {
        ((void (*)(_BYTE *, std::system_error *, __n128))off_1E253D240[LODWORD(v82.__ec_.__cat_)])(__what_arg, &v82, v53);
LABEL_107:
        LODWORD(v82.__ec_.__cat_) = 0;
      }
      *(_BYTE *)(a1 + 72) = 1;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(__what_arg, &v82);
      return;
    case 5:
      v10 = *(_QWORD *)(a2 + 8);
      if (*(char *)(a2 + 23) >= 0)
      {
        v11 = *(unsigned __int8 *)(a2 + 23);
      }
      else
      {
        a2 = *(_QWORD *)a2;
        v11 = v10;
      }
      v12 = (uint64_t *)&v80;
      v80 = 0;
      v81 = 0;
      v79 = &v80;
      v66 = a2;
      v65 = v11;
      AMSCore::StringUtils::split((char **)&v77, a2, v11, "&", 1, 0xFFFFFFFFFFFFFFFFLL);
      v14 = (char *)v77;
      v13 = v78;
      if (v77 == v78)
        goto LABEL_94;
      v68 = v78;
      break;
    default:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[19],AMSCore::IData::Encoding &>((uint64_t)&v82, 4u, &v69);
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v82);
      *(std::error_code *)(a1 + 16) = v82.__ec_;
      *(_QWORD *)a1 = off_1E2521330;
      v4 = v84;
      *(_QWORD *)(a1 + 32) = v83;
      *(_QWORD *)(a1 + 40) = v4;
      v5 = a1 + 40;
      v6 = v85;
      *(_QWORD *)(a1 + 48) = v85;
      if (v6)
      {
        *(_QWORD *)(v4 + 16) = v5;
        v83 = (std::runtime_error_vtbl *)&v84;
        v84 = 0;
        v85 = 0;
        v4 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v5;
      }
      *(_OWORD *)(a1 + 56) = v86;
      v86 = 0uLL;
      *(_BYTE *)(a1 + 72) = 0;
      v82.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, (unsigned int *)v4);
      MEMORY[0x18D7898AC](&v82);
      return;
  }
  while (1)
  {
    AMSCore::StringUtils::split((char **)&__p, *(_QWORD *)v14, *((_QWORD *)v14 + 1), "=", 1, 1uLL);
    v15 = __p;
    if (__p == v76)
    {
      v23 = (char *)operator new(0x58uLL);
      v24 = (uint64_t *)v23;
      *(_WORD *)(v23 + 55) = 0;
      v23[32] = 0;
      v23[79] = 0;
      *((_DWORD *)v23 + 20) = 5;
      v25 = (uint64_t **)v12;
      v26 = v80;
      if (!v80)
      {
LABEL_41:
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = v25;
        *v25 = (uint64_t *)v23;
        if (*v79)
        {
          v79 = (uint64_t **)*v79;
          v24 = *v25;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v80, v24);
        ++v81;
        goto LABEL_90;
      }
      while (1)
      {
        v25 = (uint64_t **)v26;
        v27 = (uint64_t *)*((unsigned __int8 *)v26 + 55);
        if ((char)v27 < 0)
          v27 = v25[5];
        if (!v27)
          break;
        v26 = *v25;
        if (!*v25)
          goto LABEL_41;
      }
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v82, (uint64_t)(v23 + 56));
      v45 = *((char *)v24 + 55);
      *((_DWORD *)v24 + 20) = -1;
      if (v45 < 0)
        operator delete((void *)v24[4]);
      v46 = (std::system_error_vtbl *)v24;
      goto LABEL_89;
    }
    v16 = v76 - (_BYTE *)__p;
    v17 = (v76 - (_BYTE *)__p) >> 4;
    if (v17 == 2)
      break;
    if (v17 != 1)
    {
      v54 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v55 = MEMORY[0x1E0DE4FE0] + 64;
      v90[0] = MEMORY[0x1E0DE4FE0] + 64;
      v56 = MEMORY[0x1E0DE4F60];
      v57 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v82.__vftable = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      *(std::system_error_vtbl **)((char *)&v82.__vftable + (unint64_t)v82.__vftable[-1].~system_error) = v57;
      v58 = (std::ios_base *)((char *)&v82 + (unint64_t)v82.__vftable[-1].~system_error);
      std::ios_base::init(v58, &v82.__imp_);
      v58[1].__vftable = 0;
      v58[1].__fmtflags_ = -1;
      v82.__vftable = v54 + 1;
      v90[0] = v55;
      std::streambuf::basic_streambuf();
      v59 = MEMORY[0x1E0DE4FB8];
      v82.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v87 = 0u;
      v88 = 0u;
      v89 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Received invalid query parameters. encoded = ", 45);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v82, v66, v65);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v82.__imp_, (std::string *)__what_arg);
      v82.__vftable = *(std::system_error_vtbl **)v56;
      *(std::system_error_vtbl **)((char *)&v82.__vftable + (unint64_t)v82.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v56 + 24);
      v82.__imp_.__imp_ = (const char *)(v59 + 16);
      if (SBYTE7(v88) < 0)
        operator delete((void *)v87);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v90);
      v91.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v91.__val_ = 3;
      std::system_error::system_error(&v82, v91, (const std::string *)__what_arg);
      if ((__what_arg[23] & 0x80000000) != 0)
        operator delete(*(void **)__what_arg);
      v82.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v83 = (std::runtime_error_vtbl *)&v84;
      v84 = 0;
      v86 = 0uLL;
      v85 = 0;
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v82);
      *(std::error_code *)&__what_arg[16] = v82.__ec_;
      *(_QWORD *)__what_arg = off_1E2521330;
      v60 = (unsigned int *)v84;
      v71 = v83;
      v72 = v84;
      v73 = v85;
      if (v85)
      {
        *(_QWORD *)(v84 + 16) = &v72;
        v60 = 0;
        v83 = (std::runtime_error_vtbl *)&v84;
        v84 = 0;
        v85 = 0;
      }
      else
      {
        v71 = (std::runtime_error_vtbl *)&v72;
      }
      v74 = v86;
      v86 = 0uLL;
      v82.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, v60);
      MEMORY[0x18D7898AC](&v82);
      v61 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)__what_arg);
      v61[1] = *(std::runtime_error *)&__what_arg[16];
      v61->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v62 = v72;
      v61[2].__vftable = v71;
      v61[2].__imp_.__imp_ = (const char *)v62;
      p_imp = (std::runtime_error_vtbl *)&v61[2].__imp_;
      v64 = v73;
      v61[3].__vftable = v73;
      if (v64)
      {
        *(_QWORD *)(v62 + 16) = p_imp;
        v62 = 0;
        v71 = (std::runtime_error_vtbl *)&v72;
        v72 = 0;
        v73 = 0;
      }
      else
      {
        v61[2].__vftable = p_imp;
      }
      *(_OWORD *)&v61[3].__imp_.__imp_ = v74;
      v74 = 0uLL;
      LOBYTE(v61[4].__imp_.__imp_) = 0;
      *(_QWORD *)__what_arg = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v71, (unsigned int *)v62);
      MEMORY[0x18D7898AC](__what_arg);
      if (v15)
        operator delete(v15);
      goto LABEL_113;
    }
    if (!*((_QWORD *)v14 + 1))
      goto LABEL_129;
    if (**(_BYTE **)v14 == 61)
    {
      AMSCore::URL::decode((std::string *)&v82, *(_QWORD *)__p, *((_QWORD *)__p + 1));
      v18 = (char *)operator new(0x58uLL);
      v19 = (uint64_t *)v18;
      v18[55] = 0;
      v18[32] = 0;
      *(std::runtime_error *)(v18 + 56) = v82.std::runtime_error;
      *((_QWORD *)v18 + 9) = *(_QWORD *)&v82.__ec_.__val_;
      memset(&v82, 0, 24);
      *((_DWORD *)v18 + 20) = 5;
      v20 = v12;
      v21 = v80;
      if (v80)
      {
        while (1)
        {
          v20 = v21;
          v22 = *((unsigned __int8 *)v21 + 55);
          if ((v22 & 0x80u) != 0)
            v22 = v20[5];
          if (!v22)
            break;
          v21 = (uint64_t *)*v20;
          if (!*v20)
            goto LABEL_32;
        }
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)__what_arg, (uint64_t)(v18 + 56));
        v48 = *((char *)v19 + 55);
        *((_DWORD *)v19 + 20) = -1;
        if (v48 < 0)
          operator delete((void *)v19[4]);
        v47 = v19;
        goto LABEL_87;
      }
LABEL_32:
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = v20;
      *v20 = (uint64_t)v18;
      if (*v79)
      {
        v79 = (uint64_t **)*v79;
        v19 = (uint64_t *)*v20;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v80, v19);
      ++v81;
      if ((*((char *)&v82.__ec_.__val_ + 7) & 0x80000000) == 0)
        goto LABEL_90;
LABEL_88:
      v46 = v82.__vftable;
LABEL_89:
      operator delete(v46);
      goto LABEL_90;
    }
    AMSCore::URL::decode((std::string *)&v82, *(_QWORD *)__p, *((_QWORD *)__p + 1));
    v28 = v80;
    v29 = v12;
    v30 = v12;
    v31 = v12;
    if (v80)
    {
      v32 = *((_BYTE *)&v82.__ec_.__val_ + 7);
      if (*((char *)&v82.__ec_.__val_ + 7) >= 0)
        v33 = &v82;
      else
        v33 = v82.__vftable;
      if (*((char *)&v82.__ec_.__val_ + 7) >= 0)
        imp = (const char *)*((unsigned __int8 *)&v82.__ec_.__val_ + 7);
      else
        imp = v82.__imp_.__imp_;
      while (1)
      {
        v31 = v28;
        v37 = v28[4];
        v35 = v28 + 4;
        v36 = (uint64_t *)v37;
        v38 = *((char *)v35 + 23);
        if (v38 >= 0)
          v39 = v35;
        else
          v39 = v36;
        if (v38 >= 0)
          v40 = *((unsigned __int8 *)v35 + 23);
        else
          v40 = v35[1];
        if (v40 >= (unint64_t)imp)
          v41 = (size_t)imp;
        else
          v41 = v40;
        v42 = memcmp(v33, v39, v41);
        if (v42)
        {
          if (v42 < 0)
            goto LABEL_55;
LABEL_69:
          v43 = memcmp(v39, v33, v41);
          if (v43)
          {
            if ((v43 & 0x80000000) == 0)
              goto LABEL_92;
          }
          else if (v40 >= (unint64_t)imp)
          {
LABEL_92:
            v12 = v30;
            v13 = v68;
            if (v32 < 0)
              goto LABEL_78;
            goto LABEL_90;
          }
          v28 = (uint64_t *)v31[1];
          if (!v28)
          {
            v29 = v31 + 1;
            break;
          }
        }
        else
        {
          if ((unint64_t)imp >= v40)
            goto LABEL_69;
LABEL_55:
          v28 = (uint64_t *)*v31;
          v29 = v31;
          if (!*v31)
            break;
        }
      }
    }
    v44 = operator new(0x58uLL);
    v12 = v30;
    v13 = v68;
    v44[2] = v82.std::runtime_error;
    *((_QWORD *)v44 + 6) = *(_QWORD *)&v82.__ec_.__val_;
    memset(&v82, 0, 24);
    *((_BYTE *)v44 + 56) = 0;
    *((_BYTE *)v44 + 79) = 0;
    *((_DWORD *)v44 + 20) = 5;
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    *((_QWORD *)v44 + 2) = v31;
    *v29 = (uint64_t)v44;
    if (*v79)
    {
      v79 = (uint64_t **)*v79;
      v44 = (_OWORD *)*v29;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v80, (uint64_t *)v44);
    ++v81;
    if ((*((_BYTE *)&v82.__ec_.__val_ + 7) & 0x80) != 0)
LABEL_78:
      operator delete(v82.__vftable);
LABEL_90:
    if (__p)
      operator delete(__p);
    v14 += 16;
    if (v14 == v13)
    {
LABEL_94:
      *(_QWORD *)a1 = v79;
      v49 = v80;
      v50 = v81;
      *(_QWORD *)(a1 + 8) = v80;
      v51 = a1 + 8;
      *(_QWORD *)(a1 + 16) = v50;
      if (v50)
      {
        v49[2] = v51;
        v79 = (uint64_t **)v12;
        *v12 = 0;
        v12[1] = 0;
      }
      else
      {
        *(_QWORD *)a1 = v51;
      }
      *(_DWORD *)(a1 + 24) = 8;
      *(_BYTE *)(a1 + 72) = 1;
LABEL_113:
      if (v77)
        operator delete(v77);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v79, (unsigned int *)v80);
      return;
    }
  }
  AMSCore::URL::decode((std::string *)&v82, *(_QWORD *)__p, *((_QWORD *)__p + 1));
  if (v16 > 0x10)
  {
    AMSCore::URL::decode((std::string *)__what_arg, *((_QWORD *)v15 + 2), *((_QWORD *)v15 + 3));
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::string,std::string>((uint64_t **)&v79, (const void **)&v82.__vftable, (uint64_t)&v82, (uint64_t)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
    {
      v47 = *(uint64_t **)__what_arg;
LABEL_87:
      operator delete(v47);
      if ((*((char *)&v82.__ec_.__val_ + 7) & 0x80000000) == 0)
        goto LABEL_90;
    }
    else if ((*((char *)&v82.__ec_.__val_ + 7) & 0x80000000) == 0)
    {
      goto LABEL_90;
    }
    goto LABEL_88;
  }
LABEL_129:
  __break(1u);
}

void sub_18CC1E5B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a20 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void AMSCore::HTTPCacheDataAccessObject::~HTTPCacheDataAccessObject(AMSCore::HTTPCacheDataAccessObject *this)
{
  AMSCore::HTTPCacheDataAccessObject::~HTTPCacheDataAccessObject(this);
  JUMPOUT(0x18D789BDCLL);
}

{
  uint64_t v2;
  uint64_t v3;
  AMSCore::HTTPCacheDataAccessObject *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  AMSCore::HTTPCacheDataAccessObject *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  AMSCore::HTTPCacheDataAccessObject *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  *(_QWORD *)this = &off_1E25211F8;
  v2 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v2)
  {
    v23 = v2;
    v3 = *((_QWORD *)this + 51);
    if (!v3)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v23);
  }
  v4 = (AMSCore::HTTPCacheDataAccessObject *)*((_QWORD *)this + 51);
  if (v4 == (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 384))
  {
    v5 = 4;
    v4 = (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 384);
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 46);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v9)
  {
    v23 = v9;
    v10 = *((_QWORD *)this + 44);
    if (!v10)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v23);
  }
  v11 = (AMSCore::HTTPCacheDataAccessObject *)*((_QWORD *)this + 44);
  if (v11 == (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 328))
  {
    v12 = 4;
    v11 = (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 328);
    goto LABEL_21;
  }
  if (v11)
  {
    v12 = 5;
LABEL_21:
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v16)
  {
    v23 = v16;
    v17 = *((_QWORD *)this + 37);
    if (!v17)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v23);
  }
  v18 = (AMSCore::HTTPCacheDataAccessObject *)*((_QWORD *)this + 37);
  if (v18 == (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 272))
  {
    v19 = 4;
    v18 = (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 272);
    goto LABEL_34;
  }
  if (v18)
  {
    v19 = 5;
LABEL_34:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  AMSCore::SQLiteDatabase::~SQLiteDatabase((AMSCore::HTTPCacheDataAccessObject *)((char *)this + 8));
}

void AMSCore::HTTPCacheDataAccessObject::getCachedReponse(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v8;
  unsigned int *v9;
  std::runtime_error *v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error v23;
  __int128 v24;
  unsigned int **v25;
  unsigned int *v26;
  uint64_t v27;
  __int128 v28;
  std::runtime_error v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  std::system_error v36;
  unsigned int **v37;
  unsigned int *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  _BYTE __what_arg[40];
  unsigned int *v44;
  uint64_t v45;
  __int128 __p;
  char v47;
  char v48;
  std::string v49;
  int v50;
  std::runtime_error v51;
  __int128 v52;
  unsigned int **v53;
  unsigned int *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  std::error_code v58;

  v57 = *MEMORY[0x1E0C80C00];
  AMSCore::StringUtils::join<>((std::string *)__what_arg);
  v58.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v58.__val_ = 7;
  std::system_error::system_error(&v36, v58, (const std::string *)__what_arg);
  if ((__what_arg[23] & 0x80000000) != 0)
    operator delete(*(void **)__what_arg);
  v38 = 0;
  v39 = 0;
  v36.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v37 = &v38;
  v40 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v36);
  *(std::error_code *)&__what_arg[16] = v36.__ec_;
  v8 = v38;
  *(_QWORD *)__what_arg = off_1E2521330;
  *(_QWORD *)&__what_arg[32] = v37;
  v44 = v38;
  v45 = v39;
  if (v39)
  {
    *((_QWORD *)v38 + 2) = &v44;
    v8 = 0;
    v37 = &v38;
    v38 = 0;
    v39 = 0;
  }
  else
  {
    *(_QWORD *)&__what_arg[32] = &v44;
  }
  __p = v40;
  v40 = 0uLL;
  v36.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v37, v8);
  MEMORY[0x18D7898AC](&v36);
  std::runtime_error::runtime_error(&v36, (const std::runtime_error *)__what_arg);
  v36.__ec_ = *(std::error_code *)&__what_arg[16];
  v9 = v44;
  v36.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v37 = *(unsigned int ***)&__what_arg[32];
  v38 = v44;
  v39 = v45;
  if (v45)
  {
    *((_QWORD *)v44 + 2) = &v38;
    v9 = 0;
    *(_QWORD *)&__what_arg[32] = &v44;
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v37 = &v38;
  }
  v40 = __p;
  __p = 0uLL;
  v42 = 0;
  *(_QWORD *)__what_arg = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&__what_arg[32], v9);
  MEMORY[0x18D7898AC](__what_arg);
  __what_arg[23] = 18;
  strcpy(__what_arg, ":accountIdentifier");
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__what_arg[24], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&__what_arg[24] = *(_OWORD *)a2;
    v44 = *(unsigned int **)(a2 + 16);
  }
  v48 = 4;
  LODWORD(v45) = 5;
  strcpy((char *)&__p, ":key");
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v49 = *(std::string *)a3;
  v50 = 5;
  v23.__imp_.__imp_ = 0;
  *(_QWORD *)&v24 = 0;
  v23.__vftable = (std::runtime_error_vtbl *)&v23.__imp_;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v23, (uint64_t *)&v23.__imp_, (const void **)__what_arg, (__int128 *)__what_arg);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v23, (uint64_t *)&v23.__imp_, (const void **)&__p, &__p);
  v51.__vftable = (std::runtime_error_vtbl *)&off_1E2521E98;
  v51.__imp_.__imp_ = (const char *)&v36;
  *((_QWORD *)&v52 + 1) = &v51;
  AMSCore::SQLiteStatement::exec((uint64_t)&v29, (sqlite3 **)(a1 + 248), &v23, (uint64_t)&v51);
  v10 = (std::runtime_error *)*((_QWORD *)&v52 + 1);
  if (*((std::runtime_error **)&v52 + 1) == &v51)
  {
    v11 = 4;
    v10 = &v51;
  }
  else
  {
    if (!*((_QWORD *)&v52 + 1))
      goto LABEL_20;
    v11 = 5;
  }
  (*((void (**)(void))&v10->~runtime_error + v11))();
LABEL_20:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v23.__imp_.__imp_);
  if (v50 != -1)
    ((void (*)(std::runtime_error *, std::string *))off_1E253D240[v50])(&v51, &v49);
  v50 = -1;
  if (v48 < 0)
    operator delete((void *)__p);
  if ((_DWORD)v45 != -1)
    ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[v45])(&v51, &__what_arg[24]);
  LODWORD(v45) = -1;
  if ((__what_arg[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__what_arg);
    if (v35)
    {
LABEL_28:
      v12 = v42;
      if (v42)
      {
        AMSCore::HTTPResponse::HTTPResponse(a4, (__int128 *)&v36);
        *(_QWORD *)(a4 + 656) = v41;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)a4, &v36);
        *(std::error_code *)(a4 + 16) = v36.__ec_;
        *(_QWORD *)a4 = off_1E2521330;
        v13 = v38;
        *(_QWORD *)(a4 + 32) = v37;
        *(_QWORD *)(a4 + 40) = v13;
        v14 = a4 + 40;
        v15 = v39;
        *(_QWORD *)(a4 + 48) = v39;
        if (v15)
        {
          *((_QWORD *)v13 + 2) = v14;
          v37 = &v38;
          v38 = 0;
          v39 = 0;
        }
        else
        {
          *(_QWORD *)(a4 + 32) = v14;
        }
        *(_OWORD *)(a4 + 56) = v40;
        v40 = 0uLL;
      }
      *(_BYTE *)(a4 + 664) = v12;
      if (!v35)
        goto LABEL_58;
LABEL_53:
      if (!v42)
        goto LABEL_59;
      goto LABEL_54;
    }
  }
  else if (v35)
  {
    goto LABEL_28;
  }
  std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v29);
  *(_OWORD *)&__what_arg[16] = v30;
  *(_QWORD *)__what_arg = off_1E2521330;
  *(_QWORD *)&__what_arg[32] = v31;
  v44 = (unsigned int *)v32;
  v45 = v33;
  if (v33)
  {
    *(_QWORD *)(v32 + 16) = &v44;
    v31 = &v32;
    v32 = 0;
    v33 = 0;
  }
  else
  {
    *(_QWORD *)&__what_arg[32] = &v44;
  }
  __p = v34;
  v34 = 0uLL;
  v47 = 1;
  std::runtime_error::runtime_error(&v51, (const std::runtime_error *)__what_arg);
  v52 = *(_OWORD *)&__what_arg[16];
  v51.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v53 = *(unsigned int ***)&__what_arg[32];
  v54 = v44;
  v55 = v45;
  if (v45)
  {
    *((_QWORD *)v44 + 2) = &v54;
    *(_QWORD *)&__what_arg[32] = &v44;
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v53 = &v54;
  }
  v56 = __p;
  __p = 0uLL;
  std::runtime_error::runtime_error(&v23, &v51);
  v24 = v52;
  v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v16 = v54;
  v25 = v53;
  v26 = v54;
  v27 = v55;
  if (v55)
  {
    *((_QWORD *)v54 + 2) = &v26;
    v16 = 0;
    v53 = &v54;
    v54 = 0;
    v55 = 0;
  }
  else
  {
    v25 = &v26;
  }
  v28 = v56;
  v56 = 0uLL;
  v51.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v53, v16);
  MEMORY[0x18D7898AC](&v51);
  std::runtime_error::runtime_error((std::runtime_error *)a4, &v23);
  *(_OWORD *)(a4 + 16) = v24;
  *(_QWORD *)a4 = off_1E2521330;
  v17 = v26;
  *(_QWORD *)(a4 + 32) = v25;
  *(_QWORD *)(a4 + 40) = v17;
  v18 = a4 + 40;
  v19 = v27;
  *(_QWORD *)(a4 + 48) = v27;
  if (v19)
  {
    *((_QWORD *)v17 + 2) = v18;
    v17 = 0;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    *(_QWORD *)(a4 + 32) = v18;
  }
  *(_OWORD *)(a4 + 56) = v28;
  v28 = 0uLL;
  *(_BYTE *)(a4 + 664) = 0;
  v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v17);
  MEMORY[0x18D7898AC](&v23);
  if (v47)
  {
    *(_QWORD *)__what_arg = off_1E2521330;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&__what_arg[32], v44);
    MEMORY[0x18D7898AC](__what_arg);
  }
  if (v35)
    goto LABEL_53;
LABEL_58:
  ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
  if (!v42)
LABEL_59:
    ((void (*)(AMSCore::Error *))v36.~system_error)((AMSCore::Error *)&v36);
LABEL_54:
  AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v36);
}

void sub_18CC1ED28(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::HTTPCacheDataAccessObject::setHTTPCacheItem(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *i;
  __int128 v7;
  __int128 v8;
  std::string::size_type size;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  std::ios_base *v19;
  uint64_t v20;
  std::string::size_type v21;
  char v22;
  std::string::size_type v23;
  std::string::size_type v24;
  void *v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string *v28;
  uint64_t v29;
  unsigned int **v36;
  unsigned int *v37[2];
  std::string v38;
  std::string v39;
  std::string *v40;
  _BYTE v41[24];
  std::string v42;
  int v43;
  __int128 __p[3];
  int v45;
  void *v46[2];
  char v47;
  std::string v48;
  int v49;
  __int128 v50;
  char v51;
  std::string::size_type v52;
  _BYTE v53[15];
  char v54;
  int v55;
  __int128 v56;
  char v57;
  std::string v58;
  int v59;
  __int128 v60;
  char v61;
  uint64_t v62[3];
  int v63;
  _QWORD v64[5];

  v64[2] = *MEMORY[0x1E0C80C00];
  memset(&v38, 0, sizeof(v38));
  for (i = *(uint64_t **)(a4 + 176); i; i = (uint64_t *)*i)
  {
    v41[23] = 4;
    strcpy(v41, "name");
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)i[2], i[3]);
    }
    else
    {
      v7 = *((_OWORD *)i + 1);
      v42.__r_.__value_.__r.__words[2] = i[4];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v7;
    }
    v43 = 5;
    BYTE7(__p[1]) = 5;
    strcpy((char *)__p, "value");
    if (*((char *)i + 63) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)&__p[1] + 8), (const std::string::value_type *)i[5], i[6]);
    }
    else
    {
      v8 = *(_OWORD *)(i + 5);
      *((_QWORD *)&__p[2] + 1) = i[7];
      *(__int128 *)((char *)&__p[1] + 8) = v8;
    }
    v45 = 5;
    *(_OWORD *)&v39.__r_.__value_.__r.__words[1] = 0uLL;
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39.__r_.__value_.__l.__size_;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v39, (uint64_t *)&v39.__r_.__value_.__l.__size_, (const void **)v41, (__int128 *)v41);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v39, (uint64_t *)&v39.__r_.__value_.__l.__size_, (const void **)__p, __p);
    size = v38.__r_.__value_.__l.__size_;
    if (v38.__r_.__value_.__l.__size_ >= v38.__r_.__value_.__r.__words[2])
    {
      v13 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>(&v38.__r_.__value_.__l.__data_, &v39);
    }
    else
    {
      *(_QWORD *)v38.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
      v10 = v39.__r_.__value_.__l.__size_;
      *(_QWORD *)(size + 8) = v39.__r_.__value_.__l.__size_;
      v11 = size + 8;
      v12 = v39.__r_.__value_.__r.__words[2];
      *(_QWORD *)(size + 16) = *((_QWORD *)&v39.__r_.__value_.__l + 2);
      if (v12)
      {
        *(_QWORD *)(v10 + 16) = v11;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39.__r_.__value_.__l.__size_;
        *(_OWORD *)&v39.__r_.__value_.__r.__words[1] = 0uLL;
      }
      else
      {
        *(_QWORD *)size = v11;
      }
      *(_DWORD *)(size + 24) = 8;
      v13 = (char *)(size + 32);
    }
    v38.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, (unsigned int *)v39.__r_.__value_.__l.__size_);
    if (v45 != -1)
      ((void (*)(unsigned int ***, char *))off_1E253D240[v45])(&v36, (char *)&__p[1] + 8);
    v45 = -1;
    if (SBYTE7(__p[1]) < 0)
      operator delete(*(void **)&__p[0]);
    if (v43 != -1)
      ((void (*)(unsigned int ***, std::string *))off_1E253D240[v43])(&v36, &v42);
    v43 = -1;
    if ((v41[23] & 0x80000000) != 0)
      operator delete(*(void **)v41);
  }
  v14 = MEMORY[0x1E0DE4FE0];
  v15 = (void *)(MEMORY[0x1E0DE4FE0] + 64);
  v16 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v17 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v18 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v46[0] = (void *)(MEMORY[0x1E0DE4FE0] + 64);
  *(_QWORD *)v41 = v17;
  *(_QWORD *)&v41[*(_QWORD *)(v17 - 24)] = v18;
  v19 = (std::ios_base *)&v41[*(_QWORD *)(*(_QWORD *)v41 - 24)];
  std::ios_base::init(v19, &v41[8]);
  v19[1].__vftable = 0;
  v19[1].__fmtflags_ = -1;
  *(_QWORD *)v41 = v14 + 24;
  v46[0] = v15;
  std::streambuf::basic_streambuf();
  v20 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)&v41[8] = MEMORY[0x1E0DE4FB8] + 16;
  memset(&__p[1], 0, 32);
  v45 = 16;
  std::stringbuf::str[abi:fe180100]((uint64_t)&v41[8], &v39);
  v64[0] = v39.__r_.__value_.__l.__size_;
  v21 = v39.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  *(_QWORD *)v41 = *v16;
  *(_QWORD *)&v41[*(_QWORD *)(*(_QWORD *)v41 - 24)] = v16[3];
  *(_QWORD *)&v41[8] = v20;
  if (SBYTE7(__p[2]) < 0)
    operator delete(*(void **)&__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v46);
  v23 = v38.__r_.__value_.__r.__words[0];
  if (v38.__r_.__value_.__r.__words[0])
  {
    v24 = v38.__r_.__value_.__l.__size_;
    v25 = (void *)v38.__r_.__value_.__r.__words[0];
    if (v38.__r_.__value_.__l.__size_ != v38.__r_.__value_.__r.__words[0])
    {
      do
      {
        v26 = v24 - 32;
        v27 = *(unsigned int *)(v24 - 8);
        if ((_DWORD)v27 != -1)
          ((void (*)(_BYTE *, std::string::size_type))off_1E253D240[v27])(v41, v24 - 32);
        *(_DWORD *)(v24 - 8) = -1;
        v24 -= 32;
      }
      while (v26 != v23);
      v25 = (void *)v38.__r_.__value_.__r.__words[0];
    }
    v38.__r_.__value_.__l.__size_ = v23;
    operator delete(v25);
  }
  AMSCore::URL::getStringRepresentation((AMSCore::URL *)a4, &v38);
  v41[23] = 18;
  strcpy(v41, ":accountIdentifier");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v42 = *(std::string *)a2;
  BYTE7(__p[1]) = 4;
  v43 = 5;
  strcpy((char *)__p, ":key");
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)&__p[1] + 8), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(__int128 *)((char *)&__p[1] + 8) = *(_OWORD *)a3;
    *((_QWORD *)&__p[2] + 1) = *(_QWORD *)(a3 + 16);
  }
  v47 = 4;
  v45 = 5;
  strcpy((char *)v46, ":url");
  v48 = v38;
  memset(&v38, 0, sizeof(v38));
  v49 = 5;
  v51 = 8;
  strcpy((char *)&v50, ":headers");
  *(_QWORD *)&v53[7] = *(_QWORD *)((char *)v64 + 7);
  v52 = v21;
  *(_QWORD *)v53 = v64[0];
  v54 = v22;
  v64[0] = 0;
  *(_QWORD *)((char *)v64 + 7) = 0;
  v55 = 6;
  v57 = 9;
  strcpy((char *)&v56, ":response");
  if (*(char *)(a4 + 223) < 0)
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a4 + 200), *(_QWORD *)(a4 + 208));
  else
    v58 = *(std::string *)(a4 + 200);
  v59 = 6;
  v61 = 10;
  strcpy((char *)&v60, ":createdAt");
  v62[0] = a5 / 1000;
  v63 = 3;
  v37[0] = 0;
  v37[1] = 0;
  v36 = v37;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v36, (uint64_t *)v37, (const void **)v41, (__int128 *)v41);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v36, (uint64_t *)v37, (const void **)__p, __p);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v36, (uint64_t *)v37, (const void **)v46, (__int128 *)v46);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v36, (uint64_t *)v37, (const void **)&v50, &v50);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v36, (uint64_t *)v37, (const void **)&v56, &v56);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v36, (uint64_t *)v37, (const void **)&v60, &v60);
  v40 = 0;
  AMSCore::SQLiteStatement::exec(a6, (sqlite3 **)(a1 + 304), &v36, (uint64_t)&v39);
  v28 = v40;
  if (v40 == &v39)
  {
    v29 = 4;
    v28 = &v39;
  }
  else
  {
    if (!v40)
      goto LABEL_48;
    v29 = 5;
  }
  (*(void (**)(void))(v28->__r_.__value_.__r.__words[0] + 8 * v29))();
LABEL_48:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v37[0]);
  if (v63 != -1)
    ((void (*)(std::string *, uint64_t *))off_1E253D240[v63])(&v39, v62);
  v63 = -1;
  if (v61 < 0)
    operator delete((void *)v60);
  if (v59 != -1)
    ((void (*)(std::string *, std::string *))off_1E253D240[v59])(&v39, &v58);
  v59 = -1;
  if (v57 < 0)
    operator delete((void *)v56);
  if (v55 != -1)
    ((void (*)(std::string *, std::string::size_type *))off_1E253D240[v55])(&v39, &v52);
  v55 = -1;
  if (v51 < 0)
    operator delete((void *)v50);
  if (v49 != -1)
    ((void (*)(std::string *, std::string *))off_1E253D240[v49])(&v39, &v48);
  v49 = -1;
  if (v47 < 0)
    operator delete(v46[0]);
  if (v45 != -1)
    ((void (*)(std::string *, char *))off_1E253D240[v45])(&v39, (char *)&__p[1] + 8);
  v45 = -1;
  if (SBYTE7(__p[1]) < 0)
    operator delete(*(void **)&__p[0]);
  if (v43 != -1)
    ((void (*)(std::string *, std::string *))off_1E253D240[v43])(&v39, &v42);
  v43 = -1;
  if ((v41[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_74:
    operator delete(v38.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)v41);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_74;
}

void sub_18CC1F598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::HTTPCacheDataAccessObject::deleteItemsForAccount(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int **v5;
  unsigned int *v6[2];
  _BYTE v7[24];
  uint64_t v8;
  char __p[19];
  char v10;
  std::string v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = 18;
  strcpy(__p, ":accountIdentifier");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v12 = 5;
  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v5, (uint64_t *)v6, (const void **)__p, (__int128 *)__p);
  v8 = 0;
  AMSCore::SQLiteStatement::exec(a3, (sqlite3 **)(a1 + 360), &v5, (uint64_t)v7);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v5, v6[0]);
  if (v12 != -1)
    ((void (*)(_BYTE *, std::string *))off_1E253D240[v12])(v7, &v11);
  v12 = -1;
  if (v10 < 0)
    operator delete(*(void **)__p);
}

void sub_18CC1F794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

char *std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v25;
  char **v26;
  char v27;
  char v28;
  char v29;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  v8 = a1[2] - v3;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v5];
  v12 = a2 + 1;
  v13 = a2[1];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 8;
  v15 = a2[2];
  *((_QWORD *)v11 + 2) = v15;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    *a2 = v12;
    *v12 = 0;
    a2[2] = 0;
    v3 = *a1;
    v4 = a1[1];
  }
  else
  {
    *(_QWORD *)v11 = v14;
  }
  *((_DWORD *)v11 + 6) = 8;
  v16 = v11 + 32;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v16;
    a1[2] = &v10[32 * v9];
    goto LABEL_28;
  }
  v25 = &v10[32 * v9];
  v26 = a1;
  v17 = 0;
  do
  {
    v11[v17 - 32] = 0;
    v18 = &v4[v17];
    *(_DWORD *)&v11[v17 - 8] = -1;
    v19 = *(unsigned int *)&v4[v17 - 8];
    if ((_DWORD)v19 == -1)
      goto LABEL_16;
    ((void (*)(char *, char *, char *))off_1E253CAE8[v19])(&v28, &v11[v17 - 32], v18 - 32);
    *(_DWORD *)&v11[v17 - 8] = v19;
    v20 = *((unsigned int *)v18 - 2);
    if ((_DWORD)v20 == -1)
      goto LABEL_16;
    if ((_DWORD)v20)
    {
      ((void (*)(char *, char *))off_1E253D240[v20])(&v29, v18 - 32);
LABEL_16:
      *((_DWORD *)v18 - 2) = 0;
    }
    v17 -= 32;
  }
  while (&v4[v17] != v3);
  v16 = v11 + 32;
  v3 = *v26;
  v21 = v26[1];
  *v26 = &v11[v17];
  v26[1] = v11 + 32;
  v26[2] = v25;
  if (v21 != v3)
  {
    do
    {
      v22 = v21 - 32;
      v23 = *((unsigned int *)v21 - 2);
      if ((_DWORD)v23 != -1)
        ((void (*)(char *, char *))off_1E253D240[v23])(&v27, v21 - 32);
      *((_DWORD *)v21 - 2) = -1;
      v21 -= 32;
    }
    while (v22 != v3);
  }
LABEL_28:
  if (v3)
    operator delete(v3);
  return v16;
}

void std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2521E98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2521E98;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  void (__cdecl *v21)(std::runtime_error *__hidden);
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  int v27;
  char *v28;
  uint64_t v29;
  const std::locale *v30;
  const std::locale::facet *v31;
  const std::locale::facet *v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::runtime_error_vtbl *v45;
  const char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  std::runtime_error_vtbl *v50;
  std::runtime_error_vtbl *v51;
  unint64_t v52;
  char *v53;
  unsigned int *v54;
  unsigned int *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::runtime_error_vtbl *v59;
  const char *imp;
  unint64_t v61;
  unsigned int *v62;
  unsigned int *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::runtime_error_vtbl *v72;
  void **v73;
  void **i;
  void **v75;
  void *v76;
  uint64_t v77;
  void **v78;
  unsigned int *v79;
  unsigned int *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::runtime_error *v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  void (__cdecl *v103)(std::runtime_error *__hidden);
  unsigned int **v104;
  unsigned int *v105;
  std::runtime_error v107;
  __int128 v108;
  unsigned int **v109;
  unsigned int *v110;
  uint64_t v111;
  __int128 v112;
  char v113;
  uint64_t v114;
  char v115;
  std::runtime_error v116;
  __int128 v117;
  unsigned int **v118;
  unsigned int *v119;
  uint64_t v120;
  __int128 v121;
  char v122;
  uint64_t v123;
  std::runtime_error v124;
  __int128 v125;
  unsigned int **v126;
  unsigned int *v127;
  uint64_t v128;
  __int128 v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  void *v137;
  void **v138;
  uint64_t v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  char v154;
  char v155;
  int v156;
  char v157;
  char v158;
  __int16 v159;
  void *v160;
  char v161;
  char v162;
  __int128 v163;
  const char *(__cdecl *what)(const std::runtime_error *__hidden);
  void *v165[2];
  __int128 v166;
  int v167;
  std::runtime_error v168;
  __int128 v169;
  unsigned int **v170;
  unsigned int *v171;
  uint64_t v172;
  __int128 v173;
  std::runtime_error v174;
  __int128 v175;
  unsigned int **v176;
  unsigned int *v177;
  uint64_t v178;
  __int128 v179;
  char v180;
  std::runtime_error v181;
  __int128 v182;
  unsigned int **v183;
  unsigned int *v184;
  uint64_t v185;
  __int128 v186;
  char v187;
  char v188;
  unsigned __int128 __p;
  __int128 v190;
  unsigned int **v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  char v195;
  std::runtime_error v196;
  __int128 v197;
  unsigned int **v198;
  unsigned int *v199;
  uint64_t v200;
  __int128 v201;
  char v202;
  std::runtime_error v203;
  __int128 v204;
  unsigned int **v205;
  unsigned int *v206;
  uint64_t v207;
  __int128 v208;
  char v209;
  std::runtime_error v210;
  __int128 v211;
  unsigned int **v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  char v216;
  std::runtime_error v217;
  __int128 v218;
  unsigned int **v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  char v223;

  v2 = a2 + 1;
  v3 = a2[1];
  v104 = (unsigned int **)*a2;
  v105 = (unsigned int *)v3;
  if (a2[2])
  {
    *(_QWORD *)(v3 + 16) = &v105;
    *a2 = v2;
    *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    v104 = &v105;
  }
  AMSCore::getValueAs<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>((uint64_t)&v217, (uint64_t)&v104, "response", 8uLL);
  if (!v223)
  {
    std::runtime_error::runtime_error(&v116, &v217);
    v117 = v218;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v118 = v219;
    v119 = (unsigned int *)v220;
    v120 = v221;
    if (v221)
    {
      *(_QWORD *)(v220 + 16) = &v119;
      v219 = (unsigned int **)&v220;
      v220 = 0;
      v221 = 0;
    }
    else
    {
      v118 = &v119;
    }
    v121 = v222;
    v222 = 0uLL;
    v122 = 1;
    std::runtime_error::runtime_error(&v107, &v116);
    v108 = v117;
    v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v109 = v118;
    v110 = v119;
    v111 = v120;
    if (v120)
    {
      *((_QWORD *)v119 + 2) = &v110;
      v118 = &v119;
      v119 = 0;
      v120 = 0;
    }
    else
    {
      v109 = &v110;
    }
    v112 = v121;
    v121 = 0uLL;
    std::runtime_error::runtime_error(&v174, &v107);
    v175 = v108;
    v4 = v110;
    v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v176 = v109;
    v177 = v110;
    v178 = v111;
    if (v111)
    {
      *((_QWORD *)v110 + 2) = &v177;
      v4 = 0;
      v109 = &v110;
      v110 = 0;
      v111 = 0;
    }
    else
    {
      v176 = &v177;
    }
    v179 = v112;
    v112 = 0uLL;
    v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v4);
    MEMORY[0x18D7898AC](&v107);
    std::runtime_error::runtime_error(&v107, &v174);
    v108 = v175;
    v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v5 = v177;
    v109 = v176;
    v110 = v177;
    v111 = v178;
    if (v178)
    {
      *((_QWORD *)v177 + 2) = &v110;
      v5 = 0;
      v176 = &v177;
      v177 = 0;
      v178 = 0;
    }
    else
    {
      v109 = &v110;
    }
    v112 = v179;
    v179 = 0uLL;
    v115 = 0;
    v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v5);
    MEMORY[0x18D7898AC](&v174);
    if (!v122)
      goto LABEL_311;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (*((_QWORD *)&v121 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v119);
    MEMORY[0x18D7898AC](&v116);
    if (v223)
      goto LABEL_313;
LABEL_312:
    ((void (*)(std::runtime_error *))v217.~runtime_error)(&v217);
    goto LABEL_313;
  }
  AMSCore::getValueAs<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>((uint64_t)&v210, (uint64_t)&v104, "headers", 7uLL);
  if (!v216)
  {
    std::runtime_error::runtime_error(&v116, &v210);
    v117 = v211;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v118 = v212;
    v119 = (unsigned int *)v213;
    v120 = v214;
    if (v214)
    {
      *(_QWORD *)(v213 + 16) = &v119;
      v212 = (unsigned int **)&v213;
      v213 = 0;
      v214 = 0;
    }
    else
    {
      v118 = &v119;
    }
    v121 = v215;
    v215 = 0uLL;
    v122 = 1;
    std::runtime_error::runtime_error(&v107, &v116);
    v108 = v117;
    v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v109 = v118;
    v110 = v119;
    v111 = v120;
    if (v120)
    {
      *((_QWORD *)v119 + 2) = &v110;
      v118 = &v119;
      v119 = 0;
      v120 = 0;
    }
    else
    {
      v109 = &v110;
    }
    v112 = v121;
    v121 = 0uLL;
    std::runtime_error::runtime_error(&v174, &v107);
    v175 = v108;
    v10 = v110;
    v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v176 = v109;
    v177 = v110;
    v178 = v111;
    if (v111)
    {
      *((_QWORD *)v110 + 2) = &v177;
      v10 = 0;
      v109 = &v110;
      v110 = 0;
      v111 = 0;
    }
    else
    {
      v176 = &v177;
    }
    v179 = v112;
    v112 = 0uLL;
    v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v10);
    MEMORY[0x18D7898AC](&v107);
    std::runtime_error::runtime_error(&v107, &v174);
    v108 = v175;
    v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v11 = v177;
    v109 = v176;
    v110 = v177;
    v111 = v178;
    if (v178)
    {
      *((_QWORD *)v177 + 2) = &v110;
      v11 = 0;
      v176 = &v177;
      v177 = 0;
      v178 = 0;
    }
    else
    {
      v109 = &v110;
    }
    v112 = v179;
    v179 = 0uLL;
    v115 = 0;
    v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v11);
    MEMORY[0x18D7898AC](&v174);
    if (v122)
    {
      v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      if (*((_QWORD *)&v121 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v119);
      MEMORY[0x18D7898AC](&v116);
    }
    goto LABEL_310;
  }
  AMSCore::JsonData::decode((uint64_t *)v210.__vftable, (uint64_t)&v107);
  if (!v113)
  {
    std::runtime_error::runtime_error(&v116, &v107);
    v117 = v108;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v118 = v109;
    v119 = v110;
    v120 = v111;
    if (v111)
    {
      *((_QWORD *)v110 + 2) = &v119;
      v109 = &v110;
      v110 = 0;
      v111 = 0;
    }
    else
    {
      v118 = &v119;
    }
    v121 = v112;
    v112 = 0uLL;
    v122 = 1;
    std::runtime_error::runtime_error(&v174, &v116);
    v175 = v117;
    v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v176 = v118;
    v177 = v119;
    v178 = v120;
    if (v120)
    {
      *((_QWORD *)v119 + 2) = &v177;
      v118 = &v119;
      v119 = 0;
      v120 = 0;
    }
    else
    {
      v176 = &v177;
    }
    v179 = v121;
    v121 = 0uLL;
    std::runtime_error::runtime_error(&v124, &v174);
    v125 = v175;
    v124.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v15 = v177;
    v126 = v176;
    v127 = v177;
    v128 = v178;
    if (v178)
    {
      *((_QWORD *)v177 + 2) = &v127;
      v15 = 0;
      v176 = &v177;
      v177 = 0;
      v178 = 0;
    }
    else
    {
      v126 = &v127;
    }
    v129 = v179;
    v179 = 0uLL;
    v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v15);
    MEMORY[0x18D7898AC](&v174);
    std::runtime_error::runtime_error(&v203, &v124);
    v204 = v125;
    v16 = v127;
    v203.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v205 = v126;
    v206 = v127;
    v207 = v128;
    if (v128)
    {
      *((_QWORD *)v127 + 2) = &v206;
      v16 = 0;
      v126 = &v127;
      v127 = 0;
      v128 = 0;
    }
    else
    {
      v205 = &v206;
    }
    v208 = v129;
    v129 = 0uLL;
    v209 = 0;
    v124.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v126, v16);
    MEMORY[0x18D7898AC](&v124);
    if (v122)
    {
      v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      if (*((_QWORD *)&v121 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v119);
      MEMORY[0x18D7898AC](&v116);
    }
    if (!v113)
      goto LABEL_174;
LABEL_158:
    if (DWORD2(v108) != -1)
      ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[DWORD2(v108)])(&v116, &v107);
    if (!v209)
      goto LABEL_175;
    goto LABEL_161;
  }
  if (DWORD2(v108) == 9)
  {
    v116.__vftable = (std::runtime_error_vtbl *)&v107;
    v122 = 1;
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v174, 4u, "any doesn't contain expected type");
    std::runtime_error::runtime_error(&v116, &v174);
    v117 = v175;
    v9 = v177;
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v118 = v176;
    v119 = v177;
    v120 = v178;
    if (v178)
    {
      *((_QWORD *)v177 + 2) = &v119;
      v176 = &v177;
      v177 = 0;
      v178 = 0;
      v9 = 0;
    }
    else
    {
      v118 = &v119;
    }
    v121 = v179;
    v122 = 0;
    v179 = 0uLL;
    v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v9);
    MEMORY[0x18D7898AC](&v174);
    if (!v122)
    {
      std::runtime_error::runtime_error(&v174, &v116);
      v175 = v117;
      v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v176 = v118;
      v177 = v119;
      v178 = v120;
      if (v120)
      {
        *((_QWORD *)v119 + 2) = &v177;
        v118 = &v119;
        v119 = 0;
        v120 = 0;
      }
      else
      {
        v176 = &v177;
      }
      v179 = v121;
      v121 = 0uLL;
      v180 = 1;
      std::runtime_error::runtime_error(&v124, &v174);
      v125 = v175;
      v124.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v126 = v176;
      v127 = v177;
      v128 = v178;
      if (v178)
      {
        *((_QWORD *)v177 + 2) = &v127;
        v176 = &v177;
        v177 = 0;
        v178 = 0;
      }
      else
      {
        v126 = &v127;
      }
      v129 = v179;
      v179 = 0uLL;
      std::runtime_error::runtime_error(&v181, &v124);
      v182 = v125;
      v79 = v127;
      v181.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v183 = v126;
      v184 = v127;
      v185 = v128;
      if (v128)
      {
        *((_QWORD *)v127 + 2) = &v184;
        v79 = 0;
        v126 = &v127;
        v127 = 0;
        v128 = 0;
      }
      else
      {
        v183 = &v184;
      }
      v186 = v129;
      v129 = 0uLL;
      v124.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v126, v79);
      MEMORY[0x18D7898AC](&v124);
      std::runtime_error::runtime_error(&v203, &v181);
      v204 = v182;
      v80 = v184;
      v203.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v205 = v183;
      v206 = v184;
      v207 = v185;
      if (v185)
      {
        *((_QWORD *)v184 + 2) = &v206;
        v80 = 0;
        v183 = &v184;
        v184 = 0;
        v185 = 0;
      }
      else
      {
        v205 = &v206;
      }
      v208 = v186;
      v186 = 0uLL;
      v209 = 0;
      v181.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v183, v80);
      MEMORY[0x18D7898AC](&v181);
      if (v180)
      {
        v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v81 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
        if (*((_QWORD *)&v179 + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v177);
        MEMORY[0x18D7898AC](&v174);
      }
      goto LABEL_156;
    }
  }
  __p = 0u;
  v190 = 0u;
  v20 = 1065353216;
  LODWORD(v191) = 1065353216;
  v21 = v116.~runtime_error;
  v103 = v116.~runtime_error_0;
  if (v116.~runtime_error == v103)
  {
    v48 = 0;
    v47 = 0;
    v46 = 0;
    v45 = 0;
LABEL_143:
    *((_QWORD *)&__p + 1) = 0;
    *(_QWORD *)&__p = 0;
    v203.__vftable = v45;
    v203.__imp_.__imp_ = v46;
    *(_QWORD *)&v204 = v48;
    *((_QWORD *)&v204 + 1) = v47;
    LODWORD(v205) = v20;
    if (v47)
    {
      v49 = *((_QWORD *)v48 + 1);
      if (((unint64_t)v46 & (unint64_t)(v46 - 1)) != 0)
      {
        if (v49 >= (unint64_t)v46)
          v49 %= (unint64_t)v46;
      }
      else
      {
        v49 &= (unint64_t)(v46 - 1);
      }
      v48 = 0;
      *((_QWORD *)&v45->~runtime_error + v49) = &v204;
      v190 = 0uLL;
    }
    v209 = 1;
    if (!v48)
      goto LABEL_154;
    while (1)
    {
LABEL_166:
      v53 = *(char **)v48;
      if (v48[63] < 0)
      {
        operator delete(*((void **)v48 + 5));
        if (v48[39] < 0)
LABEL_170:
          operator delete(*((void **)v48 + 2));
      }
      else if (v48[39] < 0)
      {
        goto LABEL_170;
      }
      operator delete(v48);
      v48 = v53;
      if (!v53)
        goto LABEL_154;
    }
  }
  while (1)
  {
    AMSCore::getValueAs<std::string,AMSCore::Any>((uint64_t)&v174, (uint64_t)v21, "name", 4uLL);
    if (v180)
    {
      AMSCore::getValueAs<std::string,AMSCore::Any>((uint64_t)&v124, (uint64_t)v21, "value", 5uLL);
      if (v130)
      {
        if (!v180)
          goto LABEL_338;
        v22 = (char *)operator new(0x40uLL);
        v23 = (uint64_t)v22;
        v181.__vftable = (std::runtime_error_vtbl *)v22;
        v181.__imp_.__imp_ = (const char *)&v190;
        LOBYTE(v182) = 0;
        v24 = v22 + 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        if (SHIBYTE(v174.what) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v22 + 16), (const std::string::value_type *)v174.~runtime_error, (std::string::size_type)v174.~runtime_error_0);
        }
        else
        {
          v25 = *(_OWORD *)&v174.~runtime_error;
          *((_QWORD *)v22 + 4) = v174.what;
          *(_OWORD *)v24 = v25;
        }
        if (SHIBYTE(v124.what) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v23 + 40), (const std::string::value_type *)v124.~runtime_error, (std::string::size_type)v124.~runtime_error_0);
        }
        else
        {
          v26 = *(_OWORD *)&v124.~runtime_error;
          *(_QWORD *)(v23 + 56) = v124.what;
          *(_OWORD *)(v23 + 40) = v26;
        }
        LOBYTE(v182) = 1;
        v27 = *(char *)(v23 + 39);
        if (v27 >= 0)
          v28 = v24;
        else
          v28 = *(char **)(v23 + 16);
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(v23 + 39);
        else
          v29 = *(_QWORD *)(v23 + 24);
        v30 = std::locale::classic();
        v31 = std::locale::use_facet(v30, MEMORY[0x1E0DE4A90]);
        if (v29)
        {
          v32 = v31;
          v33 = 0;
          do
          {
            v33 ^= 2
                 * ((int (*)(const std::locale::facet *, _QWORD))v32->__vftable[1].__on_zero_shared)(v32, *v28++);
            --v29;
          }
          while (v29);
        }
        else
        {
          v33 = 0;
        }
        *(_QWORD *)(v23 + 8) = v33;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(&__p, v23);
        v34 = 0;
        if (!v130)
LABEL_136:
          ((void (*)(std::runtime_error *))v124.~runtime_error)(&v124);
      }
      else
      {
        std::runtime_error::runtime_error(&v181, &v124);
        v182 = v125;
        v181.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v183 = v126;
        v184 = v127;
        v185 = v128;
        if (v128)
        {
          *((_QWORD *)v127 + 2) = &v184;
          v126 = &v127;
          v127 = 0;
          v128 = 0;
        }
        else
        {
          v183 = &v184;
        }
        v186 = v129;
        v129 = 0uLL;
        v187 = 1;
        std::runtime_error::runtime_error(&v168, &v181);
        v169 = v182;
        v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v170 = v183;
        v171 = v184;
        v172 = v185;
        if (v185)
        {
          *((_QWORD *)v184 + 2) = &v171;
          v183 = &v184;
          v184 = 0;
          v185 = 0;
        }
        else
        {
          v170 = &v171;
        }
        v173 = v186;
        v186 = 0uLL;
        std::runtime_error::runtime_error(&v196, &v168);
        v197 = v169;
        v40 = v171;
        v196.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v198 = v170;
        v199 = v171;
        v200 = v172;
        if (v172)
        {
          *((_QWORD *)v171 + 2) = &v199;
          v40 = 0;
          v170 = &v171;
          v171 = 0;
          v172 = 0;
        }
        else
        {
          v198 = &v199;
        }
        v201 = v173;
        v173 = 0uLL;
        v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v40);
        MEMORY[0x18D7898AC](&v168);
        std::runtime_error::runtime_error(&v203, &v196);
        v204 = v197;
        v41 = v199;
        v203.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v205 = v198;
        v206 = v199;
        v207 = v200;
        if (v200)
        {
          *((_QWORD *)v199 + 2) = &v206;
          v41 = 0;
          v198 = &v199;
          v199 = 0;
          v200 = 0;
        }
        else
        {
          v205 = &v206;
        }
        v208 = v201;
        v201 = 0uLL;
        v209 = 0;
        v196.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v198, v41);
        MEMORY[0x18D7898AC](&v196);
        if (v187)
        {
          v181.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v42 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          if (*((_QWORD *)&v186 + 1))
          {
            v43 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v183, v184);
          MEMORY[0x18D7898AC](&v181);
        }
        v34 = 1;
        if (!v130)
          goto LABEL_136;
      }
    }
    else
    {
      std::runtime_error::runtime_error(&v124, &v174);
      v125 = v175;
      v124.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v126 = v176;
      v127 = v177;
      v128 = v178;
      if (v178)
      {
        *((_QWORD *)v177 + 2) = &v127;
        v176 = &v177;
        v177 = 0;
        v178 = 0;
      }
      else
      {
        v126 = &v127;
      }
      v129 = v179;
      v179 = 0uLL;
      v130 = 1;
      std::runtime_error::runtime_error(&v181, &v124);
      v182 = v125;
      v181.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v183 = v126;
      v184 = v127;
      v185 = v128;
      if (v128)
      {
        *((_QWORD *)v127 + 2) = &v184;
        v126 = &v127;
        v127 = 0;
        v128 = 0;
      }
      else
      {
        v183 = &v184;
      }
      v186 = v129;
      v129 = 0uLL;
      std::runtime_error::runtime_error(&v168, &v181);
      v169 = v182;
      v35 = v184;
      v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v170 = v183;
      v171 = v184;
      v172 = v185;
      if (v185)
      {
        *((_QWORD *)v184 + 2) = &v171;
        v35 = 0;
        v183 = &v184;
        v184 = 0;
        v185 = 0;
      }
      else
      {
        v170 = &v171;
      }
      v173 = v186;
      v186 = 0uLL;
      v181.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v183, v35);
      MEMORY[0x18D7898AC](&v181);
      std::runtime_error::runtime_error(&v203, &v168);
      v204 = v169;
      v36 = v171;
      v203.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v205 = v170;
      v206 = v171;
      v207 = v172;
      if (v172)
      {
        *((_QWORD *)v171 + 2) = &v206;
        v36 = 0;
        v170 = &v171;
        v171 = 0;
        v172 = 0;
      }
      else
      {
        v205 = &v206;
      }
      v208 = v173;
      v173 = 0uLL;
      v209 = 0;
      v168.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v36);
      MEMORY[0x18D7898AC](&v168);
      if (v130)
      {
        v124.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
        if (*((_QWORD *)&v129 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v126, v127);
        MEMORY[0x18D7898AC](&v124);
      }
      v34 = 1;
    }
    if (!v180)
      ((void (*)(std::runtime_error *))v174.~runtime_error)(&v174);
    if (v34)
      break;
    v21 = (void (__cdecl *)(std::runtime_error *__hidden))((char *)v21 + 32);
    if (v21 == v103)
    {
      v45 = (std::runtime_error_vtbl *)__p;
      v46 = (const char *)*((_QWORD *)&__p + 1);
      v47 = *((_QWORD *)&v190 + 1);
      v48 = (char *)v190;
      v20 = (int)v191;
      goto LABEL_143;
    }
  }
  v48 = (char *)v190;
  if ((_QWORD)v190)
    goto LABEL_166;
LABEL_154:
  v50 = (std::runtime_error_vtbl *)__p;
  *(_QWORD *)&__p = 0;
  if (v50)
    operator delete(v50);
LABEL_156:
  if (!v122)
  {
    ((void (*)(std::runtime_error *))v116.~runtime_error)(&v116);
    if (!v113)
      goto LABEL_174;
    goto LABEL_158;
  }
  if (v113)
    goto LABEL_158;
LABEL_174:
  ((void (*)(std::runtime_error *))v107.~runtime_error)(&v107);
  if (v209)
  {
LABEL_161:
    AMSCore::getValueAs<long long,std::map<std::string,AMSCore::Any>>((uint64_t)&v196, (uint64_t)&v104, "createdAt", 9uLL);
    if (!v202)
    {
      std::runtime_error::runtime_error(&v116, &v196);
      v117 = v197;
      v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v118 = v198;
      v119 = v199;
      v120 = v200;
      if (v200)
      {
        *((_QWORD *)v199 + 2) = &v119;
        v198 = &v199;
        v199 = 0;
        v200 = 0;
      }
      else
      {
        v118 = &v119;
      }
      v121 = v201;
      v201 = 0uLL;
      v122 = 1;
      std::runtime_error::runtime_error(&v107, &v116);
      v108 = v117;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v109 = v118;
      v110 = v119;
      v111 = v120;
      if (v120)
      {
        *((_QWORD *)v119 + 2) = &v110;
        v118 = &v119;
        v119 = 0;
        v120 = 0;
      }
      else
      {
        v109 = &v110;
      }
      v112 = v121;
      v121 = 0uLL;
      std::runtime_error::runtime_error(&v174, &v107);
      v175 = v108;
      v62 = v110;
      v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v176 = v109;
      v177 = v110;
      v178 = v111;
      if (v111)
      {
        *((_QWORD *)v110 + 2) = &v177;
        v62 = 0;
        v109 = &v110;
        v110 = 0;
        v111 = 0;
      }
      else
      {
        v176 = &v177;
      }
      v179 = v112;
      v112 = 0uLL;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v62);
      MEMORY[0x18D7898AC](&v107);
      std::runtime_error::runtime_error(&v107, &v174);
      v108 = v175;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v63 = v177;
      v109 = v176;
      v110 = v177;
      v111 = v178;
      if (v178)
      {
        *((_QWORD *)v177 + 2) = &v110;
        v63 = 0;
        v176 = &v177;
        v177 = 0;
        v178 = 0;
      }
      else
      {
        v109 = &v110;
      }
      v112 = v179;
      v179 = 0uLL;
      v115 = 0;
      v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v63);
      MEMORY[0x18D7898AC](&v174);
      if (v122)
      {
        v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v64 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
        if (*((_QWORD *)&v121 + 1))
        {
          v65 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v119);
        MEMORY[0x18D7898AC](&v116);
      }
      goto LABEL_307;
    }
    AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>((uint64_t)&__p, (uint64_t)&v104, "url", 3uLL);
    if (!v195)
    {
      std::runtime_error::runtime_error(&v116, (const std::runtime_error *)&__p);
      v117 = v190;
      v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v118 = v191;
      v119 = (unsigned int *)v192;
      v120 = v193;
      if (v193)
      {
        *(_QWORD *)(v192 + 16) = &v119;
        v191 = (unsigned int **)&v192;
        v192 = 0;
        v193 = 0;
      }
      else
      {
        v118 = &v119;
      }
      v121 = v194;
      v194 = 0uLL;
      v122 = 1;
      std::runtime_error::runtime_error(&v107, &v116);
      v108 = v117;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v109 = v118;
      v110 = v119;
      v111 = v120;
      if (v120)
      {
        *((_QWORD *)v119 + 2) = &v110;
        v118 = &v119;
        v119 = 0;
        v120 = 0;
      }
      else
      {
        v109 = &v110;
      }
      v112 = v121;
      v121 = 0uLL;
      std::runtime_error::runtime_error(&v174, &v107);
      v175 = v108;
      v67 = v110;
      v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v176 = v109;
      v177 = v110;
      v178 = v111;
      if (v111)
      {
        *((_QWORD *)v110 + 2) = &v177;
        v67 = 0;
        v109 = &v110;
        v110 = 0;
        v111 = 0;
      }
      else
      {
        v176 = &v177;
      }
      v179 = v112;
      v112 = 0uLL;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v67);
      MEMORY[0x18D7898AC](&v107);
      std::runtime_error::runtime_error(&v107, &v174);
      v108 = v175;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v68 = v177;
      v109 = v176;
      v110 = v177;
      v111 = v178;
      if (v178)
      {
        *((_QWORD *)v177 + 2) = &v110;
        v68 = 0;
        v176 = &v177;
        v177 = 0;
        v178 = 0;
      }
      else
      {
        v109 = &v110;
      }
      v112 = v179;
      v179 = 0uLL;
      v115 = 0;
      v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v68);
      MEMORY[0x18D7898AC](&v174);
      if (!v122)
      {
LABEL_305:
        if (v195)
          goto LABEL_307;
        goto LABEL_306;
      }
      v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      if (*((_QWORD *)&v121 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v119);
      MEMORY[0x18D7898AC](&v116);
      if (v195)
        goto LABEL_307;
LABEL_306:
      (*(void (**)(unsigned __int128 *))__p)(&__p);
      goto LABEL_307;
    }
    v51 = (std::runtime_error_vtbl *)__p;
    if (*(char *)(__p + 23) < 0)
    {
      v51 = *(std::runtime_error_vtbl **)__p;
      v52 = *(_QWORD *)(__p + 8);
    }
    else
    {
      v52 = *(unsigned __int8 *)(__p + 23);
    }
    AMSCore::URL::parse((uint64_t)v51, v52, (uint64_t)&v181);
    if (!v188)
    {
      std::runtime_error::runtime_error(&v116, &v181);
      v117 = v182;
      v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v118 = v183;
      v119 = v184;
      v120 = v185;
      if (v185)
      {
        *((_QWORD *)v184 + 2) = &v119;
        v183 = &v184;
        v184 = 0;
        v185 = 0;
      }
      else
      {
        v118 = &v119;
      }
      v121 = v186;
      v186 = 0uLL;
      v122 = 1;
      std::runtime_error::runtime_error(&v107, &v116);
      v108 = v117;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v109 = v118;
      v110 = v119;
      v111 = v120;
      if (v120)
      {
        *((_QWORD *)v119 + 2) = &v110;
        v118 = &v119;
        v119 = 0;
        v120 = 0;
      }
      else
      {
        v109 = &v110;
      }
      v112 = v121;
      v121 = 0uLL;
      std::runtime_error::runtime_error(&v174, &v107);
      v175 = v108;
      v84 = v110;
      v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v176 = v109;
      v177 = v110;
      v178 = v111;
      if (v111)
      {
        *((_QWORD *)v110 + 2) = &v177;
        v84 = 0;
        v109 = &v110;
        v110 = 0;
        v111 = 0;
      }
      else
      {
        v176 = &v177;
      }
      v179 = v112;
      v112 = 0uLL;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v84);
      MEMORY[0x18D7898AC](&v107);
      std::runtime_error::runtime_error(&v107, &v174);
      v108 = v175;
      v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v85 = v177;
      v109 = v176;
      v110 = v177;
      v111 = v178;
      if (v178)
      {
        *((_QWORD *)v177 + 2) = &v110;
        v85 = 0;
        v176 = &v177;
        v177 = 0;
        v178 = 0;
      }
      else
      {
        v109 = &v110;
      }
      v112 = v179;
      v179 = 0uLL;
      v115 = 0;
      v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v85);
      MEMORY[0x18D7898AC](&v174);
      if (v122)
      {
        v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v86 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
        if (*((_QWORD *)&v121 + 1))
        {
          v87 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v119);
        MEMORY[0x18D7898AC](&v116);
      }
      goto LABEL_303;
    }
    AMSCore::URL::URL((std::string *)&v168, (const AMSCore::URL *)&v181);
    if (!v209)
      goto LABEL_338;
    v59 = v203.__vftable;
    imp = v203.__imp_.__imp_;
    v203.__imp_.__imp_ = 0;
    v203.__vftable = 0;
    v165[0] = v59;
    v165[1] = (void *)imp;
    v166 = v204;
    v167 = (int)v205;
    if (*((_QWORD *)&v204 + 1))
    {
      v61 = *(_QWORD *)(v204 + 8);
      if (((unint64_t)imp & (unint64_t)(imp - 1)) != 0)
      {
        if (v61 >= (unint64_t)imp)
          v61 %= (unint64_t)imp;
      }
      else
      {
        v61 &= (unint64_t)(imp - 1);
      }
      *((_QWORD *)&v59->~runtime_error + v61) = &v166;
      v204 = 0uLL;
    }
    if (!v223)
    {
LABEL_338:
      __break(1u);
      return;
    }
    v72 = v217.__vftable;
    v163 = *(_OWORD *)&v217.~runtime_error;
    what = v217.what;
    v217.~runtime_error_0 = 0;
    v72->what = 0;
    v72->~runtime_error = 0;
    LOBYTE(v124.__vftable) = 0;
    BYTE8(v125) = 0;
    LOBYTE(v126) = 0;
    LOBYTE(v127) = 0;
    LOBYTE(v128) = 0;
    LOBYTE(v129) = 0;
    BYTE8(v129) = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v147 = 0;
    v148 = 0;
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    v157 = 0;
    v158 = 0;
    v159 = 0;
    LOBYTE(v160) = 0;
    v162 = 0;
    v138 = 0;
    v137 = 0;
    v140 = 0;
    v139 = 0;
    v156 = 0;
    AMSCore::HTTPResponse::HTTPResponse((uint64_t)&v174, (__int128 *)&v168, 200, (uint64_t *)v165, &v163, (__int128 *)&v124);
    if (v162 && v161 < 0)
      operator delete(v160);
    v73 = (void **)v137;
    if (v137)
    {
      for (i = v138; i != v73; i -= 3)
      {
        if (*((char *)i - 1) < 0)
          operator delete(*(i - 3));
      }
      v138 = v73;
      operator delete(v73);
    }
    if (BYTE8(v125) && SBYTE7(v125) < 0)
      operator delete(v124.__vftable);
    if (SHIBYTE(what) < 0)
      operator delete((void *)v163);
    v75 = (void **)v166;
    if (!(_QWORD)v166)
    {
LABEL_259:
      v76 = v165[0];
      v165[0] = 0;
      if (v76)
        operator delete(v76);
      AMSCore::URL::~URL((AMSCore::URL *)&v168);
      if (v202)
      {
        v77 = 1000 * (uint64_t)v196.__vftable;
        AMSCore::HTTPResponse::HTTPResponse((uint64_t)&v116, (__int128 *)&v174);
        v123 = v77;
        AMSCore::HTTPResponse::HTTPResponse((uint64_t)&v107, (__int128 *)&v116);
        v114 = v123;
        v115 = 1;
        AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v116);
        AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v174);
LABEL_303:
        if (v188)
        {
          AMSCore::URL::~URL((AMSCore::URL *)&v181);
          goto LABEL_305;
        }
        ((void (*)(std::runtime_error *))v181.~runtime_error)(&v181);
        if (v195)
        {
LABEL_307:
          if (!v202)
            ((void (*)(std::runtime_error *))v196.~runtime_error)(&v196);
          goto LABEL_309;
        }
        goto LABEL_306;
      }
      goto LABEL_338;
    }
    while (1)
    {
      v78 = (void **)*v75;
      if (*((char *)v75 + 63) < 0)
      {
        operator delete(v75[5]);
        if (*((char *)v75 + 39) < 0)
LABEL_268:
          operator delete(v75[2]);
      }
      else if (*((char *)v75 + 39) < 0)
      {
        goto LABEL_268;
      }
      operator delete(v75);
      v75 = v78;
      if (!v78)
        goto LABEL_259;
    }
  }
LABEL_175:
  std::runtime_error::runtime_error(&v116, &v203);
  v117 = v204;
  v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v118 = v205;
  v119 = v206;
  v120 = v207;
  if (v207)
  {
    *((_QWORD *)v206 + 2) = &v119;
    v205 = &v206;
    v206 = 0;
    v207 = 0;
  }
  else
  {
    v118 = &v119;
  }
  v121 = v208;
  v208 = 0uLL;
  v122 = 1;
  std::runtime_error::runtime_error(&v107, &v116);
  v108 = v117;
  v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v109 = v118;
  v110 = v119;
  v111 = v120;
  if (v120)
  {
    *((_QWORD *)v119 + 2) = &v110;
    v118 = &v119;
    v119 = 0;
    v120 = 0;
  }
  else
  {
    v109 = &v110;
  }
  v112 = v121;
  v121 = 0uLL;
  std::runtime_error::runtime_error(&v174, &v107);
  v175 = v108;
  v54 = v110;
  v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v176 = v109;
  v177 = v110;
  v178 = v111;
  if (v111)
  {
    *((_QWORD *)v110 + 2) = &v177;
    v54 = 0;
    v109 = &v110;
    v110 = 0;
    v111 = 0;
  }
  else
  {
    v176 = &v177;
  }
  v179 = v112;
  v112 = 0uLL;
  v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v54);
  MEMORY[0x18D7898AC](&v107);
  std::runtime_error::runtime_error(&v107, &v174);
  v108 = v175;
  v107.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v55 = v177;
  v109 = v176;
  v110 = v177;
  v111 = v178;
  if (v178)
  {
    *((_QWORD *)v177 + 2) = &v110;
    v55 = 0;
    v176 = &v177;
    v177 = 0;
    v178 = 0;
  }
  else
  {
    v109 = &v110;
  }
  v112 = v179;
  v179 = 0uLL;
  v115 = 0;
  v174.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v55);
  MEMORY[0x18D7898AC](&v174);
  if (v122)
  {
    v116.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (*((_QWORD *)&v121 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v118, v119);
    MEMORY[0x18D7898AC](&v116);
  }
LABEL_309:
  std::__expected_base<AMSCore::IHTTPHeaderMap,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)&v203);
LABEL_310:
  if (!v216)
  {
    ((void (*)(std::runtime_error *))v210.~runtime_error)(&v210);
    if (v223)
      goto LABEL_313;
    goto LABEL_312;
  }
LABEL_311:
  if (!v223)
    goto LABEL_312;
LABEL_313:
  v89 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v89 + 664))
  {
    if (v115)
    {
      AMSCore::HTTPResponse::operator=(*(_QWORD *)(a1 + 8), (uint64_t)&v107);
      *(_QWORD *)(v89 + 656) = v114;
    }
    else
    {
      AMSCore::HTTPResponse::~HTTPResponse(*(AMSCore::HTTPResponse **)(a1 + 8));
      std::runtime_error::runtime_error(v90, &v107);
      *(_QWORD *)v89 = MEMORY[0x1E0DE4F90] + 16;
      *(_OWORD *)(v89 + 16) = v108;
      *(_QWORD *)v89 = off_1E2521330;
      *(_QWORD *)(v89 + 32) = v109;
      v91 = v110;
      *(_QWORD *)(v89 + 40) = v110;
      v92 = v89 + 40;
      v93 = v111;
      *(_QWORD *)(v89 + 48) = v111;
      if (v93)
      {
        *((_QWORD *)v91 + 2) = v92;
        v109 = &v110;
        v110 = 0;
        v111 = 0;
      }
      else
      {
        *(_QWORD *)(v89 + 32) = v92;
      }
      *(_OWORD *)(v89 + 56) = v112;
      v112 = 0uLL;
      *(_BYTE *)(v89 + 664) = 0;
    }
  }
  else if (v115)
  {
    (**(void (***)(_QWORD))v89)(*(_QWORD *)(a1 + 8));
    AMSCore::HTTPResponse::HTTPResponse(v89, (__int128 *)&v107);
    *(_QWORD *)(v89 + 656) = v114;
    *(_BYTE *)(v89 + 664) = 1;
  }
  else
  {
    std::runtime_error::operator=(*(std::runtime_error **)(a1 + 8), &v107);
    v95 = v89 + 40;
    v94 = *(unsigned int **)(v89 + 40);
    *(_OWORD *)(v89 + 16) = v108;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v89 + 32, v94);
    *(_QWORD *)(v89 + 32) = v109;
    v96 = v110;
    *(_QWORD *)(v89 + 40) = v110;
    v97 = v111;
    *(_QWORD *)(v89 + 48) = v111;
    if (v97)
    {
      *((_QWORD *)v96 + 2) = v95;
      v109 = &v110;
      v110 = 0;
      v111 = 0;
    }
    else
    {
      *(_QWORD *)(v89 + 32) = v95;
    }
    v98 = v112;
    v112 = 0uLL;
    v99 = *(std::__shared_weak_count **)(v89 + 64);
    *(_OWORD *)(v89 + 56) = v98;
    if (v99)
    {
      p_shared_owners = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(p_shared_owners);
      while (__stlxr(v101 - 1, p_shared_owners));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
  }
  if (v115)
    AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v107);
  else
    ((void (*)(std::runtime_error *))v107.~runtime_error)(&v107);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v104, v105);
}

void sub_18CC21D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,unsigned int *a33)
{
  uint64_t v33;

  if (LOBYTE(STACK[0xB68]))
    AMSCore::URL::~URL((AMSCore::URL *)&STACK[0xAD0]);
  else
    (*(void (**)(unint64_t *))STACK[0xAD0])(&STACK[0xAD0]);
  if (!LOBYTE(STACK[0xBB8]))
    (*(void (**)(unint64_t *))STACK[0xB70])(&STACK[0xB70]);
  if (!LOBYTE(STACK[0xC08]))
    (*(void (**)(unint64_t *))STACK[0xBC0])(&STACK[0xBC0]);
  std::__expected_base<AMSCore::IHTTPHeaderMap,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)&STACK[0xC10]);
  if (!*(_BYTE *)(v33 - 184))
    (**(void (***)(uint64_t))(v33 - 256))(v33 - 256);
  if (!*(_BYTE *)(v33 - 104))
    (**(void (***)(uint64_t))(v33 - 176))(v33 - 176);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore25HTTPCacheDataAccessObject16getCachedReponseERKNSt3__112basic_stringIcNS1_11char_traitsI"
                     "cEENS1_9allocatorIcEEEES9_E3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore25HTTPCacheDataAccessObject16getCachedReponseERKNSt3__112basic_stringIcNS1_11c"
                                "har_traitsIcEENS1_9allocatorIcEEEES9_E3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore25HTTPCacheDataAccessObject16getCachedReponseERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_E3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore25HTTPCacheDataAccessObject16getCachedReponseERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,std::string const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::target_type()
{
}

uint64_t AMSCore::getValueAs<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>(uint64_t a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  uint64_t result;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::runtime_error v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v5 = (uint64_t *)(a2 + 8);
  v6 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_40;
  v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      v10 = *((char *)v6 + 55);
      v11 = v10 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      v13 = v12 >= a4 ? a4 : v12;
      v14 = memcmp(__s1, v11, v13);
      if (v14)
        break;
      if (a4 <= v12)
        goto LABEL_17;
LABEL_3:
      v6 = (uint64_t *)v6[1];
      if (!v6)
        goto LABEL_18;
    }
    if ((v14 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v9 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_18:
  if (v9 == v5)
    goto LABEL_40;
  v15 = *((char *)v9 + 55);
  if (v15 >= 0)
    v16 = v9 + 4;
  else
    v16 = (const void *)v9[4];
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)v9 + 55);
  else
    v17 = v9[5];
  if (v17 >= a4)
    v18 = a4;
  else
    v18 = v17;
  result = memcmp(__s1, v16, v18);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_40;
  }
  else if (a4 < v17)
  {
    goto LABEL_40;
  }
  v20 = *((_DWORD *)v9 + 20);
  if (v20 == -1)
    v21 = 0;
  else
    v21 = *((_DWORD *)v9 + 20);
  if ((v21 - 5) > 1)
  {
LABEL_40:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v26, 4u, "any doesn't contain expected type");
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v26);
    *(_OWORD *)(a1 + 16) = v27;
    *(_QWORD *)a1 = off_1E2521330;
    v23 = v29;
    *(_QWORD *)(a1 + 32) = v28;
    *(_QWORD *)(a1 + 40) = v23;
    v24 = a1 + 40;
    v25 = v30;
    *(_QWORD *)(a1 + 48) = v30;
    if (v25)
    {
      *(_QWORD *)(v23 + 16) = v24;
      v28 = &v29;
      v29 = 0;
      v30 = 0;
      v23 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v24;
    }
    *(_OWORD *)(a1 + 56) = v31;
    v31 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v26.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v23);
    return MEMORY[0x18D7898AC](&v26);
  }
  else
  {
    if (v20 == v21)
      v22 = v9 + 7;
    else
      v22 = 0;
    *(_QWORD *)a1 = v22;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

uint64_t AMSCore::getValueAs<std::string,AMSCore::Any>(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::runtime_error v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16[2];

  v16[0] = (uint64_t)a3;
  v16[1] = a4;
  if (*(_DWORD *)(a2 + 24) == 8)
    return AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>(a1, a2, a3, a4);
  v9 = 34;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v10, 0xCu, "unable to find value with key \"", v16, &v9);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v10);
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)a1 = off_1E2521330;
  v6 = v13;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a1 + 40;
  v8 = v14;
  *(_QWORD *)(a1 + 48) = v14;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
    v6 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_OWORD *)(a1 + 56) = v15;
  v15 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v10.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v6);
  return MEMORY[0x18D7898AC](&v10);
}

uint64_t AMSCore::getValueAs<long long,std::map<std::string,AMSCore::Any>>(uint64_t a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  std::runtime_error v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v5 = (uint64_t *)(a2 + 8);
  v6 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_32;
  v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      v10 = *((char *)v6 + 55);
      v11 = v10 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      v13 = v12 >= a4 ? a4 : v12;
      v14 = memcmp(__s1, v11, v13);
      if (v14)
        break;
      if (a4 <= v12)
        goto LABEL_17;
LABEL_3:
      v6 = (uint64_t *)v6[1];
      if (!v6)
        goto LABEL_18;
    }
    if ((v14 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v9 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_18:
  if (v9 == v5)
    goto LABEL_32;
  v15 = *((char *)v9 + 55);
  if (v15 >= 0)
    v16 = v9 + 4;
  else
    v16 = (const void *)v9[4];
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)v9 + 55);
  else
    v17 = v9[5];
  if (v17 >= a4)
    v18 = a4;
  else
    v18 = v17;
  result = memcmp(__s1, v16, v18);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
    {
LABEL_32:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v26, 4u, "any doesn't contain expected type");
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v26);
      *(_OWORD *)(a1 + 16) = v27;
      *(_QWORD *)a1 = off_1E2521330;
      v20 = v29;
      *(_QWORD *)(a1 + 32) = v28;
      *(_QWORD *)(a1 + 40) = v20;
      v21 = a1 + 40;
      v22 = v30;
      *(_QWORD *)(a1 + 48) = v30;
      if (v22)
      {
        *(_QWORD *)(v20 + 16) = v21;
        v28 = &v29;
        v29 = 0;
        v30 = 0;
        v20 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v21;
      }
      *(_OWORD *)(a1 + 56) = v31;
      v31 = 0uLL;
      *(_BYTE *)(a1 + 72) = 0;
      v26.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v20);
      return MEMORY[0x18D7898AC](&v26);
    }
  }
  else if (a4 < v17)
  {
    goto LABEL_32;
  }
  v23 = *((_DWORD *)v9 + 20);
  if (v23 == -1)
    v23 = 0;
  switch(v23)
  {
    case 1:
      v25 = 0;
      LOBYTE(v24) = *((_BYTE *)v9 + 56);
      goto LABEL_45;
    case 2:
      v24 = (uint64_t)*((double *)v9 + 7);
      goto LABEL_44;
    case 3:
    case 4:
      v24 = v9[7];
      goto LABEL_44;
    case 7:
      v24 = v9[7] / 1000;
LABEL_44:
      v25 = v24 & 0xFFFFFFFFFFFFFF00;
LABEL_45:
      *(_QWORD *)a1 = v25 | v24;
      *(_BYTE *)(a1 + 72) = 1;
      break;
    default:
      goto LABEL_32;
  }
  return result;
}

uint64_t AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>(uint64_t a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::runtime_error v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v5 = (uint64_t *)(a2 + 8);
  v6 = *(uint64_t **)(a2 + 8);
  if (!v6)
    goto LABEL_34;
  v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      v10 = *((char *)v6 + 55);
      v11 = v10 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      v13 = v12 >= a4 ? a4 : v12;
      v14 = memcmp(__s1, v11, v13);
      if (v14)
        break;
      if (a4 <= v12)
        goto LABEL_17;
LABEL_3:
      v6 = (uint64_t *)v6[1];
      if (!v6)
        goto LABEL_18;
    }
    if ((v14 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_17:
    v9 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_18:
  if (v9 == v5)
    goto LABEL_34;
  v15 = *((char *)v9 + 55);
  if (v15 >= 0)
    v16 = v9 + 4;
  else
    v16 = (const void *)v9[4];
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)v9 + 55);
  else
    v17 = v9[5];
  if (v17 >= a4)
    v18 = a4;
  else
    v18 = v17;
  result = memcmp(__s1, v16, v18);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
    {
LABEL_34:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v23, 4u, "any doesn't contain expected type");
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v23);
      *(_OWORD *)(a1 + 16) = v24;
      *(_QWORD *)a1 = off_1E2521330;
      v20 = v26;
      *(_QWORD *)(a1 + 32) = v25;
      *(_QWORD *)(a1 + 40) = v20;
      v21 = a1 + 40;
      v22 = v27;
      *(_QWORD *)(a1 + 48) = v27;
      if (v22)
      {
        *(_QWORD *)(v20 + 16) = v21;
        v25 = &v26;
        v26 = 0;
        v27 = 0;
        v20 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v21;
      }
      *(_OWORD *)(a1 + 56) = v28;
      v28 = 0uLL;
      *(_BYTE *)(a1 + 72) = 0;
      v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v20);
      return MEMORY[0x18D7898AC](&v23);
    }
  }
  else if (a4 < v17)
  {
    goto LABEL_34;
  }
  if (*((_DWORD *)v9 + 20) != 5)
    goto LABEL_34;
  *(_QWORD *)a1 = v9 + 7;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

void std::__expected_base<AMSCore::IHTTPHeaderMap,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](uint64_t a1)
{
  void **v2;
  void (**v3)(uint64_t);
  void **v4;

  if (!*(_BYTE *)(a1 + 72))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return;
  }
  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_10:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void (***)(uint64_t))a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
}

uint64_t AMSCore::HTTPResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void **v16;
  __int128 v17;
  void **v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void **v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  std::runtime_error *v41;
  std::runtime_error *v42;
  char v43;
  std::runtime_error_vtbl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = AMSCore::URL::operator=(a1, (__int128 *)a2);
  *(_WORD *)(v4 + 152) = *(_WORD *)(a2 + 152);
  if (!*(_QWORD *)(v4 + 184))
    goto LABEL_7;
  v5 = *(void ***)(a1 + 176);
  if (v5)
  {
    do
    {
      v15 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_17:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v5);
      v5 = v15;
    }
    while (v15);
  }
  *(_QWORD *)(a1 + 176) = 0;
  v6 = *(_QWORD *)(a1 + 168);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * i) = 0;
  }
  *(_QWORD *)(a1 + 184) = 0;
LABEL_7:
  v8 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v9 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v8;
  if (v9)
    operator delete(v9);
  v10 = *(_QWORD *)(a2 + 176);
  v11 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v10;
  *(_QWORD *)(a1 + 168) = v11;
  *(_QWORD *)(a2 + 168) = 0;
  v12 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v12;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  if (v12)
  {
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_QWORD *)(a1 + 168);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v13) = a1 + 176;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
  }
  v16 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v16);
  v17 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)v16 = v17;
  *(_BYTE *)(a2 + 223) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  v18 = (void **)(a1 + 224);
  v19 = (__int128 *)(a2 + 224);
  if (*(unsigned __int8 *)(a1 + 248) == *(unsigned __int8 *)(a2 + 248))
  {
    if (*(_BYTE *)(a1 + 248))
    {
      if (*(char *)(a1 + 247) < 0)
        operator delete(*v18);
      v20 = *v19;
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)v18 = v20;
      *(_BYTE *)(a2 + 247) = 0;
      *(_BYTE *)(a2 + 224) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 248))
  {
    if (*(char *)(a1 + 247) < 0)
      operator delete(*v18);
    *(_BYTE *)(a1 + 248) = 0;
  }
  else
  {
    v21 = *v19;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)v18 = v21;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)v19 = 0;
    *(_BYTE *)(a1 + 248) = 1;
  }
  v22 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v22;
  v23 = *(_OWORD *)(a2 + 288);
  v24 = *(_OWORD *)(a2 + 304);
  v25 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 288) = v23;
  v26 = *(_QWORD *)(a1 + 352);
  if (v26)
  {
    v27 = (void **)(a1 + 352);
    v28 = *(_QWORD *)(a1 + 360);
    v29 = *(void **)(a1 + 352);
    if (v28 != v26)
    {
      do
      {
        if (*(char *)(v28 - 1) < 0)
          operator delete(*(void **)(v28 - 24));
        v28 -= 24;
      }
      while (v28 != v26);
      v29 = *v27;
    }
    *(_QWORD *)(a1 + 360) = v26;
    operator delete(v29);
    *v27 = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  v30 = *(_OWORD *)(a2 + 424);
  v31 = *(_OWORD *)(a2 + 440);
  v32 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 456) = v32;
  *(_OWORD *)(a1 + 440) = v31;
  *(_OWORD *)(a1 + 424) = v30;
  v33 = *(_OWORD *)(a2 + 488);
  v34 = *(_OWORD *)(a2 + 504);
  v35 = *(_OWORD *)(a2 + 514);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 514) = v35;
  *(_OWORD *)(a1 + 488) = v33;
  *(_OWORD *)(a1 + 504) = v34;
  v36 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = v36;
  v37 = (void **)(a1 + 536);
  v38 = (__int128 *)(a2 + 536);
  if (*(unsigned __int8 *)(a1 + 560) == *(unsigned __int8 *)(a2 + 560))
  {
    if (*(_BYTE *)(a1 + 560))
    {
      if (*(char *)(a1 + 559) < 0)
        operator delete(*v37);
      v39 = *v38;
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
      *(_OWORD *)v37 = v39;
      *(_BYTE *)(a2 + 559) = 0;
      *(_BYTE *)(a2 + 536) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 560))
  {
    if (*(char *)(a1 + 559) < 0)
      operator delete(*v37);
    *(_BYTE *)(a1 + 560) = 0;
  }
  else
  {
    v40 = *v38;
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_OWORD *)v37 = v40;
    *(_QWORD *)(a2 + 544) = 0;
    *(_QWORD *)(a2 + 552) = 0;
    *(_QWORD *)v38 = 0;
    *(_BYTE *)(a1 + 560) = 1;
  }
  v41 = (std::runtime_error *)(a1 + 568);
  v42 = (std::runtime_error *)(a2 + 568);
  if (*(unsigned __int8 *)(a1 + 648) == *(unsigned __int8 *)(a2 + 648))
  {
    if (*(_BYTE *)(a1 + 648))
      std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::operator=[abi:fe180100](v41, v42);
  }
  else if (*(_BYTE *)(a1 + 648))
  {
    if (*(_BYTE *)(a1 + 640))
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v41, *(unsigned int **)(a1 + 576));
    else
      ((void (*)(std::runtime_error *, std::runtime_error *))v41->~runtime_error)(v41, v42);
    *(_BYTE *)(a1 + 648) = 0;
  }
  else
  {
    v43 = *(_BYTE *)(a2 + 640);
    if (v43)
    {
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      v44 = (std::runtime_error_vtbl *)(a1 + 576);
      v45 = *(_QWORD *)(a2 + 576);
      *(_QWORD *)(a1 + 576) = v45;
      v46 = *(_QWORD *)(a2 + 584);
      *(_QWORD *)(a1 + 584) = v46;
      if (v46)
      {
        *(_QWORD *)(v45 + 16) = v44;
        v42->__vftable = (std::runtime_error_vtbl *)(a2 + 576);
        *(_QWORD *)(a2 + 576) = 0;
        *(_QWORD *)(a2 + 584) = 0;
      }
      else
      {
        v41->__vftable = v44;
      }
    }
    else
    {
      std::runtime_error::runtime_error(v41, v42);
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      *(_QWORD *)(a1 + 568) = off_1E2521330;
      *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
      v47 = a1 + 608;
      v48 = *(_QWORD *)(a2 + 608);
      *(_QWORD *)(a1 + 608) = v48;
      v49 = *(_QWORD *)(a2 + 616);
      *(_QWORD *)(a1 + 616) = v49;
      if (v49)
      {
        *(_QWORD *)(v48 + 16) = v47;
        *(_QWORD *)(a2 + 600) = a2 + 608;
        *(_QWORD *)(a2 + 608) = 0;
        *(_QWORD *)(a2 + 616) = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 600) = v47;
      }
      *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
      *(_QWORD *)(a2 + 632) = 0;
      *(_QWORD *)(a2 + 624) = 0;
    }
    *(_BYTE *)(a1 + 640) = v43;
    *(_BYTE *)(a1 + 648) = 1;
  }
  return a1;
}

uint64_t AMSCore::URL::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  void **v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;
  void **v15;
  __int128 v16;

  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  v6 = (void **)(a1 + 32);
  v7 = a2 + 2;
  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(char *)(a1 + 55) < 0)
        operator delete(*v6);
      v8 = *v7;
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v6 = v8;
      *((_BYTE *)a2 + 55) = 0;
      *((_BYTE *)a2 + 32) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v6);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v9 = *v7;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v6 = v9;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  v10 = (void **)(a1 + 64);
  v11 = a2 + 4;
  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      if (*(char *)(a1 + 87) < 0)
        operator delete(*v10);
      v12 = *v11;
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_OWORD *)v10 = v12;
      *((_BYTE *)a2 + 87) = 0;
      *((_BYTE *)a2 + 64) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0)
      operator delete(*v10);
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    v13 = *v11;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)v10 = v13;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *(_QWORD *)v11 = 0;
    *(_BYTE *)(a1 + 88) = 1;
  }
  v14 = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 98) = *((_BYTE *)a2 + 98);
  *(_WORD *)(a1 + 96) = v14;
  std::list<std::pair<std::string,std::string>>::__move_assign((char *)(a1 + 104), (char *)a2 + 104);
  v15 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*v15);
  v16 = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *(_OWORD *)v15 = v16;
  *((_BYTE *)a2 + 151) = 0;
  *((_BYTE *)a2 + 128) = 0;
  return a1;
}

std::runtime_error *std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  int imp_low;
  std::__libcpp_refstring *p_imp;
  std::__libcpp_refstring *v6;
  const char *imp;
  std::runtime_error_vtbl *v8;
  std::__libcpp_refstring *v9;
  const char *v10;
  std::__libcpp_refstring *v11;
  std::runtime_error_vtbl *v12;
  std::runtime_error_vtbl *v13;
  const char *v14;
  std::runtime_error_vtbl *v15;
  std::runtime_error_vtbl *v16;
  unsigned int *v17;
  std::runtime_error_vtbl *v18;
  std::runtime_error_vtbl *v19;
  const char *v20;
  std::runtime_error_vtbl *v21;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  imp_low = LOBYTE(a2[4].__imp_.__imp_);
  if (LOBYTE(this[4].__imp_.__imp_))
  {
    p_imp = &this->__imp_;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this, (unsigned int *)this->__imp_.__imp_);
    if (imp_low)
    {
      this->__vftable = a2->__vftable;
      v6 = &a2->__imp_;
      imp = a2->__imp_.__imp_;
      this->__imp_.__imp_ = imp;
      v8 = a2[1].__vftable;
      this[1].__vftable = v8;
      if (v8)
      {
        *((_QWORD *)imp + 2) = p_imp;
        a2->__vftable = (std::runtime_error_vtbl *)v6;
        v6->__imp_ = 0;
        a2[1].__vftable = 0;
      }
      else
      {
        this->__vftable = (std::runtime_error_vtbl *)p_imp;
      }
    }
    else
    {
      std::runtime_error::runtime_error(this, a2);
      this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
      this[1] = a2[1];
      this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      this[2].__vftable = a2[2].__vftable;
      v13 = (std::runtime_error_vtbl *)&a2[2].__imp_;
      v14 = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = v14;
      v15 = (std::runtime_error_vtbl *)&this[2].__imp_;
      v16 = a2[3].__vftable;
      this[3].__vftable = v16;
      if (v16)
      {
        *((_QWORD *)v14 + 2) = v15;
        a2[2].__vftable = v13;
        v13->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = v15;
      }
      *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      LOBYTE(this[4].__imp_.__imp_) = 0;
    }
  }
  else if (LOBYTE(a2[4].__imp_.__imp_))
  {
    ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    this->__vftable = a2->__vftable;
    v9 = &a2->__imp_;
    v10 = a2->__imp_.__imp_;
    this->__imp_.__imp_ = v10;
    v11 = &this->__imp_;
    v12 = a2[1].__vftable;
    this[1].__vftable = v12;
    if (v12)
    {
      *((_QWORD *)v10 + 2) = v11;
      a2->__vftable = (std::runtime_error_vtbl *)v9;
      v9->__imp_ = 0;
      a2[1].__vftable = 0;
    }
    else
    {
      this->__vftable = (std::runtime_error_vtbl *)v11;
    }
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    std::runtime_error::operator=(this, a2);
    v18 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v17 = (unsigned int *)this[2].__imp_.__imp_;
    this[1] = a2[1];
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&this[2], v17);
    this[2].__vftable = a2[2].__vftable;
    v19 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v20 = a2[2].__imp_.__imp_;
    this[2].__imp_.__imp_ = v20;
    v21 = a2[3].__vftable;
    this[3].__vftable = v21;
    if (v21)
    {
      *((_QWORD *)v20 + 2) = v18;
      a2[2].__vftable = v19;
      v19->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v18;
    }
    v23 = *(_OWORD *)&a2[3].__imp_.__imp_;
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    v24 = (std::__shared_weak_count *)this[4].__vftable;
    *(_OWORD *)&this[3].__imp_.__imp_ = v23;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  return this;
}

void std::list<std::pair<std::string,std::string>>::__move_assign(char *a1, char *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  if (*((_QWORD *)a1 + 2))
  {
    v4 = *(_QWORD *)a1;
    v5 = (char *)*((_QWORD *)a1 + 1);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)a1 + 2) = 0;
    if (v5 != a1)
    {
      do
      {
        v12 = (char *)*((_QWORD *)v5 + 1);
        if (v5[63] < 0)
        {
          operator delete(*((void **)v5 + 5));
          if (v5[39] < 0)
LABEL_12:
            operator delete(*((void **)v5 + 2));
        }
        else if (v5[39] < 0)
        {
          goto LABEL_12;
        }
        operator delete(v5);
        v5 = v12;
      }
      while (v12 != a1);
    }
  }
  if (a1 == a2)
  {
    __break(1u);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 2);
    if (v7)
    {
      v9 = *(_QWORD *)a2;
      v8 = (uint64_t *)*((_QWORD *)a2 + 1);
      v10 = *v8;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(*(_QWORD *)a2 + 8);
      **(_QWORD **)(v9 + 8) = v10;
      v11 = *(_QWORD *)a1;
      *(_QWORD *)(v11 + 8) = v8;
      *v8 = v11;
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(v9 + 8) = a1;
      *((_QWORD *)a1 + 2) += v7;
      *((_QWORD *)a2 + 2) = 0;
    }
  }
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [34]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC2316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [34]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC232CC(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void AMSCore::SQLiteDatabase::~SQLiteDatabase(AMSCore::SQLiteDatabase *this)
{
  uint64_t v2;
  uint64_t v3;
  AMSCore::SQLiteDatabase *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  AMSCore::SQLiteDatabase *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  AMSCore::SQLiteDatabase *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  AMSCore::SQLiteDatabase *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;

  v2 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
  {
    v33 = v2;
    v3 = *((_QWORD *)this + 29);
    if (!v3)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v33);
  }
  v4 = (AMSCore::SQLiteDatabase *)*((_QWORD *)this + 29);
  if (v4 == (AMSCore::SQLiteDatabase *)((char *)this + 208))
  {
    v5 = 4;
    v4 = (AMSCore::SQLiteDatabase *)((char *)this + 208);
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v9)
  {
    v33 = v9;
    v10 = *((_QWORD *)this + 22);
    if (!v10)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v33);
  }
  v11 = (AMSCore::SQLiteDatabase *)*((_QWORD *)this + 22);
  if (v11 == (AMSCore::SQLiteDatabase *)((char *)this + 152))
  {
    v12 = 4;
    v11 = (AMSCore::SQLiteDatabase *)((char *)this + 152);
    goto LABEL_21;
  }
  if (v11)
  {
    v12 = 5;
LABEL_21:
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v16)
  {
    v33 = v16;
    v17 = *((_QWORD *)this + 15);
    if (!v17)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v33);
  }
  v18 = (AMSCore::SQLiteDatabase *)*((_QWORD *)this + 15);
  if (v18 == (AMSCore::SQLiteDatabase *)((char *)this + 96))
  {
    v19 = 4;
    v18 = (AMSCore::SQLiteDatabase *)((char *)this + 96);
    goto LABEL_34;
  }
  if (v18)
  {
    v19 = 5;
LABEL_34:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v23)
  {
    v33 = v23;
    v24 = *((_QWORD *)this + 8);
    if (!v24)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v24 + 48))(v24, &v33);
  }
  v25 = (AMSCore::SQLiteDatabase *)*((_QWORD *)this + 8);
  if (v25 == (AMSCore::SQLiteDatabase *)((char *)this + 40))
  {
    v26 = 4;
    v25 = (AMSCore::SQLiteDatabase *)((char *)this + 40);
    goto LABEL_47;
  }
  if (v25)
  {
    v26 = 5;
LABEL_47:
    (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

uint64_t AMSCore::SQLiteDatabase::SQLiteDatabase(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v6;
  if (!v5)
  {
    v4 = (_QWORD *)(a1 + 64);
    goto LABEL_5;
  }
  if (v5 != a2 + 40)
  {
    *(_QWORD *)(a1 + 64) = v5;
LABEL_5:
    *v4 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 64) = a1 + 40;
  (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
LABEL_7:
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v7 = (_QWORD *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  if (!v8)
  {
    v7 = (_QWORD *)(a1 + 120);
    goto LABEL_11;
  }
  if (v8 != a2 + 96)
  {
    *(_QWORD *)(a1 + 120) = v8;
LABEL_11:
    *v7 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 120) = a1 + 96;
  (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 24))(*v7);
LABEL_13:
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v10 = (_QWORD *)(a2 + 176);
  v11 = *(_QWORD *)(a2 + 176);
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 144) = v12;
  if (!v11)
  {
    v10 = (_QWORD *)(a1 + 176);
    goto LABEL_17;
  }
  if (v11 != a2 + 152)
  {
    *(_QWORD *)(a1 + 176) = v11;
LABEL_17:
    *v10 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 176) = a1 + 152;
  (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
LABEL_19:
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  v13 = (_QWORD *)(a2 + 232);
  v14 = *(_QWORD *)(a2 + 232);
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 200) = v15;
  if (v14)
  {
    if (v14 == a2 + 208)
    {
      *(_QWORD *)(a1 + 232) = a1 + 208;
      (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
      return a1;
    }
    *(_QWORD *)(a1 + 232) = v14;
  }
  else
  {
    v13 = (_QWORD *)(a1 + 232);
  }
  *v13 = 0;
  return a1;
}

unint64_t std::string::append[abi:fe180100]<char const*,0>(unint64_t a1, char *__src, char *a3)
{
  int v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  void **p_dst;
  size_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  size_t v25;
  std::string::size_type v26;
  std::string::size_type v27;
  unint64_t v28;
  std::string::size_type v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  unint64_t v33;
  __int128 v34;
  char v35;
  size_t v36;
  void **__dst;
  size_t v39;
  int64_t v40;

  v6 = *(char *)(a1 + 23);
  v7 = a3 - __src;
  if (v6 < 0)
  {
    if (a3 == __src)
      return a1;
    v8 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = *(char **)a1;
    v10 = HIBYTE(v12);
    if (*(_QWORD *)a1 > (unint64_t)__src)
      goto LABEL_11;
LABEL_7:
    if (&v11[v8 + 1] <= __src)
      goto LABEL_11;
    if (v7 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:fe180100]();
    if (v7 > 0x16)
    {
      v22 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v22 = v7 | 7;
      v23 = v22 + 1;
      p_dst = (void **)operator new(v22 + 1);
      v39 = v7;
      v40 = v23 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v40) = (_BYTE)a3 - (_BYTE)__src;
      p_dst = (void **)&__dst;
    }
    memcpy(p_dst, __src, v7);
    *((_BYTE *)p_dst + v7) = 0;
    if (v40 >= 0)
      v24 = (void **)&__dst;
    else
      v24 = __dst;
    if (v40 >= 0)
      v25 = HIBYTE(v40);
    else
      v25 = v39;
    if ((v10 & 0x80) != 0)
    {
      v26 = *(_QWORD *)(a1 + 8);
      v27 = (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    else
    {
      v26 = v10;
      v27 = 22;
    }
    if (v27 - v26 >= v25)
    {
      if (v25)
      {
        v28 = a1;
        if ((v10 & 0x80) != 0)
          v28 = *(_QWORD *)a1;
        memmove((void *)(v28 + v26), v24, v25);
        v29 = v26 + v25;
        if (*(char *)(a1 + 23) < 0)
        {
          *(_QWORD *)(a1 + 8) = v29;
          *(_BYTE *)(v28 + v29) = 0;
          if ((SHIBYTE(v40) & 0x80000000) == 0)
            return a1;
          goto LABEL_54;
        }
        *(_BYTE *)(a1 + 23) = v29 & 0x7F;
        *(_BYTE *)(v28 + v29) = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace((std::string *)a1, v27, v25 - v27 + v26, v26, v26, 0, v25, (const std::string::value_type *)v24);
    }
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      return a1;
LABEL_54:
    operator delete(__dst);
    return a1;
  }
  if (a3 == __src)
    return a1;
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = 22;
  LOBYTE(v10) = *(_BYTE *)(a1 + 23);
  v11 = (char *)a1;
  if (a1 <= (unint64_t)__src)
    goto LABEL_7;
LABEL_11:
  if (v9 - v8 >= v7)
  {
    v19 = (_BYTE *)a1;
    if ((v10 & 0x80) != 0)
      v19 = *(_BYTE **)a1;
  }
  else
  {
    v14 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v9 < v7 + v8 - v9)
      std::string::__throw_length_error[abi:fe180100]();
    v15 = (void *)a1;
    if (v6 < 0)
      v15 = *(void **)a1;
    if (v9 <= 0x3FFFFFFFFFFFFFF2)
    {
      v16 = 2 * v9;
      if (v7 + v8 > 2 * v9)
        v16 = v7 + v8;
      v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v17 = v16 | 7;
      if (v16 >= 0x17)
        v14 = v17 + 1;
      else
        v14 = 23;
    }
    v18 = operator new(v14);
    v19 = v18;
    if (v8)
      memmove(v18, v15, v8);
    if (v9 != 22)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v14 | 0x8000000000000000;
    *(_QWORD *)a1 = v19;
  }
  v20 = &v19[v8];
  if (v7 >= 0x20)
  {
    if ((unint64_t)(&v19[v8] - __src) >= 0x20)
    {
      v30 = v7 & 0xFFFFFFFFFFFFFFE0;
      v21 = &__src[v7 & 0xFFFFFFFFFFFFFFE0];
      v31 = &v19[v8 + 16];
      v32 = (__int128 *)(__src + 16);
      v33 = v7 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v34 = *v32;
        *(v31 - 1) = *(v32 - 1);
        *v31 = v34;
        v31 += 2;
        v32 += 2;
        v33 -= 32;
      }
      while (v33);
      v20 += v30;
      if (v7 == v30)
        goto LABEL_59;
    }
    else
    {
      v21 = __src;
    }
  }
  else
  {
    v21 = __src;
  }
  do
  {
    v35 = *v21++;
    *v20++ = v35;
  }
  while (v21 != a3);
LABEL_59:
  *v20 = 0;
  v36 = v7 + v8;
  if (*(char *)(a1 + 23) < 0)
    *(_QWORD *)(a1 + 8) = v36;
  else
    *(_BYTE *)(a1 + 23) = v36 & 0x7F;
  return a1;
}

void sub_18CC23D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::SQLiteStatement,AMSCore::Error> &,char const(&)[32]>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4, const char *a5)
{
  _BYTE *v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::runtime_error v21;
  __int128 v22;
  unsigned int **v23;
  unsigned int *v24[2];
  __int128 v25;
  std::runtime_error v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::runtime_error v32;
  __int128 v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int *v36;
  __int128 v37;
  char v38;

  v5 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v32, (const std::runtime_error *)a2);
    v10 = (_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 40);
    v33 = *(_OWORD *)(a2 + 16);
    v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v34 = *(unsigned int ***)(a2 + 32);
    v35 = (unsigned int *)v11;
    v36 = *(unsigned int **)(a2 + 48);
    if (v36)
    {
      *(_QWORD *)(v11 + 16) = &v35;
      *(_QWORD *)(a2 + 32) = v10;
      *v10 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v34 = &v35;
    }
    v37 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v38 = 1;
    std::runtime_error::runtime_error(&v21, &v32);
    v22 = v33;
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v23 = v34;
    v24[0] = v35;
    v24[1] = v36;
    if (v36)
    {
      *((_QWORD *)v35 + 2) = v24;
      v34 = &v35;
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v23 = v24;
    }
    v25 = v37;
    v37 = 0uLL;
    AMSCore::Error::Error<char [32]>((uint64_t)&v26, (uint64_t)&v21, a3, a4, a5);
    std::runtime_error::runtime_error((std::runtime_error *)v5, &v26);
    *((_OWORD *)v5 + 1) = v27;
    *(_QWORD *)v5 = off_1E2521330;
    v12 = v29;
    *((_QWORD *)v5 + 4) = v28;
    *((_QWORD *)v5 + 5) = v12;
    v13 = v5 + 40;
    v14 = v30;
    *((_QWORD *)v5 + 6) = v30;
    if (v14)
    {
      *(_QWORD *)(v12 + 16) = v13;
      v28 = &v29;
      v29 = 0;
      v30 = 0;
      v12 = 0;
    }
    else
    {
      *((_QWORD *)v5 + 4) = v13;
    }
    *(_OWORD *)(v5 + 56) = v31;
    v31 = 0uLL;
    v5[72] = 1;
    v26.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v12);
    MEMORY[0x18D7898AC](&v26);
    v21.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, v24[0]);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v21);
    if (v38)
    {
      v32.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v35);
      return (_BYTE *)MEMORY[0x18D7898AC](&v32);
    }
  }
  return result;
}

void sub_18CC23FC8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  AMSCore::Error::~Error((AMSCore::Error *)va);
}

void sub_18CC23FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Unwind_Exception *v28;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(v28);
}

_BYTE *AMSCore::nestedError<std::expected<AMSCore::SQLiteStatement,AMSCore::Error> &,char const(&)[30]>(_BYTE *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  _BYTE *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *v11;
  unsigned int *v12;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error v25;
  std::runtime_error v26;
  unsigned int **v27;
  unsigned int *v28;
  std::runtime_error_vtbl *v29;
  __int128 v30;
  std::system_error v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::runtime_error v36;
  std::runtime_error v37;
  unsigned int **v38;
  unsigned int *v39;
  std::runtime_error_vtbl *v40;
  __int128 v41;
  char v42;
  std::string __what_arg;
  std::error_code v44;

  v4 = result;
  if (*(_BYTE *)(a2 + 72))
  {
    *result = 0;
    result[72] = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v36, (const std::runtime_error *)a2);
    v8 = (_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    v37 = *(std::runtime_error *)(a2 + 16);
    v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v38 = *(unsigned int ***)(a2 + 32);
    v39 = (unsigned int *)v9;
    v40 = *(std::runtime_error_vtbl **)(a2 + 48);
    if (v40)
    {
      *(_QWORD *)(v9 + 16) = &v39;
      *(_QWORD *)(a2 + 32) = v8;
      *v8 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      v38 = &v39;
    }
    v41 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v42 = 1;
    std::runtime_error::runtime_error(&v25, &v36);
    v26 = v37;
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = v38;
    v28 = v39;
    v29 = v40;
    if (v40)
    {
      *((_QWORD *)v39 + 2) = &v28;
      v38 = &v39;
      v39 = 0;
      v40 = 0;
    }
    else
    {
      v27 = &v28;
    }
    v30 = v41;
    v41 = 0uLL;
    AMSCore::StringUtils::join<char [30]>("error creating read statement", &__what_arg);
    *(_QWORD *)&v44.__val_ = a3;
    v44.__cat_ = a4;
    std::system_error::system_error(&v31, v44, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    v33 = 0;
    v34 = 0;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v32 = &v33;
    v10 = operator new();
    v11 = std::runtime_error::runtime_error((std::runtime_error *)v10, &v25);
    v11[1] = v26;
    v11->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v12 = v28;
    v11[2].__vftable = (std::runtime_error_vtbl *)v27;
    v11[2].__imp_.__imp_ = (const char *)v12;
    p_imp = &v11[2].__imp_;
    v14 = v29;
    v11[3].__vftable = v29;
    if (v14)
    {
      *((_QWORD *)v12 + 2) = p_imp;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
    }
    else
    {
      *(_QWORD *)(v10 + 32) = p_imp;
    }
    *(_OWORD *)(v10 + 56) = v30;
    v30 = 0uLL;
    *(_QWORD *)&v35 = v10;
    v15 = (_QWORD *)operator new();
    *v15 = &off_1E2523B58;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = v10;
    *((_QWORD *)&v35 + 1) = v15;
    std::runtime_error::runtime_error((std::runtime_error *)v4, &v31);
    *((_OWORD *)v4 + 1) = v31.__ec_;
    *(_QWORD *)v4 = off_1E2521330;
    v16 = v33;
    *((_QWORD *)v4 + 4) = v32;
    *((_QWORD *)v4 + 5) = v16;
    v17 = v4 + 40;
    v18 = v34;
    *((_QWORD *)v4 + 6) = v34;
    if (v18)
    {
      *(_QWORD *)(v16 + 16) = v17;
      v16 = 0;
      v32 = &v33;
      v33 = 0;
      v34 = 0;
    }
    else
    {
      *((_QWORD *)v4 + 4) = v17;
    }
    *(_OWORD *)(v4 + 56) = v35;
    v35 = 0uLL;
    v4[72] = 1;
    v31.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, (unsigned int *)v16);
    MEMORY[0x18D7898AC](&v31);
    v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v28);
    result = (_BYTE *)MEMORY[0x18D7898AC](&v25);
    if (v42)
    {
      v36.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v39);
      return (_BYTE *)MEMORY[0x18D7898AC](&v36);
    }
  }
  return result;
}

void sub_18CC24338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned int *a23)
{
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v23, a23);
  MEMORY[0x18D7898AC](&a18);
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CC24370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Unwind_Exception *v27;

  std::optional<AMSCore::Error>::~optional((uint64_t)&a27);
  _Unwind_Resume(v27);
}

void sub_18CC24380()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x18CC24368);
}

__n128 std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(std::runtime_error *a1, uint64_t a2)
{
  std::runtime_error *v3;
  _QWORD *v4;
  uint64_t v5;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v7;
  __n128 result;

  v3 = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  v3->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v3[1] = *(std::runtime_error *)(a2 + 16);
  v3->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v3[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  v3[2].__imp_.__imp_ = (const char *)v5;
  p_imp = (std::runtime_error_vtbl *)&v3[2].__imp_;
  v7 = *(std::runtime_error_vtbl **)(a2 + 48);
  v3[3].__vftable = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = p_imp;
    *(_QWORD *)(a2 + 32) = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v3[2].__vftable = p_imp;
  }
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)((char *)v3 + 56) = result;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  LOBYTE(v3[4].__imp_.__imp_) = 0;
  return result;
}

void std::make_unique[abi:fe180100]<AMSCore::HTTPCacheDataAccessObject,AMSCore::SQLiteDatabase,AMSCore::SQLiteStatement,AMSCore::SQLiteStatement,AMSCore::SQLiteStatement>(uint64_t *a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[3];
  _QWORD *v54;
  _BYTE v55[240];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v10 = operator new();
  AMSCore::SQLiteDatabase::SQLiteDatabase((uint64_t)v55, a2);
  v51 = *a3;
  v11 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v52 = v11;
  v12 = v53;
  v13 = (__int128 *)*((_QWORD *)a3 + 6);
  if (v13)
  {
    if (v13 == (__int128 *)((char *)a3 + 24))
    {
      v54 = v53;
      (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v13 + 24))(v13, v53);
    }
    else
    {
      v54 = (_QWORD *)*((_QWORD *)a3 + 6);
      *((_QWORD *)a3 + 6) = 0;
    }
  }
  else
  {
    v54 = 0;
  }
  v47 = *a4;
  v14 = *((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  v48 = v14;
  v15 = v49;
  v16 = (__int128 *)*((_QWORD *)a4 + 6);
  if (v16)
  {
    if (v16 == (__int128 *)((char *)a4 + 24))
    {
      v50 = v49;
      (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v16 + 24))(v16, v49);
    }
    else
    {
      v50 = (_QWORD *)*((_QWORD *)a4 + 6);
      *((_QWORD *)a4 + 6) = 0;
    }
  }
  else
  {
    v50 = 0;
  }
  v43 = *a5;
  v17 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  v44 = v17;
  v18 = v45;
  v19 = (__int128 *)*((_QWORD *)a5 + 6);
  if (v19)
  {
    if (v19 == (__int128 *)((char *)a5 + 24))
    {
      v46 = v45;
      (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v19 + 24))(v19, v45);
    }
    else
    {
      v46 = (_QWORD *)*((_QWORD *)a5 + 6);
      *((_QWORD *)a5 + 6) = 0;
    }
  }
  else
  {
    v46 = 0;
  }
  *(_QWORD *)v10 = &off_1E25211F8;
  AMSCore::SQLiteDatabase::SQLiteDatabase(v10 + 8, (uint64_t)v55);
  *(_OWORD *)(v10 + 248) = v51;
  v20 = v52;
  v21 = v54;
  v52 = 0;
  v51 = 0uLL;
  *(_QWORD *)(v10 + 264) = v20;
  if (v21)
  {
    if (v21 == v53)
    {
      *(_QWORD *)(v10 + 296) = v10 + 272;
      (*(void (**)(_QWORD *))(v53[0] + 24))(v53);
    }
    else
    {
      *(_QWORD *)(v10 + 296) = v21;
      v54 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v10 + 296) = 0;
  }
  *(_OWORD *)(v10 + 304) = v47;
  v22 = v48;
  v23 = v50;
  v48 = 0;
  v47 = 0uLL;
  *(_QWORD *)(v10 + 320) = v22;
  if (v23)
  {
    if (v23 == v49)
    {
      *(_QWORD *)(v10 + 352) = v10 + 328;
      (*(void (**)(_QWORD *))(v49[0] + 24))(v49);
    }
    else
    {
      *(_QWORD *)(v10 + 352) = v23;
      v50 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v10 + 352) = 0;
  }
  *(_OWORD *)(v10 + 360) = v43;
  v24 = v44;
  v25 = v46;
  v44 = 0;
  v43 = 0uLL;
  *(_QWORD *)(v10 + 376) = v24;
  if (!v25)
  {
    v26 = (_QWORD *)(v10 + 408);
    goto LABEL_30;
  }
  if (v25 != v45)
  {
    v26 = &v46;
    *(_QWORD *)(v10 + 408) = v25;
LABEL_30:
    *v26 = 0;
    *a1 = v10;
    v44 = 0;
    goto LABEL_31;
  }
  *(_QWORD *)(v10 + 408) = v10 + 384;
  (*(void (**)(_QWORD *))(v45[0] + 24))(v45);
  v41 = v44;
  *a1 = v10;
  v44 = 0;
  if (v41)
  {
    v42 = v41;
    if (!v46)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_QWORD *, uint64_t *))(*v46 + 48))(v46, &v42);
  }
LABEL_31:
  if (v46 == v45)
  {
    v27 = 4;
    goto LABEL_35;
  }
  if (v46)
  {
    v27 = 5;
    v18 = v46;
LABEL_35:
    (*(void (**)(_QWORD *))(*v18 + 8 * v27))(v18);
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v48;
  v48 = 0;
  if (v31)
  {
    v42 = v31;
    if (!v50)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_QWORD *, uint64_t *))(*v50 + 48))(v50, &v42);
  }
  if (v50 == v49)
  {
    v32 = 4;
    goto LABEL_48;
  }
  if (v50)
  {
    v32 = 5;
    v15 = v50;
LABEL_48:
    (*(void (**)(_QWORD *))(*v15 + 8 * v32))(v15);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v52;
  v52 = 0;
  if (v36)
  {
    v42 = v36;
    if (!v54)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_QWORD *, uint64_t *))(*v54 + 48))(v54, &v42);
  }
  if (v54 == v53)
  {
    v37 = 4;
    goto LABEL_61;
  }
  if (v54)
  {
    v37 = 5;
    v12 = v54;
LABEL_61:
    (*(void (**)(_QWORD *))(*v12 + 8 * v37))(v12);
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  AMSCore::SQLiteDatabase::~SQLiteDatabase((AMSCore::SQLiteDatabase *)v55);
}

void sub_18CC248FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v9 = v2;
    v3 = a1[6];
    if (!v3)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v9);
  }
  v4 = (_QWORD *)a1[6];
  if (v4 == a1 + 3)
  {
    v5 = 4;
    v4 = a1 + 3;
  }
  else
  {
    if (!v4)
      goto LABEL_9;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t AMSCore::Error::Error<char [32]>(uint64_t a1, uint64_t a2, uint64_t a3, const std::error_category *a4, const char *a5)
{
  uint64_t v9;
  std::runtime_error *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v14;
  _QWORD *v15;
  std::string __what_arg;
  std::error_code v18;

  AMSCore::StringUtils::join<char [32]>(&__what_arg, a5);
  *(_QWORD *)&v18.__val_ = a3;
  v18.__cat_ = a4;
  std::system_error::system_error((std::system_error *)a1, v18, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1E2521330;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  v9 = operator new();
  v10 = std::runtime_error::runtime_error((std::runtime_error *)v9, (const std::runtime_error *)a2);
  v11 = (_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 40);
  v10[1] = *(std::runtime_error *)(a2 + 16);
  v10->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v10[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v10[2].__imp_.__imp_ = (const char *)v12;
  p_imp = &v10[2].__imp_;
  v14 = *(std::runtime_error_vtbl **)(a2 + 48);
  v10[3].__vftable = v14;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = p_imp;
    *(_QWORD *)(a2 + 32) = v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(v9 + 32) = p_imp;
  }
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v15 = (_QWORD *)operator new();
  *v15 = &off_1E2523B58;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v9;
  *(_QWORD *)(a1 + 64) = v15;
  return a1;
}

void sub_18CC24B3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x18D7898AC](v1);
  _Unwind_Resume(a1);
}

void sub_18CC24B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [32]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC24CD4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Error::Error<char [18]>(uint64_t a1, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  uint64_t v8;
  std::runtime_error *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__libcpp_refstring *p_imp;
  std::runtime_error_vtbl *v13;
  _QWORD *v14;
  std::string __what_arg;
  std::error_code v17;

  AMSCore::StringUtils::join<char [18]>(&__what_arg, "error creating db");
  *(_QWORD *)&v17.__val_ = a3;
  v17.__cat_ = a4;
  std::system_error::system_error((std::system_error *)a1, v17, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1E2521330;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = operator new();
  v9 = std::runtime_error::runtime_error((std::runtime_error *)v8, (const std::runtime_error *)a2);
  v10 = (_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 40);
  v9[1] = *(std::runtime_error *)(a2 + 16);
  v9->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v9[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v9[2].__imp_.__imp_ = (const char *)v11;
  p_imp = &v9[2].__imp_;
  v13 = *(std::runtime_error_vtbl **)(a2 + 48);
  v9[3].__vftable = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = p_imp;
    *(_QWORD *)(a2 + 32) = v10;
    *v10 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(v8 + 32) = p_imp;
  }
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E2523B58;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v8;
  *(_QWORD *)(a1 + 64) = v14;
  return a1;
}

void sub_18CC24E3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x18D7898AC](v1);
  _Unwind_Resume(a1);
}

void sub_18CC24E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [18]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC24FD4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::MetricsDataAccessObject::~MetricsDataAccessObject(AMSCore::MetricsDataAccessObject *this)
{
  AMSCore::MetricsDataAccessObject::~MetricsDataAccessObject(this);
  JUMPOUT(0x18D789BDCLL);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  AMSCore::MetricsDataAccessObject *v5;
  uint64_t v6;
  AMSCore::MetricsDataAccessObject *v7;
  uint64_t v8;
  AMSCore::MetricsDataAccessObject *v9;
  uint64_t v10;
  AMSCore::MetricsDataAccessObject *v11;
  uint64_t v12;
  AMSCore::MetricsDataAccessObject *v13;
  uint64_t v14;
  AMSCore::MetricsDataAccessObject *v15;
  uint64_t v16;
  AMSCore::MetricsDataAccessObject *v17;
  uint64_t v18;
  AMSCore::MetricsDataAccessObject *v19;
  uint64_t v20;
  AMSCore::MetricsDataAccessObject *v21;
  uint64_t v22;
  AMSCore::MetricsDataAccessObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = &off_1E2521040;
  v2 = (char *)this + 344;
  v3 = (char *)*((_QWORD *)this + 46);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 42);
  if (v5 == (AMSCore::MetricsDataAccessObject *)((char *)this + 312))
  {
    v6 = 4;
    v5 = (AMSCore::MetricsDataAccessObject *)((char *)this + 312);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 38);
  if (v7 == (AMSCore::MetricsDataAccessObject *)((char *)this + 280))
  {
    v8 = 4;
    v7 = (AMSCore::MetricsDataAccessObject *)((char *)this + 280);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 34);
  if (v9 == (AMSCore::MetricsDataAccessObject *)((char *)this + 248))
  {
    v10 = 4;
    v9 = (AMSCore::MetricsDataAccessObject *)((char *)this + 248);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 30);
  if (v11 == (AMSCore::MetricsDataAccessObject *)((char *)this + 216))
  {
    v12 = 4;
    v11 = (AMSCore::MetricsDataAccessObject *)((char *)this + 216);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_26:
  v13 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 26);
  if (v13 == (AMSCore::MetricsDataAccessObject *)((char *)this + 184))
  {
    v14 = 4;
    v13 = (AMSCore::MetricsDataAccessObject *)((char *)this + 184);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_31:
  v15 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 22);
  if (v15 == (AMSCore::MetricsDataAccessObject *)((char *)this + 152))
  {
    v16 = 4;
    v15 = (AMSCore::MetricsDataAccessObject *)((char *)this + 152);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_36:
  v17 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 18);
  if (v17 == (AMSCore::MetricsDataAccessObject *)((char *)this + 120))
  {
    v18 = 4;
    v17 = (AMSCore::MetricsDataAccessObject *)((char *)this + 120);
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_41:
  v19 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 14);
  if (v19 == (AMSCore::MetricsDataAccessObject *)((char *)this + 88))
  {
    v20 = 4;
    v19 = (AMSCore::MetricsDataAccessObject *)((char *)this + 88);
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_46:
  v21 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 10);
  if (v21 == (AMSCore::MetricsDataAccessObject *)((char *)this + 56))
  {
    v22 = 4;
    v21 = (AMSCore::MetricsDataAccessObject *)((char *)this + 56);
  }
  else
  {
    if (!v21)
      goto LABEL_51;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_51:
  v23 = (AMSCore::MetricsDataAccessObject *)*((_QWORD *)this + 6);
  if (v23 == (AMSCore::MetricsDataAccessObject *)((char *)this + 24))
  {
    v24 = 4;
    v23 = (AMSCore::MetricsDataAccessObject *)((char *)this + 24);
  }
  else
  {
    if (!v23)
      goto LABEL_56;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_56:
  v25 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
}

void AMSCore::MetricsDataAccessObject::addEvents(uint64_t a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  unint64_t v4;
  uint64_t *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  void **v9;
  void **v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v19;
  void *__p[2];
  void *v21;
  void **v22;
  void **v23;
  void **v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35[3];
  int v36;
  _BYTE v37[24];
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v3 = *a2;
  v2 = a2[1];
  if (v2 != *a2)
  {
    v4 = 0x2E8BA2E8BA2E8BA3 * (((char *)v2 - (char *)*a2) >> 3);
    if (v4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v22 = (void **)operator new(0x5D1745D1745D1748 * (((char *)v2 - (char *)*a2) >> 3));
    v23 = v22;
    v24 = &v22[3 * v4];
    v5 = &v39;
    v19 = v2;
    do
    {
      v26 = *(__int128 *)((char *)v3 + 24);
      v27 = *((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v3 + 3) = 0;
      v28 = 5;
      v6 = *v3;
      v30 = *((_QWORD *)v3 + 2);
      v29 = v6;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v31 = 5;
      v7 = v3[3];
      v33 = *((_QWORD *)v3 + 8);
      v32 = v7;
      *((_QWORD *)v3 + 7) = 0;
      *((_QWORD *)v3 + 8) = 0;
      *((_QWORD *)v3 + 6) = 0;
      v34 = 6;
      v8 = *((unsigned __int8 *)v3 + 80);
      if (*((_BYTE *)v3 + 80))
      {
        v35[0] = *((_QWORD *)v3 + 9);
        v8 = 4;
      }
      else
      {
        LOBYTE(v35[0]) = 0;
      }
      v36 = v8;
      v37[0] = 0;
      v37[23] = 0;
      v38 = 5;
      v39 = 0;
      v40 = 3;
      std::vector<AMSCore::Any>::vector[abi:fe180100](__p, (uint64_t)&v26, 6uLL);
      if (v40 != -1)
        ((void (*)(char *, uint64_t *))off_1E253D240[v40])(&v25, v5);
      v40 = -1;
      if (v38 != -1)
        ((void (*)(char *, _BYTE *))off_1E253D240[v38])(&v25, v37);
      v38 = -1;
      if (v36 != -1)
        ((void (*)(char *, uint64_t *))off_1E253D240[v36])(&v25, v35);
      v36 = -1;
      if (v34 != -1)
        ((void (*)(char *, __int128 *))off_1E253D240[v34])(&v25, &v32);
      v34 = -1;
      if (v31 != -1)
        ((void (*)(char *, __int128 *))off_1E253D240[v31])(&v25, &v29);
      v31 = -1;
      if (v28 != -1)
        ((void (*)(char *, __int128 *))off_1E253D240[v28])(&v25, &v26);
      v9 = v23;
      if (v23 < v24)
      {
        *v23 = 0;
        v9[1] = 0;
        v9[2] = 0;
        *(_OWORD *)v9 = *(_OWORD *)__p;
        v9[2] = v21;
        v23 = v9 + 3;
      }
      else
      {
        v10 = std::vector<std::vector<AMSCore::Any>>::__emplace_back_slow_path<std::vector<AMSCore::Any>>(&v22, (uint64_t)__p);
        v11 = (char *)__p[0];
        v23 = v10;
        if (__p[0])
        {
          v12 = v5;
          v13 = (char *)__p[1];
          v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              v15 = v13 - 32;
              v16 = *((unsigned int *)v13 - 2);
              if ((_DWORD)v16 != -1)
                ((void (*)(__int128 *, char *))off_1E253D240[v16])(&v26, v13 - 32);
              *((_DWORD *)v13 - 2) = -1;
              v13 -= 32;
            }
            while (v15 != v11);
            v14 = __p[0];
            v2 = v19;
          }
          __p[1] = v11;
          operator delete(v14);
          v5 = v12;
        }
      }
      v3 = (__int128 *)((char *)v3 + 88);
    }
    while (v3 != v2);
  }
  v17 = *(_QWORD *)(a1 + 48);
  if (!v17)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v17 + 48))(v17, &v22);
  *(_QWORD *)&v26 = &v22;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v26);
}

void sub_18CC25380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, AMSCore::Any *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  a23 = &a19;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void sub_18CC253E4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::deleteEvents(uint64_t a1, const unsigned __int8 *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  void *__p;
  char *v12;
  char v13;
  char *v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *(_QWORD *)(v4 + 31) = 0;
  uuid_unparse_lower(a2, v4 + 1);
  *v4 = 123;
  v4[37] = 125;
  v14 = v4;
  v15 = xmmword_18CF51AF0;
  v16 = 5;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)&v14, 1uLL);
  v5 = *(_QWORD *)(a1 + 80);
  if (!v5)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 48))(v5, &__p);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = v12;
    v8 = __p;
    if (v12 != __p)
    {
      do
      {
        v9 = v7 - 32;
        v10 = *((unsigned int *)v7 - 2);
        if ((_DWORD)v10 != -1)
          ((void (*)(char *, char *))off_1E253D240[v10])(&v13, v7 - 32);
        *((_DWORD *)v7 - 2) = -1;
        v7 -= 32;
      }
      while (v9 != v6);
      v8 = __p;
    }
    v12 = v6;
    operator delete(v8);
  }
  if (v16 != -1)
    ((void (*)(char *, char **))off_1E253D240[v16])(&v13, &v14);
}

void sub_18CC2556C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::deleteEventsByTopic(uint64_t a1, uint64_t a2)
{
  size_t v3;
  const void *v4;
  __int128 *p_dst;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  void *__p;
  char *v21;
  __int128 __dst;
  unint64_t v23;
  void *v24[2];
  unint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:fe180100]();
    v4 = *(const void **)a2;
    if (v3 >= 0x17)
    {
      v12 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v12 = v3 | 7;
      v13 = v12 + 1;
      p_dst = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&__dst + 1) = v3;
      v23 = v13 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v23) = *(_QWORD *)(a2 + 8);
      p_dst = &__dst;
      if (!v3)
        goto LABEL_17;
    }
    memmove(p_dst, v4, v3);
LABEL_17:
    *((_BYTE *)p_dst + v3) = 0;
    *(_OWORD *)v24 = __dst;
    v25 = v23;
    v26 = 5;
    std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)v24, 1uLL);
    v14 = *(_QWORD *)(a1 + 112);
    if (!v14)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 48))(v14, &__p);
    v15 = (char *)__p;
    if (__p)
    {
      v16 = v21;
      v17 = __p;
      if (v21 != __p)
      {
        do
        {
          v18 = v16 - 32;
          v19 = *((unsigned int *)v16 - 2);
          if ((_DWORD)v19 != -1)
            ((void (*)(__int128 *, char *))off_1E253D240[v19])(&__dst, v16 - 32);
          *((_DWORD *)v16 - 2) = -1;
          v16 -= 32;
        }
        while (v18 != v15);
        v17 = __p;
      }
      v21 = v15;
      operator delete(v17);
    }
    if (v26 != -1)
      ((void (*)(__int128 *, void **))off_1E253D240[v26])(&__dst, v24);
    return;
  }
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v6 = *(_QWORD *)(a1 + 144);
  if (!v6)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, v24);
  v7 = (char *)v24[0];
  if (v24[0])
  {
    v8 = (char *)v24[1];
    v9 = v24[0];
    if (v24[1] != v24[0])
    {
      do
      {
        v10 = v8 - 32;
        v11 = *((unsigned int *)v8 - 2);
        if ((_DWORD)v11 != -1)
          ((void (*)(__int128 *, char *))off_1E253D240[v11])(&__dst, v8 - 32);
        *((_DWORD *)v8 - 2) = -1;
        v8 -= 32;
      }
      while (v10 != v7);
      v9 = v24[0];
    }
    v24[1] = v7;
    operator delete(v9);
  }
}

void sub_18CC25810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::unlockEvents(uint64_t a1, const unsigned __int8 *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  void *__p;
  char *v17;
  void *v18;
  char *v19;
  _QWORD v20[2];
  char *v21;
  __int128 v22;
  int v23;
  _BYTE v24[24];
  int v25;
  uint64_t v26[3];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24[0] = 0;
  v24[23] = 0;
  v25 = 5;
  v26[0] = 0;
  v27 = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&v18, (uint64_t)v24, 2uLL);
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v4 + 31) = 0;
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  uuid_unparse_lower(a2, v4 + 1);
  *v4 = 123;
  v4[37] = 125;
  v21 = v4;
  v22 = xmmword_18CF51AF0;
  v23 = 5;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)&v21, 1uLL);
  v20[0] = 0;
  v20[1] = 0;
  v5 = *(_QWORD *)(a1 + 304);
  if (!v5)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t, void **, void **, _QWORD *))(*(_QWORD *)v5 + 48))(v5, &v18, &__p, v20);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = v17;
    v8 = __p;
    if (v17 != __p)
    {
      do
      {
        v9 = v7 - 32;
        v10 = *((unsigned int *)v7 - 2);
        if ((_DWORD)v10 != -1)
          ((void (*)(_QWORD *, char *))off_1E253D240[v10])(v20, v7 - 32);
        *((_DWORD *)v7 - 2) = -1;
        v7 -= 32;
      }
      while (v9 != v6);
      v8 = __p;
    }
    v17 = v6;
    operator delete(v8);
  }
  if (v23 != -1)
    ((void (*)(_QWORD *, char **))off_1E253D240[v23])(v20, &v21);
  v11 = (char *)v18;
  if (v18)
  {
    v12 = v19;
    v13 = v18;
    if (v19 != v18)
    {
      do
      {
        v14 = v12 - 32;
        v15 = *((unsigned int *)v12 - 2);
        if ((_DWORD)v15 != -1)
          ((void (*)(char **, char *))off_1E253D240[v15])(&v21, v12 - 32);
        *((_DWORD *)v12 - 2) = -1;
        v12 -= 32;
      }
      while (v14 != v11);
      v13 = v18;
    }
    v19 = v11;
    operator delete(v13);
  }
  if (v27 != -1)
    ((void (*)(char **, uint64_t *))off_1E253D240[v27])(&v21, v26);
  v27 = -1;
  if (v25 != -1)
    ((void (*)(char **, _BYTE *))off_1E253D240[v25])(&v21, v24);
}

void sub_18CC25AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::getTopics(AMSCore::MetricsDataAccessObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  std::runtime_error_vtbl *v4;
  const char *imp;
  std::runtime_error_vtbl *v6;
  std::runtime_error_vtbl *v7;
  uint64_t v8;
  std::runtime_error_vtbl *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  char *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::runtime_error_vtbl *v24;
  const char *v25;
  std::runtime_error_vtbl *v26;
  std::runtime_error __p;
  __int128 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::runtime_error v33[4];
  char v34;
  std::runtime_error v35;
  __int128 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;

  v35.__vftable = 0;
  v35.__imp_.__imp_ = 0;
  *(_QWORD *)&v36 = 0;
  v2 = *((_QWORD *)this + 22);
  if (!v2)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, std::runtime_error *))(*(_QWORD *)v2 + 48))(v33, v2, &v35);
  v4 = v35.__vftable;
  if (v35.__vftable)
  {
    imp = v35.__imp_.__imp_;
    v6 = v35.__vftable;
    if (v35.__imp_.__imp_ != (const char *)v35.__vftable)
    {
      do
      {
        v7 = (std::runtime_error_vtbl *)(imp - 32);
        v8 = *((unsigned int *)imp - 2);
        if ((_DWORD)v8 != -1)
          ((void (*)(std::runtime_error *, const char *))off_1E253D240[v8])(&__p, imp - 32);
        *((_DWORD *)imp - 2) = -1;
        imp -= 32;
      }
      while (v7 != v4);
      v6 = v35.__vftable;
    }
    v35.__imp_.__imp_ = (const char *)v4;
    operator delete(v6);
  }
  if (v34)
  {
    __p.__vftable = 0;
    __p.__imp_.__imp_ = 0;
    *(_QWORD *)&v28 = 0;
    std::vector<std::string>::reserve((std::vector<std::string> *)&__p, 0xAAAAAAAAAAAAAAABLL * ((v33[0].__imp_.__imp_ - (const char *)v33[0].__vftable) >> 3));
    if (!v34)
    {
      __break(1u);
      return;
    }
    v9 = v33[0].__vftable;
    v10 = v33[0].__imp_.__imp_;
    if (v33[0].__vftable == (std::runtime_error_vtbl *)v33[0].__imp_.__imp_)
    {
      v11 = __p.__imp_.__imp_;
LABEL_14:
      v12 = v28;
      *(_QWORD *)a2 = __p.__vftable;
      *(_QWORD *)(a2 + 8) = v11;
      *(_QWORD *)(a2 + 16) = v12;
      *(_BYTE *)(a2 + 72) = 1;
    }
    else
    {
      while ((void (__cdecl *)(std::runtime_error *__hidden))((char *)v9->~runtime_error_0 - (char *)v9->~runtime_error) == (void (__cdecl *)(std::runtime_error *__hidden))32)
      {
        v14 = *((_DWORD *)v9->~runtime_error + 6);
        if (v14 == 5)
          v15 = (uint64_t)v9->~runtime_error;
        else
          v15 = 0;
        if (v14 != 5)
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)&v35, 2u, "Invalid row type");
          goto LABEL_33;
        }
        v16 = (char *)__p.__imp_.__imp_;
        if (__p.__imp_.__imp_ < (const char *)v28)
        {
          v13 = *(_OWORD *)v15;
          *((_QWORD *)__p.__imp_.__imp_ + 2) = *(_QWORD *)(v15 + 16);
          *(_OWORD *)v16 = v13;
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)v15 = 0;
          v11 = v16 + 24;
        }
        else
        {
          v11 = std::vector<std::string>::__emplace_back_slow_path<std::string>((void **)&__p.__vftable, v15);
        }
        __p.__imp_.__imp_ = v11;
        if (++v9 == (std::runtime_error_vtbl *)v10)
          goto LABEL_14;
      }
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)&v35, 2u, "Invalid row size");
LABEL_33:
      std::runtime_error::runtime_error((std::runtime_error *)a2, &v35);
      *(_OWORD *)(a2 + 16) = v36;
      *(_QWORD *)a2 = off_1E2521330;
      v21 = v38;
      *(_QWORD *)(a2 + 32) = v37;
      *(_QWORD *)(a2 + 40) = v21;
      v22 = a2 + 40;
      v23 = v39;
      *(_QWORD *)(a2 + 48) = v39;
      if (v23)
      {
        *(_QWORD *)(v21 + 16) = v22;
        v37 = &v38;
        v38 = 0;
        v39 = 0;
        v21 = 0;
      }
      else
      {
        *(_QWORD *)(a2 + 32) = v22;
      }
      *(_OWORD *)(a2 + 56) = v40;
      v40 = 0uLL;
      *(_BYTE *)(a2 + 72) = 0;
      v35.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v37, (unsigned int *)v21);
      MEMORY[0x18D7898AC](&v35);
      v24 = __p.__vftable;
      if (__p.__vftable)
      {
        v25 = __p.__imp_.__imp_;
        v26 = __p.__vftable;
        if (__p.__imp_.__imp_ != (const char *)__p.__vftable)
        {
          do
          {
            if (*(v25 - 1) < 0)
              operator delete(*((void **)v25 - 3));
            v25 -= 24;
          }
          while (v25 != (const char *)v24);
          v26 = __p.__vftable;
        }
        __p.__imp_.__imp_ = (const char *)v24;
        operator delete(v26);
      }
    }
  }
  else
  {
    AMSCore::Error::Error(&v35, v33);
    std::runtime_error::runtime_error(&__p, &v35);
    v28 = v36;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v17 = (unsigned int *)v38;
    v29 = v37;
    v30 = v38;
    v31 = v39;
    if (v39)
    {
      *(_QWORD *)(v38 + 16) = &v30;
      v37 = &v38;
      v38 = 0;
      v39 = 0;
      v17 = 0;
    }
    else
    {
      v29 = &v30;
    }
    v32 = v40;
    v40 = 0uLL;
    v35.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v37, v17);
    MEMORY[0x18D7898AC](&v35);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &__p);
    *(_OWORD *)(a2 + 16) = v28;
    *(_QWORD *)a2 = off_1E2521330;
    v18 = v30;
    *(_QWORD *)(a2 + 32) = v29;
    *(_QWORD *)(a2 + 40) = v18;
    v19 = a2 + 40;
    v20 = v31;
    *(_QWORD *)(a2 + 48) = v31;
    if (v20)
    {
      *(_QWORD *)(v18 + 16) = v19;
      v18 = 0;
      v29 = &v30;
      v30 = 0;
      v31 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v19;
    }
    *(_OWORD *)(a2 + 56) = v32;
    v32 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v29, (unsigned int *)v18);
    MEMORY[0x18D7898AC](&__p);
  }
  if (v34)
  {
    v35.__vftable = (std::runtime_error_vtbl *)v33;
    std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v35);
  }
  else
  {
    ((void (*)(std::runtime_error *))v33[0].~runtime_error)(v33);
  }
}

void sub_18CC25F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::vector<std::string>::~vector[abi:fe180100](&a9);
  std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void AMSCore::MetricsDataAccessObject::lockAndGetEvents(uint64_t a1@<X0>, uint64_t a2@<X1>, std::runtime_error_vtbl *a3@<X2>, char a4@<W3>, std::runtime_error_vtbl *a5@<X4>, std::runtime_error *a6@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string::size_type size;
  void *v22;
  std::string::size_type v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  std::system_error_vtbl *v27;
  const char *imp;
  std::system_error_vtbl *v29;
  std::system_error_vtbl *v30;
  uint64_t v31;
  std::runtime_error *v32;
  std::runtime_error_vtbl *v33;
  unsigned int **v34;
  __int128 *v35;
  _BYTE *v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  int v45;
  int v46;
  uint64_t *v47;
  int v48;
  unint64_t v49;
  unsigned int **v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  std::ios_base *v55;
  void *v56;
  std::ios_base *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  std::runtime_error_vtbl *v70;
  _BYTE *v71;
  char *v72;
  uint64_t v73;
  int v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  char *v79;
  unsigned int *v80;
  unsigned int *v81;
  std::runtime_error_vtbl *v82;
  std::runtime_error_vtbl *v83;
  std::runtime_error v84;
  void **v85;
  void **i;
  unsigned int *v87;
  unsigned int *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unsigned int *v92;
  std::runtime_error *v93;
  unsigned int *v94;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::runtime_error_vtbl *v102;
  std::error_code *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::runtime_error *v108;
  const char *v109;
  __int128 v110;
  const char *(__cdecl *what)(const std::runtime_error *__hidden);
  _QWORD v112[9];
  __int128 v113;
  unsigned __int8 v114;
  std::runtime_error v115;
  std::error_code v116;
  unsigned int **v117;
  unsigned int *v118;
  std::runtime_error_vtbl *v119;
  __int128 v120;
  char v121;
  void *__p[2];
  std::runtime_error_vtbl *v123;
  char v124;
  std::string __what_arg;
  uuid_t out;
  std::runtime_error v127;
  std::error_code ec;
  unsigned int **v129;
  unsigned int *v130;
  std::runtime_error_vtbl *v131;
  __int128 v132;
  std::system_error v133;
  uint64_t v134;
  unsigned int *v135;
  std::runtime_error_vtbl *v136;
  __int128 v137;
  _BYTE v138[32];
  unsigned int **v139;
  unsigned int *v140;
  std::runtime_error_vtbl *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  int v145;
  _QWORD v146[22];
  std::error_code v147;

  v146[19] = *MEMORY[0x1E0C80C00];
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v13 = (char *)operator new(0x28uLL);
  v108 = a6;
  *(_QWORD *)(v13 + 31) = 0;
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  uuid_unparse_lower(out, v13 + 1);
  *v13 = 123;
  v13[37] = 125;
  v133.__vftable = (std::system_error_vtbl *)v13;
  *(_OWORD *)&v133.__imp_.__imp_ = xmmword_18CF51AF0;
  LODWORD(v133.__ec_.__cat_) = 5;
  v134 = v12 / 1000000;
  LODWORD(v137) = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__what_arg, (uint64_t)&v133, 2uLL);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v138, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v138 = *(_OWORD *)a2;
    *(_QWORD *)&v138[16] = *(_QWORD *)(a2 + 16);
  }
  *(_DWORD *)&v138[24] = 5;
  LODWORD(v142) = 0;
  if (a4)
  {
    v127.__vftable = a3;
    LODWORD(ec.__cat_) = 4;
    AMSCore::Any::operator=((uint64_t)&v139, (uint64_t)&v127);
    if (LODWORD(ec.__cat_) != -1)
      ((void (*)(char *, std::runtime_error *))off_1E253D240[LODWORD(ec.__cat_)])(&v124, &v127);
  }
  *((_QWORD *)&v142 + 1) = (v12 - 300000000) / 1000000;
  LODWORD(v144) = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](__p, (uint64_t)v138, 3uLL);
  v127.__vftable = a5;
  v127.__imp_.__imp_ = (const char *)1;
  v14 = *(_QWORD *)(a1 + 272);
  if (!v14)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *, void **, std::runtime_error *))(*(_QWORD *)v14 + 48))(v112, v14, &__what_arg, __p, &v127);
  v15 = (char *)__p[0];
  if (__p[0])
  {
    v16 = (char *)__p[1];
    v17 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v18 = v16 - 32;
        v19 = *((unsigned int *)v16 - 2);
        if ((_DWORD)v19 != -1)
          ((void (*)(std::runtime_error *, char *))off_1E253D240[v19])(&v127, v16 - 32);
        *((_DWORD *)v16 - 2) = -1;
        v16 -= 32;
      }
      while (v18 != v15);
      v17 = __p[0];
    }
    __p[1] = v15;
    operator delete(v17);
  }
  if ((_DWORD)v144 != -1)
    ((void (*)(std::runtime_error *, char *))off_1E253D240[v144])(&v127, (char *)&v142 + 8);
  LODWORD(v144) = -1;
  if ((_DWORD)v142 != -1)
    ((void (*)(std::runtime_error *, unsigned int ***))off_1E253D240[v142])(&v127, &v139);
  LODWORD(v142) = -1;
  if (*(_DWORD *)&v138[24] != -1)
    ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[*(unsigned int *)&v138[24]])(&v127, v138);
  v20 = __what_arg.__r_.__value_.__r.__words[0];
  if (__what_arg.__r_.__value_.__r.__words[0])
  {
    size = __what_arg.__r_.__value_.__l.__size_;
    v22 = (void *)__what_arg.__r_.__value_.__r.__words[0];
    if (__what_arg.__r_.__value_.__l.__size_ != __what_arg.__r_.__value_.__r.__words[0])
    {
      do
      {
        v23 = size - 32;
        v24 = *(unsigned int *)(size - 8);
        if ((_DWORD)v24 != -1)
          ((void (*)(_BYTE *, std::string::size_type))off_1E253D240[v24])(v138, size - 32);
        *(_DWORD *)(size - 8) = -1;
        size -= 32;
      }
      while (v23 != v20);
      v22 = (void *)__what_arg.__r_.__value_.__r.__words[0];
    }
    __what_arg.__r_.__value_.__l.__size_ = v20;
    operator delete(v22);
  }
  if ((_DWORD)v137 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E253D240[v137])(v138, &v134);
  LODWORD(v137) = -1;
  if (LODWORD(v133.__ec_.__cat_) != -1)
    ((void (*)(_BYTE *, std::system_error *))off_1E253D240[LODWORD(v133.__ec_.__cat_)])(v138, &v133);
  if ((_BYTE)v113)
  {
    v25 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v25 + 31) = 0;
    *(_OWORD *)v25 = 0u;
    *((_OWORD *)v25 + 1) = 0u;
    uuid_unparse_lower(out, v25 + 1);
    *v25 = 123;
    v25[37] = 125;
    *(_QWORD *)v138 = v25;
    *(_OWORD *)&v138[8] = xmmword_18CF51AF0;
    *(_DWORD *)&v138[24] = 5;
    std::vector<AMSCore::Any>::vector[abi:fe180100](&v133, (uint64_t)v138, 1uLL);
    v127.__imp_.__imp_ = 0;
    v127.__vftable = 0;
    v26 = *(_QWORD *)(a1 + 240);
    if (!v26)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(std::runtime_error *__return_ptr, uint64_t, std::system_error *, std::runtime_error *))(*(_QWORD *)v26 + 48))(&v115, v26, &v133, &v127);
    v27 = v133.__vftable;
    if (v133.__vftable)
    {
      imp = v133.__imp_.__imp_;
      v29 = v133.__vftable;
      if (v133.__imp_.__imp_ != (const char *)v133.__vftable)
      {
        do
        {
          v30 = (std::system_error_vtbl *)(imp - 32);
          v31 = *((unsigned int *)imp - 2);
          if ((_DWORD)v31 != -1)
            ((void (*)(std::runtime_error *, const char *))off_1E253D240[v31])(&v127, imp - 32);
          *((_DWORD *)imp - 2) = -1;
          imp -= 32;
        }
        while (v30 != v27);
        v29 = v133.__vftable;
      }
      v133.__imp_.__imp_ = (const char *)v27;
      operator delete(v29);
    }
    v32 = v108;
    if (*(_DWORD *)&v138[24] != -1)
      ((void (*)(std::runtime_error *, _BYTE *))off_1E253D240[*(unsigned int *)&v138[24]])(&v127, v138);
    if ((_BYTE)v113)
      goto LABEL_49;
LABEL_164:
    (*(void (**)(_QWORD *))v112[0])(v112);
    if (v121)
      goto LABEL_50;
LABEL_165:
    std::runtime_error::runtime_error((std::runtime_error *)v138, &v115);
    *(std::error_code *)&v138[16] = v116;
    *(_QWORD *)v138 = off_1E2521330;
    v139 = v117;
    v140 = v118;
    v141 = v119;
    if (v119)
    {
      *((_QWORD *)v118 + 2) = &v140;
      v117 = &v118;
      v118 = 0;
      v119 = 0;
    }
    else
    {
      v139 = &v140;
    }
    v142 = v120;
    v120 = 0uLL;
    LOBYTE(v143) = 1;
    std::runtime_error::runtime_error((std::runtime_error *)v112, (const std::runtime_error *)v138);
    *(_OWORD *)&v112[2] = *(_OWORD *)&v138[16];
    v112[0] = off_1E2521330;
    v112[4] = v139;
    v112[5] = v140;
    v112[6] = v141;
    if (v141)
    {
      *((_QWORD *)v140 + 2) = &v112[5];
      v139 = &v140;
      v140 = 0;
      v141 = 0;
    }
    else
    {
      v112[4] = &v112[5];
    }
    *(_OWORD *)&v112[7] = v142;
    v142 = 0uLL;
    std::runtime_error::runtime_error(&v133, (const std::runtime_error *)v112);
    v133.__ec_ = *(std::error_code *)&v112[2];
    v92 = (unsigned int *)v112[5];
    v133.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v134 = v112[4];
    v135 = (unsigned int *)v112[5];
    v136 = (std::runtime_error_vtbl *)v112[6];
    if (v112[6])
    {
      *(_QWORD *)(v112[5] + 16) = &v135;
      v92 = 0;
      v112[4] = &v112[5];
      v112[5] = 0;
      v112[6] = 0;
    }
    else
    {
      v134 = (uint64_t)&v135;
    }
    v137 = *(_OWORD *)&v112[7];
    v112[7] = 0;
    v112[8] = 0;
    v112[0] = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112[4], v92);
    MEMORY[0x18D7898AC](v112);
    v93 = std::runtime_error::runtime_error(v108, &v133);
    v93[1] = (std::runtime_error)v133.__ec_;
    v93->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v94 = v135;
    v93[2].__vftable = (std::runtime_error_vtbl *)v134;
    v93[2].__imp_.__imp_ = (const char *)v94;
    p_imp = (std::runtime_error_vtbl *)&v93[2].__imp_;
    v96 = v136;
    v93[3].__vftable = v136;
    if (v96)
    {
      *((_QWORD *)v94 + 2) = p_imp;
      v94 = 0;
      v134 = (uint64_t)&v135;
      v135 = 0;
      v136 = 0;
    }
    else
    {
      v93[2].__vftable = p_imp;
    }
    *(_OWORD *)&v93[3].__imp_.__imp_ = v137;
    v137 = 0uLL;
    LOBYTE(v93[4].__imp_.__imp_) = 0;
    v133.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v134, v94);
    MEMORY[0x18D7898AC](&v133);
    if ((_BYTE)v143)
    {
      *(_QWORD *)v138 = off_1E2521330;
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
        v98 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v140);
      MEMORY[0x18D7898AC](v138);
    }
LABEL_184:
    if (!v121)
      goto LABEL_187;
    goto LABEL_185;
  }
  std::runtime_error::runtime_error((std::runtime_error *)v138, (const std::runtime_error *)v112);
  *(_OWORD *)&v138[16] = *(_OWORD *)&v112[2];
  *(_QWORD *)v138 = off_1E2521330;
  v139 = (unsigned int **)v112[4];
  v140 = (unsigned int *)v112[5];
  v141 = (std::runtime_error_vtbl *)v112[6];
  if (v112[6])
  {
    *(_QWORD *)(v112[5] + 16) = &v140;
    v112[4] = &v112[5];
    v112[5] = 0;
    v112[6] = 0;
  }
  else
  {
    v139 = &v140;
  }
  v142 = *(_OWORD *)&v112[7];
  v112[7] = 0;
  v112[8] = 0;
  LOBYTE(v143) = 1;
  std::runtime_error::runtime_error(&v133, (const std::runtime_error *)v138);
  v133.__ec_ = *(std::error_code *)&v138[16];
  v133.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v134 = (uint64_t)v139;
  v135 = v140;
  v136 = v141;
  if (v141)
  {
    *((_QWORD *)v140 + 2) = &v135;
    v139 = &v140;
    v140 = 0;
    v141 = 0;
  }
  else
  {
    v134 = (uint64_t)&v135;
  }
  v137 = v142;
  v142 = 0uLL;
  std::runtime_error::runtime_error(&v127, &v133);
  ec = v133.__ec_;
  v127.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v87 = v135;
  v129 = (unsigned int **)v134;
  v130 = v135;
  v131 = v136;
  if (v136)
  {
    *((_QWORD *)v135 + 2) = &v130;
    v87 = 0;
    v134 = (uint64_t)&v135;
    v135 = 0;
    v136 = 0;
  }
  else
  {
    v129 = &v130;
  }
  v132 = v137;
  v137 = 0uLL;
  v133.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v134, v87);
  MEMORY[0x18D7898AC](&v133);
  std::runtime_error::runtime_error(&v115, &v127);
  v116 = ec;
  v115.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v88 = v130;
  v117 = v129;
  v118 = v130;
  v119 = v131;
  if (v131)
  {
    *((_QWORD *)v130 + 2) = &v118;
    v88 = 0;
    v129 = &v130;
    v130 = 0;
    v131 = 0;
  }
  else
  {
    v117 = &v118;
  }
  v120 = v132;
  v132 = 0uLL;
  v121 = 0;
  v127.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v129, v88);
  MEMORY[0x18D7898AC](&v127);
  if ((_BYTE)v143)
  {
    *(_QWORD *)v138 = off_1E2521330;
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
    if (*((_QWORD *)&v142 + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v140);
    MEMORY[0x18D7898AC](v138);
  }
  v32 = v108;
  if (!(_BYTE)v113)
    goto LABEL_164;
LABEL_49:
  if (!v121)
    goto LABEL_165;
LABEL_50:
  __p[0] = 0;
  __p[1] = 0;
  v123 = 0;
  std::vector<AMSCore::IMetricsDataAccessObject::Event>::reserve((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * ((v115.__imp_.__imp_ - (const char *)v115.__vftable) >> 3));
  if (!v121)
  {
LABEL_190:
    __break(1u);
    return;
  }
  v33 = v115.__vftable;
  v109 = v115.__imp_.__imp_;
  if (v115.__vftable == (std::runtime_error_vtbl *)v115.__imp_.__imp_)
  {
LABEL_133:
    v83 = v123;
    v84 = *(std::runtime_error *)__p;
    *v32 = *(std::runtime_error *)out;
    v32[1] = v84;
    v32[2].__vftable = v83;
    LOBYTE(v32[4].__imp_.__imp_) = 1;
    if (v121)
      goto LABEL_185;
LABEL_187:
    ((void (*)(std::runtime_error *))v115.~runtime_error)(&v115);
    return;
  }
  v34 = &v135;
  v35 = &v137;
  v103 = (std::error_code *)&v32[1];
  v102 = (std::runtime_error_vtbl *)&v32[2].__imp_;
  v36 = &v138[8];
  v107 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v105 = *MEMORY[0x1E0DE4F60];
  v106 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v104 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v101 = MEMORY[0x1E0DE4FE0] + 64;
  v100 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    v110 = *(_OWORD *)&v33->~runtime_error;
    v37 = v110;
    what = v33->what;
    v33->~runtime_error = 0;
    v33->~runtime_error_0 = 0;
    v33->what = 0;
    v38 = (char *)*((_QWORD *)&v37 + 1);
    v39 = v37;
    if (*((_QWORD *)&v37 + 1) - (_QWORD)v37 != 128)
    {
      v50 = v34;
      v51 = v35;
      v52 = MEMORY[0x1E0DE4FE0];
      v53 = MEMORY[0x1E0DE4FE0] + 64;
      v146[0] = MEMORY[0x1E0DE4FE0] + 64;
      *(_QWORD *)v138 = v107;
      *(_QWORD *)&v138[*(_QWORD *)(v107 - 24)] = v106;
      v54 = v36;
      v55 = (std::ios_base *)&v138[*(_QWORD *)(*(_QWORD *)v138 - 24)];
      std::ios_base::init(v55, v54);
      v55[1].__vftable = 0;
      v55[1].__fmtflags_ = -1;
      *(_QWORD *)v138 = v52 + 24;
      v146[0] = v53;
      std::streambuf::basic_streambuf();
      v36 = v54;
      *(_QWORD *)&v138[8] = MEMORY[0x1E0DE4FB8] + 16;
      v143 = 0u;
      v144 = 0u;
      v145 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v138, (uint64_t)"Invalid row size: ", 18);
      v32 = v108;
      v35 = v51;
      std::stringbuf::str[abi:fe180100]((uint64_t)v54, &__what_arg);
      *(_QWORD *)v138 = v105;
      *(_QWORD *)&v138[*(_QWORD *)(v105 - 24)] = v104;
      *(_QWORD *)&v138[8] = MEMORY[0x1E0DE4FB8] + 16;
      v34 = v50;
      if (SBYTE7(v144) < 0)
        operator delete((void *)v143);
      goto LABEL_81;
    }
    v40 = *(_DWORD *)(v37 + 24);
    v41 = v40 == 5;
    if (v40 == 5)
      v42 = (uint64_t *)v37;
    else
      v42 = 0;
    if (!v41)
    {
      if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
        goto LABEL_190;
      v146[0] = v101;
      *(_QWORD *)v138 = v107;
      *(_QWORD *)&v138[*(_QWORD *)(v107 - 24)] = v106;
      v56 = v36;
      v57 = (std::ios_base *)&v138[*(_QWORD *)(*(_QWORD *)v138 - 24)];
      std::ios_base::init(v57, v56);
      v57[1].__vftable = 0;
      v57[1].__fmtflags_ = -1;
      *(_QWORD *)v138 = MEMORY[0x1E0DE4FE0] + 24;
      v146[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      v36 = v56;
      *(_QWORD *)&v138[8] = v100;
      v143 = 0u;
      v144 = 0u;
      v145 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v138, (uint64_t)"Db contained invalid identifier: ", 33);
      std::stringbuf::str[abi:fe180100]((uint64_t)v56, &__what_arg);
      *(_QWORD *)v138 = v105;
      *(_QWORD *)&v138[*(_QWORD *)(v105 - 24)] = v104;
      *(_QWORD *)&v138[8] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v144) < 0)
        operator delete((void *)v143);
LABEL_81:
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v146);
      *(_QWORD *)&v147.__val_ = 2;
      v147.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      std::system_error::system_error(&v133, v147, &__what_arg);
      if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__what_arg.__r_.__value_.__l.__data_);
      *v34 = 0;
      v34[1] = 0;
      v133.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v134 = (uint64_t)v34;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      std::runtime_error::runtime_error(&v127, &v133);
      ec = v133.__ec_;
      v58 = v135;
      v127.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v129 = (unsigned int **)v134;
      v130 = v135;
      v131 = v136;
      if (v136)
      {
        *((_QWORD *)v135 + 2) = &v130;
        v58 = 0;
        v134 = (uint64_t)v34;
        *v34 = 0;
        v34[1] = 0;
      }
      else
      {
        v129 = &v130;
      }
      v132 = v137;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      v133.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v134, v58);
      MEMORY[0x18D7898AC](&v133);
      std::runtime_error::runtime_error((std::runtime_error *)v112, &v127);
      *(std::error_code *)&v112[2] = ec;
      v59 = v130;
      v112[0] = off_1E2521330;
      v112[4] = v129;
      v112[5] = v130;
      v112[6] = v131;
      if (v131)
      {
        *((_QWORD *)v130 + 2) = &v112[5];
        v59 = 0;
        v129 = &v130;
        v130 = 0;
        v131 = 0;
      }
      else
      {
        v112[4] = &v112[5];
      }
      *(_OWORD *)&v112[7] = v132;
      v132 = 0uLL;
      v114 = 0;
      v127.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v129, v59);
      MEMORY[0x18D7898AC](&v127);
      if (v39)
        goto LABEL_103;
      goto LABEL_110;
    }
    v43 = *(_DWORD *)(v37 + 56);
    if (v43 == 5)
      v44 = (uint64_t *)(v37 + 32);
    else
      v44 = 0;
    if (v43 != 5)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40],AMSCore::Any &>((uint64_t)v138, 2u, "Db contained invalid or missing topic: ", v37 + 32);
      goto LABEL_92;
    }
    v45 = *(_DWORD *)(v37 + 88);
    if (v45 == -1)
      v46 = 0;
    else
      v46 = *(_DWORD *)(v37 + 88);
    if ((v46 - 5) >= 2)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40],AMSCore::Any &>((uint64_t)v138, 2u, "Db contained invalid or missing event: ", v37 + 64);
LABEL_92:
      std::runtime_error::runtime_error((std::runtime_error *)v112, (const std::runtime_error *)v138);
      *(_OWORD *)&v112[2] = *(_OWORD *)&v138[16];
      v60 = v140;
      v112[0] = off_1E2521330;
      v112[4] = v139;
      v112[5] = v140;
      v112[6] = v141;
      if (v141)
      {
        *((_QWORD *)v140 + 2) = &v112[5];
        v60 = 0;
        v139 = &v140;
        v140 = 0;
        v141 = 0;
      }
      else
      {
        v112[4] = &v112[5];
      }
      *(_OWORD *)&v112[7] = v142;
      v142 = 0uLL;
      v114 = 0;
      *(_QWORD *)v138 = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v60);
      MEMORY[0x18D7898AC](v138);
      if (!v39)
        goto LABEL_110;
LABEL_103:
      if (v38 != (char *)v39)
      {
        v71 = v36;
        do
        {
          v72 = v38 - 32;
          v73 = *((unsigned int *)v38 - 2);
          if ((_DWORD)v73 != -1)
            ((void (*)(_BYTE *, char *))off_1E253D240[v73])(v138, v38 - 32);
          *((_DWORD *)v38 - 2) = -1;
          v38 -= 32;
        }
        while (v72 != (char *)v39);
        v38 = (char *)v110;
        v36 = v71;
      }
      *((_QWORD *)&v110 + 1) = v39;
      operator delete(v38);
      goto LABEL_110;
    }
    if (v45 == v46)
      v47 = (uint64_t *)(v37 + 64);
    else
      v47 = 0;
    v48 = *(_DWORD *)(v37 + 120);
    if (v48 == -1)
      v48 = 0;
    switch(v48)
    {
      case 1:
        v63 = 0;
        v61 = *(unsigned __int8 *)(v37 + 96);
        goto LABEL_101;
      case 2:
        v49 = (unint64_t)*(double *)(v37 + 96);
        goto LABEL_100;
      case 3:
      case 4:
        v49 = *(_QWORD *)(v37 + 96);
LABEL_100:
        v61 = v49;
        v63 = v49 & 0xFFFFFFFFFFFFFF00;
LABEL_101:
        v62 = 1;
        break;
      default:
        v61 = 0;
        v62 = 0;
        v63 = 0;
        break;
    }
    v64 = v63 | v61;
    v65 = *v44;
    *(_QWORD *)v138 = v44[1];
    *(_QWORD *)&v138[7] = *(uint64_t *)((char *)v44 + 15);
    v66 = *((_BYTE *)v44 + 23);
    v44[1] = 0;
    v44[2] = 0;
    *v44 = 0;
    v67 = *v42;
    v133.__vftable = (std::system_error_vtbl *)v42[1];
    *(std::system_error_vtbl **)((char *)&v133.__vftable + 7) = *(std::system_error_vtbl **)((char *)v42 + 15);
    v68 = *((_BYTE *)v42 + 23);
    v42[1] = 0;
    v42[2] = 0;
    *v42 = 0;
    v69 = *v47;
    v70 = (std::runtime_error_vtbl *)v47[1];
    *(std::runtime_error_vtbl **)((char *)&v127.__vftable + 7) = *(std::runtime_error_vtbl **)((char *)v47 + 15);
    v127.__vftable = v70;
    LOBYTE(v70) = *((_BYTE *)v47 + 23);
    v47[1] = 0;
    v47[2] = 0;
    *v47 = 0;
    v112[0] = v65;
    *(_QWORD *)((char *)&v112[1] + 7) = *(_QWORD *)&v138[7];
    v112[1] = *(_QWORD *)v138;
    HIBYTE(v112[2]) = v66;
    v112[3] = v67;
    *(_QWORD *)((char *)&v112[4] + 7) = *(std::system_error_vtbl **)((char *)&v133.__vftable + 7);
    v112[4] = v133.__vftable;
    HIBYTE(v112[5]) = v68;
    v112[6] = v69;
    *(_QWORD *)((char *)&v112[7] + 7) = *(std::runtime_error_vtbl **)((char *)&v127.__vftable + 7);
    v112[7] = v127.__vftable;
    HIBYTE(v112[8]) = (_BYTE)v70;
    *(_QWORD *)&v113 = v64;
    BYTE8(v113) = v62;
    v114 = 1;
    if ((_QWORD)v37)
      goto LABEL_103;
LABEL_110:
    v74 = v114;
    if (v114)
    {
      v75 = (char *)__p[1];
      if (__p[1] >= v123)
      {
        v79 = std::vector<AMSCore::IMetricsDataAccessObject::Event>::__emplace_back_slow_path<AMSCore::IMetricsDataAccessObject::Event>(__p, (uint64_t)v112);
      }
      else
      {
        v76 = *(_OWORD *)v112;
        *((_QWORD *)__p[1] + 2) = v112[2];
        *(_OWORD *)v75 = v76;
        memset(v112, 0, 24);
        v77 = v112[5];
        *(_OWORD *)(v75 + 24) = *(_OWORD *)&v112[3];
        *((_QWORD *)v75 + 5) = v77;
        memset(&v112[3], 0, 24);
        v78 = *(_OWORD *)&v112[6];
        *((_QWORD *)v75 + 8) = v112[8];
        *((_OWORD *)v75 + 3) = v78;
        memset(&v112[6], 0, 24);
        *(_OWORD *)(v75 + 72) = v113;
        v79 = v75 + 88;
      }
      __p[1] = v79;
      if (v114)
        goto LABEL_117;
    }
    else
    {
      AMSCore::Error::Error((std::runtime_error *)v138, (const std::runtime_error *)v112);
      std::runtime_error::runtime_error(&v133, (const std::runtime_error *)v138);
      v133.__ec_ = *(std::error_code *)&v138[16];
      v80 = v140;
      v133.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v134 = (uint64_t)v139;
      v135 = v140;
      v136 = v141;
      if (v141)
      {
        *((_QWORD *)v140 + 2) = v34;
        v80 = 0;
        v139 = &v140;
        v140 = 0;
        v141 = 0;
      }
      else
      {
        v134 = (uint64_t)v34;
      }
      v137 = v142;
      v142 = 0uLL;
      *(_QWORD *)v138 = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v139, v80);
      MEMORY[0x18D7898AC](v138);
      std::runtime_error::runtime_error(v32, &v133);
      *v103 = v133.__ec_;
      v32->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v81 = v135;
      v32[2].__vftable = (std::runtime_error_vtbl *)v134;
      v32[2].__imp_.__imp_ = (const char *)v81;
      v82 = v136;
      v32[3].__vftable = v136;
      if (v82)
      {
        *((_QWORD *)v81 + 2) = v102;
        v81 = 0;
        v134 = (uint64_t)v34;
        *v34 = 0;
        v34[1] = 0;
      }
      else
      {
        v32[2].__vftable = v102;
      }
      *(_OWORD *)&v32[3].__imp_.__imp_ = v137;
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      LOBYTE(v32[4].__imp_.__imp_) = 0;
      v133.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v134, v81);
      MEMORY[0x18D7898AC](&v133);
      if (v114)
      {
LABEL_117:
        if (SHIBYTE(v112[8]) < 0)
        {
          operator delete((void *)v112[6]);
          if ((SHIBYTE(v112[5]) & 0x80000000) == 0)
            goto LABEL_119;
        }
        else if ((SHIBYTE(v112[5]) & 0x80000000) == 0)
        {
LABEL_119:
          if (SHIBYTE(v112[2]) < 0)
            goto LABEL_124;
LABEL_120:
          if (!v74)
            break;
          goto LABEL_132;
        }
        operator delete((void *)v112[3]);
        if (SHIBYTE(v112[2]) < 0)
        {
LABEL_124:
          operator delete((void *)v112[0]);
          if (!v74)
            break;
          goto LABEL_132;
        }
        goto LABEL_120;
      }
    }
    (*(void (**)(_QWORD *))v112[0])(v112);
    if (!v74)
      break;
LABEL_132:
    if (++v33 == (std::runtime_error_vtbl *)v109)
      goto LABEL_133;
  }
  v85 = (void **)__p[0];
  if (!__p[0])
    goto LABEL_184;
  for (i = (void **)__p[1]; i != v85; i -= 11)
  {
    if (*((char *)i - 17) < 0)
    {
      operator delete(*(i - 5));
      if (*((char *)i - 41) < 0)
      {
LABEL_144:
        operator delete(*(i - 8));
        if ((*((char *)i - 65) & 0x80000000) == 0)
          continue;
        goto LABEL_145;
      }
    }
    else if (*((char *)i - 41) < 0)
    {
      goto LABEL_144;
    }
    if ((*((char *)i - 65) & 0x80000000) == 0)
      continue;
LABEL_145:
    operator delete(*(i - 11));
  }
  operator delete(v85);
  if (!v121)
    goto LABEL_187;
LABEL_185:
  *(_QWORD *)v138 = &v115;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)v138);
}

void sub_18CC2734C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void AMSCore::MetricsDataAccessObject::countEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  void *__p;
  char *v12;
  char v13;
  std::string v14;
  int v15;
  uint64_t v16[3];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  v15 = 5;
  v16[0] = (v4 - 300000000) / 1000000;
  v17 = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)&v14, 2uLL);
  v5 = *(_QWORD *)(a1 + 336);
  if (!v5)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 48))(v5, &__p);
  v6 = (char *)__p;
  if (__p)
  {
    v7 = v12;
    v8 = __p;
    if (v12 != __p)
    {
      do
      {
        v9 = v7 - 32;
        v10 = *((unsigned int *)v7 - 2);
        if ((_DWORD)v10 != -1)
          ((void (*)(char *, char *))off_1E253D240[v10])(&v13, v7 - 32);
        *((_DWORD *)v7 - 2) = -1;
        v7 -= 32;
      }
      while (v9 != v6);
      v8 = __p;
    }
    v12 = v6;
    operator delete(v8);
  }
  if (v17 != -1)
    ((void (*)(char *, uint64_t *))off_1E253D240[v17])(&v13, v16);
  v17 = -1;
  if (v15 != -1)
    ((void (*)(char *, std::string *))off_1E253D240[v15])(&v13, &v14);
}

void sub_18CC276B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::getAccountsByTopic(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::runtime_error_vtbl *v6;
  const char *imp;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;
  uint64_t v10;
  const char *v11;
  std::runtime_error_vtbl *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void (__cdecl *v18)(std::runtime_error *__hidden);
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *i;
  uint64_t v33;
  char v34;
  unint64_t *v35;
  uint64_t v36;
  char v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::runtime_error __p;
  __int128 v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  std::runtime_error v51[4];
  char v52;
  char v53;
  _BYTE v54[32];
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v54, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v54 = *(_OWORD *)a2;
    *(_QWORD *)&v54[16] = *(_QWORD *)(a2 + 16);
  }
  *(_DWORD *)&v54[24] = 5;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)v54, 1uLL);
  v5 = *(_QWORD *)(a1 + 208);
  if (!v5)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, std::runtime_error *))(*(_QWORD *)v5 + 48))(v51, v5, &__p);
  v6 = __p.__vftable;
  if (__p.__vftable)
  {
    imp = __p.__imp_.__imp_;
    v8 = __p.__vftable;
    if (__p.__imp_.__imp_ != (const char *)__p.__vftable)
    {
      do
      {
        v9 = (std::runtime_error_vtbl *)(imp - 32);
        v10 = *((unsigned int *)imp - 2);
        if ((_DWORD)v10 != -1)
          ((void (*)(char *, const char *))off_1E253D240[v10])(&v53, imp - 32);
        *((_DWORD *)imp - 2) = -1;
        imp -= 32;
      }
      while (v9 != v6);
      v8 = __p.__vftable;
    }
    __p.__imp_.__imp_ = (const char *)v6;
    operator delete(v8);
  }
  if (*(_DWORD *)&v54[24] != -1)
    ((void (*)(char *, _BYTE *))off_1E253D240[*(unsigned int *)&v54[24]])(&v53, v54);
  if (v52)
  {
    v12 = v51[0].__vftable;
    v11 = v51[0].__imp_.__imp_;
    if (v51[0].__imp_.__imp_ == (const char *)v51[0].__vftable)
    {
      v15 = 0;
      v17 = 0;
      v14 = 0;
LABEL_66:
      *(_QWORD *)a3 = v14;
      *(_QWORD *)(a3 + 8) = v17;
      *(_QWORD *)(a3 + 16) = v15;
      *(_BYTE *)(a3 + 72) = 1;
    }
    else
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v51[0].__imp_.__imp_ - (const char *)v51[0].__vftable) >> 3);
      if (v13 >> 60)
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      v14 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v51[0].__imp_.__imp_ - (const char *)v51[0].__vftable) >> 3));
      v15 = &v14[16 * v13];
      v16 = v14;
      while (1)
      {
        v18 = v12->~runtime_error;
        if ((void (__cdecl *)(std::runtime_error *__hidden))((char *)v12->~runtime_error_0 - (char *)v12->~runtime_error) != (void (__cdecl *)(std::runtime_error *__hidden))32)
          break;
        v19 = *((_DWORD *)v18 + 6);
        if ((v19 + 1) > 1)
        {
          if (v19 == -1)
            v19 = 0;
          switch(v19)
          {
            case 1:
              v25 = 0;
              v26 = *(unsigned __int8 *)v18;
              goto LABEL_41;
            case 2:
              *(_QWORD *)&v24 = (unint64_t)*(double *)v18;
              goto LABEL_40;
            case 3:
            case 4:
              v24 = *(double *)v18;
LABEL_40:
              v26 = LOBYTE(v24);
              v25 = *(_QWORD *)&v24 & 0xFFFFFFFFFFFFFF00;
LABEL_41:
              v27 = v25 | v26;
              if (v16 < v15)
              {
                *(_QWORD *)v16 = v27;
                *((_QWORD *)v16 + 1) = 1;
                goto LABEL_20;
              }
              v28 = (v16 - v14) >> 4;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 60)
                std::vector<std::string>::__throw_length_error[abi:fe180100]();
              if ((v15 - v14) >> 3 > v29)
                v29 = (v15 - v14) >> 3;
              if ((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFF0)
                v30 = 0xFFFFFFFFFFFFFFFLL;
              else
                v30 = v29;
              if (v30)
              {
                if (v30 >> 60)
                  std::__throw_bad_array_new_length[abi:fe180100]();
                v31 = (char *)operator new(16 * v30);
              }
              else
              {
                v31 = 0;
              }
              v35 = (unint64_t *)&v31[16 * v28];
              *v35 = v27;
              v35[1] = 1;
              for (i = (char *)v35; v16 != v14; i[8] = v37)
              {
                v36 = *((_QWORD *)v16 - 2);
                v16 -= 16;
                v37 = v16[8];
                *((_QWORD *)i - 2) = v36;
                i -= 16;
              }
              v15 = &v31[16 * v30];
              v17 = (char *)(v35 + 2);
              if (v14)
                goto LABEL_61;
              goto LABEL_62;
            default:
              AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)v54, 2u, "Invalid row type");
              goto LABEL_68;
          }
        }
        if (v16 < v15)
        {
          *v16 = 0;
          v16[8] = 0;
LABEL_20:
          v17 = v16 + 16;
        }
        else
        {
          v20 = (v16 - v14) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          if ((v15 - v14) >> 3 > v21)
            v21 = (v15 - v14) >> 3;
          if ((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFF0)
            v22 = 0xFFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
          {
            if (v22 >> 60)
              std::__throw_bad_array_new_length[abi:fe180100]();
            v23 = (char *)operator new(16 * v22);
          }
          else
          {
            v23 = 0;
          }
          i = &v23[16 * v20];
          v15 = &v23[16 * v22];
          *i = 0;
          i[8] = 0;
          v17 = i + 16;
          if (v16 == v14)
            goto LABEL_61;
          do
          {
            v33 = *((_QWORD *)v16 - 2);
            v16 -= 16;
            v34 = v16[8];
            *((_QWORD *)i - 2) = v33;
            i -= 16;
            i[8] = v34;
          }
          while (v16 != v14);
          if (v14)
LABEL_61:
            operator delete(v14);
LABEL_62:
          v14 = i;
        }
        ++v12;
        v16 = v17;
        if (v12 == (std::runtime_error_vtbl *)v11)
          goto LABEL_66;
      }
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)v54, 2u, "Invalid row size");
LABEL_68:
      std::runtime_error::runtime_error((std::runtime_error *)a3, (const std::runtime_error *)v54);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)&v54[16];
      *(_QWORD *)a3 = off_1E2521330;
      v39 = v56;
      *(_QWORD *)(a3 + 32) = v55;
      *(_QWORD *)(a3 + 40) = v39;
      v40 = a3 + 40;
      v41 = v57;
      *(_QWORD *)(a3 + 48) = v57;
      if (v41)
      {
        *(_QWORD *)(v39 + 16) = v40;
        v55 = &v56;
        v56 = 0;
        v57 = 0;
        v39 = 0;
      }
      else
      {
        *(_QWORD *)(a3 + 32) = v40;
      }
      *(_OWORD *)(a3 + 56) = v58;
      v58 = 0uLL;
      *(_BYTE *)(a3 + 72) = 0;
      *(_QWORD *)v54 = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v55, (unsigned int *)v39);
      MEMORY[0x18D7898AC](v54);
      if (v14)
        operator delete(v14);
    }
  }
  else
  {
    AMSCore::Error::Error((std::runtime_error *)v54, v51);
    std::runtime_error::runtime_error(&__p, (const std::runtime_error *)v54);
    v46 = *(_OWORD *)&v54[16];
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v38 = (unsigned int *)v56;
    v47 = v55;
    v48 = v56;
    v49 = v57;
    if (v57)
    {
      *(_QWORD *)(v56 + 16) = &v48;
      v55 = &v56;
      v56 = 0;
      v57 = 0;
      v38 = 0;
    }
    else
    {
      v47 = &v48;
    }
    v50 = v58;
    v58 = 0uLL;
    *(_QWORD *)v54 = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v55, v38);
    MEMORY[0x18D7898AC](v54);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &__p);
    *(_OWORD *)(a3 + 16) = v46;
    *(_QWORD *)a3 = off_1E2521330;
    v42 = v48;
    *(_QWORD *)(a3 + 32) = v47;
    *(_QWORD *)(a3 + 40) = v42;
    v43 = a3 + 40;
    v44 = v49;
    *(_QWORD *)(a3 + 48) = v49;
    if (v44)
    {
      *(_QWORD *)(v42 + 16) = v43;
      v42 = 0;
      v47 = &v48;
      v48 = 0;
      v49 = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v43;
    }
    *(_OWORD *)(a3 + 56) = v50;
    v50 = 0uLL;
    *(_BYTE *)(a3 + 72) = 0;
    __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, (unsigned int *)v42);
    MEMORY[0x18D7898AC](&__p);
  }
  if (v52)
  {
    *(_QWORD *)v54 = v51;
    std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)v54);
  }
  else
  {
    ((void (*)(std::runtime_error *))v51[0].~runtime_error)(v51);
  }
}

void sub_18CC27CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  if (v29)
    operator delete(v29);
  std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void AMSCore::MetricsDataAccessObject::lockEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void *v15;
  uint64_t *p_shared_weak_owners;
  uint64_t shared_weak_owners_low;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  std::ios_base *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *__p;
  char *v38;
  void *v39;
  std::__shared_weak_count *v40;
  _QWORD v41[9];
  char v42;
  int64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  _QWORD v48[3];
  int v49;
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53[19];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  LOBYTE(v44) = 0;
  v46 = 0;
  v47 = 5;
  v48[0] = (v6 + 1000 * a3) / 1000000;
  v49 = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&v39, (uint64_t)&v44, 2uLL);
  v54 = *(_OWORD *)a2;
  v55 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  LODWORD(v56) = 5;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)&v54, 1uLL);
  v43 = vdupq_n_s64(1uLL);
  v7 = *(_QWORD *)(a1 + 368);
  if (!v7)
    std::__throw_bad_function_call[abi:fe180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, void **, void **, int64x2_t *))(*(_QWORD *)v7 + 48))(v41, v7, &v39, &__p, &v43);
  v8 = (char *)__p;
  if (__p)
  {
    v9 = v38;
    v10 = __p;
    if (v38 != __p)
    {
      do
      {
        v11 = v9 - 32;
        v12 = *((unsigned int *)v9 - 2);
        if ((_DWORD)v12 != -1)
          ((void (*)(int64x2_t *, char *))off_1E253D240[v12])(&v43, v9 - 32);
        *((_DWORD *)v9 - 2) = -1;
        v9 -= 32;
      }
      while (v11 != v8);
      v10 = __p;
    }
    v38 = v8;
    operator delete(v10);
  }
  if ((_DWORD)v56 != -1)
    ((void (*)(int64x2_t *, __int128 *))off_1E253D240[v56])(&v43, &v54);
  v13 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v14 = v40;
    v15 = v39;
    if (v40 != v39)
    {
      do
      {
        p_shared_weak_owners = &v14[-2].__shared_weak_owners_;
        shared_weak_owners_low = LODWORD(v14[-1].__shared_weak_owners_);
        if ((_DWORD)shared_weak_owners_low != -1)
          ((void (*)(__int128 *, uint64_t *))off_1E253D240[shared_weak_owners_low])(&v54, &v14[-2].__shared_weak_owners_);
        LODWORD(v14[-1].__shared_weak_owners_) = -1;
        v14 = (std::__shared_weak_count *)((char *)v14 - 32);
      }
      while (p_shared_weak_owners != (uint64_t *)v13);
      v15 = v39;
    }
    v40 = v13;
    operator delete(v15);
  }
  if (v49 != -1)
    ((void (*)(__int128 *, _QWORD *))off_1E253D240[v49])(&v54, v48);
  v49 = -1;
  if (v47 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E253D240[v47])(&v54, &v44);
  if (!v42)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v39);
    v18 = (_QWORD **)v39;
    if (*((int *)v39 + 2) <= 4)
    {
      v19 = MEMORY[0x1E0DE4FE0];
      v20 = MEMORY[0x1E0DE4FE0] + 64;
      v21 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v22 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v23 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v53[0] = MEMORY[0x1E0DE4FE0] + 64;
      v44 = v22;
      *(uint64_t *)((char *)&v44 + *(_QWORD *)(v22 - 24)) = v23;
      v24 = (std::ios_base *)((char *)&v44 + *(_QWORD *)(v44 - 24));
      std::ios_base::init(v24, &v45);
      v24[1].__vftable = 0;
      v24[1].__fmtflags_ = -1;
      v44 = v19 + 24;
      v53[0] = v20;
      std::streambuf::basic_streambuf();
      v25 = MEMORY[0x1E0DE4FB8];
      v45 = MEMORY[0x1E0DE4FB8] + 16;
      v50 = 0u;
      v51 = 0u;
      v52 = 16;
      v26 = *(_QWORD *)(v44 - 24);
      if ((v27 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Failed to lock event '", 22);
      v28 = *(char *)(a2 + 23);
      if (v28 >= 0)
        v29 = a2;
      else
        v29 = *(_QWORD *)a2;
      if (v28 >= 0)
        v30 = *(unsigned __int8 *)(a2 + 23);
      else
        v30 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v44, v29, v30);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v44, (uint64_t)"': ", 3);
      AMSCore::operator<<(&v44, (uint64_t)v41);
      v31 = v48[2];
      v32 = (char *)&v44 + *(_QWORD *)(v44 - 24);
      if ((v32[32] & 5) != 0)
      {
        v33 = -1;
      }
      else
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v32 + 5) + 32))(&v54, *((_QWORD *)v32 + 5), 0, 1, 16);
        v33 = v57;
      }
      *(std::chrono::system_clock::time_point *)&v54 = std::chrono::system_clock::now();
      DWORD2(v54) = 4;
      v55 = v31;
      v56 = v33;
      (*(void (**)(_QWORD *, const char *, uint64_t, __int128 *))(*v18[2] + 16))(v18[2], "metrics", 7, &v54);
      v44 = *v21;
      *(uint64_t *)((char *)&v44 + *(_QWORD *)(v44 - 24)) = v21[3];
      v45 = v25 + 16;
      if (SBYTE7(v51) < 0)
        operator delete((void *)v50);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v53);
    }
    v34 = v40;
    if (!v40)
      goto LABEL_43;
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (v36)
    {
LABEL_43:
      if (v42)
        return;
      goto LABEL_44;
    }
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (!v42)
LABEL_44:
      (*(void (**)(_QWORD *))v41[0])(v41);
  }
}

void sub_18CC28234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [17]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC28400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char v13;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (void **)v1[1];
      do
      {
        v9 = (char *)*(v6 - 3);
        v6 -= 3;
        v8 = v9;
        if (v9)
        {
          v10 = (char *)*(v4 - 2);
          v7 = v8;
          if (v10 != v8)
          {
            do
            {
              v11 = v10 - 32;
              v12 = *((unsigned int *)v10 - 2);
              if ((_DWORD)v12 != -1)
                ((void (*)(char *, char *))off_1E253D240[v12])(&v13, v10 - 32);
              *((_DWORD *)v10 - 2) = -1;
              v10 -= 32;
            }
            while (v11 != v8);
            v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (void **)a1;
    std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100](&v3);
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::StringUtils::join<char [17]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC286A0(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void std::vector<AMSCore::IMetricsDataAccessObject::Event>::reserve(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void **v13;

  v2 = *(void ***)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v4 = *(void ***)(a1 + 8);
    v5 = 88 * a2;
    v6 = (char *)operator new(88 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 != v2)
    {
      v9 = &v6[(char *)v4 - (char *)v2];
      do
      {
        v10 = *(_OWORD *)(v4 - 11);
        *((_QWORD *)v9 - 9) = *(v4 - 9);
        *(_OWORD *)(v9 - 88) = v10;
        *(v4 - 10) = 0;
        *(v4 - 9) = 0;
        *(v4 - 11) = 0;
        v11 = *((_OWORD *)v4 - 4);
        *((_QWORD *)v9 - 6) = *(v4 - 6);
        *((_OWORD *)v9 - 4) = v11;
        *(v4 - 7) = 0;
        *(v4 - 6) = 0;
        *(v4 - 8) = 0;
        v12 = *(_OWORD *)(v4 - 5);
        *((_QWORD *)v9 - 3) = *(v4 - 3);
        *(_OWORD *)(v9 - 40) = v12;
        *(v4 - 4) = 0;
        *(v4 - 3) = 0;
        *(v4 - 5) = 0;
        *((_OWORD *)v9 - 1) = *((_OWORD *)v4 - 1);
        v9 -= 88;
        v4 -= 11;
      }
      while (v4 != v2);
      v2 = *(void ***)a1;
      v13 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (1)
      {
        if (v13 == v2)
          goto LABEL_17;
        if (*((char *)v13 - 17) < 0)
        {
          operator delete(*(v13 - 5));
          if (*((char *)v13 - 41) < 0)
          {
LABEL_14:
            operator delete(*(v13 - 8));
            if ((*((char *)v13 - 65) & 0x80000000) == 0)
              goto LABEL_7;
            goto LABEL_15;
          }
        }
        else if (*((char *)v13 - 41) < 0)
        {
          goto LABEL_14;
        }
        if ((*((char *)v13 - 65) & 0x80000000) == 0)
          goto LABEL_7;
LABEL_15:
        operator delete(*(v13 - 11));
LABEL_7:
        v13 -= 11;
      }
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
LABEL_17:
    if (v2)
      operator delete(v2);
  }
}

char *std::vector<AMSCore::IMetricsDataAccessObject::Event>::__emplace_back_slow_path<AMSCore::IMetricsDataAccessObject::Event>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void **v17;

  v2 = 0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[88 * v2];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[88 * v6];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v8 + 8) = *(_QWORD *)(a2 + 64);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  v11 = v8 + 88;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 11);
      *((_QWORD *)v8 - 9) = *(v13 - 9);
      *(_OWORD *)(v8 - 88) = v14;
      *(v13 - 10) = 0;
      *(v13 - 9) = 0;
      *(v13 - 11) = 0;
      v15 = *((_OWORD *)v13 - 4);
      *((_QWORD *)v8 - 6) = *(v13 - 6);
      *((_OWORD *)v8 - 4) = v15;
      *(v13 - 7) = 0;
      *(v13 - 6) = 0;
      *(v13 - 8) = 0;
      v16 = *(_OWORD *)(v13 - 5);
      *((_QWORD *)v8 - 3) = *(v13 - 3);
      *(_OWORD *)(v8 - 40) = v16;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      *(v13 - 5) = 0;
      *((_OWORD *)v8 - 1) = *((_OWORD *)v13 - 1);
      v8 -= 88;
      v13 -= 11;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v17 == v13)
        goto LABEL_24;
      if (*((char *)v17 - 17) < 0)
      {
        operator delete(*(v17 - 5));
        if (*((char *)v17 - 41) < 0)
        {
LABEL_21:
          operator delete(*(v17 - 8));
          if ((*((char *)v17 - 65) & 0x80000000) == 0)
            goto LABEL_14;
          goto LABEL_22;
        }
      }
      else if (*((char *)v17 - 41) < 0)
      {
        goto LABEL_21;
      }
      if ((*((char *)v17 - 65) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_22:
      operator delete(*(v17 - 11));
LABEL_14:
      v17 -= 11;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_24:
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t std::expected<AMSCore::IMetricsDataAccessObject::Event,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 88))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_4:
      if (*(char *)(a1 + 23) < 0)
        goto LABEL_9;
      return a1;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
LABEL_9:
    operator delete(*(void **)a1);
  return a1;
}

void **std::vector<AMSCore::IMetricsDataAccessObject::Event>::~vector[abi:fe180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 17) < 0)
      {
        operator delete(*(v3 - 5));
        if ((*((char *)v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if (*((char *)v3 - 65) < 0)
            goto LABEL_11;
          goto LABEL_4;
        }
      }
      else if ((*((char *)v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 8));
      if (*((char *)v3 - 65) < 0)
LABEL_11:
        operator delete(*(v3 - 11));
LABEL_4:
      v3 -= 11;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_13;
      }
    }
  }
  return a1;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40],AMSCore::Any &>(uint64_t a1, unsigned int a2, const char *a3, uint64_t a4)
{
  std::system_error_vtbl *v8;
  uint64_t v9;
  uint64_t v10;
  std::system_error_vtbl *v11;
  std::system_error_vtbl *v12;
  std::ios_base *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string __what_arg;
  std::system_error v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[20];
  std::error_code v30;

  v8 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = MEMORY[0x1E0DE4F60];
  v11 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v12 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v29[0] = MEMORY[0x1E0DE4FE0] + 64;
  v21.__vftable = v11;
  *(std::system_error_vtbl **)((char *)&v21.__vftable + (unint64_t)v11[-1].~system_error) = v12;
  v13 = (std::ios_base *)((char *)&v21 + (unint64_t)v21.__vftable[-1].~system_error);
  std::ios_base::init(v13, &v21.__imp_);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v21.__vftable = v8 + 1;
  v29[0] = v9;
  std::streambuf::basic_streambuf();
  v14 = MEMORY[0x1E0DE4FB8];
  v21.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 16;
  v15 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, (uint64_t)a3, v15);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v21.__imp_, &__what_arg);
  v21.__vftable = *(std::system_error_vtbl **)v10;
  *(std::system_error_vtbl **)((char *)&v21.__vftable + (unint64_t)v21.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v10 + 24);
  v21.__imp_.__imp_ = (const char *)(v14 + 16);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v29);
  *(_QWORD *)&v30.__val_ = a2;
  v30.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v21, v30, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v23 = 0;
  v24 = 0;
  v21.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v22 = &v23;
  v25 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v21);
  *(std::error_code *)(a1 + 16) = v21.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v16 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v16;
  v17 = a1 + 40;
  v18 = v24;
  *(_QWORD *)(a1 + 48) = v24;
  if (v18)
  {
    *(_QWORD *)(v16 + 16) = v17;
    v16 = 0;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v17;
  }
  *(_OWORD *)(a1 + 56) = v25;
  v25 = 0uLL;
  v21.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v16);
  return MEMORY[0x18D7898AC](&v21);
}

void sub_18CC28D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC28DB0(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

char *std::vector<std::string>::__emplace_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:fe180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void **std::vector<std::vector<AMSCore::Any>>::__emplace_back_slow_path<std::vector<AMSCore::Any>>(void ***a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  __int128 v14;
  void **v15;
  void **v16;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v24;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  if (0x5555555555555556 * (a1[2] - *a1) > v3)
    v3 = 0x5555555555555556 * (a1[2] - *a1);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:fe180100]();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v2];
  v10 = (void **)&v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = (void **)(v9 + 24);
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 3);
      v13 -= 3;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = v13[2];
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v19 = (char *)*(v16 - 3);
        v16 -= 3;
        v18 = v19;
        if (v19)
        {
          v20 = (char *)*(v15 - 2);
          v17 = v18;
          if (v20 != v18)
          {
            do
            {
              v21 = v20 - 32;
              v22 = *((unsigned int *)v20 - 2);
              if ((_DWORD)v22 != -1)
                ((void (*)(char *, char *))off_1E253D240[v22])(&v24, v20 - 32);
              *((_DWORD *)v20 - 2) = -1;
              v20 -= 32;
            }
            while (v21 != v18);
            v17 = *v16;
          }
          *(v15 - 2) = v18;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *std::vector<AMSCore::StructuredData::ColumnDesc>::vector[abi:fe180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_18CC293DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 59)
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    v5 = 32 * a3;
    v6 = (char *)operator new(32 * a3);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5 - 4);
    a1[1] = v7;
  }
  return a1;
}

void sub_18CC29468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>(std::runtime_error *result, uint64_t a2)
{
  char v2;
  _QWORD *v4;
  uint64_t v5;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v7;

  if (*(_BYTE *)(a2 + 72))
  {
    v2 = 0;
    LOBYTE(result->__vftable) = 0;
  }
  else
  {
    result = std::runtime_error::runtime_error(result, (const std::runtime_error *)a2);
    v4 = (_QWORD *)(a2 + 40);
    v5 = *(_QWORD *)(a2 + 40);
    result[1] = *(std::runtime_error *)(a2 + 16);
    result->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    result[2].__imp_.__imp_ = (const char *)v5;
    p_imp = (std::runtime_error_vtbl *)&result[2].__imp_;
    v7 = *(std::runtime_error_vtbl **)(a2 + 48);
    result[3].__vftable = v7;
    if (v7)
    {
      *(_QWORD *)(v5 + 16) = p_imp;
      *(_QWORD *)(a2 + 32) = v4;
      *v4 = 0;
      *(_QWORD *)(a2 + 48) = 0;
    }
    else
    {
      result[2].__vftable = p_imp;
    }
    *(std::runtime_error *)((char *)result + 56) = *(std::runtime_error *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v2 = 1;
  }
  LOBYTE(result[4].__imp_.__imp_) = v2;
  return result;
}

_QWORD *AMSCore::MetricsDataAccessObject::MetricsDataAccessObject(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v19 = *a2;
  *a2 = 0;
  *a1 = &off_1E2521040;
  a1[1] = v19;
  v20 = *a3;
  *a3 = 0;
  a1[2] = v20;
  v21 = (_QWORD *)(a4 + 24);
  v22 = *(_QWORD *)(a4 + 24);
  if (!v22)
  {
    v21 = a1 + 6;
    goto LABEL_5;
  }
  if (v22 != a4)
  {
    a1[6] = v22;
LABEL_5:
    *v21 = 0;
    goto LABEL_7;
  }
  a1[6] = a1 + 3;
  (*(void (**)(_QWORD))(*(_QWORD *)*v21 + 24))(*v21);
LABEL_7:
  v23 = (_QWORD *)(a5 + 24);
  v24 = *(_QWORD *)(a5 + 24);
  if (!v24)
  {
    v23 = a1 + 10;
    goto LABEL_11;
  }
  if (v24 != a5)
  {
    a1[10] = v24;
LABEL_11:
    *v23 = 0;
    goto LABEL_13;
  }
  a1[10] = a1 + 7;
  (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 24))(*v23);
LABEL_13:
  v25 = (_QWORD *)(a6 + 24);
  v26 = *(_QWORD *)(a6 + 24);
  if (!v26)
  {
    v25 = a1 + 14;
    goto LABEL_17;
  }
  if (v26 != a6)
  {
    a1[14] = v26;
LABEL_17:
    *v25 = 0;
    goto LABEL_19;
  }
  a1[14] = a1 + 11;
  (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 24))(*v25);
LABEL_19:
  v27 = (_QWORD *)(a7 + 24);
  v28 = *(_QWORD *)(a7 + 24);
  if (!v28)
  {
    v27 = a1 + 18;
    goto LABEL_23;
  }
  if (v28 != a7)
  {
    a1[18] = v28;
LABEL_23:
    *v27 = 0;
    goto LABEL_25;
  }
  a1[18] = a1 + 15;
  (*(void (**)(_QWORD))(*(_QWORD *)*v27 + 24))(*v27);
LABEL_25:
  v29 = (_QWORD *)(a8 + 24);
  v30 = *(_QWORD *)(a8 + 24);
  if (!v30)
  {
    v29 = a1 + 22;
    goto LABEL_29;
  }
  if (v30 != a8)
  {
    a1[22] = v30;
LABEL_29:
    *v29 = 0;
    goto LABEL_31;
  }
  a1[22] = a1 + 19;
  (*(void (**)(_QWORD))(*(_QWORD *)*v29 + 24))(*v29);
LABEL_31:
  v31 = (_QWORD *)(a9 + 24);
  v32 = *(_QWORD *)(a9 + 24);
  if (!v32)
  {
    v31 = a1 + 26;
    goto LABEL_35;
  }
  if (v32 != a9)
  {
    a1[26] = v32;
LABEL_35:
    *v31 = 0;
    goto LABEL_37;
  }
  a1[26] = a1 + 23;
  (*(void (**)(_QWORD))(*(_QWORD *)*v31 + 24))(*v31);
LABEL_37:
  v33 = (_QWORD *)(a10 + 24);
  v34 = *(_QWORD *)(a10 + 24);
  if (!v34)
  {
    v33 = a1 + 30;
    goto LABEL_41;
  }
  if (v34 != a10)
  {
    a1[30] = v34;
LABEL_41:
    *v33 = 0;
    goto LABEL_43;
  }
  a1[30] = a1 + 27;
  (*(void (**)(_QWORD))(*(_QWORD *)*v33 + 24))(*v33);
LABEL_43:
  v35 = (_QWORD *)(a11 + 24);
  v36 = *(_QWORD *)(a11 + 24);
  if (!v36)
  {
    v35 = a1 + 34;
    goto LABEL_47;
  }
  if (v36 != a11)
  {
    a1[34] = v36;
LABEL_47:
    *v35 = 0;
    goto LABEL_49;
  }
  a1[34] = a1 + 31;
  (*(void (**)(_QWORD))(*(_QWORD *)*v35 + 24))(*v35);
LABEL_49:
  v37 = (_QWORD *)(a12 + 24);
  v38 = *(_QWORD *)(a12 + 24);
  if (!v38)
  {
    v37 = a1 + 38;
    goto LABEL_53;
  }
  if (v38 != a12)
  {
    a1[38] = v38;
LABEL_53:
    *v37 = 0;
    goto LABEL_55;
  }
  a1[38] = a1 + 35;
  (*(void (**)(_QWORD))(*(_QWORD *)*v37 + 24))(*v37);
LABEL_55:
  v39 = (_QWORD *)(a13 + 24);
  v40 = *(_QWORD *)(a13 + 24);
  if (!v40)
  {
    v39 = a1 + 42;
    goto LABEL_59;
  }
  if (v40 != a13)
  {
    a1[42] = v40;
LABEL_59:
    *v39 = 0;
    goto LABEL_61;
  }
  a1[42] = a1 + 39;
  (*(void (**)(_QWORD))(*(_QWORD *)*v39 + 24))(*v39);
LABEL_61:
  v41 = (_QWORD *)(a14 + 24);
  v42 = *(_QWORD *)(a14 + 24);
  if (v42)
  {
    if (v42 == a14)
    {
      a1[46] = a1 + 43;
      (*(void (**)(_QWORD))(*(_QWORD *)*v41 + 24))(*v41);
      return a1;
    }
    a1[46] = v42;
  }
  else
  {
    v41 = a1 + 46;
  }
  *v41 = 0;
  return a1;
}

uint64_t std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD **)(a1 + 24);
    if (v2 == (_QWORD *)a1)
    {
      v3 = 4;
      v2 = (_QWORD *)a1;
      goto LABEL_7;
    }
    if (v2)
    {
      v3 = 5;
LABEL_7:
      (*(void (**)(void))(*v2 + 8 * v3))();
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::MetricsIdentifierDataAccessObject::MetricsIdentifierDataAccessObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 32) = v16;
  v17 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 40) = v17;
  v18 = (_QWORD *)(a6 + 24);
  v19 = *(_QWORD *)(a6 + 24);
  if (!v19)
  {
    v18 = (_QWORD *)(a1 + 72);
    goto LABEL_5;
  }
  if (v19 != a6)
  {
    *(_QWORD *)(a1 + 72) = v19;
LABEL_5:
    *v18 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 24))(*v18);
LABEL_7:
  v20 = (_QWORD *)(a7 + 24);
  v21 = *(_QWORD *)(a7 + 24);
  if (!v21)
  {
    v20 = (_QWORD *)(a1 + 104);
    goto LABEL_11;
  }
  if (v21 != a7)
  {
    *(_QWORD *)(a1 + 104) = v21;
LABEL_11:
    *v20 = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 104) = a1 + 80;
  (*(void (**)(_QWORD))(*(_QWORD *)*v20 + 24))(*v20);
LABEL_13:
  v22 = (_QWORD *)(a8 + 24);
  v23 = *(_QWORD *)(a8 + 24);
  if (!v23)
  {
    v22 = (_QWORD *)(a1 + 136);
    goto LABEL_17;
  }
  if (v23 != a8)
  {
    *(_QWORD *)(a1 + 136) = v23;
LABEL_17:
    *v22 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 136) = a1 + 112;
  (*(void (**)(_QWORD))(*(_QWORD *)*v22 + 24))(*v22);
LABEL_19:
  v24 = (_QWORD *)(a9 + 24);
  v25 = *(_QWORD *)(a9 + 24);
  if (!v25)
  {
    v24 = (_QWORD *)(a1 + 168);
    goto LABEL_23;
  }
  if (v25 != a9)
  {
    *(_QWORD *)(a1 + 168) = v25;
LABEL_23:
    *v24 = 0;
    goto LABEL_25;
  }
  *(_QWORD *)(a1 + 168) = a1 + 144;
  (*(void (**)(_QWORD))(*(_QWORD *)*v24 + 24))(*v24);
LABEL_25:
  v26 = (_QWORD *)(a10 + 24);
  v27 = *(_QWORD *)(a10 + 24);
  if (!v27)
  {
    v26 = (_QWORD *)(a1 + 200);
    goto LABEL_29;
  }
  if (v27 != a10)
  {
    *(_QWORD *)(a1 + 200) = v27;
LABEL_29:
    *v26 = 0;
    goto LABEL_31;
  }
  *(_QWORD *)(a1 + 200) = a1 + 176;
  (*(void (**)(_QWORD))(*(_QWORD *)*v26 + 24))(*v26);
LABEL_31:
  v28 = (_QWORD *)(a11 + 24);
  v29 = *(_QWORD *)(a11 + 24);
  if (!v29)
  {
    v28 = (_QWORD *)(a1 + 232);
    goto LABEL_35;
  }
  if (v29 != a11)
  {
    *(_QWORD *)(a1 + 232) = v29;
LABEL_35:
    *v28 = 0;
    goto LABEL_37;
  }
  *(_QWORD *)(a1 + 232) = a1 + 208;
  (*(void (**)(_QWORD))(*(_QWORD *)*v28 + 24))(*v28);
LABEL_37:
  v30 = (_QWORD *)(a12 + 24);
  v31 = *(_QWORD *)(a12 + 24);
  if (!v31)
  {
    v30 = (_QWORD *)(a1 + 264);
    goto LABEL_41;
  }
  if (v31 != a12)
  {
    *(_QWORD *)(a1 + 264) = v31;
LABEL_41:
    *v30 = 0;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 264) = a1 + 240;
  (*(void (**)(_QWORD))(*(_QWORD *)*v30 + 24))(*v30);
LABEL_43:
  v32 = a13 + 3;
  v33 = (_QWORD *)a13[3];
  if (!v33)
  {
    v32 = (_QWORD *)(a1 + 296);
    goto LABEL_47;
  }
  if (v33 != a13)
  {
    *(_QWORD *)(a1 + 296) = v33;
LABEL_47:
    *v32 = 0;
    goto LABEL_49;
  }
  *(_QWORD *)(a1 + 296) = a1 + 272;
  (*(void (**)(_QWORD))(*(_QWORD *)*v32 + 24))(*v32);
LABEL_49:
  v34 = a13 + 7;
  v35 = (_QWORD *)a13[7];
  if (!v35)
  {
    v34 = (_QWORD *)(a1 + 328);
    goto LABEL_53;
  }
  if (v35 != a13 + 4)
  {
    *(_QWORD *)(a1 + 328) = v35;
LABEL_53:
    *v34 = 0;
    goto LABEL_55;
  }
  *(_QWORD *)(a1 + 328) = a1 + 304;
  (*(void (**)(_QWORD))(*(_QWORD *)*v34 + 24))(*v34);
LABEL_55:
  v36 = a13 + 11;
  v37 = (_QWORD *)a13[11];
  if (v37)
  {
    if (v37 == a13 + 8)
    {
      *(_QWORD *)(a1 + 360) = a1 + 336;
      (*(void (**)(_QWORD))(*(_QWORD *)*v36 + 24))(*v36);
      return a1;
    }
    *(_QWORD *)(a1 + 360) = v37;
  }
  else
  {
    v36 = (_QWORD *)(a1 + 360);
  }
  *v36 = 0;
  return a1;
}

uint64_t std::expected<std::vector<AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  void (**v2)(uint64_t);
  void (**v3)(uint64_t);
  void (**v4)(uint64_t);
  void (**v5)(uint64_t);
  uint64_t v6;
  char v8;

  v2 = *(void (***)(uint64_t))a1;
  if (*(_BYTE *)(a1 + 72))
  {
    if (v2)
    {
      v3 = *(void (***)(uint64_t))(a1 + 8);
      v4 = *(void (***)(uint64_t))a1;
      if (v3 != v2)
      {
        do
        {
          v5 = v3 - 4;
          v6 = *((unsigned int *)v3 - 2);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, void (**)(uint64_t)))off_1E253D240[v6])(&v8, v3 - 4);
          *((_DWORD *)v3 - 2) = -1;
          v3 -= 4;
        }
        while (v5 != v2);
        v4 = *(void (***)(uint64_t))a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  else
  {
    (*v2)(a1);
  }
  return a1;
}

uint64_t AMSCore::StringUtils::join<char [35]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC29E08(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::function(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::function(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::function(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::function<std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::function(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::function<std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::function(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::function(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void AMSCore::MetricsIdentifierDataAccessObject::MigrateF::~MigrateF(AMSCore::MetricsIdentifierDataAccessObject::MigrateF *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  AMSCore::MetricsIdentifierDataAccessObject::MigrateF *v5;
  uint64_t v6;
  AMSCore::MetricsIdentifierDataAccessObject::MigrateF *v7;
  uint64_t v8;

  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (AMSCore::MetricsIdentifierDataAccessObject::MigrateF *)*((_QWORD *)this + 7);
  if (v5 == (AMSCore::MetricsIdentifierDataAccessObject::MigrateF *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (AMSCore::MetricsIdentifierDataAccessObject::MigrateF *)((char *)this + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (AMSCore::MetricsIdentifierDataAccessObject::MigrateF *)*((_QWORD *)this + 3);
  if (v7 == this)
  {
    v8 = 4;
    v7 = this;
  }
  else
  {
    if (!v7)
      return;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
}

uint64_t AMSCore::StringUtils::join<char [33]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC2A27C(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMSCore::EphemeralDataProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::EphemeralDataProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522C40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2522C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t std::__shared_ptr_emplace<AMSCore::EphemeralDataProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AMSCore::EphemeralDataProvider::~EphemeralDataProvider(AMSCore::EphemeralDataProvider *this)
{
  *(_QWORD *)this = &off_1E2520E90;
  std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(*((char **)this + 23));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_1E2520E90;
  std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(*((char **)this + 23));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x18D789BDCLL);
}

void AMSCore::IDataProvider::getOptionalPathForItem(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 72) = 1;
}

void AMSCore::EphemeralDataProvider::getValue(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, const void *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[3];
  int v17;
  char v18;
  std::__shared_mutex_base *v19;
  char v20;
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v19 = (std::__shared_mutex_base *)(a1 + 8);
  v20 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  AMSCore::EphemeralDataProvider::unsafe_getValue((uint64_t)v16, a1, a2, a3, a4, a5);
  if (v18)
  {
    *(_BYTE *)a6 = 0;
    *(_DWORD *)(a6 + 24) = -1;
    v12 = v17;
    if (v17 != -1)
    {
      ((void (*)(char *, uint64_t, _QWORD *))off_1E253D1E0[v17])(&v21, a6, v16);
      *(_DWORD *)(a6 + 24) = v12;
    }
    if (v18)
      goto LABEL_5;
LABEL_15:
    (*(void (**)(_QWORD *))v16[0])(v16);
    if (!v20)
      return;
    goto LABEL_16;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v22);
  AMSCore::Logger::log<AMSCore::Error>(v22, (uint64_t)"data", 4, (uint64_t)v16);
  v13 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  if (!v18)
    goto LABEL_15;
LABEL_5:
  if (v17 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E253D240[v17])(&v22, v16);
  if (v20)
LABEL_16:
    std::__shared_mutex_base::unlock_shared(v19);
}

void sub_18CC2A534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2 - 64);
  std::expected<AMSCore::Any,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)va);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::EphemeralDataProvider::getValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, "com.apple.AppleMediaServicesCore.EphemeralDataProvider.default", 62, a2, a3);
}

void AMSCore::EphemeralDataProvider::setValue(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_mutex_base *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  int v18;
  char v19;
  char v20;

  v14 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 8));
  v17[0] = 0;
  v19 = 0;
  if (*(_BYTE *)(a6 + 32))
  {
    v18 = -1;
    v15 = *(unsigned int *)(a6 + 24);
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t))off_1E253CAE8[v15])(&v20, v17, a6);
      v18 = v15;
      v16 = *(unsigned int *)(a6 + 24);
      if ((_DWORD)v16 != -1)
      {
        if (!(_DWORD)v16)
        {
LABEL_7:
          v19 = 1;
          goto LABEL_8;
        }
        ((void (*)(char *, uint64_t))off_1E253D240[v16])(&v20, a6);
      }
    }
    *(_DWORD *)(a6 + 24) = 0;
    goto LABEL_7;
  }
LABEL_8:
  AMSCore::EphemeralDataProvider::unsafe_setValue(a7, a1, a2, a3, a4, a5, (uint64_t)v17);
  if (v19)
  {
    if (v18 != -1)
      ((void (*)(char *, _BYTE *))off_1E253D240[v18])(&v20, v17);
    v18 = -1;
  }
  std::__shared_mutex_base::unlock(v14);
}

uint64_t AMSCore::EphemeralDataProvider::setValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[24];
  int v12;
  char v13;
  char v14;

  v11[0] = 0;
  v13 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v12 = -1;
    v8 = *(unsigned int *)(a4 + 24);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t))off_1E253CAE8[v8])(&v14, v11, a4);
      v12 = v8;
      v9 = *(unsigned int *)(a4 + 24);
      if ((_DWORD)v9 != -1)
      {
        if (!(_DWORD)v9)
        {
LABEL_7:
          v13 = 1;
          goto LABEL_8;
        }
        ((void (*)(char *, uint64_t))off_1E253D240[v9])(&v14, a4);
      }
    }
    *(_DWORD *)(a4 + 24) = 0;
    goto LABEL_7;
  }
LABEL_8:
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, "com.apple.AppleMediaServicesCore.EphemeralDataProvider.default", 62, a2, a3, v11);
  if (v13)
  {
    if (v12 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E253D240[v12])(&v14, v11);
  }
  return result;
}

void AMSCore::EphemeralDataProvider::updateValues(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, const void *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_mutex_base *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  std::runtime_error v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  std::runtime_error_vtbl *v26;
  _QWORD v27[2];
  int v28;
  char v29;
  std::runtime_error v30;
  int v31;
  char v32;

  v14 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 8));
  AMSCore::EphemeralDataProvider::unsafe_getValue((uint64_t)&v30, a1, a2, a3, a4, a5);
  if (v32)
  {
    v20.__imp_.__imp_ = 0;
    *(_QWORD *)&v21 = 0;
    v20.__vftable = (std::runtime_error_vtbl *)&v20.__imp_;
    if (v31 == 8)
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>((uint64_t)&v20, (__int128 *)v30.__vftable, (__int128 *)&v30.__imp_);
    v15 = *(_QWORD *)(a6 + 24);
    if (!v15)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, std::runtime_error *))(*(_QWORD *)v15 + 48))(v15, &v20);
    v26 = v20.__vftable;
    v27[0] = v20.__imp_.__imp_;
    v27[1] = v21;
    if ((_QWORD)v21)
    {
      *((_QWORD *)v20.__imp_.__imp_ + 2) = v27;
      v20.__vftable = (std::runtime_error_vtbl *)&v20.__imp_;
      v20.__imp_.__imp_ = 0;
      *(_QWORD *)&v21 = 0;
    }
    else
    {
      v26 = (std::runtime_error_vtbl *)v27;
    }
    v28 = 8;
    v29 = 1;
    AMSCore::EphemeralDataProvider::unsafe_setValue(a7, a1, a2, a3, a4, a5, (uint64_t)&v26);
    if (v29)
    {
      if (v28 != -1)
        ((void (*)(unsigned int *, std::runtime_error_vtbl **))off_1E253D240[v28])(&v19, &v26);
      v28 = -1;
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, (unsigned int *)v20.__imp_.__imp_);
    if (v32)
      goto LABEL_15;
LABEL_19:
    ((void (*)(std::runtime_error *))v30.~runtime_error)(&v30);
    goto LABEL_20;
  }
  v19 = 900;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>((uint64_t)&v20, &v30, &v19);
  std::runtime_error::runtime_error((std::runtime_error *)a7, &v20);
  *(_OWORD *)(a7 + 16) = v21;
  *(_QWORD *)a7 = off_1E2521330;
  v16 = v23;
  *(_QWORD *)(a7 + 32) = v22;
  *(_QWORD *)(a7 + 40) = v16;
  v17 = a7 + 40;
  v18 = v24;
  *(_QWORD *)(a7 + 48) = v24;
  if (v18)
  {
    *(_QWORD *)(v16 + 16) = v17;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
    v16 = 0;
  }
  else
  {
    *(_QWORD *)(a7 + 32) = v17;
  }
  *(_OWORD *)(a7 + 56) = v25;
  v25 = 0uLL;
  *(_BYTE *)(a7 + 72) = 0;
  v20.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v16);
  MEMORY[0x18D7898AC](&v20);
  if (!v32)
    goto LABEL_19;
LABEL_15:
  if (v31 != -1)
    ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[v31])(&v20, &v30);
LABEL_20:
  std::__shared_mutex_base::unlock(v14);
}

{
  std::__shared_mutex_base *v14;
  uint64_t v15;
  std::runtime_error_vtbl *v16;
  const char *imp;
  std::runtime_error_vtbl *v18;
  std::runtime_error_vtbl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  std::runtime_error v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  std::runtime_error v31;
  uint64_t v32;
  int v33;
  char v34;
  std::runtime_error v35;
  int v36;
  char v37;

  v14 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 8));
  AMSCore::EphemeralDataProvider::unsafe_getValue((uint64_t)&v35, a1, a2, a3, a4, a5);
  if (v37)
  {
    v25.__vftable = 0;
    v25.__imp_.__imp_ = 0;
    *(_QWORD *)&v26 = 0;
    if (v36 == 9)
      std::vector<AMSCore::Any>::__assign_with_size[abi:fe180100]<AMSCore::Any*,AMSCore::Any*>((uint64_t *)&v25, (uint64_t)v35.__vftable, (uint64_t)v35.__imp_.__imp_, (v35.__imp_.__imp_ - (const char *)v35.__vftable) >> 5);
    v15 = *(_QWORD *)(a6 + 24);
    if (!v15)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(uint64_t, std::runtime_error *))(*(_QWORD *)v15 + 48))(v15, &v25);
    v31 = v25;
    v32 = v26;
    v25.__imp_.__imp_ = 0;
    *(_QWORD *)&v26 = 0;
    v25.__vftable = 0;
    v33 = 9;
    v34 = 1;
    AMSCore::EphemeralDataProvider::unsafe_setValue(a7, a1, a2, a3, a4, a5, (uint64_t)&v31);
    if (v34)
    {
      if (v33 != -1)
        ((void (*)(unsigned int *, std::runtime_error *))off_1E253D240[v33])(&v24, &v31);
      v33 = -1;
    }
    v16 = v25.__vftable;
    if (v25.__vftable)
    {
      imp = v25.__imp_.__imp_;
      v18 = v25.__vftable;
      if (v25.__imp_.__imp_ != (const char *)v25.__vftable)
      {
        do
        {
          v19 = (std::runtime_error_vtbl *)(imp - 32);
          v20 = *((unsigned int *)imp - 2);
          if ((_DWORD)v20 != -1)
            ((void (*)(unsigned int *, const char *))off_1E253D240[v20])(&v24, imp - 32);
          *((_DWORD *)imp - 2) = -1;
          imp -= 32;
        }
        while (v19 != v16);
        v18 = v25.__vftable;
      }
      v25.__imp_.__imp_ = (const char *)v16;
      operator delete(v18);
    }
    if (v37)
      goto LABEL_20;
LABEL_24:
    ((void (*)(std::runtime_error *))v35.~runtime_error)(&v35);
    goto LABEL_25;
  }
  v24 = 900;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>((uint64_t)&v25, &v35, &v24);
  std::runtime_error::runtime_error((std::runtime_error *)a7, &v25);
  *(_OWORD *)(a7 + 16) = v26;
  *(_QWORD *)a7 = off_1E2521330;
  v21 = v28;
  *(_QWORD *)(a7 + 32) = v27;
  *(_QWORD *)(a7 + 40) = v21;
  v22 = a7 + 40;
  v23 = v29;
  *(_QWORD *)(a7 + 48) = v29;
  if (v23)
  {
    *(_QWORD *)(v21 + 16) = v22;
    v27 = &v28;
    v28 = 0;
    v29 = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)(a7 + 32) = v22;
  }
  *(_OWORD *)(a7 + 56) = v30;
  v30 = 0uLL;
  *(_BYTE *)(a7 + 72) = 0;
  v25.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, (unsigned int *)v21);
  MEMORY[0x18D7898AC](&v25);
  if (!v37)
    goto LABEL_24;
LABEL_20:
  if (v36 != -1)
    ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[v36])(&v25, &v35);
LABEL_25:
  std::__shared_mutex_base::unlock(v14);
}

uint64_t AMSCore::EphemeralDataProvider::updateValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, "com.apple.AppleMediaServicesCore.EphemeralDataProvider.default", 62, a2, a3, a4);
}

{
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, "com.apple.AppleMediaServicesCore.EphemeralDataProvider.default", 62, a2, a3, a4);
}

uint64_t AMSCore::EphemeralDataProvider::unsafe_getValue(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, const void *a5, unint64_t a6)
{
  uint64_t result;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  int v32;
  uint64_t *v33;
  unint64_t v34;
  size_t v35;
  int v36;
  const void *v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  unsigned int v41;
  std::runtime_error v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  std::runtime_error v48[4];
  char v49;

  if (!v49)
  {
    v41 = 901;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>((uint64_t)&v42, v48, &v41);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v42);
    *(_OWORD *)(a1 + 16) = v43;
    *(_QWORD *)a1 = off_1E2521330;
    v25 = v45;
    *(_QWORD *)(a1 + 32) = v44;
    *(_QWORD *)(a1 + 40) = v25;
    v26 = a1 + 40;
    v27 = v46;
    *(_QWORD *)(a1 + 48) = v46;
    if (v27)
    {
      *(_QWORD *)(v25 + 16) = v26;
      v44 = &v45;
      v45 = 0;
      v46 = 0;
      v25 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v26;
    }
    *(_OWORD *)(a1 + 56) = v47;
    v47 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v42.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v44, (unsigned int *)v25);
    result = MEMORY[0x18D7898AC](&v42);
    if (!v49)
      return ((uint64_t (*)(std::runtime_error *))v48[0].~runtime_error)(v48);
    return result;
  }
  v15 = *(uint64_t **)(a2 + 184);
  v13 = (uint64_t *)(a2 + 184);
  v14 = v15;
  if (!v15)
    goto LABEL_70;
  v16 = v13;
  do
  {
    while (1)
    {
      v17 = *((char *)v14 + 55);
      v18 = v17 >= 0 ? v14 + 4 : (uint64_t *)v14[4];
      v19 = v17 >= 0 ? *((unsigned __int8 *)v14 + 55) : v14[5];
      v20 = v19 >= a4 ? a4 : v19;
      result = memcmp(a3, v18, v20);
      if ((_DWORD)result)
        break;
      if (a4 <= v19)
        goto LABEL_18;
LABEL_4:
      v14 = (uint64_t *)v14[1];
      if (!v14)
        goto LABEL_19;
    }
    if ((result & 0x80000000) == 0)
      goto LABEL_4;
LABEL_18:
    v16 = v14;
    v14 = (uint64_t *)*v14;
  }
  while (v14);
LABEL_19:
  if (v16 == v13)
    goto LABEL_70;
  v21 = *((char *)v16 + 55);
  if (v21 >= 0)
    v22 = v16 + 4;
  else
    v22 = (const void *)v16[4];
  if (v21 >= 0)
    v23 = *((unsigned __int8 *)v16 + 55);
  else
    v23 = v16[5];
  if (v23 >= a4)
    v24 = a4;
  else
    v24 = v23;
  result = memcmp(a3, v22, v24);
  if (!(_DWORD)result)
  {
    if (a4 >= v23)
      goto LABEL_38;
    goto LABEL_70;
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_70;
LABEL_38:
  v30 = (uint64_t *)v16[8];
  v29 = v16 + 8;
  v28 = v30;
  if (!v30)
  {
LABEL_70:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_71;
  }
  v31 = v29;
  do
  {
    while (1)
    {
      v32 = *((char *)v28 + 55);
      v33 = v32 >= 0 ? v28 + 4 : (uint64_t *)v28[4];
      v34 = v32 >= 0 ? *((unsigned __int8 *)v28 + 55) : v28[5];
      v35 = v34 >= a6 ? a6 : v34;
      result = memcmp(a5, v33, v35);
      if ((_DWORD)result)
        break;
      if (a6 <= v34)
        goto LABEL_54;
LABEL_40:
      v28 = (uint64_t *)v28[1];
      if (!v28)
        goto LABEL_55;
    }
    if ((result & 0x80000000) == 0)
      goto LABEL_40;
LABEL_54:
    v31 = v28;
    v28 = (uint64_t *)*v28;
  }
  while (v28);
LABEL_55:
  if (v31 == v29)
    goto LABEL_70;
  v36 = *((char *)v31 + 55);
  if (v36 >= 0)
    v37 = v31 + 4;
  else
    v37 = (const void *)v31[4];
  if (v36 >= 0)
    v38 = *((unsigned __int8 *)v31 + 55);
  else
    v38 = v31[5];
  if (v38 >= a6)
    v39 = a6;
  else
    v39 = v38;
  result = memcmp(a5, v37, v39);
  if (!(_DWORD)result)
  {
    if (a6 >= v38)
      goto LABEL_67;
    goto LABEL_70;
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_70;
LABEL_67:
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v40 = *((unsigned int *)v31 + 20);
  if ((_DWORD)v40 != -1)
  {
    result = ((uint64_t (*)(std::runtime_error *, uint64_t, uint64_t *))off_1E253D1E0[v40])(&v42, a1, v31 + 7);
    *(_DWORD *)(a1 + 24) = v40;
  }
LABEL_71:
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

void sub_18CC2B088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v21;

  v21 = *(unsigned int *)(v19 + 24);
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))off_1E253D240[v21])(&a19, v19);
  *(_DWORD *)(v19 + 24) = -1;
  _Unwind_Resume(exception_object);
}

void sub_18CC2B0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(_QWORD), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a28)
    (*a19)(&a19);
  _Unwind_Resume(exception_object);
}

void AMSCore::EphemeralDataProvider::unsafe_setValue(uint64_t a1, uint64_t a2, const void *a3, size_t a4, const void *a5, size_t a6, uint64_t a7)
{
  void **v12;
  void **v13;
  void **v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::runtime_error_vtbl *p_dst;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  void **v33;
  std::runtime_error_vtbl *v34;
  const char *v35;
  void **v36;
  int v37;
  void **v38;
  const char *v39;
  size_t v40;
  int v41;
  int v42;
  char *v43;
  const char *v44;
  size_t v45;
  int v46;
  char *v47;
  char *imp;
  uint64_t v49;
  int v50;
  const void *v51;
  size_t v52;
  size_t v53;
  int v54;
  int v55;
  void **v56;
  void **v57;
  void **v58;
  BOOL v59;
  int v60;
  const void *v61;
  size_t v62;
  std::runtime_error_vtbl *v63;
  const char *v64;
  size_t v65;
  int v66;
  void **v67;
  int v68;
  const void *v69;
  size_t v70;
  size_t v71;
  int v72;
  int v73;
  void **v74;
  BOOL v75;
  void **v76;
  void **v77;
  void **v78;
  _QWORD *v79;
  const void *v80;
  const void *v81;
  int v82;
  const void *v83;
  size_t v84;
  size_t v85;
  int v86;
  int v87;
  const void *v88;
  size_t v89;
  size_t v90;
  int v91;
  int v92;
  void **v93;
  int64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  std::runtime_error_vtbl *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  const void *v102;
  size_t v103;
  size_t v104;
  int v105;
  int v106;
  const void *v107;
  size_t v108;
  size_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  void **v113;
  _QWORD *v114;
  void **v115;
  void **v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int v121;
  std::runtime_error v122;
  __int128 v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  unsigned __int128 __dst;
  int64_t v129;
  char v130;

  if (!v130)
  {
    v121 = 900;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>((uint64_t)&v122, (const std::runtime_error *)&__dst, &v121);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v122);
    *(_OWORD *)(a1 + 16) = v123;
    *(_QWORD *)a1 = off_1E2521330;
    v25 = v125;
    *(_QWORD *)(a1 + 32) = v124;
    *(_QWORD *)(a1 + 40) = v25;
    v26 = a1 + 40;
    v27 = v126;
    *(_QWORD *)(a1 + 48) = v126;
    if (v27)
    {
      *(_QWORD *)(v25 + 16) = v26;
      v124 = &v125;
      v125 = 0;
      v126 = 0;
      v25 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v26;
    }
    *(_OWORD *)(a1 + 56) = v127;
    v127 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, (unsigned int *)v25);
    MEMORY[0x18D7898AC](&v122);
    if (!v130)
      (*(void (**)(unsigned __int128 *))__dst)(&__dst);
    return;
  }
  v12 = (void **)(a2 + 184);
  v13 = *(void ***)(a2 + 184);
  if (v13)
  {
    v14 = (void **)(a2 + 184);
    while (1)
    {
      v15 = *((char *)v13 + 55);
      if (v15 >= 0)
        v16 = v13 + 4;
      else
        v16 = v13[4];
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v13 + 55);
      else
        v17 = (size_t)v13[5];
      if (v17 >= a4)
        v18 = a4;
      else
        v18 = v17;
      v19 = memcmp(a3, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_18;
LABEL_4:
        v13 = (void **)v13[1];
        if (!v13)
          goto LABEL_19;
      }
      else
      {
        if (a4 > v17)
          goto LABEL_4;
LABEL_18:
        v14 = v13;
        v13 = (void **)*v13;
        if (!v13)
        {
LABEL_19:
          if (v14 != v12)
          {
            v20 = *((char *)v14 + 55);
            if (v20 >= 0)
              v21 = v14 + 4;
            else
              v21 = v14[4];
            if (v20 >= 0)
              v22 = *((unsigned __int8 *)v14 + 55);
            else
              v22 = (size_t)v14[5];
            if (v22 >= a4)
              v23 = a4;
            else
              v23 = v22;
            v24 = memcmp(a3, v21, v23);
            if (v24)
            {
              if ((v24 & 0x80000000) == 0)
                goto LABEL_206;
            }
            else if (a4 >= v22)
            {
              goto LABEL_206;
            }
          }
          break;
        }
      }
    }
  }
  if (a4 > 0x7FFFFFFFFFFFFFF7)
LABEL_265:
    std::string::__throw_length_error[abi:fe180100]();
  v118 = a1;
  if (a4 >= 0x17)
  {
    v29 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v29 = a4 | 7;
    v30 = v29 + 1;
    p_dst = (std::runtime_error_vtbl *)operator new(v29 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v129 = v30 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v129) = a4;
    p_dst = (std::runtime_error_vtbl *)&__dst;
    if (!a4)
      goto LABEL_46;
  }
  memmove(p_dst, a3, a4);
LABEL_46:
  *((_BYTE *)&p_dst->~runtime_error + a4) = 0;
  v122.__imp_.__imp_ = 0;
  *(_QWORD *)&v123 = 0;
  v122.__vftable = (std::runtime_error_vtbl *)&v122.__imp_;
  v31 = (void **)*v12;
  v32 = (void **)*v12;
  v33 = (void **)(a2 + 184);
  if (!*v12)
    goto LABEL_103;
  if (v129 >= 0)
    v34 = (std::runtime_error_vtbl *)&__dst;
  else
    v34 = (std::runtime_error_vtbl *)__dst;
  if (v129 >= 0)
    v35 = (const char *)HIBYTE(v129);
  else
    v35 = (const char *)*((_QWORD *)&__dst + 1);
  v14 = (void **)(a2 + 184);
  v36 = (void **)*v12;
  do
  {
    while (1)
    {
      v37 = *((char *)v36 + 55);
      v38 = v37 >= 0 ? v36 + 4 : (void **)v36[4];
      v39 = v37 >= 0 ? (const char *)*((unsigned __int8 *)v36 + 55) : (const char *)v36[5];
      v40 = (size_t)(v35 >= v39 ? v39 : v35);
      v41 = memcmp(v38, v34, v40);
      if (v41)
        break;
      if (v39 >= v35)
        goto LABEL_68;
LABEL_54:
      v36 = (void **)v36[1];
      if (!v36)
        goto LABEL_69;
    }
    if (v41 < 0)
      goto LABEL_54;
LABEL_68:
    v14 = v36;
    v36 = (void **)*v36;
  }
  while (v36);
LABEL_69:
  v33 = (void **)(a2 + 184);
  if (v14 == v12)
    goto LABEL_102;
  v42 = *((char *)v14 + 55);
  v43 = v42 >= 0 ? (char *)(v14 + 4) : (char *)v14[4];
  v44 = v42 >= 0 ? (const char *)*((unsigned __int8 *)v14 + 55) : (const char *)v14[5];
  v45 = (size_t)(v44 >= v35 ? v35 : v44);
  v46 = memcmp(v34, v43, v45);
  if (v46)
  {
    a1 = v118;
    if ((v46 & 0x80000000) == 0)
    {
LABEL_81:
      v47 = (char *)(v14 + 8);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(v14 + 7), (unsigned int *)v14[8]);
      imp = (char *)v122.__imp_.__imp_;
      v14[7] = v122.__vftable;
      v14[8] = imp;
      v49 = v123;
      v14[9] = (void *)v123;
      if (v49)
      {
        *((_QWORD *)imp + 2) = v47;
        v122.__vftable = (std::runtime_error_vtbl *)&v122.__imp_;
        v122.__imp_.__imp_ = 0;
        *(_QWORD *)&v123 = 0;
        imp = 0;
      }
      else
      {
        v14[7] = v47;
      }
      goto LABEL_204;
    }
  }
  else
  {
    a1 = v118;
    if (v35 >= v44)
      goto LABEL_81;
  }
  v33 = (void **)(a2 + 184);
  if (v12 == v14)
    goto LABEL_102;
  v50 = *((char *)v14 + 55);
  if (v50 >= 0)
    v51 = v14 + 4;
  else
    v51 = v14[4];
  if (v50 >= 0)
    v52 = *((unsigned __int8 *)v14 + 55);
  else
    v52 = (size_t)v14[5];
  if (v52 >= (unint64_t)v35)
    v53 = (size_t)v35;
  else
    v53 = v52;
  v54 = memcmp(v34, v51, v53);
  if (v54)
  {
    if ((v54 & 0x80000000) == 0)
      goto LABEL_96;
LABEL_101:
    v33 = v14;
LABEL_102:
    v32 = (void **)*v33;
LABEL_103:
    v56 = v33;
    if (*(void ***)(a2 + 176) != v33)
    {
      if (v32)
      {
        v57 = v32;
        do
        {
          v56 = v57;
          v57 = (void **)v57[1];
        }
        while (v57);
      }
      else
      {
        v58 = v33;
        do
        {
          v56 = (void **)v58[2];
          v59 = *v56 == v58;
          v58 = v56;
        }
        while (v59);
      }
      v60 = *((char *)v56 + 55);
      if (v60 >= 0)
        v61 = v56 + 4;
      else
        v61 = v56[4];
      if (v60 >= 0)
        v62 = *((unsigned __int8 *)v56 + 55);
      else
        v62 = (size_t)v56[5];
      if (v129 >= 0)
        v63 = (std::runtime_error_vtbl *)&__dst;
      else
        v63 = (std::runtime_error_vtbl *)__dst;
      if (v129 >= 0)
        v64 = (const char *)HIBYTE(v129);
      else
        v64 = (const char *)*((_QWORD *)&__dst + 1);
      if ((unint64_t)v64 >= v62)
        v65 = v62;
      else
        v65 = (size_t)v64;
      v66 = memcmp(v61, v63, v65);
      if (v66)
      {
        if ((v66 & 0x80000000) == 0)
        {
LABEL_127:
          if (!v31)
          {
            v14 = (void **)(a2 + 184);
            goto LABEL_198;
          }
          while (1)
          {
            v67 = v31;
            v68 = *((char *)v31 + 55);
            if (v68 >= 0)
              v69 = v31 + 4;
            else
              v69 = v31[4];
            if (v68 >= 0)
              v70 = *((unsigned __int8 *)v31 + 55);
            else
              v70 = (size_t)v31[5];
            if (v70 >= (unint64_t)v64)
              v71 = (size_t)v64;
            else
              v71 = v70;
            v72 = memcmp(v63, v69, v71);
            if (v72)
            {
              if (v72 < 0)
                goto LABEL_129;
            }
            else if ((unint64_t)v64 < v70)
            {
LABEL_129:
              v31 = (void **)*v67;
              v12 = v67;
              if (!*v67)
                goto LABEL_201;
              continue;
            }
            v73 = memcmp(v69, v63, v71);
            if (v73)
            {
              if ((v73 & 0x80000000) == 0)
                goto LABEL_197;
            }
            else if (v70 >= (unint64_t)v64)
            {
LABEL_197:
              v14 = v67;
LABEL_198:
              v74 = v12;
              goto LABEL_199;
            }
            v12 = v67 + 1;
            v31 = (void **)v67[1];
            if (!v31)
              goto LABEL_201;
          }
        }
      }
      else if (v62 >= (unint64_t)v64)
      {
        goto LABEL_127;
      }
    }
    if (v32)
      v14 = v56;
    else
      v14 = v33;
    if (v32)
      v74 = v56 + 1;
    else
      v74 = v33;
    goto LABEL_199;
  }
  if ((unint64_t)v35 < v52)
    goto LABEL_101;
LABEL_96:
  v55 = memcmp(v51, v34, v53);
  if (v55)
  {
    a1 = v118;
    if ((v55 & 0x80000000) == 0)
      goto LABEL_98;
LABEL_157:
    v74 = v14 + 1;
    v76 = (void **)v14[1];
    if (v76)
    {
      do
      {
        v74 = v76;
        v76 = (void **)*v76;
        v14 = v74;
        v77 = v74;
      }
      while (v76);
    }
    else
    {
      v77 = v14;
      do
      {
        v78 = v77;
        v77 = (void **)v77[2];
      }
      while (*v77 != v78);
    }
    if (v77 == v12)
      goto LABEL_199;
    v81 = v77[4];
    v79 = v77 + 4;
    v80 = v81;
    v82 = *((char *)v79 + 23);
    if (v82 >= 0)
      v83 = v79;
    else
      v83 = v80;
    if (v82 >= 0)
      v84 = *((unsigned __int8 *)v79 + 23);
    else
      v84 = v79[1];
    if (v84 >= (unint64_t)v35)
      v85 = (size_t)v35;
    else
      v85 = v84;
    v86 = memcmp(v34, v83, v85);
    if (v86)
    {
      if ((v86 & 0x80000000) == 0)
        goto LABEL_178;
      goto LABEL_199;
    }
    if ((unint64_t)v35 < v84)
    {
LABEL_199:
      v93 = (void **)*v74;
      v12 = v74;
      v67 = v14;
      if (v93)
      {
        imp = 0;
        v14 = v93;
        a1 = v118;
      }
      else
      {
LABEL_201:
        a1 = v118;
        v14 = (void **)operator new(0x50uLL);
        *((_OWORD *)v14 + 2) = __dst;
        v94 = v129;
        v129 = 0;
        __dst = 0uLL;
        v14[9] = 0;
        v14[8] = 0;
        v14[6] = (void *)v94;
        v14[7] = v14 + 8;
        *v14 = 0;
        v14[1] = 0;
        v14[2] = v67;
        *v12 = v14;
        v95 = **(_QWORD **)(a2 + 176);
        v96 = (uint64_t *)v14;
        if (v95)
        {
          *(_QWORD *)(a2 + 176) = v95;
          v96 = (uint64_t *)*v12;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 184), v96);
        ++*(_QWORD *)(a2 + 192);
        imp = (char *)v122.__imp_.__imp_;
      }
      goto LABEL_204;
    }
    while (1)
    {
LABEL_178:
      v67 = v31;
      v87 = *((char *)v31 + 55);
      if (v87 >= 0)
        v88 = v31 + 4;
      else
        v88 = v31[4];
      if (v87 >= 0)
        v89 = *((unsigned __int8 *)v31 + 55);
      else
        v89 = (size_t)v31[5];
      if (v89 >= (unint64_t)v35)
        v90 = (size_t)v35;
      else
        v90 = v89;
      v91 = memcmp(v34, v88, v90);
      if (v91)
      {
        if (v91 < 0)
          goto LABEL_177;
      }
      else if ((unint64_t)v35 < v89)
      {
LABEL_177:
        v31 = (void **)*v67;
        v12 = v67;
        if (!*v67)
          goto LABEL_201;
        continue;
      }
      v92 = memcmp(v88, v34, v90);
      if (v92)
      {
        if ((v92 & 0x80000000) == 0)
          goto LABEL_197;
      }
      else if (v89 >= (unint64_t)v35)
      {
        goto LABEL_197;
      }
      v12 = v67 + 1;
      v31 = (void **)v67[1];
      if (!v31)
        goto LABEL_201;
    }
  }
  v75 = v52 >= (unint64_t)v35;
  a1 = v118;
  if (!v75)
    goto LABEL_157;
LABEL_98:
  imp = 0;
LABEL_204:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v122, (unsigned int *)imp);
  if (SHIBYTE(v129) < 0)
    operator delete((void *)__dst);
LABEL_206:
  v97 = a7;
  if (!*(_BYTE *)(a7 + 32))
  {
    v99 = (uint64_t)v14[8];
    if (!v99)
      goto LABEL_250;
    v100 = (uint64_t)(v14 + 8);
    while (1)
    {
      v101 = *(char *)(v99 + 55);
      if (v101 >= 0)
        v102 = (const void *)(v99 + 32);
      else
        v102 = *(const void **)(v99 + 32);
      if (v101 >= 0)
        v103 = *(unsigned __int8 *)(v99 + 55);
      else
        v103 = *(_QWORD *)(v99 + 40);
      if (v103 >= a6)
        v104 = a6;
      else
        v104 = v103;
      v105 = memcmp(a5, v102, v104);
      if (v105)
      {
        if (v105 < 0)
          goto LABEL_227;
LABEL_213:
        v99 = *(_QWORD *)(v99 + 8);
        if (!v99)
          goto LABEL_228;
      }
      else
      {
        if (a6 > v103)
          goto LABEL_213;
LABEL_227:
        v100 = v99;
        v99 = *(_QWORD *)v99;
        if (!v99)
        {
LABEL_228:
          if ((void **)v100 == v14 + 8)
            goto LABEL_250;
          v106 = *(char *)(v100 + 55);
          if (v106 >= 0)
            v107 = (const void *)(v100 + 32);
          else
            v107 = *(const void **)(v100 + 32);
          if (v106 >= 0)
            v108 = *(unsigned __int8 *)(v100 + 55);
          else
            v108 = *(_QWORD *)(v100 + 40);
          if (v108 >= a6)
            v109 = a6;
          else
            v109 = v108;
          v110 = memcmp(a5, v107, v109);
          if (v110)
          {
            if (v110 < 0)
              goto LABEL_250;
          }
          else if (a6 < v108)
          {
            goto LABEL_250;
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(v14 + 7, v100);
          goto LABEL_250;
        }
      }
    }
  }
  if (a6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_265;
  if (a6 >= 0x17)
  {
    v111 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v111 = a6 | 7;
    v112 = v111 + 1;
    v98 = (std::runtime_error_vtbl *)operator new(v111 + 1);
    *((_QWORD *)&__dst + 1) = a6;
    v129 = v112 | 0x8000000000000000;
    *(_QWORD *)&__dst = v98;
    v97 = a7;
  }
  else
  {
    HIBYTE(v129) = a6;
    v98 = (std::runtime_error_vtbl *)&__dst;
    if (!a6)
      goto LABEL_245;
  }
  memmove(v98, a5, a6);
LABEL_245:
  *((_BYTE *)&v98->~runtime_error + a6) = 0;
  if (*(_BYTE *)(v97 + 32))
  {
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>((_QWORD **)v14 + 7, (const void **)&__dst, v97);
    if (SHIBYTE(v129) < 0)
      operator delete((void *)__dst);
LABEL_250:
    if (!v14[9])
    {
      v113 = (void **)v14[1];
      if (v113)
      {
        v114 = (_QWORD *)a2;
        do
        {
          v115 = v113;
          v113 = (void **)*v113;
        }
        while (v113);
      }
      else
      {
        v116 = v14;
        v114 = (_QWORD *)a2;
        do
        {
          v115 = (void **)v116[2];
          v59 = *v115 == v116;
          v116 = v115;
        }
        while (!v59);
      }
      if ((void **)v114[22] == v14)
        v114[22] = v115;
      v117 = (uint64_t *)v114[23];
      --v114[24];
      std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v117, (uint64_t *)v14);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(v14 + 7), (unsigned int *)v14[8]);
      if (*((char *)v14 + 55) < 0)
        operator delete(v14[4]);
      operator delete(v14);
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>(uint64_t a1, const std::runtime_error *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::runtime_error v12[2];
  unsigned int *v13[4];
  std::__shared_weak_count *v14;
  std::runtime_error v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  AMSCore::Error::Error(v12, a2);
  AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)v12, *a3, (const std::error_category *)&AMSCore::Error::Category::data(void)::instance);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
  *(_OWORD *)(a1 + 16) = v16;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v18;
  *(_QWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v19;
  *(_QWORD *)(a1 + 48) = v19;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v17 = &v18;
    v18 = 0;
    v19 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v20;
  v20 = 0uLL;
  v15.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v5);
  MEMORY[0x18D7898AC](&v15);
  v12[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v13, v13[1]);
  return MEMORY[0x18D7898AC](v12);
}

void sub_18CC2BB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
}

void sub_18CC2BB64()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t AMSCore::`anonymous namespace'::areValidValues(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::runtime_error v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v5 = result;
  if (a3)
  {
    if (a5)
    {
      *(_BYTE *)(result + 72) = 1;
      return result;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[23]>((uint64_t)&v9, 3u, "Key must not be empty.");
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[26]>((uint64_t)&v9, 3u, "Domain must not be empty.");
  }
  std::runtime_error::runtime_error((std::runtime_error *)v5, &v9);
  *(_OWORD *)(v5 + 16) = v10;
  *(_QWORD *)v5 = off_1E2521330;
  v6 = v12;
  *(_QWORD *)(v5 + 32) = v11;
  *(_QWORD *)(v5 + 40) = v6;
  v7 = v5 + 40;
  v8 = v13;
  *(_QWORD *)(v5 + 48) = v13;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    v11 = &v12;
    v12 = 0;
    v13 = 0;
    v6 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 32) = v7;
  }
  *(_OWORD *)(v5 + 56) = v14;
  v14 = 0uLL;
  *(_BYTE *)(v5 + 72) = 0;
  v9.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, (unsigned int *)v6);
  return MEMORY[0x18D7898AC](&v9);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[26]>(uint64_t a1, unsigned int a2, const char *a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string v18;
  std::system_error v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  void *__p[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];
  std::error_code v28;

  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v27[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&v19.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&v19 + (unint64_t)v19.__vftable[-1].~system_error);
  std::ios_base::init(v11, &v19.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v19.__vftable = v6 + 1;
  v27[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v19.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  v26 = 16;
  v13 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)a3, v13);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v19.__imp_, &v18);
  v19.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&v19.__vftable + (unint64_t)v19.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  v19.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v27);
  *(_QWORD *)&v28.__val_ = a2;
  v28.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v19, v28, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v21 = 0;
  v22 = 0;
  v19.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v20 = &v21;
  v23 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
  *(std::error_code *)(a1 + 16) = v19.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v14 = v21;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = a1 + 40;
  v16 = v22;
  *(_QWORD *)(a1 + 48) = v22;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    v14 = 0;
    v20 = &v21;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v15;
  }
  *(_OWORD *)(a1 + 56) = v23;
  v23 = 0uLL;
  v19.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, (unsigned int *)v14);
  return MEMORY[0x18D7898AC](&v19);
}

void sub_18CC2BE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC2BE7C(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[23]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [23]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC2BFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::expected<AMSCore::Any,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_1E253D240[v2])(&v4, a1);
    *(_DWORD *)(a1 + 24) = -1;
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::Logger::log<AMSCore::Error>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 4)
  {
    v7 = result;
    v8 = MEMORY[0x1E0DE4FE0];
    v9 = MEMORY[0x1E0DE4FE0] + 64;
    v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v24[0] = MEMORY[0x1E0DE4FE0] + 64;
    v19 = v11;
    *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v11 - 24)) = v12;
    v13 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
    std::ios_base::init(v13, v20);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    v19 = v8 + 24;
    v24[0] = v9;
    std::streambuf::basic_streambuf();
    v20[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v22 = 0u;
    v23 = 16;
    v14 = *(_QWORD *)(v19 - 24);
    if ((v15 & 1) == 0
    {
    }
    AMSCore::operator<<(&v19, a4);
    v16 = v20[5];
    v17 = (char *)&v20[-1] + *(_QWORD *)(v19 - 24);
    if ((v17[32] & 5) != 0)
    {
      v18 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5) + 32))(&rep, *((_QWORD *)v17 + 5), 0, 1, 16);
      v18 = v29;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v26 = 4;
    v27 = v16;
    v28 = v18;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v7 + 16) + 16))(*(_QWORD *)(v7 + 16), a2, a3, &rep);
    v19 = *v10;
    *(_QWORD *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v10[3];
    v20[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v22) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v24);
  }
  return result;
}

void sub_18CC2C290(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18CC2C2B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 56), *((unsigned int **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void AMSCore::JsonData::`anonymous namespace'::encodeAny(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2 == -1)
    v3 = 0;
  else
    v3 = v2;
  __asm { BR              X11 }
}

_QWORD *sub_18CC2C37C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,__int128 a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *v63;

  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v63, (uint64_t)"null", 4);
  return v63;
}

void sub_18CC2CB70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  __clang_call_terminate(a1);
}

_QWORD *AMSCore::Log::operator<<(_QWORD *a1, char ***a2)
{
  char **v3;
  uint64_t v4;
  unsigned __int8 v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  _QWORD *v15;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  std::string __p;
  uint64_t v26;
  _QWORD v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31[19];
  unint64_t v32;
  char v33;

  v3 = *a2;
  v4 = *(_QWORD *)(*a1 - 24);
  if ((v5 & 1) == 0
  {
  }
  {
    v6 = *v3;
    v7 = strlen(v6);
    v32 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)v6, v7);
    v8 = MEMORY[0x1E0DE4FE0];
    v9 = MEMORY[0x1E0DE4FE0] + 64;
    v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v31[0] = MEMORY[0x1E0DE4FE0] + 64;
    v26 = v11;
    *(_QWORD *)((char *)&v27[-1] + *(_QWORD *)(v11 - 24)) = v12;
    v13 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
    std::ios_base::init(v13, v27);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    v26 = v8 + 24;
    v31[0] = v9;
    std::streambuf::basic_streambuf();
    v14 = MEMORY[0x1E0DE4FB8];
    v27[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)v28 = 0u;
    v29 = 0u;
    v30 = 16;
    v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v26, (uint64_t)"<H:", 3);
    AMSCore::StringUtils::toHexString(&__p, (uint64_t)&v32, 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
    v33 = 62;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v18, (uint64_t)&v33, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::stringbuf::str[abi:fe180100]((uint64_t)v27, &__p);
    v26 = *v10;
    *(_QWORD *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24)) = v10[3];
    v27[0] = v14 + 16;
    if (SBYTE7(v29) < 0)
      operator delete(v28[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v31);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__p;
    else
      v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v20 = __p.__r_.__value_.__l.__size_;
    v21 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v19, v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v22 = *v3;
    v23 = strlen(v22);
    return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v22, v23);
  }
  return v21;
}

void sub_18CC2CE68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  __clang_call_terminate(a1);
}

_QWORD *AMSCore::JsonData::`anonymous namespace'::encodeMap(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  char v17;
  char v18;
  char v19;
  char v20;

  v17 = 123;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v17, 1);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    v7 = 0;
    do
    {
      if (v7)
      {
        v19 = 44;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v19, 1);
      }
      v20 = 34;
      v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v20, 1);
      v9 = *((char *)v5 + 55);
      if (v9 >= 0)
        v10 = (uint64_t)(v5 + 4);
      else
        v10 = v5[4];
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v5 + 55);
      else
        v11 = v5[5];
      v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\":", 2);
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v15 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v15);
      }
      ++v7;
      v5 = v14;
    }
    while (v14 != v4);
  }
  v18 = 125;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v18, 1);
  return a1;
}

_QWORD *AMSCore::JsonData::`anonymous namespace'::encodeValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];
  char v12;

  v4 = *(_QWORD *)(*a1 - 24);
  if ((v5 & 1) == 0
  {
  }
  {
    LOBYTE(v11[0]) = 34;
    v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, 1);
    v11[0] = a2;
    v7 = AMSCore::Log::operator<<(v6, v11);
    v12 = 34;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)&v12, 1);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a2 + 8);
    v11[0] = v9;
    v11[1] = v8;
    AMSCore::JsonData::operator<<(a1, (uint64_t)v11);
  }
  return a1;
}

_QWORD *AMSCore::JsonData::`anonymous namespace'::encodeVector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  char v10;

  v8 = 91;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v8, 1);
  v4 = *a2;
  v5 = a2[1];
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      if (v6)
      {
        v9 = 44;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v9, 1);
      }
      v4 += 32;
      --v6;
    }
    while (v4 != v5);
  }
  v10 = 93;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v10, 1);
  return a1;
}

_QWORD *AMSCore::JsonData::operator<<(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  char v11;
  char v12;
  char v13;
  char v14;

  v11 = 34;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v11, 1);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_BYTE **)a2;
    while (2)
    {
      v6 = *v5;
      switch(*v5)
      {
        case 8:
          v8 = a1;
          v7 = "\\b";
          v9 = 2;
          goto LABEL_5;
        case 9:
          v8 = a1;
          v7 = "\\t";
          v9 = 2;
          goto LABEL_5;
        case 0xA:
          v8 = a1;
          v7 = "\\n";
          v9 = 2;
          goto LABEL_5;
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
          goto LABEL_4;
        case 0xC:
          v8 = a1;
          v7 = "\\f";
          v9 = 2;
          goto LABEL_5;
        case 0xD:
          v8 = a1;
          v7 = "\\r";
          v9 = 2;
          goto LABEL_5;
        case 0x22:
        case 0x2F:
          goto LABEL_3;
        default:
          if (v6 != 92)
            goto LABEL_4;
LABEL_3:
          v13 = 92;
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v13, 1);
          LOBYTE(v6) = *v5;
LABEL_4:
          v14 = v6;
          v7 = &v14;
          v8 = a1;
          v9 = 1;
LABEL_5:
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)v7, v9);
          ++v5;
          if (--v4)
            continue;
          goto LABEL_14;
      }
    }
  }
LABEL_14:
  v12 = 34;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v12, 1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  const void *v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  const void *v18;
  size_t v19;
  int v20;
  uint64_t *result;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t *v24;

  v8 = a1 + 1;
  v7 = a1[1];
  if (!v7)
  {
    v12 = a1 + 1;
    goto LABEL_29;
  }
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v11 = a2[1];
  do
  {
    while (1)
    {
      v12 = (uint64_t **)v7;
      v15 = v7[4];
      v13 = v7 + 4;
      v14 = (_QWORD *)v15;
      v16 = *((char *)v13 + 23);
      v17 = v16 >= 0 ? v13 : v14;
      v18 = v16 >= 0 ? (const void *)*((unsigned __int8 *)v13 + 23) : (const void *)v13[1];
      v19 = (size_t)(v18 >= v11 ? v11 : v18);
      v20 = memcmp(v10, v17, v19);
      if (v20)
        break;
      if (v11 >= v18)
        goto LABEL_22;
LABEL_8:
      v7 = *v12;
      v8 = v12;
      if (!*v12)
        goto LABEL_29;
    }
    if (v20 < 0)
      goto LABEL_8;
LABEL_22:
    result = (uint64_t *)memcmp(v17, v10, v19);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v18 >= v11)
    {
      return result;
    }
    v7 = v12[1];
  }
  while (v7);
  v8 = v12 + 1;
LABEL_29:
  v22 = operator new(0x58uLL);
  v22[2] = *(_OWORD *)a3;
  *((_QWORD *)v22 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)a4;
  *((_QWORD *)v22 + 9) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *((_DWORD *)v22 + 20) = 5;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = v12;
  *v8 = (uint64_t *)v22;
  v23 = (uint64_t *)**a1;
  if (v23)
  {
    *a1 = v23;
    v24 = *v8;
  }
  else
  {
    v24 = (uint64_t *)v22;
  }
  result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v24);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void AMSCore::PercentData::`anonymous namespace'::toURLString(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::runtime_error v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::system_error v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  _BYTE __what_arg[32];
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  std::error_code v40;

  v4 = a3 + 1;
  v5 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 == a3 + 1)
  {
LABEL_23:
    *(_BYTE *)(a1 + 72) = 1;
    return;
  }
  v7 = 0;
  while (1)
  {
    if ((v7 & 1) != 0)
    {
      LOBYTE(v29.__vftable) = 38;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)&v29, 1);
    }
    v8 = (uint64_t)(v5 + 4);
    v9 = *((_DWORD *)v5 + 20);
    if (v9 == 9)
      break;
    if (v9 == 8)
    {
      AMSCore::StringUtils::join<char [42]>((std::string *)__what_arg, "Nested Maps not supported by URL encoding");
      v40.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v40.__val_ = 8;
      std::system_error::system_error(&v29, v40, (const std::string *)__what_arg);
      if ((__what_arg[23] & 0x80000000) != 0)
        operator delete(*(void **)__what_arg);
      v31 = 0;
      v32 = 0;
      v29.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v30 = &v31;
      v33 = 0uLL;
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v29);
      *(std::error_code *)&__what_arg[16] = v29.__ec_;
      v15 = (unsigned int *)v31;
      *(_QWORD *)__what_arg = off_1E2521330;
      v36 = v30;
      v37 = v31;
      v38 = v32;
      if (v32)
      {
        *(_QWORD *)(v31 + 16) = &v37;
        v15 = 0;
        v30 = &v31;
        v31 = 0;
        v32 = 0;
      }
      else
      {
        v36 = &v37;
      }
      v39 = v33;
      v33 = 0uLL;
      v29.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, v15);
      MEMORY[0x18D7898AC](&v29);
      std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)__what_arg);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)&__what_arg[16];
      *(_QWORD *)a1 = off_1E2521330;
      v17 = v37;
      *(_QWORD *)(a1 + 32) = v36;
      *(_QWORD *)(a1 + 40) = v17;
      v18 = a1 + 40;
      v19 = v38;
      *(_QWORD *)(a1 + 48) = v38;
      if (v19)
      {
        *(_QWORD *)(v17 + 16) = v18;
        v17 = 0;
        v36 = &v37;
        v37 = 0;
        v38 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v18;
      }
      *(_OWORD *)(a1 + 56) = v39;
      v39 = 0uLL;
      *(_BYTE *)(a1 + 72) = 0;
      *(_QWORD *)__what_arg = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, (unsigned int *)v17);
      MEMORY[0x18D7898AC](__what_arg);
      return;
    }
    if (*((char *)v5 + 55) < 0)
    {
      v8 = v5[4];
      v10 = v5[5];
    }
    else
    {
      v10 = *((unsigned __int8 *)v5 + 55);
    }
    AMSCore::URL::encode(a2, v8, v10);
    LOBYTE(v29.__vftable) = 61;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)&v29, 1);
    if (!*(_BYTE *)(a1 + 72))
      return;
LABEL_17:
    v12 = (_QWORD *)v5[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (_QWORD *)v5[2];
        v14 = *v13 == (_QWORD)v5;
        v5 = v13;
      }
      while (!v14);
    }
    v7 = 1;
    v5 = v13;
    if (v13 == v4)
      goto LABEL_23;
  }
  if (*((char *)v5 + 55) < 0)
  {
    v8 = v5[4];
    v11 = v5[5];
  }
  else
  {
    v11 = *((unsigned __int8 *)v5 + 55);
  }
  if (v34)
    goto LABEL_17;
  AMSCore::Error::Error((std::runtime_error *)__what_arg, &v29);
  std::runtime_error::runtime_error(&v23, (const std::runtime_error *)__what_arg);
  v24 = *(_OWORD *)&__what_arg[16];
  v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v16 = (unsigned int *)v37;
  v25 = v36;
  v26 = v37;
  v27 = v38;
  if (v38)
  {
    *(_QWORD *)(v37 + 16) = &v26;
    v36 = &v37;
    v37 = 0;
    v38 = 0;
    v16 = 0;
  }
  else
  {
    v25 = &v26;
  }
  v28 = v39;
  v39 = 0uLL;
  *(_QWORD *)__what_arg = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v16);
  MEMORY[0x18D7898AC](__what_arg);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v23);
  *(_OWORD *)(a1 + 16) = v24;
  *(_QWORD *)a1 = off_1E2521330;
  v20 = v26;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 40) = v20;
  v21 = a1 + 40;
  v22 = v27;
  *(_QWORD *)(a1 + 48) = v27;
  if (v22)
  {
    *(_QWORD *)(v20 + 16) = v21;
    v20 = 0;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v21;
  }
  *(_OWORD *)(a1 + 56) = v28;
  v28 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v23.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v20);
  MEMORY[0x18D7898AC](&v23);
  if (!v34)
    ((void (*)(std::system_error *))v29.~system_error)(&v29);
}

void sub_18CC2D87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(_QWORD), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a27)
  {
    (*a18)(&a18);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::PercentData::`anonymous namespace'::fromVector(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::runtime_error v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::runtime_error v22[4];
  char v23;
  std::runtime_error v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  if (a3[1] == *a3)
    goto LABEL_9;
  AMSCore::URL::encode(a2, a4, a5);
  LOBYTE(v22[0].__vftable) = 61;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v22, 1);
  if (a3[1] == *a3)
  {
LABEL_19:
    __break(1u);
    return;
  }
  if (v23)
  {
    if ((unint64_t)(a3[1] - *a3) >= 0x21)
    {
      v10 = 1;
      v11 = 32;
      do
      {
        LOBYTE(v22[0].__vftable) = 38;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v22, 1);
        AMSCore::URL::encode(a2, a4, a5);
        LOBYTE(v22[0].__vftable) = 61;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v22, 1);
        if (v10 >= (a3[1] - *a3) >> 5)
          goto LABEL_19;
        if (!v23)
          goto LABEL_10;
        ++v10;
        v11 += 32;
      }
      while (v10 < (a3[1] - *a3) >> 5);
    }
LABEL_9:
    *(_BYTE *)(a1 + 72) = 1;
    return;
  }
LABEL_10:
  AMSCore::Error::Error(&v24, v22);
  std::runtime_error::runtime_error(&v16, &v24);
  v17 = v25;
  v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v12 = (unsigned int *)v27;
  v18 = v26;
  v19 = v27;
  v20 = v28;
  if (v28)
  {
    *(_QWORD *)(v27 + 16) = &v19;
    v26 = &v27;
    v27 = 0;
    v28 = 0;
    v12 = 0;
  }
  else
  {
    v18 = &v19;
  }
  v21 = v29;
  v29 = 0uLL;
  v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, v12);
  MEMORY[0x18D7898AC](&v24);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(_OWORD *)(a1 + 16) = v17;
  *(_QWORD *)a1 = off_1E2521330;
  v13 = v19;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = v13;
  v14 = a1 + 40;
  v15 = v20;
  *(_QWORD *)(a1 + 48) = v20;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    v13 = 0;
    v18 = &v19;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v14;
  }
  *(_OWORD *)(a1 + 56) = v21;
  v21 = 0uLL;
  *(_BYTE *)(a1 + 72) = 0;
  v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v13);
  MEMORY[0x18D7898AC](&v16);
  if (!v23)
    ((void (*)(std::runtime_error *))v22[0].~runtime_error)(v22);
}

void sub_18CC2DB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(_QWORD), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a27)
    (*a18)(&a18);
  _Unwind_Resume(exception_object);
}

void AMSCore::PercentData::`anonymous namespace'::toURLString(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t imp;
  std::runtime_error v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v4 = *(_DWORD *)(a3 + 24);
  if (v4 == -1)
    v5 = 0;
  else
    v5 = *(_DWORD *)(a3 + 24);
  switch(v5)
  {
    case 0:
      goto LABEL_44;
    case 1:
      if (*(_BYTE *)a3)
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"true", 4);
      else
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"false", 5);
      goto LABEL_44;
    case 2:
      std::ostream::operator<<();
      goto LABEL_44;
    case 3:
      std::ostream::operator<<();
      goto LABEL_44;
    case 4:
      std::ostream::operator<<();
      goto LABEL_44;
    case 5:
      if (v4 == 5)
        v10 = a3;
      else
        v10 = 0;
      if (*(char *)(v10 + 23) < 0)
      {
        a3 = *(_QWORD *)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
      }
      AMSCore::URL::encode(a2, a3, v11);
      goto LABEL_44;
    case 6:
      if (v4 == 6)
        v12 = a3;
      else
        v12 = 0;
      if (*(char *)(v12 + 23) < 0)
      {
        a3 = *(_QWORD *)v12;
        v13 = *(_QWORD *)(v12 + 8);
      }
      else
      {
        v13 = *(unsigned __int8 *)(v12 + 23);
      }
      AMSCore::Base64::encode(a3, v13, &v16);
      goto LABEL_36;
    case 7:
      AMSCore::stringify_time_s((uint64_t)&v16, *(_QWORD *)a3, 0);
LABEL_36:
      if ((SBYTE7(v17) & 0x80u) == 0)
        v14 = &v16;
      else
        v14 = v16.__vftable;
      if ((SBYTE7(v17) & 0x80u) == 0)
        imp = BYTE7(v17);
      else
        imp = (uint64_t)v16.__imp_.__imp_;
      AMSCore::URL::encode(a2, (uint64_t)v14, imp);
      if (SBYTE7(v17) < 0)
        operator delete(v16.__vftable);
LABEL_44:
      *(_BYTE *)(a1 + 72) = 1;
      break;
    case 8:
      if (v4 != 8)
        a3 = 0;
      break;
    case 9:
      if (v4 != 9)
        a3 = 0;
      break;
    default:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[18]>((uint64_t)&v16, 8u, "Unknown Any type.");
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
      *(_OWORD *)(a1 + 16) = v17;
      *(_QWORD *)a1 = off_1E2521330;
      v7 = v19;
      *(_QWORD *)(a1 + 32) = v18;
      *(_QWORD *)(a1 + 40) = v7;
      v8 = a1 + 40;
      v9 = v20;
      *(_QWORD *)(a1 + 48) = v20;
      if (v9)
      {
        *(_QWORD *)(v7 + 16) = v8;
        v18 = &v19;
        v19 = 0;
        v20 = 0;
        v7 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v8;
      }
      *(_OWORD *)(a1 + 56) = v21;
      v21 = 0uLL;
      *(_BYTE *)(a1 + 72) = 0;
      v16.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v7);
      MEMORY[0x18D7898AC](&v16);
      break;
  }
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[18]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [18]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC2DEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [42]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC2E014(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[29]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [29]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC2E144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [29]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC2E2A4(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::PListData::`anonymous namespace'::toXmlString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(a3 + 24);
  if (v3 == -1)
    v4 = 0;
  else
    v4 = v3;
  __asm { BR              X11 }
}

_QWORD *sub_18CC2E324()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE *v2;
  _QWORD *result;

  if (*v2)
    result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v1, (uint64_t)"<true/>", 7);
  else
    result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v1, (uint64_t)"<false/>", 8);
  *(_BYTE *)(v0 + 72) = 1;
  return result;
}

void sub_18CC2F2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void (**__p)(_QWORD),uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (!a51)
    (*__p)(&__p);
  _Unwind_Resume(exception_object);
}

_QWORD *AMSCore::PListData::`anonymous namespace'::xmlEncode(_QWORD *result, _QWORD *a2, uint64_t a3, std::string::size_type a4)
{
  _QWORD *v6;
  const std::locale *v7;
  const std::locale::facet *v8;
  unsigned int *v9;
  std::runtime_error_vtbl *p_p;
  std::string::size_type v11;
  std::string::size_type v12;
  const char *v13;
  uint64_t v14;
  std::ios_base *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  std::runtime_error_vtbl *v28;
  std::runtime_error_vtbl *v29;
  const char *v30;
  uint64_t v31;
  std::runtime_error_vtbl *v32;
  std::runtime_error_vtbl *v33;
  _QWORD *v34;
  std::error_code *v35;
  std::runtime_error __p;
  std::error_code v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  std::runtime_error v42;
  std::error_code ec;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  std::system_error v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  std::string __what_arg;
  std::runtime_error v54;
  std::error_code v55;
  _OWORD v56[5];
  _OWORD v57[9];
  uint64_t v58;
  std::error_code v59;

  v6 = result;
  v58 = *MEMORY[0x1E0C80C00];
  v35 = (std::error_code *)(result + 2);
  v34 = result + 5;
  v33 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v29 = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F60];
  v32 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v28 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v30 = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  while (a4)
  {
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_75;
    v7 = std::locale::classic();
    v8 = std::locale::use_facet(v7, MEMORY[0x1E0DE4BD0]);
    v57[0] = 0u;
    memset(v56, 0, sizeof(v56));
    v54 = (std::runtime_error)0;
    v55 = (std::error_code)0;
    __what_arg.__r_.__value_.__r.__words[0] = 0;
    *((_BYTE *)&v38.__val_ + 7) = 1;
    __p.__vftable = (std::runtime_error_vtbl *)32;
    v48 = 0;
    if (((unsigned int (*)(const std::locale::facet *, std::runtime_error *, uint64_t, std::string::size_type, std::string *, std::runtime_error *, char *, uint64_t *))v8->__vftable[1].~facet_0)(v8, &v54, a3, a3 + a4, &__what_arg, &__p, (char *)&__p.__vftable + 4, &v48) < 2)
    {
      if (*((char *)&v38.__val_ + 7) < 0)
      {
        if (!__p.__imp_.__imp_)
LABEL_75:
          __break(1u);
        p_p = __p.__vftable;
      }
      else
      {
        if (!*((_BYTE *)&v38.__val_ + 7))
          goto LABEL_75;
        p_p = (std::runtime_error_vtbl *)&__p;
      }
      v11 = a4 - (__what_arg.__r_.__value_.__r.__words[0] - a3);
      if (a4 < __what_arg.__r_.__value_.__r.__words[0] - a3)
        std::__throw_out_of_range[abi:fe180100]("string_view::substr");
      LODWORD(v42.__vftable) = p_p->~runtime_error;
      v47 = 1;
      if ((*((_BYTE *)&v38.__val_ + 7) & 0x80) != 0)
      {
LABEL_16:
        operator delete(__p.__vftable);
        if (!v47)
          goto LABEL_17;
        goto LABEL_22;
      }
    }
    else
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[46]>((uint64_t)&v49, 3u, "Failed to decode UTF-8 character from string.");
      std::runtime_error::runtime_error(&v42, &v49);
      ec = v49.__ec_;
      v9 = (unsigned int *)*((_QWORD *)&v50 + 1);
      v42.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v44 = v50;
      v45 = v51;
      if (v51)
      {
        *(_QWORD *)(*((_QWORD *)&v50 + 1) + 16) = (char *)&v44 + 8;
        v9 = 0;
        *(_QWORD *)&v50 = (char *)&v50 + 8;
        *((_QWORD *)&v50 + 1) = 0;
        v51 = 0;
      }
      else
      {
        *(_QWORD *)&v44 = (char *)&v44 + 8;
      }
      v46 = v52;
      v52 = 0uLL;
      v47 = 0;
      v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v9);
      MEMORY[0x18D7898AC](&v49);
      v11 = a4;
      if ((*((_BYTE *)&v38.__val_ + 7) & 0x80) != 0)
        goto LABEL_16;
    }
    if (!v47)
    {
LABEL_17:
      std::runtime_error::runtime_error(&v54, &v42);
      v55 = ec;
      v54.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v56[0] = v44;
      *(_QWORD *)&v56[1] = v45;
      if (v45)
      {
        *(_QWORD *)(*((_QWORD *)&v44 + 1) + 16) = (char *)v56 + 8;
        *(_QWORD *)&v44 = (char *)&v44 + 8;
        *((_QWORD *)&v44 + 1) = 0;
        v45 = 0;
      }
      else
      {
        *(_QWORD *)&v56[0] = (char *)v56 + 8;
      }
      *(_OWORD *)((char *)&v56[1] + 8) = v46;
      v46 = 0uLL;
      BYTE8(v56[2]) = 1;
      std::runtime_error::runtime_error(&v49, &v54);
      v49.__ec_ = v55;
      v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v50 = v56[0];
      v51 = *(_QWORD *)&v56[1];
      if (*(_QWORD *)&v56[1])
      {
        *(_QWORD *)(*((_QWORD *)&v56[0] + 1) + 16) = (char *)&v50 + 8;
        *(_QWORD *)&v56[0] = (char *)v56 + 8;
        *((_QWORD *)&v56[0] + 1) = 0;
        *(_QWORD *)&v56[1] = 0;
      }
      else
      {
        *(_QWORD *)&v50 = (char *)&v50 + 8;
      }
      v52 = *(_OWORD *)((char *)&v56[1] + 8);
      *((_QWORD *)&v56[1] + 1) = 0;
      *(_QWORD *)&v56[2] = 0;
      std::runtime_error::runtime_error(&__p, &v49);
      v38 = v49.__ec_;
      v17 = (unsigned int *)*((_QWORD *)&v50 + 1);
      __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v39 = v50;
      v40 = v51;
      if (v51)
      {
        *(_QWORD *)(*((_QWORD *)&v50 + 1) + 16) = (char *)&v39 + 8;
        v17 = 0;
        *(_QWORD *)&v50 = (char *)&v50 + 8;
        *((_QWORD *)&v50 + 1) = 0;
        v51 = 0;
      }
      else
      {
        *(_QWORD *)&v39 = (char *)&v39 + 8;
      }
      v41 = v52;
      v52 = 0uLL;
      v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v17);
      MEMORY[0x18D7898AC](&v49);
      std::runtime_error::runtime_error((std::runtime_error *)v6, &__p);
      *v35 = v38;
      *v6 = off_1E2521330;
      v18 = *((_QWORD *)&v39 + 1);
      v6[4] = v39;
      v6[5] = v18;
      v19 = v40;
      v6[6] = v40;
      if (v19)
      {
        *(_QWORD *)(v18 + 16) = v34;
        v18 = 0;
        *(_QWORD *)&v39 = (char *)&v39 + 8;
        *((_QWORD *)&v39 + 1) = 0;
        v40 = 0;
      }
      else
      {
        v6[4] = v34;
      }
      *(_OWORD *)(v6 + 7) = v41;
      v41 = 0uLL;
      *((_BYTE *)v6 + 72) = 0;
      __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, (unsigned int *)v18);
      result = (_QWORD *)MEMORY[0x18D7898AC](&__p);
      if (BYTE8(v56[2]))
      {
        v54.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v20 = *(std::__shared_weak_count **)&v56[2];
        if (*(_QWORD *)&v56[2])
        {
          v21 = (unint64_t *)(*(_QWORD *)&v56[2] + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v56, *((unsigned int **)&v56[0] + 1));
        v23 = &v54;
LABEL_68:
        result = (_QWORD *)MEMORY[0x18D7898AC](v23);
      }
      v25 = 0;
      if (v47)
        goto LABEL_3;
      goto LABEL_2;
    }
LABEL_22:
    if ((LODWORD(v42.__vftable) > 0xD || ((1 << SLOBYTE(v42.__vftable)) & 0x2600) == 0)
      && (LODWORD(v42.__vftable) - 0x10000) >= 0x100000
      && (LODWORD(v42.__vftable) - 32) >> 5 >= 0x6BF
      && (LODWORD(v42.__vftable) - 57344) >> 1 >= 0xFFF)
    {
      *(_QWORD *)&v57[0] = v31;
      v54.__vftable = v33;
      *(std::runtime_error_vtbl **)((char *)&v54.__vftable + (unint64_t)v33[-1].~runtime_error) = v32;
      v15 = (std::ios_base *)((char *)&v54 + (unint64_t)v54.__vftable[-1].~runtime_error);
      std::ios_base::init(v15, &v54.__imp_);
      v15[1].__vftable = 0;
      v15[1].__fmtflags_ = -1;
      v54.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4FE0] + 24);
      *(_QWORD *)&v57[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      v54.__imp_.__imp_ = v30;
      memset((char *)&v56[2] + 8, 0, 32);
      DWORD2(v56[4]) = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v54, (uint64_t)"Failed to encode character with value: ", 39);
      std::ostream::operator<<();
      std::stringbuf::str[abi:fe180100]((uint64_t)&v54.__imp_, &__what_arg);
      v54.__vftable = v29;
      *(std::runtime_error_vtbl **)((char *)&v54.__vftable + (unint64_t)v29[-1].~runtime_error) = v28;
      v54.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      if (SHIBYTE(v56[3]) < 0)
        operator delete(*((void **)&v56[2] + 1));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v57);
      *(_QWORD *)&v59.__val_ = 3;
      v59.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      std::system_error::system_error(&v49, v59, &__what_arg);
      if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__what_arg.__r_.__value_.__l.__data_);
      *((_QWORD *)&v50 + 1) = 0;
      v51 = 0;
      v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
      *(_QWORD *)&v50 = (char *)&v50 + 8;
      v52 = 0uLL;
      std::runtime_error::runtime_error(&__p, &v49);
      v38 = v49.__ec_;
      v16 = (unsigned int *)*((_QWORD *)&v50 + 1);
      __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v39 = v50;
      v40 = v51;
      if (v51)
      {
        *(_QWORD *)(*((_QWORD *)&v50 + 1) + 16) = (char *)&v39 + 8;
        v16 = 0;
        *(_QWORD *)&v50 = (char *)&v50 + 8;
        *((_QWORD *)&v50 + 1) = 0;
        v51 = 0;
      }
      else
      {
        *(_QWORD *)&v39 = (char *)&v39 + 8;
      }
      v41 = v52;
      v52 = 0uLL;
      v49.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v16);
      MEMORY[0x18D7898AC](&v49);
      std::runtime_error::runtime_error((std::runtime_error *)v6, &__p);
      *v35 = v38;
      *v6 = off_1E2521330;
      v26 = *((_QWORD *)&v39 + 1);
      v6[4] = v39;
      v6[5] = v26;
      v27 = v40;
      v6[6] = v40;
      if (v27)
      {
        *(_QWORD *)(v26 + 16) = v34;
        v26 = 0;
        *(_QWORD *)&v39 = (char *)&v39 + 8;
        *((_QWORD *)&v39 + 1) = 0;
        v40 = 0;
      }
      else
      {
        v6[4] = v34;
      }
      *(_OWORD *)(v6 + 7) = v41;
      v41 = 0uLL;
      *((_BYTE *)v6 + 72) = 0;
      __p.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, (unsigned int *)v26);
      v23 = &__p;
      goto LABEL_68;
    }
    v12 = a4 - v11;
    v13 = "&lt;";
    v14 = 4;
    switch(LODWORD(v42.__vftable))
    {
      case '"':
        v13 = "&quot;";
        v14 = 6;
        goto LABEL_59;
      case '&':
        v13 = "&amp;";
        v14 = 5;
        goto LABEL_59;
      case '\'':
        v13 = "&apos;";
        v14 = 6;
        goto LABEL_59;
      case '<':
        goto LABEL_59;
      case '>':
        v13 = "&gt;";
        v14 = 4;
LABEL_59:
        result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v13, v14);
        break;
      default:
        if (a4 >= v12)
          v24 = a4 - v11;
        else
          v24 = a4;
        result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, a3, v24);
        break;
    }
    if (a4 < v11)
      std::__throw_out_of_range[abi:fe180100]("string_view::substr");
    a3 += v12;
    v25 = 1;
    a4 = v11;
    if (v47)
      goto LABEL_3;
LABEL_2:
    result = (_QWORD *)((uint64_t (*)(std::runtime_error *))v42.~runtime_error)(&v42);
LABEL_3:
    if ((v25 & 1) == 0)
      return result;
  }
  *((_BYTE *)v6 + 72) = 1;
  return result;
}

void sub_18CC2FB74(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;

  if (a2)
  {
    if (a69 < 0)
    {
      operator delete(__p);
      __clang_call_terminate(a1);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[46]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [46]>(a3, &__what_arg);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC2FD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::runtime_error *std::expected<void,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  std::runtime_error_vtbl *p_imp;
  const char *imp;
  std::runtime_error_vtbl *v6;
  std::runtime_error_vtbl *v7;
  unsigned int *v8;
  std::runtime_error_vtbl *v9;
  std::runtime_error_vtbl *v10;
  const char *v11;
  std::runtime_error_vtbl *v12;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (LOBYTE(this[4].__imp_.__imp_))
  {
    if (!LOBYTE(a2[4].__imp_.__imp_))
    {
      std::runtime_error::runtime_error(this, a2);
      this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
      this[1] = a2[1];
      this->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      this[2].__vftable = a2[2].__vftable;
      p_imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
      imp = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = imp;
      v6 = (std::runtime_error_vtbl *)&this[2].__imp_;
      v7 = a2[3].__vftable;
      this[3].__vftable = v7;
      if (v7)
      {
        *((_QWORD *)imp + 2) = v6;
        a2[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = v6;
      }
      *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      LOBYTE(this[4].__imp_.__imp_) = 0;
    }
  }
  else if (LOBYTE(a2[4].__imp_.__imp_))
  {
    ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    std::runtime_error::operator=(this, a2);
    v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
    v8 = (unsigned int *)this[2].__imp_.__imp_;
    this[1] = a2[1];
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&this[2], v8);
    this[2].__vftable = a2[2].__vftable;
    v10 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    v11 = a2[2].__imp_.__imp_;
    this[2].__imp_.__imp_ = v11;
    v12 = a2[3].__vftable;
    this[3].__vftable = v12;
    if (v12)
    {
      *((_QWORD *)v11 + 2) = v9;
      a2[2].__vftable = v10;
      v10->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v9;
    }
    v14 = *(_OWORD *)&a2[3].__imp_.__imp_;
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    v15 = (std::__shared_weak_count *)this[4].__vftable;
    *(_OWORD *)&this[3].__imp_.__imp_ = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  return this;
}

void AMSCore::SQLiteDatabase::Transaction::~Transaction(AMSCore::SQLiteDatabase::Transaction *this)
{
  AMSCore::SQLiteDatabase::Transaction::~Transaction(this);
  JUMPOUT(0x18D789BDCLL);
}

{
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  sqlite3_mutex *v7;
  unsigned int **v8;
  unsigned int *v9[2];
  _QWORD v10[9];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t *)((char *)this + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  if (!v3)
    goto LABEL_11;
  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  v14 = 0;
  AMSCore::SQLiteStatement::exec((uint64_t)v10, (sqlite3 **)(v3 + 128), &v8, (uint64_t)&v12);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v8, v9[0]);
  if (v11)
    goto LABEL_11;
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v12);
  AMSCore::Logger::log<char [30],AMSCore::Error>(v12, 4, (uint64_t)"data", 4, "Transaction rollback failed: ", (uint64_t)v10);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v11)
  {
LABEL_11:
    if (!*((_BYTE *)this + 24))
      return;
  }
  else
  {
    (*(void (**)(_QWORD *))v10[0])(v10);
    if (!*((_BYTE *)this + 24))
      return;
  }
  v7 = sqlite3_db_mutex(**((sqlite3 ***)this + 2));
  sqlite3_mutex_leave(v7);
}

void AMSCore::SQLiteDatabase::Transaction::commit(AMSCore::SQLiteDatabase::Transaction *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int *v9[2];
  std::runtime_error v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)((char *)this + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(0, v3));
  if (v4)
  {
    v9[0] = 0;
    v9[1] = 0;
    v8 = v9;
    *((_QWORD *)&v11 + 1) = 0;
    AMSCore::SQLiteStatement::exec(a2, (sqlite3 **)(v4 + 184), &v8, (uint64_t)&v10);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v8, v9[0]);
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[58]>((uint64_t)&v10, 2u, "Transaction was already committed or has been moved from.");
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v10);
    *(_OWORD *)(a2 + 16) = v11;
    *(_QWORD *)a2 = off_1E2521330;
    v5 = v13;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v5;
    v6 = a2 + 40;
    v7 = v14;
    *(_QWORD *)(a2 + 48) = v14;
    if (v7)
    {
      *(_QWORD *)(v5 + 16) = v6;
      v12 = &v13;
      v13 = 0;
      v14 = 0;
      v5 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = v6;
    }
    *(_OWORD *)(a2 + 56) = v15;
    v15 = 0uLL;
    *(_BYTE *)(a2 + 72) = 0;
    v10.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v5);
    MEMORY[0x18D7898AC](&v10);
  }
}

void sub_18CC2FFF8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[58]>(uint64_t a1, unsigned int a2, const char *a3)
{
  std::system_error_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::system_error_vtbl *v9;
  std::system_error_vtbl *v10;
  std::ios_base *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string v18;
  std::system_error v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  void *__p[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];
  std::error_code v28;

  v6 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = MEMORY[0x1E0DE4F60];
  v9 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
  v27[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19.__vftable = v9;
  *(std::system_error_vtbl **)((char *)&v19.__vftable + (unint64_t)v9[-1].~system_error) = v10;
  v11 = (std::ios_base *)((char *)&v19 + (unint64_t)v19.__vftable[-1].~system_error);
  std::ios_base::init(v11, &v19.__imp_);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v19.__vftable = v6 + 1;
  v27[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v19.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  v26 = 16;
  v13 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)a3, v13);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v19.__imp_, &v18);
  v19.__vftable = *(std::system_error_vtbl **)v8;
  *(std::system_error_vtbl **)((char *)&v19.__vftable + (unint64_t)v19.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v8 + 24);
  v19.__imp_.__imp_ = (const char *)(v12 + 16);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v27);
  *(_QWORD *)&v28.__val_ = a2;
  v28.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v19, v28, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v21 = 0;
  v22 = 0;
  v19.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v20 = &v21;
  v23 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
  *(std::error_code *)(a1 + 16) = v19.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v14 = v21;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = a1 + 40;
  v16 = v22;
  *(_QWORD *)(a1 + 48) = v22;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    v14 = 0;
    v20 = &v21;
    v21 = 0;
    v22 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v15;
  }
  *(_OWORD *)(a1 + 56) = v23;
  v23 = 0uLL;
  v19.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, (unsigned int *)v14);
  return MEMORY[0x18D7898AC](&v19);
}

void sub_18CC30210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18CC3022C(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void sub_18CC3039C(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2)
  {
    std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2 - 56);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [30],AMSCore::Error>(uint64_t result, int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];
  void *__p[2];
  __int128 v27;
  int v28;
  uint64_t v29[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 8) <= a2)
  {
    v11 = result;
    v12 = MEMORY[0x1E0DE4FE0];
    v13 = MEMORY[0x1E0DE4FE0] + 64;
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v29[0] = MEMORY[0x1E0DE4FE0] + 64;
    v24 = v14;
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v14 - 24)) = v15;
    v16 = (std::ios_base *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24));
    std::ios_base::init(v16, v25);
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    v24 = v12 + 24;
    v29[0] = v13;
    std::streambuf::basic_streambuf();
    v17 = MEMORY[0x1E0DE4FB8];
    v25[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v27 = 0u;
    v28 = 16;
    v18 = *(_QWORD *)(v24 - 24);
    if ((v19 & 1) == 0
    {
    }
    v20 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v24, (uint64_t)a5, v20);
    AMSCore::operator<<(&v24, a6);
    v21 = v25[5];
    v22 = (char *)&v25[-1] + *(_QWORD *)(v24 - 24);
    if ((v22[32] & 5) != 0)
    {
      v23 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(&rep, *((_QWORD *)v22 + 5), 0, 1, 16);
      v23 = v34;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v31 = a2;
    v32 = v21;
    v33 = v23;
    (*(void (**)(_QWORD, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), a3, a4, &rep);
    v24 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v25[-1] + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v25[0] = v17 + 16;
    if (SBYTE7(v27) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v29);
  }
  return result;
}

void sub_18CC30640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AMSCore::SQLiteDatabase::make(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned __int8 v6;
  std::system_error_vtbl *v7;
  uint64_t v8;
  uint64_t v9;
  std::system_error_vtbl *v10;
  std::system_error_vtbl *v11;
  std::ios_base *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  std::__fs::filesystem::path::__string_view v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  const std::error_category **v21;
  char *v22;
  std::system_error_vtbl *v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::system_error_vtbl *v29;
  __int128 *v30;
  const char *(__cdecl **p_what)(const std::runtime_error *__hidden);
  unint64_t v32;
  __int128 v33;
  char v34;
  int v35;
  sqlite3 *v36;
  uint64_t v37;
  uint64_t busy;
  unsigned int *v39;
  unsigned int *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  std::runtime_error_vtbl *v47;
  unsigned int *v48;
  unsigned int *v49;
  unint64_t *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unint64_t *v54;
  AMSCore::_anonymous_namespace_ *v55;
  int v56;
  const char *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unint64_t *v61;
  std::__shared_weak_count *imp;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::runtime_error v85;
  std::runtime_error_vtbl *v86;
  const std::error_category **v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  const std::error_category **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  uint64_t v97;
  const std::error_category **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unsigned int *v102;
  unsigned int *v103;
  uint64_t v104;
  const std::error_category **v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  uint64_t v111;
  const std::error_category **v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::runtime_error_vtbl *v116;
  std::runtime_error *v117;
  const std::error_category **v118;
  std::runtime_error_vtbl *v119;
  __int128 *v120;
  const std::error_category **v121;
  std::runtime_error_vtbl *v122;
  std::runtime_error *v123;
  const std::error_category **v124;
  unsigned int **v125;
  std::runtime_error_vtbl *v126;
  std::runtime_error_vtbl *v127;
  std::runtime_error_vtbl *v128;
  const std::error_category ***v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::runtime_error_vtbl *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::runtime_error_vtbl *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::runtime_error_vtbl *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::runtime_error *cat;
  uint64_t v150;
  std::runtime_error_vtbl *v151;
  unsigned int *v152;
  unsigned int *v153;
  uint64_t v154;
  const std::error_category **v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unsigned int *v159;
  unsigned int *v160;
  uint64_t v161;
  const std::error_category **v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::system_error_vtbl *v166;
  const std::error_category **v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::system_error_vtbl *v172;
  const std::error_category **v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::system_error_vtbl *v178;
  const std::error_category **p_cat;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::system_error_vtbl *v184;
  const std::error_category **v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::runtime_error v193;
  uint64_t v194;
  std::runtime_error v195;
  std::error_code v196;
  unsigned int **v197;
  unsigned int *v198;
  const std::error_category **v199;
  __int128 v200;
  char v201;
  std::runtime_error v202;
  std::error_code v203;
  unsigned int **v204;
  unsigned int *v205;
  const std::error_category **v206;
  __int128 v207;
  std::runtime_error ppDb;
  std::error_code v209;
  unsigned int **v210;
  unsigned int *v211;
  const std::error_category **v212;
  __int128 v213;
  char v214;
  __int128 v215;
  std::runtime_error v216;
  std::error_code v217;
  unsigned int **v218;
  unsigned int *v219;
  const std::error_category **v220;
  __int128 v221;
  char v222;
  __int128 v223;
  _BYTE v224[32];
  unsigned int **v225;
  unsigned int *v226;
  const std::error_category **v227;
  __int128 v228;
  char v229;
  __int128 v230;
  std::runtime_error v231;
  std::error_code v232;
  unsigned int **v233;
  unsigned int *v234;
  const std::error_category **v235;
  __int128 v236;
  char v237;
  __int128 v238;
  std::runtime_error v239;
  std::error_code ec;
  unsigned int **v241;
  unsigned int *v242;
  const std::error_category **v243;
  __int128 v244;
  char v245;
  _BYTE __what_arg[32];
  unsigned int **v247;
  unsigned int *v248;
  const std::error_category **v249;
  __int128 v250;
  char v251;
  std::runtime_error v252;
  std::error_code v253;
  unsigned int **v254;
  unsigned int *v255;
  const std::error_category **v256;
  __int128 v257;
  char v258;
  std::runtime_error v259;
  std::runtime_error_vtbl *v260;
  _QWORD v261[3];
  const std::error_category **v262;
  __int128 v263;
  std::runtime_error_vtbl *v264;
  _QWORD v265[3];
  const std::error_category **v266;
  std::runtime_error v267;
  std::runtime_error_vtbl *v268;
  _QWORD v269[3];
  const std::error_category **v270;
  std::runtime_error v271;
  std::runtime_error_vtbl *v272;
  _QWORD v273[3];
  const std::error_category **v274;
  std::system_error v275;
  unsigned int **v276;
  unsigned int *v277;
  const std::error_category **v278;
  __int128 v279;
  std::runtime_error __p;
  __int128 v281;
  int v282;
  uint64_t v283;
  const std::error_category **v284;
  __int128 v285;
  std::runtime_error_vtbl *v286;
  uint64_t v287;
  const std::error_category **v288;
  std::runtime_error v289;
  std::runtime_error_vtbl *v290;
  uint64_t v291;
  _QWORD v292[7];
  std::error_code v293;
  std::error_code v294;

  v292[4] = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
  }
  if (sqlite3_initialize())
  {
    v7 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
    v8 = MEMORY[0x1E0DE4FE0] + 64;
    v9 = MEMORY[0x1E0DE4F60];
    v10 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
    v11 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
    v283 = MEMORY[0x1E0DE4FE0] + 64;
    v275.__vftable = v10;
    *(std::system_error_vtbl **)((char *)&v275.__vftable + (unint64_t)v10[-1].~system_error) = v11;
    v12 = (std::ios_base *)((char *)&v275 + (unint64_t)v275.__vftable[-1].~system_error);
    std::ios_base::init(v12, &v275.__imp_);
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    v275.__vftable = v7 + 1;
    v283 = v8;
    std::streambuf::basic_streambuf();
    v13 = MEMORY[0x1E0DE4FB8];
    v275.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
    __p = (std::runtime_error)0;
    v281 = 0u;
    v282 = 16;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v275, (uint64_t)"sqlite3_initialize failed. result = ", 36);
    std::ostream::operator<<();
    std::stringbuf::str[abi:fe180100]((uint64_t)&v275.__imp_, (std::string *)__what_arg);
    v275.__vftable = *(std::system_error_vtbl **)v9;
    *(std::system_error_vtbl **)((char *)&v275.__vftable + (unint64_t)v275.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v9 + 24);
    v275.__imp_.__imp_ = (const char *)(v13 + 16);
    if (SBYTE7(v281) < 0)
      operator delete(__p.__vftable);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](&v283);
    v293.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(_QWORD *)&v293.__val_ = 999;
    std::system_error::system_error(&v275, v293, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
      operator delete(*(void **)__what_arg);
    v278 = 0;
    v277 = 0;
    v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v276 = &v277;
    v279 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v275);
    *(std::error_code *)&__what_arg[16] = v275.__ec_;
    v14 = v277;
    *(_QWORD *)__what_arg = off_1E2521330;
    v247 = v276;
    v248 = v277;
    v249 = v278;
    if (v278)
    {
      *((_QWORD *)v277 + 2) = &v248;
      v14 = 0;
      v276 = &v277;
      v277 = 0;
      v278 = 0;
    }
    else
    {
      v247 = &v248;
    }
    v250 = v279;
    v279 = 0uLL;
    v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v14);
    MEMORY[0x18D7898AC](&v275);
    std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)__what_arg);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&__what_arg[16];
    *(_QWORD *)a1 = off_1E2521330;
    v19 = v248;
    *(_QWORD *)(a1 + 32) = v247;
    *(_QWORD *)(a1 + 40) = v19;
    v20 = a1 + 40;
    v21 = v249;
    *(_QWORD *)(a1 + 48) = v249;
    if (v21)
    {
      *((_QWORD *)v19 + 2) = v20;
      v19 = 0;
      v247 = &v248;
      v248 = 0;
      v249 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v20;
    }
    *(_OWORD *)(a1 + 56) = v250;
    v250 = 0uLL;
    *(_BYTE *)(a1 + 240) = 0;
    *(_QWORD *)__what_arg = off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v247, v19);
    MEMORY[0x18D7898AC](__what_arg);
    return;
  }
  v194 = a3;
  v15 = a2[23];
  if ((v15 & 0x80u) == 0)
    v16 = a2[23];
  else
    v16 = *((_QWORD *)a2 + 1);
  if (!v16
    || (v17 = std::__fs::filesystem::path::__root_directory((const std::__fs::filesystem::path *)a2),
        v15 = a2[23],
        v17.__size_))
  {
    memset(v224, 0, 24);
    if ((v15 & 0x80) != 0)
    {
      v18 = *((_QWORD *)a2 + 1);
      if (v18)
      {
        if (v18 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:fe180100]();
        a2 = *(char **)a2;
LABEL_26:
        v22 = &a2[v18];
        if (v18 >= 0x17)
        {
          v26 = (v18 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v26 = v18 | 7;
          v27 = v26 + 1;
          v23 = (std::system_error_vtbl *)operator new(v26 + 1);
          *(_QWORD *)&v275.__ec_.__val_ = v27 | 0x8000000000000000;
          v275.__vftable = v23;
          v275.__imp_.__imp_ = (const char *)v18;
        }
        else
        {
          *((_BYTE *)&v275.__ec_.__val_ + 7) = v18;
          v23 = (std::system_error_vtbl *)&v275;
        }
        if (v18 < 0x20)
        {
          v29 = v23;
        }
        else if ((unint64_t)((char *)v23 - a2) < 0x20)
        {
          v29 = v23;
        }
        else
        {
          v28 = v18 & 0x7FFFFFFFFFFFFFE0;
          v29 = (std::system_error_vtbl *)((char *)v23 + (v18 & 0xFFFFFFFFFFFFFFE0));
          v30 = (__int128 *)(a2 + 16);
          p_what = &v23->what;
          v32 = v18 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v33 = *v30;
            *((_OWORD *)p_what - 1) = *(v30 - 1);
            *(_OWORD *)p_what = v33;
            v30 += 2;
            p_what += 4;
            v32 -= 32;
          }
          while (v32);
          if (v18 == v28)
            goto LABEL_43;
          a2 += v28;
        }
        do
        {
          v34 = *a2++;
          LOBYTE(v29->~system_error) = v34;
          v29 = (std::system_error_vtbl *)((char *)v29 + 1);
        }
        while (a2 != v22);
LABEL_43:
        v24 = 33619974;
        LOBYTE(v29->~system_error) = 0;
        *(std::runtime_error *)v224 = v275.std::runtime_error;
        *(_QWORD *)&v224[16] = *(_QWORD *)&v275.__ec_.__val_;
        ppDb.__vftable = 0;
        if (*((char *)&v275.__ec_.__val_ + 7) >= 0)
          v25 = v224;
        else
          v25 = *(const char **)v224;
LABEL_46:
        v35 = sqlite3_open_v2(v25, (sqlite3 **)&ppDb, v24, 0);
        v36 = (sqlite3 *)ppDb.__vftable;
        v216.__vftable = ppDb.__vftable;
        v37 = operator new();
        *(_QWORD *)v37 = &off_1E2523148;
        *(_QWORD *)(v37 + 8) = 0;
        *(_QWORD *)(v37 + 16) = 0;
        *(_QWORD *)(v37 + 24) = v36;
        *(_QWORD *)(v37 + 32) = AMSCore::SQLiteDatabase::close;
        v216.__imp_.__imp_ = (const char *)v37;
        if (v35)
        {
          AMSCore::SQLiteMutex::makeError((uint64_t)&v231, (sqlite3 **)&v216, v35, (uint64_t)"Failed to set open database.", 28);
          std::runtime_error::runtime_error(&v275, &v231);
          v275.__ec_ = v232;
          v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
          v276 = v233;
          v277 = v234;
          v278 = v235;
          if (v235)
          {
            *((_QWORD *)v234 + 2) = &v277;
            v233 = &v234;
            v234 = 0;
            v235 = 0;
          }
          else
          {
            v276 = &v277;
          }
          v279 = v236;
          v236 = 0uLL;
          std::runtime_error::runtime_error(&v239, &v275);
          ec = v275.__ec_;
          v39 = v277;
          v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v241 = v276;
          v242 = v277;
          v243 = v278;
          if (v278)
          {
            *((_QWORD *)v277 + 2) = &v242;
            v39 = 0;
            v276 = &v277;
            v277 = 0;
            v278 = 0;
          }
          else
          {
            v241 = &v242;
          }
          v244 = v279;
          v279 = 0uLL;
          v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v39);
          MEMORY[0x18D7898AC](&v275);
          std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v239);
          *(std::error_code *)&__what_arg[16] = ec;
          v40 = v242;
          *(_QWORD *)__what_arg = off_1E2521330;
          v247 = v241;
          v248 = v242;
          v249 = v243;
          if (v243)
          {
            *((_QWORD *)v242 + 2) = &v248;
            v40 = 0;
            v241 = &v242;
            v242 = 0;
            v243 = 0;
          }
          else
          {
            v247 = &v248;
          }
          v250 = v244;
          v244 = 0uLL;
          v251 = 0;
          v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v40);
          MEMORY[0x18D7898AC](&v239);
          v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
          if (*((_QWORD *)&v236 + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            goto LABEL_115;
          }
LABEL_117:
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v233, v234);
          MEMORY[0x18D7898AC](&v231);
          imp = (std::__shared_weak_count *)v216.__imp_.__imp_;
          if (v216.__imp_.__imp_)
          {
            v63 = (unint64_t *)(v216.__imp_.__imp_ + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
              std::__shared_weak_count::__release_weak(imp);
            }
          }
          goto LABEL_122;
        }
        busy = sqlite3_busy_timeout(v36, 30000);
        if ((_DWORD)busy)
        {
          AMSCore::SQLiteMutex::makeError((uint64_t)&v231, (sqlite3 **)&v216, busy, (uint64_t)"Failed to set busy timeout.", 27);
          std::runtime_error::runtime_error(&v275, &v231);
          v275.__ec_ = v232;
          v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
          v276 = v233;
          v277 = v234;
          v278 = v235;
          if (v235)
          {
            *((_QWORD *)v234 + 2) = &v277;
            v233 = &v234;
            v234 = 0;
            v235 = 0;
          }
          else
          {
            v276 = &v277;
          }
          v279 = v236;
          v236 = 0uLL;
          std::runtime_error::runtime_error(&v239, &v275);
          ec = v275.__ec_;
          v48 = v277;
          v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v241 = v276;
          v242 = v277;
          v243 = v278;
          if (v278)
          {
            *((_QWORD *)v277 + 2) = &v242;
            v48 = 0;
            v276 = &v277;
            v277 = 0;
            v278 = 0;
          }
          else
          {
            v241 = &v242;
          }
          v244 = v279;
          v279 = 0uLL;
          v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v48);
          MEMORY[0x18D7898AC](&v275);
          std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v239);
          *(std::error_code *)&__what_arg[16] = ec;
          v49 = v242;
          *(_QWORD *)__what_arg = off_1E2521330;
          v247 = v241;
          v248 = v242;
          v249 = v243;
          if (v243)
          {
            *((_QWORD *)v242 + 2) = &v248;
            v49 = 0;
            v241 = &v242;
            v242 = 0;
            v243 = 0;
          }
          else
          {
            v247 = &v248;
          }
          v250 = v244;
          v244 = 0uLL;
          v251 = 0;
          v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v49);
          MEMORY[0x18D7898AC](&v239);
          v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v41 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
          if (!*((_QWORD *)&v236 + 1))
            goto LABEL_117;
          v50 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v43 = __ldaxr(v50);
          while (__stlxr(v43 - 1, v50));
        }
        else
        {
          v44 = sqlite3_db_config(v36, 1010, busy, 1, 0);
          if ((_DWORD)v44)
          {
            AMSCore::SQLiteMutex::makeError((uint64_t)&v231, (sqlite3 **)&v216, v44, (uint64_t)"Failed to enable defensive mode.", 32);
            std::runtime_error::runtime_error(&v275, &v231);
            v275.__ec_ = v232;
            v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
            v276 = v233;
            v277 = v234;
            v278 = v235;
            if (v235)
            {
              *((_QWORD *)v234 + 2) = &v277;
              v233 = &v234;
              v234 = 0;
              v235 = 0;
            }
            else
            {
              v276 = &v277;
            }
            v279 = v236;
            v236 = 0uLL;
            std::runtime_error::runtime_error(&v239, &v275);
            ec = v275.__ec_;
            v52 = v277;
            v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v241 = v276;
            v242 = v277;
            v243 = v278;
            if (v278)
            {
              *((_QWORD *)v277 + 2) = &v242;
              v52 = 0;
              v276 = &v277;
              v277 = 0;
              v278 = 0;
            }
            else
            {
              v241 = &v242;
            }
            v244 = v279;
            v279 = 0uLL;
            v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v52);
            MEMORY[0x18D7898AC](&v275);
            std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v239);
            *(std::error_code *)&__what_arg[16] = ec;
            v53 = v242;
            *(_QWORD *)__what_arg = off_1E2521330;
            v247 = v241;
            v248 = v242;
            v249 = v243;
            if (v243)
            {
              *((_QWORD *)v242 + 2) = &v248;
              v53 = 0;
              v241 = &v242;
              v242 = 0;
              v243 = 0;
            }
            else
            {
              v247 = &v248;
            }
            v250 = v244;
            v244 = 0uLL;
            v251 = 0;
            v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v53);
            MEMORY[0x18D7898AC](&v239);
            v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
            if (!*((_QWORD *)&v236 + 1))
              goto LABEL_117;
            v54 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
            do
              v43 = __ldaxr(v54);
            while (__stlxr(v43 - 1, v54));
          }
          else
          {
            v51 = sqlite3_db_config(v36, 1014, v44, 0, 0);
            if (!(_DWORD)v51)
            {
              v55 = (AMSCore::_anonymous_namespace_ *)sqlite3_db_config(v36, 1013, v51, 0, 0);
              v56 = (int)v55;
              if ((_DWORD)v55)
              {
                v57 = "Failed to disable double-quoted strings in DML.";
                v58 = 47;
              }
              else
              {
                  || (v56 = sqlite3_exec(v36, "PRAGMA secure_delete=ON", 0, 0, 0)) == 0)
                {
                  *(std::runtime_error *)__what_arg = v216;
                  v216.__vftable = 0;
                  v216.__imp_.__imp_ = 0;
                  v251 = 1;
LABEL_122:
                  if ((v224[23] & 0x80000000) == 0)
                    goto LABEL_123;
                  v47 = *(std::runtime_error_vtbl **)v224;
                  goto LABEL_131;
                }
                v57 = "Failed to enable secure delete.";
                v58 = 31;
              }
              AMSCore::SQLiteMutex::makeError((uint64_t)&v239, (sqlite3 **)&v216, v56, (uint64_t)v57, v58);
              AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v275, (uint64_t)&v239);
              std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>((std::runtime_error *)__what_arg, (uint64_t)&v275);
              std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v275);
            }
            AMSCore::SQLiteMutex::makeError((uint64_t)&v231, (sqlite3 **)&v216, v51, (uint64_t)"Failed to disable double-quoted strings in DDL.", 47);
            std::runtime_error::runtime_error(&v275, &v231);
            v275.__ec_ = v232;
            v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
            v276 = v233;
            v277 = v234;
            v278 = v235;
            if (v235)
            {
              *((_QWORD *)v234 + 2) = &v277;
              v233 = &v234;
              v234 = 0;
              v235 = 0;
            }
            else
            {
              v276 = &v277;
            }
            v279 = v236;
            v236 = 0uLL;
            std::runtime_error::runtime_error(&v239, &v275);
            ec = v275.__ec_;
            v59 = v277;
            v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v241 = v276;
            v242 = v277;
            v243 = v278;
            if (v278)
            {
              *((_QWORD *)v277 + 2) = &v242;
              v59 = 0;
              v276 = &v277;
              v277 = 0;
              v278 = 0;
            }
            else
            {
              v241 = &v242;
            }
            v244 = v279;
            v279 = 0uLL;
            v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v59);
            MEMORY[0x18D7898AC](&v275);
            std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v239);
            *(std::error_code *)&__what_arg[16] = ec;
            v60 = v242;
            *(_QWORD *)__what_arg = off_1E2521330;
            v247 = v241;
            v248 = v242;
            v249 = v243;
            if (v243)
            {
              *((_QWORD *)v242 + 2) = &v248;
              v60 = 0;
              v241 = &v242;
              v242 = 0;
              v243 = 0;
            }
            else
            {
              v247 = &v248;
            }
            v250 = v244;
            v244 = 0uLL;
            v251 = 0;
            v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v60);
            MEMORY[0x18D7898AC](&v239);
            v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
            if (!*((_QWORD *)&v236 + 1))
              goto LABEL_117;
            v61 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
            do
              v43 = __ldaxr(v61);
            while (__stlxr(v43 - 1, v61));
          }
        }
LABEL_115:
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        goto LABEL_117;
      }
    }
    else if (v15)
    {
      v18 = v15;
      goto LABEL_26;
    }
    v224[23] = 21;
    qmemcpy(v224, "file:data?mode=memory", 21);
    ppDb.__vftable = 0;
    v24 = 33620166;
    v25 = v224;
    goto LABEL_46;
  }
  if ((v15 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v231, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v231 = *(std::runtime_error *)a2;
    *(_QWORD *)&v232.__val_ = *((_QWORD *)a2 + 2);
  }
  AMSCore::StringUtils::join<char [31],std::string>((std::string *)__what_arg, "Path must be absolute. path = ", (uint64_t)&v231);
  v294.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(_QWORD *)&v294.__val_ = 3;
  std::system_error::system_error(&v275, v294, (const std::string *)__what_arg);
  if ((__what_arg[23] & 0x80000000) != 0)
    operator delete(*(void **)__what_arg);
  v278 = 0;
  v277 = 0;
  v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v276 = &v277;
  v279 = 0uLL;
  std::runtime_error::runtime_error(&v239, &v275);
  ec = v275.__ec_;
  v45 = v277;
  v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v241 = v276;
  v242 = v277;
  v243 = v278;
  if (v278)
  {
    *((_QWORD *)v277 + 2) = &v242;
    v45 = 0;
    v276 = &v277;
    v277 = 0;
    v278 = 0;
  }
  else
  {
    v241 = &v242;
  }
  v244 = v279;
  v279 = 0uLL;
  v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v45);
  MEMORY[0x18D7898AC](&v275);
  std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v239);
  *(std::error_code *)&__what_arg[16] = ec;
  v46 = v242;
  *(_QWORD *)__what_arg = off_1E2521330;
  v247 = v241;
  v248 = v242;
  v249 = v243;
  if (v243)
  {
    *((_QWORD *)v242 + 2) = &v248;
    v46 = 0;
    v241 = &v242;
    v242 = 0;
    v243 = 0;
  }
  else
  {
    v247 = &v248;
  }
  v250 = v244;
  v244 = 0uLL;
  v251 = 0;
  v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v46);
  MEMORY[0x18D7898AC](&v239);
  if ((*((char *)&v232.__val_ + 7) & 0x80000000) == 0)
  {
LABEL_123:
    if (v251)
      goto LABEL_124;
LABEL_132:
    std::runtime_error::runtime_error(&v275, (const std::runtime_error *)__what_arg);
    v275.__ec_ = *(std::error_code *)&__what_arg[16];
    v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v276 = v247;
    v277 = v248;
    v278 = v249;
    if (v249)
    {
      *((_QWORD *)v248 + 2) = &v277;
      v247 = &v248;
      v248 = 0;
      v249 = 0;
    }
    else
    {
      v276 = &v277;
    }
    v279 = v250;
    v250 = 0uLL;
    LOBYTE(__p.__vftable) = 1;
    std::runtime_error::runtime_error(&v239, &v275);
    ec = v275.__ec_;
    v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v241 = v276;
    v242 = v277;
    v243 = v278;
    if (v278)
    {
      *((_QWORD *)v277 + 2) = &v242;
      v276 = &v277;
      v277 = 0;
      v278 = 0;
    }
    else
    {
      v241 = &v242;
    }
    v244 = v279;
    v279 = 0uLL;
    std::runtime_error::runtime_error(&v231, &v239);
    v232 = ec;
    v88 = v242;
    v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v233 = v241;
    v234 = v242;
    v235 = v243;
    if (v243)
    {
      *((_QWORD *)v242 + 2) = &v234;
      v88 = 0;
      v241 = &v242;
      v242 = 0;
      v243 = 0;
    }
    else
    {
      v233 = &v234;
    }
    v236 = v244;
    v244 = 0uLL;
    v239.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v241, v88);
    MEMORY[0x18D7898AC](&v239);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v231);
    *(std::error_code *)(a1 + 16) = v232;
    *(_QWORD *)a1 = off_1E2521330;
    v89 = v234;
    *(_QWORD *)(a1 + 32) = v233;
    *(_QWORD *)(a1 + 40) = v89;
    v90 = a1 + 40;
    v91 = v235;
    *(_QWORD *)(a1 + 48) = v235;
    if (v91)
    {
      *((_QWORD *)v89 + 2) = v90;
      v89 = 0;
      v233 = &v234;
      v234 = 0;
      v235 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v90;
    }
    *(_OWORD *)(a1 + 56) = v236;
    v236 = 0uLL;
    *(_BYTE *)(a1 + 240) = 0;
    v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v233, v89);
    MEMORY[0x18D7898AC](&v231);
    if (LOBYTE(__p.__vftable))
    {
      v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v92 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
      if (*((_QWORD *)&v279 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v277);
      MEMORY[0x18D7898AC](&v275);
    }
    goto LABEL_461;
  }
  v47 = v231.__vftable;
LABEL_131:
  operator delete(v47);
  if (!v251)
    goto LABEL_132;
LABEL_124:
  v238 = *(_OWORD *)__what_arg;
  if (*(_QWORD *)&__what_arg[8])
  {
    v65 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  *((_BYTE *)&v275.__ec_.__val_ + 7) = 15;
  strcpy((char *)&v275, "BEGIN IMMEDIATE");
  AMSCore::SQLiteStatement::make((uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v275);
  if (*((char *)&v275.__ec_.__val_ + 7) < 0)
  {
    operator delete(v275.__vftable);
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
    if (!*((_QWORD *)&v238 + 1))
      goto LABEL_138;
  }
  else
  {
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
    if (!*((_QWORD *)&v238 + 1))
      goto LABEL_138;
  }
  p_shared_owners = (unint64_t *)&v67->__shared_owners_;
  do
    v69 = __ldaxr(p_shared_owners);
  while (__stlxr(v69 - 1, p_shared_owners));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (v245)
      goto LABEL_139;
    goto LABEL_181;
  }
LABEL_138:
  if (v245)
  {
LABEL_139:
    if (!v251)
      goto LABEL_483;
    v230 = *(_OWORD *)__what_arg;
    if (*(_QWORD *)&__what_arg[8])
    {
      v70 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    *((_BYTE *)&v275.__ec_.__val_ + 7) = 5;
    strcpy((char *)&v275, "BEGIN");
    AMSCore::SQLiteStatement::make((uint64_t)&v231, (uint64_t)&v230, (uint64_t)&v275);
    if (*((char *)&v275.__ec_.__val_ + 7) < 0)
      operator delete(v275.__vftable);
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
    if (*((_QWORD *)&v230 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    if (!v237)
    {
      std::runtime_error::runtime_error(&v275, &v231);
      v275.__ec_ = v232;
      v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v276 = v233;
      v277 = v234;
      v278 = v235;
      if (v235)
      {
        *((_QWORD *)v234 + 2) = &v277;
        v233 = &v234;
        v234 = 0;
        v235 = 0;
      }
      else
      {
        v276 = &v277;
      }
      v279 = v236;
      v236 = 0uLL;
      LOBYTE(__p.__vftable) = 1;
      std::runtime_error::runtime_error((std::runtime_error *)v224, &v275);
      *(std::error_code *)&v224[16] = v275.__ec_;
      *(_QWORD *)v224 = off_1E2521330;
      v225 = v276;
      v226 = v277;
      v227 = v278;
      if (v278)
      {
        *((_QWORD *)v277 + 2) = &v226;
        v276 = &v277;
        v277 = 0;
        v278 = 0;
      }
      else
      {
        v225 = &v226;
      }
      v228 = v279;
      v279 = 0uLL;
      std::runtime_error::runtime_error(&v216, (const std::runtime_error *)v224);
      v217 = *(std::error_code *)&v224[16];
      v102 = v226;
      v216.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v218 = v225;
      v219 = v226;
      v220 = v227;
      if (v227)
      {
        *((_QWORD *)v226 + 2) = &v219;
        v102 = 0;
        v225 = &v226;
        v226 = 0;
        v227 = 0;
      }
      else
      {
        v218 = &v219;
      }
      v221 = v228;
      v228 = 0uLL;
      *(_QWORD *)v224 = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v225, v102);
      MEMORY[0x18D7898AC](v224);
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v216);
      *(std::error_code *)(a1 + 16) = v217;
      *(_QWORD *)a1 = off_1E2521330;
      v103 = v219;
      *(_QWORD *)(a1 + 32) = v218;
      *(_QWORD *)(a1 + 40) = v103;
      v104 = a1 + 40;
      v105 = v220;
      *(_QWORD *)(a1 + 48) = v220;
      if (v105)
      {
        *((_QWORD *)v103 + 2) = v104;
        v103 = 0;
        v218 = &v219;
        v219 = 0;
        v220 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v104;
      }
      *(_OWORD *)(a1 + 56) = v221;
      v221 = 0uLL;
      *(_BYTE *)(a1 + 240) = 0;
      v216.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v218, v103);
      MEMORY[0x18D7898AC](&v216);
      if (LOBYTE(__p.__vftable))
      {
        v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v106 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
        if (*((_QWORD *)&v279 + 1))
        {
          v107 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v277);
        MEMORY[0x18D7898AC](&v275);
      }
LABEL_431:
      if (!v237)
      {
        ((void (*)(std::runtime_error *))v231.~runtime_error)(&v231);
        goto LABEL_446;
      }
      v178 = *(std::system_error_vtbl **)&v232.__val_;
      *(_QWORD *)&v232.__val_ = 0;
      if (v178)
      {
        v275.__vftable = v178;
        if (!v235)
          std::__throw_bad_function_call[abi:fe180100]();
        ((void (*)(const std::error_category **, std::system_error *))(*v235)[6].__vftable)(v235, &v275);
      }
      p_cat = v235;
      if (v235 == &v232.__cat_)
      {
        v180 = 4;
        p_cat = &v232.__cat_;
      }
      else
      {
        if (!v235)
        {
LABEL_441:
          v181 = (std::__shared_weak_count *)v231.__imp_.__imp_;
          if (v231.__imp_.__imp_)
          {
            v182 = (unint64_t *)(v231.__imp_.__imp_ + 8);
            do
              v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
          }
          goto LABEL_446;
        }
        v180 = 5;
      }
      ((void (*)(void))(*p_cat)[v180].__vftable)();
      goto LABEL_441;
    }
    if (!v251)
      goto LABEL_483;
    v223 = *(_OWORD *)__what_arg;
    if (*(_QWORD *)&__what_arg[8])
    {
      v75 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    *((_BYTE *)&v275.__ec_.__val_ + 7) = 8;
    strcpy((char *)&v275, "ROLLBACK");
    AMSCore::SQLiteStatement::make((uint64_t)v224, (uint64_t)&v223, (uint64_t)&v275);
    if (*((char *)&v275.__ec_.__val_ + 7) < 0)
      operator delete(v275.__vftable);
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
    if (*((_QWORD *)&v223 + 1))
    {
      v78 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (!v229)
    {
      std::runtime_error::runtime_error(&v275, (const std::runtime_error *)v224);
      v275.__ec_ = *(std::error_code *)&v224[16];
      v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v276 = v225;
      v277 = v226;
      v278 = v227;
      if (v227)
      {
        *((_QWORD *)v226 + 2) = &v277;
        v225 = &v226;
        v226 = 0;
        v227 = 0;
      }
      else
      {
        v276 = &v277;
      }
      v279 = v228;
      v228 = 0uLL;
      LOBYTE(__p.__vftable) = 1;
      std::runtime_error::runtime_error(&v216, &v275);
      v217 = v275.__ec_;
      v216.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v218 = v276;
      v219 = v277;
      v220 = v278;
      if (v278)
      {
        *((_QWORD *)v277 + 2) = &v219;
        v276 = &v277;
        v277 = 0;
        v278 = 0;
      }
      else
      {
        v218 = &v219;
      }
      v221 = v279;
      v279 = 0uLL;
      std::runtime_error::runtime_error(&ppDb, &v216);
      v209 = v217;
      v109 = v219;
      ppDb.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v210 = v218;
      v211 = v219;
      v212 = v220;
      if (v220)
      {
        *((_QWORD *)v219 + 2) = &v211;
        v109 = 0;
        v218 = &v219;
        v219 = 0;
        v220 = 0;
      }
      else
      {
        v210 = &v211;
      }
      v213 = v221;
      v221 = 0uLL;
      v216.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v218, v109);
      MEMORY[0x18D7898AC](&v216);
      std::runtime_error::runtime_error((std::runtime_error *)a1, &ppDb);
      *(std::error_code *)(a1 + 16) = v209;
      *(_QWORD *)a1 = off_1E2521330;
      v110 = v211;
      *(_QWORD *)(a1 + 32) = v210;
      *(_QWORD *)(a1 + 40) = v110;
      v111 = a1 + 40;
      v112 = v212;
      *(_QWORD *)(a1 + 48) = v212;
      if (v112)
      {
        *((_QWORD *)v110 + 2) = v111;
        v110 = 0;
        v210 = &v211;
        v211 = 0;
        v212 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v111;
      }
      *(_OWORD *)(a1 + 56) = v213;
      v213 = 0uLL;
      *(_BYTE *)(a1 + 240) = 0;
      ppDb.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v210, v110);
      MEMORY[0x18D7898AC](&ppDb);
      if (LOBYTE(__p.__vftable))
      {
        v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v113 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
        if (*((_QWORD *)&v279 + 1))
        {
          v114 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v277);
        MEMORY[0x18D7898AC](&v275);
      }
LABEL_416:
      if (!v229)
      {
        (**(void (***)(_BYTE *))v224)(v224);
        goto LABEL_431;
      }
      v172 = *(std::system_error_vtbl **)&v224[16];
      *(_QWORD *)&v224[16] = 0;
      if (v172)
      {
        v275.__vftable = v172;
        if (!v227)
          std::__throw_bad_function_call[abi:fe180100]();
        ((void (*)(const std::error_category **, std::system_error *))(*v227)[6].__vftable)(v227, &v275);
      }
      v173 = v227;
      if (v227 == (const std::error_category **)&v224[24])
      {
        v174 = 4;
        v173 = (const std::error_category **)&v224[24];
      }
      else
      {
        if (!v227)
        {
LABEL_426:
          v175 = *(std::__shared_weak_count **)&v224[8];
          if (*(_QWORD *)&v224[8])
          {
            v176 = (unint64_t *)(*(_QWORD *)&v224[8] + 8);
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
          goto LABEL_431;
        }
        v174 = 5;
      }
      ((void (*)(void))(*v173)[v174].__vftable)();
      goto LABEL_426;
    }
    if (!v251)
      goto LABEL_483;
    v215 = *(_OWORD *)__what_arg;
    if (*(_QWORD *)&__what_arg[8])
    {
      v80 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    *((_BYTE *)&v275.__ec_.__val_ + 7) = 6;
    strcpy((char *)&v275, "COMMIT");
    AMSCore::SQLiteStatement::make((uint64_t)&v216, (uint64_t)&v215, (uint64_t)&v275);
    if (*((char *)&v275.__ec_.__val_ + 7) < 0)
      operator delete(v275.__vftable);
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
    if (*((_QWORD *)&v215 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (!v222)
    {
      std::runtime_error::runtime_error(&v275, &v216);
      v275.__ec_ = v217;
      v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v276 = v218;
      v277 = v219;
      v278 = v220;
      if (v220)
      {
        *((_QWORD *)v219 + 2) = &v277;
        v218 = &v219;
        v219 = 0;
        v220 = 0;
      }
      else
      {
        v276 = &v277;
      }
      v279 = v221;
      v221 = 0uLL;
      LOBYTE(__p.__vftable) = 1;
      std::runtime_error::runtime_error(&ppDb, &v275);
      v209 = v275.__ec_;
      ppDb.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v210 = v276;
      v211 = v277;
      v212 = v278;
      if (v278)
      {
        *((_QWORD *)v277 + 2) = &v211;
        v276 = &v277;
        v277 = 0;
        v278 = 0;
      }
      else
      {
        v210 = &v211;
      }
      v213 = v279;
      v279 = 0uLL;
      std::runtime_error::runtime_error(&v252, &ppDb);
      v253 = v209;
      v152 = v211;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v254 = v210;
      v255 = v211;
      v256 = v212;
      if (v212)
      {
        *((_QWORD *)v211 + 2) = &v255;
        v152 = 0;
        v210 = &v211;
        v211 = 0;
        v212 = 0;
      }
      else
      {
        v254 = &v255;
      }
      v257 = v213;
      v213 = 0uLL;
      ppDb.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v210, v152);
      MEMORY[0x18D7898AC](&ppDb);
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v252);
      *(std::error_code *)(a1 + 16) = v253;
      *(_QWORD *)a1 = off_1E2521330;
      v153 = v255;
      *(_QWORD *)(a1 + 32) = v254;
      *(_QWORD *)(a1 + 40) = v153;
      v154 = a1 + 40;
      v155 = v256;
      *(_QWORD *)(a1 + 48) = v256;
      if (v155)
      {
        *((_QWORD *)v153 + 2) = v154;
        v153 = 0;
        v254 = &v255;
        v255 = 0;
        v256 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v154;
      }
      *(_OWORD *)(a1 + 56) = v257;
      v257 = 0uLL;
      *(_BYTE *)(a1 + 240) = 0;
      v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v254, v153);
      MEMORY[0x18D7898AC](&v252);
      if (LOBYTE(__p.__vftable))
      {
        v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
        v156 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
        if (*((_QWORD *)&v279 + 1))
        {
          v157 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v277);
        MEMORY[0x18D7898AC](&v275);
      }
LABEL_401:
      if (!v222)
      {
        ((void (*)(std::runtime_error *))v216.~runtime_error)(&v216);
        goto LABEL_416;
      }
      v166 = *(std::system_error_vtbl **)&v217.__val_;
      *(_QWORD *)&v217.__val_ = 0;
      if (v166)
      {
        v275.__vftable = v166;
        if (!v220)
          std::__throw_bad_function_call[abi:fe180100]();
        ((void (*)(const std::error_category **, std::system_error *))(*v220)[6].__vftable)(v220, &v275);
      }
      v167 = v220;
      if (v220 == &v217.__cat_)
      {
        v168 = 4;
        v167 = &v217.__cat_;
      }
      else
      {
        if (!v220)
        {
LABEL_411:
          v169 = (std::__shared_weak_count *)v216.__imp_.__imp_;
          if (v216.__imp_.__imp_)
          {
            v170 = (unint64_t *)(v216.__imp_.__imp_ + 8);
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          goto LABEL_416;
        }
        v168 = 5;
      }
      ((void (*)(void))(*v167)[v168].__vftable)();
      goto LABEL_411;
    }
    if (!v251)
      goto LABEL_483;
    v85 = *(std::runtime_error *)__what_arg;
    *(_OWORD *)__what_arg = 0uLL;
    if (!v237)
      goto LABEL_483;
    v271 = v231;
    v86 = *(std::runtime_error_vtbl **)&v232.__val_;
    v231.__imp_.__imp_ = 0;
    *(_QWORD *)&v232.__val_ = 0;
    v231.__vftable = 0;
    v272 = v86;
    v87 = (const std::error_category **)v273;
    v193 = v85;
    if (v235)
    {
      if (v235 == &v232.__cat_)
      {
        v274 = (const std::error_category **)v273;
        ((void (*)(void))(*v235)[3].__vftable)();
        v85 = v193;
      }
      else
      {
        v274 = v235;
        v235 = 0;
      }
    }
    else
    {
      v274 = 0;
    }
    if (!v245)
      goto LABEL_483;
    v267 = v239;
    v116 = *(std::runtime_error_vtbl **)&ec.__val_;
    *(_QWORD *)&ec.__val_ = 0;
    v239.__vftable = 0;
    v239.__imp_.__imp_ = 0;
    v268 = v116;
    v117 = &v267;
    v118 = (const std::error_category **)v269;
    if (v243)
    {
      v117 = &v239;
      if (v243 == &ec.__cat_)
      {
        v270 = (const std::error_category **)v269;
        ((void (*)(void))(*v243)[3].__vftable)();
        v85 = v193;
LABEL_265:
        if (!v229)
          goto LABEL_483;
        v263 = *(_OWORD *)v224;
        v119 = *(std::runtime_error_vtbl **)&v224[16];
        memset(v224, 0, 24);
        v264 = v119;
        v120 = &v263;
        v121 = (const std::error_category **)v265;
        if (v227)
        {
          v120 = (__int128 *)v224;
          if (v227 == (const std::error_category **)&v224[24])
          {
            v266 = (const std::error_category **)v265;
            ((void (*)(void))(*v227)[3].__vftable)();
            v85 = v193;
LABEL_271:
            if (v222)
            {
              v259 = v216;
              v122 = *(std::runtime_error_vtbl **)&v217.__val_;
              v216.__imp_.__imp_ = 0;
              *(_QWORD *)&v217.__val_ = 0;
              v216.__vftable = 0;
              v260 = v122;
              v123 = &v259;
              v124 = (const std::error_category **)v261;
              if (v220)
              {
                v123 = &v216;
                if (v220 == &v217.__cat_)
                {
                  v262 = (const std::error_category **)v261;
                  ((void (*)(void))(*v220)[3].__vftable)();
                  v85 = v193;
LABEL_277:
                  v125 = (unsigned int **)v272;
                  v275.std::runtime_error = v85;
                  v275.__ec_ = (std::error_code)v271;
                  v271 = (std::runtime_error)0;
                  v272 = 0;
                  v276 = v125;
                  if (v274)
                  {
                    if (v274 == v273)
                    {
                      *((_QWORD *)&v279 + 1) = &v277;
                      (*(void (**)(_QWORD *))(v273[0] + 24))(v273);
                    }
                    else
                    {
                      *((_QWORD *)&v279 + 1) = v274;
                      v274 = 0;
                    }
                  }
                  else
                  {
                    *((_QWORD *)&v279 + 1) = 0;
                  }
                  __p = v267;
                  v126 = v268;
                  v268 = 0;
                  v267 = (std::runtime_error)0;
                  *(_QWORD *)&v281 = v126;
                  if (v270)
                  {
                    if (v270 == v269)
                    {
                      v284 = (const std::error_category **)&v281 + 1;
                      (*(void (**)(_QWORD *))(v269[0] + 24))(v269);
                    }
                    else
                    {
                      v284 = v270;
                      v270 = 0;
                    }
                  }
                  else
                  {
                    v284 = 0;
                  }
                  v285 = v263;
                  v127 = v264;
                  v264 = 0;
                  v263 = 0uLL;
                  v286 = v127;
                  if (v266)
                  {
                    if (v266 == v265)
                    {
                      v288 = (const std::error_category **)&v287;
                      (*(void (**)(_QWORD *))(v265[0] + 24))(v265);
                    }
                    else
                    {
                      v288 = v266;
                      v266 = 0;
                    }
                  }
                  else
                  {
                    v288 = 0;
                  }
                  v289 = v259;
                  v128 = v260;
                  v260 = 0;
                  v259 = (std::runtime_error)0;
                  v290 = v128;
                  if (v262)
                  {
                    if (v262 == v261)
                    {
                      v292[0] = &v291;
                      (*(void (**)(_QWORD *))(v261[0] + 24))(v261);
                      v151 = v260;
                      v260 = 0;
                      if (v151)
                      {
                        ppDb.__vftable = v151;
                        if (!v262)
                          std::__throw_bad_function_call[abi:fe180100]();
                        ((void (*)(const std::error_category **, std::runtime_error *))(*v262)[6].__vftable)(v262, &ppDb);
                      }
LABEL_297:
                      if (v262 == v261)
                      {
                        v130 = 4;
                      }
                      else
                      {
                        if (!v262)
                        {
LABEL_302:
                          v131 = (std::__shared_weak_count *)v259.__imp_.__imp_;
                          if (v259.__imp_.__imp_)
                          {
                            v132 = (unint64_t *)(v259.__imp_.__imp_ + 8);
                            do
                              v133 = __ldaxr(v132);
                            while (__stlxr(v133 - 1, v132));
                            if (!v133)
                            {
                              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                              std::__shared_weak_count::__release_weak(v131);
                            }
                          }
                          v134 = v264;
                          v264 = 0;
                          if (v134)
                          {
                            ppDb.__vftable = v134;
                            if (!v266)
                              std::__throw_bad_function_call[abi:fe180100]();
                            ((void (*)(const std::error_category **, std::runtime_error *))(*v266)[6].__vftable)(v266, &ppDb);
                          }
                          if (v266 == v265)
                          {
                            v135 = 4;
                          }
                          else
                          {
                            if (!v266)
                            {
LABEL_315:
                              v136 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
                              if (*((_QWORD *)&v263 + 1))
                              {
                                v137 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
                                do
                                  v138 = __ldaxr(v137);
                                while (__stlxr(v138 - 1, v137));
                                if (!v138)
                                {
                                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                                  std::__shared_weak_count::__release_weak(v136);
                                }
                              }
                              v139 = v268;
                              v268 = 0;
                              if (v139)
                              {
                                ppDb.__vftable = v139;
                                if (!v270)
                                  std::__throw_bad_function_call[abi:fe180100]();
                                ((void (*)(const std::error_category **, std::runtime_error *))(*v270)[6].__vftable)(v270, &ppDb);
                              }
                              if (v270 == v269)
                              {
                                v140 = 4;
                              }
                              else
                              {
                                if (!v270)
                                {
LABEL_328:
                                  v141 = (std::__shared_weak_count *)v267.__imp_.__imp_;
                                  if (v267.__imp_.__imp_)
                                  {
                                    v142 = (unint64_t *)(v267.__imp_.__imp_ + 8);
                                    do
                                      v143 = __ldaxr(v142);
                                    while (__stlxr(v143 - 1, v142));
                                    if (!v143)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                                      std::__shared_weak_count::__release_weak(v141);
                                    }
                                  }
                                  v144 = v272;
                                  v272 = 0;
                                  if (v144)
                                  {
                                    ppDb.__vftable = v144;
                                    if (!v274)
                                      std::__throw_bad_function_call[abi:fe180100]();
                                    ((void (*)(const std::error_category **, std::runtime_error *))(*v274)[6].__vftable)(v274, &ppDb);
                                  }
                                  if (v274 == v273)
                                  {
                                    v145 = 4;
                                  }
                                  else
                                  {
                                    if (!v274)
                                    {
LABEL_341:
                                      v146 = (std::__shared_weak_count *)v271.__imp_.__imp_;
                                      if (v271.__imp_.__imp_)
                                      {
                                        v147 = (unint64_t *)(v271.__imp_.__imp_ + 8);
                                        do
                                          v148 = __ldaxr(v147);
                                        while (__stlxr(v148 - 1, v147));
                                        if (!v148)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                                          std::__shared_weak_count::__release_weak(v146);
                                        }
                                      }
                                      v253.__cat_ = 0;
                                      AMSCore::SQLiteDatabase::exec((uint64_t)&ppDb, (sqlite3 **)&v275, v194, &v252);
                                      cat = (std::runtime_error *)v253.__cat_;
                                      if ((std::runtime_error *)v253.__cat_ == &v252)
                                      {
                                        v150 = 4;
                                        cat = &v252;
                                      }
                                      else
                                      {
                                        if (!v253.__cat_)
                                        {
LABEL_351:
                                          if (v214)
                                          {
                                            LOBYTE(v252.__vftable) = 0;
                                            v258 = 0;
                                            std::optional<AMSCore::Error>::~optional((uint64_t)&v252);
                                            {
                                              AMSCore::SQLiteDatabase::verifyIntegrity((AMSCore::SQLiteDatabase *)&v252, (sqlite3 **)&v275);
                                              AMSCore::firstError<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>(&v195, (uint64_t)&v252);
                                              if (v201)
                                              {
                                                AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v202, (uint64_t)&v195);
                                                std::expected<AMSCore::SQLiteDatabase,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>((std::runtime_error *)a1, (uint64_t)&v202);
                                                std::unexpected<AMSCore::Error>::~unexpected((uint64_t)&v202);
                                              }
                                              std::optional<AMSCore::Error>::~optional((uint64_t)&v195);
                                              if (!v258)
                                                ((void (*)(std::runtime_error *))v252.~runtime_error)(&v252);
                                            }
                                            else
                                            {
                                              AMSCore::Log::warn<char const(&)[70]>();
                                            }
                                            AMSCore::SQLiteDatabase::SQLiteDatabase(a1, (uint64_t)&v275);
                                            *(_BYTE *)(a1 + 240) = 1;
                                          }
                                          else
                                          {
                                            std::runtime_error::runtime_error(&v252, &ppDb);
                                            v253 = v209;
                                            v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                                            v254 = v210;
                                            v255 = v211;
                                            v256 = v212;
                                            if (v212)
                                            {
                                              *((_QWORD *)v211 + 2) = &v255;
                                              v210 = &v211;
                                              v211 = 0;
                                              v212 = 0;
                                            }
                                            else
                                            {
                                              v254 = &v255;
                                            }
                                            v257 = v213;
                                            v213 = 0uLL;
                                            v258 = 1;
                                            std::runtime_error::runtime_error(&v195, &v252);
                                            v196 = v253;
                                            v195.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                                            v197 = v254;
                                            v198 = v255;
                                            v199 = v256;
                                            if (v256)
                                            {
                                              *((_QWORD *)v255 + 2) = &v198;
                                              v254 = &v255;
                                              v255 = 0;
                                              v256 = 0;
                                            }
                                            else
                                            {
                                              v197 = &v198;
                                            }
                                            v200 = v257;
                                            v257 = 0uLL;
                                            std::runtime_error::runtime_error(&v202, &v195);
                                            v203 = v196;
                                            v202.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                                            v159 = v198;
                                            v204 = v197;
                                            v205 = v198;
                                            v206 = v199;
                                            if (v199)
                                            {
                                              *((_QWORD *)v198 + 2) = &v205;
                                              v159 = 0;
                                              v197 = &v198;
                                              v198 = 0;
                                              v199 = 0;
                                            }
                                            else
                                            {
                                              v204 = &v205;
                                            }
                                            v207 = v200;
                                            v200 = 0uLL;
                                            v195.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                                            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v197, v159);
                                            MEMORY[0x18D7898AC](&v195);
                                            std::runtime_error::runtime_error((std::runtime_error *)a1, &v202);
                                            *(std::error_code *)(a1 + 16) = v203;
                                            *(_QWORD *)a1 = off_1E2521330;
                                            v160 = v205;
                                            *(_QWORD *)(a1 + 32) = v204;
                                            *(_QWORD *)(a1 + 40) = v160;
                                            v161 = a1 + 40;
                                            v162 = v206;
                                            *(_QWORD *)(a1 + 48) = v206;
                                            if (v162)
                                            {
                                              *((_QWORD *)v160 + 2) = v161;
                                              v160 = 0;
                                              v204 = &v205;
                                              v205 = 0;
                                              v206 = 0;
                                            }
                                            else
                                            {
                                              *(_QWORD *)(a1 + 32) = v161;
                                            }
                                            *(_OWORD *)(a1 + 56) = v207;
                                            v207 = 0uLL;
                                            *(_BYTE *)(a1 + 240) = 0;
                                            v202.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                                            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v204, v160);
                                            MEMORY[0x18D7898AC](&v202);
                                            if (v258)
                                            {
                                              v252.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                                              v163 = (std::__shared_weak_count *)*((_QWORD *)&v257 + 1);
                                              if (*((_QWORD *)&v257 + 1))
                                              {
                                                v164 = (unint64_t *)(*((_QWORD *)&v257 + 1) + 8);
                                                do
                                                  v165 = __ldaxr(v164);
                                                while (__stlxr(v165 - 1, v164));
                                                if (!v165)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                                                  std::__shared_weak_count::__release_weak(v163);
                                                }
                                              }
                                              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v254, v255);
                                              MEMORY[0x18D7898AC](&v252);
                                            }
                                          }
                                          if (!v214)
                                            ((void (*)(std::runtime_error *))ppDb.~runtime_error)(&ppDb);
                                          AMSCore::SQLiteDatabase::~SQLiteDatabase((AMSCore::SQLiteDatabase *)&v275);
                                          goto LABEL_401;
                                        }
                                        v150 = 5;
                                      }
                                      (*((void (**)(void))&cat->~runtime_error + v150))();
                                      goto LABEL_351;
                                    }
                                    v145 = 5;
                                    v87 = v274;
                                  }
                                  ((void (*)(const std::error_category **))(*v87)[v145].__vftable)(v87);
                                  goto LABEL_341;
                                }
                                v140 = 5;
                                v118 = v270;
                              }
                              ((void (*)(const std::error_category **))(*v118)[v140].__vftable)(v118);
                              goto LABEL_328;
                            }
                            v135 = 5;
                            v121 = v266;
                          }
                          ((void (*)(const std::error_category **))(*v121)[v135].__vftable)(v121);
                          goto LABEL_315;
                        }
                        v130 = 5;
                        v124 = v262;
                      }
                      ((void (*)(const std::error_category **))(*v124)[v130].__vftable)(v124);
                      goto LABEL_302;
                    }
                    v129 = &v262;
                    v292[0] = v262;
                  }
                  else
                  {
                    v129 = (const std::error_category ***)v292;
                  }
                  *v129 = 0;
                  v260 = 0;
                  goto LABEL_297;
                }
                v262 = v220;
              }
              v123[3].__vftable = 0;
              goto LABEL_277;
            }
LABEL_483:
            __break(1u);
            return;
          }
          v266 = v227;
        }
        *((_QWORD *)v120 + 6) = 0;
        goto LABEL_271;
      }
      v270 = v243;
    }
    v117[3].__vftable = 0;
    goto LABEL_265;
  }
LABEL_181:
  std::runtime_error::runtime_error(&v275, &v239);
  v275.__ec_ = ec;
  v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v276 = v241;
  v277 = v242;
  v278 = v243;
  if (v243)
  {
    *((_QWORD *)v242 + 2) = &v277;
    v241 = &v242;
    v242 = 0;
    v243 = 0;
  }
  else
  {
    v276 = &v277;
  }
  v279 = v244;
  v244 = 0uLL;
  LOBYTE(__p.__vftable) = 1;
  std::runtime_error::runtime_error(&v231, &v275);
  v232 = v275.__ec_;
  v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v233 = v276;
  v234 = v277;
  v235 = v278;
  if (v278)
  {
    *((_QWORD *)v277 + 2) = &v234;
    v276 = &v277;
    v277 = 0;
    v278 = 0;
  }
  else
  {
    v233 = &v234;
  }
  v236 = v279;
  v279 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)v224, &v231);
  *(std::error_code *)&v224[16] = v232;
  v95 = v234;
  *(_QWORD *)v224 = off_1E2521330;
  v225 = v233;
  v226 = v234;
  v227 = v235;
  if (v235)
  {
    *((_QWORD *)v234 + 2) = &v226;
    v95 = 0;
    v233 = &v234;
    v234 = 0;
    v235 = 0;
  }
  else
  {
    v225 = &v226;
  }
  v228 = v236;
  v236 = 0uLL;
  v231.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v233, v95);
  MEMORY[0x18D7898AC](&v231);
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)v224);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v224[16];
  *(_QWORD *)a1 = off_1E2521330;
  v96 = v226;
  *(_QWORD *)(a1 + 32) = v225;
  *(_QWORD *)(a1 + 40) = v96;
  v97 = a1 + 40;
  v98 = v227;
  *(_QWORD *)(a1 + 48) = v227;
  if (v98)
  {
    *((_QWORD *)v96 + 2) = v97;
    v96 = 0;
    v225 = &v226;
    v226 = 0;
    v227 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v97;
  }
  *(_OWORD *)(a1 + 56) = v228;
  v228 = 0uLL;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)v224 = off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v225, v96);
  MEMORY[0x18D7898AC](v224);
  if (LOBYTE(__p.__vftable))
  {
    v275.__vftable = (std::system_error_vtbl *)off_1E2521330;
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
    if (*((_QWORD *)&v279 + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v276, v277);
    MEMORY[0x18D7898AC](&v275);
  }
LABEL_446:
  if (v245)
  {
    v184 = *(std::system_error_vtbl **)&ec.__val_;
    *(_QWORD *)&ec.__val_ = 0;
    if (v184)
    {
      v275.__vftable = v184;
      if (!v243)
        std::__throw_bad_function_call[abi:fe180100]();
      ((void (*)(const std::error_category **, std::system_error *))(*v243)[6].__vftable)(v243, &v275);
    }
    v185 = v243;
    if (v243 == &ec.__cat_)
    {
      v186 = 4;
      v185 = &ec.__cat_;
    }
    else
    {
      if (!v243)
      {
LABEL_456:
        v187 = (std::__shared_weak_count *)v239.__imp_.__imp_;
        if (v239.__imp_.__imp_)
        {
          v188 = (unint64_t *)(v239.__imp_.__imp_ + 8);
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v187);
          }
        }
        goto LABEL_461;
      }
      v186 = 5;
    }
    ((void (*)(void))(*v185)[v186].__vftable)();
    goto LABEL_456;
  }
  ((void (*)(std::runtime_error *))v239.~runtime_error)(&v239);
LABEL_461:
  if (v251)
  {
    v190 = *(std::__shared_weak_count **)&__what_arg[8];
    if (*(_QWORD *)&__what_arg[8])
    {
      v191 = (unint64_t *)(*(_QWORD *)&__what_arg[8] + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
  }
  else
  {
    (**(void (***)(_BYTE *))__what_arg)(__what_arg);
  }
}

void sub_18CC331C0(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18CC33238);
  }
  JUMPOUT(0x18CC33230);
}

void sub_18CC331F4(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v2);
    JUMPOUT(0x18CC33238);
  }
  JUMPOUT(0x18CC33230);
}

void sub_18CC33228(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::`anonymous namespace'::getSQLiteCompileOptions(void)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  const char *v5;
  const char *v6;
  int v7;
  unsigned __int8 v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  unsigned __int8 v16;
  size_t v17;
  size_t v18;
  std::string *v19;
  std::string::size_type size;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  size_t v28;
  int i;
  const char *v30;
  const char *v31;
  size_t v32;
  std::string v33;
  uint64_t v34;
  _QWORD v35[8];
  void *v36[2];
  __int128 v37;
  int v38;
  uint64_t v39[19];
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  _QWORD v43[8];
  __int128 __p;
  __int128 v45;
  int v46;
  uint64_t v47[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v39[0] = MEMORY[0x1E0DE4FE0] + 64;
  v34 = v3;
  *(_QWORD *)((char *)&v35[-1] + *(_QWORD *)(v3 - 24)) = v2;
  v4 = (std::ios_base *)((char *)&v35[-1] + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v4, v35);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v34 = v0 + 24;
  v39[0] = v1;
  std::streambuf::basic_streambuf();
  v35[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  v38 = 16;
  v5 = sqlite3_compileoption_get(0);
  v6 = v5;
  if (v5)
  {
    if (!strcmp(v5, "OMIT_INTEGRITY_CHECK"))
    {
      v8 = 0;
      v7 = 1;
    }
    else if (!strcmp(v6, "OMIT_PRAGMA"))
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      if (!strcmp(v6, "THREADSAFE=0"))
LABEL_42:
        std::terminate();
      v7 = 1;
      v8 = 1;
    }
    v28 = strlen(v6);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v34, (uint64_t)v6, v28);
    for (i = 1; ; ++i)
    {
      v30 = sqlite3_compileoption_get(i);
      v31 = v30;
      if (!v30)
        goto LABEL_7;
      if (!strcmp(v30, "OMIT_INTEGRITY_CHECK"))
        goto LABEL_40;
      if (!strcmp(v31, "OMIT_PRAGMA"))
        break;
      if (!strcmp(v31, "THREADSAFE=0"))
        goto LABEL_42;
LABEL_41:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v34, (uint64_t)", ", 2);
      v32 = strlen(v31);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v34, (uint64_t)v31, v32);
    }
    v7 = 0;
LABEL_40:
    v8 = 0;
    goto LABEL_41;
  }
  v7 = 1;
  v8 = 1;
LABEL_7:
  v9 = sqlite3_libversion();
  v10 = sqlite3_sourceid();
  std::stringbuf::str[abi:fe180100]((uint64_t)v35, &v33);
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v40);
  v11 = v40;
  if (*(int *)(v40 + 8) <= 2)
  {
    v12 = MEMORY[0x1E0DE4FE0];
    v13 = MEMORY[0x1E0DE4FE0] + 64;
    v47[0] = MEMORY[0x1E0DE4FE0] + 64;
    v42 = v3;
    *(_QWORD *)((char *)&v43[-1] + *(_QWORD *)(v3 - 24)) = v2;
    v14 = (std::ios_base *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24));
    std::ios_base::init(v14, v43);
    v14[1].__vftable = 0;
    v14[1].__fmtflags_ = -1;
    v42 = v12 + 24;
    v47[0] = v13;
    std::streambuf::basic_streambuf();
    v43[0] = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v45 = 0u;
    v46 = 16;
    v15 = *(_QWORD *)(v42 - 24);
    if ((v16 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v42, (uint64_t)"SQLite version: ", 16);
    v17 = strlen(v9);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v42, (uint64_t)v9, v17);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v42, (uint64_t)" | source: ", 11);
    v18 = strlen(v10);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v42, (uint64_t)v10, v18);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v42, (uint64_t)" | options: ", 12);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v33;
    else
      v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      size = v33.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v42, (uint64_t)v19, size);
    v21 = v43[5];
    v22 = (char *)&v43[-1] + *(_QWORD *)(v42 - 24);
    if ((v22[32] & 5) != 0)
    {
      v23 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(&rep, *((_QWORD *)v22 + 5), 0, 1, 16);
      v23 = v52;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v49 = 2;
    v50 = v21;
    v51 = v23;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), "data", 4, &rep);
    v42 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v43[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v45) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D789B58](v47);
  }
  v24 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v34 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v35[-1] + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v35[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v37) < 0)
    operator delete(v36[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v39);
  return v8 | (v7 << 8);
}

void sub_18CC337B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,char a54)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 std::expected<AMSCore::SQLiteDatabase,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(std::runtime_error *a1, uint64_t a2)
{
  std::runtime_error *v3;
  _QWORD *v4;
  uint64_t v5;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v7;
  __n128 result;

  v3 = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  v3->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F90] + 16);
  v3[1] = *(std::runtime_error *)(a2 + 16);
  v3->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v3[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  v3[2].__imp_.__imp_ = (const char *)v5;
  p_imp = (std::runtime_error_vtbl *)&v3[2].__imp_;
  v7 = *(std::runtime_error_vtbl **)(a2 + 48);
  v3[3].__vftable = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = p_imp;
    *(_QWORD *)(a2 + 32) = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    v3[2].__vftable = p_imp;
  }
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)((char *)v3 + 56) = result;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  LOBYTE(v3[15].__vftable) = 0;
  return result;
}

void AMSCore::SQLiteDatabase::exec(uint64_t a1, sqlite3 **a2, uint64_t a3, void *a4)
{
  sqlite3_mutex *v8;
  const char *v9;
  int v10;
  sqlite3_mutex *v11;

  v8 = sqlite3_db_mutex(*a2);
  sqlite3_mutex_enter(v8);
  if (*(char *)(a3 + 23) >= 0)
    v9 = (const char *)a3;
  else
    v9 = *(const char **)a3;
  v10 = sqlite3_exec(*a2, v9, (int (__cdecl *)(void *, int, char **, char **))AMSCore::SQLiteDatabase::exec(std::string const&,std::function<BOOL ()(std::map<std::string,std::string_view> &&)> const&)::$_0::__invoke, a4, 0);
  AMSCore::SQLiteMutex::makeExpected(a1, a2, v10, (uint64_t)"Failed to exec statement.", 25);
  v11 = sqlite3_db_mutex(*a2);
  sqlite3_mutex_leave(v11);
}

void AMSCore::Log::warn<char const(&)[70]>()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v3);
  AMSCore::Logger::log<char [70]>(v3);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_18CC339FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AMSCore::SQLiteDatabase::verifyIntegrity(AMSCore::SQLiteDatabase *this, sqlite3 **a2)
{
  unsigned __int8 v4;
  sqlite3_mutex *v5;
  int v6;
  sqlite3_mutex *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *imp;
  unint64_t *v13;
  unint64_t v14;
  std::system_error_vtbl *v15;
  uint64_t v16;
  uint64_t v17;
  std::system_error_vtbl *v18;
  std::system_error_vtbl *v19;
  std::ios_base *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  std::system_error *v29;
  _BYTE __p[32];
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[9];
  char v36;
  char v37;
  std::system_error v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  _QWORD v46[20];
  std::error_code v47;

  v46[19] = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
  }
  {
    v37 = 1;
    strcpy(__p, "PRAGMA integrity_check");
    __p[23] = 22;
    v38.__vftable = (std::system_error_vtbl *)&off_1E25218C0;
    v38.__imp_.__imp_ = &v37;
    v38.__ec_.__cat_ = (const std::error_category *)&v38;
    v5 = sqlite3_db_mutex(*a2);
    sqlite3_mutex_enter(v5);
    v6 = sqlite3_exec(*a2, __p, (int (__cdecl *)(void *, int, char **, char **))AMSCore::SQLiteDatabase::exec(std::string const&,std::function<BOOL ()(std::map<std::string,std::string_view> &&)> const&)::$_0::__invoke, &v38, 0);
    AMSCore::SQLiteMutex::makeExpected((uint64_t)v35, a2, v6, (uint64_t)"Failed to exec statement.", 25);
    v7 = sqlite3_db_mutex(*a2);
    sqlite3_mutex_leave(v7);
    v10 = &v38.__ec_.__cat_->__vftable;
    if ((std::system_error *)v38.__ec_.__cat_ == &v38)
    {
      v11 = 4;
      v10 = &v38;
    }
    else
    {
      if (!v38.__ec_.__cat_)
        goto LABEL_14;
      v11 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v10 + 8 * v11))(v10, v8, v9);
LABEL_14:
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (v36)
    {
      if (v37)
      {
        *((_BYTE *)this + 72) = 1;
        if (v36)
          return;
LABEL_36:
        (*(void (**)(_QWORD *))v35[0])(v35);
        return;
      }
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>((uint64_t)&v38, 2u, "Integrity checks failed.");
      std::runtime_error::runtime_error((std::runtime_error *)this, &v38);
      *((_OWORD *)this + 1) = v38.__ec_;
      *(_QWORD *)this = off_1E2521330;
      v23 = v40;
      *((_QWORD *)this + 4) = v39;
      *((_QWORD *)this + 5) = v23;
      v24 = (char *)this + 40;
      v25 = v41;
      *((_QWORD *)this + 6) = v41;
      if (v25)
      {
        *(_QWORD *)(v23 + 16) = v24;
        v39 = &v40;
        v40 = 0;
        v41 = 0;
        v23 = 0;
      }
      else
      {
        *((_QWORD *)this + 4) = v24;
      }
      *(_OWORD *)((char *)this + 56) = v42;
      v42 = 0uLL;
      *((_BYTE *)this + 72) = 0;
      v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, (unsigned int *)v23);
      v29 = &v38;
    }
    else
    {
      v15 = (std::system_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v16 = MEMORY[0x1E0DE4FE0] + 64;
      v17 = MEMORY[0x1E0DE4F60];
      v18 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v19 = *(std::system_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v46[0] = MEMORY[0x1E0DE4FE0] + 64;
      v38.__vftable = v18;
      *(std::system_error_vtbl **)((char *)&v38.__vftable + (unint64_t)v18[-1].~system_error) = v19;
      v20 = (std::ios_base *)((char *)&v38 + (unint64_t)v38.__vftable[-1].~system_error);
      std::ios_base::init(v20, &v38.__imp_);
      v20[1].__vftable = 0;
      v20[1].__fmtflags_ = -1;
      v38.__vftable = v15 + 1;
      v46[0] = v16;
      std::streambuf::basic_streambuf();
      v21 = MEMORY[0x1E0DE4FB8];
      v38.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v43 = 0u;
      v44 = 0u;
      v45 = 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Integrity checks failed to execute: ", 36);
      AMSCore::operator<<(&v38, (uint64_t)v35);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v38.__imp_, (std::string *)__p);
      v38.__vftable = *(std::system_error_vtbl **)v17;
      *(std::system_error_vtbl **)((char *)&v38.__vftable + (unint64_t)v38.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(v17 + 24);
      v38.__imp_.__imp_ = (const char *)(v21 + 16);
      if (SBYTE7(v44) < 0)
        operator delete((void *)v43);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v46);
      v47.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(_QWORD *)&v47.__val_ = 2;
      std::system_error::system_error(&v38, v47, (const std::string *)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v40 = 0;
      v41 = 0;
      v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
      v39 = &v40;
      v42 = 0uLL;
      std::runtime_error::runtime_error((std::runtime_error *)__p, &v38);
      *(std::error_code *)&__p[16] = v38.__ec_;
      *(_QWORD *)__p = off_1E2521330;
      v22 = (unsigned int *)v40;
      v31 = v39;
      v32 = v40;
      v33 = v41;
      if (v41)
      {
        *(_QWORD *)(v40 + 16) = &v32;
        v22 = 0;
        v39 = &v40;
        v40 = 0;
        v41 = 0;
      }
      else
      {
        v31 = &v32;
      }
      v34 = v42;
      v42 = 0uLL;
      v38.__vftable = (std::system_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v22);
      MEMORY[0x18D7898AC](&v38);
      std::runtime_error::runtime_error((std::runtime_error *)this, (const std::runtime_error *)__p);
      *((_OWORD *)this + 1) = *(_OWORD *)&__p[16];
      *(_QWORD *)this = off_1E2521330;
      v26 = v32;
      *((_QWORD *)this + 4) = v31;
      *((_QWORD *)this + 5) = v26;
      v27 = (char *)this + 40;
      v28 = v33;
      *((_QWORD *)this + 6) = v33;
      if (v28)
      {
        *(_QWORD *)(v26 + 16) = v27;
        v26 = 0;
        v31 = &v32;
        v32 = 0;
        v33 = 0;
      }
      else
      {
        *((_QWORD *)this + 4) = v27;
      }
      *(_OWORD *)((char *)this + 56) = v34;
      v34 = 0uLL;
      *((_BYTE *)this + 72) = 0;
      *(_QWORD *)__p = off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, (unsigned int *)v26);
      v29 = (std::system_error *)__p;
    }
    MEMORY[0x18D7898AC](v29);
    if (v36)
      return;
    goto LABEL_36;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v38);
  AMSCore::Logger::log<char [70]>((uint64_t)v38.__vftable);
  imp = (std::__shared_weak_count *)v38.__imp_.__imp_;
  if (v38.__imp_.__imp_)
  {
    v13 = (unint64_t *)(v38.__imp_.__imp_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  *((_BYTE *)this + 72) = 1;
}

void sub_18CC33F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a2)
  {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [70]>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)(result + 8) <= 3)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4FE0];
    v3 = MEMORY[0x1E0DE4FE0] + 64;
    v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v19[0] = MEMORY[0x1E0DE4FE0] + 64;
    v14 = v5;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
    std::ios_base::init(v7, v15);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v14 = v2 + 24;
    v19[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x1E0DE4FB8];
    v15[0] = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    v18 = 16;
    v9 = *(_QWORD *)(v14 - 24);
    if ((v10 & 1) == 0
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Skipping integrity check because SQLite was compiled without support.", 69);
    v11 = v15[5];
    v12 = (char *)&v15[-1] + *(_QWORD *)(v14 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v24;
    }
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v21 = 3;
    v22 = v11;
    v23 = v13;
    (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), "data", 4, &rep);
    v14 = *v4;
    *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v4[3];
    v15[0] = v8 + 16;
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x18D789B58](v19);
  }
  return result;
}

void sub_18CC341EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL AMSCore::SQLiteDatabase::exec(std::string const&,std::function<BOOL ()(std::map<std::string,std::string_view> &&)> const&)::$_0::__invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  const char *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  char v20;
  int v21;
  const void *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  int v31;
  int v32;
  char v33;
  uint64_t v35;
  void *__p;
  uint64_t v37;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  char v45;

  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    return 0;
  v41 = 0;
  v42 = 0;
  v6 = &v41;
  v40 = &v41;
  if (!a2)
    goto LABEL_48;
  v35 = a1;
  v7 = 0;
  v37 = a2;
  while (2)
  {
    v8 = (uint64_t *)operator new(0x48uLL);
    v43 = v8;
    v44 = v6;
    v9 = v8 + 4;
    v45 = 0;
    v10 = *(const char **)(a4 + 8 * v7);
    v11 = strlen(v10);
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:fe180100]();
    v12 = v11;
    if (v11 >= 0x17)
    {
      v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v13 = v11 | 7;
      v14 = v13 + 1;
      v9 = operator new(v13 + 1);
      v8[5] = v12;
      v8[6] = v14 | 0x8000000000000000;
      v8[4] = (uint64_t)v9;
    }
    else
    {
      *((_BYTE *)v8 + 55) = v11;
      if (!v11)
        goto LABEL_14;
    }
    memmove(v9, v10, v12);
LABEL_14:
    *((_BYTE *)v9 + v12) = 0;
    v15 = *(const char **)(a3 + 8 * v7);
    v8[7] = (uint64_t)v15;
    v8[8] = strlen(v15);
    v16 = v43;
    v17 = v41;
    v18 = v6;
    v19 = v6;
    if (!v41)
    {
LABEL_41:
      *v16 = 0;
      v16[1] = 0;
      v16[2] = (uint64_t)v6;
      *v18 = v16;
      if (*v40)
      {
        v40 = (uint64_t **)*v40;
        v16 = *v18;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v41, v16);
      ++v42;
      v6 = v19;
      goto LABEL_5;
    }
    v20 = *((_BYTE *)v43 + 55);
    v21 = v20;
    __p = (void *)v43[4];
    if (v20 < 0)
      v22 = (const void *)v43[4];
    else
      v22 = v43 + 4;
    if (v20 < 0)
      v23 = v43[5];
    else
      v23 = *((unsigned __int8 *)v43 + 55);
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v17;
        v26 = v17[4];
        v24 = v17 + 4;
        v25 = (uint64_t *)v26;
        v27 = *((char *)v24 + 23);
        v28 = v27 >= 0 ? v24 : v25;
        v29 = v27 >= 0 ? *((unsigned __int8 *)v24 + 23) : v24[1];
        v30 = v29 >= v23 ? v23 : v29;
        v31 = memcmp(v22, v28, v30);
        if (v31)
          break;
        if (v23 >= v29)
          goto LABEL_35;
LABEL_21:
        v17 = *v6;
        v18 = v6;
        if (!*v6)
          goto LABEL_41;
      }
      if (v31 < 0)
        goto LABEL_21;
LABEL_35:
      v32 = memcmp(v28, v22, v30);
      if (!v32)
        break;
      if ((v32 & 0x80000000) == 0)
        goto LABEL_43;
LABEL_39:
      v17 = v6[1];
      if (!v17)
      {
        v18 = v6 + 1;
        goto LABEL_41;
      }
    }
    if (v29 < v23)
      goto LABEL_39;
LABEL_43:
    v6 = v19;
    if (v16)
    {
      if (v21 < 0)
        operator delete(__p);
      operator delete(v16);
    }
LABEL_5:
    if (++v7 != v37)
      continue;
    break;
  }
  v5 = *(_QWORD *)(v35 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:fe180100]();
LABEL_48:
  v33 = (*(uint64_t (**)(uint64_t, uint64_t ***))(*(_QWORD *)v5 + 48))(v5, &v40);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v41);
  return (v33 & 1) == 0;
}

void sub_18CC344D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(a16);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::system_error v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::string __what_arg;
  std::error_code v15;

  v4 = a2;
  AMSCore::StringUtils::join<char [25]>(&__what_arg, a3);
  *(_QWORD *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  v11 = 0;
  v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  v10 = &v11;
  v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(_QWORD *)a1 = off_1E2521330;
  v5 = v11;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a1 + 40;
  v7 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    v5 = 0;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x18D7898AC](&v9);
}

void sub_18CC34608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [25]>(std::string *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  _QWORD v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v7;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v9, v14);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v13 = v4 + 24;
  v18[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  v11 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, (uint64_t)a2, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  v13 = *v6;
  *(_QWORD *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v6[3];
  v14[0] = v10 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v18);
}

void sub_18CC34768(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string_view>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string_view>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 55) < 0)
      operator delete(*(void **)(v2 + 32));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::~__func()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E25218C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E25218C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  _QWORD v29[8];
  __int128 __p;
  __int128 v31;
  int v32;
  uint64_t v33[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = a1;
    v6 = *MEMORY[0x1E0DE4F60];
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v25 = MEMORY[0x1E0DE4FE0] + 64;
    v23 = MEMORY[0x1E0DE4FB8] + 16;
    v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v21 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    do
    {
      if (v3[8] != 2 || *(_WORD *)v3[7] != 27503)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v26);
        v7 = v26;
        if (*(int *)(v26 + 8) <= 4)
        {
          v33[0] = v25;
          v28 = v5;
          *(_QWORD *)((char *)&v29[-1] + *(_QWORD *)(v5 - 24)) = v24;
          v8 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
          std::ios_base::init(v8, v29);
          v8[1].__vftable = 0;
          v8[1].__fmtflags_ = -1;
          v28 = MEMORY[0x1E0DE4FE0] + 24;
          v33[0] = MEMORY[0x1E0DE4FE0] + 64;
          std::streambuf::basic_streambuf();
          v29[0] = v23;
          __p = 0u;
          v31 = 0u;
          v32 = 16;
          v9 = *(_QWORD *)(v28 - 24);
          if ((v10 & 1) == 0
          {
          }
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Integrity check failed. message = ", 34);
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v28, v3[7], v3[8]);
          v11 = v29[5];
          v12 = (char *)&v29[-1] + *(_QWORD *)(v28 - 24);
          if ((v12[32] & 5) != 0)
          {
            v13 = -1;
          }
          else
          {
            (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(&rep, *((_QWORD *)v12 + 5), 0, 1, 16);
            v13 = v38;
          }
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v35 = 4;
          v36 = v11;
          v37 = v13;
          (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v7 + 16) + 16))(*(_QWORD *)(v7 + 16), "data", 4, &rep);
          v28 = v6;
          *(_QWORD *)((char *)&v29[-1] + *(_QWORD *)(v6 - 24)) = v21;
          v29[0] = MEMORY[0x1E0DE4FB8] + 16;
          if (SBYTE7(v31) < 0)
            operator delete((void *)__p);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D789B58](v33);
          v4 = a1;
        }
        v14 = v27;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        **(_BYTE **)(v4 + 8) = 0;
      }
      v17 = (_QWORD *)v3[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v3[2];
          v19 = *v18 == (_QWORD)v3;
          v3 = v18;
        }
        while (!v19);
      }
      v3 = v18;
    }
    while (v18 != v2);
  }
  return 1;
}

void sub_18CC34BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14SQLiteDatabase15verifyIntegrityEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14SQLiteDatabase15verifyIntegrityEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14SQLiteDatabase15verifyIntegrityEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14SQLiteDatabase15verifyIntegrityEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::target_type()
{
}

uint64_t AMSCore::SQLiteDatabase::close(AMSCore::SQLiteDatabase *this, sqlite3 *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::ios_base *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _QWORD v40[5];
  uint64_t v41;
  void *__p[2];
  __int128 v43;
  int v44;
  _QWORD v45[19];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  sqlite3_busy_timeout(this, 0);
  if ((v3 & 1) == 0
  {
  }
    && sqlite3_exec(this, "PRAGMA optimize", 0, 0, 0))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v37);
    v4 = v37;
    if (*(int *)(v37 + 8) <= 3)
    {
      v5 = MEMORY[0x1E0DE4FE0];
      v6 = MEMORY[0x1E0DE4FE0] + 64;
      v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v45[0] = MEMORY[0x1E0DE4FE0] + 64;
      v39 = v8;
      *(_QWORD *)((char *)&v40[-1] + *(_QWORD *)(v8 - 24)) = v9;
      v10 = (std::ios_base *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24));
      std::ios_base::init(v10, v40);
      v10[1].__vftable = 0;
      v10[1].__fmtflags_ = -1;
      v39 = v5 + 24;
      v45[0] = v6;
      std::streambuf::basic_streambuf();
      v11 = MEMORY[0x1E0DE4FB8];
      v40[0] = MEMORY[0x1E0DE4FB8] + 16;
      *(_OWORD *)__p = 0u;
      v43 = 0u;
      v44 = 16;
      v12 = *(_QWORD *)(v39 - 24);
      if ((v13 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Unable to optimize the database right now. Will try again next time. result = ", 78);
      std::ostream::operator<<();
      v14 = v41;
      v15 = (char *)&v40[-1] + *(_QWORD *)(v39 - 24);
      if ((v15[32] & 5) != 0)
      {
        v16 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v15 + 5) + 32))(&rep, *((_QWORD *)v15 + 5), 0, 1, 16);
        v16 = v50;
      }
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v47 = 3;
      v48 = v14;
      v49 = v16;
      (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v4 + 16) + 16))(*(_QWORD *)(v4 + 16), "data", 4, &rep);
      v39 = *v7;
      *(_QWORD *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24)) = v7[3];
      v40[0] = v11 + 16;
      if (SBYTE7(v43) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v45);
    }
    v17 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (sqlite3_exec(this, "VACUUM", 0, 0, 0))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v37);
    v20 = v37;
    if (*(int *)(v37 + 8) <= 3)
    {
      v21 = MEMORY[0x1E0DE4FE0];
      v22 = MEMORY[0x1E0DE4FE0] + 64;
      v23 = (uint64_t *)MEMORY[0x1E0DE4F60];
      v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v25 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v45[0] = MEMORY[0x1E0DE4FE0] + 64;
      v39 = v24;
      *(_QWORD *)((char *)&v40[-1] + *(_QWORD *)(v24 - 24)) = v25;
      v26 = (std::ios_base *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24));
      std::ios_base::init(v26, v40);
      v26[1].__vftable = 0;
      v26[1].__fmtflags_ = -1;
      v39 = v21 + 24;
      v45[0] = v22;
      std::streambuf::basic_streambuf();
      v27 = MEMORY[0x1E0DE4FB8];
      v40[0] = MEMORY[0x1E0DE4FB8] + 16;
      *(_OWORD *)__p = 0u;
      v43 = 0u;
      v44 = 16;
      v28 = *(_QWORD *)(v39 - 24);
      if ((v29 & 1) == 0
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Unable to vacuum the database right now. Will try again next time. result = ", 76);
      std::ostream::operator<<();
      v30 = v41;
      v31 = (char *)&v40[-1] + *(_QWORD *)(v39 - 24);
      if ((v31[32] & 5) != 0)
      {
        v32 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v31 + 5) + 32))(&rep, *((_QWORD *)v31 + 5), 0, 1, 16);
        v32 = v50;
      }
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v47 = 3;
      v48 = v30;
      v49 = v32;
      (*(void (**)(_QWORD, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(_QWORD **)(v20 + 16) + 16))(*(_QWORD *)(v20 + 16), "data", 4, &rep);
      v39 = *v23;
      *(_QWORD *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24)) = v23[3];
      v40[0] = v27 + 16;
      if (SBYTE7(v43) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D789B58](v45);
    }
    v33 = v38;
    if (v38)
    {
      v34 = (unint64_t *)&v38->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  return sqlite3_close(this);
}

void sub_18CC35228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AMSCore::`anonymous namespace'::getSQLiteCompileOptions(AMSCore::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
    }
  }
}

void sub_18CC35318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_pointerIP7sqlite3PDoFvS2_ENS_9allocatorIS1_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D789BDCLL);
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP7sqlite3PDoFvS2_ENS_9allocatorIS1_EEE16__on_zero_sharedEv(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t _ZNKSt3__120__shared_ptr_pointerIP7sqlite3PDoFvS2_ENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PDoFvP7sqlite3E"
    || ((v3 & (unint64_t)"PDoFvP7sqlite3E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFvP7sqlite3E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFvP7sqlite3E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t AMSCore::StringUtils::join<char [31],std::string>(std::string *a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[8];
  void *__p[2];
  __int128 v21;
  int v22;
  uint64_t v23[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v23[0] = MEMORY[0x1E0DE4FE0] + 64;
  v18 = v9;
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24));
  std::ios_base::init(v11, v19);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v18 = v6 + 24;
  v23[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v19[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  v22 = 16;
  v13 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)a2, v13);
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = a3;
  else
    v15 = *(_QWORD *)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, v15, v16);
  std::stringbuf::str[abi:fe180100]((uint64_t)v19, a1);
  v18 = *v8;
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = v8[3];
  v19[0] = v12 + 16;
  if (SBYTE7(v21) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v23);
}

void sub_18CC35520(void *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D789B58](v1);
  __clang_call_terminate(a1);
}

void AMSCore::SQLiteDatabase::prepare(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = a2;
  v10 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  AMSCore::SQLiteStatement::make(a1, (uint64_t)&v9, a4);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void AMSCore::SQLiteMutex::makeError(uint64_t a1, sqlite3 **a2, int a3, uint64_t a4, uint64_t a5)
{
  const std::error_category *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  std::ios_base *v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  std::error_code v24;
  std::string __what_arg;
  uint64_t v27;
  _QWORD v28[8];
  void *__p[2];
  __int128 v30;
  int v31;
  uint64_t v32[20];

  std::system_category();
  v9 = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  v10 = 3;
  switch((char)a3)
  {
    case 1:
    case 11:
    case 17:
    case 26:
      goto LABEL_2;
    case 3:
    case 23:
      v9 = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
      v10 = 309;
      break;
    case 4:
    case 9:
      v10 = 1;
      break;
    case 5:
      v10 = 14;
      break;
    case 6:
      v10 = 9;
      break;
    case 10:
      v10 = 16;
      break;
    case 12:
      v10 = 7;
      break;
    case 19:
      if (a3 == 1555)
        v10 = 15;
      else
LABEL_2:
        v10 = 2;
      break;
    case 20:
      v10 = 4;
      break;
    case 21:
    case 25:
      break;
    default:
      v9 = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      v10 = 999;
      break;
  }
  *(_QWORD *)&v24.__val_ = v10;
  v24.__cat_ = v9;
  v11 = sqlite3_errstr(a3);
  if (v11)
    v12 = v11;
  else
    v12 = "null";
  v13 = sqlite3_errmsg(*a2);
  if (v13)
    v14 = v13;
  else
    v14 = "null";
  v15 = MEMORY[0x1E0DE4FE0];
  v16 = MEMORY[0x1E0DE4FE0] + 64;
  v17 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v18 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32[0] = MEMORY[0x1E0DE4FE0] + 64;
  v27 = v18;
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v18 - 24)) = v19;
  v20 = (std::ios_base *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24));
  std::ios_base::init(v20, v28);
  v20[1].__vftable = 0;
  v20[1].__fmtflags_ = -1;
  v27 = v15 + 24;
  v32[0] = v16;
  std::streambuf::basic_streambuf();
  v21 = MEMORY[0x1E0DE4FB8];
  v28[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  v31 = 16;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, a4, a5);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)" | result = ", 12);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)" | description = ", 17);
  v22 = strlen(v12);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)v12, v22);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)" | message = ", 13);
  v23 = strlen(v14);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v27, (uint64_t)v14, v23);
  std::stringbuf::str[abi:fe180100]((uint64_t)v28, &__what_arg);
  v27 = *v17;
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = v17[3];
  v28[0] = v21 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D789B58](v32);
  std::system_error::system_error((std::system_error *)a1, v24, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1E2521330;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
}

void sub_18CC358A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::SQLiteMutex::makeExpected(uint64_t result, sqlite3 **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::runtime_error v13[2];
  unsigned int **v14;
  unsigned int *v15;
  uint64_t v16;
  __int128 v17;
  std::runtime_error v18;
  std::runtime_error v19;
  unsigned int **v20;
  unsigned int *v21;
  uint64_t v22;
  __int128 v23;
  std::runtime_error v24;
  std::runtime_error v25;
  unsigned int **v26;
  unsigned int *v27;
  uint64_t v28;
  __int128 v29;

  v5 = result;
  if (a3)
  {
    AMSCore::SQLiteMutex::makeError((uint64_t)v13, a2, a3, a4, a5);
    std::runtime_error::runtime_error(&v24, v13);
    v25 = v13[1];
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v26 = v14;
    v27 = v15;
    v28 = v16;
    if (v16)
    {
      *((_QWORD *)v15 + 2) = &v27;
      v14 = &v15;
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v26 = &v27;
    }
    v29 = v17;
    v17 = 0uLL;
    std::runtime_error::runtime_error(&v18, &v24);
    v19 = v25;
    v18.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v6 = v27;
    v20 = v26;
    v21 = v27;
    v22 = v28;
    if (v28)
    {
      *((_QWORD *)v27 + 2) = &v21;
      v6 = 0;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      v20 = &v21;
    }
    v23 = v29;
    v29 = 0uLL;
    v24.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, v6);
    MEMORY[0x18D7898AC](&v24);
    std::runtime_error::runtime_error((std::runtime_error *)v5, &v18);
    *(std::runtime_error *)(v5 + 16) = v19;
    *(_QWORD *)v5 = off_1E2521330;
    v7 = v21;
    *(_QWORD *)(v5 + 32) = v20;
    *(_QWORD *)(v5 + 40) = v7;
    v8 = v5 + 40;
    v9 = v22;
    *(_QWORD *)(v5 + 48) = v22;
    if (v9)
    {
      *((_QWORD *)v7 + 2) = v8;
      v7 = 0;
      v20 = &v21;
      v21 = 0;
      v22 = 0;
    }
    else
    {
      *(_QWORD *)(v5 + 32) = v8;
    }
    *(_OWORD *)(v5 + 56) = v23;
    v23 = 0uLL;
    *(_BYTE *)(v5 + 72) = 0;
    v18.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, v7);
    MEMORY[0x18D7898AC](&v18);
    v13[0].__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v15);
    return MEMORY[0x18D7898AC](v13);
  }
  else
  {
    *(_BYTE *)(result + 72) = 1;
  }
  return result;
}

_QWORD *AMSCore::SQLiteStatement::make(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  sqlite3 *v6;
  const char *v7;
  int v8;
  std::runtime_error_vtbl *v9;
  std::runtime_error v10;
  sqlite3_stmt *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  _OWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error_vtbl *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *imp;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error_vtbl *v27;
  uint64_t v28;
  std::runtime_error_vtbl *v29;
  _QWORD *result;
  uint64_t v31;
  std::runtime_error_vtbl *v32;
  std::runtime_error v33;
  std::runtime_error v34;
  __int128 v35;
  unsigned int **v36;
  unsigned int *v37;
  _OWORD *v38;
  __int128 v39;
  std::runtime_error v40;
  __int128 v41;
  unsigned int **v42;
  unsigned int *v43;
  _OWORD *v44;
  __int128 v45;
  sqlite3_stmt *ppStmt;
  std::runtime_error_vtbl *v47;
  _QWORD v48[3];
  _QWORD *v49;
  sqlite3_stmt *v50;
  _QWORD v51[3];
  _QWORD *v52;
  std::runtime_error v53;
  __int128 v54;
  unsigned int **v55;
  unsigned int *v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = v51;
  v50 = 0;
  v51[0] = &off_1E25216B0;
  v52 = v51;
  v51[1] = AMSCore::SQLiteStatement::finalize;
  ppStmt = 0;
  v6 = *(sqlite3 **)a2;
  if (*(char *)(a3 + 23) >= 0)
    v7 = (const char *)a3;
  else
    v7 = *(const char **)a3;
  v8 = sqlite3_prepare_v3(v6, v7, -1, 1u, &ppStmt, 0);
  v9 = (std::runtime_error_vtbl *)v50;
  v50 = ppStmt;
  if (v9)
  {
    v53.__vftable = v9;
    if (!v52)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_QWORD *, std::runtime_error *))(*v52 + 48))(v52, &v53);
  }
  if (v8)
  {
    AMSCore::SQLiteMutex::makeError((uint64_t)&v34, (sqlite3 **)a2, v8, (uint64_t)"Failed to prepare statement.", 28);
    std::runtime_error::runtime_error(&v53, &v34);
    v54 = v35;
    v53.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v55 = v36;
    v56 = v37;
    v57 = v38;
    if (v38)
    {
      *((_QWORD *)v37 + 2) = &v56;
      v36 = &v37;
      v37 = 0;
      v38 = 0;
    }
    else
    {
      v55 = &v56;
    }
    v58 = v39;
    v39 = 0uLL;
    std::runtime_error::runtime_error(&v40, &v53);
    v41 = v54;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v13 = v56;
    v42 = v55;
    v43 = v56;
    v44 = v57;
    if (v57)
    {
      *((_QWORD *)v56 + 2) = &v43;
      v13 = 0;
      v55 = &v56;
      v56 = 0;
      v57 = 0;
    }
    else
    {
      v42 = &v43;
    }
    v45 = v58;
    v58 = 0uLL;
    v53.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v55, v13);
    MEMORY[0x18D7898AC](&v53);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v40);
    *(_OWORD *)(a1 + 16) = v41;
    *(_QWORD *)a1 = off_1E2521330;
    v14 = v43;
    *(_QWORD *)(a1 + 32) = v42;
    *(_QWORD *)(a1 + 40) = v14;
    v15 = a1 + 40;
    v16 = v44;
    *(_QWORD *)(a1 + 48) = v44;
    if (v16)
    {
      *((_QWORD *)v14 + 2) = v15;
      v14 = 0;
      v42 = &v43;
      v43 = 0;
      v44 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v15;
    }
    *(_OWORD *)(a1 + 56) = v45;
    v45 = 0uLL;
    *(_BYTE *)(a1 + 72) = 0;
    v40.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v14);
    MEMORY[0x18D7898AC](&v40);
    v34.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v37);
    MEMORY[0x18D7898AC](&v34);
    goto LABEL_56;
  }
  v10 = *(std::runtime_error *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v11 = v50;
  v50 = 0;
  v47 = (std::runtime_error_vtbl *)v11;
  v12 = v48;
  if (v52)
  {
    if (v52 == v51)
    {
      v49 = v48;
      v33 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(v51[0] + 24))(v51, v48);
      v10 = v33;
    }
    else
    {
      v49 = v52;
      v52 = 0;
    }
  }
  else
  {
    v49 = 0;
  }
  v53 = v10;
  v20 = v47;
  v47 = 0;
  *(_QWORD *)&v54 = v20;
  v21 = (_QWORD *)&v54 + 1;
  if (v49)
  {
    if (v49 == v48)
    {
      v57 = (__int128 *)((char *)&v54 + 8);
      (*(void (**)(_QWORD *, char *))(v48[0] + 24))(v48, (char *)&v54 + 8);
      v20 = (std::runtime_error_vtbl *)v54;
      v10 = v53;
    }
    else
    {
      v57 = v49;
      v49 = 0;
    }
  }
  else
  {
    v57 = 0;
  }
  *(std::runtime_error *)a1 = v10;
  v53.__imp_.__imp_ = 0;
  *(_QWORD *)&v54 = 0;
  v53.__vftable = 0;
  *(_QWORD *)(a1 + 16) = v20;
  if (!v57)
  {
    v22 = (_QWORD *)(a1 + 48);
    goto LABEL_37;
  }
  if (v57 != (__int128 *)((char *)&v54 + 8))
  {
    v22 = &v57;
    *(_QWORD *)(a1 + 48) = v57;
LABEL_37:
    *v22 = 0;
    *(_BYTE *)(a1 + 72) = 1;
    *(_QWORD *)&v54 = 0;
    goto LABEL_38;
  }
  *(_QWORD *)(a1 + 48) = a1 + 24;
  (*(void (**)(char *))(*((_QWORD *)&v54 + 1) + 24))((char *)&v54 + 8);
  v32 = (std::runtime_error_vtbl *)v54;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)&v54 = 0;
  if (v32)
  {
    v40.__vftable = v32;
    if (!v57)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_OWORD *, std::runtime_error *))(*(_QWORD *)v57 + 48))(v57, &v40);
  }
LABEL_38:
  if (v57 == (__int128 *)((char *)&v54 + 8))
  {
    v23 = 4;
  }
  else
  {
    if (!v57)
      goto LABEL_43;
    v23 = 5;
    v21 = v57;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_43:
  imp = (std::__shared_weak_count *)v53.__imp_.__imp_;
  if (v53.__imp_.__imp_)
  {
    v25 = (unint64_t *)(v53.__imp_.__imp_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
  }
  v27 = v47;
  v47 = 0;
  if (v27)
  {
    v40.__vftable = v27;
    if (!v49)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_QWORD *, std::runtime_error *))(*v49 + 48))(v49, &v40);
  }
  if (v49 == v48)
  {
    v28 = 4;
  }
  else
  {
    if (!v49)
      goto LABEL_56;
    v28 = 5;
    v12 = v49;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v28))(v12);
LABEL_56:
  v29 = (std::runtime_error_vtbl *)v50;
  result = v52;
  v50 = 0;
  if (v29)
  {
    v53.__vftable = v29;
    if (!v52)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(void))(*v52 + 48))();
    result = v52;
  }
  if (result == v51)
  {
    v31 = 4;
  }
  else
  {
    if (!result)
      return result;
    v31 = 5;
    v5 = result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v31))(v5);
}

void sub_18CC36074(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::SQLiteStatement::finalize(AMSCore::SQLiteStatement *this, sqlite3_stmt *a2)
{
  return sqlite3_finalize(this);
}

void _ZNSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EED0Ev()
{
  JUMPOUT(0x18D789BDCLL);
}

_QWORD *_ZNKSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E25216B0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EE7__cloneEPNS0_6__baseIS8_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E25216B0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EEclEOS3_(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t _ZNKSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PDoFvP12sqlite3_stmtE"
    || ((v3 & (unint64_t)"PDoFvP12sqlite3_stmtE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFvP12sqlite3_stmtE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFvP12sqlite3_stmtE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EE11target_typeEv()
{
  return &_ZTIPDoFvP12sqlite3_stmtE;
}

void AMSCore::SQLiteStatement::exec(uint64_t a1, sqlite3 **a2, _QWORD *a3, uint64_t a4)
{
  sqlite3_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  int v11;
  const char *v12;
  const char *v13;
  int v14;
  int v15;
  sqlite3 **v16;
  const char *v17;
  uint64_t v18;
  sqlite3_int64 v19;
  sqlite3 **v20;
  sqlite3_stmt *v21;
  const char *v22;
  double v23;
  const char *v24;
  int v25;
  uint64_t v26;
  const char *v27;
  int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  const char **v33;
  sqlite3_uint64 v34;
  const void **v35;
  sqlite3_uint64 v36;
  sqlite3_uint64 v37;
  const void **v38;
  const char *v39;
  int v40;
  sqlite3_uint64 v41;
  const void **v42;
  int v43;
  const char *v44;
  int v45;
  sqlite3 **v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  sqlite3 **v50;
  char v51;
  sqlite3 **v52;
  int v53;
  int v54;
  int i;
  int v56;
  const unsigned __int8 *v57;
  int v58;
  size_t v59;
  std::system_error_vtbl *p_dst;
  const void *v61;
  int v62;
  size_t v63;
  std::system_error_vtbl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  std::runtime_error_vtbl *v70;
  void (__cdecl *v71)(std::runtime_error *__hidden);
  size_t v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  std::runtime_error_vtbl *v77;
  std::__libcpp_refstring *p_imp;
  std::__libcpp_refstring *v79;
  const char *imp;
  void **v81;
  char v82;
  void (__cdecl *v83)(std::runtime_error *__hidden);
  const char *(__cdecl *what)(const std::runtime_error *__hidden);
  const char *v85;
  const char *v86;
  const char *v87;
  int v88;
  const char *v89;
  const char *(__cdecl *v90)(const std::runtime_error *__hidden);
  size_t v91;
  int v92;
  int v93;
  uint64_t v94;
  char v95;
  unsigned int *v96;
  uint64_t v97;
  unsigned int *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::ios_base *v102;
  std::string *v103;
  std::string::size_type size;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  int v114;
  sqlite3 **v115;
  unsigned int *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  int v123;
  unsigned int *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  sqlite3_mutex *v131;
  unsigned int *v132;
  uint64_t v133;
  uint64_t v134;
  std::runtime_error_vtbl *v135;
  std::runtime_error_vtbl *v136;
  const char *v137;
  uint64_t v138;
  std::runtime_error_vtbl *v139;
  std::runtime_error_vtbl *v140;
  uint64_t v142;
  char v143;
  std::runtime_error v145;
  std::error_code v146;
  unsigned int **v147;
  unsigned int *v148;
  uint64_t v149;
  __int128 v150;
  char v151;
  std::string v152;
  std::runtime_error v153;
  std::error_code ec;
  unsigned int **v155;
  unsigned int *v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  std::runtime_error v161;
  uint64_t v162;
  std::system_error __dst;
  unsigned int **v164;
  unsigned int *v165;
  uint64_t v166;
  __int128 v167;
  std::string __what_arg;
  std::runtime_error v169;
  std::error_code v170;
  unsigned int **v171;
  unsigned int *v172;
  uint64_t v173;
  __int128 v174;
  __int128 __p;
  __int128 v176;
  int v177;
  uint64_t v178[22];
  std::error_code v179;

  v6 = sqlite3_db_mutex(*a2);
  sqlite3_mutex_enter(v6);
  v9 = (_QWORD *)*a3;
  v7 = a3 + 1;
  v8 = v9;
  v142 = a1;
  if (v9 == v7)
  {
LABEL_66:
    *(_BYTE *)(a1 + 72) = 1;
    v46 = a2;
    goto LABEL_73;
  }
  while (2)
  {
    LOBYTE(__p) = 1;
    v10 = *((_DWORD *)v8 + 20);
    if (v10 == -1)
      v11 = 0;
    else
      v11 = *((_DWORD *)v8 + 20);
    v12 = (const char *)(v8 + 7);
    switch(v11)
    {
      case 0:
        if (*((char *)v8 + 55) >= 0)
          v13 = (const char *)(v8 + 4);
        else
          v13 = (const char *)v8[4];
        v14 = sqlite3_bind_parameter_index(a2[2], v13);
        v15 = sqlite3_bind_null(a2[2], v14);
        v16 = a2;
        v17 = "Failed to bind statement parameter to null.";
        v18 = 43;
        goto LABEL_31;
      case 1:
        v19 = *((unsigned __int8 *)v8 + 56);
        v20 = a2;
        v21 = a2[2];
        if (*((char *)v8 + 55) >= 0)
          v22 = (const char *)(v8 + 4);
        else
          v22 = (const char *)v8[4];
        goto LABEL_29;
      case 2:
        v23 = *((double *)v8 + 7);
        if (*((char *)v8 + 55) >= 0)
          v24 = (const char *)(v8 + 4);
        else
          v24 = (const char *)v8[4];
        v25 = sqlite3_bind_parameter_index(a2[2], v24);
        v15 = sqlite3_bind_double(a2[2], v25, v23);
        v16 = a2;
        v17 = "Failed to bind statement parameter to double.";
        v18 = 45;
        goto LABEL_31;
      case 3:
        v19 = v8[7];
        v20 = a2;
        v21 = a2[2];
        if (*((char *)v8 + 55) >= 0)
          v22 = (const char *)(v8 + 4);
        else
          v22 = (const char *)v8[4];
        goto LABEL_29;
      case 4:
        v19 = v8[7];
        v20 = a2;
        v21 = a2[2];
        if (*((char *)v8 + 55) >= 0)
          v22 = (const char *)(v8 + 4);
        else
          v22 = (const char *)v8[4];
LABEL_29:
        v29 = sqlite3_bind_parameter_index(v21, v22);
        v15 = sqlite3_bind_int64(v20[2], v29, v19);
        v16 = v20;
        goto LABEL_30;
      case 5:
        if (v10 == 5)
          v33 = (const char **)(v8 + 7);
        else
          v33 = 0;
        if (*((char *)v33 + 23) < 0)
        {
          v12 = *v33;
          v34 = (sqlite3_uint64)v33[1];
        }
        else
        {
          v34 = *((unsigned __int8 *)v33 + 23);
        }
        if (*((char *)v8 + 55) >= 0)
          v44 = (const char *)(v8 + 4);
        else
          v44 = (const char *)v8[4];
        v45 = sqlite3_bind_parameter_index(a2[2], v44);
        v15 = sqlite3_bind_text64(a2[2], v45, v12, v34, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL, 1u);
        v16 = a2;
        v17 = "Failed to bind statement parameter to string.";
        v18 = 45;
        goto LABEL_31;
      case 6:
        if (v10 == 6)
          v35 = (const void **)(v8 + 7);
        else
          v35 = 0;
        v36 = *((unsigned __int8 *)v35 + 23);
        v38 = (const void **)*v35;
        v37 = (sqlite3_uint64)v35[1];
        if (*((char *)v8 + 55) >= 0)
          v39 = (const char *)(v8 + 4);
        else
          v39 = (const char *)v8[4];
        v40 = sqlite3_bind_parameter_index(a2[2], v39);
        if ((v36 & 0x80u) == 0)
          v41 = v36;
        else
          v41 = v37;
        if ((v36 & 0x80u) == 0)
          v42 = v35;
        else
          v42 = v38;
        v43 = sqlite3_bind_blob64(a2[2], v40, v42, v41, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        AMSCore::SQLiteMutex::makeExpected((uint64_t)&v145, a2, v43, (uint64_t)"Failed to bind statement parameter to data.", 43);
        std::expected<void,AMSCore::Error>::operator=[abi:fe180100](&v169, &v145);
        if (!v151)
          ((void (*)(std::runtime_error *))v145.~runtime_error)(&v145);
        a1 = v142;
        if (!(_BYTE)__p)
          goto LABEL_67;
        goto LABEL_34;
      case 7:
        v26 = v8[7];
        if (*((char *)v8 + 55) >= 0)
          v27 = (const char *)(v8 + 4);
        else
          v27 = (const char *)v8[4];
        v28 = sqlite3_bind_parameter_index(a2[2], v27);
        v15 = sqlite3_bind_int64(a2[2], v28, v26 / 1000);
        v16 = a2;
LABEL_30:
        v17 = "Failed to bind statement parameter to std::int64_t.";
        v18 = 51;
LABEL_31:
        AMSCore::SQLiteMutex::makeExpected((uint64_t)&v145, v16, v15, (uint64_t)v17, v18);
        std::expected<void,AMSCore::Error>::operator=[abi:fe180100](&v169, &v145);
        if (!v151)
          ((void (*)(std::runtime_error *))v145.~runtime_error)(&v145);
        if ((_BYTE)__p)
        {
LABEL_34:
          v30 = (_QWORD *)v8[1];
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v8[2];
              v32 = *v31 == (_QWORD)v8;
              v8 = v31;
            }
            while (!v32);
          }
          v8 = v31;
          if (v31 == v7)
            goto LABEL_66;
          continue;
        }
LABEL_67:
        std::runtime_error::runtime_error((std::runtime_error *)a1, &v169);
        *(std::error_code *)(a1 + 16) = v170;
        *(_QWORD *)a1 = off_1E2521330;
        v47 = v172;
        *(_QWORD *)(a1 + 32) = v171;
        *(_QWORD *)(a1 + 40) = v47;
        v48 = a1 + 40;
        v49 = v173;
        *(_QWORD *)(a1 + 48) = v173;
        if (v49)
        {
          *((_QWORD *)v47 + 2) = v48;
          v171 = &v172;
          v172 = 0;
          v173 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 32) = v48;
        }
        v46 = a2;
        *(_OWORD *)(a1 + 56) = v174;
        v174 = 0uLL;
        *(_BYTE *)(a1 + 72) = 0;
        if (!(_BYTE)__p)
LABEL_71:
          ((void (*)(std::runtime_error *))v169.~runtime_error)(&v169);
LABEL_72:
        if (!*(_BYTE *)(v142 + 72))
          goto LABEL_260;
LABEL_73:
        v50 = v46;
        v136 = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F60];
        v139 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
        v140 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
        v135 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
        v138 = MEMORY[0x1E0DE4FE0] + 64;
        v137 = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
        while (2)
        {
          v52 = v50;
          v53 = sqlite3_step(v50[2]);
          if (v53 == 100)
          {
            v161.__imp_.__imp_ = 0;
            v162 = 0;
            v161.__vftable = (std::runtime_error_vtbl *)&v161.__imp_;
            v54 = sqlite3_column_count(v50[2]);
            if (v54 >= 1)
            {
              for (i = 0; i != v54; ++i)
              {
                v159 = 0u;
                v160 = 0u;
                v56 = sqlite3_column_type(v52[2], i);
                switch(v56)
                {
                  case 1:
                    v169.__vftable = (std::runtime_error_vtbl *)sqlite3_column_int64(v52[2], i);
                    LODWORD(v170.__cat_) = 3;
                    AMSCore::Any::operator=((uint64_t)&v159, (uint64_t)&v169);
                    if (LODWORD(v170.__cat_) == -1)
                      goto LABEL_109;
                    goto LABEL_108;
                  case 2:
                    v169.__vftable = COERCE_STD_RUNTIME_ERROR_VTBL_(sqlite3_column_double(v52[2], i));
                    LODWORD(v170.__cat_) = 2;
                    AMSCore::Any::operator=((uint64_t)&v159, (uint64_t)&v169);
                    if (LODWORD(v170.__cat_) != -1)
                      goto LABEL_108;
                    goto LABEL_109;
                  case 3:
                    v57 = sqlite3_column_text(v52[2], i);
                    v58 = sqlite3_column_bytes(v52[2], i);
                    if (v58 < 0)
                      std::string::__throw_length_error[abi:fe180100]();
                    v59 = v58;
                    if (v58 >= 0x17)
                    {
                      v65 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v58 | 7) != 0x17)
                        v65 = v58 | 7;
                      v66 = v65 + 1;
                      p_dst = (std::system_error_vtbl *)operator new(v65 + 1);
                      __dst.__imp_.__imp_ = (const char *)v59;
                      *(_QWORD *)&__dst.__ec_.__val_ = v66 | 0x8000000000000000;
                      __dst.__vftable = p_dst;
                    }
                    else
                    {
                      *((_BYTE *)&__dst.__ec_.__val_ + 7) = v58;
                      p_dst = (std::system_error_vtbl *)&__dst;
                      if (!v58)
                        goto LABEL_101;
                    }
                    memmove(p_dst, v57, v59);
LABEL_101:
                    *((_BYTE *)&p_dst->~system_error + v59) = 0;
                    v169 = __dst.std::runtime_error;
                    *(_QWORD *)&v170.__val_ = *(_QWORD *)&__dst.__ec_.__val_;
                    memset(&__dst, 0, 24);
                    LODWORD(v170.__cat_) = 5;
                    AMSCore::Any::operator=((uint64_t)&v159, (uint64_t)&v169);
                    if (LODWORD(v170.__cat_) != -1)
                      ((void (*)(std::runtime_error *, std::runtime_error *))off_1E253D240[LODWORD(v170.__cat_)])(&v153, &v169);
                    goto LABEL_109;
                  case 4:
                    v61 = sqlite3_column_blob(v52[2], i);
                    v62 = sqlite3_column_bytes(v52[2], i);
                    if (v62 < 0)
                      std::string::__throw_length_error[abi:fe180100]();
                    v63 = v62;
                    if (v62 >= 0x17)
                    {
                      v67 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v62 | 7) != 0x17)
                        v67 = v62 | 7;
                      v68 = v67 + 1;
                      v64 = (std::system_error_vtbl *)operator new(v67 + 1);
                      __dst.__imp_.__imp_ = (const char *)v63;
                      *(_QWORD *)&__dst.__ec_.__val_ = v68 | 0x8000000000000000;
                      __dst.__vftable = v64;
                    }
                    else
                    {
                      *((_BYTE *)&__dst.__ec_.__val_ + 7) = v62;
                      v64 = (std::system_error_vtbl *)&__dst;
                      if (!v62)
                        goto LABEL_107;
                    }
                    memmove(v64, v61, v63);
LABEL_107:
                    *((_BYTE *)&v64->~system_error + v63) = 0;
                    v169 = __dst.std::runtime_error;
                    *(_QWORD *)&v170.__val_ = *(_QWORD *)&__dst.__ec_.__val_;
                    LODWORD(v170.__cat_) = 6;
                    AMSCore::Any::operator=((uint64_t)&v159, (uint64_t)&v169);
                    if (LODWORD(v170.__cat_) != -1)
LABEL_108:
                      ((void (*)(std::system_error *, std::runtime_error *))off_1E253D240[LODWORD(v170.__cat_)])(&__dst, &v169);
LABEL_109:
                    v69 = sqlite3_column_name(v52[2], i);
                    v70 = (std::runtime_error_vtbl *)operator new(0x58uLL);
                    v169.__vftable = v70;
                    v169.__imp_.__imp_ = (const char *)&v161.__imp_;
                    v71 = (void (__cdecl *)(std::runtime_error *__hidden))&v70[1].~runtime_error_0;
                    LOBYTE(v170.__val_) = 0;
                    v72 = strlen(v69);
                    if (v72 >= 0x7FFFFFFFFFFFFFF8)
                      std::string::__throw_length_error[abi:fe180100]();
                    v73 = v72;
                    if (v72 >= 0x17)
                    {
                      v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v72 | 7) != 0x17)
                        v74 = v72 | 7;
                      v75 = v74 + 1;
                      v71 = (void (__cdecl *)(std::runtime_error *__hidden))operator new(v74 + 1);
                      v70[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v73;
                      v70[2].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))(v75 | 0x8000000000000000);
                      v70[1].~runtime_error_0 = v71;
                    }
                    else
                    {
                      HIBYTE(v70[2].~runtime_error) = v72;
                      if (!v72)
                        goto LABEL_117;
                    }
                    memmove(v71, v69, v73);
LABEL_117:
                    *((_BYTE *)v71 + v73) = 0;
                    LOBYTE(v70[2].~runtime_error_0) = 0;
                    LODWORD(v70[3].~runtime_error_0) = -1;
                    v76 = DWORD2(v160);
                    if (DWORD2(v160) == -1)
                      goto LABEL_121;
                    ((void (*)(std::system_error *))off_1E253CAE8[DWORD2(v160)])(&__dst);
                    LODWORD(v70[3].~runtime_error_0) = v76;
                    if (DWORD2(v160) == -1)
                      goto LABEL_121;
                    if (DWORD2(v160))
                    {
                      ((void (*)(std::system_error *, __int128 *))off_1E253D240[DWORD2(v160)])(&__dst, &v159);
LABEL_121:
                      DWORD2(v160) = 0;
                    }
                    LOBYTE(v170.__val_) = 1;
                    v77 = v169.__vftable;
                    p_imp = &v161.__imp_;
                    v79 = &v161.__imp_;
                    imp = v161.__imp_.__imp_;
                    if (!v161.__imp_.__imp_)
                      goto LABEL_149;
                    v81 = (void **)&v169.__vftable[1].~runtime_error_0;
                    v82 = HIBYTE(v169.__vftable[2].~runtime_error);
                    v143 = v82;
                    if (v82 >= 0)
                      v83 = (void (__cdecl *)(std::runtime_error *__hidden))&v169.__vftable[1].~runtime_error_0;
                    else
                      v83 = v169.__vftable[1].~runtime_error_0;
                    if (v82 >= 0)
                      what = (const char *(__cdecl *)(const std::runtime_error *__hidden))HIBYTE(v169.__vftable[2].~runtime_error);
                    else
                      what = v169.__vftable[1].what;
                    break;
                  case 5:
                    if (DWORD2(v160) == -1)
                      goto LABEL_86;
                    if (DWORD2(v160))
                    {
                      ((void (*)(std::runtime_error *, __int128 *))off_1E253D240[DWORD2(v160)])(&v169, &v159);
LABEL_86:
                      DWORD2(v160) = 0;
                    }
                    goto LABEL_109;
                  default:
                    std::to_string(&v152, v56);
                    v178[0] = v138;
                    v169.__vftable = v140;
                    *(std::runtime_error_vtbl **)((char *)&v169.__vftable + (unint64_t)v140[-1].~runtime_error) = v139;
                    v102 = (std::ios_base *)((char *)&v169 + (unint64_t)v169.__vftable[-1].~runtime_error);
                    std::ios_base::init(v102, &v169.__imp_);
                    v102[1].__vftable = 0;
                    v102[1].__fmtflags_ = -1;
                    v169.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4FE0] + 24);
                    v178[0] = MEMORY[0x1E0DE4FE0] + 64;
                    std::streambuf::basic_streambuf();
                    v169.__imp_.__imp_ = v137;
                    __p = 0u;
                    v176 = 0u;
                    v177 = 16;
                    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Unknown type. type = ", 21);
                    if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v103 = &v152;
                    else
                      v103 = (std::string *)v152.__r_.__value_.__r.__words[0];
                    if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
                    else
                      size = v152.__r_.__value_.__l.__size_;
                    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v169, (uint64_t)v103, size);
                    std::stringbuf::str[abi:fe180100]((uint64_t)&v169.__imp_, &__what_arg);
                    v169.__vftable = v136;
                    *(std::runtime_error_vtbl **)((char *)&v169.__vftable + (unint64_t)v136[-1].~runtime_error) = v135;
                    v169.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
                    if (SBYTE7(v176) < 0)
                      operator delete((void *)__p);
                    std::streambuf::~streambuf();
                    std::ostream::~ostream();
                    MEMORY[0x18D789B58](v178);
                    *(_QWORD *)&v179.__val_ = 4;
                    v179.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
                    std::system_error::system_error(&__dst, v179, &__what_arg);
                    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__what_arg.__r_.__value_.__l.__data_);
                    v165 = 0;
                    v166 = 0;
                    __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
                    v164 = &v165;
                    v167 = 0uLL;
                    std::runtime_error::runtime_error(&v153, &__dst);
                    ec = __dst.__ec_;
                    v105 = v165;
                    v153.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                    v155 = v164;
                    v156 = v165;
                    v157 = v166;
                    if (v166)
                    {
                      *((_QWORD *)v165 + 2) = &v156;
                      v105 = 0;
                      v164 = &v165;
                      v165 = 0;
                      v166 = 0;
                    }
                    else
                    {
                      v155 = &v156;
                    }
                    v158 = v167;
                    v167 = 0uLL;
                    __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v164, v105);
                    MEMORY[0x18D7898AC](&__dst);
                    std::runtime_error::runtime_error(&v145, &v153);
                    v146 = ec;
                    v106 = v156;
                    v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                    v147 = v155;
                    v148 = v156;
                    v149 = v157;
                    if (v157)
                    {
                      *((_QWORD *)v156 + 2) = &v148;
                      v106 = 0;
                      v155 = &v156;
                      v156 = 0;
                      v157 = 0;
                    }
                    else
                    {
                      v147 = &v148;
                    }
                    v150 = v158;
                    v158 = 0uLL;
                    v151 = 0;
                    v153.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, v106);
                    MEMORY[0x18D7898AC](&v153);
                    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v152.__r_.__value_.__l.__data_);
                    if (DWORD2(v160) != -1)
                      ((void (*)(std::runtime_error *, __int128 *))off_1E253D240[DWORD2(v160)])(&v169, &v159);
                    v96 = (unsigned int *)v161.__imp_.__imp_;
                    goto LABEL_164;
                }
                while (1)
                {
                  while (1)
                  {
                    v79 = (std::__libcpp_refstring *)imp;
                    v87 = (const char *)*((_QWORD *)imp + 4);
                    v85 = imp + 32;
                    v86 = v87;
                    v88 = v85[23];
                    v89 = v88 >= 0 ? v85 : v86;
                    v90 = v88 >= 0
                        ? (const char *(__cdecl *)(const std::runtime_error *__hidden))*((unsigned __int8 *)v85 + 23)
                        : (const char *(__cdecl *)(const std::runtime_error *__hidden))*((_QWORD *)v85 + 1);
                    v91 = (size_t)((unint64_t)v90 >= (unint64_t)what ? what : v90);
                    v92 = memcmp(v83, v89, v91);
                    if (v92)
                      break;
                    if ((unint64_t)what >= (unint64_t)v90)
                      goto LABEL_143;
LABEL_129:
                    imp = v79->__imp_;
                    p_imp = v79;
                    if (!v79->__imp_)
                      goto LABEL_149;
                  }
                  if (v92 < 0)
                    goto LABEL_129;
LABEL_143:
                  v93 = memcmp(v89, v83, v91);
                  if (!v93)
                    break;
                  if ((v93 & 0x80000000) == 0)
                    goto LABEL_154;
LABEL_147:
                  imp = v79[1].__imp_;
                  if (!imp)
                  {
                    p_imp = v79 + 1;
LABEL_149:
                    v77->~runtime_error = 0;
                    v77->~runtime_error_0 = 0;
                    v77->what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v79;
                    p_imp->__imp_ = (const char *)v77;
                    v52 = a2;
                    if (v161.~runtime_error)
                    {
                      v161.__vftable = (std::runtime_error_vtbl *)v161.~runtime_error;
                      v77 = (std::runtime_error_vtbl *)p_imp->__imp_;
                    }
                    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v161.__imp_.__imp_, (uint64_t *)v77);
                    ++v162;
                    goto LABEL_152;
                  }
                }
                if ((unint64_t)v90 < (unint64_t)what)
                  goto LABEL_147;
LABEL_154:
                v169.__vftable = 0;
                v52 = a2;
                if (v77)
                {
                  v94 = LODWORD(v77[3].~runtime_error_0);
                  v95 = v143;
                  if ((_DWORD)v94 != -1)
                  {
                    ((void (*)(std::system_error *, void (__cdecl **)(std::runtime_error *__hidden)))off_1E253D240[v94])(&__dst, &v77[2].~runtime_error_0);
                    v95 = HIBYTE(v77[2].~runtime_error);
                  }
                  LODWORD(v77[3].~runtime_error_0) = -1;
                  if (v95 < 0)
                    operator delete(*v81);
                  operator delete(v77);
                }
LABEL_152:
                if (DWORD2(v160) != -1)
                  ((void (*)(std::runtime_error *, __int128 *))off_1E253D240[DWORD2(v160)])(&v169, &v159);
              }
            }
            v96 = (unsigned int *)v161.__imp_.__imp_;
            v145 = v161;
            *(_QWORD *)&v146.__val_ = v162;
            if (v162)
            {
              *((_QWORD *)v161.__imp_.__imp_ + 2) = &v145.__imp_;
              v161.__vftable = (std::runtime_error_vtbl *)&v161.__imp_;
              v161.__imp_.__imp_ = 0;
              v162 = 0;
              v96 = 0;
            }
            else
            {
              v145.__vftable = (std::runtime_error_vtbl *)&v145.__imp_;
            }
            v151 = 1;
LABEL_164:
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v161, v96);
            if (v151)
            {
              v97 = *(_QWORD *)(a4 + 24);
              if (!v97
                || (*(unsigned int (**)(uint64_t, std::runtime_error *))(*(_QWORD *)v97 + 48))(v97, &v145))
              {
                v50 = v52;
                v51 = 1;
                if (v151)
                  goto LABEL_75;
              }
              else
              {
                v50 = v52;
LABEL_180:
                v51 = 0;
                if (v151)
                {
LABEL_75:
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v145, (unsigned int *)v145.__imp_.__imp_);
                  if ((v51 & 1) == 0)
                    goto LABEL_222;
                  continue;
                }
              }
              ((void (*)(std::runtime_error *))v145.~runtime_error)(&v145);
              if ((v51 & 1) == 0)
                goto LABEL_222;
              continue;
            }
            std::runtime_error::runtime_error(&v169, &v145);
            v170 = v146;
            v169.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            v171 = v147;
            v172 = v148;
            v173 = v149;
            if (v149)
            {
              *((_QWORD *)v148 + 2) = &v172;
              v147 = &v148;
              v148 = 0;
              v149 = 0;
            }
            else
            {
              v171 = &v172;
            }
            v174 = v150;
            v150 = 0uLL;
            std::runtime_error::runtime_error(&__dst, &v169);
            __dst.__ec_ = v170;
            v98 = v172;
            __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
            v164 = v171;
            v165 = v172;
            v166 = v173;
            if (v173)
            {
              *((_QWORD *)v172 + 2) = &v165;
              v98 = 0;
              v171 = &v172;
              v172 = 0;
              v173 = 0;
            }
            else
            {
              v164 = &v165;
            }
            v167 = v174;
            v174 = 0uLL;
            v169.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v171, v98);
            MEMORY[0x18D7898AC](&v169);
            std::expected<void,AMSCore::Error>::operator=[abi:fe180100]<AMSCore::Error>(v142, (uint64_t)&__dst);
            __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
            v99 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
            if (*((_QWORD *)&v167 + 1))
            {
              v100 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            v50 = v52;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v164, v165);
            MEMORY[0x18D7898AC](&__dst);
            goto LABEL_180;
          }
          break;
        }
        if (v53 != 101)
        {
          AMSCore::SQLiteMutex::makeError((uint64_t)&__dst, v50, v53, (uint64_t)"SQLite query failed.", 20);
          std::runtime_error::runtime_error(&v169, &__dst);
          v170 = __dst.__ec_;
          v169.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v171 = v164;
          v172 = v165;
          v173 = v166;
          if (v166)
          {
            *((_QWORD *)v165 + 2) = &v172;
            v164 = &v165;
            v165 = 0;
            v166 = 0;
          }
          else
          {
            v171 = &v172;
          }
          v174 = v167;
          v167 = 0uLL;
          std::runtime_error::runtime_error(&v145, &v169);
          v146 = v170;
          v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v107 = v172;
          v147 = v171;
          v148 = v172;
          v149 = v173;
          if (v173)
          {
            *((_QWORD *)v172 + 2) = &v148;
            v107 = 0;
            v171 = &v172;
            v172 = 0;
            v173 = 0;
          }
          else
          {
            v147 = &v148;
          }
          v150 = v174;
          v174 = 0uLL;
          v169.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v171, v107);
          MEMORY[0x18D7898AC](&v169);
          std::expected<void,AMSCore::Error>::operator=[abi:fe180100]<AMSCore::Error>(v142, (uint64_t)&v145);
          v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v108 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
          if (*((_QWORD *)&v150 + 1))
          {
            v109 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v147, v148);
          MEMORY[0x18D7898AC](&v145);
          __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
          v111 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
          if (*((_QWORD *)&v167 + 1))
          {
            v112 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v164, v165);
          MEMORY[0x18D7898AC](&__dst);
        }
LABEL_222:
        v114 = sqlite3_reset(v50[2]);
        v115 = v50;
        if (*(_BYTE *)(v142 + 72) && v114)
        {
          AMSCore::SQLiteMutex::makeError((uint64_t)&__dst, v50, v114, (uint64_t)"SQLite reset failed.", 20);
          std::runtime_error::runtime_error(&v169, &__dst);
          v170 = __dst.__ec_;
          v169.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v171 = v164;
          v172 = v165;
          v173 = v166;
          if (v166)
          {
            *((_QWORD *)v165 + 2) = &v172;
            v164 = &v165;
            v165 = 0;
            v166 = 0;
          }
          else
          {
            v171 = &v172;
          }
          v174 = v167;
          v167 = 0uLL;
          std::runtime_error::runtime_error(&v145, &v169);
          v146 = v170;
          v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v116 = v172;
          v147 = v171;
          v148 = v172;
          v149 = v173;
          if (v173)
          {
            *((_QWORD *)v172 + 2) = &v148;
            v116 = 0;
            v171 = &v172;
            v172 = 0;
            v173 = 0;
          }
          else
          {
            v147 = &v148;
          }
          v150 = v174;
          v174 = 0uLL;
          v169.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v171, v116);
          MEMORY[0x18D7898AC](&v169);
          std::expected<void,AMSCore::Error>::operator=[abi:fe180100]<AMSCore::Error>(v142, (uint64_t)&v145);
          v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v117 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
          if (*((_QWORD *)&v150 + 1))
          {
            v118 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v147, v148);
          MEMORY[0x18D7898AC](&v145);
          __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
          v120 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
          v115 = v50;
          if (*((_QWORD *)&v167 + 1))
          {
            v121 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v164, v165);
          MEMORY[0x18D7898AC](&__dst);
        }
        v123 = sqlite3_clear_bindings(v115[2]);
        v46 = v50;
        if (*(_BYTE *)(v142 + 72) && v123)
        {
          AMSCore::SQLiteMutex::makeError((uint64_t)&__dst, v50, v123, (uint64_t)"SQLite clear bindings failed.", 29);
          std::runtime_error::runtime_error(&v169, &__dst);
          v170 = __dst.__ec_;
          v169.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v171 = v164;
          v172 = v165;
          v173 = v166;
          if (v166)
          {
            *((_QWORD *)v165 + 2) = &v172;
            v164 = &v165;
            v165 = 0;
            v166 = 0;
          }
          else
          {
            v171 = &v172;
          }
          v174 = v167;
          v167 = 0uLL;
          std::runtime_error::runtime_error(&v145, &v169);
          v146 = v170;
          v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v124 = v172;
          v147 = v171;
          v148 = v172;
          v149 = v173;
          if (v173)
          {
            *((_QWORD *)v172 + 2) = &v148;
            v124 = 0;
            v171 = &v172;
            v172 = 0;
            v173 = 0;
          }
          else
          {
            v147 = &v148;
          }
          v150 = v174;
          v174 = 0uLL;
          v169.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v171, v124);
          MEMORY[0x18D7898AC](&v169);
          std::expected<void,AMSCore::Error>::operator=[abi:fe180100]<AMSCore::Error>(v142, (uint64_t)&v145);
          v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
          v125 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
          if (*((_QWORD *)&v150 + 1))
          {
            v126 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v147, v148);
          MEMORY[0x18D7898AC](&v145);
          __dst.__vftable = (std::system_error_vtbl *)off_1E2521330;
          v128 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
          v46 = v50;
          if (*((_QWORD *)&v167 + 1))
          {
            v129 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v164, v165);
          MEMORY[0x18D7898AC](&__dst);
        }
LABEL_260:
        v131 = sqlite3_db_mutex(*v46);
        sqlite3_mutex_leave(v131);
        return;
      default:
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[18]>((uint64_t)&v145, 8u, "Unsupported type.");
        std::runtime_error::runtime_error((std::runtime_error *)a1, &v145);
        *(std::error_code *)(a1 + 16) = v146;
        *(_QWORD *)a1 = off_1E2521330;
        v132 = v148;
        *(_QWORD *)(a1 + 32) = v147;
        *(_QWORD *)(a1 + 40) = v132;
        v133 = a1 + 40;
        v134 = v149;
        *(_QWORD *)(a1 + 48) = v149;
        if (v134)
        {
          *((_QWORD *)v132 + 2) = v133;
          v147 = &v148;
          v148 = 0;
          v149 = 0;
          v132 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 32) = v133;
        }
        *(_OWORD *)(a1 + 56) = v150;
        v150 = 0uLL;
        *(_BYTE *)(a1 + 72) = 0;
        v145.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v147, v132);
        MEMORY[0x18D7898AC](&v145);
        v46 = a2;
        if (!(_BYTE)__p)
          goto LABEL_71;
        goto LABEL_72;
    }
  }
}

void sub_18CC37864(void *a1)
{
  if (SLOBYTE(STACK[0x23F]) < 0)
  {
    operator delete((void *)STACK[0x228]);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::expected<void,AMSCore::Error>::operator=[abi:fe180100]<AMSCore::Error>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v4 = (_QWORD *)(a2 + 40);
  if (*(_BYTE *)(a1 + 72))
  {
    std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
    *(_QWORD *)a1 = MEMORY[0x1E0DE4F90] + 16;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)a1 = off_1E2521330;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v5;
    v6 = a1 + 40;
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v7;
    if (v7)
    {
      *(_QWORD *)(v5 + 16) = v6;
      *(_QWORD *)(a2 + 32) = v4;
      *v4 = 0;
      v4[1] = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v6;
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    std::runtime_error::operator=((std::runtime_error *)a1, (const std::runtime_error *)a2);
    v9 = a1 + 40;
    v8 = *(unsigned int **)(a1 + 40);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, v8);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v11 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    if (v11)
    {
      *(_QWORD *)(v10 + 16) = v9;
      *(_QWORD *)(a2 + 32) = v4;
      *v4 = 0;
      v4[1] = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v9;
    }
    v13 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v14 = *(std::__shared_weak_count **)(a1 + 64);
    *(_OWORD *)(a1 + 56) = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  return a1;
}

void AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::~SqlTableBuilder(AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E2520868;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E2520868;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x18D789BDCLL);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace@<X0>(AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  const char *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *imp;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  uint64_t v27;
  _OWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  char *v41;
  uint64_t v42;
  _OWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::runtime_error v48;
  __int128 v49;
  char **v50;
  char *v51;
  _OWORD *v52;
  __int128 v53;
  void *__p[2];
  __int128 v55;
  const char *v56;
  char *v57;
  _OWORD *v58;
  __int128 v59;
  char v60;
  std::runtime_error v61;
  __int128 v62;
  const char **v63;
  const char *v64;
  _OWORD *v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  _QWORD v69[8];
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73[19];
  std::runtime_error v74;
  __int128 v75;
  char **v76;
  char *v77;
  _OWORD *v78;
  __int128 v79;

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v73[0] = MEMORY[0x1E0DE4FE0] + 64;
  v68 = v7;
  *(_QWORD *)((char *)&v69[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v69[-1] + *(_QWORD *)(v68 - 24));
  std::ios_base::init(v9, v69);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v68 = v4 + 24;
  v73[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v69[0] = MEMORY[0x1E0DE4FB8] + 16;
  v70 = 0u;
  v71 = 0u;
  v72 = 16;
  v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v68, (uint64_t)"REPLACE INTO \"", 14);
  v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, **((_QWORD **)this + 1), *(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" (", 3);
  v61 = *(std::runtime_error *)(*((_QWORD *)this + 1) + 16);
  *((_QWORD *)&v62 + 1) = ",";
  v63 = (const char **)"";
  v64 = "";
  LOBYTE(v65) = 0;
  v14 = AMSCore::operator<<(v13, (uint64_t)&v61);
  v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)")\n", 2);
  v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"VALUES (", 8);
  *(_OWORD *)__p = *(_OWORD *)(*((_QWORD *)this + 1) + 16);
  *((_QWORD *)&v55 + 1) = ",";
  v56 = " :";
  v57 = "";
  LOBYTE(v58) = 1;
  v17 = AMSCore::operator<<(v16, (uint64_t)__p);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  v18 = *((_QWORD *)this + 2);
  std::stringbuf::str[abi:fe180100]((uint64_t)v69, (std::string *)__p);
  v19 = *(const char **)(v18 + 8);
  v74.__vftable = *(std::runtime_error_vtbl **)v18;
  v74.__imp_.__imp_ = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v61, (uint64_t)&v74, (uint64_t)__p);
  imp = (std::__shared_weak_count *)v74.__imp_.__imp_;
  if (!v74.__imp_.__imp_)
    goto LABEL_8;
  v23 = (unint64_t *)(v74.__imp_.__imp_ + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v55) & 0x80000000) == 0)
    {
LABEL_9:
      if (v67)
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  else
  {
LABEL_8:
    if ((SBYTE7(v55) & 0x80000000) == 0)
      goto LABEL_9;
  }
  operator delete(__p[0]);
  if (v67)
  {
LABEL_10:
    v25 = (char *)operator new(0x50uLL);
    *((_QWORD *)v25 + 1) = 0;
    v26 = (unint64_t *)(v25 + 8);
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = &off_1E2522A10;
    *(std::runtime_error *)(v25 + 24) = v61;
    v61.__vftable = 0;
    v61.__imp_.__imp_ = 0;
    v27 = v62;
    v28 = v65;
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)v25 + 5) = v27;
    if (v28)
    {
      if (v28 == (__int128 *)((char *)&v62 + 8))
      {
        *((_QWORD *)v25 + 9) = v25 + 48;
        (*(void (**)(_OWORD *))(*(_QWORD *)v28 + 24))(v28);
        goto LABEL_20;
      }
      v29 = &v65;
      *((_QWORD *)v25 + 9) = v28;
    }
    else
    {
      v29 = v25 + 72;
    }
    *v29 = 0;
LABEL_20:
    v74.__vftable = (std::runtime_error_vtbl *)(v25 + 24);
    v74.__imp_.__imp_ = v25;
    __p[0] = this;
    do
      v30 = __ldxr(v26);
    while (__stxr(v30 + 1, v26));
    __p[1] = 0;
    *(_QWORD *)&v55 = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v31 = operator new(0x20uLL);
    *v31 = &off_1E2521AD0;
    v31[1] = this;
    v31[2] = v25 + 24;
    v31[3] = v25;
    *(_QWORD *)(a2 + 24) = v31;
    *(_BYTE *)(a2 + 72) = 1;
    do
      v32 = __ldaxr(v26);
    while (__stlxr(v32 - 1, v26));
    if (!v32)
    {
      (*(void (**)(char *))(*(_QWORD *)v25 + 16))(v25);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v25);
    }
    v33 = v6;
    if (v67)
      goto LABEL_27;
LABEL_58:
    ((void (*)(std::runtime_error *))v61.~runtime_error)(&v61);
    goto LABEL_59;
  }
LABEL_15:
  std::runtime_error::runtime_error((std::runtime_error *)__p, &v61);
  v55 = v62;
  __p[0] = off_1E2521330;
  v56 = (const char *)v63;
  v57 = (char *)v64;
  v58 = v65;
  if (v65)
  {
    *((_QWORD *)v64 + 2) = &v57;
    v63 = &v64;
    v64 = 0;
    v65 = 0;
  }
  else
  {
    v56 = (const char *)&v57;
  }
  v59 = v66;
  v66 = 0uLL;
  v60 = 1;
  std::runtime_error::runtime_error(&v74, (const std::runtime_error *)__p);
  v75 = v55;
  v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v76 = (char **)v56;
  v77 = v57;
  v78 = v58;
  if (v58)
  {
    *((_QWORD *)v57 + 2) = &v77;
    v56 = (const char *)&v57;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    v76 = &v77;
  }
  v79 = v59;
  v59 = 0uLL;
  std::runtime_error::runtime_error(&v48, &v74);
  v49 = v75;
  v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v40 = (unsigned int *)v77;
  v50 = v76;
  v51 = v77;
  v52 = v78;
  if (v78)
  {
    *((_QWORD *)v77 + 2) = &v51;
    v40 = 0;
    v76 = &v77;
    v77 = 0;
    v78 = 0;
  }
  else
  {
    v50 = &v51;
  }
  v33 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v53 = v79;
  v79 = 0uLL;
  v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v40);
  MEMORY[0x18D7898AC](&v74);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v48);
  *(_OWORD *)(a2 + 16) = v49;
  *(_QWORD *)a2 = off_1E2521330;
  v41 = v51;
  *(_QWORD *)(a2 + 32) = v50;
  *(_QWORD *)(a2 + 40) = v41;
  v42 = a2 + 40;
  v43 = v52;
  *(_QWORD *)(a2 + 48) = v52;
  if (v43)
  {
    *((_QWORD *)v41 + 2) = v42;
    v41 = 0;
    v50 = &v51;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v42;
  }
  v10 = MEMORY[0x1E0DE4FB8];
  *(_OWORD *)(a2 + 56) = v53;
  v53 = 0uLL;
  *(_BYTE *)(a2 + 72) = 0;
  v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, (unsigned int *)v41);
  MEMORY[0x18D7898AC](&v48);
  if (v60)
  {
    __p[0] = off_1E2521330;
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, (unsigned int *)v57);
    MEMORY[0x18D7898AC](__p);
  }
  if (!v67)
    goto LABEL_58;
LABEL_27:
  v34 = (void *)v62;
  *(_QWORD *)&v62 = 0;
  if (v34)
  {
    __p[0] = v34;
    if (!v65)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_OWORD *, void **))(*(_QWORD *)v65 + 48))(v65, __p);
  }
  v35 = v65;
  if (v65 == (__int128 *)((char *)&v62 + 8))
  {
    v36 = 4;
    v35 = (_QWORD *)&v62 + 1;
    goto LABEL_34;
  }
  if (v65)
  {
    v36 = 5;
LABEL_34:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  v37 = (std::__shared_weak_count *)v61.__imp_.__imp_;
  if (v61.__imp_.__imp_)
  {
    v38 = (unint64_t *)(v61.__imp_.__imp_ + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_59:
  v68 = *v33;
  *(_QWORD *)((char *)&v69[-1] + *(_QWORD *)(v68 - 24)) = v33[3];
  v69[0] = v10 + 16;
  if (SBYTE7(v71) < 0)
    operator delete((void *)v70);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v73);
}

void sub_18CC381E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void (**a29)(_QWORD),uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,int a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v44;

  do
    v44 = __ldaxr(v41);
  while (__stlxr(v44 - 1, v41));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0::~$_0((uint64_t)&a19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v42 - 168);
  if (a38)
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&a29);
  else
    (*a29)(&a29);
  std::ostringstream::~ostringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert@<X0>(AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  const char *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *imp;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  uint64_t v27;
  _OWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  char *v41;
  uint64_t v42;
  _OWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::runtime_error v48;
  __int128 v49;
  char **v50;
  char *v51;
  _OWORD *v52;
  __int128 v53;
  void *__p[2];
  __int128 v55;
  const char *v56;
  char *v57;
  _OWORD *v58;
  __int128 v59;
  char v60;
  std::runtime_error v61;
  __int128 v62;
  const char **v63;
  const char *v64;
  _OWORD *v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  _QWORD v69[8];
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73[19];
  std::runtime_error v74;
  __int128 v75;
  char **v76;
  char *v77;
  _OWORD *v78;
  __int128 v79;

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v73[0] = MEMORY[0x1E0DE4FE0] + 64;
  v68 = v7;
  *(_QWORD *)((char *)&v69[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v69[-1] + *(_QWORD *)(v68 - 24));
  std::ios_base::init(v9, v69);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v68 = v4 + 24;
  v73[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v69[0] = MEMORY[0x1E0DE4FB8] + 16;
  v70 = 0u;
  v71 = 0u;
  v72 = 16;
  v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v68, (uint64_t)"INSERT INTO \"", 13);
  v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, **((_QWORD **)this + 1), *(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" (", 3);
  v61 = *(std::runtime_error *)(*((_QWORD *)this + 1) + 16);
  *((_QWORD *)&v62 + 1) = ",";
  v63 = (const char **)"";
  v64 = "";
  LOBYTE(v65) = 0;
  v14 = AMSCore::operator<<(v13, (uint64_t)&v61);
  v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)")\n", 2);
  v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"VALUES (", 8);
  *(_OWORD *)__p = *(_OWORD *)(*((_QWORD *)this + 1) + 16);
  *((_QWORD *)&v55 + 1) = ",";
  v56 = " :";
  v57 = "";
  LOBYTE(v58) = 1;
  v17 = AMSCore::operator<<(v16, (uint64_t)__p);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  v18 = *((_QWORD *)this + 2);
  std::stringbuf::str[abi:fe180100]((uint64_t)v69, (std::string *)__p);
  v19 = *(const char **)(v18 + 8);
  v74.__vftable = *(std::runtime_error_vtbl **)v18;
  v74.__imp_.__imp_ = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v61, (uint64_t)&v74, (uint64_t)__p);
  imp = (std::__shared_weak_count *)v74.__imp_.__imp_;
  if (!v74.__imp_.__imp_)
    goto LABEL_8;
  v23 = (unint64_t *)(v74.__imp_.__imp_ + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v55) & 0x80000000) == 0)
    {
LABEL_9:
      if (v67)
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  else
  {
LABEL_8:
    if ((SBYTE7(v55) & 0x80000000) == 0)
      goto LABEL_9;
  }
  operator delete(__p[0]);
  if (v67)
  {
LABEL_10:
    v25 = (char *)operator new(0x50uLL);
    *((_QWORD *)v25 + 1) = 0;
    v26 = (unint64_t *)(v25 + 8);
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = &off_1E2522A10;
    *(std::runtime_error *)(v25 + 24) = v61;
    v61.__vftable = 0;
    v61.__imp_.__imp_ = 0;
    v27 = v62;
    v28 = v65;
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)v25 + 5) = v27;
    if (v28)
    {
      if (v28 == (__int128 *)((char *)&v62 + 8))
      {
        *((_QWORD *)v25 + 9) = v25 + 48;
        (*(void (**)(_OWORD *))(*(_QWORD *)v28 + 24))(v28);
        goto LABEL_20;
      }
      v29 = &v65;
      *((_QWORD *)v25 + 9) = v28;
    }
    else
    {
      v29 = v25 + 72;
    }
    *v29 = 0;
LABEL_20:
    v74.__vftable = (std::runtime_error_vtbl *)(v25 + 24);
    v74.__imp_.__imp_ = v25;
    __p[0] = this;
    do
      v30 = __ldxr(v26);
    while (__stxr(v30 + 1, v26));
    __p[1] = 0;
    *(_QWORD *)&v55 = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v31 = operator new(0x20uLL);
    *v31 = &off_1E25219C8;
    v31[1] = this;
    v31[2] = v25 + 24;
    v31[3] = v25;
    *(_QWORD *)(a2 + 24) = v31;
    *(_BYTE *)(a2 + 72) = 1;
    do
      v32 = __ldaxr(v26);
    while (__stlxr(v32 - 1, v26));
    if (!v32)
    {
      (*(void (**)(char *))(*(_QWORD *)v25 + 16))(v25);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v25);
    }
    v33 = v6;
    if (v67)
      goto LABEL_27;
LABEL_58:
    ((void (*)(std::runtime_error *))v61.~runtime_error)(&v61);
    goto LABEL_59;
  }
LABEL_15:
  std::runtime_error::runtime_error((std::runtime_error *)__p, &v61);
  v55 = v62;
  __p[0] = off_1E2521330;
  v56 = (const char *)v63;
  v57 = (char *)v64;
  v58 = v65;
  if (v65)
  {
    *((_QWORD *)v64 + 2) = &v57;
    v63 = &v64;
    v64 = 0;
    v65 = 0;
  }
  else
  {
    v56 = (const char *)&v57;
  }
  v59 = v66;
  v66 = 0uLL;
  v60 = 1;
  std::runtime_error::runtime_error(&v74, (const std::runtime_error *)__p);
  v75 = v55;
  v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v76 = (char **)v56;
  v77 = v57;
  v78 = v58;
  if (v58)
  {
    *((_QWORD *)v57 + 2) = &v77;
    v56 = (const char *)&v57;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    v76 = &v77;
  }
  v79 = v59;
  v59 = 0uLL;
  std::runtime_error::runtime_error(&v48, &v74);
  v49 = v75;
  v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v40 = (unsigned int *)v77;
  v50 = v76;
  v51 = v77;
  v52 = v78;
  if (v78)
  {
    *((_QWORD *)v77 + 2) = &v51;
    v40 = 0;
    v76 = &v77;
    v77 = 0;
    v78 = 0;
  }
  else
  {
    v50 = &v51;
  }
  v33 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v53 = v79;
  v79 = 0uLL;
  v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v40);
  MEMORY[0x18D7898AC](&v74);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v48);
  *(_OWORD *)(a2 + 16) = v49;
  *(_QWORD *)a2 = off_1E2521330;
  v41 = v51;
  *(_QWORD *)(a2 + 32) = v50;
  *(_QWORD *)(a2 + 40) = v41;
  v42 = a2 + 40;
  v43 = v52;
  *(_QWORD *)(a2 + 48) = v52;
  if (v43)
  {
    *((_QWORD *)v41 + 2) = v42;
    v41 = 0;
    v50 = &v51;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v42;
  }
  v10 = MEMORY[0x1E0DE4FB8];
  *(_OWORD *)(a2 + 56) = v53;
  v53 = 0uLL;
  *(_BYTE *)(a2 + 72) = 0;
  v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, (unsigned int *)v41);
  MEMORY[0x18D7898AC](&v48);
  if (v60)
  {
    __p[0] = off_1E2521330;
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, (unsigned int *)v57);
    MEMORY[0x18D7898AC](__p);
  }
  if (!v67)
    goto LABEL_58;
LABEL_27:
  v34 = (void *)v62;
  *(_QWORD *)&v62 = 0;
  if (v34)
  {
    __p[0] = v34;
    if (!v65)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_OWORD *, void **))(*(_QWORD *)v65 + 48))(v65, __p);
  }
  v35 = v65;
  if (v65 == (__int128 *)((char *)&v62 + 8))
  {
    v36 = 4;
    v35 = (_QWORD *)&v62 + 1;
    goto LABEL_34;
  }
  if (v65)
  {
    v36 = 5;
LABEL_34:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  v37 = (std::__shared_weak_count *)v61.__imp_.__imp_;
  if (v61.__imp_.__imp_)
  {
    v38 = (unint64_t *)(v61.__imp_.__imp_ + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_59:
  v68 = *v33;
  *(_QWORD *)((char *)&v69[-1] + *(_QWORD *)(v68 - 24)) = v33[3];
  v69[0] = v10 + 16;
  if (SBYTE7(v71) < 0)
    operator delete((void *)v70);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v73);
}

void sub_18CC38930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void (**a29)(_QWORD),uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,int a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v44;

  do
    v44 = __ldaxr(v41);
  while (__stlxr(v44 - 1, v41));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0::~$_0((uint64_t)&a19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v42 - 168);
  if (a38)
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&a29);
  else
    (*a29)(&a29);
  std::ostringstream::~ostringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert@<X0>(AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  const char *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *imp;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  uint64_t v27;
  _OWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  char *v41;
  uint64_t v42;
  _OWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::runtime_error v48;
  __int128 v49;
  char **v50;
  char *v51;
  _OWORD *v52;
  __int128 v53;
  void *__p[2];
  __int128 v55;
  const char *v56;
  char *v57;
  _OWORD *v58;
  __int128 v59;
  char v60;
  std::runtime_error v61;
  __int128 v62;
  const char **v63;
  const char *v64;
  _OWORD *v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  _QWORD v69[8];
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73[19];
  std::runtime_error v74;
  __int128 v75;
  char **v76;
  char *v77;
  _OWORD *v78;
  __int128 v79;

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v73[0] = MEMORY[0x1E0DE4FE0] + 64;
  v68 = v7;
  *(_QWORD *)((char *)&v69[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v69[-1] + *(_QWORD *)(v68 - 24));
  std::ios_base::init(v9, v69);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v68 = v4 + 24;
  v73[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v69[0] = MEMORY[0x1E0DE4FB8] + 16;
  v70 = 0u;
  v71 = 0u;
  v72 = 16;
  v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v68, (uint64_t)"REPLACE INTO \"", 14);
  v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, **((_QWORD **)this + 1), *(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\" (", 3);
  v61 = *(std::runtime_error *)(*((_QWORD *)this + 1) + 16);
  *((_QWORD *)&v62 + 1) = ",";
  v63 = (const char **)"";
  v64 = "";
  LOBYTE(v65) = 0;
  v14 = AMSCore::operator<<(v13, (uint64_t)&v61);
  v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)")\n", 2);
  v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"VALUES (", 8);
  *(_OWORD *)__p = *(_OWORD *)(*((_QWORD *)this + 1) + 16);
  *((_QWORD *)&v55 + 1) = ",";
  v56 = " :";
  v57 = "";
  LOBYTE(v58) = 1;
  v17 = AMSCore::operator<<(v16, (uint64_t)__p);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  v18 = *((_QWORD *)this + 2);
  std::stringbuf::str[abi:fe180100]((uint64_t)v69, (std::string *)__p);
  v19 = *(const char **)(v18 + 8);
  v74.__vftable = *(std::runtime_error_vtbl **)v18;
  v74.__imp_.__imp_ = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v61, (uint64_t)&v74, (uint64_t)__p);
  imp = (std::__shared_weak_count *)v74.__imp_.__imp_;
  if (!v74.__imp_.__imp_)
    goto LABEL_8;
  v23 = (unint64_t *)(v74.__imp_.__imp_ + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v55) & 0x80000000) == 0)
    {
LABEL_9:
      if (v67)
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  else
  {
LABEL_8:
    if ((SBYTE7(v55) & 0x80000000) == 0)
      goto LABEL_9;
  }
  operator delete(__p[0]);
  if (v67)
  {
LABEL_10:
    v25 = (char *)operator new(0x50uLL);
    *((_QWORD *)v25 + 1) = 0;
    v26 = (unint64_t *)(v25 + 8);
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = &off_1E2522A10;
    *(std::runtime_error *)(v25 + 24) = v61;
    v61.__vftable = 0;
    v61.__imp_.__imp_ = 0;
    v27 = v62;
    v28 = v65;
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)v25 + 5) = v27;
    if (v28)
    {
      if (v28 == (__int128 *)((char *)&v62 + 8))
      {
        *((_QWORD *)v25 + 9) = v25 + 48;
        (*(void (**)(_OWORD *))(*(_QWORD *)v28 + 24))(v28);
        goto LABEL_20;
      }
      v29 = &v65;
      *((_QWORD *)v25 + 9) = v28;
    }
    else
    {
      v29 = v25 + 72;
    }
    *v29 = 0;
LABEL_20:
    v74.__vftable = (std::runtime_error_vtbl *)(v25 + 24);
    v74.__imp_.__imp_ = v25;
    __p[0] = this;
    do
      v30 = __ldxr(v26);
    while (__stxr(v30 + 1, v26));
    __p[1] = 0;
    *(_QWORD *)&v55 = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v31 = operator new(0x20uLL);
    *v31 = &off_1E2521B80;
    v31[1] = this;
    v31[2] = v25 + 24;
    v31[3] = v25;
    *(_QWORD *)(a2 + 24) = v31;
    *(_BYTE *)(a2 + 72) = 1;
    do
      v32 = __ldaxr(v26);
    while (__stlxr(v32 - 1, v26));
    if (!v32)
    {
      (*(void (**)(char *))(*(_QWORD *)v25 + 16))(v25);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v25);
    }
    v33 = v6;
    if (v67)
      goto LABEL_27;
LABEL_58:
    ((void (*)(std::runtime_error *))v61.~runtime_error)(&v61);
    goto LABEL_59;
  }
LABEL_15:
  std::runtime_error::runtime_error((std::runtime_error *)__p, &v61);
  v55 = v62;
  __p[0] = off_1E2521330;
  v56 = (const char *)v63;
  v57 = (char *)v64;
  v58 = v65;
  if (v65)
  {
    *((_QWORD *)v64 + 2) = &v57;
    v63 = &v64;
    v64 = 0;
    v65 = 0;
  }
  else
  {
    v56 = (const char *)&v57;
  }
  v59 = v66;
  v66 = 0uLL;
  v60 = 1;
  std::runtime_error::runtime_error(&v74, (const std::runtime_error *)__p);
  v75 = v55;
  v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v76 = (char **)v56;
  v77 = v57;
  v78 = v58;
  if (v58)
  {
    *((_QWORD *)v57 + 2) = &v77;
    v56 = (const char *)&v57;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    v76 = &v77;
  }
  v79 = v59;
  v59 = 0uLL;
  std::runtime_error::runtime_error(&v48, &v74);
  v49 = v75;
  v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v40 = (unsigned int *)v77;
  v50 = v76;
  v51 = v77;
  v52 = v78;
  if (v78)
  {
    *((_QWORD *)v77 + 2) = &v51;
    v40 = 0;
    v76 = &v77;
    v77 = 0;
    v78 = 0;
  }
  else
  {
    v50 = &v51;
  }
  v33 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v53 = v79;
  v79 = 0uLL;
  v74.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v40);
  MEMORY[0x18D7898AC](&v74);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v48);
  *(_OWORD *)(a2 + 16) = v49;
  *(_QWORD *)a2 = off_1E2521330;
  v41 = v51;
  *(_QWORD *)(a2 + 32) = v50;
  *(_QWORD *)(a2 + 40) = v41;
  v42 = a2 + 40;
  v43 = v52;
  *(_QWORD *)(a2 + 48) = v52;
  if (v43)
  {
    *((_QWORD *)v41 + 2) = v42;
    v41 = 0;
    v50 = &v51;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = v42;
  }
  v10 = MEMORY[0x1E0DE4FB8];
  *(_OWORD *)(a2 + 56) = v53;
  v53 = 0uLL;
  *(_BYTE *)(a2 + 72) = 0;
  v48.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, (unsigned int *)v41);
  MEMORY[0x18D7898AC](&v48);
  if (v60)
  {
    __p[0] = off_1E2521330;
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, (unsigned int *)v57);
    MEMORY[0x18D7898AC](__p);
  }
  if (!v67)
    goto LABEL_58;
LABEL_27:
  v34 = (void *)v62;
  *(_QWORD *)&v62 = 0;
  if (v34)
  {
    __p[0] = v34;
    if (!v65)
      std::__throw_bad_function_call[abi:fe180100]();
    (*(void (**)(_OWORD *, void **))(*(_QWORD *)v65 + 48))(v65, __p);
  }
  v35 = v65;
  if (v65 == (__int128 *)((char *)&v62 + 8))
  {
    v36 = 4;
    v35 = (_QWORD *)&v62 + 1;
    goto LABEL_34;
  }
  if (v65)
  {
    v36 = 5;
LABEL_34:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  v37 = (std::__shared_weak_count *)v61.__imp_.__imp_;
  if (v61.__imp_.__imp_)
  {
    v38 = (unint64_t *)(v61.__imp_.__imp_ + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_59:
  v68 = *v33;
  *(_QWORD *)((char *)&v69[-1] + *(_QWORD *)(v68 - 24)) = v33[3];
  v69[0] = v10 + 16;
  if (SBYTE7(v71) < 0)
    operator delete((void *)v70);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D789B58](v73);
}

void sub_18CC39078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void (**a29)(_QWORD),uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,int a39,char a40)
{
  std::__shared_weak_count *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v44;

  do
    v44 = __ldaxr(v41);
  while (__stlxr(v44 - 1, v41));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0::~$_0((uint64_t)&a19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v42 - 168);
  if (a38)
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&a29);
  else
    (*a29)(&a29);
  std::ostringstream::~ostringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::runtime_error_vtbl *v6;
  uint64_t v7;
  std::runtime_error_vtbl *v8;
  std::runtime_error_vtbl *v9;
  std::ios_base *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  int64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  const char *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *imp;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  unint64_t *v52;
  std::runtime_error_vtbl *v53;
  std::__libcpp_refstring *v54;
  std::runtime_error_vtbl **v55;
  unsigned int *v56;
  std::runtime_error *v57;
  char *v58;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v60;
  uint64_t result;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned int *v65;
  std::runtime_error *v66;
  char *v67;
  std::runtime_error_vtbl *v68;
  std::runtime_error_vtbl *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  const void *v73;
  int64_t v74;
  void **v75;
  void (__cdecl *v76)(std::runtime_error *__hidden);
  void (__cdecl *v77)(std::runtime_error *__hidden);
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unsigned int *v89;
  std::runtime_error *v90;
  char *v91;
  std::runtime_error_vtbl *v92;
  std::runtime_error_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::runtime_error_vtbl *v97;
  _QWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::runtime_error_vtbl *v103;
  std::runtime_error v106;
  std::runtime_error v107;
  std::runtime_error_vtbl *v108;
  char *v109;
  std::runtime_error_vtbl *v110;
  __int128 v111;
  std::runtime_error v112;
  std::runtime_error v113;
  unsigned int **v114;
  unsigned int *v115;
  std::runtime_error_vtbl *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  int v120;
  uint64_t v121[19];
  std::runtime_error v122;
  std::runtime_error v123;
  void **v124;
  void *v125;
  std::runtime_error_vtbl *v126;
  __int128 v127;
  char v128;
  std::runtime_error v129;
  std::runtime_error v130;
  unsigned int **v131;
  unsigned int *v132;
  std::runtime_error_vtbl *v133;
  __int128 v134;
  char v135;
  std::runtime_error v136;
  std::runtime_error v137;
  void **v138;
  std::runtime_error_vtbl *v139;
  std::runtime_error_vtbl *v140;
  __int128 v141;

  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::ColumnDesc>>((uint64_t)&v122, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, a2[1]);
  if (v128)
  {
    LOBYTE(v129.__vftable) = 0;
    v135 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v112, &v122);
    v113 = v123;
    v112.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v114 = (unsigned int **)v124;
    v115 = (unsigned int *)v125;
    v116 = v126;
    if (v126)
    {
      *((_QWORD *)v125 + 2) = &v115;
      v124 = &v125;
      v125 = 0;
      v126 = 0;
    }
    else
    {
      v114 = &v115;
    }
    v117 = v127;
    v127 = 0uLL;
    LOBYTE(v118) = 0;
    std::runtime_error::runtime_error(&v129, &v112);
    v130 = v113;
    v129.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v131 = v114;
    v132 = v115;
    v133 = v116;
    if (v116)
    {
      *((_QWORD *)v115 + 2) = &v132;
      v114 = &v115;
      v115 = 0;
      v116 = 0;
    }
    else
    {
      v131 = &v132;
    }
    v134 = v117;
    v117 = 0uLL;
    v135 = 1;
    if (!(_BYTE)v118)
      ((void (*)(AMSCore::Error *))v112.~runtime_error)((AMSCore::Error *)&v112);
    if (!v128)
    {
      ((void (*)(std::runtime_error *))v122.~runtime_error)(&v122);
      if (v135)
        goto LABEL_37;
      goto LABEL_4;
    }
  }
  if (v135)
  {
LABEL_37:
    std::runtime_error::runtime_error(&v112, &v129);
    v113 = v130;
    v112.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v114 = v131;
    v115 = v132;
    v116 = v133;
    if (v133)
    {
      *((_QWORD *)v132 + 2) = &v115;
      v131 = &v132;
      v132 = 0;
      v133 = 0;
    }
    else
    {
      v114 = &v115;
    }
    v117 = v134;
    v134 = 0uLL;
    std::runtime_error::runtime_error(&v122, &v112);
    v123 = v113;
    v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v56 = v115;
    v124 = (void **)v114;
    v125 = v115;
    v126 = v116;
    if (v116)
    {
      *((_QWORD *)v115 + 2) = &v125;
      v56 = 0;
      v114 = &v115;
      v115 = 0;
      v116 = 0;
    }
    else
    {
      v124 = &v125;
    }
    v127 = v117;
    v117 = 0uLL;
    v112.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v114, v56);
    MEMORY[0x18D7898AC](&v112);
    v57 = std::runtime_error::runtime_error((std::runtime_error *)a4, &v122);
    v57[1] = v123;
    v57->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v58 = (char *)v125;
    v57[2].__vftable = (std::runtime_error_vtbl *)v124;
    v57[2].__imp_.__imp_ = v58;
    p_imp = (std::runtime_error_vtbl *)&v57[2].__imp_;
    v60 = v126;
    v57[3].__vftable = v126;
    if (v60)
    {
      *((_QWORD *)v58 + 2) = p_imp;
      v58 = 0;
      v124 = &v125;
      v125 = 0;
      v126 = 0;
    }
    else
    {
      v57[2].__vftable = p_imp;
    }
    *(_OWORD *)&v57[3].__imp_.__imp_ = v127;
    v127 = 0uLL;
    LOBYTE(v57[4].__imp_.__imp_) = 0;
    v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, (unsigned int *)v58);
    result = MEMORY[0x18D7898AC](&v122);
    if (v135)
    {
      v129.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v62 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
      if (*((_QWORD *)&v134 + 1))
      {
        v63 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
LABEL_72:
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        goto LABEL_74;
      }
      goto LABEL_74;
    }
    return result;
  }
LABEL_4:
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v122, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a3, a3[1]);
  if (v128)
  {
    LOBYTE(v129.__vftable) = 0;
    v135 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v112, &v122);
    v113 = v123;
    v112.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v114 = (unsigned int **)v124;
    v115 = (unsigned int *)v125;
    v116 = v126;
    if (v126)
    {
      *((_QWORD *)v125 + 2) = &v115;
      v124 = &v125;
      v125 = 0;
      v126 = 0;
    }
    else
    {
      v114 = &v115;
    }
    v117 = v127;
    v127 = 0uLL;
    LOBYTE(v118) = 0;
    std::runtime_error::runtime_error(&v129, &v112);
    v130 = v113;
    v129.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v131 = v114;
    v132 = v115;
    v133 = v116;
    if (v116)
    {
      *((_QWORD *)v115 + 2) = &v132;
      v114 = &v115;
      v115 = 0;
      v116 = 0;
    }
    else
    {
      v131 = &v132;
    }
    v134 = v117;
    v117 = 0uLL;
    v135 = 1;
    if (!(_BYTE)v118)
      ((void (*)(AMSCore::Error *))v112.~runtime_error)((AMSCore::Error *)&v112);
    if (!v128)
    {
      ((void (*)(std::runtime_error *))v122.~runtime_error)(&v122);
      if (v135)
        goto LABEL_59;
LABEL_7:
      v103 = (std::runtime_error_vtbl *)a3;
      v6 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v7 = MEMORY[0x1E0DE4FE0] + 64;
      v8 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v9 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v121[0] = MEMORY[0x1E0DE4FE0] + 64;
      v112.__vftable = v8;
      *(std::runtime_error_vtbl **)((char *)&v112.__vftable + (unint64_t)v8[-1].~runtime_error) = v9;
      v10 = (std::ios_base *)((char *)&v112 + (unint64_t)v112.__vftable[-1].~runtime_error);
      std::ios_base::init(v10, &v112.__imp_);
      v10[1].__vftable = 0;
      v10[1].__fmtflags_ = -1;
      v112.__vftable = v6 + 1;
      v121[0] = v7;
      std::streambuf::basic_streambuf();
      v112.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v118 = 0u;
      v119 = 0u;
      v120 = 16;
      v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v112, (uint64_t)"UPDATE ", 7);
      v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
      v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"SET ", 4);
      v16 = (const void *)*a2;
      v15 = a2[1];
      v17 = v15 - *a2;
      if (v15 != *a2)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v17 >> 3) > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::string>::__throw_length_error[abi:fe180100]();
        v18 = (uint64_t *)operator new(v17);
        memcpy(v18, v16, v17);
        v19 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"", 0);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)"", 0);
        v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, *v18, v18[1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)" = :", 4);
        v21 = (_QWORD *)std::ostream::operator<<();
        v22 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v21, (uint64_t)"_set_", 5);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v22, *v18, v18[1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"", 0);
        if (v17 != 24)
        {
          v23 = &v18[v17 >> 3];
          v24 = v18 + 3;
          v25 = 1;
          do
          {
            v26 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v26, (uint64_t)"", 0);
            v27 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, *v24, v24[1]);
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v27, (uint64_t)" = :", 4);
            v28 = (_QWORD *)std::ostream::operator<<();
            v29 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v28, (uint64_t)"_set_", 5);
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v29, *v24, v24[1]);
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"", 0);
            v24 += 3;
            ++v25;
          }
          while (v24 != v23);
        }
        operator delete(v18);
      }
      v30 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
      v31 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v30, (uint64_t)"WHERE (", 7);
      v32 = AMSCore::operator<<(v31, *(__int128 **)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
      v33 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v32, (uint64_t)") in (\n", 7);
      v34 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v33, (uint64_t)"SELECT ", 7);
      v35 = AMSCore::operator<<(v34, *(__int128 **)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
      v36 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v35, (uint64_t)"\n", 1);
      v37 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v36, (uint64_t)"FROM ", 5);
      v38 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v37, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      v39 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
      v129.__vftable = v103;
      v41 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
      v42 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v41, (uint64_t)"LIMIT :limit", 12);
      v43 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v42, (uint64_t)"\n", 1);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v43, (uint64_t)")", 1);
      v44 = *(_QWORD *)(a1 + 16);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v112.__imp_, (std::string *)&v122);
      v45 = *(const char **)(v44 + 8);
      v136.__vftable = *(std::runtime_error_vtbl **)v44;
      v136.__imp_.__imp_ = v45;
      if (v45)
      {
        v46 = (unint64_t *)(v45 + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      AMSCore::SQLiteStatement::make((uint64_t)&v129, (uint64_t)&v136, (uint64_t)&v122);
      imp = (std::__shared_weak_count *)v136.__imp_.__imp_;
      if (v136.__imp_.__imp_)
      {
        v49 = (unint64_t *)(v136.__imp_.__imp_ + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      if (SHIBYTE(v123.__vftable) < 0)
      {
        operator delete(v122.__vftable);
        if (v135)
        {
LABEL_23:
          v51 = (char *)operator new(0x50uLL);
          *((_QWORD *)v51 + 1) = 0;
          v52 = (unint64_t *)(v51 + 8);
          *((_QWORD *)v51 + 2) = 0;
          *(_QWORD *)v51 = &off_1E2522A10;
          *(std::runtime_error *)(v51 + 24) = v129;
          v129.__vftable = 0;
          v129.__imp_.__imp_ = 0;
          v53 = v130.__vftable;
          v54 = (std::__libcpp_refstring *)v133;
          v130.__vftable = 0;
          *((_QWORD *)v51 + 5) = v53;
          if (v54)
          {
            if (v54 == &v130.__imp_)
            {
              *((_QWORD *)v51 + 9) = v51 + 48;
              (*((void (**)(std::__libcpp_refstring *))v54->__imp_ + 3))(v54);
LABEL_82:
              v106.__vftable = (std::runtime_error_vtbl *)(v51 + 24);
              v106.__imp_.__imp_ = v51;
              v136.__vftable = (std::runtime_error_vtbl *)(v51 + 24);
              v136.__imp_.__imp_ = v51;
              do
                v71 = __ldxr(v52);
              while (__stxr(v71 + 1, v52));
              v137 = (std::runtime_error)0;
              v138 = 0;
              v73 = (const void *)*a2;
              v72 = a2[1];
              v74 = v72 - *a2;
              if (v72 != *a2)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v74 >> 3) > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::string>::__throw_length_error[abi:fe180100]();
                v137.__vftable = (std::runtime_error_vtbl *)operator new(v74);
                v137.__imp_.__imp_ = (const char *)v137.__vftable;
                v75 = (void **)(&v137.~runtime_error + (v74 >> 3));
                v138 = v75;
                memcpy(v137.__vftable, v73, v74);
                v137.__imp_.__imp_ = (const char *)v75;
              }
              v139 = 0;
              v140 = 0;
              *(_QWORD *)&v141 = 0;
              v77 = v103->~runtime_error;
              v76 = v103->~runtime_error_0;
              v78 = (char *)v76 - (char *)v103->~runtime_error;
              if (v76 != v103->~runtime_error)
              {
                if (v78 < 0)
                  std::vector<std::string>::__throw_length_error[abi:fe180100]();
                v139 = (std::runtime_error_vtbl *)operator new((char *)v76 - (char *)v103->~runtime_error);
                v140 = v139;
                v79 = (char *)v139 + 32 * (v78 >> 5);
                *(_QWORD *)&v141 = v79;
                memcpy(v139, v77, v78 - 4);
                v140 = (std::runtime_error_vtbl *)v79;
              }
              AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0((uint64_t)&v122, (uint64_t)&v136);
              *(_QWORD *)(a4 + 24) = 0;
              v80 = operator new(0x48uLL);
              *v80 = &off_1E2521A78;
              AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0((uint64_t)(v80 + 1), (uint64_t)&v122);
              *(_QWORD *)(a4 + 24) = v80;
              if (v125)
              {
                v126 = (std::runtime_error_vtbl *)v125;
                operator delete(v125);
              }
              if (v123.__vftable)
              {
                v123.__imp_.__imp_ = (const char *)v123.__vftable;
                operator delete(v123.__vftable);
              }
              v81 = (std::__shared_weak_count *)v122.__imp_.__imp_;
              if (v122.__imp_.__imp_)
              {
                v82 = (unint64_t *)(v122.__imp_.__imp_ + 8);
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              *(_BYTE *)(a4 + 72) = 1;
              if (v139)
              {
                v140 = v139;
                operator delete(v139);
              }
              if (v137.__vftable)
              {
                v137.__imp_.__imp_ = (const char *)v137.__vftable;
                operator delete(v137.__vftable);
              }
              v84 = (std::__shared_weak_count *)v136.__imp_.__imp_;
              if (v136.__imp_.__imp_)
              {
                v85 = (unint64_t *)(v136.__imp_.__imp_ + 8);
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              if (v106.__imp_.__imp_)
              {
                v87 = (unint64_t *)(v106.__imp_.__imp_ + 8);
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  (*(void (**)(const char *))(*(_QWORD *)v106.__imp_.__imp_ + 16))(v106.__imp_.__imp_);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v106.__imp_.__imp_);
                }
              }
              goto LABEL_130;
            }
            v55 = &v133;
            *((_QWORD *)v51 + 9) = v54;
          }
          else
          {
            v55 = (std::runtime_error_vtbl **)(v51 + 72);
          }
          *v55 = 0;
          goto LABEL_82;
        }
      }
      else if (v135)
      {
        goto LABEL_23;
      }
      std::runtime_error::runtime_error(&v122, &v129);
      v123 = v130;
      v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v124 = (void **)v131;
      v125 = v132;
      v126 = v133;
      if (v133)
      {
        *((_QWORD *)v132 + 2) = &v125;
        v131 = &v132;
        v132 = 0;
        v133 = 0;
      }
      else
      {
        v124 = &v125;
      }
      v127 = v134;
      v134 = 0uLL;
      v128 = 1;
      std::runtime_error::runtime_error(&v136, &v122);
      v137 = v123;
      v136.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v138 = v124;
      v139 = (std::runtime_error_vtbl *)v125;
      v140 = v126;
      if (v126)
      {
        *((_QWORD *)v125 + 2) = &v139;
        v124 = &v125;
        v125 = 0;
        v126 = 0;
      }
      else
      {
        v138 = (void **)&v139;
      }
      v141 = v127;
      v127 = 0uLL;
      std::runtime_error::runtime_error(&v106, &v136);
      v107 = v137;
      v106.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v89 = (unsigned int *)v139;
      v108 = (std::runtime_error_vtbl *)v138;
      v109 = (char *)v139;
      v110 = v140;
      if (v140)
      {
        v139->what = (const char *(__cdecl *)(const std::runtime_error *__hidden))&v109;
        v89 = 0;
        v138 = (void **)&v139;
        v139 = 0;
        v140 = 0;
      }
      else
      {
        v108 = (std::runtime_error_vtbl *)&v109;
      }
      v111 = v141;
      v141 = 0uLL;
      v136.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v138, v89);
      MEMORY[0x18D7898AC](&v136);
      v90 = std::runtime_error::runtime_error((std::runtime_error *)a4, &v106);
      v90[1] = v107;
      v90->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v91 = v109;
      v90[2].__vftable = v108;
      v90[2].__imp_.__imp_ = v91;
      v92 = (std::runtime_error_vtbl *)&v90[2].__imp_;
      v93 = v110;
      v90[3].__vftable = v110;
      if (v93)
      {
        *((_QWORD *)v91 + 2) = v92;
        v91 = 0;
        v108 = (std::runtime_error_vtbl *)&v109;
        v109 = 0;
        v110 = 0;
      }
      else
      {
        v90[2].__vftable = v92;
      }
      *(_OWORD *)&v90[3].__imp_.__imp_ = v111;
      v111 = 0uLL;
      LOBYTE(v90[4].__imp_.__imp_) = 0;
      v106.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v108, (unsigned int *)v91);
      MEMORY[0x18D7898AC](&v106);
      if (v128)
      {
        v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
        v94 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
        if (*((_QWORD *)&v127 + 1))
        {
          v95 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, (unsigned int *)v125);
        MEMORY[0x18D7898AC](&v122);
      }
LABEL_130:
      if (!v135)
      {
        ((void (*)(std::runtime_error *))v129.~runtime_error)(&v129);
LABEL_145:
        v112.__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F60];
        *(std::runtime_error_vtbl **)((char *)&v112.__vftable + (unint64_t)v112.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
        v112.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
        if (SBYTE7(v119) < 0)
          operator delete((void *)v118);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        return MEMORY[0x18D789B58](v121);
      }
      v97 = v130.__vftable;
      v130.__vftable = 0;
      if (v97)
      {
        v122.__vftable = v97;
        if (!v133)
          std::__throw_bad_function_call[abi:fe180100]();
        (*((void (**)(std::runtime_error_vtbl *, std::runtime_error *))v133->~runtime_error + 6))(v133, &v122);
      }
      v98 = &v133->~runtime_error;
      if (v133 == (std::runtime_error_vtbl *)&v130.__imp_)
      {
        v99 = 4;
        v98 = &v130.__imp_.__imp_;
      }
      else
      {
        if (!v133)
        {
LABEL_140:
          v100 = (std::__shared_weak_count *)v129.__imp_.__imp_;
          if (v129.__imp_.__imp_)
          {
            v101 = (unint64_t *)(v129.__imp_.__imp_ + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          goto LABEL_145;
        }
        v99 = 5;
      }
      (*(void (**)(void))(*v98 + 8 * v99))();
      goto LABEL_140;
    }
  }
  if (!v135)
    goto LABEL_7;
LABEL_59:
  std::runtime_error::runtime_error(&v112, &v129);
  v113 = v130;
  v112.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v114 = v131;
  v115 = v132;
  v116 = v133;
  if (v133)
  {
    *((_QWORD *)v132 + 2) = &v115;
    v131 = &v132;
    v132 = 0;
    v133 = 0;
  }
  else
  {
    v114 = &v115;
  }
  v117 = v134;
  v134 = 0uLL;
  std::runtime_error::runtime_error(&v122, &v112);
  v123 = v113;
  v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v65 = v115;
  v124 = (void **)v114;
  v125 = v115;
  v126 = v116;
  if (v116)
  {
    *((_QWORD *)v115 + 2) = &v125;
    v65 = 0;
    v114 = &v115;
    v115 = 0;
    v116 = 0;
  }
  else
  {
    v124 = &v125;
  }
  v127 = v117;
  v117 = 0uLL;
  v112.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v114, v65);
  MEMORY[0x18D7898AC](&v112);
  v66 = std::runtime_error::runtime_error((std::runtime_error *)a4, &v122);
  v66[1] = v123;
  v66->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v67 = (char *)v125;
  v66[2].__vftable = (std::runtime_error_vtbl *)v124;
  v66[2].__imp_.__imp_ = v67;
  v68 = (std::runtime_error_vtbl *)&v66[2].__imp_;
  v69 = v126;
  v66[3].__vftable = v126;
  if (v69)
  {
    *((_QWORD *)v67 + 2) = v68;
    v67 = 0;
    v124 = &v125;
    v125 = 0;
    v126 = 0;
  }
  else
  {
    v66[2].__vftable = v68;
  }
  *(_OWORD *)&v66[3].__imp_.__imp_ = v127;
  v127 = 0uLL;
  LOBYTE(v66[4].__imp_.__imp_) = 0;
  v122.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v124, (unsigned int *)v67);
  result = MEMORY[0x18D7898AC](&v122);
  if (v135)
  {
    v129.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v62 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
    if (*((_QWORD *)&v134 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v64 = __ldaxr(v70);
      while (__stlxr(v64 - 1, v70));
      goto LABEL_72;
    }
LABEL_74:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v131, v132);
    return MEMORY[0x18D7898AC](&v129);
  }
  return result;
}

void sub_18CC3A144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,void *a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  void *v63;
  uint64_t v64;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;

  operator delete(v63);
  if (__p)
  {
    a63 = (uint64_t)__p;
    operator delete(__p);
    v66 = a59;
    if (!a59)
    {
LABEL_3:
      v67 = a58;
      if (!a58)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v66 = a59;
    if (!a59)
      goto LABEL_3;
  }
  a60 = (uint64_t)v66;
  operator delete(v66);
  v67 = a58;
  if (!a58)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v67->__shared_owners_;
  do
    v69 = __ldaxr(p_shared_owners);
  while (__stlxr(v69 - 1, p_shared_owners));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
LABEL_11:
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0((_QWORD *)(v64 - 168));
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a15);
  if (*(_BYTE *)(v64 - 184))
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>((_QWORD *)(v64 - 256));
  else
    (**(void (***)(uint64_t))(v64 - 256))(v64 - 256);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::runtime_error_vtbl *v7;
  uint64_t v8;
  std::runtime_error_vtbl *v9;
  std::runtime_error_vtbl *v10;
  std::ios_base *v11;
  _QWORD *v12;
  uint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  unsigned int *v22;
  std::runtime_error *v23;
  unsigned int *v24;
  std::runtime_error_vtbl *p_imp;
  std::runtime_error_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int *v30;
  std::runtime_error *v31;
  unsigned int *v32;
  std::runtime_error_vtbl *v33;
  std::runtime_error_vtbl *v34;
  unint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  std::runtime_error_vtbl *p_dst;
  uint64_t v44;
  void *imp;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  unint64_t *v55;
  std::runtime_error_vtbl *v56;
  std::__libcpp_refstring *v57;
  void **v58;
  uint64_t v59;
  const char *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  std::runtime_error_vtbl *v68;
  std::__libcpp_refstring *v69;
  std::runtime_error_vtbl **v70;
  unsigned int *v71;
  std::runtime_error *v72;
  unsigned int *v73;
  std::runtime_error_vtbl *v74;
  std::runtime_error_vtbl *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  const void *v81;
  int64_t v82;
  unsigned int *v83;
  uint64_t v84;
  const void *v85;
  int64_t v86;
  char *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unsigned int *v104;
  std::runtime_error *v105;
  unsigned int *v106;
  std::runtime_error_vtbl *v107;
  std::runtime_error_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::runtime_error_vtbl *v112;
  _QWORD *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  std::runtime_error_vtbl *v121;
  _QWORD *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t *v127;
  std::runtime_error v129;
  std::runtime_error v130;
  void *v131;
  unsigned int *v132;
  std::runtime_error_vtbl *v133;
  void *__p[2];
  char *v135;
  std::runtime_error v136;
  std::runtime_error v137;
  std::runtime_error_vtbl *v138;
  unsigned int *v139;
  std::runtime_error_vtbl *v140;
  __int128 v141;
  std::runtime_error v142;
  std::runtime_error v143;
  unsigned int **v144;
  unsigned int *v145;
  std::runtime_error_vtbl *v146;
  __int128 v147;
  char v148;
  char *v149;
  std::__shared_weak_count *v150;
  std::runtime_error v151;
  std::runtime_error v152;
  unsigned int **v153;
  unsigned int *v154;
  void *__src;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  int v159;
  uint64_t v160[19];
  std::runtime_error v161;
  std::runtime_error v162;
  unsigned int **v163;
  unsigned int *v164;
  std::runtime_error_vtbl *v165;
  __int128 v166;
  char v167;
  std::runtime_error __dst;
  std::runtime_error v169;
  unsigned int **v170;
  unsigned int *v171;
  std::runtime_error_vtbl *v172;
  __int128 v173;
  char v174;

  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v161, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, a2[1]);
  if (v167)
  {
    LOBYTE(__dst.__vftable) = 0;
    v174 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v151, &v161);
    v152 = v162;
    v151.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v153 = v163;
    v154 = v164;
    __src = v165;
    if (v165)
    {
      *((_QWORD *)v164 + 2) = &v154;
      v163 = &v164;
      v164 = 0;
      v165 = 0;
    }
    else
    {
      v153 = &v154;
    }
    v156 = v166;
    v166 = 0uLL;
    LOBYTE(v157) = 0;
    std::runtime_error::runtime_error(&__dst, &v151);
    v169 = v152;
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v170 = v153;
    v171 = v154;
    v172 = (std::runtime_error_vtbl *)__src;
    if (__src)
    {
      *((_QWORD *)v154 + 2) = &v171;
      v153 = &v154;
      v154 = 0;
      __src = 0;
    }
    else
    {
      v170 = &v171;
    }
    v173 = v156;
    v156 = 0uLL;
    v174 = 1;
    if (!(_BYTE)v157)
      ((void (*)(AMSCore::Error *))v151.~runtime_error)((AMSCore::Error *)&v151);
    if (!v167)
    {
      ((void (*)(std::runtime_error *))v161.~runtime_error)(&v161);
      if (v174)
        goto LABEL_24;
      goto LABEL_4;
    }
  }
  if (v174)
  {
LABEL_24:
    std::runtime_error::runtime_error(&v151, &__dst);
    v152 = v169;
    v151.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v153 = v170;
    v154 = v171;
    __src = v172;
    if (v172)
    {
      *((_QWORD *)v171 + 2) = &v154;
      v170 = &v171;
      v171 = 0;
      v172 = 0;
    }
    else
    {
      v153 = &v154;
    }
    v156 = v173;
    v173 = 0uLL;
    std::runtime_error::runtime_error(&v161, &v151);
    v162 = v152;
    v22 = v154;
    v161.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v163 = v153;
    v164 = v154;
    v165 = (std::runtime_error_vtbl *)__src;
    if (__src)
    {
      *((_QWORD *)v154 + 2) = &v164;
      v22 = 0;
      v153 = &v154;
      v154 = 0;
      __src = 0;
    }
    else
    {
      v163 = &v164;
    }
    v166 = v156;
    v156 = 0uLL;
    v151.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v153, v22);
    MEMORY[0x18D7898AC](&v151);
    v23 = std::runtime_error::runtime_error((std::runtime_error *)a4, &v161);
    v23[1] = v162;
    v23->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v24 = v164;
    v23[2].__vftable = (std::runtime_error_vtbl *)v163;
    v23[2].__imp_.__imp_ = (const char *)v24;
    p_imp = (std::runtime_error_vtbl *)&v23[2].__imp_;
    v26 = v165;
    v23[3].__vftable = v165;
    if (v26)
    {
      *((_QWORD *)v24 + 2) = p_imp;
      v24 = 0;
      v163 = &v164;
      v164 = 0;
      v165 = 0;
    }
    else
    {
      v23[2].__vftable = p_imp;
    }
    *(_OWORD *)&v23[3].__imp_.__imp_ = v166;
    v166 = 0uLL;
    LOBYTE(v23[4].__imp_.__imp_) = 0;
    v161.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v163, v24);
    MEMORY[0x18D7898AC](&v161);
    if (v174)
    {
      __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
      if (*((_QWORD *)&v173 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
LABEL_59:
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        goto LABEL_61;
      }
      goto LABEL_61;
    }
    return;
  }
LABEL_4:
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::ColumnDesc>>((uint64_t)&v161, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a3, a3[1]);
  if (v167)
  {
    LOBYTE(__dst.__vftable) = 0;
    v174 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v151, &v161);
    v152 = v162;
    v151.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v153 = v163;
    v154 = v164;
    __src = v165;
    if (v165)
    {
      *((_QWORD *)v164 + 2) = &v154;
      v163 = &v164;
      v164 = 0;
      v165 = 0;
    }
    else
    {
      v153 = &v154;
    }
    v156 = v166;
    v166 = 0uLL;
    LOBYTE(v157) = 0;
    std::runtime_error::runtime_error(&__dst, &v151);
    v169 = v152;
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v170 = v153;
    v171 = v154;
    v172 = (std::runtime_error_vtbl *)__src;
    if (__src)
    {
      *((_QWORD *)v154 + 2) = &v171;
      v153 = &v154;
      v154 = 0;
      __src = 0;
    }
    else
    {
      v170 = &v171;
    }
    v173 = v156;
    v156 = 0uLL;
    v174 = 1;
    if (!(_BYTE)v157)
      ((void (*)(AMSCore::Error *))v151.~runtime_error)((AMSCore::Error *)&v151);
    if (!v167)
    {
      ((void (*)(std::runtime_error *))v161.~runtime_error)(&v161);
      if (v174)
        goto LABEL_46;
LABEL_7:
      v7 = (std::runtime_error_vtbl *)MEMORY[0x1E0DE4FE0];
      v8 = MEMORY[0x1E0DE4FE0] + 64;
      v9 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 8);
      v10 = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 16);
      v160[0] = MEMORY[0x1E0DE4FE0] + 64;
      v151.__vftable = v9;
      *(std::runtime_error_vtbl **)((char *)&v151.__vftable + (unint64_t)v9[-1].~runtime_error) = v10;
      v11 = (std::ios_base *)((char *)&v151 + (unint64_t)v151.__vftable[-1].~runtime_error);
      std::ios_base::init(v11, &v151.__imp_);
      v11[1].__vftable = 0;
      v11[1].__fmtflags_ = -1;
      v151.__vftable = v7 + 1;
      v160[0] = v8;
      std::streambuf::basic_streambuf();
      v151.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
      v157 = 0u;
      v158 = 0u;
      v159 = 16;
      v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v151, (uint64_t)"SELECT ", 7);
      v13 = a3;
      v14 = (_BYTE *)*a3;
      v127 = v13;
      v15 = (_BYTE *)v13[1];
      v16 = v15 - v14;
      if (v15 == v14)
      {
        v17 = 0;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (v16 >> 3) > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::string>::__throw_length_error[abi:fe180100]();
        v17 = (uint64_t *)operator new(v16);
        memcpy(v17, v14, v16);
        v18 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"", 0);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v18, (uint64_t)"", 0);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, *v17, v17[1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"", 0);
        if (v16 != 24)
        {
          v19 = 3;
          do
          {
            v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)",", 1);
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)"", 0);
            v21 = &v17[v19];
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, v17[v19], v17[v19 + 1]);
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"", 0);
            v19 += 3;
          }
          while (v21 + 3 != &v17[v16 >> 3]);
        }
      }
      v36 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
      v37 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v36, (uint64_t)"FROM \"", 6);
      v38 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v37, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
      v39 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v38, (uint64_t)"\"\n", 2);
      __dst.__vftable = (std::runtime_error_vtbl *)a2;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
      if (v17)
        operator delete(v17);
      v41 = *(_QWORD *)(a1 + 16);
      if ((v159 & 0x10) != 0)
      {
        v44 = *((_QWORD *)&v158 + 1);
        if (*((_QWORD *)&v158 + 1) < (unint64_t)v156)
        {
          *((_QWORD *)&v158 + 1) = v156;
          v44 = v156;
        }
        imp = __src;
        v42 = v44 - (_QWORD)__src;
        if (v44 - (uint64_t)__src >= 0)
          goto LABEL_74;
      }
      else
      {
        if ((v159 & 8) == 0)
        {
          v42 = 0;
          HIBYTE(v169.__vftable) = 0;
          p_dst = (std::runtime_error_vtbl *)&__dst;
          goto LABEL_82;
        }
        imp = (void *)v152.__imp_.__imp_;
        v42 = (char *)v154 - v152.__imp_.__imp_;
        if ((char *)v154 - v152.__imp_.__imp_ >= 0)
        {
LABEL_74:
          if (v42 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:fe180100]();
          if (v42 >= 0x17)
          {
            v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v42 | 7) != 0x17)
              v46 = v42 | 7;
            v47 = v46 + 1;
            p_dst = (std::runtime_error_vtbl *)operator new(v46 + 1);
            __dst.__imp_.__imp_ = (const char *)v42;
            v169.__vftable = (std::runtime_error_vtbl *)(v47 | 0x8000000000000000);
            __dst.__vftable = p_dst;
          }
          else
          {
            HIBYTE(v169.__vftable) = v42;
            p_dst = (std::runtime_error_vtbl *)&__dst;
            if (!v42)
            {
LABEL_82:
              *((_BYTE *)&p_dst->~runtime_error + v42) = 0;
              v48 = *(const char **)(v41 + 8);
              v142.__vftable = *(std::runtime_error_vtbl **)v41;
              v142.__imp_.__imp_ = v48;
              if (v48)
              {
                v49 = (unint64_t *)(v48 + 8);
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              AMSCore::SQLiteStatement::make((uint64_t)&v161, (uint64_t)&v142, (uint64_t)&__dst);
              v51 = (std::__shared_weak_count *)v142.__imp_.__imp_;
              if (v142.__imp_.__imp_)
              {
                v52 = (unint64_t *)(v142.__imp_.__imp_ + 8);
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              if (SHIBYTE(v169.__vftable) < 0)
              {
                operator delete(__dst.__vftable);
                if (v167)
                {
LABEL_92:
                  v54 = (char *)operator new(0x50uLL);
                  *((_QWORD *)v54 + 1) = 0;
                  v55 = (unint64_t *)(v54 + 8);
                  *((_QWORD *)v54 + 2) = 0;
                  *(_QWORD *)v54 = &off_1E2522A10;
                  *(std::runtime_error *)(v54 + 24) = v161;
                  v161.__vftable = 0;
                  v161.__imp_.__imp_ = 0;
                  v56 = v162.__vftable;
                  v57 = (std::__libcpp_refstring *)v165;
                  v162.__vftable = 0;
                  *((_QWORD *)v54 + 5) = v56;
                  if (v57)
                  {
                    if (v57 == &v162.__imp_)
                    {
                      *((_QWORD *)v54 + 9) = v54 + 48;
                      (*((void (**)(std::__libcpp_refstring *))v57->__imp_ + 3))(v57);
LABEL_101:
                      v149 = v54 + 24;
                      v150 = (std::__shared_weak_count *)v54;
                      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v151, (uint64_t)" LIMIT :limit", 13);
                      v59 = *(_QWORD *)(a1 + 16);
                      std::stringbuf::str[abi:fe180100]((uint64_t)&v151.__imp_, (std::string *)&__dst);
                      v60 = *(const char **)(v59 + 8);
                      v129.__vftable = *(std::runtime_error_vtbl **)v59;
                      v129.__imp_.__imp_ = v60;
                      if (v60)
                      {
                        v61 = (unint64_t *)(v60 + 8);
                        do
                          v62 = __ldxr(v61);
                        while (__stxr(v62 + 1, v61));
                      }
                      AMSCore::SQLiteStatement::make((uint64_t)&v142, (uint64_t)&v129, (uint64_t)&__dst);
                      v63 = (std::__shared_weak_count *)v129.__imp_.__imp_;
                      if (v129.__imp_.__imp_)
                      {
                        v64 = (unint64_t *)(v129.__imp_.__imp_ + 8);
                        do
                          v65 = __ldaxr(v64);
                        while (__stlxr(v65 - 1, v64));
                        if (!v65)
                        {
                          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                          std::__shared_weak_count::__release_weak(v63);
                        }
                      }
                      if (SHIBYTE(v169.__vftable) < 0)
                        operator delete(__dst.__vftable);
                      if (!v148)
                      {
                        std::runtime_error::runtime_error(&__dst, &v142);
                        v169 = v143;
                        __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                        v170 = v144;
                        v171 = v145;
                        v172 = v146;
                        if (v146)
                        {
                          *((_QWORD *)v145 + 2) = &v171;
                          v144 = &v145;
                          v145 = 0;
                          v146 = 0;
                        }
                        else
                        {
                          v170 = &v171;
                        }
                        v173 = v147;
                        v147 = 0uLL;
                        v174 = 1;
                        std::runtime_error::runtime_error(&v129, &__dst);
                        v130 = v169;
                        v129.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                        v131 = v170;
                        v132 = v171;
                        v133 = v172;
                        if (v172)
                        {
                          *((_QWORD *)v171 + 2) = &v132;
                          v170 = &v171;
                          v171 = 0;
                          v172 = 0;
                        }
                        else
                        {
                          v131 = &v132;
                        }
                        *(_OWORD *)__p = v173;
                        v173 = 0uLL;
                        std::runtime_error::runtime_error(&v136, &v129);
                        v137 = v130;
                        v136.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                        v104 = v132;
                        v138 = (std::runtime_error_vtbl *)v131;
                        v139 = v132;
                        v140 = v133;
                        if (v133)
                        {
                          *((_QWORD *)v132 + 2) = &v139;
                          v104 = 0;
                          v131 = &v132;
                          v132 = 0;
                          v133 = 0;
                        }
                        else
                        {
                          v138 = (std::runtime_error_vtbl *)&v139;
                        }
                        v141 = *(_OWORD *)__p;
                        __p[0] = 0;
                        __p[1] = 0;
                        v129.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v131, v104);
                        MEMORY[0x18D7898AC](&v129);
                        v105 = std::runtime_error::runtime_error((std::runtime_error *)a4, &v136);
                        v105[1] = v137;
                        v105->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                        v106 = v139;
                        v105[2].__vftable = v138;
                        v105[2].__imp_.__imp_ = (const char *)v106;
                        v107 = (std::runtime_error_vtbl *)&v105[2].__imp_;
                        v108 = v140;
                        v105[3].__vftable = v140;
                        if (v108)
                        {
                          *((_QWORD *)v106 + 2) = v107;
                          v106 = 0;
                          v138 = (std::runtime_error_vtbl *)&v139;
                          v139 = 0;
                          v140 = 0;
                        }
                        else
                        {
                          v105[2].__vftable = v107;
                        }
                        *(_OWORD *)&v105[3].__imp_.__imp_ = v141;
                        v141 = 0uLL;
                        LOBYTE(v105[4].__imp_.__imp_) = 0;
                        v136.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v138, v106);
                        MEMORY[0x18D7898AC](&v136);
                        if (v174)
                        {
                          __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                          v109 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
                          if (*((_QWORD *)&v173 + 1))
                          {
                            v110 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
                            do
                              v111 = __ldaxr(v110);
                            while (__stlxr(v111 - 1, v110));
                            if (!v111)
                            {
                              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                              std::__shared_weak_count::__release_weak(v109);
                            }
                          }
                          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v171);
                          MEMORY[0x18D7898AC](&__dst);
                        }
LABEL_198:
                        if (!v148)
                        {
                          ((void (*)(std::runtime_error *))v142.~runtime_error)(&v142);
LABEL_213:
                          v118 = v150;
                          if (v150)
                          {
                            p_shared_owners = (unint64_t *)&v150->__shared_owners_;
                            do
                              v120 = __ldaxr(p_shared_owners);
                            while (__stlxr(v120 - 1, p_shared_owners));
                            if (!v120)
                            {
                              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                              std::__shared_weak_count::__release_weak(v118);
                            }
                          }
                          goto LABEL_218;
                        }
                        v112 = v143.__vftable;
                        v143.__vftable = 0;
                        if (v112)
                        {
                          __dst.__vftable = v112;
                          if (!v146)
                            std::__throw_bad_function_call[abi:fe180100]();
                          (*((void (**)(std::runtime_error_vtbl *, std::runtime_error *))v146->~runtime_error
                           + 6))(v146, &__dst);
                        }
                        v113 = &v146->~runtime_error;
                        if (v146 == (std::runtime_error_vtbl *)&v143.__imp_)
                        {
                          v114 = 4;
                          v113 = &v143.__imp_.__imp_;
                        }
                        else
                        {
                          if (!v146)
                          {
LABEL_208:
                            v115 = (std::__shared_weak_count *)v142.__imp_.__imp_;
                            if (v142.__imp_.__imp_)
                            {
                              v116 = (unint64_t *)(v142.__imp_.__imp_ + 8);
                              do
                                v117 = __ldaxr(v116);
                              while (__stlxr(v117 - 1, v116));
                              if (!v117)
                              {
                                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                                std::__shared_weak_count::__release_weak(v115);
                              }
                            }
                            goto LABEL_213;
                          }
                          v114 = 5;
                        }
                        (*(void (**)(void))(*v113 + 8 * v114))();
                        goto LABEL_208;
                      }
                      v66 = (char *)operator new(0x50uLL);
                      *((_QWORD *)v66 + 1) = 0;
                      v67 = (unint64_t *)(v66 + 8);
                      *((_QWORD *)v66 + 2) = 0;
                      *(_QWORD *)v66 = &off_1E2522A10;
                      *(std::runtime_error *)(v66 + 24) = v142;
                      v142.__vftable = 0;
                      v142.__imp_.__imp_ = 0;
                      v68 = v143.__vftable;
                      v69 = (std::__libcpp_refstring *)v146;
                      v143.__vftable = 0;
                      *((_QWORD *)v66 + 5) = v68;
                      if (v69)
                      {
                        if (v69 == &v143.__imp_)
                        {
                          *((_QWORD *)v66 + 9) = v66 + 48;
                          (*((void (**)(std::__libcpp_refstring *))v69->__imp_ + 3))(v69);
LABEL_138:
                          v136.__vftable = (std::runtime_error_vtbl *)(v66 + 24);
                          v136.__imp_.__imp_ = v66;
                          v129.__vftable = (std::runtime_error_vtbl *)(v54 + 24);
                          v129.__imp_.__imp_ = v54;
                          do
                            v79 = __ldxr(v55);
                          while (__stxr(v79 + 1, v55));
                          v130.__vftable = (std::runtime_error_vtbl *)(v66 + 24);
                          v130.__imp_.__imp_ = v66;
                          do
                            v80 = __ldxr(v67);
                          while (__stxr(v80 + 1, v67));
                          v131 = 0;
                          v132 = 0;
                          v133 = 0;
                          v81 = (const void *)*a2;
                          v82 = a2[1] - *a2;
                          if (v82)
                          {
                            if (v82 < 0)
                              std::vector<std::string>::__throw_length_error[abi:fe180100]();
                            v131 = operator new(v82);
                            v132 = (unsigned int *)v131;
                            v83 = (unsigned int *)((char *)v131 + 32 * (v82 >> 5));
                            v133 = (std::runtime_error_vtbl *)v83;
                            memcpy(v131, v81, v82 - 4);
                            v132 = v83;
                          }
                          __p[0] = 0;
                          __p[1] = 0;
                          v135 = 0;
                          v85 = (const void *)*v127;
                          v84 = v127[1];
                          v86 = v84 - *v127;
                          if (v84 != *v127)
                          {
                            if (0xAAAAAAAAAAAAAAABLL * (v86 >> 3) > 0xAAAAAAAAAAAAAAALL)
                              std::vector<std::string>::__throw_length_error[abi:fe180100]();
                            __p[0] = operator new(v86);
                            __p[1] = __p[0];
                            v87 = (char *)__p[0] + 8 * (v86 >> 3);
                            v135 = v87;
                            memcpy(__p[0], v85, v86);
                            __p[1] = v87;
                          }
                          AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::$_0((uint64_t)&__dst, (uint64_t)&v129);
                          *(_QWORD *)(a4 + 24) = 0;
                          v88 = operator new(0x58uLL);
                          *v88 = &off_1E2521A20;
                          AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::$_0((uint64_t)(v88 + 1), (uint64_t)&__dst);
                          *(_QWORD *)(a4 + 24) = v88;
                          if ((_QWORD)v173)
                          {
                            *((_QWORD *)&v173 + 1) = v173;
                            operator delete((void *)v173);
                          }
                          if (v170)
                          {
                            v171 = (unsigned int *)v170;
                            operator delete(v170);
                          }
                          v89 = (std::__shared_weak_count *)v169.__imp_.__imp_;
                          if (v169.__imp_.__imp_)
                          {
                            v90 = (unint64_t *)(v169.__imp_.__imp_ + 8);
                            do
                              v91 = __ldaxr(v90);
                            while (__stlxr(v91 - 1, v90));
                            if (!v91)
                            {
                              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                              std::__shared_weak_count::__release_weak(v89);
                            }
                          }
                          v92 = (std::__shared_weak_count *)__dst.__imp_.__imp_;
                          if (__dst.__imp_.__imp_)
                          {
                            v93 = (unint64_t *)(__dst.__imp_.__imp_ + 8);
                            do
                              v94 = __ldaxr(v93);
                            while (__stlxr(v94 - 1, v93));
                            if (!v94)
                            {
                              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                              std::__shared_weak_count::__release_weak(v92);
                            }
                          }
                          *(_BYTE *)(a4 + 72) = 1;
                          if (__p[0])
                          {
                            __p[1] = __p[0];
                            operator delete(__p[0]);
                          }
                          if (v131)
                          {
                            v132 = (unsigned int *)v131;
                            operator delete(v131);
                          }
                          v95 = (std::__shared_weak_count *)v130.__imp_.__imp_;
                          if (v130.__imp_.__imp_)
                          {
                            v96 = (unint64_t *)(v130.__imp_.__imp_ + 8);
                            do
                              v97 = __ldaxr(v96);
                            while (__stlxr(v97 - 1, v96));
                            if (!v97)
                            {
                              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                              std::__shared_weak_count::__release_weak(v95);
                            }
                          }
                          v98 = (std::__shared_weak_count *)v129.__imp_.__imp_;
                          if (v129.__imp_.__imp_)
                          {
                            v99 = (unint64_t *)(v129.__imp_.__imp_ + 8);
                            do
                              v100 = __ldaxr(v99);
                            while (__stlxr(v100 - 1, v99));
                            if (!v100)
                            {
                              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                              std::__shared_weak_count::__release_weak(v98);
                            }
                          }
                          v101 = (std::__shared_weak_count *)v136.__imp_.__imp_;
                          if (v136.__imp_.__imp_)
                          {
                            v102 = (unint64_t *)(v136.__imp_.__imp_ + 8);
                            do
                              v103 = __ldaxr(v102);
                            while (__stlxr(v103 - 1, v102));
                            if (!v103)
                            {
                              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                              std::__shared_weak_count::__release_weak(v101);
                            }
                          }
                          goto LABEL_198;
                        }
                        v70 = &v146;
                        *((_QWORD *)v66 + 9) = v69;
                      }
                      else
                      {
                        v70 = (std::runtime_error_vtbl **)(v66 + 72);
                      }
                      *v70 = 0;
                      goto LABEL_138;
                    }
                    v58 = (void **)&v165;
                    *((_QWORD *)v54 + 9) = v57;
                  }
                  else
                  {
                    v58 = (void **)(v54 + 72);
                  }
                  *v58 = 0;
                  goto LABEL_101;
                }
              }
              else if (v167)
              {
                goto LABEL_92;
              }
              std::runtime_error::runtime_error(&__dst, &v161);
              v169 = v162;
              __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v170 = v163;
              v171 = v164;
              v172 = v165;
              if (v165)
              {
                *((_QWORD *)v164 + 2) = &v171;
                v163 = &v164;
                v164 = 0;
                v165 = 0;
              }
              else
              {
                v170 = &v171;
              }
              v173 = v166;
              v166 = 0uLL;
              v174 = 1;
              std::runtime_error::runtime_error(&v142, &__dst);
              v143 = v169;
              v142.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v144 = v170;
              v145 = v171;
              v146 = v172;
              if (v172)
              {
                *((_QWORD *)v171 + 2) = &v145;
                v170 = &v171;
                v171 = 0;
                v172 = 0;
              }
              else
              {
                v144 = &v145;
              }
              v147 = v173;
              v173 = 0uLL;
              std::runtime_error::runtime_error(&v129, &v142);
              v130 = v143;
              v129.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v71 = v145;
              v131 = v144;
              v132 = v145;
              v133 = v146;
              if (v146)
              {
                *((_QWORD *)v145 + 2) = &v132;
                v71 = 0;
                v144 = &v145;
                v145 = 0;
                v146 = 0;
              }
              else
              {
                v131 = &v132;
              }
              *(_OWORD *)__p = v147;
              v147 = 0uLL;
              v142.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v144, v71);
              MEMORY[0x18D7898AC](&v142);
              v72 = std::runtime_error::runtime_error((std::runtime_error *)a4, &v129);
              v72[1] = v130;
              v72->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              v73 = v132;
              v72[2].__vftable = (std::runtime_error_vtbl *)v131;
              v72[2].__imp_.__imp_ = (const char *)v73;
              v74 = (std::runtime_error_vtbl *)&v72[2].__imp_;
              v75 = v133;
              v72[3].__vftable = v133;
              if (v75)
              {
                *((_QWORD *)v73 + 2) = v74;
                v73 = 0;
                v131 = &v132;
                v132 = 0;
                v133 = 0;
              }
              else
              {
                v72[2].__vftable = v74;
              }
              *(std::runtime_error *)((char *)v72 + 56) = *(std::runtime_error *)__p;
              __p[0] = 0;
              __p[1] = 0;
              LOBYTE(v72[4].__imp_.__imp_) = 0;
              v129.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v131, v73);
              MEMORY[0x18D7898AC](&v129);
              if (v174)
              {
                __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
                v76 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
                if (*((_QWORD *)&v173 + 1))
                {
                  v77 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v171);
                MEMORY[0x18D7898AC](&__dst);
              }
LABEL_218:
              if (!v167)
              {
                ((void (*)(std::runtime_error *))v161.~runtime_error)(&v161);
LABEL_233:
                v151.__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E0DE4F60];
                *(std::runtime_error_vtbl **)((char *)&v151.__vftable
                                            + (unint64_t)v151.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E0DE4F60] + 24);
                v151.__imp_.__imp_ = (const char *)(MEMORY[0x1E0DE4FB8] + 16);
                if (SBYTE7(v158) < 0)
                  operator delete((void *)v157);
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                MEMORY[0x18D789B58](v160);
                return;
              }
              v121 = v162.__vftable;
              v162.__vftable = 0;
              if (v121)
              {
                __dst.__vftable = v121;
                if (!v165)
                  std::__throw_bad_function_call[abi:fe180100]();
                (*((void (**)(std::runtime_error_vtbl *, std::runtime_error *))v165->~runtime_error + 6))(v165, &__dst);
              }
              v122 = &v165->~runtime_error;
              if (v165 == (std::runtime_error_vtbl *)&v162.__imp_)
              {
                v123 = 4;
                v122 = &v162.__imp_.__imp_;
              }
              else
              {
                if (!v165)
                {
LABEL_228:
                  v124 = (std::__shared_weak_count *)v161.__imp_.__imp_;
                  if (v161.__imp_.__imp_)
                  {
                    v125 = (unint64_t *)(v161.__imp_.__imp_ + 8);
                    do
                      v126 = __ldaxr(v125);
                    while (__stlxr(v126 - 1, v125));
                    if (!v126)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }
                  goto LABEL_233;
                }
                v123 = 5;
              }
              (*(void (**)(void))(*v122 + 8 * v123))();
              goto LABEL_228;
            }
          }
          memmove(p_dst, imp, v42);
          goto LABEL_82;
        }
      }
      __break(1u);
      return;
    }
  }
  if (!v174)
    goto LABEL_7;
LABEL_46:
  std::runtime_error::runtime_error(&v151, &__dst);
  v152 = v169;
  v151.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v153 = v170;
  v154 = v171;
  __src = v172;
  if (v172)
  {
    *((_QWORD *)v171 + 2) = &v154;
    v170 = &v171;
    v171 = 0;
    v172 = 0;
  }
  else
  {
    v153 = &v154;
  }
  v156 = v173;
  v173 = 0uLL;
  std::runtime_error::runtime_error(&v161, &v151);
  v162 = v152;
  v30 = v154;
  v161.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v163 = v153;
  v164 = v154;
  v165 = (std::runtime_error_vtbl *)__src;
  if (__src)
  {
    *((_QWORD *)v154 + 2) = &v164;
    v30 = 0;
    v153 = &v154;
    v154 = 0;
    __src = 0;
  }
  else
  {
    v163 = &v164;
  }
  v166 = v156;
  v156 = 0uLL;
  v151.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v153, v30);
  MEMORY[0x18D7898AC](&v151);
  v31 = std::runtime_error::runtime_error((std::runtime_error *)a4, &v161);
  v31[1] = v162;
  v31->__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  v32 = v164;
  v31[2].__vftable = (std::runtime_error_vtbl *)v163;
  v31[2].__imp_.__imp_ = (const char *)v32;
  v33 = (std::runtime_error_vtbl *)&v31[2].__imp_;
  v34 = v165;
  v31[3].__vftable = v165;
  if (v34)
  {
    *((_QWORD *)v32 + 2) = v33;
    v32 = 0;
    v163 = &v164;
    v164 = 0;
    v165 = 0;
  }
  else
  {
    v31[2].__vftable = v33;
  }
  *(_OWORD *)&v31[3].__imp_.__imp_ = v166;
  v166 = 0uLL;
  LOBYTE(v31[4].__imp_.__imp_) = 0;
  v161.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v163, v32);
  MEMORY[0x18D7898AC](&v161);
  if (v174)
  {
    __dst.__vftable = (std::runtime_error_vtbl *)off_1E2521330;
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
    if (*((_QWORD *)&v173 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
      do
        v29 = __ldaxr(v35);
      while (__stlxr(v29 - 1, v35));
      goto LABEL_59;
    }
LABEL_61:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v171);
    MEMORY[0x18D7898AC](&__dst);
  }
}

