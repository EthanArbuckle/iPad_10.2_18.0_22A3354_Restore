uint64_t type metadata accessor for DefaultVoiceSource()
{
  uint64_t result;

  result = qword_1ED1B5B40;
  if (!qword_1ED1B5B40)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A39D87E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v4 = sub_1A39A4820(&qword_1ED1B53B0);
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39D8844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  objc_msgSend(v5, sel_addObserver_, v4);

  *(_QWORD *)(v0 + 16) = sub_1A39DB790();
  sub_1A39A4820((uint64_t *)&unk_1ED1B53C0);
  sub_1A3AB4D3C();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39D8900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A39A4820((uint64_t *)&unk_1ED1B53C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A39D8978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A39A4820((uint64_t *)&unk_1ED1B53C0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39B1604;
  return sub_1A39D87E0((uint64_t)v5, v3, v4);
}

uint64_t sub_1A39D89E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39D8A50()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 216))();
}

uint64_t Array<A>.voiceIdMap.getter(unint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  id v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned __int8 v64;

  v2 = (_QWORD *)sub_1A39D9208(MEMORY[0x1E0DEE9D8]);
  if (a1 >> 62)
    goto LABEL_25;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35 = v2;
  if (!v3)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
LABEL_3:
  if (v3 >= 1)
  {
    v4 = 0;
    v37 = a1;
    v38 = a1 & 0xC000000000000001;
    v5 = v35;
    v36 = v3;
    while (1)
    {
      if (v38)
        v6 = (id)MEMORY[0x1A85960B8](v4, a1);
      else
        v6 = *(id *)(a1 + 8 * v4 + 32);
      v7 = v6;
      CoreSynthesizer.Voice.init(resource:)(v7, (uint64_t)&v51);
      if (v52)
      {
        v39 = v7;
        v41 = v53;
        v42 = v54;
        v8 = v56;
        v43 = v55;
        v44 = v52;
        v45 = v57;
        v46 = v58;
        v47 = v59;
        v48 = v60;
        v9 = v62;
        v49 = v61;
        v10 = v64;
        v11 = v63;
        v40 = v51;
        a1 = sub_1A3AB49F4();
        v13 = v12;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v50 = v13;
        v51 = v5;
        v2 = v5;
        v15 = sub_1A39A2734(a1, v13);
        v17 = v5;
        v18 = v15;
        v19 = v17[2];
        v20 = (v16 & 1) == 0;
        v21 = v19 + v20;
        if (__OFADD__(v19, v20))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v3 = sub_1A3AB5480();
          v35 = v2;
          if (!v3)
            goto LABEL_26;
          goto LABEL_3;
        }
        v22 = v16;
        if (v17[3] >= v21)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1A39DA438();
          v23 = v50;
        }
        else
        {
          sub_1A39DA008(v21, isUniquelyReferenced_nonNull_native);
          v23 = v50;
          v24 = sub_1A39A2734(a1, v50);
          if ((v22 & 1) != (v25 & 1))
            goto LABEL_28;
          v18 = v24;
        }
        v2 = v51;
        v26 = ((v11 | (unint64_t)(v10 << 32)) >> 32) & 1;
        if ((v22 & 1) != 0)
        {
          v27 = v51[7] + 104 * v18;
          v28 = *(void **)(v27 + 80);
          *(_QWORD *)v27 = v40;
          *(_QWORD *)(v27 + 8) = v44;
          *(_QWORD *)(v27 + 16) = v41;
          *(_QWORD *)(v27 + 24) = v42;
          *(_QWORD *)(v27 + 32) = v43;
          *(_WORD *)(v27 + 40) = v8;
          *(_QWORD *)(v27 + 48) = v45;
          *(_BYTE *)(v27 + 56) = v46;
          *(_QWORD *)(v27 + 64) = v47;
          *(_QWORD *)(v27 + 72) = v48;
          *(_QWORD *)(v27 + 80) = v49;
          *(_DWORD *)(v27 + 88) = v9;
          *(_BYTE *)(v27 + 92) = BYTE4(v9) & 1;
          *(_DWORD *)(v27 + 96) = v11;
          *(_BYTE *)(v27 + 100) = v26;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v51[(v18 >> 6) + 8] |= 1 << v18;
          v29 = (unint64_t *)(v2[6] + 16 * v18);
          *v29 = a1;
          v29[1] = v23;
          v30 = v2[7] + 104 * v18;
          *(_QWORD *)v30 = v40;
          *(_QWORD *)(v30 + 8) = v44;
          *(_QWORD *)(v30 + 16) = v41;
          *(_QWORD *)(v30 + 24) = v42;
          *(_QWORD *)(v30 + 32) = v43;
          *(_WORD *)(v30 + 40) = v8;
          *(_QWORD *)(v30 + 48) = v45;
          *(_BYTE *)(v30 + 56) = v46;
          *(_QWORD *)(v30 + 64) = v47;
          *(_QWORD *)(v30 + 72) = v48;
          *(_QWORD *)(v30 + 80) = v49;
          *(_DWORD *)(v30 + 88) = v9;
          *(_BYTE *)(v30 + 92) = BYTE4(v9) & 1;
          *(_DWORD *)(v30 + 96) = v11;
          *(_BYTE *)(v30 + 100) = v26;
          v31 = v2[2];
          v32 = __OFADD__(v31, 1);
          v33 = v31 + 1;
          if (v32)
            goto LABEL_24;
          v2[2] = v33;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v2;
        v3 = v36;
        a1 = v37;
      }
      else
      {

        v2 = v5;
      }
      if (v3 == ++v4)
        goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t sub_1A39D8E58()
{
  uint64_t v0;
  void (*v1)(uint64_t (*)(), uint64_t);

  v1 = *(void (**)(uint64_t (*)(), uint64_t))(**(_QWORD **)(v0
                                                                   + OBJC_IVAR____TtC12TextToSpeech18DefaultVoiceSource_debouncer)
                                                     + 184);
  swift_retain();
  v1(sub_1A39DA67C, v0);
  return swift_release();
}

uint64_t sub_1A39D8EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD v5[2];

  v0 = sub_1A39A4820(&qword_1ED1B53B0);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[1] = sub_1A39DB790();
  sub_1A39A4820((uint64_t *)&unk_1ED1B53C0);
  sub_1A3AB4D3C();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t DefaultVoiceSource.deinit()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  objc_msgSend(v1, sel_removeObserver_, v0);

  swift_release();
  swift_release();
  v2 = v0 + OBJC_IVAR____TtC12TextToSpeech18DefaultVoiceSource_streamContinuation;
  v3 = sub_1A39A4820((uint64_t *)&unk_1ED1B53C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  return v0;
}

uint64_t DefaultVoiceSource.__deallocating_deinit()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  objc_msgSend(v1, sel_removeObserver_, v0);

  swift_release();
  swift_release();
  v2 = v0 + OBJC_IVAR____TtC12TextToSpeech18DefaultVoiceSource_streamContinuation;
  v3 = sub_1A39A4820((uint64_t *)&unk_1ED1B53C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1A39D9118()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for DefaultVoiceSource();
  v1 = sub_1A39B9F44(&qword_1EE6D2F68, (uint64_t (*)(uint64_t))type metadata accessor for DefaultVoiceSource, (uint64_t)&protocol conformance descriptor for DefaultVoiceSource);
  return TTSActor.unownedExecutor.getter(v0, v1);
}

uint64_t sub_1A39D9160()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x80))();
}

uint64_t sub_1A39D9198()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x98))();
}

uint64_t sub_1A39D91D0()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x70))();
}

unint64_t sub_1A39D9208(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t result;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  int v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_13;
  }
  sub_1A39A4820((uint64_t *)&unk_1ED1B5440);
  v2 = sub_1A3AB54B0();
  v3 = (_QWORD *)v2;
  v23 = *(_QWORD *)(a1 + 16);
  if (!v23)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v22 = v2 + 64;
  result = swift_retain();
  v5 = 0;
  v6 = (_BYTE *)(a1 + 148);
  while (!__OFADD__(v5, 1))
  {
    v7 = *(_QWORD *)(v6 - 108);
    v8 = *(_QWORD *)(v6 - 92);
    v9 = *(_QWORD *)(v6 - 84);
    v10 = *(_QWORD *)(v6 - 68);
    v34 = *(_QWORD *)(v6 - 36);
    v35 = *(_QWORD *)(v6 - 28);
    v11 = *(void **)(v6 - 20);
    if (!v7)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = v11;
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    v24 = v5 + 1;
    v12 = *(_QWORD *)(v6 - 116);
    v13 = *(_QWORD *)(v6 - 100);
    v25 = *(_QWORD *)(v6 - 76);
    v28 = *(v6 - 59);
    v29 = *(v6 - 60);
    v27 = *(_QWORD *)(v6 - 52);
    v26 = *(v6 - 44);
    v32 = *(v6 - 8);
    v33 = *((_DWORD *)v6 - 3);
    v30 = *v6;
    v31 = *((_DWORD *)v6 - 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v11;
    result = sub_1A39A2734(v12, v7);
    if ((v15 & 1) != 0)
      goto LABEL_15;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v3[6] + 16 * result);
    *v16 = v12;
    v16[1] = v7;
    v17 = v3[7] + 104 * result;
    *(_QWORD *)v17 = v13;
    *(_QWORD *)(v17 + 8) = v8;
    *(_QWORD *)(v17 + 16) = v9;
    *(_QWORD *)(v17 + 24) = v25;
    *(_QWORD *)(v17 + 32) = v10;
    *(_BYTE *)(v17 + 40) = v29;
    *(_BYTE *)(v17 + 41) = v28;
    *(_QWORD *)(v17 + 48) = v27;
    *(_BYTE *)(v17 + 56) = v26;
    *(_QWORD *)(v17 + 64) = v34;
    *(_QWORD *)(v17 + 72) = v35;
    *(_QWORD *)(v17 + 80) = v14;
    *(_DWORD *)(v17 + 88) = v33;
    *(_BYTE *)(v17 + 92) = v32;
    *(_DWORD *)(v17 + 96) = v31;
    *(_BYTE *)(v17 + 100) = v30;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_16;
    v3[2] = v20;
    ++v5;
    v6 += 120;
    if (v24 == v23)
      goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

double CoreSynthesizer.Voice.init(resource:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  id v24;
  char v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  unsigned __int8 v38[8];
  char v39[15];
  unsigned __int8 v40;
  _QWORD v41[8];

  sub_1A39A18C8(v41);
  sub_1A3A3A2E0();
  sub_1A3A38174();
  v4 = TTSAXResource.primaryLocales.getter();
  v5 = sub_1A39DB39C((uint64_t)v4);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRelease();

LABEL_66:
    *(_QWORD *)(a2 + 93) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  TTSAXResource.secondaryLocales.getter();
  v7 = sub_1A39DB39C(v6);
  swift_bridgeObjectRelease();
  v37 = objc_msgSend(a1, sel_synthesisProviderVoice);
  v8 = objc_msgSend(a1, sel_voiceId);
  if (!v8)
    goto LABEL_72;
  v9 = v8;
  v34 = sub_1A3AB497C();
  v36 = v10;

  sub_1A3A64A3C((unint64_t)objc_msgSend(a1, sel_footprint), &v40);
  if (objc_msgSend(a1, sel_isNoveltyVoice))
  {
    *(_QWORD *)v39 = *(_QWORD *)sub_1A3A39180();
    sub_1A39AE770();
    sub_1A3AB51D4();
    sub_1A39DB56C();
    if ((sub_1A3AB494C() & 1) == 0)
      sub_1A3AB5204();
  }
  if (objc_msgSend(a1, sel_isDefault))
  {
    *(_QWORD *)v39 = *(_QWORD *)sub_1A3A391E0();
    sub_1A39AE770();
    sub_1A3AB51D4();
    sub_1A39DB56C();
    if ((sub_1A3AB494C() & 1) == 0)
      sub_1A3AB5204();
  }
  if (objc_msgSend(a1, sel_isSystemVoice))
  {
    *(_QWORD *)v39 = *(_QWORD *)sub_1A3A391C8();
    sub_1A39AE770();
    sub_1A3AB51D4();
    sub_1A39DB56C();
    if ((sub_1A3AB494C() & 1) == 0)
      sub_1A3AB5204();
  }
  if (objc_msgSend(a1, sel_isInstalled))
  {
    *(_QWORD *)v39 = *(_QWORD *)sub_1A3A39210();
    sub_1A39AE770();
    sub_1A3AB51D4();
    sub_1A39DB56C();
    if ((sub_1A3AB494C() & 1) == 0)
      sub_1A3AB5204();
  }
  if ((TTSAXResource.isDownloading.getter() & 1) != 0)
  {
    *(_QWORD *)v39 = *(_QWORD *)sub_1A3A392C4();
    sub_1A39AE770();
    sub_1A3AB51D4();
    sub_1A39DB56C();
    if ((sub_1A3AB494C() & 1) == 0)
      sub_1A3AB5204();
  }
  if (objc_msgSend(a1, sel_canBeDownloaded))
  {
    *(_QWORD *)v39 = *(_QWORD *)sub_1A3A392AC();
    sub_1A39AE770();
    sub_1A3AB51D4();
    sub_1A39DB56C();
    if ((sub_1A3AB494C() & 1) == 0)
      sub_1A3AB5204();
  }
  v11 = objc_msgSend(a1, sel_name);
  if (!v11)
  {
LABEL_73:
    __break(1u);
    JUMPOUT(0x1A39D9F50);
  }
  v12 = v11;
  v13 = sub_1A3AB497C();
  v15 = v14;

  sub_1A3A64A20((uint64_t)objc_msgSend(a1, sel_gender), v39);
  v16 = v39[0];
  v17 = (unint64_t)objc_msgSend(a1, sel_assetSize);
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_69;
  }
  v18 = v17;
  if (HIDWORD(v17))
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v33 = v16;
  v19 = (unint64_t)objc_msgSend(a1, sel_assetSize);
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v20 = v19;
  if (HIDWORD(v19))
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v32 = v13;
  v35 = v15;
  v21 = sub_1A3A39228();
  *(_QWORD *)v39 = *v21;
  sub_1A39AE770();
  sub_1A3AB51D4();
  sub_1A39DB56C();
  if ((sub_1A3AB494C() & 1) == 0)
    sub_1A3AB5204();
  v22 = 9;
  switch((unint64_t)objc_msgSend(a1, sel_type))
  {
    case 2uLL:
      goto LABEL_64;
    case 3uLL:
      v23 = sub_1A3A391F8();
      *(_QWORD *)v39 = *v23;
      sub_1A3AB51D4();
      if ((sub_1A3AB494C() & 1) == 0)
        sub_1A3AB5204();
      v24 = objc_msgSend(a1, sel_subtype);
      if (v24 == (id)4)
      {
        v22 = 0;
      }
      else if (v24 == (id)7)
      {
        v39[0] = v40;
        v22 = 2;
        v38[0] = 2;
        sub_1A39DB5B0();
        if ((sub_1A3AB494C() & 1) != 0)
        {
          *(_QWORD *)v39 = *(_QWORD *)sub_1A3A392AC();
          sub_1A3AB51D4();
          if ((sub_1A3AB51EC() & 1) == 0)
            sub_1A3AB51F8();
          *(_QWORD *)v39 = *v23;
          sub_1A3AB51D4();
          if ((sub_1A3AB51EC() & 1) == 0)
            sub_1A3AB51F8();
          v22 = 3;
        }
      }
      else
      {
        if (v24 != (id)6)
          goto LABEL_65;
        v22 = 1;
      }
      goto LABEL_64;
    case 4uLL:
      if (objc_msgSend(a1, sel_footprint) == (id)2)
      {
        *(_QWORD *)v39 = *(_QWORD *)sub_1A3A39240();
        sub_1A3AB51D4();
        if ((sub_1A3AB494C() & 1) == 0)
          sub_1A3AB5204();
      }
      v22 = 5;
      goto LABEL_64;
    case 6uLL:
    case 7uLL:
      v22 = 4;
      goto LABEL_64;
    case 9uLL:
      v22 = 10;
      if (!objc_msgSend(v37, sel_isFirstParty))
        goto LABEL_59;
      if (objc_msgSend(v37, sel_isPersonalVoice))
      {
        *(_QWORD *)v39 = *(_QWORD *)sub_1A3A39198();
        sub_1A3AB51D4();
        if ((sub_1A3AB494C() & 1) == 0)
          sub_1A3AB5204();
        v22 = 7;
      }
      else
      {
        swift_bridgeObjectRetain();
        v25 = sub_1A3AB4AFC();
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
        {
          v22 = 8;
        }
        else
        {
          v26 = objc_msgSend(v37, sel_synthesizerBundleIdentifier);
          if (!v26
            || (v27 = v26,
                sub_1A3AB497C(),
                v27,
                LOBYTE(v27) = sub_1A3AB4AFC(),
                swift_bridgeObjectRelease(),
                (v27 & 1) == 0))
          {
LABEL_65:
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_66;
          }
          v22 = 10;
        }
      }
LABEL_59:
      v40 = 0;
      v39[0] = v22;
      v38[0] = 10;
      if (static CoreSynthesizer.Voice.VoiceType.== infix(_:_:)(v39, v38))
      {
        *(_QWORD *)v39 = *(_QWORD *)sub_1A3A391B0();
        sub_1A3AB51D4();
        if ((sub_1A3AB494C() & 1) == 0)
          sub_1A3AB5204();
        *(_QWORD *)v39 = *v21;
        sub_1A3AB51D4();
        if ((sub_1A3AB51EC() & 1) == 0)
          sub_1A3AB51F8();
      }
LABEL_64:
      v28 = v40;
      v29 = sub_1A3A64A70();

      v31 = v41[0];
      *(_QWORD *)a2 = v34;
      *(_QWORD *)(a2 + 8) = v36;
      *(_QWORD *)(a2 + 16) = v29;
      *(_QWORD *)(a2 + 24) = v32;
      *(_QWORD *)(a2 + 32) = v35;
      *(_QWORD *)(a2 + 40) = v28 | (v33 << 8);
      *(_QWORD *)(a2 + 48) = v31;
      *(_QWORD *)(a2 + 56) = v22;
      *(_QWORD *)(a2 + 64) = v5;
      *(_QWORD *)(a2 + 72) = v7;
      *(_QWORD *)(a2 + 80) = v37;
      *(_QWORD *)(a2 + 88) = v18;
      *(_BYTE *)(a2 + 100) = 0;
      *(_DWORD *)(a2 + 96) = v20;
      break;
    case 0xAuLL:
      v22 = 6;
      goto LABEL_64;
    default:
      goto LABEL_65;
  }
  return result;
}

uint64_t sub_1A39D9F74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39D9F98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A39B1604;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE6D3F60 + dword_1EE6D3F60))(a1, v4);
}

uint64_t sub_1A39DA008(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  int64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820((uint64_t *)&unk_1ED1B5440);
  v51 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_40:
    *v3 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v48 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v46 = v3;
  v47 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v49 = v5;
  v50 = v7;
  v14 = v7;
  while (1)
  {
    if (v10)
    {
      v58 = (v10 - 1) & v10;
      v52 = v13;
      v24 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_21;
    }
    v25 = __OFADD__(v13, 1);
    v26 = v13 + 1;
    if (v25)
      goto LABEL_42;
    if (v26 >= v47)
    {
      swift_release();
      v3 = v46;
      v27 = v48;
      if ((v51 & 1) != 0)
      {
LABEL_35:
        v45 = 1 << *(_BYTE *)(v5 + 32);
        if (v45 >= 64)
          bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v27 = -1 << v45;
        *(_QWORD *)(v5 + 16) = 0;
      }
LABEL_39:
      result = swift_release();
      v7 = v50;
      goto LABEL_40;
    }
    v27 = v48;
    v28 = v48[v26];
    if (!v28)
      break;
LABEL_20:
    v58 = (v28 - 1) & v28;
    v52 = v26;
    v24 = __clz(__rbit64(v28)) + (v26 << 6);
LABEL_21:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v24);
    v31 = *v30;
    v32 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 104 * v24;
    v34 = *(_QWORD *)(v33 + 8);
    v53 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 16);
    v63 = *(_QWORD *)(v33 + 24);
    v36 = *(_QWORD *)(v33 + 32);
    v61 = *(_BYTE *)(v33 + 41);
    v62 = *(_BYTE *)(v33 + 40);
    v60 = *(_QWORD *)(v33 + 48);
    v59 = *(_BYTE *)(v33 + 56);
    v38 = *(_QWORD *)(v33 + 64);
    v37 = *(_QWORD *)(v33 + 72);
    v39 = *(void **)(v33 + 80);
    v56 = *(_BYTE *)(v33 + 92);
    v57 = *(_DWORD *)(v33 + 88);
    v54 = *(_BYTE *)(v33 + 100);
    v55 = *(_DWORD *)(v33 + 96);
    if ((v51 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = v39;
    }
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    v15 = sub_1A3AB5738();
    v16 = -1 << *(_BYTE *)(v14 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v11 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v11 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      v21 = v37;
      v20 = v38;
      result = (uint64_t)v39;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v16) >> 6;
      v21 = v37;
      v20 = v38;
      result = (uint64_t)v39;
      do
      {
        if (++v18 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v43 = v18 == v42;
        if (v18 == v42)
          v18 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v11 + 8 * v18);
      }
      while (v44 == -1);
      v19 = __clz(__rbit64(~v44)) + (v18 << 6);
    }
    *(_QWORD *)(v11 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v22 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v19);
    *v22 = v31;
    v22[1] = v32;
    v23 = *(_QWORD *)(v14 + 56) + 104 * v19;
    *(_QWORD *)v23 = v53;
    *(_QWORD *)(v23 + 8) = v34;
    *(_QWORD *)(v23 + 16) = v35;
    *(_QWORD *)(v23 + 24) = v63;
    *(_QWORD *)(v23 + 32) = v36;
    *(_BYTE *)(v23 + 40) = v62;
    *(_BYTE *)(v23 + 41) = v61;
    *(_QWORD *)(v23 + 48) = v60;
    *(_BYTE *)(v23 + 56) = v59;
    *(_QWORD *)(v23 + 64) = v20;
    *(_QWORD *)(v23 + 72) = v21;
    *(_QWORD *)(v23 + 80) = result;
    *(_DWORD *)(v23 + 88) = v57;
    *(_BYTE *)(v23 + 92) = v56;
    *(_DWORD *)(v23 + 96) = v55;
    *(_BYTE *)(v23 + 100) = v54;
    ++*(_QWORD *)(v14 + 16);
    v5 = v49;
    v10 = v58;
    v13 = v52;
  }
  v29 = v26 + 1;
  if (v26 + 1 >= v47)
  {
LABEL_31:
    swift_release();
    v3 = v46;
    if ((v51 & 1) != 0)
      goto LABEL_35;
    goto LABEL_39;
  }
  v28 = v48[v29];
  if (v28)
  {
    ++v26;
    goto LABEL_20;
  }
  while (1)
  {
    v26 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v26 >= v47)
      goto LABEL_31;
    v28 = v48[v26];
    ++v29;
    if (v28)
      goto LABEL_20;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

id sub_1A39DA438()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  char v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v36;
  int64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;

  sub_1A39A4820((uint64_t *)&unk_1ED1B5440);
  v38 = v0;
  v1 = *v0;
  v2 = sub_1A3AB548C();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_24:
    result = (id)swift_release();
    *v38 = v3;
    return result;
  }
  result = (id)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5)
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v39 = (unint64_t)(v8 + 63) >> 6;
  v40 = v1 + 64;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v7++, 1))
      goto LABEL_26;
    if (v7 >= v39)
      goto LABEL_24;
    v36 = *(_QWORD *)(v40 + 8 * v7);
    if (!v36)
      break;
LABEL_23:
    v10 = (v36 - 1) & v36;
    v12 = __clz(__rbit64(v36)) + (v7 << 6);
LABEL_12:
    v13 = 16 * v12;
    v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v12);
    v16 = *v14;
    v15 = v14[1];
    v17 = 104 * v12;
    v18 = *(_QWORD *)(v1 + 56) + v17;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_WORD *)(v18 + 40);
    v25 = *(_QWORD *)(v18 + 48);
    v26 = *(_BYTE *)(v18 + 56);
    v27 = *(_QWORD *)(v18 + 64);
    v28 = *(_QWORD *)(v18 + 72);
    v29 = *(void **)(v18 + 80);
    v30 = *(_DWORD *)(v18 + 88);
    v31 = *(_BYTE *)(v18 + 92);
    v32 = *(_DWORD *)(v18 + 96);
    LOBYTE(v18) = *(_BYTE *)(v18 + 100);
    v33 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v13);
    *v33 = v16;
    v33[1] = v15;
    v34 = *(_QWORD *)(v3 + 56) + v17;
    *(_QWORD *)v34 = v19;
    *(_QWORD *)(v34 + 8) = v20;
    *(_QWORD *)(v34 + 16) = v22;
    *(_QWORD *)(v34 + 24) = v21;
    *(_QWORD *)(v34 + 32) = v23;
    *(_WORD *)(v34 + 40) = v24;
    *(_QWORD *)(v34 + 48) = v25;
    *(_BYTE *)(v34 + 56) = v26;
    *(_QWORD *)(v34 + 64) = v27;
    *(_QWORD *)(v34 + 72) = v28;
    *(_QWORD *)(v34 + 80) = v29;
    *(_DWORD *)(v34 + 88) = v30;
    *(_BYTE *)(v34 + 92) = v31;
    *(_DWORD *)(v34 + 96) = v32;
    *(_BYTE *)(v34 + 100) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = v29;
  }
  v37 = v7 + 1;
  if (v7 + 1 >= v39)
    goto LABEL_24;
  v36 = *(_QWORD *)(v40 + 8 * v37);
  if (v36)
  {
    ++v7;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v7 >= v39)
      goto LABEL_24;
    v36 = *(_QWORD *)(v40 + 8 * v7);
    ++v37;
    if (v36)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1A39DA67C()
{
  return sub_1A39D8EAC();
}

uint64_t sub_1A39DA684(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1A3AB4538();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, v11, MEMORY[0x1E0CB0E58]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1A3AB48C8();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1A39B9F44((unint64_t *)&unk_1ED1B5310, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E60]);
      v21 = sub_1A3AB494C();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1A39DAC4C((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1A39DA8E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_1A3AB4538();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1A39A4820(&qword_1ED1B5428);
  v6 = sub_1A3AB527C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
      result = sub_1A3AB48C8();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_1A39DAC4C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_1A3AB4538();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1A39DA8E0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1A39DAE50();
      goto LABEL_12;
    }
    sub_1A39DB074();
  }
  v12 = *v3;
  sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
  v13 = sub_1A3AB48C8();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_1A39B9F44((unint64_t *)&unk_1ED1B5310, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E60]);
      v18 = sub_1A3AB494C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1A3AB566C();
  __break(1u);
  return result;
}

void *sub_1A39DAE50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_1A3AB4538();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A4820(&qword_1ED1B5428);
  v6 = *v0;
  v7 = sub_1A3AB5270();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A39DB074()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_1A3AB4538();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1A39A4820(&qword_1ED1B5428);
  v7 = sub_1A3AB527C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
    result = sub_1A3AB48C8();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A39DB39C(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = sub_1A3AB4538();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  v10 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, v3, MEMORY[0x1E0CB0E58]);
  v19 = sub_1A3AB4ED4();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v12, v2);
      sub_1A39DA684((uint64_t)v9, v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

unint64_t sub_1A39DB56C()
{
  unint64_t result;

  result = qword_1ED1B5330;
  if (!qword_1ED1B5330)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Trait, &type metadata for CoreSynthesizer.Voice.Trait);
    atomic_store(result, (unint64_t *)&qword_1ED1B5330);
  }
  return result;
}

unint64_t sub_1A39DB5B0()
{
  unint64_t result;

  result = qword_1EE6D24D8;
  if (!qword_1EE6D24D8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Quality, &type metadata for CoreSynthesizer.Voice.Quality);
    atomic_store(result, (unint64_t *)&qword_1EE6D24D8);
  }
  return result;
}

uint64_t sub_1A39DB5F4(uint64_t a1)
{
  uint64_t result;

  result = sub_1A39B9F44((unint64_t *)&unk_1EE6D2EF0, (uint64_t (*)(uint64_t))type metadata accessor for DefaultVoiceSource, (uint64_t)&protocol conformance descriptor for DefaultVoiceSource);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A39DB630()
{
  return type metadata accessor for DefaultVoiceSource();
}

void sub_1A39DB638()
{
  unint64_t v0;

  sub_1A39DB738();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for DefaultVoiceSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DefaultVoiceSource.disambiguations.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of DefaultVoiceSource.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of DefaultVoiceSource.voices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of DefaultVoiceSource.resourceCacheDidReceiveUpdate()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of DefaultVoiceSource.preferredLanguages.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

void sub_1A39DB738()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED1B53D0)
  {
    sub_1A39AB624(&qword_1ED1B52A0);
    v0 = sub_1A3AB4D54();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED1B53D0);
  }
}

uint64_t sub_1A39DB790()
{
  id v0;
  id v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  id v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned __int8 v68;

  v38 = (void *)MEMORY[0x1A8596D24]();
  v0 = objc_msgSend(objc_allocWithZone((Class)TTSAXResourceManager), sel_init);
  v1 = objc_msgSend(v0, sel_resourcesWithType_subType_, 1, 1);

  sub_1A39DBBFC();
  v2 = sub_1A3AB4BB0();

  v3 = (_QWORD *)sub_1A39D9208(MEMORY[0x1E0DEE9D8]);
  if (v2 >> 62)
    goto LABEL_25;
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39 = v3;
  if (!v4)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v36 = Dictionary<>.authoritative.getter((uint64_t)v3);
    swift_bridgeObjectRelease();
    objc_autoreleasePoolPop(v38);
    return v36;
  }
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v41 = v2;
    v42 = v2 & 0xC000000000000001;
    v6 = v39;
    v40 = v4;
    while (1)
    {
      if (v42)
        v7 = (id)MEMORY[0x1A85960B8](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      CoreSynthesizer.Voice.init(resource:)(v8, (uint64_t)&v55);
      if (v56)
      {
        v43 = v8;
        v45 = v57;
        v46 = v58;
        v9 = v60;
        v47 = v59;
        v48 = v56;
        v49 = v61;
        v50 = v62;
        v51 = v63;
        v52 = v64;
        v10 = v66;
        v53 = v65;
        v11 = v68;
        v12 = v67;
        v44 = v55;
        v13 = sub_1A3AB49F4();
        v15 = v14;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v54 = v15;
        v55 = v6;
        v17 = v15;
        v3 = v6;
        v18 = sub_1A39A2734(v13, v17);
        v20 = v6;
        v21 = v18;
        v22 = v20[2];
        v23 = (v19 & 1) == 0;
        v24 = v22 + v23;
        if (__OFADD__(v22, v23))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v4 = sub_1A3AB5480();
          swift_bridgeObjectRelease();
          v39 = v3;
          if (!v4)
            goto LABEL_26;
          goto LABEL_3;
        }
        v2 = v19;
        if (v20[3] >= v24)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1A39DA438();
          v25 = v54;
        }
        else
        {
          sub_1A39DA008(v24, isUniquelyReferenced_nonNull_native);
          v25 = v54;
          v26 = sub_1A39A2734(v13, v54);
          if ((v2 & 1) != (v27 & 1))
            goto LABEL_28;
          v21 = v26;
        }
        v3 = v55;
        v28 = ((v12 | (unint64_t)(v11 << 32)) >> 32) & 1;
        if ((v2 & 1) != 0)
        {
          v29 = v55[7] + 104 * v21;
          v30 = *(void **)(v29 + 80);
          *(_QWORD *)v29 = v44;
          *(_QWORD *)(v29 + 8) = v48;
          *(_QWORD *)(v29 + 16) = v45;
          *(_QWORD *)(v29 + 24) = v46;
          *(_QWORD *)(v29 + 32) = v47;
          *(_WORD *)(v29 + 40) = v9;
          *(_QWORD *)(v29 + 48) = v49;
          *(_BYTE *)(v29 + 56) = v50;
          *(_QWORD *)(v29 + 64) = v51;
          *(_QWORD *)(v29 + 72) = v52;
          *(_QWORD *)(v29 + 80) = v53;
          *(_DWORD *)(v29 + 88) = v10;
          *(_BYTE *)(v29 + 92) = BYTE4(v10) & 1;
          *(_DWORD *)(v29 + 96) = v12;
          *(_BYTE *)(v29 + 100) = v28;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v55[(v21 >> 6) + 8] |= 1 << v21;
          v31 = (uint64_t *)(v3[6] + 16 * v21);
          *v31 = v13;
          v31[1] = v25;
          v32 = v3[7] + 104 * v21;
          *(_QWORD *)v32 = v44;
          *(_QWORD *)(v32 + 8) = v48;
          *(_QWORD *)(v32 + 16) = v45;
          *(_QWORD *)(v32 + 24) = v46;
          *(_QWORD *)(v32 + 32) = v47;
          *(_WORD *)(v32 + 40) = v9;
          *(_QWORD *)(v32 + 48) = v49;
          *(_BYTE *)(v32 + 56) = v50;
          *(_QWORD *)(v32 + 64) = v51;
          *(_QWORD *)(v32 + 72) = v52;
          *(_QWORD *)(v32 + 80) = v53;
          *(_DWORD *)(v32 + 88) = v10;
          *(_BYTE *)(v32 + 92) = BYTE4(v10) & 1;
          *(_DWORD *)(v32 + 96) = v12;
          *(_BYTE *)(v32 + 100) = v28;
          v33 = v3[2];
          v34 = __OFADD__(v33, 1);
          v35 = v33 + 1;
          if (v34)
            goto LABEL_24;
          v3[2] = v35;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = v3;
        v4 = v40;
        v2 = v41;
      }
      else
      {

        v3 = v6;
      }
      if (v4 == ++v5)
        goto LABEL_26;
    }
  }
  __break(1u);
LABEL_28:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

unint64_t sub_1A39DBBFC()
{
  unint64_t result;

  result = qword_1ED1B5408;
  if (!qword_1ED1B5408)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED1B5408);
  }
  return result;
}

uint64_t (*sub_1A39DBC38())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39DBC7C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x120))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DBCBC(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x128);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A39DBCFC()
{
  return sub_1A39DCB2C();
}

uint64_t sub_1A39DBD10(uint64_t a1)
{
  return sub_1A39DC0EC(a1, (uint64_t)&unk_1A3AC12A8, (uint64_t)sub_1A39DBD2C, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1A39DBD2C()
{
  return sub_1A39DCC60(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__queue);
}

void (*sub_1A39DBD48(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DBC38();
  return sub_1A39DBE38;
}

void sub_1A39DBE38(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t type metadata accessor for CoreSynthesizer()
{
  uint64_t result;

  result = qword_1EE6D4A10;
  if (!qword_1EE6D4A10)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t (*sub_1A39DBF2C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39DC010()
{
  return sub_1A39DCB2C();
}

uint64_t sub_1A39DC0D0(uint64_t a1)
{
  return sub_1A39DC0EC(a1, (uint64_t)&unk_1A3AC12E0, (uint64_t)sub_1A39DC260, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1A39DC0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  _QWORD *v4;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x5F0))();
  swift_release();
  return a4(a1);
}

uint64_t sub_1A39DC17C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x150))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DC1BC(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x158);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A39DC1FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__voiceResolver);
  swift_beginAccess();
  *v3 = a2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1A39DC260()
{
  uint64_t v0;

  return sub_1A39DC1FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void (*sub_1A39DC288(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DBF2C();
  return sub_1A39DC378;
}

void sub_1A39DC378(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t (*sub_1A39DC384())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39DC3C8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x180))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DC408(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x188);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A39DC448()
{
  return sub_1A39DDFF8();
}

uint64_t sub_1A39DC45C(uint64_t a1)
{
  return sub_1A39DC0EC(a1, (uint64_t)&unk_1A3AC1308, (uint64_t)sub_1A39DC478, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1A39DC478()
{
  return sub_1A39DD500(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__voices);
}

void (*sub_1A39DC494(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DC384();
  return sub_1A39DC584;
}

void sub_1A39DC584(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t (*sub_1A39DC634())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id sub_1A39DC68C()
{
  return sub_1A39E5F30((uint64_t)&unk_1A3AC1340, &OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioQueue);
}

void sub_1A39DC6B4(void *a1)
{
  sub_1A39E1040(a1);
}

uint64_t sub_1A39DC6C8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1B0))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DC708(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1B8))(*a1);
}

void sub_1A39DC748(uint64_t a1, void *a2)
{
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(a1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioQueue);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a2;
  v5 = a2;

}

void sub_1A39DC7A4()
{
  uint64_t v0;

  sub_1A39DC748(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void (*sub_1A39DC7CC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DC634();
  return sub_1A39DC8BC;
}

void sub_1A39DC8BC(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t (*sub_1A39DC8C8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39DC90C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1E0))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DC94C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1E8);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A39DC98C()
{
  return sub_1A39DCB2C();
}

uint64_t sub_1A39DC9A0(uint64_t a1)
{
  return sub_1A39DC0EC(a1, (uint64_t)&unk_1A3AC1368, (uint64_t)sub_1A39DC9BC, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1A39DC9BC()
{
  return sub_1A39DCC60(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__bufferedAudioQueue);
}

void (*sub_1A39DC9D8(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DC8C8();
  return sub_1A39DCAC8;
}

void sub_1A39DCAC8(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t (*sub_1A39DCAD4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39DCB18()
{
  return sub_1A39DCB2C();
}

uint64_t sub_1A39DCB2C()
{
  _QWORD *v0;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A39DCBA8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x210))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DCBE8(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x218);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A39DCC28(uint64_t a1)
{
  return sub_1A39DC0EC(a1, (uint64_t)&unk_1A3AC1390, (uint64_t)sub_1A39DCC44, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1A39DCC44()
{
  return sub_1A39DCC60(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__speechRenderer);
}

uint64_t sub_1A39DCC60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = (_QWORD *)(v2 + *a1);
  swift_beginAccess();
  *v4 = v3;
  swift_retain();
  return swift_release();
}

void (*sub_1A39DCCC8(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DCAD4();
  return sub_1A39DCDB8;
}

void sub_1A39DCDB8(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t (*sub_1A39DCEC0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39DCFD4()
{
  return sub_1A39DDFF8();
}

uint64_t sub_1A39DD0B4(uint64_t a1)
{
  return sub_1A39DC0EC(a1, (uint64_t)&unk_1A3AC13C8, (uint64_t)sub_1A39DD1B4, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1A39DD0D0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x240))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DD110(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x248);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A39DD150(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__offlineChain);
  swift_beginAccess();
  *v3 = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39DD1B4()
{
  uint64_t v0;

  return sub_1A39DD150(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void (*sub_1A39DD1DC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DCEC0();
  return sub_1A39DD2CC;
}

void sub_1A39DD2CC(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

unint64_t sub_1A39DD2D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(qword_1EE6D32B8);
  v2 = (_QWORD *)sub_1A3AB54B0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1A39A2734(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*sub_1A39DD3F0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39DD434@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x270))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DD474(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x278);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A39DD4B4()
{
  return sub_1A39DDFF8();
}

uint64_t sub_1A39DD4C8(uint64_t a1)
{
  return sub_1A39DC0EC(a1, (uint64_t)&unk_1A3AC13F0, (uint64_t)sub_1A39DD4E4, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1A39DD4E4()
{
  return sub_1A39DD500(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__selectionProviders);
}

uint64_t sub_1A39DD500(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = (_QWORD *)(v2 + *a1);
  swift_beginAccess();
  *v4 = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void (*sub_1A39DD568(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DD3F0();
  return sub_1A39DD658;
}

void sub_1A39DD658(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

id sub_1A39DD664@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v12;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x5E8))();
  swift_release();
  v3 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__effectManager);
  swift_beginAccess();
  v4 = v3[1];
  v5 = v3[2];
  v6 = v3[3];
  v7 = v3[4];
  v8 = v3[5];
  v9 = v3[6];
  v10 = v3[7];
  v12 = (id)v3[8];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v12;
}

uint64_t sub_1A39DD758@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v3 = *a1;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x5E8))();
  swift_release();
  v4 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__effectManager);
  swift_beginAccess();
  v5 = v4[1];
  v6 = v4[2];
  v7 = v4[3];
  v8 = v4[4];
  v9 = v4[5];
  v10 = v4[6];
  v11 = v4[7];
  v12 = (void *)v4[8];
  *a2 = *v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  a2[8] = v12;
  v13 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A39DD858(uint64_t a1, _QWORD **a2)
{
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t KeyPath;
  void (*v6)(uint64_t, void (*)(), _QWORD *, uint64_t);
  _QWORD v8[6];
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v2;
  v10 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v3;
  v4 = *a2;
  KeyPath = swift_getKeyPath();
  v8[2] = v4;
  v8[3] = v9;
  v6 = *(void (**)(uint64_t, void (*)(), _QWORD *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x5F0);
  sub_1A39EC244((uint64_t)v9);
  v6(KeyPath, sub_1A39EC164, v8, MEMORY[0x1E0DEE9C0] + 8);
  sub_1A39EC2C8((uint64_t)v9);
  return swift_release();
}

id sub_1A39DD908()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))() & 1) != 0)
    return 0;
  swift_getKeyPath();
  (*(void (**)(void))((*v1 & *v0) + 0x5E8))();
  swift_release();
  swift_getKeyPath();
  sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  swift_beginAccess();
  v2 = sub_1A3A14A84();
  swift_endAccess();
  swift_getKeyPath();
  sub_1A3AB455C();
  swift_release();
  return v2;
}

uint64_t sub_1A39DDB48()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v1 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A3AB4D00();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  v8 = v0;
  if (v7 == 1)
  {
    sub_1A39B11F4((uint64_t)v3, (uint64_t *)&unk_1ED1B53A0);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if (v6[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = sub_1A3AB4C70();
      v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &unk_1EE6D3230;
  *(_QWORD *)(v12 + 24) = v6;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A39DDD18(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v5 = *(int **)((*MEMORY[0x1E0DEEDD8] & *a4) + 0x320);
  v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1A39D5174;
  return v8();
}

uint64_t sub_1A39DDD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A3AB4D00();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A3AB4CF4();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A39B11F4(a1, (uint64_t *)&unk_1ED1B53A0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A3AB4C70();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t (*sub_1A39DDED0(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A39DDF18;
}

uint64_t sub_1A39DDF18(uint64_t a1, char a2)
{
  return sub_1A39E6968(a1, a2, (uint64_t (*)(uint64_t))sub_1A39DDB48);
}

uint64_t sub_1A39DDFE4()
{
  return sub_1A39DDFF8();
}

uint64_t sub_1A39DDFF8()
{
  _QWORD *v0;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A39DE130(uint64_t a1)
{
  return sub_1A39DC0EC(a1, (uint64_t)&unk_1A3AC1448, (uint64_t)sub_1A39DE238, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1A39DE14C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x2D8))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39DE18C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x2E0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A39DE1CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__effects);
  swift_beginAccess();
  *v3 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return sub_1A39DDB48();
}

uint64_t sub_1A39DE238()
{
  uint64_t v0;

  return sub_1A39DE1CC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void (*sub_1A39DE260(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DDED0((uint64_t)v4);
  return sub_1A39DE350;
}

void sub_1A39DE350(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t (*sub_1A39DE35C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39DE3A0@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x308))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A39DE3E4(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x310))(*a1);
}

uint64_t sub_1A39DE420()
{
  return sub_1A39E6CE8((uint64_t)&unk_1A3AC1470, &OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__realtimeEffects);
}

uint64_t sub_1A39DE434()
{
  return sub_1A39E115C();
}

uint64_t sub_1A39DE448()
{
  return sub_1A39EB91C(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__realtimeEffects);
}

void (*sub_1A39DE464(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DE35C();
  return sub_1A39DE554;
}

void sub_1A39DE554(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t sub_1A39DE560()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch();
}

void sub_1A39DE578()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char v16;
  int *v17;
  _QWORD *v18;
  void (*v19)(void);
  uint64_t v20;
  void *v21;
  void *v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t (*v71)(uint64_t);
  uint64_t v72;
  void *v73;
  void *v74;
  void (*v75)(void);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  int64_t v92;
  uint64_t v93;
  int v94;
  id v95;
  id v96;
  double v97;
  id v98;
  id v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  char v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  _BOOL8 v107;
  uint64_t v108;
  char v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t (*v124)(uint64_t);
  uint64_t v125;
  void *v126;
  void *v127;
  _QWORD *v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  void (*v132)(void);
  void (*v133)(void);
  uint64_t v134;
  int64_t v135;

  v1 = (_QWORD *)v0[7];
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2D8))();
  swift_getKeyPath();
  v4 = *(void (**)(void))((*v2 & *v1) + 0x5E8);
  v0[8] = v4;
  v132 = v4;
  v4();
  swift_release();
  v0[5] = v1;
  swift_getKeyPath();
  sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v5 = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__effectManager;
  v0[9] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__effectManager;
  v6 = (char *)v1 + v5;
  swift_beginAccess();
  sub_1A3A12DFC(v3);
  swift_endAccess();
  v0[6] = v1;
  swift_getKeyPath();
  sub_1A3AB455C();
  v7 = swift_release();
  if (((*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x308))(v7) & 1) == 0)
    goto LABEL_115;
  v8 = *(uint64_t (**)(void))((*v2 & *(_QWORD *)v0[7]) + 0x1B0);
  v0[10] = v8;
  v9 = (void *)v8();
  v10 = objc_msgSend(v9, sel_dspGraph);

  if (v10)
  {
    v11 = sub_1A3AB497C();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  swift_getKeyPath();
  v132();
  v14 = (id)swift_release();
  v15 = *((_QWORD *)v6 + 5);
  if (!v13)
  {
    if (!v15)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    v14 = objc_msgSend((id)v0[7], sel_isSpeaking);
    if ((_DWORD)v14)
    {
      v17 = *(int **)((*v2 & *(_QWORD *)v0[7]) + 0x440);
      v133 = (void (*)(void))((char *)v17 + *v17);
      v18 = (_QWORD *)swift_task_alloc();
      v0[11] = v18;
      *v18 = v0;
      v18[1] = sub_1A39DF274;
      v133();
      return;
    }
    goto LABEL_16;
  }
  if (v11 == *((_QWORD *)v6 + 4) && v13 == v15)
  {
    v14 = (id)swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v16 = sub_1A3AB5654();
  v14 = (id)swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
    goto LABEL_14;
LABEL_16:
  v19 = (void (*)(void))v0[8];
  v20 = v0[7] + v0[9];
  v21 = (void *)((uint64_t (*)(id))v0[10])(v14);
  swift_getKeyPath();
  v19();
  swift_release();
  if (*(_QWORD *)(v20 + 40))
  {
    swift_bridgeObjectRetain();
    v22 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = 0;
  }
  v23 = (void (*)(void))v0[8];
  v128 = v0;
  v24 = v0[7] + v0[9];
  objc_msgSend(v21, sel_setDspGraph_, v22);

  swift_getKeyPath();
  v23();
  swift_release();
  v25 = *(_QWORD *)(v24 + 56);
  v129 = v25 + 64;
  v26 = -1;
  v27 = -1 << *(_BYTE *)(v25 + 32);
  if (-v27 < 64)
    v26 = ~(-1 << -(char)v27);
  v28 = v26 & *(_QWORD *)(v25 + 64);
  v130 = (unint64_t)(63 - v27) >> 6;
  swift_bridgeObjectRetain();
  v29 = 0;
  v30 = MEMORY[0x1E0DEE9E0];
  v31 = 0x1E0CB3000uLL;
LABEL_22:
  v32 = v30 & 0xC000000000000001;
  v33 = v30 & 0xFFFFFFFFFFFFFF8;
  if (v30 < 0)
    v33 = v30;
  v134 = v33;
  while (1)
  {
    if (v28)
    {
      v37 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v38 = v37 | (v29 << 6);
      goto LABEL_43;
    }
    v39 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    if (v39 >= v130)
      goto LABEL_66;
    v40 = *(_QWORD *)(v129 + 8 * v39);
    ++v29;
    if (!v40)
    {
      v29 = v39 + 1;
      if (v39 + 1 >= v130)
        goto LABEL_66;
      v40 = *(_QWORD *)(v129 + 8 * v29);
      if (!v40)
      {
        v29 = v39 + 2;
        if (v39 + 2 >= v130)
          goto LABEL_66;
        v40 = *(_QWORD *)(v129 + 8 * v29);
        if (!v40)
          break;
      }
    }
LABEL_42:
    v28 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v29 << 6);
LABEL_43:
    v42 = 4 * v38;
    v43 = *(unsigned int *)(*(_QWORD *)(v25 + 56) + v42);
    v44 = objc_msgSend(objc_allocWithZone(*(Class *)(v31 + 2024)), sel_initWithUnsignedInt_, *(unsigned int *)(*(_QWORD *)(v25 + 48) + v42));
    v45 = objc_msgSend(objc_allocWithZone(*(Class *)(v31 + 2024)), sel_initWithUnsignedInt_, v43);
    if (v45)
    {
      v48 = v45;
      if (v32)
      {
        v49 = sub_1A3AB524C();
        if (__OFADD__(v49, 1))
          goto LABEL_124;
        v30 = sub_1A39E9488(v134, v49 + 1);
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v52 = sub_1A39E9340((uint64_t)v44);
      v53 = *(_QWORD *)(v30 + 16);
      v54 = (v51 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        goto LABEL_122;
      v56 = v51;
      if (*(_QWORD *)(v30 + 24) >= v55)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1A39E9B38();
      }
      else
      {
        sub_1A39E96B8(v55, isUniquelyReferenced_nonNull_native);
        v57 = sub_1A39E9340((uint64_t)v44);
        if ((v56 & 1) != (v58 & 1))
        {
          sub_1A39B11BC(0, (unint64_t *)&qword_1EE6D2388);
LABEL_117:
          sub_1A3AB5678();
          return;
        }
        v52 = v57;
      }
      v31 = 0x1E0CB3000;
      if ((v56 & 1) != 0)
      {
        v65 = *(_QWORD *)(v30 + 56);

        *(_QWORD *)(v65 + 8 * v52) = v48;
      }
      else
      {
        *(_QWORD *)(v30 + 8 * (v52 >> 6) + 64) |= 1 << v52;
        *(_QWORD *)(*(_QWORD *)(v30 + 48) + 8 * v52) = v44;
        *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v52) = v48;
        v66 = *(_QWORD *)(v30 + 16);
        v67 = __OFADD__(v66, 1);
        v68 = v66 + 1;
        if (v67)
          goto LABEL_128;
        *(_QWORD *)(v30 + 16) = v68;
        v69 = v44;
      }
      swift_bridgeObjectRelease();

      goto LABEL_22;
    }
    if (v32)
    {
      v46 = v44;
      swift_bridgeObjectRetain();
      v47 = sub_1A3AB5420();

      if (v47)
      {
        swift_unknownObjectRelease();
        v59 = sub_1A3AB524C();
        v60 = sub_1A39E9488(v134, v59);
        swift_retain();
        v61 = sub_1A39E9340((uint64_t)v46);
        v63 = v62;
        swift_release();
        if ((v63 & 1) == 0)
          goto LABEL_125;

        v64 = *(void **)(*(_QWORD *)(v60 + 56) + 8 * v61);
        sub_1A39E9988(v61, v60);
        swift_bridgeObjectRelease();

        v30 = v60;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      v34 = sub_1A39E9340((uint64_t)v44);
      v36 = v35;
      swift_bridgeObjectRelease();
      if ((v36 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1A39E9B38();

        v70 = *(void **)(*(_QWORD *)(v30 + 56) + 8 * v34);
        sub_1A39E9988(v34, v30);
        swift_bridgeObjectRelease();

        goto LABEL_22;
      }
    }

  }
  v41 = v39 + 3;
  if (v41 < v130)
  {
    v40 = *(_QWORD *)(v129 + 8 * v41);
    if (!v40)
    {
      while (1)
      {
        v29 = v41 + 1;
        if (__OFADD__(v41, 1))
          break;
        if (v29 >= v130)
          goto LABEL_66;
        v40 = *(_QWORD *)(v129 + 8 * v29);
        ++v41;
        if (v40)
          goto LABEL_42;
      }
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    v29 = v41;
    goto LABEL_42;
  }
LABEL_66:
  v71 = (uint64_t (*)(uint64_t))v128[10];
  v72 = swift_release();
  v73 = (void *)v71(v72);
  v128[12] = sub_1A39B11BC(0, (unint64_t *)&qword_1EE6D2388);
  v128[13] = sub_1A39E9CDC();
  v74 = (void *)sub_1A3AB4868();
  swift_bridgeObjectRelease();
  objc_msgSend(v73, sel_setGraphProperties_, v74);

  v75 = (void (*)(void))v128[8];
  v76 = v128[7] + v128[9];
  swift_getKeyPath();
  v75();
  swift_release();
  v77 = *(_QWORD *)(v76 + 48);
  v131 = v77 + 64;
  v78 = -1;
  v79 = -1 << *(_BYTE *)(v77 + 32);
  if (-v79 < 64)
    v78 = ~(-1 << -(char)v79);
  v80 = v78 & *(_QWORD *)(v77 + 64);
  v135 = (unint64_t)(63 - v79) >> 6;
  swift_bridgeObjectRetain();
  v81 = 0;
  v82 = MEMORY[0x1E0DEE9E0];
LABEL_69:
  v83 = v82 & 0xC000000000000001;
  if (v82 < 0)
    v84 = v82;
  else
    v84 = v82 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v80)
    {
      v88 = __clz(__rbit64(v80));
      v80 &= v80 - 1;
      v89 = v88 | (v81 << 6);
      goto LABEL_90;
    }
    v90 = v81 + 1;
    if (__OFADD__(v81, 1))
      goto LABEL_119;
    if (v90 >= v135)
    {
LABEL_114:
      v0 = v128;
      v124 = (uint64_t (*)(uint64_t))v128[10];
      v125 = swift_release();
      v126 = (void *)v124(v125);
      v127 = (void *)sub_1A3AB4868();
      swift_bridgeObjectRelease();
      objc_msgSend(v126, sel_setGraphParameters_, v127);

LABEL_115:
      ((void (*)(void))v0[1])();
      return;
    }
    v91 = *(_QWORD *)(v131 + 8 * v90);
    ++v81;
    if (!v91)
    {
      v81 = v90 + 1;
      if (v90 + 1 >= v135)
        goto LABEL_114;
      v91 = *(_QWORD *)(v131 + 8 * v81);
      if (!v91)
      {
        v81 = v90 + 2;
        if (v90 + 2 >= v135)
          goto LABEL_114;
        v91 = *(_QWORD *)(v131 + 8 * v81);
        if (!v91)
          break;
      }
    }
LABEL_89:
    v80 = (v91 - 1) & v91;
    v89 = __clz(__rbit64(v91)) + (v81 << 6);
LABEL_90:
    v93 = 4 * v89;
    v94 = *(_DWORD *)(*(_QWORD *)(v77 + 56) + v93);
    v95 = objc_msgSend(objc_allocWithZone(*(Class *)(v31 + 2024)), sel_initWithUnsignedInt_, *(unsigned int *)(*(_QWORD *)(v77 + 48) + v93));
    v96 = objc_allocWithZone(*(Class *)(v31 + 2024));
    LODWORD(v97) = v94;
    v98 = objc_msgSend(v96, sel_initWithFloat_, v97);
    if (v98)
    {
      v101 = v98;
      if (v83)
      {
        v102 = sub_1A3AB524C();
        if (__OFADD__(v102, 1))
          goto LABEL_126;
        v82 = sub_1A39E9488(v84, v102 + 1);
      }
      v103 = swift_isUniquelyReferenced_nonNull_native();
      v105 = sub_1A39E9340((uint64_t)v95);
      v106 = *(_QWORD *)(v82 + 16);
      v107 = (v104 & 1) == 0;
      v108 = v106 + v107;
      if (__OFADD__(v106, v107))
        goto LABEL_123;
      v109 = v104;
      if (*(_QWORD *)(v82 + 24) < v108)
      {
        sub_1A39E96B8(v108, v103);
        v110 = sub_1A39E9340((uint64_t)v95);
        if ((v109 & 1) != (v111 & 1))
          goto LABEL_117;
        v105 = v110;
        v31 = 0x1E0CB3000;
        if ((v109 & 1) == 0)
          goto LABEL_111;
LABEL_106:
        v118 = *(_QWORD *)(v82 + 56);

        *(_QWORD *)(v118 + 8 * v105) = v101;
LABEL_113:
        swift_bridgeObjectRelease();

        goto LABEL_69;
      }
      if ((v103 & 1) != 0)
      {
        v31 = 0x1E0CB3000;
        if ((v104 & 1) != 0)
          goto LABEL_106;
      }
      else
      {
        sub_1A39E9B38();
        v31 = 0x1E0CB3000;
        if ((v109 & 1) != 0)
          goto LABEL_106;
      }
LABEL_111:
      *(_QWORD *)(v82 + 8 * (v105 >> 6) + 64) |= 1 << v105;
      v120 = 8 * v105;
      *(_QWORD *)(*(_QWORD *)(v82 + 48) + v120) = v95;
      *(_QWORD *)(*(_QWORD *)(v82 + 56) + v120) = v101;
      v121 = *(_QWORD *)(v82 + 16);
      v67 = __OFADD__(v121, 1);
      v122 = v121 + 1;
      if (v67)
        goto LABEL_129;
      *(_QWORD *)(v82 + 16) = v122;
      v123 = v95;
      goto LABEL_113;
    }
    if (v83)
    {
      v99 = v95;
      swift_bridgeObjectRetain();
      v100 = sub_1A3AB5420();

      if (!v100)
      {
        swift_bridgeObjectRelease();
        goto LABEL_73;
      }
      swift_unknownObjectRelease();
      v112 = sub_1A3AB524C();
      v113 = sub_1A39E9488(v84, v112);
      swift_retain();
      v114 = sub_1A39E9340((uint64_t)v99);
      v116 = v115;
      swift_release();
      if ((v116 & 1) == 0)
        goto LABEL_127;

      v117 = *(void **)(*(_QWORD *)(v113 + 56) + 8 * v114);
      sub_1A39E9988(v114, v113);
      swift_bridgeObjectRelease();

      v82 = v113;
      goto LABEL_69;
    }
    swift_bridgeObjectRetain();
    v85 = sub_1A39E9340((uint64_t)v95);
    v87 = v86;
    swift_bridgeObjectRelease();
    if ((v87 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1A39E9B38();

      v119 = *(void **)(*(_QWORD *)(v82 + 56) + 8 * v85);
      sub_1A39E9988(v85, v82);
      swift_bridgeObjectRelease();

      goto LABEL_69;
    }
LABEL_73:

  }
  v92 = v90 + 3;
  if (v92 >= v135)
    goto LABEL_114;
  v91 = *(_QWORD *)(v131 + 8 * v92);
  if (v91)
  {
    v81 = v92;
    goto LABEL_89;
  }
  while (1)
  {
    v81 = v92 + 1;
    if (__OFADD__(v92, 1))
      break;
    if (v81 >= v135)
      goto LABEL_114;
    v91 = *(_QWORD *)(v131 + 8 * v81);
    ++v92;
    if (v91)
      goto LABEL_89;
  }
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
}

uint64_t sub_1A39DF274()
{
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_1A39DF2C8()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  void *v3;
  void *v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  id v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  void *v55;
  void *v56;
  int *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  void (*v63)(void);

  v1 = *(void (**)(void))(v0 + 64);
  v2 = *(_QWORD *)(v0 + 56) + *(_QWORD *)(v0 + 72);
  v3 = (void *)(*(uint64_t (**)(void))(v0 + 80))();
  swift_getKeyPath();
  v1();
  swift_release();
  if (*(_QWORD *)(v2 + 40))
  {
    swift_bridgeObjectRetain();
    v4 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(void (**)(void))(v0 + 64);
  v6 = *(_QWORD *)(v0 + 56) + *(_QWORD *)(v0 + 72);
  objc_msgSend(v3, sel_setDspGraph_, v4, v0);

  swift_getKeyPath();
  v5();
  swift_release();
  v7 = *(_QWORD *)(v6 + 56);
  v60 = v7 + 64;
  v8 = -1;
  v9 = -1 << *(_BYTE *)(v7 + 32);
  if (-v9 < 64)
    v8 = ~(-1 << -(char)v9);
  v10 = v8 & *(_QWORD *)(v7 + 64);
  v61 = (unint64_t)(63 - v9) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  v12 = MEMORY[0x1E0DEE9E0];
LABEL_7:
  while (2)
  {
    v13 = v12 & 0xC000000000000001;
    v14 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v12 < 0)
      v14 = v12;
    v62 = v14;
    while (1)
    {
      if (v10)
      {
        v18 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          goto LABEL_55;
        }
        if (v20 >= v61)
          goto LABEL_52;
        v21 = *(_QWORD *)(v60 + 8 * v20);
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v61)
            goto LABEL_52;
          v21 = *(_QWORD *)(v60 + 8 * v11);
          if (!v21)
          {
            v11 = v20 + 2;
            if (v20 + 2 >= v61)
              goto LABEL_52;
            v21 = *(_QWORD *)(v60 + 8 * v11);
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v61)
              {
LABEL_52:
                v53 = *(uint64_t (**)(uint64_t))(v59 + 80);
                v54 = swift_release();
                v55 = (void *)v53(v54);
                *(_QWORD *)(v59 + 96) = sub_1A39B11BC(0, (unint64_t *)&qword_1EE6D2388);
                *(_QWORD *)(v59 + 104) = sub_1A39E9CDC();
                v56 = (void *)sub_1A3AB4868();
                swift_bridgeObjectRelease();
                objc_msgSend(v55, sel_setGraphProperties_, v56);

                v57 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v59 + 56)) + 0x448);
                v63 = (void (*)(void))((char *)v57 + *v57);
                v58 = (_QWORD *)swift_task_alloc();
                *(_QWORD *)(v59 + 112) = v58;
                *v58 = v59;
                v58[1] = sub_1A39DF8CC;
                v63();
                return;
              }
              v21 = *(_QWORD *)(v60 + 8 * v22);
              if (!v21)
              {
                while (1)
                {
                  v11 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    break;
                  if (v11 >= v61)
                    goto LABEL_52;
                  v21 = *(_QWORD *)(v60 + 8 * v11);
                  ++v22;
                  if (v21)
                    goto LABEL_27;
                }
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
LABEL_57:
                __break(1u);
                goto LABEL_58;
              }
              v11 = v22;
            }
          }
        }
LABEL_27:
        v10 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = 4 * v19;
      v24 = *(unsigned int *)(*(_QWORD *)(v7 + 56) + v23);
      v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInt_, *(unsigned int *)(*(_QWORD *)(v7 + 48) + v23));
      v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInt_, v24);
      if (v26)
      {
        v29 = v26;
        if (v13)
        {
          v30 = sub_1A3AB524C();
          if (__OFADD__(v30, 1))
            goto LABEL_57;
          v12 = sub_1A39E9488(v62, v30 + 1);
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v33 = sub_1A39E9340((uint64_t)v25);
        v34 = *(_QWORD *)(v12 + 16);
        v35 = (v32 & 1) == 0;
        v36 = v34 + v35;
        if (__OFADD__(v34, v35))
          goto LABEL_56;
        v37 = v32;
        if (*(_QWORD *)(v12 + 24) >= v36)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v32 & 1) == 0)
              goto LABEL_49;
          }
          else
          {
            sub_1A39E9B38();
            if ((v37 & 1) == 0)
              goto LABEL_49;
          }
        }
        else
        {
          sub_1A39E96B8(v36, isUniquelyReferenced_nonNull_native);
          v38 = sub_1A39E9340((uint64_t)v25);
          if ((v37 & 1) != (v39 & 1))
          {
            sub_1A39B11BC(0, (unint64_t *)&qword_1EE6D2388);
            sub_1A3AB5678();
            return;
          }
          v33 = v38;
          if ((v37 & 1) == 0)
          {
LABEL_49:
            *(_QWORD *)(v12 + 8 * (v33 >> 6) + 64) |= 1 << v33;
            v48 = 8 * v33;
            *(_QWORD *)(*(_QWORD *)(v12 + 48) + v48) = v25;
            *(_QWORD *)(*(_QWORD *)(v12 + 56) + v48) = v29;
            v49 = *(_QWORD *)(v12 + 16);
            v50 = __OFADD__(v49, 1);
            v51 = v49 + 1;
            if (v50)
              goto LABEL_59;
            *(_QWORD *)(v12 + 16) = v51;
            v52 = v25;
LABEL_51:
            swift_bridgeObjectRelease();

            goto LABEL_7;
          }
        }
        v46 = *(_QWORD *)(v12 + 56);

        *(_QWORD *)(v46 + 8 * v33) = v29;
        goto LABEL_51;
      }
      if (v13)
        break;
      swift_bridgeObjectRetain();
      v15 = sub_1A39E9340((uint64_t)v25);
      v17 = v16;
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1A39E9B38();

        v47 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v15);
        sub_1A39E9988(v15, v12);
        swift_bridgeObjectRelease();

        goto LABEL_7;
      }
LABEL_11:

    }
    v27 = v25;
    swift_bridgeObjectRetain();
    v28 = sub_1A3AB5420();

    if (!v28)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    swift_unknownObjectRelease();
    v40 = sub_1A3AB524C();
    v41 = sub_1A39E9488(v62, v40);
    swift_retain();
    v42 = sub_1A39E9340((uint64_t)v27);
    v44 = v43;
    swift_release();
    if ((v44 & 1) != 0)
    {

      v45 = *(void **)(*(_QWORD *)(v41 + 56) + 8 * v42);
      sub_1A39E9988(v42, v41);
      swift_bridgeObjectRelease();

      v12 = v41;
      continue;
    }
    break;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
}

uint64_t sub_1A39DF8CC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_1A39DF920()
{
  _QWORD *v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  id v23;
  double v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  id v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  int64_t v57;

  v1 = (void (*)(void))v0[8];
  v2 = v0[7] + v0[9];
  swift_getKeyPath();
  v1();
  swift_release();
  v3 = *(_QWORD *)(v2 + 48);
  v4 = v3 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v3 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(v3 + 64);
  v57 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = MEMORY[0x1E0DEE9E0];
LABEL_4:
  while (2)
  {
    v10 = v9 & 0xC000000000000001;
    if (v9 < 0)
      v11 = v9;
    else
      v11 = v9 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v7)
      {
        v15 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_52;
        }
        if (v17 >= v57)
          goto LABEL_49;
        v18 = *(_QWORD *)(v4 + 8 * v17);
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v57)
            goto LABEL_49;
          v18 = *(_QWORD *)(v4 + 8 * v8);
          if (!v18)
          {
            v8 = v17 + 2;
            if (v17 + 2 >= v57)
              goto LABEL_49;
            v18 = *(_QWORD *)(v4 + 8 * v8);
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v57)
              {
LABEL_49:
                v52 = *(uint64_t (**)(uint64_t))(v56 + 80);
                v53 = swift_release();
                v54 = (void *)v52(v53);
                v55 = (void *)sub_1A3AB4868();
                swift_bridgeObjectRelease();
                objc_msgSend(v54, sel_setGraphParameters_, v55);

                (*(void (**)(void))(v56 + 8))();
                return;
              }
              v18 = *(_QWORD *)(v4 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  v8 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    break;
                  if (v8 >= v57)
                    goto LABEL_49;
                  v18 = *(_QWORD *)(v4 + 8 * v8);
                  ++v19;
                  if (v18)
                    goto LABEL_24;
                }
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
                goto LABEL_55;
              }
              v8 = v19;
            }
          }
        }
LABEL_24:
        v7 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = 4 * v16;
      v21 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + v20);
      v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInt_, *(unsigned int *)(*(_QWORD *)(v3 + 48) + v20));
      v23 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      LODWORD(v24) = v21;
      v25 = objc_msgSend(v23, sel_initWithFloat_, v24);
      if (v25)
      {
        v28 = v25;
        if (v10)
        {
          v29 = sub_1A3AB524C();
          if (__OFADD__(v29, 1))
            goto LABEL_54;
          v9 = sub_1A39E9488(v11, v29 + 1);
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v32 = sub_1A39E9340((uint64_t)v22);
        v33 = *(_QWORD *)(v9 + 16);
        v34 = (v31 & 1) == 0;
        v35 = v33 + v34;
        if (__OFADD__(v33, v34))
          goto LABEL_53;
        v36 = v31;
        if (*(_QWORD *)(v9 + 24) >= v35)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v4 = v3 + 64;
            if ((v31 & 1) == 0)
              goto LABEL_46;
          }
          else
          {
            sub_1A39E9B38();
            v4 = v3 + 64;
            if ((v36 & 1) == 0)
              goto LABEL_46;
          }
        }
        else
        {
          sub_1A39E96B8(v35, isUniquelyReferenced_nonNull_native);
          v37 = sub_1A39E9340((uint64_t)v22);
          if ((v36 & 1) != (v38 & 1))
          {
            sub_1A3AB5678();
            return;
          }
          v32 = v37;
          v4 = v3 + 64;
          if ((v36 & 1) == 0)
          {
LABEL_46:
            *(_QWORD *)(v9 + 8 * (v32 >> 6) + 64) |= 1 << v32;
            v47 = 8 * v32;
            *(_QWORD *)(*(_QWORD *)(v9 + 48) + v47) = v22;
            *(_QWORD *)(*(_QWORD *)(v9 + 56) + v47) = v28;
            v48 = *(_QWORD *)(v9 + 16);
            v49 = __OFADD__(v48, 1);
            v50 = v48 + 1;
            if (v49)
              goto LABEL_56;
            *(_QWORD *)(v9 + 16) = v50;
            v51 = v22;
LABEL_48:
            swift_bridgeObjectRelease();

            goto LABEL_4;
          }
        }
        v45 = *(_QWORD *)(v9 + 56);

        *(_QWORD *)(v45 + 8 * v32) = v28;
        goto LABEL_48;
      }
      if (v10)
        break;
      swift_bridgeObjectRetain();
      v12 = sub_1A39E9340((uint64_t)v22);
      v14 = v13;
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1A39E9B38();

        v46 = *(void **)(*(_QWORD *)(v9 + 56) + 8 * v12);
        sub_1A39E9988(v12, v9);
        swift_bridgeObjectRelease();

        goto LABEL_4;
      }
LABEL_8:

    }
    v26 = v22;
    swift_bridgeObjectRetain();
    v27 = sub_1A3AB5420();

    if (!v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    swift_unknownObjectRelease();
    v39 = sub_1A3AB524C();
    v40 = sub_1A39E9488(v11, v39);
    swift_retain();
    v41 = sub_1A39E9340((uint64_t)v26);
    v43 = v42;
    swift_release();
    if ((v43 & 1) != 0)
    {

      v44 = *(void **)(*(_QWORD *)(v40 + 56) + 8 * v41);
      sub_1A39E9988(v41, v40);
      swift_bridgeObjectRelease();

      v9 = v40;
      continue;
    }
    break;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
}

void (*sub_1A39DFF2C(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A39DFF74;
}

void sub_1A39DFF74(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  id v8;

  v4 = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD **)(a1 + 24);
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v8 = (id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x1B0))(v4);
    v7 = (void *)(*(uint64_t (**)(void))((*v6 & *v5) + 0x370))();
    objc_msgSend(v8, sel_setAudioSession_, v7);

  }
}

id sub_1A39E0020()
{
  return sub_1A39E5F30((uint64_t)&unk_1A3AC14A8, &OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioSession);
}

void sub_1A39E0048(void *a1)
{
  sub_1A39E1040(a1);
}

uint64_t sub_1A39E005C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x340))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39E009C(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x348))(*a1);
}

void sub_1A39E00DC(_QWORD *a1, void *a2)
{
  void **v4;
  void *v5;
  id v6;
  _QWORD *v7;
  void *v8;
  void *v9;

  v4 = (void **)((char *)a1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioSession);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a2;
  v6 = a2;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1B0))();
  v9 = (void *)(*(uint64_t (**)(void))((*v7 & *a1) + 0x370))();
  objc_msgSend(v8, sel_setAudioSession_, v9);

}

void (*sub_1A39E019C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39DFF2C((uint64_t)v4);
  return sub_1A39E028C;
}

void sub_1A39E028C(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t sub_1A39E034C()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
  v2 = objc_msgSend(v1, sel_channels);

  sub_1A39B11BC(0, &qword_1EE6D3040);
  v3 = sub_1A3AB4BB0();

  return v3;
}

void sub_1A39E048C()
{
  _QWORD *v0;
  void *v1;
  id v2;

  v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
  sub_1A39B11BC(0, &qword_1EE6D3040);
  v2 = (id)sub_1A3AB4BA4();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setChannels_, v2);

}

uint64_t sub_1A39E051C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x358))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39E055C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x360);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

void (*sub_1A39E059C(uint64_t *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  uint64_t (*v3)(void);
  void *v4;
  id v5;
  uint64_t v6;

  a1[1] = (uint64_t)v1;
  v3 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1B0);
  a1[2] = (uint64_t)v3;
  v4 = (void *)v3();
  v5 = objc_msgSend(v4, sel_channels);

  a1[3] = sub_1A39B11BC(0, &qword_1EE6D3040);
  v6 = sub_1A3AB4BB0();

  *a1 = v6;
  return sub_1A39E0644;
}

void sub_1A39E0644(uint64_t a1, char a2)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(uint64_t (**)(void))(a1 + 16);
  if ((a2 & 1) != 0)
  {
    v3 = swift_bridgeObjectRetain();
    v5 = (id)((uint64_t (*)(uint64_t))v2)(v3);
    v4 = (void *)sub_1A3AB4BA4();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setChannels_, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = (id)v2();
    v4 = (void *)sub_1A3AB4BA4();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setChannels_, v4);
  }

}

uint64_t sub_1A39E06FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  swift_getKeyPath();
  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  v2 = swift_release();
  v3 = *(void **)((char *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
  if (v3)
  {
    v4 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
  }
  else
  {
    v4 = (*(uint64_t (**)(uint64_t))((*v1 & *v0) + 0x340))(v2);
    v3 = 0;
  }
  v5 = v3;
  return v4;
}

id sub_1A39E07F0()
{
  _QWORD *v0;
  void *v1;
  id v2;

  v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
  v2 = objc_msgSend(v1, sel_audioQueueFlags);

  return v2;
}

void sub_1A39E08AC(uint64_t a1)
{
  _QWORD *v1;
  id v3;

  v3 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1B0))();
  objc_msgSend(v3, sel_setAudioQueueFlags_, a1);

}

uint64_t sub_1A39E0904@<X0>(_QWORD **a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x378))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39E0944(unsigned int *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x380))(*a1);
}

void (*sub_1A39E0980(uint64_t a1))(uint64_t a1)
{
  _QWORD *v1;
  uint64_t (*v3)(void);
  void *v4;
  unsigned int v5;

  *(_QWORD *)a1 = v1;
  v3 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1B0);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (void *)v3();
  v5 = objc_msgSend(v4, sel_audioQueueFlags);

  *(_DWORD *)(a1 + 16) = v5;
  return sub_1A39E09F0;
}

void sub_1A39E09F0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = (id)(*(uint64_t (**)(void))(a1 + 8))();
  objc_msgSend(v2, sel_setAudioQueueFlags_, v1);

}

_QWORD *CoreSynthesizer.__allocating_init(voiceResolver:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CoreSynthesizer.init(voiceResolver:)(a1);
}

_QWORD *CoreSynthesizer.init(voiceResolver:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  id v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  objc_class *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t (*v27)(void);
  _QWORD *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  objc_super v43;
  _OWORD v44[4];
  uint64_t v45;

  v3 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB4D00();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TTSSpeechQueue(0);
  v9 = v1;
  sub_1A3A78D60();
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__queue] = TTSSpeechQueue.__allocating_init(priority:)((uint64_t)v8);
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__voices] = MEMORY[0x1E0DEE9D8];
  v11 = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer_schedulingQueue;
  sub_1A3AB45C8();
  *(_QWORD *)&v9[v11] = sub_1A3AB45BC();
  v12 = objc_msgSend(objc_allocWithZone((Class)TTSWrappedAudioQueue), sel_init);
  v13 = (id *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioQueue];
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioQueue] = v12;
  type metadata accessor for TTSAURenderer();
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__speechRenderer] = TTSAURenderer.__allocating_init()();
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__offlineChain] = v10;
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__selectionProviders] = sub_1A39DD2D8(v10);
  sub_1A3A1434C(v10, (uint64_t)v44);
  v14 = &v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__effectManager];
  v15 = v44[3];
  *((_OWORD *)v14 + 2) = v44[2];
  *((_OWORD *)v14 + 3) = v15;
  *((_QWORD *)v14 + 8) = v45;
  v16 = v44[1];
  *(_OWORD *)v14 = v44[0];
  *((_OWORD *)v14 + 1) = v16;
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__effects] = v10;
  v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__realtimeEffects] = 0;
  v17 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioSession] = v17;
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__speechStateObserver] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__deactivateAudioSessionTimerTask] = 0;
  v18 = &v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__nextWordBlock];
  *v18 = 0;
  v18[1] = 0;
  v19 = (void *)*MEMORY[0x1E0C896C8];
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionCategory] = *MEMORY[0x1E0C896C8];
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionCategoryOptions] = 3;
  v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionParticipatesInNowPlayingAppPolicy] = 0;
  v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioSessionAutomaticallyDeactivatesAfterSpeaking] = 0;
  v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___usingAuxiliarySession] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession] = 0;
  v20 = v19;
  sub_1A3AB4574();
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__voiceResolver] = a1;
  v21 = objc_allocWithZone((Class)TTSWrappedAudioQueue);
  swift_retain();
  v22 = objc_msgSend(v21, sel_init);
  objc_storeStrong(v13, v22);
  type metadata accessor for BufferedAudioQueue();
  v23 = v22;
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__bufferedAudioQueue] = BufferedAudioQueue.__allocating_init(queue:)((uint64_t)v23);

  v24 = (objc_class *)type metadata accessor for CoreSynthesizer();
  v43.receiver = v9;
  v43.super_class = v24;
  v25 = objc_msgSendSuper2(&v43, sel_init);
  v26 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v27 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v25) + 0x1B0);
  v28 = v25;
  v29 = (void *)v27();
  v30 = (void *)(*(uint64_t (**)(void))((*v26 & *v28) + 0x370))();
  objc_msgSend(v29, sel_setAudioSession_, v30);

  v31 = *(_QWORD *)((*(uint64_t (**)(void))((*v26 & *v28) + 0x120))() + 24);
  swift_retain();
  swift_release();
  v42 = v31;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A39A4820(&qword_1EE6D09A8);
  sub_1A39C3EF8(&qword_1EE6D17F0, &qword_1EE6D09A8, MEMORY[0x1E0C95FB8]);
  v32 = sub_1A3AB47CC();
  swift_release();
  swift_release();
  swift_getKeyPath();
  v40 = v28;
  v41 = v32;
  (*(void (**)(void))((*v26 & *v28) + 0x5F0))();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v5, 1, 1, v39);
  v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1A3AB4CDC();
  swift_retain();
  v34 = sub_1A3AB4CD0();
  v35 = (_QWORD *)swift_allocObject();
  v36 = MEMORY[0x1E0DF06E8];
  v35[2] = v34;
  v35[3] = v36;
  v35[4] = v33;
  swift_release();
  sub_1A39CDB64((uint64_t)v5, (uint64_t)&unk_1EE6D30A0, (uint64_t)v35);
  swift_release();

  swift_release();
  return v28;
}

uint64_t sub_1A39E0F90(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6 = v2;
  v7 = a1;
  v8 = a2;
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5F0))();
  sub_1A39E9ED0(a1);
  return swift_release();
}

void sub_1A39E102C(void *a1)
{
  sub_1A39E1040(a1);
}

void sub_1A39E1040(void *a1)
{
  _QWORD *v1;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x5F0))();
  swift_release();

}

uint64_t sub_1A39E10C8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v4;
  uint64_t v5;

  swift_getKeyPath();
  v4 = v1;
  v5 = a1;
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x5F0))();
  return swift_release();
}

uint64_t sub_1A39E1148()
{
  return sub_1A39E115C();
}

uint64_t sub_1A39E115C()
{
  _QWORD *v0;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5F0))();
  return swift_release();
}

uint64_t sub_1A39E11DC()
{
  return sub_1A39E115C();
}

uint64_t sub_1A39E11F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[17] = a4;
  v5 = sub_1A3AB4724();
  v4[18] = v5;
  v4[19] = *(_QWORD *)(v5 - 8);
  v4[20] = swift_task_alloc();
  v6 = sub_1A39A4820(&qword_1EE6D09D0);
  v4[21] = v6;
  v4[22] = *(_QWORD *)(v6 - 8);
  v4[23] = swift_task_alloc();
  v4[24] = sub_1A3AB4CDC();
  v4[25] = sub_1A3AB4CD0();
  v4[26] = sub_1A3AB4C70();
  v4[27] = v7;
  return swift_task_switch();
}

uint64_t sub_1A39E12B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 136) + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x1A85978E8](v1);
  if (v2)
  {
    v3 = v2;
    *(_QWORD *)(v0 + 224) = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x150))();

    sub_1A39A4820(&qword_1EE6D2488);
    sub_1A3AB4D6C();
    swift_beginAccess();
    swift_beginAccess();
    *(_QWORD *)(v0 + 232) = sub_1A3AB4CD0();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v4;
    *v4 = v0;
    v4[1] = sub_1A39E143C;
    return sub_1A3AB4D78();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A39E143C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A39E1490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 128);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v5, v4);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v6 = sub_1A3AB470C();
  v7 = sub_1A3AB4FC4();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 136);
  if (v8)
  {
    v10 = swift_slowAlloc();
    *(_DWORD *)v10 = 134218240;
    v11 = (_QWORD *)MEMORY[0x1A85978E8](v9 + 16);
    v12 = v11;
    if (v11)
    {
      v13 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x180))();

      v12 = *(void **)(v13 + 16);
      swift_bridgeObjectRelease();
    }
    swift_release();
    *(_QWORD *)(v10 + 4) = v12;
    swift_release();
    *(_WORD *)(v10 + 12) = 2048;
    v14 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v10 + 14) = v14;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v6, v7, "Updating voice list %ld -> %ld", (uint8_t *)v10, 0x16u);
    MEMORY[0x1A859781C](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }

  v16 = *(_QWORD *)(v0 + 136) + 16;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  v17 = MEMORY[0x1A85978E8](v16);
  if (!v17)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    *(_QWORD *)(v0 + 232) = sub_1A3AB4CD0();
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v22;
    *v22 = v0;
    v22[1] = sub_1A39E143C;
    return sub_1A3AB4D78();
  }
  v18 = (_QWORD *)v17;
  v19 = *(_QWORD *)(v1 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  sub_1A39A4820(&qword_1ED1B5460);
  v20 = (_QWORD *)swift_allocObject();
  v21 = j__malloc_size(v20);
  v20[2] = v19;
  v20[3] = 2 * ((uint64_t)(v21 - 32) / 104);
  v23 = sub_1A39EA0F0((_QWORD *)(v0 + 16), (uint64_t)(v20 + 4), v19, v1);
  swift_bridgeObjectRetain();
  result = sub_1A39AE7C4();
  if (v23 == (_QWORD *)v19)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    (*(void (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x188))(v20);

    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t CoreSynthesizer.__allocating_init(voiceSource:requiredTraits:forbiddenTraits:sortMode:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = sub_1A39AF518(a1, v9);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = sub_1A39EA500((uint64_t)v13, a2, a3, a4, v4, v9, v10);
  sub_1A39A47C4(a1);
  return v15;
}

uint64_t CoreSynthesizer.__allocating_init(voiceSource:requiredTraits:sortMode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = sub_1A39AF518(a1, v7);
  v10 = sub_1A39EA680(v9, a2, a3, v3, v7, v8);
  sub_1A39A47C4(a1);
  return v10;
}

uint64_t CoreSynthesizer.__allocating_init(requiredTraits:sortMode:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *sub_1A39D824C();
  sub_1A39AE770();
  swift_retain_n();
  sub_1A39A4820(&qword_1ED1B5378);
  sub_1A39C3EF8((unint64_t *)&qword_1ED1B5380, &qword_1ED1B5378, MEMORY[0x1E0DEAF38]);
  sub_1A3AB5228();
  v6 = sub_1A39EA3D4(v5, v3, v8, v4, v2);
  swift_release();
  return v6;
}

id CoreSynthesizer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t CoreSynthesizer.init()()
{
  uint64_t ObjectType;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  ObjectType = swift_getObjectType();
  v4 = MEMORY[0x1E0DEE9D8];
  sub_1A39AE770();
  sub_1A39A4820(&qword_1ED1B5378);
  sub_1A39C3EF8((unint64_t *)&qword_1ED1B5380, &qword_1ED1B5378, MEMORY[0x1E0DEAF38]);
  sub_1A3AB5228();
  v1 = *sub_1A39D824C();
  swift_retain_n();
  sub_1A3AB5228();
  v2 = sub_1A39EA3D4(v1, v5, v4, 1, ObjectType);
  swift_release();
  swift_deallocPartialClassInstance();
  return v2;
}

uint64_t sub_1A39E1B90()
{
  return sub_1A39E1BE0();
}

uint64_t sub_1A39E1BA4@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1A39E1C4C(a1, &OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__speechStateObserver, a2);
}

uint64_t sub_1A39E1BB8(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39E1CC8(a1, a2, a3, a4, (uint64_t)&unk_1A3AC1510, (uint64_t)sub_1A39E9DE4);
}

uint64_t sub_1A39E1BCC()
{
  return sub_1A39E1BE0();
}

uint64_t sub_1A39E1BE0()
{
  _QWORD *v0;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  return swift_retain();
}

uint64_t sub_1A39E1C38@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1A39E1C4C(a1, &OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__deactivateAudioSessionTimerTask, a2);
}

uint64_t sub_1A39E1C4C@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X4>, _QWORD *a3@<X8>)
{
  _QWORD *v5;

  v5 = *a1;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x5E8))();
  swift_release();
  *a3 = *(_QWORD *)((char *)v5 + *a2);
  return swift_retain();
}

uint64_t sub_1A39E1CB4(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39E1CC8(a1, a2, a3, a4, (uint64_t)&unk_1A3AC1B68, (uint64_t)sub_1A39EB890);
}

uint64_t sub_1A39E1CC8(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  void (*v10)(uint64_t, uint64_t, _QWORD *, uint64_t);
  _QWORD v12[6];

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath();
  v12[2] = v8;
  v12[3] = v7;
  v10 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x5F0);
  swift_retain();
  v10(KeyPath, a6, v12, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  return swift_release();
}

uint64_t sub_1A39E1D64(unsigned __int8 *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB4724();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x558);
  result = ((uint64_t (*)(uint64_t))v13)(v8);
  if ((result & 1) != 0)
  {
    v28 = v11;
    v15 = sub_1A39AACDC();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v15, v6);
    v16 = v1;
    v17 = sub_1A3AB470C();
    v18 = sub_1A3AB4FE8();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v27[0] = swift_slowAlloc();
      v30 = v27[0];
      *(_DWORD *)v19 = 136315650;
      LOBYTE(v29) = v28;
      v20 = sub_1A3AB49E8();
      v27[1] = v5;
      v29 = sub_1A39A2878(v20, v21, &v30);
      sub_1A3AB5138();
      v22 = swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 1024;
      v23 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x5D0))(v22);

      LODWORD(v29) = v23 & 1;
      sub_1A3AB5138();

      *(_WORD *)(v19 + 18) = 1024;
      v24 = v13();

      LODWORD(v29) = v24 & 1;
      sub_1A3AB5138();

      _os_log_impl(&dword_1A3940000, v17, v18, "Handle state change: %s. useAuxiliarySession=%{BOOL}d audioSessionAutomaticallyDeactivatesAfterSpeaking=%{BOOL}d", (uint8_t *)v19, 0x18u);
      v25 = v27[0];
      swift_arrayDestroy();
      MEMORY[0x1A859781C](v25, -1, -1);
      v26 = v19;
      v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      MEMORY[0x1A859781C](v26, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_getKeyPath();
    (*(void (**)(void))((*v12 & *v16) + 0x5E8))();
    swift_release();
    if (*(_QWORD *)((char *)v16 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__deactivateAudioSessionTimerTask))
    {
      swift_retain();
      sub_1A3AB4DB4();
      swift_release();
    }
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_1A39E2198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[3] = a4;
  v5 = sub_1A3AB4724();
  v4[4] = v5;
  v4[5] = *(_QWORD *)(v5 - 8);
  v4[6] = swift_task_alloc();
  v4[7] = swift_task_alloc();
  v6 = sub_1A3AB53A8();
  v4[8] = v6;
  v4[9] = *(_QWORD *)(v6 - 8);
  v4[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39E225C()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *v3;

  if ((sub_1A3AB4DCC() & 1) != 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1A3AB539C();
    v2 = dword_1EE6D2D90;
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = sub_1A39E2360;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EE6D2D90 + v2))(2000000000000000000, 0, 0, 0, 1);
  }
}

uint64_t sub_1A39E2360()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v4 = v2[9];
  v3 = v2[10];
  v5 = v2[8];
  if (v0)

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

uint64_t sub_1A39E2444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  unsigned int v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;

  if ((sub_1A3AB4DCC() & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = sub_1A39AAD5C();
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v5(v1, v4, v2);
    v6 = sub_1A3AB470C();
    v7 = sub_1A3AB4FE8();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1A3940000, v6, v7, "Will deactivate audio session after auto timeout", v8, 2u);
      MEMORY[0x1A859781C](v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 32);
    v11 = *(_QWORD *)(v0 + 40);
    v12 = *(_QWORD **)(v0 + 24);

    v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    v14 = v13(v9, v10);
    v15 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x370))(v14);
    *(_QWORD *)(v0 + 16) = 0;
    v16 = objc_msgSend(v15, sel_setActive_error_, 0, v0 + 16);

    v17 = *(void **)(v0 + 16);
    if (v16)
    {
      v18 = v17;
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 48);
      v20 = *(_QWORD *)(v0 + 32);
      v21 = v17;
      v22 = (void *)sub_1A3AB42BC();

      swift_willThrow();
      v5(v19, v4, v20);
      v23 = sub_1A3AB470C();
      v24 = sub_1A3AB4FD0();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v25 = 0;
        _os_log_impl(&dword_1A3940000, v23, v24, "Could not deactivate audio session after auto timeout", v25, 2u);
        MEMORY[0x1A859781C](v25, -1, -1);
      }
      v26 = *(_QWORD *)(v0 + 48);
      v27 = *(_QWORD *)(v0 + 32);

      v13(v26, v27);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39E26A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_1A39E26BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 40)) + 0x150))();
  *(_QWORD *)(v0 + 48) = v1;
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))(**(int **)(*(_QWORD *)v1 + 264)
                                                      + *(_QWORD *)(*(_QWORD *)v1 + 264));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_1A39E2748;
  return v4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1A39E2748()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39E28C8(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  id v6;

  v3[15] = a3;
  v3[16] = _Block_copy(aBlock);
  v3[17] = sub_1A3AB497C();
  v3[18] = v5;
  v6 = a3;
  return swift_task_switch();
}

uint64_t sub_1A39E2924()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD);

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 120)) + 0x150))();
  *(_QWORD *)(v0 + 152) = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))(**(int **)(*(_QWORD *)v1 + 264)
                                                       + *(_QWORD *)(*(_QWORD *)v1 + 264));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v2;
  *v2 = v0;
  v2[1] = sub_1A39E29B8;
  return v4(v0 + 16, *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
}

uint64_t sub_1A39E29B8()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void (**v11)(_QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(*v0 + 120);
  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();

  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(void **)(v2 + 96);
    v13 = *(_QWORD *)(v2 + 88);
    v14 = *(_QWORD *)(v2 + 80);
    v15 = *(_QWORD *)(v2 + 72);
    v16 = *(_QWORD *)(v2 + 64);
    v5 = *(_QWORD *)(v2 + 56);
    v17 = *(_QWORD *)(v2 + 48);
    v7 = *(_QWORD *)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 40);
    v8 = *(_QWORD *)(v2 + 16);
    CoreSynthesizer.Voice._bridgeToObjectiveC()((TTSSpeechVoice *)(*(_BYTE *)(v2 + 116) & 1));
    v10 = v9;
    sub_1A39A2EB8(v8, v3, v7, v6, v17, v5, v16, v15, v14, v13, v4);
  }
  else
  {
    v10 = 0;
  }
  v11 = *(void (***)(_QWORD, _QWORD))(v2 + 128);
  ((void (**)(_QWORD, void *))v11)[2](v11, v10);

  _Block_release(v11);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39E2B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A39E2B34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD);

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 32)) + 0x150))();
  *(_QWORD *)(v0 + 40) = v1;
  v4 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(*(_QWORD *)v1 + 304) + *(_QWORD *)(*(_QWORD *)v1 + 304));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_1A39E2BBC;
  return v4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1A39E2BBC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39E2D3C(uint64_t a1, const void *a2, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;

  v3[15] = a3;
  v6 = sub_1A3AB4538();
  v3[16] = v6;
  v3[17] = *(_QWORD *)(v6 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = _Block_copy(a2);
  sub_1A3AB4478();
  v7 = a3;
  return swift_task_switch();
}

uint64_t sub_1A39E2DD0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD);

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 120)) + 0x150))();
  *(_QWORD *)(v0 + 160) = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(*(_QWORD *)v1 + 304) + *(_QWORD *)(*(_QWORD *)v1 + 304));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v2;
  *v2 = v0;
  v2[1] = sub_1A39E2E64;
  return v4(v0 + 16, *(_QWORD *)(v0 + 144));
}

uint64_t sub_1A39E2E64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void (**v14)(_QWORD, _QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(*v0 + 136);
  v1 = *(_QWORD *)(*v0 + 144);
  v4 = *(void **)(*v0 + 120);
  v3 = *(_QWORD *)(*v0 + 128);
  v5 = *v0;
  swift_task_dealloc();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
  {
    v7 = *(void **)(v5 + 96);
    v16 = *(_QWORD *)(v5 + 88);
    v17 = *(_QWORD *)(v5 + 80);
    v18 = *(_QWORD *)(v5 + 72);
    v19 = *(_QWORD *)(v5 + 64);
    v8 = *(_QWORD *)(v5 + 56);
    v20 = *(_QWORD *)(v5 + 48);
    v10 = *(_QWORD *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 40);
    v11 = *(_QWORD *)(v5 + 16);
    CoreSynthesizer.Voice._bridgeToObjectiveC()((TTSSpeechVoice *)(*(_BYTE *)(v5 + 116) & 1));
    v13 = v12;
    sub_1A39A2EB8(v11, v6, v10, v9, v20, v8, v19, v18, v17, v16, v7);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(void (***)(_QWORD, _QWORD))(v5 + 152);
  ((void (**)(_QWORD, void *))v14)[2](v14, v13);

  _Block_release(v14);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A39E2FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD v23[2];
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[216];

  v3 = v2;
  v6 = sub_1A3AB4724();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A39AACDC();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  sub_1A39EA7A8(a1, (uint64_t)v27);
  v11 = sub_1A3AB470C();
  v12 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v24 = v2;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v23[0] = a1;
    v16 = v15;
    v26 = v15;
    v23[1] = a2;
    *(_DWORD *)v14 = 136315138;
    sub_1A39EA818();
    v17 = sub_1A3AB5624();
    v25 = sub_1A39A2878(v17, v18, &v26);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    sub_1A39EA7E4((uint64_t)v27);
    _os_log_impl(&dword_1A3940000, v11, v12, "Enqueue utterance: %s", v14, 0xCu);
    swift_arrayDestroy();
    v19 = v16;
    a1 = v23[0];
    MEMORY[0x1A859781C](v19, -1, -1);
    v20 = v14;
    v3 = v24;
    MEMORY[0x1A859781C](v20, -1, -1);
  }
  else
  {
    sub_1A39EA7E4((uint64_t)v27);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_1A39A4820(&qword_1EE6D30B8);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1A3ABF990;
  sub_1A39EA7A8(a1, v21 + 32);
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x418))(v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39E3244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  Swift::String v41[13];

  v3 = v2;
  v6 = sub_1A39A4820(&qword_1EE6D30C8);
  v34 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v35 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A3AB4724();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A39AACDC();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  swift_bridgeObjectRetain_n();
  v13 = sub_1A3AB470C();
  v14 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v13, v14))
  {
    v31 = v3;
    v15 = swift_slowAlloc();
    v30 = v8;
    v16 = (uint8_t *)v15;
    v29 = swift_slowAlloc();
    v41[0]._countAndFlagsBits = v29;
    v32 = v6;
    *(_DWORD *)v16 = 136315138;
    v28 = v16 + 4;
    v17 = swift_bridgeObjectRetain();
    v18 = MEMORY[0x1A85959A4](v17, &type metadata for CoreSynthesizer.Utterance);
    v33 = a2;
    v20 = v19;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v36 = sub_1A39A2878(v18, v20, &v41[0]._countAndFlagsBits);
    v6 = v32;
    sub_1A3AB5138();
    swift_bridgeObjectRelease_n();
    a2 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v13, v14, "Enqueue utterances: %s", v16, 0xCu);
    v21 = v29;
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v21, -1, -1);
    MEMORY[0x1A859781C](v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v30);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v22 = sub_1A39E4FCC(a1);
  v23 = v22;
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v25 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1A39EA7A8(v25, (uint64_t)v41);
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v40 = 9;
      TTSSpeechEvent.emit(forJob:)(v41[0]);
      sub_1A39EA7E4((uint64_t)v41);
      v25 += 208;
      --v24;
    }
    while (v24);
    v22 = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v23 + 16) == 1)
  {
    v26 = sub_1A39A4820((uint64_t *)&unk_1EE6D30D0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a2, v23+ ((*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80)), v26);
  }
  else
  {
    MEMORY[0x1E0C80A78](v22);
    *(&v28 - 2) = (uint8_t *)v23;
    (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v35, *MEMORY[0x1E0DF0A50], v6);
    sub_1A3AB4E98();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39E35D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  sub_1A39A4820(&qword_1EE6D30E0);
  v4[7] = swift_task_alloc();
  v5 = sub_1A3AB4724();
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39E3658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_unknownObjectRetain_n();
  v5 = sub_1A3AB470C();
  v6 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 64);
    v24 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v26 = v10;
    *(_DWORD *)v9 = 136315138;
    ObjectType = swift_getObjectType();
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(ObjectType, v8);
    *(_QWORD *)(v0 + 16) = sub_1A39A2878(v12, v13, &v26);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1A3940000, v5, v6, "Enqueue queueable: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v10, -1, -1);
    MEMORY[0x1A859781C](v9, -1, -1);

    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v24, v22);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 64);
    swift_unknownObjectRelease_n();

    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  v25 = *(_OWORD *)(v0 + 32);
  v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 48)) + 0x120))(v14);
  *(_QWORD *)(v0 + 88) = v18;
  sub_1A39A4820(&qword_1EE6D30E8);
  v19 = swift_allocObject();
  *(_QWORD *)(v0 + 96) = v19;
  *(_OWORD *)(v19 + 16) = xmmword_1A3ABF990;
  *(_OWORD *)(v19 + 32) = v25;
  v23 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v18 + 328)
                                                 + *(_QWORD *)(*(_QWORD *)v18 + 328));
  swift_unknownObjectRetain();
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v20;
  *v20 = v0;
  v20[1] = sub_1A39E38C4;
  return v23(v19, 1);
}

uint64_t sub_1A39E38C4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A39E3934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = sub_1A39A4820(&qword_1EE6D30F0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    (*(void (**)(_QWORD, unint64_t, uint64_t))(v4 + 16))(*(_QWORD *)(v0 + 56), v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  v7 = sub_1A39A4820(&qword_1EE6D30F0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v8 + 32))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 56), v7);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1A39E3A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD v23[2];
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[216];

  v3 = v2;
  v6 = sub_1A3AB4724();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A39AACDC();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  sub_1A39EA7A8(a1, (uint64_t)v27);
  v11 = sub_1A3AB470C();
  v12 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v24 = v2;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v23[0] = a1;
    v16 = v15;
    v26 = v15;
    v23[1] = a2;
    *(_DWORD *)v14 = 136315138;
    sub_1A39EA818();
    v17 = sub_1A3AB5624();
    v25 = sub_1A39A2878(v17, v18, &v26);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    sub_1A39EA7E4((uint64_t)v27);
    _os_log_impl(&dword_1A3940000, v11, v12, "Buffers for utterance: %s", v14, 0xCu);
    swift_arrayDestroy();
    v19 = v16;
    a1 = v23[0];
    MEMORY[0x1A859781C](v19, -1, -1);
    v20 = v14;
    v3 = v24;
    MEMORY[0x1A859781C](v20, -1, -1);
  }
  else
  {
    sub_1A39EA7E4((uint64_t)v27);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_1A39A4820(&qword_1EE6D30B8);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1A3ABF990;
  sub_1A39EA7A8(a1, v21 + 32);
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x430))(v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39E3CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = sub_1A39A4820(&qword_1EE6D30C8);
  v35 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A3AB4724();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A39AACDC();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  swift_bridgeObjectRetain_n();
  v12 = sub_1A3AB470C();
  v13 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v12, v13))
  {
    v32 = v7;
    v14 = swift_slowAlloc();
    v34 = v4;
    v15 = (uint8_t *)v14;
    v30 = swift_slowAlloc();
    v37 = v30;
    v33 = v6;
    *(_DWORD *)v15 = 136315138;
    v29[1] = v15 + 4;
    v16 = swift_bridgeObjectRetain();
    v17 = MEMORY[0x1A85959A4](v16, &type metadata for CoreSynthesizer.Utterance);
    v31 = v8;
    v18 = a2;
    v19 = v17;
    v21 = v20;
    swift_bridgeObjectRelease();
    v22 = v19;
    a2 = v18;
    v36 = sub_1A39A2878(v22, v21, &v37);
    v6 = v33;
    sub_1A3AB5138();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v12, v13, "Buffers for utterances: %s", v15, 0xCu);
    v23 = v30;
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v23, -1, -1);
    v24 = v15;
    v4 = v34;
    MEMORY[0x1A859781C](v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v32);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v25 = sub_1A39E49FC(a1);
  v26 = v25;
  if (*(_QWORD *)(v25 + 16) == 1)
  {
    v27 = sub_1A39A4820((uint64_t *)&unk_1EE6D30D0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a2, v26+ ((*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80)), v27);
  }
  else
  {
    MEMORY[0x1E0C80A78](v25);
    v29[-2] = v26;
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v6, *MEMORY[0x1E0DF0A50], v4);
    sub_1A3AB4E98();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39E3FD8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = sub_1A3AB4724();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39E4038()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void);

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[3];
  v4 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v5 = sub_1A3AB470C();
  v6 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1A3940000, v5, v6, "Stop speaking", v7, 2u);
    MEMORY[0x1A859781C](v7, -1, -1);
  }
  v9 = v0[4];
  v8 = v0[5];
  v10 = (_QWORD *)v0[2];
  v11 = v0[3];

  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
  v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x120))(v12);
  v0[6] = v13;
  v16 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v13 + 360) + *(_QWORD *)(*(_QWORD *)v13 + 360));
  v14 = (_QWORD *)swift_task_alloc();
  v0[7] = v14;
  *v14 = v0;
  v14[1] = sub_1A39E4168;
  return v16();
}

uint64_t sub_1A39E4168()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39E42E0(const void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_1A39E4340;
  return sub_1A39E3FD8();
}

uint64_t sub_1A39E4340()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  uint64_t v4;

  v1 = *(void (***)(_QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1A39E43A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = sub_1A3AB4724();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39E4404()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void);

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[3];
  v4 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v5 = sub_1A3AB470C();
  v6 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1A3940000, v5, v6, "Pause speaking", v7, 2u);
    MEMORY[0x1A859781C](v7, -1, -1);
  }
  v9 = v0[4];
  v8 = v0[5];
  v10 = (_QWORD *)v0[2];
  v11 = v0[3];

  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
  v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x120))(v12);
  v0[6] = v13;
  v16 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v13 + 352) + *(_QWORD *)(*(_QWORD *)v13 + 352));
  v14 = (_QWORD *)swift_task_alloc();
  v0[7] = v14;
  *v14 = v0;
  v14[1] = sub_1A39EC43C;
  return v16();
}

uint64_t sub_1A39E4534()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = sub_1A3AB4724();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39E4594()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void);

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[3];
  v4 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v5 = sub_1A3AB470C();
  v6 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1A3940000, v5, v6, "Resume speaking", v7, 2u);
    MEMORY[0x1A859781C](v7, -1, -1);
  }
  v9 = v0[4];
  v8 = v0[5];
  v10 = (_QWORD *)v0[2];
  v11 = v0[3];

  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
  v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x120))(v12);
  v0[6] = v13;
  v16 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v13 + 344) + *(_QWORD *)(*(_QWORD *)v13 + 344));
  v14 = (_QWORD *)swift_task_alloc();
  v0[7] = v14;
  *v14 = v0;
  v14[1] = sub_1A39EC43C;
  return v16();
}

uint64_t sub_1A39E46C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = sub_1A3AB4724();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39E4728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_unknownObjectRetain_n();
  v5 = sub_1A3AB470C();
  v6 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v5, v6))
  {
    v25 = *(_QWORD *)(v0 + 56);
    v26 = *(_QWORD *)(v0 + 48);
    v27 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 32);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v29 = v9;
    *(_DWORD *)v8 = 136315138;
    ObjectType = swift_getObjectType();
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
    *(_QWORD *)(v0 + 16) = sub_1A39A2878(v11, v12, &v29);
    sub_1A3AB5138();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1A3940000, v5, v6, "Cancel queued %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v9, -1, -1);
    MEMORY[0x1A859781C](v8, -1, -1);

    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 48);
    swift_unknownObjectRelease_n();

    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  v17 = *(_QWORD *)(v0 + 32);
  v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 40)) + 0x120))(v13);
  *(_QWORD *)(v0 + 72) = v18;
  v19 = swift_getObjectType();
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v19, v17);
  v22 = v21;
  *(_QWORD *)(v0 + 80) = v21;
  v28 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v18 + 336)
                                                 + *(_QWORD *)(*(_QWORD *)v18 + 336));
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v23;
  *v23 = v0;
  v23[1] = sub_1A39E4990;
  return v28(v20, v22);
}

uint64_t sub_1A39E4990()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39E49FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[104];

  v2 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1A39A4820(&qword_1EE6D30C8);
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v50 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820((uint64_t *)&unk_1EE6D30D0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v40 - v11;
  v13 = sub_1A39A4820(&qword_1EE6D3240);
  v14 = MEMORY[0x1E0C80A78](v13);
  v49 = (uint64_t)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v40 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
    return MEMORY[0x1E0DEE9D8];
  v44 = type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  v19 = a1 + 32;
  v43 = *MEMORY[0x1E0DF0A50];
  v40 = a1;
  swift_bridgeObjectRetain();
  v20 = MEMORY[0x1E0DEE9D8];
  v42 = MEMORY[0x1E0DEE9C0] + 8;
  v48 = v6;
  v47 = v7;
  v46 = v10;
  v41 = v12;
  v45 = v17;
  do
  {
    v54 = v20;
    v21 = sub_1A39A4820(&qword_1EE6D3250);
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v17, 1, 1, v21);
    MEMORY[0x1E0C80A78](v22);
    *(&v40 - 2) = (uint64_t)v17;
    (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, v43, v52);
    sub_1A3AB4E98();
    sub_1A39EA7A8(v19, (uint64_t)v59);
    v23 = v49;
    sub_1A39EBD4C((uint64_t)v17, v49);
    v24 = sub_1A3A5D048(v53, (uint64_t)v59, 1, v23);
    v25 = sub_1A3AB4D00();
    v26 = *(_QWORD *)(v25 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v4, 1, 1, v25);
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = 0;
    v27[3] = 0;
    v27[4] = v24;
    LODWORD(v23) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v4, 1, v25);
    swift_retain();
    if ((_DWORD)v23 == 1)
    {
      sub_1A39B11F4((uint64_t)v4, (uint64_t *)&unk_1ED1B53A0);
    }
    else
    {
      sub_1A3AB4CF4();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v25);
    }
    if (v27[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v28 = sub_1A3AB4C70();
      v30 = v29;
      swift_unknownObjectRelease();
    }
    else
    {
      v28 = 0;
      v30 = 0;
    }
    v31 = v41;
    if (v30 | v28)
    {
      v56 = 0;
      v55 = 0;
      v57 = v28;
      v58 = v30;
    }
    swift_task_create();
    swift_release();
    v32 = v47;
    v33 = v46;
    v34 = v48;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v46, v31, v48);
    v35 = v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v35 = sub_1A39E9130(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
    v37 = *(_QWORD *)(v35 + 16);
    v36 = *(_QWORD *)(v35 + 24);
    v38 = v35;
    if (v37 >= v36 >> 1)
      v38 = sub_1A39E9130(v36 > 1, v37 + 1, 1, v35);
    *(_QWORD *)(v38 + 16) = v37 + 1;
    v20 = v38;
    (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v38+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v37, v33, v34);
    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v34);
    v17 = v45;
    sub_1A39B11F4((uint64_t)v45, &qword_1EE6D3240);
    v19 += 208;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1A39E4F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)a4 + 264) + *(_QWORD *)(*(_QWORD *)a4 + 264));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1A39B1604;
  return v7();
}

unint64_t sub_1A39E4FCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  id v31;
  _QWORD v33[2];
  unsigned int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  _BYTE v48[208];
  _BYTE v49[208];
  uint64_t v50;

  v2 = sub_1A39A4820(&qword_1EE6D3240);
  MEMORY[0x1E0C80A78](v2);
  v42 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A39A4820(&qword_1EE6D30C8);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820(&qword_1EE6D3250);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A39A4820((uint64_t *)&unk_1EE6D30D0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v47 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v33 - v14;
  v16 = MEMORY[0x1E0DEE9D8];
  v50 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(a1 + 16))
  {
    v46 = *(_QWORD *)(a1 + 16);
    v38 = v7;
    v35 = type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
    v17 = a1 + 32;
    v34 = *MEMORY[0x1E0DF0A50];
    v33[1] = a1;
    swift_bridgeObjectRetain();
    v18 = MEMORY[0x1E0DEE9D8];
    v36 = v15;
    v37 = v9;
    do
    {
      v44 = v17;
      sub_1A39EA7A8(v17, (uint64_t)v49);
      v20 = v39;
      v19 = v40;
      v21 = v41;
      (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v39, v34, v41);
      sub_1A3AB4E2C();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v21);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v47, v15, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_1A39E9130(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
      v23 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      if (v23 >= v22 >> 1)
        v18 = sub_1A39E9130(v22 > 1, v23 + 1, 1, v18);
      *(_QWORD *)(v18 + 16) = v23 + 1;
      v24 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v45 = v18;
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v24 + *(_QWORD *)(v11 + 72) * v23, v47, v10);
      sub_1A39EA7A8((uint64_t)v49, (uint64_t)v48);
      v25 = v38;
      v26 = (uint64_t)v42;
      v27 = v10;
      v28 = v37;
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v42, v37, v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v6);
      sub_1A3A5D048(v43, (uint64_t)v48, 0, v26);
      MEMORY[0x1A8595980]();
      if (*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1A3AB4BE0();
      sub_1A3AB4C10();
      sub_1A3AB4BC8();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v6);
      v15 = v36;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v27);
      sub_1A39EA7E4((uint64_t)v49);
      v17 = v44 + 208;
      --v46;
      v10 = v27;
      v18 = v45;
    }
    while (v46);
    swift_bridgeObjectRelease();
    v16 = v50;
  }
  else
  {
    v18 = MEMORY[0x1E0DEE9D8];
  }
  v29 = v43;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 24) = v16;
  v31 = v29;
  sub_1A3AB45B0();
  swift_release();
  return v18;
}

uint64_t sub_1A39E53DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_1A39E53F4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x120))();
  *(_QWORD *)(v0 + 32) = v2;
  v3 = sub_1A39E5500(v1);
  *(_QWORD *)(v0 + 40) = v3;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 328) + *(_QWORD *)(*(_QWORD *)v2 + 328));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_1A39E5490;
  return v6(v3, 1);
}

uint64_t sub_1A39E5490()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39E5500(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v18 = MEMORY[0x1E0DEE9D8];
  result = sub_1A39E9F4C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = MEMORY[0x1A85960B8](v5, a1);
        v8 = *(_QWORD *)(v18 + 16);
        v7 = *(_QWORD *)(v18 + 24);
        if (v8 >= v7 >> 1)
          sub_1A39E9F4C(v7 > 1, v8 + 1, 1);
        ++v5;
        v9 = sub_1A39B9F44(&qword_1EE6D32A0, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
        *(_QWORD *)(v18 + 16) = v8 + 1;
        v10 = v18 + 16 * v8;
        *(_QWORD *)(v10 + 32) = v6;
        *(_QWORD *)(v10 + 40) = v9;
      }
      while (v2 != v5);
    }
    else
    {
      v11 = (uint64_t *)(a1 + 32);
      v12 = *(_QWORD *)(v18 + 16);
      v13 = 16 * v12;
      do
      {
        v14 = *v11;
        v15 = *(_QWORD *)(v18 + 24);
        swift_retain();
        if (v12 >= v15 >> 1)
          sub_1A39E9F4C(v15 > 1, v12 + 1, 1);
        v16 = sub_1A39B9F44(&qword_1EE6D32A0, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
        *(_QWORD *)(v18 + 16) = v12 + 1;
        v17 = v18 + v13;
        *(_QWORD *)(v17 + 32) = v14;
        *(_QWORD *)(v17 + 40) = v16;
        v13 += 16;
        ++v11;
        ++v12;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_1A39E56DC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39E5720()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  v1 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__nextWordBlock);
  swift_beginAccess();
  v2 = *v1;
  sub_1A39EA864(*v1);
  return v2;
}

uint64_t sub_1A39E57AC@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x480))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = sub_1A39A9090;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_1A39E5828(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1A39A9090;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x488);
  sub_1A39EA864(v3);
  return v7(v6, v5);
}

void (*sub_1A39E58C0(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39E56DC();
  return sub_1A39E59B0;
}

void sub_1A39E59B0(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t sub_1A39E5A04()
{
  _QWORD *v0;

  return ((*(unsigned int (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))() >> 8) & 1;
}

uint64_t sub_1A39E5ABC(char a1)
{
  _QWORD *v1;
  _QWORD *v3;
  int v4;
  int v5;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x378))();
  if ((a1 & 1) != 0)
    v5 = 256;
  else
    v5 = 0;
  return (*(uint64_t (**)(_QWORD))((*v3 & *v1) + 0x380))(v4 & 0xFFFFFEFF | v5);
}

uint64_t sub_1A39E5B20@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x498))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A39E5B64(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x4A0))(*a1);
}

uint64_t (*sub_1A39E5BA0(uint64_t a1))(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int16 (*v2)(void);

  *(_QWORD *)a1 = v1;
  v2 = *(unsigned __int16 (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x378);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = (v2() >> 8) & 1;
  return sub_1A39E5BF4;
}

uint64_t sub_1A39E5BF4(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  int v3;
  int v4;

  v1 = *(_QWORD **)a1;
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = (*(uint64_t (**)(void))(a1 + 8))() & 0xFFFFFEFF;
  if (v2)
    v4 = 256;
  else
    v4 = 0;
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380))(v3 | v4);
}

void sub_1A39E5D0C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t (*v3)(void);
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  swift_getKeyPath();
  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))((*v1 & *v0) + 0x4C8);
    v4 = v2;
    v5 = (void *)v3();
    v9[0] = 0;
    LODWORD(v3) = objc_msgSend(v4, sel_setCategory_error_, v5, v9);

    v6 = v9[0];
    if (!(_DWORD)v3)
    {
      v7 = v6;
      v8 = (void *)sub_1A3AB42BC();

      swift_willThrow();
    }
  }
}

uint64_t (*sub_1A39E5E18(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A39E5E60;
}

uint64_t sub_1A39E5E60(uint64_t a1, char a2)
{
  return sub_1A39E6968(a1, a2, (uint64_t (*)(uint64_t))sub_1A39E5D0C);
}

id sub_1A39E5E80(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t KeyPath;
  void (*v7)(uint64_t);
  _QWORD *v8;
  id *v9;
  id v10;

  KeyPath = swift_getKeyPath();
  v7 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x5E8);
  v8 = a1;
  v7(KeyPath);
  swift_release();
  v9 = (id *)((char *)v8 + *a4);
  swift_beginAccess();
  v10 = *v9;

  return v10;
}

id sub_1A39E5F1C()
{
  return sub_1A39E5F30((uint64_t)&unk_1A3AC1578, &OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionCategory);
}

id sub_1A39E5F30(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  id *v4;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4 = (id *)((char *)v2 + *a2);
  swift_beginAccess();
  return *v4;
}

void sub_1A39E5FBC(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  void (*v9)(uint64_t, uint64_t, _QWORD *, uint64_t);
  id v10;
  _QWORD *v11;
  _QWORD v12[6];

  KeyPath = swift_getKeyPath();
  v12[2] = a1;
  v12[3] = a3;
  v9 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x5F0);
  v10 = a3;
  v11 = a1;
  v9(KeyPath, a5, v12, MEMORY[0x1E0DEE9C0] + 8);

  swift_release();
}

uint64_t sub_1A39E6060@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x4C8))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39E60A0(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x4D0))(*a1);
}

void sub_1A39E60E0(uint64_t a1, void *a2)
{
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(a1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionCategory);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a2;
  v5 = a2;

  sub_1A39E5D0C();
}

void (*sub_1A39E6150(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39E5E18((uint64_t)v4);
  return sub_1A39E6240;
}

void sub_1A39E6240(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

void sub_1A39E62F4()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t (*v3)(void);
  id v4;
  unsigned int v5;
  id v6;
  void *v7;
  void *v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  swift_getKeyPath();
  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))((*v1 & *v0) + 0x4F8);
    v4 = v2;
    v9[0] = 0;
    v5 = objc_msgSend(v4, sel_setCategoryOptions_error_, v3(), v9);

    v6 = v9[0];
    if (!v5)
    {
      v7 = v6;
      v8 = (void *)sub_1A3AB42BC();

      swift_willThrow();
    }
  }
}

uint64_t (*sub_1A39E63F8(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A39E6440;
}

uint64_t sub_1A39E6440(uint64_t a1, char a2)
{
  return sub_1A39E6968(a1, a2, (uint64_t (*)(uint64_t))sub_1A39E62F4);
}

uint64_t sub_1A39E64E4()
{
  _QWORD *v0;
  char *v1;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  v1 = (char *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionCategoryOptions;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1A39E65F0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x4F8))();
  *a2 = result;
  return result;
}

uint64_t sub_1A39E6630(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x500))(*a1);
}

void (*sub_1A39E666C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39E63F8((uint64_t)v4);
  return sub_1A39E675C;
}

void sub_1A39E675C(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

void sub_1A39E6810()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t (*v3)(void);
  id v4;
  unsigned int v5;
  id v6;
  void *v7;
  void *v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  swift_getKeyPath();
  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))((*v1 & *v0) + 0x528);
    v4 = v2;
    v9[0] = 0;
    v5 = objc_msgSend(v4, sel_setParticipatesInNowPlayingAppPolicy_error_, v3() & 1, v9);

    v6 = v9[0];
    if (!v5)
    {
      v7 = v6;
      v8 = (void *)sub_1A3AB42BC();

      swift_willThrow();
    }
  }
}

uint64_t (*sub_1A39E6914(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1A39E695C;
}

uint64_t sub_1A39E695C(uint64_t a1, char a2)
{
  return sub_1A39E6968(a1, a2, (uint64_t (*)(uint64_t))sub_1A39E6810);
}

uint64_t sub_1A39E6968(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return a3(result);
  return result;
}

uint64_t sub_1A39E69B8()
{
  return sub_1A39E6CE8((uint64_t)&unk_1A3AC1620, &OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionParticipatesInNowPlayingAppPolicy);
}

uint64_t sub_1A39E69E0@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x528))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A39E6A24(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x530))(*a1);
}

void (*sub_1A39E6A60(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39E6914((uint64_t)v4);
  return sub_1A39E6B50;
}

void sub_1A39E6B50(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

uint64_t (*sub_1A39E6BE8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A39E6C40(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t KeyPath;
  void (*v7)(uint64_t);
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;

  KeyPath = swift_getKeyPath();
  v7 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x5E8);
  v8 = a1;
  v7(KeyPath);
  swift_release();
  v9 = (unsigned __int8 *)v8 + *a4;
  swift_beginAccess();
  v10 = *v9;

  return v10;
}

uint64_t sub_1A39E6CD4()
{
  return sub_1A39E6CE8((uint64_t)&unk_1A3AC1688, &OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioSessionAutomaticallyDeactivatesAfterSpeaking);
}

uint64_t sub_1A39E6CE8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4 = (unsigned __int8 *)v2 + *a2;
  swift_beginAccess();
  return *v4;
}

uint64_t sub_1A39E6D74(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  void (*v9)(uint64_t, uint64_t, _QWORD *, uint64_t);
  _QWORD *v10;
  _QWORD v12[3];
  char v13;

  KeyPath = swift_getKeyPath();
  v12[2] = a1;
  v13 = a3;
  v9 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x5F0);
  v10 = a1;
  v9(KeyPath, a5, v12, MEMORY[0x1E0DEE9C0] + 8);

  return swift_release();
}

uint64_t sub_1A39E6E10@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x558))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A39E6E54(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x560))(*a1);
}

void (*sub_1A39E6E90(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E8))();
  swift_release();
  v4[5] = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___observationRegistrar;
  *v4 = v2;
  swift_getKeyPath();
  v4[6] = sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  sub_1A3AB4568();
  swift_release();
  v4[7] = sub_1A39E6BE8();
  return sub_1A39E6F80;
}

void sub_1A39E6F80(_QWORD *a1)
{
  sub_1A39E6F8C(a1);
}

void sub_1A39E6F8C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  *v1 = v1[4];
  swift_getKeyPath();
  sub_1A3AB455C();
  swift_release();
  free(v1);
}

uint64_t sub_1A39E6FFC()
{
  _QWORD *v0;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  return *((unsigned __int8 *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___usingAuxiliarySession);
}

uint64_t sub_1A39E7054@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x5E8))();
  result = swift_release();
  *a2 = *((_BYTE *)v3 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___usingAuxiliarySession);
  return result;
}

uint64_t sub_1A39E70C0(char *a1, _QWORD **a2)
{
  char v2;
  _QWORD *v3;
  _QWORD *v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  swift_getKeyPath();
  v5 = v3;
  v6 = v2;
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x5F0))();
  return swift_release();
}

void *sub_1A39E7288()
{
  _QWORD *v0;
  void *v1;
  id v2;

  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
  swift_release();
  v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
  v2 = v1;
  return v1;
}

id sub_1A39E7390@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  void *v4;

  v3 = *a1;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x5E8))();
  swift_release();
  v4 = *(void **)((char *)v3 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
  *a2 = v4;
  return v4;
}

void sub_1A39E73FC(void **a1, _QWORD **a2)
{
  void *v2;
  _QWORD *v3;
  uint64_t KeyPath;
  void (*v5)(uint64_t, void (*)(), _QWORD *, uint64_t);
  id v6;
  _QWORD v7[6];

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath();
  v7[2] = v3;
  v7[3] = v2;
  v5 = *(void (**)(uint64_t, void (*)(), _QWORD *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x5F0);
  v6 = v2;
  v5(KeyPath, sub_1A39EC3B0, v7, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();

}

void sub_1A39E7498(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD *v5;
  void *v6;
  id v7;

  v3 = *(void **)((char *)a1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
  *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession) = a2;
  v4 = a2;

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1B0))();
  v7 = (id)(*(uint64_t (**)(void))((*v5 & *a1) + 0x370))();
  objc_msgSend(v6, sel_setAudioSession_, v7);

}

uint64_t sub_1A39E75F4(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void (*v3)(void);
  uint64_t result;
  id v5;
  uint64_t KeyPath;
  uint64_t v7;
  void (*v8)(uint64_t, void (*)());
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(void);
  id v12;
  void *v13;
  unsigned int v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(void);
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t (*v26)(void);
  id v27;
  char v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38[3];

  v38[2] = *(id *)MEMORY[0x1E0C80C00];
  if ((a1 & 1) != 0)
  {
    swift_getKeyPath();
    v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v3 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x5E8);
    v3();
    result = swift_release();
    if ((*((_BYTE *)v1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___usingAuxiliarySession) & 1) != 0)
      return result;
    v5 = objc_msgSend((id)objc_opt_self(), sel_auxiliarySession);
    KeyPath = swift_getKeyPath();
    v7 = MEMORY[0x1E0C80A78](KeyPath);
    v8 = *(void (**)(uint64_t, void (*)()))((*v2 & *v1) + 0x5F0);
    v8(v7, sub_1A39EC3B0);
    swift_release();

    swift_getKeyPath();
    v3();
    swift_release();
    v9 = OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession;
    v10 = *(void **)((char *)v1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxiliarySession);
    if (v10)
    {
      v11 = *(uint64_t (**)(void))((*v2 & *v1) + 0x4C8);
      v12 = v10;
      v13 = (void *)v11();
      v38[0] = 0;
      v14 = objc_msgSend(v12, sel_setCategory_error_, v13, v38);

      v15 = v38[0];
      if (!v14)
      {
        v16 = v15;
        v17 = (void *)sub_1A3AB42BC();

        swift_willThrow();
      }
    }
    swift_getKeyPath();
    v3();
    swift_release();
    v18 = *(void **)((char *)v1 + v9);
    if (v18)
    {
      v19 = *(uint64_t (**)(void))((*v2 & *v1) + 0x4F8);
      v20 = v18;
      v21 = v19();
      v38[0] = 0;
      LODWORD(v19) = objc_msgSend(v20, sel_setCategoryOptions_error_, v21, v38);

      v22 = v38[0];
      if (!(_DWORD)v19)
      {
        v23 = v22;
        v24 = (void *)sub_1A3AB42BC();

        swift_willThrow();
      }
    }
    swift_getKeyPath();
    v3();
    swift_release();
    v25 = *(void **)((char *)v1 + v9);
    if (v25)
    {
      v26 = *(uint64_t (**)(void))((*v2 & *v1) + 0x528);
      v27 = v25;
      v28 = v26();
      v38[0] = 0;
      LODWORD(v26) = objc_msgSend(v27, sel_setParticipatesInNowPlayingAppPolicy_error_, v28 & 1, v38);

      v29 = v38[0];
      if (!(_DWORD)v26)
      {
        v30 = v29;
        v31 = (void *)sub_1A3AB42BC();

        swift_willThrow();
      }
    }
    v32 = swift_getKeyPath();
    v33 = MEMORY[0x1E0C80A78](v32);
    v34 = sub_1A39EC440;
  }
  else
  {
    v35 = swift_getKeyPath();
    v36 = MEMORY[0x1E0C80A78](v35);
    v8 = *(void (**)(uint64_t, void (*)()))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x5F0);
    v8(v36, sub_1A39EA874);
    swift_release();
    v37 = swift_getKeyPath();
    v33 = MEMORY[0x1E0C80A78](v37);
    v34 = sub_1A39EA89C;
  }
  v8(v33, v34);
  return swift_release();
}

uint64_t sub_1A39E7A20@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x5D0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A39E7A64(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x5D8))(*a1);
}

uint64_t (*sub_1A39E7AA0(uint64_t a1))(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)a1 = v1;
  swift_getKeyPath();
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x5E8))();
  swift_release();
  *(_BYTE *)(a1 + 8) = *((_BYTE *)v1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___usingAuxiliarySession);
  return sub_1A39E7B18;
}

uint64_t sub_1A39E7B18(uint64_t a1)
{
  return sub_1A39E75F4(*(_BYTE *)(a1 + 8));
}

uint64_t sub_1A39E7B3C()
{
  sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  return sub_1A3AB4550();
}

uint64_t sub_1A39E7BA8()
{
  sub_1A39B9F44(&qword_1EE6D0998, (uint64_t (*)(uint64_t))type metadata accessor for CoreSynthesizer, (uint64_t)&protocol conformance descriptor for CoreSynthesizer);
  return sub_1A3AB4544();
}

id CoreSynthesizer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreSynthesizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1A39E7E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v4 = sub_1A39A4820(&qword_1EE6D3250);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A3AB4D00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_bridgeObjectRetain();
  sub_1A39DDD84((uint64_t)v9, (uint64_t)&unk_1EE6D3270, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_1A39E7F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[21] = a4;
  v5[22] = a5;
  v6 = sub_1A39A4820(&qword_1EE6D3278);
  v5[23] = v6;
  v5[24] = *(_QWORD *)(v6 - 8);
  v5[25] = swift_task_alloc();
  v7 = sub_1A39A4820((uint64_t *)&unk_1EE6D4070);
  v5[26] = v7;
  v5[27] = *(_QWORD *)(v7 - 8);
  v5[28] = swift_task_alloc();
  v8 = sub_1A39A4820((uint64_t *)&unk_1EE6D30D0);
  v5[29] = v8;
  v5[30] = *(_QWORD *)(v8 - 8);
  v5[31] = swift_task_alloc();
  v9 = sub_1A39A4820(&qword_1EE6D3280);
  v5[32] = v9;
  v5[33] = *(_QWORD *)(v9 - 8);
  v5[34] = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D3288);
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39E8094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 168) + 16);
  *(_QWORD *)(v0 + 296) = v4;
  v5 = swift_bridgeObjectRetain();
  v6 = *(_QWORD **)(v0 + 280);
  if (v4)
  {
    v7 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 272) + *(int *)(v1 + 48);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16))(v8, v5 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v7);
    v9 = (char *)v6 + *(int *)(v1 + 48);
    *v6 = 0;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v9, v8, v7);
    v10 = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v6, 0, 1, v1);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v2 + 56))(*(_QWORD *)(v0 + 280), 1, 1, v1);
    v10 = *(_QWORD *)(v0 + 296);
  }
  *(_QWORD *)(v0 + 304) = v10;
  v11 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 264);
  sub_1A39EC050(*(_QWORD *)(v0 + 280), v11);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  v15 = *(_QWORD *)(v0 + 248);
  if (v14 == 1)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = *(char **)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 232);
    v19 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 312) = *(_QWORD *)v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v15, &v17[*(int *)(v18 + 48)], v20);
    sub_1A3AB4D6C();
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 320) = v21;
    *v21 = v0;
    v21[1] = sub_1A39E828C;
    return sub_1A3AB4E80();
  }
}

uint64_t sub_1A39E828C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39E82F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  if (v2 >> 3 != 0xFFFFFFFF)
  {
    v10 = *(_QWORD *)(v0 + 24);
    v11 = *(_QWORD *)(v0 + 40);
    if (v2 >> 61 == 3)
    {
      if (*(_QWORD *)(v0 + 312) == *(_QWORD *)(v0 + 296) - 1)
      {
        v35 = *(_QWORD *)(v0 + 192);
        v36 = *(_QWORD *)(v0 + 200);
        v37 = *(_QWORD *)(v0 + 184);
        *(_QWORD *)(v0 + 80) = v1;
        *(_QWORD *)(v0 + 88) = v10;
        *(_QWORD *)(v0 + 96) = v2;
        *(_QWORD *)(v0 + 104) = v11;
        sub_1A39A4820(&qword_1EE6D3250);
        sub_1A3AB4E50();
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
        *(_QWORD *)(v0 + 152) = 0;
        sub_1A3AB4E5C();
      }
      goto LABEL_22;
    }
    if (v2 >> 61 == 4 && v2 == 0x8000000000000000 && (v10 | v1 | v11) == 0)
    {
      if (*(_QWORD *)(v0 + 312))
        goto LABEL_22;
      v14 = *(_QWORD *)(v0 + 192);
      v15 = *(_QWORD *)(v0 + 200);
      v16 = *(_QWORD *)(v0 + 184);
      *(_QWORD *)(v0 + 48) = 0;
      *(_QWORD *)(v0 + 56) = 0;
      *(_OWORD *)(v0 + 64) = xmmword_1A3AC1B90;
    }
    else
    {
      v14 = *(_QWORD *)(v0 + 192);
      v15 = *(_QWORD *)(v0 + 200);
      v16 = *(_QWORD *)(v0 + 184);
      *(_QWORD *)(v0 + 112) = v1;
      *(_QWORD *)(v0 + 120) = v10;
      *(_QWORD *)(v0 + 128) = v2;
      *(_QWORD *)(v0 + 136) = v11;
    }
    sub_1A39A4820(&qword_1EE6D3250);
    sub_1A3AB4E50();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
LABEL_22:
    v33 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 328) = v33;
    v34 = sub_1A39E8670;
LABEL_23:
    *v33 = v0;
    v33[1] = v34;
    return sub_1A3AB4E80();
  }
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 232);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  v7 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 304);
  if (v8 == v7)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 264) + 56))(*(_QWORD *)(v0 + 280), 1, 1, *(_QWORD *)(v0 + 256));
    v9 = *(_QWORD *)(v0 + 296);
LABEL_16:
    *(_QWORD *)(v0 + 304) = v9;
    v24 = *(_QWORD *)(v0 + 288);
    v26 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 264);
    sub_1A39EC050(*(_QWORD *)(v0 + 280), v24);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v26);
    v28 = *(char **)(v0 + 288);
    if (v27 == 1)
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v30 = *(_QWORD *)(v0 + 248);
    v29 = *(_QWORD *)(v0 + 256);
    v32 = *(_QWORD *)(v0 + 232);
    v31 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 312) = *(_QWORD *)v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v30, &v28[*(int *)(v29 + 48)], v32);
    sub_1A3AB4D6C();
    v33 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 320) = v33;
    v34 = sub_1A39E828C;
    goto LABEL_23;
  }
  if (v8 < v7)
  {
    v17 = *(unint64_t **)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 256);
    v19 = *(_QWORD *)(v0 + 264);
    v21 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 240);
    v9 = v8 + 1;
    v22 = *(_QWORD *)(v0 + 272) + *(int *)(v18 + 48);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 16))(v22, *(_QWORD *)(v0 + 168)+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v8, v21);
    v23 = (char *)v17 + *(int *)(v18 + 48);
    *v17 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v23, v22, v21);
    (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A39E8670()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39E86D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 160);
  sub_1A39A4820(&qword_1EE6D3250);
  sub_1A3AB4E5C();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 304);
  if (v6 == v5)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 264) + 56))(*(_QWORD *)(v0 + 280), 1, 1, *(_QWORD *)(v0 + 256));
    v7 = *(_QWORD *)(v0 + 296);
  }
  else
  {
    if (v6 >= v5)
    {
      __break(1u);
      return result;
    }
    v8 = *(unint64_t **)(v0 + 280);
    v9 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 264);
    v10 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 240);
    v7 = v6 + 1;
    v12 = *(_QWORD *)(v0 + 272) + *(int *)(v9 + 48);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v12, *(_QWORD *)(v0 + 168)+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v6, v10);
    v13 = (char *)v8 + *(int *)(v9 + 48);
    *v8 = v6;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v13, v12, v10);
    (*(void (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v8, 0, 1, v9);
  }
  *(_QWORD *)(v0 + 304) = v7;
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 264);
  sub_1A39EC050(*(_QWORD *)(v0 + 280), v14);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  v18 = *(char **)(v0 + 288);
  if (v17 == 1)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 256);
    v22 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 312) = *(_QWORD *)v18;
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v20, &v18[*(int *)(v19 + 48)], v22);
    sub_1A3AB4D6C();
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 320) = v23;
    *v23 = v0;
    v23[1] = sub_1A39E828C;
    return sub_1A3AB4E80();
  }
}

uint64_t sub_1A39E8938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  sub_1A39A4820(&qword_1EE6D2B68);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39E8998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 16);
  *(_QWORD *)(v0 + 88) = v1;
  if (v1)
  {
    v2 = swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 96) = 0;
    sub_1A39A1AD0(v2 + 32, v0 + 16);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    sub_1A39A19CC((_QWORD *)(v0 + 16), v3);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4) & 1) != 0)
    {
LABEL_5:
      v11 = *(_QWORD *)(v0 + 40);
      v12 = *(_QWORD *)(v0 + 48);
      sub_1A39A19CC((_QWORD *)(v0 + 16), v11);
      v17 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v12 + 16) + *(_QWORD *)(v12 + 16));
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 104) = v13;
      *v13 = v0;
      v13[1] = sub_1A39E8B2C;
      return v17(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64), v11, v12);
    }
    while (1)
    {
      v5 = *(_QWORD *)(v0 + 88);
      v6 = *(_QWORD *)(v0 + 96) + 1;
      sub_1A39A47C4(v0 + 16);
      if (v6 == v5)
        break;
      v7 = *(_QWORD *)(v0 + 96) + 1;
      v8 = *(_QWORD *)(v0 + 72);
      *(_QWORD *)(v0 + 96) = v7;
      sub_1A39A1AD0(v8 + 40 * v7 + 32, v0 + 16);
      v9 = *(_QWORD *)(v0 + 40);
      v10 = *(_QWORD *)(v0 + 48);
      sub_1A39A19CC((_QWORD *)(v0 + 16), v9);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10) & 1) != 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
  }
  v15 = *(_QWORD *)(v0 + 56);
  v16 = sub_1A3AB45F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39E8B2C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39E8B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = sub_1A3AB45F8();
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_1A39B11F4(v1, &qword_1EE6D2B68);
    while (1)
    {
      v4 = *(_QWORD *)(v0 + 88);
      v5 = *(_QWORD *)(v0 + 96) + 1;
      sub_1A39A47C4(v0 + 16);
      if (v5 == v4)
        break;
      v6 = *(_QWORD *)(v0 + 96) + 1;
      *(_QWORD *)(v0 + 96) = v6;
      sub_1A39A1AD0(*(_QWORD *)(v0 + 72) + 40 * v6 + 32, v0 + 16);
      v7 = *(_QWORD *)(v0 + 40);
      v8 = *(_QWORD *)(v0 + 48);
      sub_1A39A19CC((_QWORD *)(v0 + 16), v7);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) & 1) != 0)
      {
        v9 = *(_QWORD *)(v0 + 40);
        v10 = *(_QWORD *)(v0 + 48);
        sub_1A39A19CC((_QWORD *)(v0 + 16), v9);
        v14 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v10 + 16) + *(_QWORD *)(v10 + 16));
        v11 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 104) = v11;
        *v11 = v0;
        v11[1] = sub_1A39E8B2C;
        return v14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64), v9, v10);
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 56), 1, 1, v2);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13, v1, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v13, 0, 1, v2);
    sub_1A39A47C4(v0 + 16);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39E8D48(uint64_t a1, uint64_t a2)
{
  return sub_1A39E8FBC(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1A39E8D54(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1A3AB4964();
  *a2 = 0;
  return result;
}

uint64_t sub_1A39E8DC8(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1A3AB4970();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1A39E8E44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1A3AB497C();
  v2 = sub_1A3AB4958();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1A39E8E84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1A39EA648(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1A39E8EC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1A3AB4958();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1A39E8F04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1A3AB497C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1A39E8F2C()
{
  sub_1A39B9F44(&qword_1EE6D3198, (uint64_t (*)(uint64_t))type metadata accessor for Category, (uint64_t)&unk_1A3AC1950);
  sub_1A39B9F44(&qword_1EE6D31A0, (uint64_t (*)(uint64_t))type metadata accessor for Category, (uint64_t)&unk_1A3AC18F8);
  return sub_1A3AB54D4();
}

uint64_t sub_1A39E8FB0(uint64_t a1, uint64_t a2)
{
  return sub_1A39E8FBC(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1A39E8FBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1A3AB497C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1A39E8FF8()
{
  sub_1A3AB497C();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39E9038()
{
  uint64_t v0;

  sub_1A3AB497C();
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  v0 = sub_1A3AB5738();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1A39E90A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1A3AB497C();
  v2 = v1;
  if (v0 == sub_1A3AB497C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1A39E9130(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D3260);
  v10 = *(_QWORD *)(sub_1A39A4820((uint64_t *)&unk_1EE6D30D0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_1A3AB5438();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_1A39A4820((uint64_t *)&unk_1EE6D30D0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1A39EBE44(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

unint64_t sub_1A39E9340(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A3AB50C0();
  return sub_1A39E9370(a1, v2);
}

unint64_t sub_1A39E9370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1A39B11BC(0, (unint64_t *)&qword_1EE6D2388);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_1A3AB50CC();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_1A3AB50CC();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_1A39E9488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    sub_1A39A4820(&qword_1EE6D32B0);
    v2 = sub_1A3AB54A4();
    v18 = v2;
    sub_1A3AB5408();
    v3 = sub_1A3AB542C();
    if (v3)
    {
      v4 = v3;
      sub_1A39B11BC(0, (unint64_t *)&qword_1EE6D2388);
      do
      {
        swift_dynamicCast();
        swift_dynamicCast();
        v2 = v18;
        v12 = *(_QWORD *)(v18 + 16);
        if (*(_QWORD *)(v18 + 24) <= v12)
        {
          sub_1A39E96B8(v12 + 1, 1);
          v2 = v18;
        }
        result = sub_1A3AB50C0();
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v9 == v14;
            if (v9 == v14)
              v9 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v17;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v4 = sub_1A3AB542C();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

uint64_t sub_1A39E96B8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D32B0);
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    result = sub_1A3AB50C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void sub_1A39E9988(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = sub_1A3AB5234();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v11 = sub_1A3AB50C0();

        v12 = v11 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(a2 + 48);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || v16 >= v17 + 1)
              *v16 = *v17;
            v18 = *(_QWORD *)(a2 + 56);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
            {
              *v19 = *v20;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v9 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v23 = *v21;
    v22 = (-1 << a1) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
}

id sub_1A39E9B38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D32B0);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1A39E9CDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D3030;
  if (!qword_1EE6D3030)
  {
    v1 = sub_1A39B11BC(255, (unint64_t *)&qword_1EE6D2388);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D3030);
  }
  return result;
}

void sub_1A39E9D34()
{
  uint64_t v0;

  sub_1A39E00DC(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1A39E9D5C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1A39E9D80(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;

  v2 = *a1;
  swift_beginAccess();
  v3 = MEMORY[0x1A85978E8](v1 + 16);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = v2;
    sub_1A39E1D64(&v5);

  }
}

uint64_t sub_1A39E9DE4()
{
  return sub_1A39EC124(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__speechStateObserver);
}

uint64_t sub_1A39E9E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  return sub_1A39E11F0((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_1A39E9E50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__nextWordBlock);
  swift_beginAccess();
  v5 = *v4;
  *v4 = v2;
  v4[1] = v3;
  sub_1A39EA864(v2);
  return sub_1A39E9ED0(v5);
}

uint64_t sub_1A39E9ED0(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

void sub_1A39E9EE0()
{
  uint64_t v0;

  sub_1A39E60E0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1A39E9F08()
{
  sub_1A39EB9D8();
}

void sub_1A39E9F1C()
{
  sub_1A39EB974();
}

uint64_t sub_1A39E9F30()
{
  return sub_1A39EB91C(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__audioSessionAutomaticallyDeactivatesAfterSpeaking);
}

uint64_t sub_1A39E9F4C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1A39E9F68(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1A39E9F68(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D30E8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1A39A4820(&qword_1EE6D32A8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

_QWORD *sub_1A39EA0F0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  char v32;
  int v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;

  v6 = *(_QWORD *)(a4 + 56);
  v4 = a4 + 56;
  v5 = v6;
  v38 = v4;
  v7 = -1 << *(_BYTE *)(v4 - 24);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *result = a4;
    result[1] = v38;
    result[2] = ~v7;
    result[3] = v12;
    result[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v35 = -1 << *(_BYTE *)(v4 - 24);
  v36 = result;
  v12 = 0;
  v13 = 0;
  v37 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v15 = v14 | (v12 << 6);
  while (1)
  {
    ++v13;
    v19 = *(_QWORD *)(a4 + 48) + 104 * v15;
    v21 = *(_QWORD *)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v23 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v25 = *(_WORD *)(v19 + 40);
    v26 = *(_QWORD *)(v19 + 48);
    v27 = *(_BYTE *)(v19 + 56);
    v29 = *(_QWORD *)(v19 + 64);
    v28 = *(_QWORD *)(v19 + 72);
    v30 = *(void **)(v19 + 80);
    v31 = *(_DWORD *)(v19 + 88);
    v32 = *(_BYTE *)(v19 + 92);
    v33 = *(_DWORD *)(v19 + 96);
    LOBYTE(v19) = *(_BYTE *)(v19 + 100);
    *(_QWORD *)v11 = v21;
    *(_QWORD *)(v11 + 8) = v20;
    *(_QWORD *)(v11 + 16) = v23;
    *(_QWORD *)(v11 + 24) = v22;
    *(_QWORD *)(v11 + 32) = v24;
    *(_WORD *)(v11 + 40) = v25;
    *(_QWORD *)(v11 + 48) = v26;
    *(_BYTE *)(v11 + 56) = v27;
    *(_QWORD *)(v11 + 64) = v29;
    *(_QWORD *)(v11 + 72) = v28;
    *(_QWORD *)(v11 + 80) = v30;
    *(_DWORD *)(v11 + 88) = v31;
    *(_BYTE *)(v11 + 92) = v32;
    *(_DWORD *)(v11 + 96) = v33;
    *(_BYTE *)(v11 + 100) = v19;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34 = v30;
      goto LABEL_38;
    }
    v11 += 104;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = v30;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v16 >= v37)
      goto LABEL_33;
    v17 = *(_QWORD *)(v38 + 8 * v16);
    if (!v17)
    {
      v12 += 2;
      if (v16 + 1 >= v37)
      {
        v9 = 0;
        v12 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v38 + 8 * v12);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v37)
          goto LABEL_33;
        v17 = *(_QWORD *)(v38 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v12 = v16 + 3;
        if (v16 + 3 < v37)
        {
          v17 = *(_QWORD *)(v38 + 8 * v12);
          if (v17)
          {
LABEL_14:
            v16 = v12;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v37)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v38 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v37)
              {
                v9 = 0;
                v12 = v37 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v38 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v16 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v35;
      result = v36;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v12 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1A39EA3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[3] = type metadata accessor for DefaultVoiceSource();
  v19[4] = &protocol witness table for DefaultVoiceSource;
  v18 = a2;
  v19[0] = a1;
  v10 = *(_QWORD *)sub_1A3A39210();
  v15[0] = v10;
  v16 = a2;
  sub_1A39AE770();
  sub_1A3AB51D4();
  sub_1A39DB56C();
  if ((sub_1A3AB494C() & 1) == 0)
  {
    v16 = v10;
    sub_1A3AB5204();
  }
  type metadata accessor for VoiceResolver();
  sub_1A39A1AD0((uint64_t)v19, (uint64_t)v15);
  v16 = a3;
  v17 = v18;
  v14 = a4;
  v11 = VoiceResolver.__allocating_init(voiceSource:requiredTraits:forbiddenTraits:sortMode:)(v15, &v17, &v16, &v14);
  v12 = (*(uint64_t (**)(uint64_t))(a5 + 912))(v11);
  sub_1A39A47C4((uint64_t)v19);
  return v12;
}

uint64_t sub_1A39EA500(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[5];

  v26[3] = a6;
  v26[4] = a7;
  v13 = sub_1A39B1230(v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v13, a1, a6);
  v14 = *a2;
  v15 = *a3;
  v16 = *a4;
  v25 = v14;
  v17 = *(_QWORD *)sub_1A3A39210();
  v22[0] = v17;
  v23 = v14;
  sub_1A39AE770();
  sub_1A3AB51D4();
  sub_1A39DB56C();
  if ((sub_1A3AB494C() & 1) == 0)
  {
    v23 = v17;
    sub_1A3AB5204();
  }
  type metadata accessor for VoiceResolver();
  sub_1A39A1AD0((uint64_t)v26, (uint64_t)v22);
  v23 = v15;
  v24 = v25;
  v21 = v16;
  v18 = VoiceResolver.__allocating_init(voiceSource:requiredTraits:forbiddenTraits:sortMode:)(v22, &v24, &v23, &v21);
  v19 = (*(uint64_t (**)(uint64_t))(a5 + 912))(v18);
  sub_1A39A47C4((uint64_t)v26);
  return v19;
}

uint64_t sub_1A39EA648(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1A39EA680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18[2];
  uint64_t v19;

  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v18[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v13;
  v19 = *v15;
  v18[0] = MEMORY[0x1E0DEE9D8];
  sub_1A39AE770();
  sub_1A39A4820(&qword_1ED1B5378);
  sub_1A39C3EF8((unint64_t *)&qword_1ED1B5380, &qword_1ED1B5378, MEMORY[0x1E0DEAF38]);
  sub_1A3AB5228();
  v17 = v14;
  v18[0] = v18[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a5);
  return sub_1A39EA500((uint64_t)v12, &v19, v18, &v17, a4, a5, a6);
}

uint64_t sub_1A39EA7A8(uint64_t a1, uint64_t a2)
{
  _s9UtteranceVwcp(a2, a1);
  return a2;
}

uint64_t sub_1A39EA7E4(uint64_t a1)
{
  _s9UtteranceVwxx(a1);
  return a1;
}

unint64_t sub_1A39EA818()
{
  unint64_t result;

  result = qword_1EE6D30C0;
  if (!qword_1EE6D30C0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Utterance, &type metadata for CoreSynthesizer.Utterance);
    atomic_store(result, (unint64_t *)&qword_1EE6D30C0);
  }
  return result;
}

uint64_t sub_1A39EA85C(uint64_t a1)
{
  uint64_t v1;

  return sub_1A39E7E30(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A39EA864(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void sub_1A39EA874()
{
  uint64_t v0;

  sub_1A39E7498(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1A39EA89C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer___usingAuxiliarySession) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1A39EA8B4()
{
  return type metadata accessor for CoreSynthesizer();
}

uint64_t sub_1A39EA8BC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A3AB4580();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for CoreSynthesizer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreSynthesizer.queue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CoreSynthesizer.queue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CoreSynthesizer.queue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CoreSynthesizer.voiceResolver.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CoreSynthesizer.voiceResolver.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CoreSynthesizer.voiceResolver.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CoreSynthesizer.voices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CoreSynthesizer.voices.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CoreSynthesizer.voices.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioQueue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioQueue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioQueue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CoreSynthesizer.bufferedAudioQueue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CoreSynthesizer.bufferedAudioQueue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CoreSynthesizer.bufferedAudioQueue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CoreSynthesizer.offlineChain.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of CoreSynthesizer.offlineChain.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CoreSynthesizer.offlineChain.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of CoreSynthesizer.selectionProviders.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of CoreSynthesizer.selectionProviders.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of CoreSynthesizer.selectionProviders.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of CoreSynthesizer.effects.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of CoreSynthesizer.effects.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of CoreSynthesizer.effects.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of CoreSynthesizer.realtimeEffects.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of CoreSynthesizer.realtimeEffects.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of CoreSynthesizer.realtimeEffects.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioSession.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioSession.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioSession.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of CoreSynthesizer.channels.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of CoreSynthesizer.channels.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of CoreSynthesizer.channels.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioQueueFlags.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioQueueFlags.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioQueueFlags.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of CoreSynthesizer.__allocating_init(voiceResolver:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 912))();
}

uint64_t dispatch thunk of CoreSynthesizer.voice(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v8 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x400);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1A39D5174;
  return v11(a1, a2, a3);
}

uint64_t dispatch thunk of CoreSynthesizer.voice(locale:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x408);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1A39D5174;
  return v9(a1, a2);
}

uint64_t dispatch thunk of CoreSynthesizer.enqueue(utterance:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of CoreSynthesizer.enqueue(utterances:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x418))();
}

uint64_t dispatch thunk of CoreSynthesizer.enqueue(queueable:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v8 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x420);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1A39D5174;
  return v11(a1, a2, a3);
}

uint64_t dispatch thunk of CoreSynthesizer.buffers(forSpeech:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x428))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x430))();
}

uint64_t dispatch thunk of CoreSynthesizer.stop()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x438);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  return v5();
}

uint64_t dispatch thunk of CoreSynthesizer.pause()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x440);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  return v5();
}

uint64_t dispatch thunk of CoreSynthesizer.resume()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x448);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  return v5();
}

uint64_t dispatch thunk of CoreSynthesizer.cancel(queueable:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x450);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1A39D5174;
  return v9(a1, a2);
}

uint64_t dispatch thunk of CoreSynthesizer.mixToTelephonyUplink.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of CoreSynthesizer.mixToTelephonyUplink.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of CoreSynthesizer.mixToTelephonyUplink.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionCategory.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionCategory.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionCategory.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionCategoryOptions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionCategoryOptions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x500))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionCategoryOptions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x508))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionParticipatesInNowPlayingAppPolicy.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x528))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionParticipatesInNowPlayingAppPolicy.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x530))();
}

uint64_t dispatch thunk of CoreSynthesizer.auxSessionParticipatesInNowPlayingAppPolicy.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x538))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioSessionAutomaticallyDeactivatesAfterSpeaking.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x558))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioSessionAutomaticallyDeactivatesAfterSpeaking.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x560))();
}

uint64_t dispatch thunk of CoreSynthesizer.audioSessionAutomaticallyDeactivatesAfterSpeaking.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x568))();
}

uint64_t dispatch thunk of CoreSynthesizer.useAuxiliarySession.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5D0))();
}

uint64_t dispatch thunk of CoreSynthesizer.useAuxiliarySession.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of CoreSynthesizer.useAuxiliarySession.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E0))();
}

id sub_1A39EB370(id result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 61;
  if (a3 >> 61 == 2)
    return result;
  if ((_DWORD)v3 == 1)
    return (id)sub_1A39EB398((uint64_t)result, a2, a3);
  if (!(_DWORD)v3)
    return (id)swift_unknownObjectRetain();
  return result;
}

uint64_t sub_1A39EB398(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 3 <= 1)
    return swift_bridgeObjectRetain();
  return result;
}

void destroy for CoreSynthesizer.Event(uint64_t a1)
{
  sub_1A39EB3C4(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void sub_1A39EB3C4(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = a3 >> 61;
  if (a3 >> 61 == 2)
  {

  }
  else if ((_DWORD)v3 == 1)
  {
    sub_1A39EB3EC((uint64_t)a1, a2, a3);
  }
  else if (!(_DWORD)v3)
  {
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1A39EB3EC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 3 <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *initializeWithCopy for CoreSynthesizer.Event(_QWORD *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  sub_1A39EB370(*(id *)a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t assignWithCopy for CoreSynthesizer.Event(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  sub_1A39EB370(*(id *)a2, v4, v5);
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  sub_1A39EB3C4(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for CoreSynthesizer.Event(uint64_t a1, _OWORD *a2)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v6;
  sub_1A39EB3C4(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreSynthesizer.Event(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 3;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreSynthesizer.Event(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 8 * -a2;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1A39EB590(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 61;
  if (v1 <= 3)
    return v1;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1A39EB5AC(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1A39EB5BC(uint64_t result, uint64_t a2)
{
  if (a2 < 4)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 7 | (a2 << 61);
  }
  else
  {
    *(_QWORD *)result = (a2 - 4);
    *(_OWORD *)(result + 8) = xmmword_1A3AC1BA0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Event()
{
  return &type metadata for CoreSynthesizer.Event;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.SynthesisError()
{
  return &type metadata for CoreSynthesizer.SynthesisError;
}

uint64_t dispatch thunk of VoiceSelectionProvider.enabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of VoiceSelectionProvider.selection(forLocale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1A39D5174;
  return v11(a1, a2, a3, a4);
}

void type metadata accessor for CategoryOptions(uint64_t a1)
{
  sub_1A39EB6C8(a1, &qword_1EE6D3160);
}

void type metadata accessor for Category(uint64_t a1)
{
  sub_1A39EB6C8(a1, &qword_1EE6D0988);
}

void sub_1A39EB6C8(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1A39EB70C()
{
  return sub_1A39B9F44(&qword_1EE6D3168, (uint64_t (*)(uint64_t))type metadata accessor for Category, (uint64_t)&unk_1A3AC18C0);
}

uint64_t sub_1A39EB738()
{
  return sub_1A39B9F44(&qword_1EE6D3170, (uint64_t (*)(uint64_t))type metadata accessor for Category, (uint64_t)&unk_1A3AC1898);
}

uint64_t sub_1A39EB764()
{
  return sub_1A39B9F44(&qword_1EE6D0980, (uint64_t (*)(uint64_t))type metadata accessor for Category, (uint64_t)&unk_1A3AC1928);
}

uint64_t sub_1A39EB790()
{
  return sub_1A39B9F44(&qword_1EE6D3178, (uint64_t (*)(uint64_t))type metadata accessor for CategoryOptions, (uint64_t)&unk_1A3AC1A08);
}

uint64_t sub_1A39EB7BC()
{
  return sub_1A39B9F44(&qword_1EE6D3180, (uint64_t (*)(uint64_t))type metadata accessor for CategoryOptions, (uint64_t)&unk_1A3AC19D8);
}

uint64_t sub_1A39EB7E8()
{
  return sub_1A39B9F44(&qword_1EE6D3188, (uint64_t (*)(uint64_t))type metadata accessor for CategoryOptions, (uint64_t)&unk_1A3AC1A30);
}

uint64_t sub_1A39EB814()
{
  return sub_1A39B9F44(&qword_1EE6D3190, (uint64_t (*)(uint64_t))type metadata accessor for CategoryOptions, (uint64_t)&unk_1A3AC1A68);
}

uint64_t sub_1A39EB844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39B1604;
  return sub_1A39E2198((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_1A39EB890()
{
  return sub_1A39EC124(&OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__deactivateAudioSessionTimerTask);
}

uint64_t sub_1A39EB8AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE6D31B8 + dword_1EE6D31B8))(a1, v4);
}

uint64_t sub_1A39EB91C(_QWORD *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *(_BYTE *)(v1 + 24);
  v3 = (_BYTE *)(*(_QWORD *)(v1 + 16) + *a1);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

void sub_1A39EB974()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = (_BYTE *)(*(_QWORD *)(v0 + 16)
               + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionParticipatesInNowPlayingAppPolicy);
  swift_beginAccess();
  *v2 = v1;
  sub_1A39E6810();
}

void sub_1A39EB9D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__auxSessionCategoryOptions);
  swift_beginAccess();
  *v2 = v1;
  sub_1A39E62F4();
}

uint64_t sub_1A39EBA38()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1A39EBA64()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A39D5174;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EE6D31C8 + dword_1EE6D31C8))(v2, v3);
}

uint64_t sub_1A39EBAD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39EBAF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (const void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_1EE6D31E8 + dword_1EE6D31E8))(v2, v3, v4);
}

uint64_t sub_1A39EBB70()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1A39EBBA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE6D3208 + dword_1EE6D3208))(v2, v3, v4);
}

uint64_t sub_1A39EBC1C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1A39EBC48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(_QWORD **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x320);
  v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  v3[2] = v5;
  *v5 = v3;
  v5[1] = sub_1A39D5174;
  return v7();
}

uint64_t sub_1A39EBCD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1A39B11F4(v3, &qword_1EE6D3240);
  v4 = sub_1A39A4820(&qword_1EE6D3250);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
}

uint64_t sub_1A39EBD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D3240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39EBD98()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39EBDC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39B1604;
  v6 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v2 + 264) + *(_QWORD *)(*(_QWORD *)v2 + 264));
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_1A39B1604;
  return v6();
}

uint64_t sub_1A39EBE44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_1A39A4820((uint64_t *)&unk_1EE6D30D0) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A39EBF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A39A4820(&qword_1EE6D3250);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A39EBFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A39A4820(&qword_1EE6D3250) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return sub_1A39E7F78((uint64_t)v5, v6, v7, v3, v4);
}

uint64_t sub_1A39EC050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D3288);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39EC098()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39EC0C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1A39D5174;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_1A39EC124(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 + 16) + *a1) = *(_QWORD *)(v1 + 24);
  swift_retain();
  return swift_release();
}

void sub_1A39EC164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = v1 + OBJC_IVAR____TtC12TextToSpeech15CoreSynthesizer__effectManager;
  swift_beginAccess();
  v7 = *(void **)(v3 + 64);
  *(_OWORD *)v3 = *(_OWORD *)v2;
  v5 = *(_OWORD *)(v2 + 32);
  v4 = *(_OWORD *)(v2 + 48);
  v6 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v2 + 64);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v4;
  *(_OWORD *)(v3 + 16) = v6;
  sub_1A39EC244(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t sub_1A39EC244(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A39EC2C8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1A39EC360()
{
  return sub_1A39E2444();
}

void sub_1A39EC3B0()
{
  sub_1A39EA874();
}

void sub_1A39EC3C4()
{
  sub_1A39E9EE0();
}

void sub_1A39EC3D8()
{
  sub_1A39E9D34();
}

uint64_t sub_1A39EC3EC()
{
  return sub_1A39DE238();
}

uint64_t sub_1A39EC400()
{
  return sub_1A39DD1B4();
}

void sub_1A39EC414()
{
  sub_1A39DC7A4();
}

uint64_t sub_1A39EC428()
{
  return sub_1A39DC260();
}

void sub_1A39EC440()
{
  sub_1A39EA89C();
}

unint64_t sub_1A39EC454()
{
  return sub_1A39BA0C0(MEMORY[0x1E0DEE9D8]);
}

unint64_t VoiceSource.disambiguations.getter()
{
  return sub_1A39BA0C0(MEMORY[0x1E0DEE9D8]);
}

unint64_t sub_1A39EC46C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD v34[2];

  v2 = sub_1A39A4820(&qword_1ED1B5328);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D2358);
  v6 = sub_1A3AB54B0();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v34[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1A39B9F00(v12, (uint64_t)v5, &qword_1ED1B5328);
    result = sub_1A39F8184((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1A3AB4538();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = v7[7] + 104 * v16;
    v20 = *((_QWORD *)v9 + 3);
    v21 = *((_QWORD *)v9 + 4);
    v22 = *((_WORD *)v9 + 20);
    v23 = *((_QWORD *)v9 + 6);
    v24 = v9[56];
    v25 = *((_QWORD *)v9 + 10);
    v26 = *((_DWORD *)v9 + 22);
    v27 = v9[92];
    result = *((unsigned int *)v9 + 24);
    v28 = v9[100];
    v29 = *(_OWORD *)(v9 + 8);
    v30 = *((_OWORD *)v9 + 4);
    *(_QWORD *)v19 = *(_QWORD *)v9;
    *(_OWORD *)(v19 + 8) = v29;
    *(_QWORD *)(v19 + 24) = v20;
    *(_QWORD *)(v19 + 32) = v21;
    *(_WORD *)(v19 + 40) = v22;
    *(_QWORD *)(v19 + 48) = v23;
    *(_BYTE *)(v19 + 56) = v24;
    *(_OWORD *)(v19 + 64) = v30;
    *(_QWORD *)(v19 + 80) = v25;
    *(_DWORD *)(v19 + 88) = v26;
    *(_BYTE *)(v19 + 92) = v27;
    *(_DWORD *)(v19 + 96) = result;
    *(_BYTE *)(v19 + 100) = v28;
    v31 = v7[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
      goto LABEL_11;
    v7[2] = v33;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t VoiceResolver.executor.getter()
{
  return swift_retain();
}

uint64_t sub_1A39EC66C()
{
  uint64_t result;

  type metadata accessor for VoiceResolver();
  swift_allocObject();
  result = VoiceResolver.init()();
  qword_1EE6D4E38 = result;
  return result;
}

uint64_t VoiceResolver.__allocating_init()()
{
  swift_allocObject();
  return VoiceResolver.init()();
}

uint64_t static VoiceResolver.shared.getter()
{
  if (qword_1EE6D4E20 != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static VoiceResolver.shared.setter(uint64_t a1)
{
  if (qword_1EE6D4E20 != -1)
    swift_once();
  swift_beginAccess();
  qword_1EE6D4E38 = a1;
  return swift_release();
}

uint64_t (*static VoiceResolver.shared.modify())()
{
  if (qword_1EE6D4E20 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t VoiceResolver.voiceSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 24, a1);
}

void VoiceResolver.requiredTraits.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
}

void VoiceResolver.forbiddenTraits.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 72);
}

unint64_t VoiceResolver.sortMode.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + 80);
  *a1 = v2;
  return sub_1A39EE2B4(v2);
}

uint64_t VoiceResolver.voices.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voices;
  v4 = sub_1A39A4820(&qword_1EE6D2488);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A39EC984()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 104) + 216))();
}

uint64_t sub_1A39EC9AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 112) + 216))();
}

uint64_t sub_1A39EC9D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  sub_1A39A4820(&qword_1ED1B5320);
  v2[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39ECA30()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))(**(int **)(**(_QWORD **)(v0[3] + 112) + 208)
                                      + *(_QWORD *)(**(_QWORD **)(v0[3] + 112) + 208));
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  *v1 = v0;
  v1[1] = sub_1A39ECA98;
  return v3(v0[4]);
}

uint64_t sub_1A39ECA98()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39ECAEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = sub_1A3AB4538();
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_1A3AB4448();
    sub_1A39B11F4(v1, &qword_1ED1B5320);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 16), v1, v2);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39ECCB8(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2[2] = a2;
  sub_1A39A4820(&qword_1ED1B5320);
  v2[3] = swift_task_alloc();
  v4 = sub_1A3AB4538();
  v2[4] = v4;
  v2[5] = *(_QWORD *)(v4 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = _Block_copy(a1);
  swift_retain();
  return swift_task_switch();
}

uint64_t sub_1A39ECD58()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))(**(int **)(**(_QWORD **)(v0[2] + 112) + 208)
                                      + *(_QWORD *)(**(_QWORD **)(v0[2] + 112) + 208));
  v1 = (_QWORD *)swift_task_alloc();
  v0[8] = v1;
  *v1 = v0;
  v1[1] = sub_1A39ECDC0;
  return v3(v0[3]);
}

uint64_t sub_1A39ECDC0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39ECE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (**v4)(_QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_1A3AB4448();
    sub_1A39B11F4(v3, &qword_1ED1B5320);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 48), v3, v1);
  }
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(void (***)(_QWORD, _QWORD))(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  swift_release();
  v8 = (void *)sub_1A3AB4460();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  ((void (**)(_QWORD, void *))v4)[2](v4, v8);

  _Block_release(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39ECF08()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

uint64_t sub_1A39ECF20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 24) + 96) + 208)
                                       + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v0 + 24) + 96) + 208));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1A39ECF90;
  return v3(v0 + 16);
}

uint64_t sub_1A39ECF90()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39ECFE4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
  else
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9E8]);
}

uint64_t sub_1A39ED11C(const void *a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 32) = _Block_copy(a1);
  swift_retain();
  return swift_task_switch();
}

uint64_t sub_1A39ED168()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 24) + 96) + 208)
                                       + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v0 + 24) + 96) + 208));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_1A39ED1D8;
  return v3(v0 + 16);
}

uint64_t sub_1A39ED1D8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39ED22C()
{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;

  v1 = *(void (***)(_QWORD, _QWORD))(v0 + 32);
  swift_release();
  sub_1A3AB4538();
  sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
  v2 = (void *)sub_1A3AB4EBC();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v2);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39ED2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];

  v3 = v2;
  v6 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v21 - v10;
  v12 = sub_1A3A63914();
  swift_beginAccess();
  v13 = *v12;
  v14 = sub_1A3AB4D00();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, 1, 1, v14);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = v3;
  sub_1A39FEDA0((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_1ED1B53A0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v17 == 1)
  {
    sub_1A39B11F4((uint64_t)v9, (uint64_t *)&unk_1ED1B53A0);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  }
  v18 = sub_1A39B9F44((unint64_t *)&qword_1EE6D2540, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = &unk_1EE6D32D8;
  *(_QWORD *)(v19 + 24) = v16;
  v21[1] = 6;
  v21[2] = 0;
  v21[3] = v13;
  v21[4] = v18;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A39ED4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v4[2] = a2;
  v4[3] = a3;
  v7 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)a4 + 208) + *(_QWORD *)(*(_QWORD *)a4 + 208));
  v5 = (_QWORD *)swift_task_alloc();
  v4[4] = v5;
  *v5 = v4;
  v5[1] = sub_1A39ED534;
  return v7();
}

uint64_t sub_1A39ED534(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39ED590()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39ED640()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = sub_1A3AB4538();
  v1[2] = v2;
  v1[3] = *(_QWORD *)(v2 - 8);
  v1[4] = swift_task_alloc();
  v1[5] = swift_task_alloc();
  v5 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 192) + *(_QWORD *)(*(_QWORD *)v0 + 192));
  v3 = (_QWORD *)swift_task_alloc();
  v1[6] = v3;
  *v3 = v1;
  v3[1] = sub_1A39ED6D4;
  return v5();
}

uint64_t sub_1A39ED6D4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39ED730()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 24);
    v25 = MEMORY[0x1E0DEE9D8];
    sub_1A39AE488(0, v2, 0);
    result = sub_1A39AE5A4(v1);
    v5 = result;
    v7 = v6;
    v9 = v8 & 1;
    v23 = v1;
    v24 = v1 + 56;
    while ((v9 & 1) == 0)
    {
      if (v5 < 0 || v5 >= 1 << *(_BYTE *)(v1 + 32))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        break;
      }
      if (((*(_QWORD *)(v24 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
        goto LABEL_17;
      if (*(_DWORD *)(v1 + 36) != v7)
        goto LABEL_18;
      v11 = *(_QWORD *)(v0 + 32);
      v10 = *(_QWORD *)(v0 + 40);
      v12 = *(_QWORD *)(v0 + 16);
      (*(void (**)(uint64_t, int64_t, uint64_t))(v3 + 16))(v10, *(_QWORD *)(v1 + 48) + *(_QWORD *)(v3 + 72) * v5, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v11, v10, v12);
      v13 = sub_1A3AB443C();
      v15 = v14;
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v11, v12);
      v16 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A39AE488(0, *(_QWORD *)(v25 + 16) + 1, 1);
        v16 = v25;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_1A39AE488((char *)(v17 > 1), v18 + 1, 1);
        v16 = v25;
      }
      v19 = *(_QWORD *)(v0 + 56);
      *(_QWORD *)(v16 + 16) = v18 + 1;
      v20 = v16 + 16 * v18;
      *(_QWORD *)(v20 + 32) = v13;
      *(_QWORD *)(v20 + 40) = v15;
      result = sub_1A39AE644(v5, v7, 0, v19);
      v5 = result;
      v7 = v21;
      v9 = v22 & 1;
      --v2;
      v1 = v23;
      if (!v2)
      {
        sub_1A39AE728(result, v21, v9);
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x1E0DEE9D8];
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v16);
  }
  return result;
}

uint64_t sub_1A39ED944(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1A39AE488(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(sub_1A3AB4538() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = sub_1A3AB43D0();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_1A39AE488((char *)(v10 > 1), v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1A39EDA40(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  int v35;
  char v36;
  int v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v3 = a1;
  v44 = MEMORY[0x1E0DEE9D8];
  sub_1A39F8368(0, v1, 0);
  v2 = v44;
  result = sub_1A39FF4BC(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v27 = v3 + 80;
  v28 = v1;
  v29 = v5;
  v30 = v3 + 64;
  v31 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v32 = v7;
    v12 = *(_QWORD *)(v3 + 56) + 104 * v6;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    v42 = *(_QWORD *)(v12 + 24);
    v43 = *(_QWORD *)v12;
    v15 = *(_QWORD *)(v12 + 32);
    v41 = *(_BYTE *)(v12 + 40);
    v40 = *(_BYTE *)(v12 + 41);
    v39 = *(_QWORD *)(v12 + 48);
    v16 = *(_QWORD *)(v12 + 64);
    v17 = *(_QWORD *)(v12 + 72);
    v18 = *(void **)(v12 + 80);
    v37 = *(_DWORD *)(v12 + 88);
    v38 = *(_BYTE *)(v12 + 56);
    v35 = *(_DWORD *)(v12 + 96);
    v36 = *(_BYTE *)(v12 + 92);
    v34 = *(_BYTE *)(v12 + 100);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v33 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v44 + 16);
    v19 = *(_QWORD *)(v44 + 24);
    if (v20 >= v19 >> 1)
      result = (uint64_t)sub_1A39F8368((char *)(v19 > 1), v20 + 1, 1);
    *(_QWORD *)(v44 + 16) = v20 + 1;
    v21 = v44 + 104 * v20;
    *(_QWORD *)(v21 + 32) = v43;
    *(_QWORD *)(v21 + 40) = v13;
    *(_QWORD *)(v21 + 48) = v14;
    *(_QWORD *)(v21 + 56) = v42;
    *(_QWORD *)(v21 + 64) = v15;
    *(_BYTE *)(v21 + 72) = v41;
    *(_BYTE *)(v21 + 73) = v40;
    *(_QWORD *)(v21 + 80) = v39;
    *(_BYTE *)(v21 + 88) = v38;
    *(_QWORD *)(v21 + 96) = v16;
    *(_QWORD *)(v21 + 104) = v17;
    *(_QWORD *)(v21 + 112) = v33;
    *(_DWORD *)(v21 + 120) = v37;
    *(_BYTE *)(v21 + 124) = v36;
    *(_DWORD *)(v21 + 128) = v35;
    *(_BYTE *)(v21 + 132) = v34;
    v3 = v31;
    v9 = 1 << *(_BYTE *)(v31 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v30;
    v22 = *(_QWORD *)(v30 + 8 * v11);
    if ((v22 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v29;
    if (*(_DWORD *)(v31 + 36) != v29)
      goto LABEL_27;
    v23 = v22 & (-2 << (v6 & 0x3F));
    if (v23)
    {
      v9 = __clz(__rbit64(v23)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v28;
    }
    else
    {
      v24 = v11 + 1;
      v25 = (unint64_t)(v9 + 63) >> 6;
      v10 = v28;
      if (v11 + 1 < v25)
      {
        v26 = *(_QWORD *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_20:
          v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v11)
          {
            v26 = *(_QWORD *)(v27 + 8 * v11++);
            if (v26)
            {
              v24 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v32 + 1;
    v6 = v9;
    if (v32 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A39EDD74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v2 = sub_1A3AB4538();
  v1[2] = v2;
  v1[3] = *(_QWORD *)(v2 - 8);
  v3 = swift_task_alloc();
  v1[4] = v3;
  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v0 + 184) + *(_QWORD *)(*(_QWORD *)v0 + 184));
  v4 = (_QWORD *)swift_task_alloc();
  v1[5] = v4;
  *v4 = v1;
  v4[1] = sub_1A39EDE04;
  return v6(v3);
}

uint64_t sub_1A39EDE04()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39EDE58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = sub_1A3AB443C();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
}

uint64_t sub_1A39EDFE4(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v2[2] = a2;
  v5 = sub_1A3AB4538();
  v2[3] = v5;
  v2[4] = *(_QWORD *)(v5 - 8);
  v6 = swift_task_alloc();
  v2[5] = v6;
  v2[6] = _Block_copy(a1);
  v9 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)a2 + 184) + *(_QWORD *)(*(_QWORD *)a2 + 184));
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  v2[7] = v7;
  *v7 = v2;
  v7[1] = sub_1A39EE09C;
  return v9(v6);
}

uint64_t sub_1A39EE09C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39EE0F0()
{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(void (***)(_QWORD, _QWORD))(v0 + 48);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  sub_1A3AB443C();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_release();
  v5 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v5);

  _Block_release(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t VoiceResolver.init()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  _QWORD v8[5];

  v1 = *v0;
  v2 = *sub_1A39D824C();
  v8[3] = type metadata accessor for DefaultVoiceSource();
  v8[4] = &protocol witness table for DefaultVoiceSource;
  v8[0] = v2;
  swift_retain();
  v7 = *(_QWORD *)sub_1A3A39210();
  sub_1A39AE770();
  sub_1A39A4820(&qword_1ED1B5378);
  sub_1A39C3EF8((unint64_t *)&qword_1ED1B5380, &qword_1ED1B5378, MEMORY[0x1E0DEAF38]);
  sub_1A3AB5228();
  v5 = 1;
  v6[0] = v6[1];
  v3 = (*(uint64_t (**)(_QWORD *, uint64_t *, _QWORD *, uint64_t *))(v1 + 256))(v8, &v7, v6, &v5);
  swift_deallocPartialClassInstance();
  return v3;
}

unint64_t sub_1A39EE2B4(unint64_t result)
{
  if (result >= 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1A39EE2C4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39EE2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1A39D5174;
  *(_OWORD *)(v3 + 16) = v4;
  v7 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v2 + 208) + *(_QWORD *)(*(_QWORD *)v2 + 208));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 32) = v5;
  *v5 = v3;
  v5[1] = sub_1A39ED534;
  return v7();
}

uint64_t sub_1A39EE3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v0 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v15 - v4;
  v6 = sub_1A3A63914();
  swift_beginAccess();
  v7 = *v6;
  v8 = sub_1A3AB4D00();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
  v10 = swift_allocObject();
  swift_weakInit();
  sub_1A39FEDA0((uint64_t)v5, (uint64_t)v3, (uint64_t *)&unk_1ED1B53A0);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v3, 1, v8);
  swift_retain();
  if (v11 == 1)
  {
    sub_1A39B11F4((uint64_t)v3, (uint64_t *)&unk_1ED1B53A0);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v3, v8);
  }
  v12 = sub_1A39B9F44((unint64_t *)&qword_1EE6D2540, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = &unk_1EE6D34D0;
  *(_QWORD *)(v13 + 24) = v10;
  sub_1A39A4820(&qword_1ED1B5478);
  v15[1] = 6;
  v15[2] = 0;
  v15[3] = v7;
  v15[4] = v12;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A39EE588(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = a2;
  v3 = sub_1A39A4820(&qword_1ED1B53E8);
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v4 = sub_1A39A4820((uint64_t *)&unk_1ED1B53D8);
  v2[14] = v4;
  v2[15] = *(_QWORD *)(v4 - 8);
  v2[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39EE618()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 136) = Strong;
  if (Strong)
  {
    type metadata accessor for VoiceResolver();
    *(_QWORD *)(v0 + 144) = sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
    *(_QWORD *)(v0 + 152) = sub_1A3AB4C70();
    *(_QWORD *)(v0 + 160) = v2;
    return swift_task_switch();
  }
  else
  {
    **(_BYTE **)(v0 + 72) = 1;
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A39EE6F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[17];
  v3 = v0[12];
  v2 = v0[13];
  v4 = v0[11];
  sub_1A39EE948();
  (*(void (**)(void))(**(_QWORD **)(v1 + 88) + 216))();
  sub_1A3AB4D6C();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v0[21] = OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voiceResolutionCache;
  swift_beginAccess();
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = v5;
  *v5 = v0;
  v5[1] = sub_1A39EE7DC;
  return sub_1A3AB4D78();
}

uint64_t sub_1A39EE7DC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39EE828()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (v0[8])
  {
    v1 = v0[21];
    v2 = v0[17];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + v1) = MEMORY[0x1E0DEE9E0];
    swift_bridgeObjectRelease();
    v3 = (_QWORD *)swift_task_alloc();
    v0[22] = v3;
    *v3 = v0;
    v3[1] = sub_1A39EE7DC;
    return sub_1A3AB4D78();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);
    swift_release();
    return swift_task_switch();
  }
}

uint64_t sub_1A39EE8FC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 72) = *(_QWORD *)(v0 + 136) == 0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1A39EE948()
{
  const void *v0;
  void *v1;
  void *v2;
  __CFString *v3;
  __CFNotificationCenter *v4;
  __CFString *v5;
  __CFNotificationCenter *v6;

  v1 = (void *)sub_1A3AB4958();
  v2 = (void *)sub_1A3AB4958();
  v3 = v1;
  v4 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v4, v0, (CFNotificationCallback)sub_1A39EEA3C, v3, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  v5 = v2;
  v6 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v6, v0, (CFNotificationCallback)sub_1A39EEA3C, v5, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

}

void *sub_1A39EEA3C(void *result, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  void (*v7)(uint64_t);
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  if (a2)
  {
    v7 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 248);
    v8 = result;
    v9 = a3;
    v10 = a5;
    v11 = swift_retain();
    v7(v11);

    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_1A39EEAB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v1 = v0;
  v2 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v16 - v6;
  v8 = sub_1A3A63914();
  swift_beginAccess();
  v9 = *v8;
  v10 = sub_1A3AB4D00();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v10);
  sub_1A39FEDA0((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_1ED1B53A0);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10);
  swift_retain();
  swift_retain();
  if (v12 == 1)
  {
    sub_1A39B11F4((uint64_t)v5, (uint64_t *)&unk_1ED1B53A0);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v5, v10);
  }
  v13 = sub_1A39B9F44((unint64_t *)&qword_1EE6D2540, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &unk_1EE6D3300;
  *(_QWORD *)(v14 + 24) = v1;
  v16[1] = 6;
  v16[2] = 0;
  v16[3] = v9;
  v16[4] = v13;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A39EEC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch();
}

uint64_t sub_1A39EEC90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 16) + 112) + 176)
                         + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v0 + 16) + 112) + 176));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1A39EECF0;
  return v3();
}

uint64_t sub_1A39EECF0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t VoiceResolver.__allocating_init(voiceSource:requiredTraits:sortMode:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  _BYTE v13[40];

  v4 = v3;
  v6 = *a2;
  v7 = *a3;
  sub_1A39A1AD0(a1, (uint64_t)v13);
  v12 = v6;
  sub_1A39AE770();
  sub_1A39A4820(&qword_1ED1B5378);
  sub_1A39C3EF8((unint64_t *)&qword_1ED1B5380, &qword_1ED1B5378, MEMORY[0x1E0DEAF38]);
  sub_1A3AB5228();
  v10 = v7;
  v11[0] = v11[1];
  v8 = (*(uint64_t (**)(_BYTE *, uint64_t *, _QWORD *, uint64_t *))(v4 + 256))(v13, &v12, v11, &v10);
  sub_1A39A47C4(a1);
  return v8;
}

uint64_t VoiceResolver.__allocating_init(voiceSource:requiredTraits:forbiddenTraits:sortMode:)(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  VoiceResolver.init(voiceSource:requiredTraits:forbiddenTraits:sortMode:)(a1, a2, a3, a4);
  return v8;
}

uint64_t *VoiceResolver.init(voiceSource:requiredTraits:forbiddenTraits:sortMode:)(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(void *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void *, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54[2];

  v5 = v4;
  v49 = *v5;
  v10 = sub_1A39A4820(&qword_1EE6D2488);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  MEMORY[0x1E0C80A78](v10);
  v50 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A39A4820(&qword_1ED1B53E8);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v53 = (char *)&v47 - v17;
  v18 = *a2;
  v19 = *a3;
  v20 = *a4;
  type metadata accessor for TTSExecutor.Serialized();
  v21 = sub_1A3A630D8();
  v5[2] = TTSExecutor.Serialized.__allocating_init(executor:)(v21);
  v22 = OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voiceResolutionCache;
  *(uint64_t *)((char *)v5 + v22) = sub_1A39EC46C(MEMORY[0x1E0DEE9D8]);
  sub_1A39A1AD0((uint64_t)a1, (uint64_t)(v5 + 3));
  v5[8] = v18;
  v5[9] = v19;
  v5[10] = v20;
  v48 = a1;
  v23 = a1[3];
  v24 = a1[4];
  sub_1A39A19CC(a1, v23);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v18;
  *(_QWORD *)(v25 + 24) = v19;
  sub_1A39A4820(&qword_1ED1B52A0);
  v26 = v53;
  sub_1A3AB4D60();
  swift_release();
  v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v16, v12);
  sub_1A39A4820(&qword_1ED1B5368);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v26, v12);
  v29 = StreamCachedValue.__allocating_init(stream:recomputeBlock:)((uint64_t)v16, 0, 0, v28);
  v5[11] = (uint64_t)v29;
  v30 = *(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v29 + 224);
  swift_retain();
  v31 = sub_1A39A4820(&qword_1ED1B53F0);
  v32 = sub_1A39C3EF8(&qword_1ED1B53F8, &qword_1ED1B53F0, MEMORY[0x1E0DEB3C8]);
  v33 = v30(&unk_1EE6D3320, 0, v31, v32);
  swift_release();
  v5[12] = v33;
  v34 = *(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v5[11] + 224);
  swift_retain();
  v35 = v34(&unk_1EE6D3328, 0, v31, v32);
  swift_release();
  v5[13] = v35;
  v36 = v5[12];
  v37 = (uint64_t)v48;
  sub_1A39A1AD0((uint64_t)v48, (uint64_t)v54);
  v38 = swift_allocObject();
  sub_1A39A1AB8(v54, v38 + 16);
  *(_QWORD *)(v38 + 56) = v49;
  v39 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 224);
  v40 = sub_1A3AB4538();
  v41 = sub_1A39B9F44((unint64_t *)&unk_1ED1B5310, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E60]);
  swift_retain();
  v42 = v39(&unk_1EE6D3338, v38, v40, v41);
  swift_release();
  swift_release();
  v5[14] = v42;
  v43 = *(void (**)(uint64_t))(*(_QWORD *)v5[11] + 216);
  v44 = swift_retain();
  v43(v44);
  swift_release();
  sub_1A39A4820((uint64_t *)&unk_1EE6D2490);
  v45 = v50;
  sub_1A3AB4D60();
  v27(v16, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))((uint64_t)v5 + OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voices, v45, v52);
  sub_1A39EE3A0();
  v27(v53, v12);
  sub_1A39A47C4(v37);
  return v5;
}

uint64_t sub_1A39EF27C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a3;
  v5 = *a2;
  v4[4] = a4;
  v4[5] = v5;
  return swift_task_switch();
}

uint64_t sub_1A39EF29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(uint64_t **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1A39F8C28(v4, v2, v1);
  swift_bridgeObjectRelease();
  *v3 = v5;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39EF304(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_1A39EF320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t i;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
  {
    i = MEMORY[0x1E0DEE9E8];
LABEL_28:
    **(_QWORD **)(v0 + 16) = i;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = v1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  for (i = MEMORY[0x1E0DEE9E8]; ; i = v15)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v6)
      goto LABEL_26;
    v17 = *(_QWORD *)(v2 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v6)
        goto LABEL_26;
      v17 = *(_QWORD *)(v2 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v6)
          goto LABEL_26;
        v17 = *(_QWORD *)(v2 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v6)
            goto LABEL_26;
          v17 = *(_QWORD *)(v2 + 8 * v8);
          if (!v17)
          {
            v8 = v16 + 4;
            if (v16 + 4 >= v6)
              goto LABEL_26;
            v17 = *(_QWORD *)(v2 + 8 * v8);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_25:
    v5 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v12 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 104 * v11 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = swift_bridgeObjectRetain();
    v14 = sub_1A39EF508(v13, v12);
    v15 = sub_1A39EF508(v14, i);
    result = swift_bridgeObjectRelease();
  }
  v18 = v16 + 5;
  if (v18 >= v6)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  v17 = *(_QWORD *)(v2 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v17 = *(_QWORD *)(v2 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A39EF508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;

  v4 = sub_1A3AB4538();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v25 - v9;
  v11 = sub_1A39A4820(&qword_1ED1B5320);
  result = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0;
  v16 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v17 + 63) >> 6;
  v26 = a2;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v20 | (v15 << 6); ; i = __clz(__rbit64(v23)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v14, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v14, v4);
    sub_1A39DA684((uint64_t)v10, v8);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (v19)
      goto LABEL_4;
LABEL_5:
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v22);
    ++v15;
    if (!v23)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v25)
        goto LABEL_24;
      v23 = *(_QWORD *)(v16 + 8 * v15);
      if (!v23)
      {
        v15 = v22 + 2;
        if (v22 + 2 >= v25)
          goto LABEL_24;
        v23 = *(_QWORD *)(v16 + 8 * v15);
        if (!v23)
        {
          v15 = v22 + 3;
          if (v22 + 3 >= v25)
            goto LABEL_24;
          v23 = *(_QWORD *)(v16 + 8 * v15);
          if (!v23)
            break;
        }
      }
    }
LABEL_20:
    v19 = (v23 - 1) & v23;
  }
  v24 = v22 + 4;
  if (v24 >= v25)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v14, 1, 1, v4);
LABEL_25:
    swift_release();
    return v26;
  }
  v23 = *(_QWORD *)(v16 + 8 * v24);
  if (v23)
  {
    v15 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v15 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v15);
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A39EF7A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_1A39EF7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
  {
    i = MEMORY[0x1E0DEE9E8];
LABEL_28:
    **(_QWORD **)(v0 + 16) = i;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = v1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  for (i = MEMORY[0x1E0DEE9E8]; ; i = v11)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_6;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v12 >= v6)
      goto LABEL_26;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_26;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_26;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_26;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
          {
            v8 = v12 + 4;
            if (v12 + 4 >= v6)
              goto LABEL_26;
            v13 = *(_QWORD *)(v2 + 8 * v8);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_25:
    v5 = (v13 - 1) & v13;
LABEL_6:
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRetain();
    v11 = sub_1A39EF508(v10, i);
    result = swift_bridgeObjectRelease();
  }
  v14 = v12 + 5;
  if (v14 >= v6)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A39EF990(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v4[8] = a3;
  v4[9] = a4;
  v4[7] = a1;
  sub_1A39A4820(&qword_1ED1B5320);
  v6 = swift_task_alloc();
  v7 = *a2;
  v4[10] = v6;
  v4[11] = v7;
  return swift_task_switch();
}

uint64_t sub_1A39EF9F8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[11];
  v2 = (_QWORD *)v0[8];
  v0[5] = sub_1A39A4820(&qword_1ED1B53F0);
  v0[6] = sub_1A39C3EF8(&qword_1ED1B5400, &qword_1ED1B53F0, MEMORY[0x1E0DEB3E0]);
  v3 = MEMORY[0x1E0DEE9E8];
  if (v1)
    v3 = v1;
  v0[2] = v3;
  v4 = v2[3];
  v5 = v2[4];
  sub_1A39A19CC(v2, v4);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  swift_bridgeObjectRetain();
  v7 = v6(v4, v5);
  v0[12] = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1A39EFAE8;
  return sub_1A39EFBFC(v0[10], (uint64_t)(v0 + 2), v0[8], v7);
}

uint64_t sub_1A39EFAE8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1A39A47C4(v1);
  return swift_task_switch();
}

uint64_t sub_1A39EFB50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = sub_1A3AB4538();
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_1A3AB4448();
    sub_1A39B11F4(v1, &qword_1ED1B5320);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 56), v1, v2);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39EFBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[11] = a3;
  v4[12] = a4;
  v4[9] = a1;
  v4[10] = a2;
  v5 = sub_1A3AB4424();
  v4[13] = v5;
  v4[14] = *(_QWORD *)(v5 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = sub_1A39A4820(&qword_1ED1B52F8);
  v4[17] = swift_task_alloc();
  v6 = sub_1A3AB4520();
  v4[18] = v6;
  v4[19] = *(_QWORD *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B52F0);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  v7 = sub_1A3AB4538();
  v4[27] = v7;
  v4[28] = *(_QWORD *)(v7 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B5320);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A39EFDB4()
{
  uint64_t *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v126)(uint64_t, uint64_t, uint64_t);
  void (*v127)(uint64_t, unint64_t, uint64_t);
  void (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t *v129;
  void *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;

  v2 = (_QWORD *)v0[10];
  v1 = (_QWORD *)v0[11];
  v3 = v2[3];
  v4 = sub_1A39A19CC(v2, v3);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v5 + 16))(v6, v4, v3);
  v7 = sub_1A3AB4B5C();
  swift_task_dealloc();
  v8 = sub_1A39ED944(v7);
  swift_bridgeObjectRelease();
  v130 = (void *)objc_opt_self();
  sub_1A39F8018(v8);
  swift_bridgeObjectRelease();
  v9 = (void *)sub_1A3AB4BA4();
  swift_bridgeObjectRelease();
  v10 = v1[3];
  v11 = v1[4];
  sub_1A39A19CC(v1, v10);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
  v13 = v12(v10, v11);
  sub_1A39F8018(v13);
  swift_bridgeObjectRelease();
  v14 = (void *)sub_1A3AB4BA4();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v130, sel_mostPreferredLanguageOf_withPreferredLanguages_forUsage_options_, v9, v14, 8, 1);

  if (v15)
  {
    v16 = v0[27];
    v17 = v0[28];
    v18 = v0[9];
    sub_1A3AB497C();

    sub_1A3AB4448();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v16);
    v19 = v0;
    goto LABEL_48;
  }
  v129 = v0;
  v114 = v2;
  v20 = v12(v10, v11);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v19 = v0;
    v22 = v0[28];
    v133 = MEMORY[0x1E0DEE9D8];
    sub_1A39BE06C(0, v21, 0);
    v23 = v133;
    v24 = v20 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1A3AB4448();
      v26 = *(_QWORD *)(v133 + 16);
      v25 = *(_QWORD *)(v133 + 24);
      if (v26 >= v25 >> 1)
        sub_1A39BE06C(v25 > 1, v26 + 1, 1);
      v27 = v0[33];
      v28 = v0[27];
      *(_QWORD *)(v133 + 16) = v26 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(v133+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v26, v27, v28);
      v24 += 16;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x1E0DEE9D8];
    v19 = v0;
  }
  v29 = *(_QWORD *)(v23 + 16);
  v30 = v19[28];
  if (!v29)
  {
    v125 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
    swift_bridgeObjectRetain();
LABEL_45:
    v35 = v125;
    v125(v19[36], 1, 1, v19[27]);
LABEL_46:
    swift_bridgeObjectRelease_n();
LABEL_47:
    v35(v19[9], 1, 1, v19[27]);
    goto LABEL_48;
  }
  v116 = v19 + 2;
  v120 = v19[19];
  v31 = v19[14];
  v113 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v32 = v23 + v113;
  v124 = *(_QWORD *)(v30 + 72);
  v127 = *(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16);
  swift_bridgeObjectRetain();
  v118 = v31;
  while (1)
  {
    v33 = v19[36];
    v34 = v19[27];
    v127(v33, v32, v34);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
    v35(v33, 0, 1, v34);
    v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    if (v126(v33, 1, v34) == 1)
      goto LABEL_46;
    v131 = v29;
    v125 = v35;
    v36 = v19[26];
    v37 = v19[22];
    v38 = v19[18];
    v39 = v19[13];
    v128 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
    v128(v19[32], v19[36], v19[27]);
    sub_1A3AB452C();
    sub_1A3AB44FC();
    v123 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
    v123(v37, v38);
    v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
    v40 = v122(v36, 1, v39);
    v41 = v19[32];
    v42 = v19[26];
    v43 = v19[27];
    if (v40 != 1)
      break;
    sub_1A39B11F4(v19[26], &qword_1ED1B52F0);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v41, v43);
LABEL_13:
    v32 += v124;
    v19 = v129;
    v29 = v131 - 1;
    v31 = v118;
    if (v131 == 1)
      goto LABEL_45;
  }
  v44 = v19[13];
  v45 = Locale.LanguageCode.isMacroLanguage.getter();
  v46 = v42;
  v47 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v47(v46, v44);
  v48 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v48(v41, v43);
  if ((v45 & 1) == 0)
    goto LABEL_13;
  v119 = v47;
  v19 = v129;
  v49 = v129[12];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v50 = sub_1A39FF790(v23, v49);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v35 = v125;
  v52 = v126;
  v109 = *(_QWORD *)(v50 + 16);
  if (!v109)
  {
LABEL_49:
    v35(v19[35], 1, 1, v19[27]);
LABEL_50:
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  v53 = 0;
  v121 = v129[16];
  v117 = v129[14];
  v110 = v50;
  v111 = v50 + v113;
  v115 = v48;
  while (1)
  {
    if (v53 >= *(_QWORD *)(v50 + 16))
    {
      __break(1u);
      return result;
    }
    v54 = v19[35];
    v55 = v19[27];
    v127(v54, v111 + v53 * v124, v55);
    v35(v54, 0, 1, v55);
    if (v52(v54, 1, v55) == 1)
      goto LABEL_50;
    v112 = v53;
    v56 = v19[35];
    v57 = v129[34];
    v58 = v129[27];
    v59 = (_QWORD *)v129[10];
    v128(v129[31], v56, v58);
    v60 = v114[3];
    v61 = sub_1A39A19CC(v59, v60);
    v62 = *(_QWORD *)(v60 - 8);
    v63 = swift_task_alloc();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v62 + 16))(v63, v61, v60);
    v129[5] = swift_getAssociatedTypeWitness();
    v129[6] = swift_getAssociatedConformanceWitness();
    sub_1A39B1230(v116);
    sub_1A3AB4B44();
    swift_task_dealloc();
    sub_1A39AF518((uint64_t)v116, v129[5]);
    sub_1A3AB512C();
    v64 = v57;
    v19 = v129;
    v65 = v52(v64, 1, v58);
    v132 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v65 != 1)
      break;
LABEL_22:
    sub_1A39A47C4((uint64_t)v116);
    if (v132[2])
    {
      swift_bridgeObjectRelease();
      if (v132[2])
      {
        v127(v19[9], (unint64_t)v132 + v113, v19[27]);
        v106 = 0;
      }
      else
      {
        v106 = 1;
      }
      v107 = v19[31];
      v108 = v19[27];
      v125(v19[9], v106, 1, v108);
      swift_bridgeObjectRelease();
      v115(v107, v108);
      goto LABEL_48;
    }
    v53 = v112 + 1;
    v66 = v19[31];
    v67 = v19[27];
    swift_bridgeObjectRelease();
    result = ((uint64_t (*)(uint64_t, uint64_t))v115)(v66, v67);
    v50 = v110;
    v35 = v125;
    if (v112 + 1 == v109)
      goto LABEL_49;
  }
  v132 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (2)
  {
    v128(v19[30], v19[34], v19[27]);
    v71 = sub_1A3AB443C();
    v73 = v72;
    if (v71 != sub_1A3AB443C() || v73 != v74)
    {
      v76 = sub_1A3AB5654();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v76 & 1) != 0)
        goto LABEL_52;
      v78 = v19[24];
      v77 = v19[25];
      v80 = v19[20];
      v79 = v19[21];
      v82 = v19[17];
      v81 = v19[18];
      v83 = v129[13];
      sub_1A3AB452C();
      sub_1A3AB44FC();
      v123(v79, v81);
      sub_1A3AB452C();
      sub_1A3AB44FC();
      v123(v80, v81);
      v84 = v82 + *(int *)(v121 + 48);
      sub_1A39B9F00(v77, v82, &qword_1ED1B52F0);
      sub_1A39B9F00(v78, v84, &qword_1ED1B52F0);
      v85 = v83;
      v19 = v129;
      v86 = v122(v82, 1, v85);
      v87 = v129[13];
      if (v86 == 1)
      {
        v88 = v129[25];
        sub_1A39B11F4(v129[24], &qword_1ED1B52F0);
        sub_1A39B11F4(v88, &qword_1ED1B52F0);
        if (v122(v84, 1, v87) == 1)
        {
          sub_1A39B11F4(v129[17], &qword_1ED1B52F0);
          v52 = v126;
          goto LABEL_39;
        }
LABEL_27:
        sub_1A39B11F4(v129[17], &qword_1ED1B52F8);
        v52 = v126;
      }
      else
      {
        sub_1A39B9F00(v129[17], v129[23], &qword_1ED1B52F0);
        v89 = v122(v84, 1, v87);
        v91 = v129[24];
        v90 = v129[25];
        v92 = v129[23];
        if (v89 == 1)
        {
          v68 = v129[13];
          sub_1A39B11F4(v129[24], &qword_1ED1B52F0);
          sub_1A39B11F4(v90, &qword_1ED1B52F0);
          v119(v92, v68);
          goto LABEL_27;
        }
        v93 = v129[17];
        v94 = v129[15];
        v95 = v129[13];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 32))(v94, v84, v95);
        sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
        v96 = sub_1A3AB494C();
        v119(v94, v95);
        sub_1A39B11F4(v91, &qword_1ED1B52F0);
        sub_1A39B11F4(v90, &qword_1ED1B52F0);
        v119(v92, v95);
        sub_1A39B11F4(v93, &qword_1ED1B52F0);
        v52 = v126;
        if ((v96 & 1) != 0)
        {
LABEL_39:
          v127(v129[29], v129[30], v129[27]);
          v97 = v132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = (_QWORD *)sub_1A39FA728(0, v132[2] + 1, 1, v132, &qword_1ED1B5458, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0E38]);
          v99 = v97[2];
          v98 = v97[3];
          if (v99 >= v98 >> 1)
            v97 = (_QWORD *)sub_1A39FA728(v98 > 1, v99 + 1, 1, v97, &qword_1ED1B5458, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0E38]);
          v100 = v129[29];
          v101 = v129[27];
          v97[2] = v99 + 1;
          v132 = v97;
          v128((uint64_t)v97 + v113 + v99 * v124, v100, v101);
        }
      }
      v69 = v129[34];
      v70 = v129[27];
      v115(v129[30], v70);
      sub_1A39AF518((uint64_t)v116, v129[5]);
      sub_1A3AB512C();
      if (v52(v69, 1, v70) == 1)
        goto LABEL_22;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_52:
  v102 = v19[30];
  v103 = v19[31];
  v104 = v19[27];
  v105 = v19[9];
  swift_bridgeObjectRelease();
  v115(v103, v104);
  swift_bridgeObjectRelease();
  v128(v105, v102, v104);
  v125(v105, 0, 1, v104);
  sub_1A39A47C4((uint64_t)v116);
LABEL_48:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v19[1])();
}

uint64_t sub_1A39F0A6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch();
}

uint64_t sub_1A39F0A88()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 24);
  v2 = sub_1A39EDA40(*(_QWORD *)(v0 + 32));
  v3 = sub_1A39FFCBC(v2);
  swift_bridgeObjectRelease();
  *v1 = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t VoiceResolver.deinit()
{
  uint64_t v0;
  __CFNotificationCenter *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v1, v5);

  swift_release();
  sub_1A39A47C4(v0 + 24);
  sub_1A39FA578(*(_QWORD *)(v0 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2 = v0 + OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voices;
  v3 = sub_1A39A4820(&qword_1EE6D2488);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VoiceResolver.__deallocating_deinit()
{
  VoiceResolver.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1A39F0BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  type metadata accessor for VoiceResolver();
  sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  v4[7] = sub_1A3AB4C70();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t sub_1A39F0C68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 48) + 88) + 208)
                                       + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v0 + 48) + 88) + 208));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1A39F0CD8;
  return v3(v0 + 16);
}

uint64_t sub_1A39F0CD8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F0D24()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    v1 = sub_1A39D9208(MEMORY[0x1E0DEE9D8]);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = sub_1A3AB49F4();
  sub_1A39F0D9C(v3, v4, v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1A39F0D9C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  id v22;
  double result;
  id v24;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_1A39A2734(a1, a2), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(a3 + 56) + 104 * v6;
    v10 = *(_QWORD *)v8;
    v9 = *(_QWORD *)(v8 + 8);
    v12 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    v13 = *(_QWORD *)(v8 + 32);
    v14 = *(_WORD *)(v8 + 40);
    v15 = *(_QWORD *)(v8 + 48);
    v16 = *(_BYTE *)(v8 + 56);
    v17 = *(_QWORD *)(v8 + 64);
    v18 = *(_QWORD *)(v8 + 72);
    v24 = *(id *)(v8 + 80);
    v19 = *(_DWORD *)(v8 + 88);
    v20 = *(_BYTE *)(v8 + 92);
    v21 = *(_DWORD *)(v8 + 96);
    LOBYTE(v8) = *(_BYTE *)(v8 + 100);
    *(_QWORD *)a4 = v10;
    *(_QWORD *)(a4 + 8) = v9;
    *(_QWORD *)(a4 + 16) = v12;
    *(_QWORD *)(a4 + 24) = v11;
    *(_QWORD *)(a4 + 32) = v13;
    *(_WORD *)(a4 + 40) = v14;
    *(_QWORD *)(a4 + 48) = v15;
    *(_BYTE *)(a4 + 56) = v16;
    *(_QWORD *)(a4 + 64) = v17;
    *(_QWORD *)(a4 + 72) = v18;
    *(_QWORD *)(a4 + 80) = v24;
    *(_DWORD *)(a4 + 88) = v19;
    *(_BYTE *)(a4 + 92) = v20;
    *(_DWORD *)(a4 + 96) = v21;
    *(_BYTE *)(a4 + 100) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = v24;
  }
  else
  {
    *(_QWORD *)(a4 + 93) = 0;
    result = 0.0;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1A39F0FDC(int a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[16] = a3;
  v3[17] = _Block_copy(aBlock);
  v3[18] = sub_1A3AB497C();
  v3[19] = v4;
  type metadata accessor for VoiceResolver();
  sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  swift_retain();
  v3[20] = sub_1A3AB4C70();
  v3[21] = v5;
  return swift_task_switch();
}

uint64_t sub_1A39F1084()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 128) + 88) + 208)
                                       + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v0 + 128) + 88) + 208));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v1;
  *v1 = v0;
  v1[1] = sub_1A39F10F4;
  return v3(v0 + 120);
}

uint64_t sub_1A39F10F4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F1140()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 120);
  if (!v1)
    v1 = sub_1A39D9208(MEMORY[0x1E0DEE9D8]);
  v2 = sub_1A3AB49F4();
  sub_1A39F0D9C(v2, v3, v1, v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v4 = *(_QWORD *)(v0 + 24);
  if (v4)
  {
    v5 = *(void **)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 56);
    v18 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 16);
    CoreSynthesizer.Voice._bridgeToObjectiveC()((TTSSpeechVoice *)(*(_BYTE *)(v0 + 116) & 1));
    v12 = v11;
    sub_1A39A2EB8(v10, v4, v9, v8, v18, v7, v17, v16, v15, v6, v5);
  }
  else
  {
    v12 = 0;
  }
  v13 = *(void (***)(_QWORD, _QWORD))(v0 + 136);
  ((void (**)(_QWORD, void *))v13)[2](v13, v12);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F12C4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t *v2;

  v1 = sub_1A39EC46C(MEMORY[0x1E0DEE9D8]);
  v2 = (unint64_t *)(v0 + OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voiceResolutionCache);
  swift_beginAccess();
  *v2 = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39F1320(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  v4 = sub_1A3AB4538();
  v3[25] = v4;
  v3[26] = *(_QWORD *)(v4 - 8);
  v3[27] = swift_task_alloc();
  type metadata accessor for VoiceResolver();
  sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  v3[28] = sub_1A3AB4C70();
  v3[29] = v5;
  return swift_task_switch();
}

uint64_t sub_1A39F13C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  id v18;
  uint64_t v19;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voiceResolutionCache;
  *(_QWORD *)(v0 + 240) = OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voiceResolutionCache;
  v3 = (uint64_t *)(v1 + v2);
  swift_beginAccess();
  v4 = *v3;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_8;
  v5 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRetain();
  v6 = sub_1A39F8184(v5);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v21 = *(_QWORD *)(*(_QWORD *)(v0 + 192) + 80);
    *(_QWORD *)(v0 + 248) = v21;
    *(_QWORD *)(v0 + 168) = v21;
    sub_1A39EE2B4(v21);
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v22;
    *v22 = v0;
    v22[1] = sub_1A39F15A0;
    return sub_1A39F3DD4(*(_QWORD *)(v0 + 184), (uint64_t *)(v0 + 168));
  }
  v8 = *(_QWORD *)(v4 + 56) + 104 * v6;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v24 = *(_QWORD *)(v8 + 24);
  v25 = *(_QWORD *)v8;
  v11 = *(_QWORD *)(v8 + 32);
  v26 = *(unsigned __int8 *)(v8 + 56);
  v27 = *(_QWORD *)(v8 + 48);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(v8 + 72);
  v14 = *(void **)(v8 + 80);
  v28 = *(_DWORD *)(v8 + 96);
  v23 = *(unsigned __int16 *)(v8 + 40);
  if (*(_BYTE *)(v8 + 92))
    v15 = 0x100000000;
  else
    v15 = 0;
  v16 = v15 | *(unsigned int *)(v8 + 88);
  v17 = *(_BYTE *)(v8 + 100) != 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v14;
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)v19 = v25;
  *(_QWORD *)(v19 + 8) = v9;
  *(_QWORD *)(v19 + 16) = v10;
  *(_QWORD *)(v19 + 24) = v24;
  *(_QWORD *)(v19 + 32) = v11;
  *(_QWORD *)(v19 + 40) = v23;
  *(_QWORD *)(v19 + 48) = v27;
  *(_QWORD *)(v19 + 56) = v26;
  *(_QWORD *)(v19 + 64) = v12;
  *(_QWORD *)(v19 + 72) = v13;
  *(_QWORD *)(v19 + 80) = v14;
  *(_QWORD *)(v19 + 88) = v16;
  *(_BYTE *)(v19 + 100) = v17;
  *(_DWORD *)(v19 + 96) = v28;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F15A0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  sub_1A39FA578(v2);
  return swift_task_switch();
}

uint64_t sub_1A39F1600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 264);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v0 + 208);
    v3 = *(_QWORD *)(v0 + 216);
    v31 = *(_QWORD *)(v0 + 200);
    v30 = *(_QWORD *)(v0 + 184);
    v4 = (uint64_t *)(*(_QWORD *)(v0 + 192) + *(_QWORD *)(v0 + 240));
    v6 = *(_OWORD *)(v1 + 48);
    v5 = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v0 + 32) = v6;
    *(_OWORD *)(v0 + 48) = v5;
    v8 = *(_OWORD *)(v1 + 96);
    v7 = *(_OWORD *)(v1 + 112);
    v9 = *(_OWORD *)(v1 + 80);
    *(_QWORD *)(v0 + 109) = *(_QWORD *)(v1 + 125);
    *(_OWORD *)(v0 + 80) = v8;
    *(_OWORD *)(v0 + 96) = v7;
    *(_OWORD *)(v0 + 64) = v9;
    v40 = *(_QWORD *)(v1 + 32);
    v39 = *(_OWORD *)(v1 + 40);
    v37 = *(_QWORD *)(v1 + 64);
    v38 = *(_QWORD *)(v1 + 56);
    v35 = *(unsigned __int8 *)(v1 + 88);
    v36 = *(_QWORD *)(v1 + 80);
    v34 = *(_OWORD *)(v1 + 96);
    v10 = *(unsigned int *)(v1 + 120);
    v11 = *(unsigned __int8 *)(v1 + 124);
    v12 = *(unsigned int *)(v1 + 128);
    v13 = *(unsigned __int8 *)(v1 + 132);
    v32 = *(unsigned __int16 *)(v1 + 72);
    v33 = *(_QWORD *)(v1 + 112);
    sub_1A39FA5C4(v0 + 16);
    swift_bridgeObjectRelease();
    v14 = 0x100000000;
    if (v11)
      v15 = 0x100000000;
    else
      v15 = 0;
    v16 = v15 | v10;
    if (!v13)
      v14 = 0;
    v17 = v14 | v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v30, v31);
    swift_beginAccess();
    sub_1A39FA5C4(v0 + 16);
    sub_1A39FA5C4(v0 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41 = *v4;
    *v4 = 0x8000000000000000;
    sub_1A39FA89C(v0 + 16, v3, isUniquelyReferenced_nonNull_native);
    *v4 = v41;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v31);
    swift_endAccess();
    sub_1A39FAA10(v0 + 16);
    v19 = v34;
    v21 = v32;
    v20 = v33;
    v22 = v39;
    v24 = v35;
    v23 = v36;
    v26 = v37;
    v25 = v38;
    v27 = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = 0;
    v25 = 0;
    v26 = 0;
    v21 = 0;
    v23 = 0;
    v24 = 0;
    v20 = 0;
    v16 = 0;
    v17 = 0;
    v22 = 0uLL;
    v19 = 0uLL;
  }
  v28 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)v28 = v27;
  *(_OWORD *)(v28 + 8) = v22;
  *(_QWORD *)(v28 + 24) = v25;
  *(_QWORD *)(v28 + 32) = v26;
  *(_QWORD *)(v28 + 40) = v21;
  *(_QWORD *)(v28 + 48) = v23;
  *(_QWORD *)(v28 + 56) = v24;
  *(_OWORD *)(v28 + 64) = v19;
  *(_QWORD *)(v28 + 80) = v20;
  *(_QWORD *)(v28 + 88) = v16;
  *(_DWORD *)(v28 + 96) = v17;
  *(_BYTE *)(v28 + 100) = BYTE4(v17);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F196C(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3[15] = a3;
  v5 = sub_1A3AB4538();
  v3[16] = v5;
  v3[17] = *(_QWORD *)(v5 - 8);
  v6 = swift_task_alloc();
  v3[18] = v6;
  v3[19] = _Block_copy(a2);
  sub_1A3AB4478();
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  v3[20] = v7;
  *v7 = v3;
  v7[1] = sub_1A39F1A30;
  return sub_1A39F1320((uint64_t)(v3 + 2), v6);
}

uint64_t sub_1A39F1A30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*v0 + 136);
  v1 = *(_QWORD *)(*v0 + 144);
  v3 = *(_QWORD *)(*v0 + 128);
  v4 = *v0;
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    v6 = *(void **)(v4 + 96);
    v15 = *(_QWORD *)(v4 + 88);
    v16 = *(_QWORD *)(v4 + 80);
    v17 = *(_QWORD *)(v4 + 72);
    v18 = *(_QWORD *)(v4 + 64);
    v7 = *(_QWORD *)(v4 + 56);
    v19 = *(_QWORD *)(v4 + 48);
    v9 = *(_QWORD *)(v4 + 32);
    v8 = *(_QWORD *)(v4 + 40);
    v10 = *(_QWORD *)(v4 + 16);
    CoreSynthesizer.Voice._bridgeToObjectiveC()((TTSSpeechVoice *)(*(_BYTE *)(v4 + 116) & 1));
    v12 = v11;
    sub_1A39A2EB8(v10, v5, v9, v8, v19, v7, v18, v17, v16, v15, v6);
  }
  else
  {
    v12 = 0;
  }
  v13 = *(void (***)(_QWORD, _QWORD))(v4 + 152);
  ((void (**)(_QWORD, void *))v13)[2](v13, v12);

  _Block_release(v13);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1A39F1B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_1A3AB4538();
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  type metadata accessor for VoiceResolver();
  sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A39F1C3C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD);

  v1 = v0[5];
  swift_bridgeObjectRetain();
  sub_1A3AB4448();
  v4 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(*(_QWORD *)v1 + 304) + *(_QWORD *)(*(_QWORD *)v1 + 304));
  v2 = (_QWORD *)swift_task_alloc();
  v0[9] = v2;
  *v2 = v0;
  v2[1] = sub_1A39F1CD4;
  return v4(v0[2], v0[8]);
}

uint64_t sub_1A39F1CD4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 64);
  v2 = *(_QWORD *)(*v0 + 48);
  v3 = *(_QWORD *)(*v0 + 56);
  v5 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A39F1D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];

  v5 = v4;
  v24[0] = a1;
  v9 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v24 - v13;
  v15 = sub_1A3A63914();
  swift_beginAccess();
  v16 = *v15;
  v17 = sub_1A3AB4D00();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, 1, 1, v17);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a3;
  v19[3] = a4;
  v20 = v24[0];
  v19[4] = v5;
  v19[5] = v20;
  v19[6] = a2;
  sub_1A39FEDA0((uint64_t)v14, (uint64_t)v12, (uint64_t *)&unk_1ED1B53A0);
  LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v17);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((_DWORD)v14 == 1)
  {
    sub_1A39B11F4((uint64_t)v12, (uint64_t *)&unk_1ED1B53A0);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v17);
  }
  v21 = sub_1A39B9F44((unint64_t *)&qword_1EE6D2540, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = &unk_1EE6D3370;
  *(_QWORD *)(v22 + 24) = v19;
  v24[1] = 6;
  v24[2] = 0;
  v24[3] = v16;
  v24[4] = v21;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A39F1F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);

  v6[15] = a2;
  v6[16] = a3;
  v11 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))(**(int **)(*(_QWORD *)a4 + 312)
                                                           + *(_QWORD *)(*(_QWORD *)a4 + 312));
  v9 = (_QWORD *)swift_task_alloc();
  v6[17] = v9;
  *v9 = v6;
  v9[1] = sub_1A39F1FE0;
  return v11(v6 + 2, a5, a6);
}

uint64_t sub_1A39F1FE0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_1A39F20D0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  id v5;
  TTSSpeechVoice *v6;
  void *v7;
  id v8;
  void *v9;

  v3 = *(_OWORD *)(a1 + 80);
  v9 = (void *)v3;
  if (*(_QWORD *)(a1 + 8))
  {
    v4 = (void *)v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = v4;
    CoreSynthesizer.Voice._bridgeToObjectiveC()(v6);
    v8 = v7;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v8);

}

uint64_t sub_1A39F21E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = a2;
  v28 = a3;
  v11 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v26 - v15;
  v17 = sub_1A3A63914();
  swift_beginAccess();
  v26 = *v17;
  v18 = sub_1A3AB4D00();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v18);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = v6;
  v20[5] = a1;
  v21 = v28;
  v20[6] = v27;
  v20[7] = v21;
  v20[8] = a4;
  sub_1A39FEDA0((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_1ED1B53A0);
  LODWORD(v16) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18);
  v22 = v26;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((_DWORD)v16 == 1)
  {
    sub_1A39B11F4((uint64_t)v14, (uint64_t *)&unk_1ED1B53A0);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v18);
  }
  v23 = sub_1A39B9F44((unint64_t *)&qword_1EE6D2540, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = &unk_1EE6D3388;
  *(_QWORD *)(v24 + 24) = v20;
  v29 = 6;
  v30 = 0;
  v31 = v22;
  v32 = v23;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A39F2414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v13;
  uint64_t (*v15)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);

  v8[15] = a2;
  v8[16] = a3;
  v15 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)a4 + 336)
                                                                             + *(_QWORD *)(*(_QWORD *)a4 + 336));
  v13 = (_QWORD *)swift_task_alloc();
  v8[17] = v13;
  *v13 = v8;
  v13[1] = sub_1A39F24B8;
  return v15(v8 + 2, a5, a6, a7, a8);
}

uint64_t sub_1A39F24B8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F250C()
{
  uint64_t v0;
  void (*v1)(_QWORD *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[12];
  int v18;
  char v19;

  v1 = *(void (**)(_QWORD *))(v0 + 120);
  v15 = *(_QWORD *)(v0 + 24);
  v13 = *(_QWORD *)(v0 + 40);
  v14 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(void **)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_BYTE *)(v0 + 116);
  v11 = *(_DWORD *)(v0 + 112);
  v17[0] = *(_QWORD *)(v0 + 16);
  v16 = v17[0];
  v17[1] = v15;
  v17[2] = v14;
  v17[3] = v13;
  v17[4] = v2;
  v17[5] = v3;
  v17[6] = v4;
  v17[7] = v5;
  v17[8] = v6;
  v17[9] = v7;
  v17[10] = v8;
  v17[11] = v9;
  v19 = v10;
  v18 = v11;
  v1(v17);
  sub_1A39A2EB8(v16, v15, v14, v13, v2, v3, v4, v5, v6, v7, v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F26BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = sub_1A39A4820(&qword_1ED1B52F8);
  v6[10] = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B52F0);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  v7 = sub_1A3AB4520();
  v6[15] = v7;
  v6[16] = *(_QWORD *)(v7 - 8);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  v8 = sub_1A3AB4424();
  v6[19] = v8;
  v6[20] = *(_QWORD *)(v8 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  v9 = sub_1A3AB4538();
  v6[23] = v9;
  v6[24] = *(_QWORD *)(v9 - 8);
  v6[25] = swift_task_alloc();
  v6[26] = swift_task_alloc();
  type metadata accessor for VoiceResolver();
  sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  v6[27] = sub_1A3AB4C70();
  v6[28] = v10;
  return swift_task_switch();
}

uint64_t sub_1A39F2854()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD *);
  uint64_t (*v9)(_QWORD, _QWORD, uint64_t);

  if (v0[5])
  {
    v8 = (uint64_t (*)(_QWORD *))(**(int **)(**(_QWORD **)(v0[8] + 88) + 208)
                                          + *(_QWORD *)(**(_QWORD **)(v0[8] + 88) + 208));
    v1 = (_QWORD *)swift_task_alloc();
    v0[29] = v1;
    *v1 = v0;
    v1[1] = sub_1A39F2968;
    v2 = v0 + 2;
    return v8(v2);
  }
  v5 = v0[7];
  v4 = v0[8];
  if (!v5)
  {
    v8 = (uint64_t (*)(_QWORD *))(**(int **)(*(_QWORD *)v4 + 184) + *(_QWORD *)(*(_QWORD *)v4 + 184));
    v7 = (_QWORD *)swift_task_alloc();
    v0[30] = v7;
    *v7 = v0;
    v7[1] = sub_1A39F3140;
    v2 = (_QWORD *)v0[26];
    return v8(v2);
  }
  v9 = (uint64_t (*)(_QWORD, _QWORD, uint64_t))(**(int **)(*(_QWORD *)v4 + 312)
                                                       + *(_QWORD *)(*(_QWORD *)v4 + 312));
  v6 = (_QWORD *)swift_task_alloc();
  v0[48] = v6;
  *v6 = v0;
  v6[1] = sub_1A39F3568;
  return v9(v0[3], v0[6], v5);
}

uint64_t sub_1A39F2968()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F29B4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  int *v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  int *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  int *v107;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    v1 = sub_1A39D9208(MEMORY[0x1E0DEE9D8]);
  v2 = sub_1A3AB49F4();
  v4 = *(_QWORD *)(v1 + 16);
  if (!v4)
  {
    v29 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v26 = 0;
    v30 = 0;
    v12 = 0;
LABEL_13:
    v28 = 0;
    v27 = 0;
    v24 = 0;
    v25 = 0;
    goto LABEL_14;
  }
  v5 = sub_1A39A2734(v2, v3);
  if ((v6 & 1) == 0)
  {
    v29 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v26 = 0;
    v30 = 0;
    v12 = 0;
    v4 = 0;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v1 + 56) + 104 * v5;
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 32);
  v96 = *(_QWORD *)v7;
  v98 = *(_QWORD *)(v7 + 48);
  v12 = *(unsigned __int8 *)(v7 + 56);
  v13 = *(_QWORD *)(v7 + 64);
  v14 = *(_QWORD *)(v7 + 72);
  v15 = *(void **)(v7 + 80);
  v16 = *(unsigned int *)(v7 + 88);
  v17 = *(unsigned __int8 *)(v7 + 92);
  v18 = *(unsigned int *)(v7 + 96);
  v19 = *(unsigned __int8 *)(v7 + 100);
  v104 = *(unsigned __int16 *)(v7 + 40);
  v20 = 0x100000000;
  if (v17)
    v21 = 0x100000000;
  else
    v21 = 0;
  v22 = v21 | v16;
  if (!v19)
    v20 = 0;
  v100 = v20 | v18;
  v102 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v15;
  v25 = v100;
  v24 = v102;
  v26 = v104;
  v27 = v15;
  v28 = v14;
  v29 = v96;
  v30 = v98;
  v4 = v13;
LABEL_14:
  *(_DWORD *)(v0 + 360) = v25;
  v101 = v25;
  v103 = v24;
  v91 = HIDWORD(v25);
  v92 = v27;
  *(_BYTE *)(v0 + 364) = BYTE4(v25);
  *(_QWORD *)(v0 + 344) = v27;
  *(_QWORD *)(v0 + 352) = v24;
  v93 = v28;
  v94 = v4;
  *(_QWORD *)(v0 + 328) = v4;
  *(_QWORD *)(v0 + 336) = v28;
  v95 = v12;
  *(_QWORD *)(v0 + 312) = v30;
  *(_QWORD *)(v0 + 320) = v12;
  v105 = v26;
  *(_QWORD *)(v0 + 296) = v11;
  *(_QWORD *)(v0 + 304) = v26;
  *(_QWORD *)(v0 + 280) = v9;
  *(_QWORD *)(v0 + 288) = v10;
  *(_QWORD *)(v0 + 264) = v29;
  *(_QWORD *)(v0 + 272) = v8;
  v31 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v31)
  {
    if (!v8)
    {
      v47 = *(int **)(**(_QWORD **)(v0 + 64) + 336);
      v106 = (int *)((char *)v47 + *v47);
      v48 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 376) = v48;
      *v48 = v0;
      v48[1] = sub_1A39F3494;
      return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v106)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 48), 0, *(_QWORD *)(v0 + 48), 0);
    }
    goto LABEL_32;
  }
  v97 = v29;
  v99 = v30;
  v87 = v11;
  v88 = v10;
  v89 = v9;
  v90 = v8;
  v32 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 208);
  v35 = *(_QWORD *)(v0 + 184);
  v34 = *(_QWORD *)(v0 + 192);
  v36 = *(_QWORD *)(v0 + 144);
  v84 = *(_QWORD *)(v0 + 160);
  v85 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 112);
  v82 = *(_QWORD *)(v0 + 128);
  v83 = *(_QWORD *)(v0 + 120);
  v38 = *(_QWORD *)(v0 + 56);
  v39 = *(_QWORD **)(v0 + 64);
  swift_bridgeObjectRetain();
  v81 = v38;
  sub_1A3AB4448();
  v40 = v39 + 3;
  v41 = v39[6];
  v42 = v39[7];
  sub_1A39A19CC(v40, v41);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 24))(v41, v42);
  Locale.withTTSLanguageDisambiguation(overrides:)(v43, v32);
  swift_bridgeObjectRelease();
  v44 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v44(v33, v35);
  sub_1A3AB452C();
  v44(v32, v35);
  sub_1A3AB44FC();
  v45 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
  v45(v36, v83);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  if (v46(v37, 1, v85) == 1)
  {
    sub_1A39B11F4(*(_QWORD *)(v0 + 112), &qword_1ED1B52F0);
    v29 = v97;
    v30 = v99;
LABEL_31:
    v9 = v89;
    v8 = v90;
    v11 = v87;
    v10 = v88;
LABEL_32:
    v78 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)v78 = v29;
    *(_QWORD *)(v78 + 8) = v8;
    *(_QWORD *)(v78 + 16) = v9;
    *(_QWORD *)(v78 + 24) = v10;
    *(_QWORD *)(v78 + 32) = v11;
    *(_QWORD *)(v78 + 40) = v105;
    *(_QWORD *)(v78 + 48) = v30;
    *(_QWORD *)(v78 + 56) = v95;
    *(_QWORD *)(v78 + 64) = v94;
    *(_QWORD *)(v78 + 72) = v93;
    *(_QWORD *)(v78 + 80) = v92;
    *(_QWORD *)(v78 + 88) = v103;
    *(_DWORD *)(v78 + 96) = v101;
    *(_BYTE *)(v78 + 100) = v91;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 32);
  v86(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 152));
  if (v90)
  {
    v50 = *(_QWORD *)(v0 + 208);
    v51 = *(_QWORD *)(v0 + 184);
    v52 = *(_QWORD *)(v0 + 136);
    v53 = *(_QWORD *)(v0 + 120);
    CoreSynthesizer.Voice.primaryLocale.getter(v50);
    sub_1A3AB452C();
    v44(v50, v51);
    sub_1A3AB44FC();
    v45(v52, v53);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 56))(*(_QWORD *)(v0 + 104), 1, 1, *(_QWORD *)(v0 + 152));
  }
  v54 = *(_QWORD *)(v0 + 152);
  v55 = *(_QWORD *)(v0 + 160);
  v57 = *(_QWORD *)(v0 + 96);
  v56 = *(_QWORD *)(v0 + 104);
  v59 = *(_QWORD *)(v0 + 72);
  v58 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 16))(v57, *(_QWORD *)(v0 + 176), v54);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v57, 0, 1, v54);
  v60 = v58 + *(int *)(v59 + 48);
  sub_1A39B9F00(v56, v58, &qword_1ED1B52F0);
  sub_1A39B9F00(v57, v60, &qword_1ED1B52F0);
  v61 = v46(v58, 1, v54);
  v62 = *(_QWORD *)(v0 + 152);
  if (v61 == 1)
  {
    v63 = *(_QWORD *)(v0 + 104);
    sub_1A39B11F4(*(_QWORD *)(v0 + 96), &qword_1ED1B52F0);
    sub_1A39B11F4(v63, &qword_1ED1B52F0);
    v30 = v99;
    if (v46(v60, 1, v62) == 1)
    {
      v64 = *(_QWORD *)(v0 + 160);
      sub_1A39B11F4(*(_QWORD *)(v0 + 80), &qword_1ED1B52F0);
      (*(void (**)(_QWORD, _QWORD))(v64 + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
LABEL_30:
      v29 = v97;
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  sub_1A39B9F00(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), &qword_1ED1B52F0);
  v30 = v99;
  if (v46(v60, 1, v62) == 1)
  {
    v65 = *(_QWORD *)(v0 + 152);
    v66 = *(_QWORD *)(v0 + 160);
    v67 = *(_QWORD *)(v0 + 104);
    v68 = *(_QWORD *)(v0 + 88);
    sub_1A39B11F4(*(_QWORD *)(v0 + 96), &qword_1ED1B52F0);
    sub_1A39B11F4(v67, &qword_1ED1B52F0);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v65);
LABEL_27:
    sub_1A39B11F4(*(_QWORD *)(v0 + 80), &qword_1ED1B52F8);
    goto LABEL_33;
  }
  v70 = *(_QWORD *)(v0 + 160);
  v69 = *(_QWORD *)(v0 + 168);
  v71 = *(_QWORD *)(v0 + 152);
  v73 = *(_QWORD *)(v0 + 96);
  v72 = *(_QWORD *)(v0 + 104);
  v75 = *(_QWORD *)(v0 + 80);
  v74 = *(_QWORD *)(v0 + 88);
  v86(v69, v60, v71);
  sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
  v76 = sub_1A3AB494C();
  v77 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  v77(v69, v71);
  sub_1A39B11F4(v73, &qword_1ED1B52F0);
  sub_1A39B11F4(v72, &qword_1ED1B52F0);
  v77(v74, v71);
  sub_1A39B11F4(v75, &qword_1ED1B52F0);
  if ((v76 & 1) != 0)
  {
    v77(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
    goto LABEL_30;
  }
LABEL_33:
  v79 = *(int **)(**(_QWORD **)(v0 + 64) + 312);
  v107 = (int *)((char *)v79 + *v79);
  v80 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 368) = v80;
  *v80 = v0;
  v80[1] = sub_1A39F3340;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v107)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 48), v81);
}

uint64_t sub_1A39F3140()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F318C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v1 = v0[8];
  v2 = sub_1A3AB443C();
  v4 = v3;
  v0[31] = v3;
  v7 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v1 + 336)
                                                                        + *(_QWORD *)(*(_QWORD *)v1 + 336));
  v5 = (_QWORD *)swift_task_alloc();
  v0[32] = v5;
  *v5 = v0;
  v5[1] = sub_1A39F3224;
  return v7(v0[3], v0[6], 0, v2, v4);
}

uint64_t sub_1A39F3224()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1A39F3278()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 184));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F3340()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F338C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  sub_1A39A2EB8(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(void **)(v0 + 344));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F3494()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39F3568()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39F363C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 152) = a1;
  *(_QWORD *)(v3 + 160) = v2;
  v5 = sub_1A3AB4538();
  *(_QWORD *)(v3 + 168) = v5;
  *(_QWORD *)(v3 + 176) = *(_QWORD *)(v5 - 8);
  v6 = swift_task_alloc();
  v7 = *a2;
  *(_QWORD *)(v3 + 184) = v6;
  *(_QWORD *)(v3 + 192) = v7;
  *(_OWORD *)(v3 + 200) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v3 + 216) = *(_OWORD *)(a2 + 3);
  *(_WORD *)(v3 + 312) = *((_WORD *)a2 + 20);
  *(_QWORD *)(v3 + 232) = a2[6];
  *(_BYTE *)(v3 + 314) = *((_BYTE *)a2 + 56);
  *(_OWORD *)(v3 + 240) = *((_OWORD *)a2 + 4);
  *(_QWORD *)(v3 + 256) = a2[10];
  *(_DWORD *)(v3 + 304) = *((_DWORD *)a2 + 22);
  *(_BYTE *)(v3 + 315) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(v3 + 308) = *((_DWORD *)a2 + 24);
  *(_BYTE *)(v3 + 316) = *((_BYTE *)a2 + 100);
  type metadata accessor for VoiceResolver();
  sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  *(_QWORD *)(v3 + 264) = sub_1A3AB4C70();
  *(_QWORD *)(v3 + 272) = v8;
  return swift_task_switch();
}

uint64_t sub_1A39F3738()
{
  uint64_t *v0;
  uint64_t inited;
  _QWORD *v2;

  CoreSynthesizer.Voice.primaryLocale.getter(v0[23]);
  sub_1A39A4820((uint64_t *)&unk_1EE6D09E0);
  inited = swift_initStackObject();
  v0[35] = inited;
  *(_OWORD *)(inited + 16) = xmmword_1A3AC1BB0;
  *(_QWORD *)(inited + 32) = *(_QWORD *)sub_1A3A39228();
  *(_QWORD *)(inited + 40) = 0;
  *(_BYTE *)(inited + 48) = 0;
  *(_QWORD *)(inited + 56) = *(_QWORD *)sub_1A3A391C8();
  *(_QWORD *)(inited + 64) = 0;
  *(_BYTE *)(inited + 72) = 0;
  *(_QWORD *)(inited + 80) = *(_QWORD *)sub_1A3A391E0();
  *(_QWORD *)(inited + 88) = 0;
  *(_BYTE *)(inited + 96) = 0;
  *(_OWORD *)(inited + 104) = xmmword_1A3AC1BC0;
  *(_BYTE *)(inited + 120) = 2;
  v0[18] = inited;
  v2 = (_QWORD *)swift_task_alloc();
  v0[36] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_1A39F3878;
  return sub_1A39F3DD4(v0[23], v0 + 18);
}

uint64_t sub_1A39F3878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t sub_1A39F3900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  char v14;
  int v15;
  char v16;
  id v17;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 152);
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v1 + 40);
    v5 = *(_QWORD *)(v1 + 48);
    v4 = *(_QWORD *)(v1 + 56);
    v6 = *(_QWORD *)(v1 + 64);
    v7 = *(_WORD *)(v1 + 72);
    v8 = *(_QWORD *)(v1 + 80);
    v9 = *(_BYTE *)(v1 + 88);
    v10 = *(_QWORD *)(v1 + 96);
    v11 = *(_QWORD *)(v1 + 104);
    v12 = *(void **)(v1 + 112);
    v13 = *(_DWORD *)(v1 + 120);
    v14 = *(_BYTE *)(v1 + 124);
    v15 = *(_DWORD *)(v1 + 128);
    v16 = *(_BYTE *)(v1 + 132);
    *(_QWORD *)v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v2 + 8) = v3;
    *(_QWORD *)(v2 + 16) = v5;
    *(_QWORD *)(v2 + 24) = v4;
    *(_QWORD *)(v2 + 32) = v6;
    *(_WORD *)(v2 + 40) = v7;
    *(_QWORD *)(v2 + 48) = v8;
    *(_BYTE *)(v2 + 56) = v9;
    *(_QWORD *)(v2 + 64) = v10;
    *(_QWORD *)(v2 + 72) = v11;
    *(_QWORD *)(v2 + 80) = v12;
    *(_DWORD *)(v2 + 88) = v13;
    *(_BYTE *)(v2 + 92) = v14;
    *(_DWORD *)(v2 + 96) = v15;
    *(_BYTE *)(v2 + 100) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 93) = 0;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F3B3C(void *a1, void *aBlock, uint64_t a3)
{
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  char v20;
  _QWORD *v21;

  *(_QWORD *)(v3 + 328) = a3;
  *(_QWORD *)(v3 + 336) = _Block_copy(aBlock);
  v5 = a1;
  swift_retain();
  static CoreSynthesizer.Voice._unconditionallyBridgeFromObjectiveC(_:)(a1, v3 + 120);

  v6 = *(_QWORD *)(v3 + 120);
  v7 = *(_QWORD *)(v3 + 128);
  v8 = *(_QWORD *)(v3 + 136);
  v9 = *(_QWORD *)(v3 + 144);
  *(_QWORD *)(v3 + 344) = v7;
  *(_QWORD *)(v3 + 352) = v8;
  v10 = *(_QWORD *)(v3 + 152);
  v11 = *(_WORD *)(v3 + 160);
  v12 = *(_QWORD *)(v3 + 168);
  v13 = *(_BYTE *)(v3 + 176);
  v14 = *(_QWORD *)(v3 + 184);
  v15 = *(_QWORD *)(v3 + 192);
  *(_QWORD *)(v3 + 360) = v10;
  *(_QWORD *)(v3 + 368) = v14;
  v16 = *(_QWORD *)(v3 + 200);
  *(_QWORD *)(v3 + 376) = v15;
  *(_QWORD *)(v3 + 384) = v16;
  v17 = *(_DWORD *)(v3 + 208);
  v18 = *(_BYTE *)(v3 + 212);
  v19 = *(_DWORD *)(v3 + 216);
  v20 = *(_BYTE *)(v3 + 220);
  *(_QWORD *)(v3 + 224) = v6;
  *(_QWORD *)(v3 + 232) = v7;
  *(_QWORD *)(v3 + 240) = v8;
  *(_QWORD *)(v3 + 248) = v9;
  *(_QWORD *)(v3 + 256) = v10;
  *(_WORD *)(v3 + 264) = v11;
  *(_QWORD *)(v3 + 272) = v12;
  *(_BYTE *)(v3 + 280) = v13;
  *(_QWORD *)(v3 + 288) = v14;
  *(_QWORD *)(v3 + 296) = v15;
  *(_QWORD *)(v3 + 304) = v16;
  *(_DWORD *)(v3 + 312) = v17;
  *(_BYTE *)(v3 + 316) = v18;
  *(_DWORD *)(v3 + 320) = v19;
  *(_BYTE *)(v3 + 324) = v20;
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 392) = v21;
  *v21 = v3;
  v21[1] = sub_1A39F3C4C;
  return sub_1A39F363C(v3 + 16, (uint64_t *)(v3 + 224));
}

uint64_t sub_1A39F3C4C()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void (**v11)(_QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(*v0 + 384);
  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(void **)(v2 + 96);
    v13 = *(_QWORD *)(v2 + 88);
    v14 = *(_QWORD *)(v2 + 80);
    v15 = *(_QWORD *)(v2 + 72);
    v16 = *(_QWORD *)(v2 + 64);
    v5 = *(_QWORD *)(v2 + 56);
    v17 = *(_QWORD *)(v2 + 48);
    v7 = *(_QWORD *)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 40);
    v8 = *(_QWORD *)(v2 + 16);
    CoreSynthesizer.Voice._bridgeToObjectiveC()((TTSSpeechVoice *)(*(_BYTE *)(v2 + 116) & 1));
    v10 = v9;
    sub_1A39A2EB8(v8, v3, v7, v6, v17, v5, v16, v15, v14, v13, v4);
  }
  else
  {
    v10 = 0;
  }
  v11 = *(void (***)(_QWORD, _QWORD))(v2 + 336);
  ((void (**)(_QWORD, void *))v11)[2](v11, v10);

  _Block_release(v11);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A39F3DD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[3] = a1;
  v3[4] = v2;
  sub_1A39A4820(&qword_1ED1B5320);
  v3[5] = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B52F0);
  v3[6] = swift_task_alloc();
  v5 = sub_1A3AB4520();
  v3[7] = v5;
  v3[8] = *(_QWORD *)(v5 - 8);
  v3[9] = swift_task_alloc();
  v6 = sub_1A3AB4424();
  v3[10] = v6;
  v3[11] = *(_QWORD *)(v6 - 8);
  v3[12] = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D2350);
  v3[13] = swift_task_alloc();
  v7 = sub_1A3AB4538();
  v3[14] = v7;
  v3[15] = *(_QWORD *)(v7 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v8 = swift_task_alloc();
  v9 = *a2;
  v3[18] = v8;
  v3[19] = v9;
  type metadata accessor for VoiceResolver();
  sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  v3[20] = sub_1A3AB4C70();
  v3[21] = v10;
  return swift_task_switch();
}

uint64_t sub_1A39F3F58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t (*v22)(_QWORD *);

  v1 = v0[18];
  v2 = v0[14];
  v3 = v0[13];
  v4 = v0[3];
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[15] + 16);
  v0[22] = v5;
  v5(v1, v4, v2);
  sub_1A3AB44B4();
  v6 = sub_1A3AB4490();
  LODWORD(v1) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v3, 1, v6);
  sub_1A39B11F4(v3, &qword_1EE6D2350);
  if ((_DWORD)v1 != 1)
    goto LABEL_4;
  v7 = v0[10];
  v8 = v0[11];
  v10 = v0[8];
  v9 = v0[9];
  v12 = v0[6];
  v11 = v0[7];
  sub_1A3AB452C();
  sub_1A3AB44FC();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7) == 1)
  {
    sub_1A39B11F4(v0[6], &qword_1ED1B52F0);
LABEL_4:
    v13 = v0[16];
    v14 = (_QWORD *)v0[4];
    v15 = v14[6];
    v16 = v14[7];
    sub_1A39A19CC(v14 + 3, v15);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
    Locale.withTTSLanguageDisambiguation(overrides:)(v17, v13);
    swift_bridgeObjectRelease();
    v18 = v0[4];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[15] + 40))(v0[18], v0[16], v0[14]);
    v22 = (uint64_t (*)(_QWORD *))(**(int **)(**(_QWORD **)(v18 + 88) + 208)
                                           + *(_QWORD *)(**(_QWORD **)(v18 + 88) + 208));
    v19 = (_QWORD *)swift_task_alloc();
    v0[24] = v19;
    *v19 = v0;
    v19[1] = sub_1A39F4294;
    return v22(v0 + 2);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[11] + 32))(v0[12], v0[6], v0[10]);
  v21 = (_QWORD *)swift_task_alloc();
  v0[23] = v21;
  *v21 = v0;
  v21[1] = sub_1A39F4154;
  return sub_1A39F6468(v0[5], v0[12]);
}

uint64_t sub_1A39F4154()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F41A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 176))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112));
    sub_1A39B11F4(v4, &qword_1ED1B5320);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 112));
  }
  v5 = *(_QWORD *)(v0 + 32);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 40))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
  v8 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)(v5 + 88) + 208)
                                       + *(_QWORD *)(**(_QWORD **)(v5 + 88) + 208));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v6;
  *v6 = v0;
  v6[1] = sub_1A39F4294;
  return v8(v0 + 16);
}

uint64_t sub_1A39F4294()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F42E0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v12;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    v1 = sub_1A39D9208(MEMORY[0x1E0DEE9D8]);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v4;
  swift_bridgeObjectRetain();
  v6 = (char *)sub_1A39F582C((uint64_t)sub_1A39FFCA0, v5, v1);
  swift_task_dealloc();
  v12 = v6;
  sub_1A39EE2B4(v2);
  swift_bridgeObjectRetain();
  sub_1A3A014A8(&v12, v3, v2);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 112);
  sub_1A39FA578(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v12;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v0 + 8))(v10);
}

uint64_t sub_1A39F446C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  int v55;
  char v56;

  v4 = sub_1A3AB4520();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v11 = a1[1];
  v13 = a1[2];
  v28 = a1[3];
  v29 = a1[4];
  LODWORD(v9) = *((unsigned __int8 *)a1 + 41);
  v30 = *((unsigned __int8 *)a1 + 40);
  v31 = v9;
  v32 = a1[6];
  v33 = *((unsigned __int8 *)a1 + 56);
  v14 = a1[9];
  v34 = a1[8];
  v35 = v14;
  v36 = a1[10];
  LODWORD(v14) = *((unsigned __int8 *)a1 + 92);
  v37 = *((_DWORD *)a1 + 22);
  v38 = v14;
  LODWORD(v14) = *((unsigned __int8 *)a1 + 100);
  v39 = *((_DWORD *)a1 + 24);
  v40 = v14;
  v27 = a2;
  sub_1A3AB452C();
  sub_1A3AB44FC();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v15 = sub_1A3AB4424();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v10, 1, v15) == 1)
  {
    sub_1A39B11F4((uint64_t)v10, &qword_1ED1B52F0);
LABEL_6:
    v41 = v12;
    v42 = v11;
    v43 = v13;
    v44 = v28;
    v45 = v29;
    v46 = v30;
    v47 = v31;
    v48 = v32;
    v49 = v33;
    v50 = v34;
    v51 = v35;
    v52 = v36;
    v53 = v37;
    v54 = v38;
    v55 = v39;
    v56 = v40;
    v24 = CoreSynthesizer.Voice.locales.getter();
    MEMORY[0x1E0C80A78](v24);
    *(&v26 - 2) = v27;
    v23 = sub_1A39F553C((uint64_t (*)(char *))sub_1A3A01560, (uint64_t)(&v26 - 4), v24);
    swift_bridgeObjectRelease();
    return v23 & 1;
  }
  v17 = Locale.LanguageCode.childLanguages.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v15);
  if (!*(_QWORD *)(v17 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v41 = v12;
  v42 = v11;
  v43 = v13;
  v44 = v28;
  v45 = v29;
  v46 = v30;
  v47 = v31;
  v48 = v32;
  v49 = v33;
  v50 = v34;
  v51 = v35;
  v52 = v36;
  v53 = v37;
  v54 = v38;
  v55 = v39;
  v56 = v40;
  v18 = CoreSynthesizer.Voice.locales.getter();
  v19 = sub_1A39F47D8(v18);
  swift_bridgeObjectRelease();
  v20 = sub_1A39BED30((uint64_t)v19);
  swift_bridgeObjectRelease();
  v21 = sub_1A39FE0DC(v17, v20);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v21 + 16);
  swift_release();
  v23 = v22 != 0;
  return v23 & 1;
}

char *sub_1A39F47D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  void (*v29)(char *, char *, uint64_t);
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = sub_1A3AB4520();
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1A3AB4424();
  v45 = *(_QWORD *)(v47 - 8);
  v8 = MEMORY[0x1E0C80A78](v47);
  v39 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v38 = (char *)&v36 - v10;
  v11 = sub_1A3AB4538();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 56);
  v41 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v42 = (unint64_t)(v19 + 63) >> 6;
  v46 = a1;
  result = (char *)swift_bridgeObjectRetain();
  v23 = 0;
  v40 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v21)
    {
      v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v42)
      goto LABEL_30;
    v27 = *(_QWORD *)(v41 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v42)
        goto LABEL_30;
      v27 = *(_QWORD *)(v41 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v42)
          goto LABEL_30;
        v27 = *(_QWORD *)(v41 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v42)
            goto LABEL_30;
          v27 = *(_QWORD *)(v41 + 8 * v23);
          if (!v27)
            break;
        }
      }
    }
LABEL_21:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v17, *(_QWORD *)(v46 + 48) + *(_QWORD *)(v12 + 72) * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
      goto LABEL_31;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    sub_1A3AB452C();
    sub_1A3AB44FC();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v4, v44);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v7, 1, v47) == 1)
    {
      result = (char *)sub_1A39B11F4((uint64_t)v7, &qword_1ED1B52F0);
    }
    else
    {
      v29 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v29(v38, v7, v47);
      v37 = (uint64_t (*)(char *, char *, uint64_t))v29;
      v29(v39, v38, v47);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v40 = (char *)sub_1A39FA728(0, *((_QWORD *)v40 + 2) + 1, 1, v40, &qword_1EE6D2BD8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0AE8]);
      v31 = *((_QWORD *)v40 + 2);
      v30 = *((_QWORD *)v40 + 3);
      v32 = v31 + 1;
      if (v31 >= v30 >> 1)
      {
        v36 = v31 + 1;
        v35 = (char *)sub_1A39FA728(v30 > 1, v31 + 1, 1, v40, &qword_1EE6D2BD8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0AE8]);
        v32 = v36;
        v40 = v35;
      }
      v33 = v39;
      v34 = v40;
      *((_QWORD *)v40 + 2) = v32;
      result = (char *)v37(&v34[((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v31], v33, v47);
    }
  }
  v28 = v26 + 4;
  if (v28 >= v42)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v17, 1, 1, v11);
LABEL_31:
    swift_release();
    return v40;
  }
  v27 = *(_QWORD *)(v41 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v42)
      goto LABEL_30;
    v27 = *(_QWORD *)(v41 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1A39F4C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  _QWORD v30[2];

  v30[1] = a2;
  v2 = sub_1A3AB4520();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v30 - v7;
  v9 = sub_1A39A4820(&qword_1ED1B52F0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v30 - v13;
  sub_1A3AB452C();
  sub_1A3AB44FC();
  v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v8, v2);
  v16 = sub_1A3AB4424();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v18(v14, 1, v16) == 1)
  {
    sub_1A39B11F4((uint64_t)v14, &qword_1ED1B52F0);
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v21 = sub_1A3AB43F4();
    v20 = v22;
    v23 = v14;
    v19 = v21;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
  }
  sub_1A3AB452C();
  sub_1A3AB44FC();
  v15(v6, v2);
  if (v18(v12, 1, v16) == 1)
  {
    sub_1A39B11F4((uint64_t)v12, &qword_1ED1B52F0);
    if (!v20)
      goto LABEL_17;
LABEL_14:
    v28 = 0;
LABEL_19:
    swift_bridgeObjectRelease();
    return v28 & 1;
  }
  v24 = sub_1A3AB43F4();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
  if (v20)
  {
    if (v26)
    {
      if (v19 == v24 && v20 == v26)
      {
        swift_bridgeObjectRelease();
        v28 = 1;
      }
      else
      {
        v28 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
      }
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (v26)
  {
    v28 = 0;
    goto LABEL_19;
  }
LABEL_17:
  v28 = 1;
  return v28 & 1;
}

uint64_t sub_1A39F4EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  char v21;
  char v22;
  char v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a2;
  v3 = sub_1A3AB4538();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a1 + 56);
  v24 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  while (v13)
  {
    v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v17 = v16 | (v15 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v9, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * v17, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
      goto LABEL_29;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    v21 = sub_1A39F60A8((uint64_t)v6, v25);
    if (v26)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_release();
      return v23 & 1;
    }
    v22 = v21;
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if ((v22 & 1) != 0)
    {
      swift_release();
      v23 = 1;
      return v23 & 1;
    }
  }
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v15 >= v24)
    goto LABEL_28;
  v19 = *(_QWORD *)(v10 + 8 * v15);
  if (v19)
  {
LABEL_18:
    v13 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
    goto LABEL_19;
  }
  v20 = v15 + 1;
  if (v15 + 1 >= v24)
    goto LABEL_28;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_17;
  v20 = v15 + 2;
  if (v15 + 2 >= v24)
    goto LABEL_28;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_17;
  v20 = v15 + 3;
  if (v15 + 3 >= v24)
    goto LABEL_28;
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
    goto LABEL_17;
  v20 = v15 + 4;
  if (v15 + 4 >= v24)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
LABEL_29:
    swift_release();
    v23 = 0;
    return v23 & 1;
  }
  v19 = *(_QWORD *)(v10 + 8 * v20);
  if (v19)
  {
LABEL_17:
    v15 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v24)
      goto LABEL_28;
    v19 = *(_QWORD *)(v10 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A39F51B8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;

  v42 = a2;
  v3 = sub_1A3AB4538();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v41 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - v7;
  v9 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 56);
  v37 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v38 = (unint64_t)(v13 + 63) >> 6;
  v43 = a1;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  v39 = v11;
  v40 = v8;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_23;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v38)
      goto LABEL_28;
    v22 = *(_QWORD *)(v37 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v38)
        goto LABEL_28;
      v22 = *(_QWORD *)(v37 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v38)
          goto LABEL_28;
        v22 = *(_QWORD *)(v37 + 8 * v17);
        if (!v22)
        {
          v17 = v21 + 3;
          if (v21 + 3 >= v38)
            goto LABEL_28;
          v22 = *(_QWORD *)(v37 + 8 * v17);
          if (!v22)
            break;
        }
      }
    }
LABEL_22:
    v15 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_23:
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    v24(v11, *(_QWORD *)(v43 + 48) + *(_QWORD *)(v4 + 72) * v20, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v11, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3) == 1)
      goto LABEL_29;
    v44 = v17;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v8, v11, v3);
    v25 = sub_1A3AB443C();
    v27 = v26;
    v28 = v41;
    v24(v41, v42, v3);
    v29 = sub_1A3AB443C();
    v30 = v3;
    v32 = v31;
    v33 = v4;
    v34 = *(void (**)(char *, uint64_t))(v4 + 8);
    v35 = v30;
    v34(v28, v30);
    if (v25 == v29 && v27 == v32)
    {
      swift_bridgeObjectRelease_n();
      v34(v40, v35);
LABEL_27:
      swift_release();
      return 1;
    }
    v18 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v40;
    v3 = v35;
    result = ((uint64_t (*)(char *, uint64_t))v34)(v40, v35);
    v4 = v33;
    v11 = v39;
    v17 = v44;
    if ((v18 & 1) != 0)
      goto LABEL_27;
  }
  v23 = v21 + 4;
  if (v23 >= v38)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v11, 1, 1, v3);
LABEL_29:
    swift_release();
    return 0;
  }
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v38)
      goto LABEL_28;
    v22 = *(_QWORD *)(v37 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A39F553C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t (*v29)(char *);
  uint64_t v30;

  v29 = a1;
  v5 = sub_1A3AB4538();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 56);
  v27 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v28 = (unint64_t)(v13 + 63) >> 6;
  v30 = a3;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  while (v15)
  {
    v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v19 = v18 | (v17 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v6 + 72) * v19, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
      goto LABEL_29;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v23 = v29(v8);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_release();
      return v25 & 1;
    }
    v24 = v23;
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((v24 & 1) != 0)
    {
      swift_release();
      v25 = 1;
      return v25 & 1;
    }
  }
  if (__OFADD__(v17++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v17 >= v28)
    goto LABEL_28;
  v21 = *(_QWORD *)(v27 + 8 * v17);
  if (v21)
  {
LABEL_18:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_19;
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v28)
    goto LABEL_28;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 2;
  if (v17 + 2 >= v28)
    goto LABEL_28;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 3;
  if (v17 + 3 >= v28)
    goto LABEL_28;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 4;
  if (v17 + 4 >= v28)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, 1, 1, v5);
LABEL_29:
    swift_release();
    v25 = 0;
    return v25 & 1;
  }
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
  {
LABEL_17:
    v17 = v22;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v28)
      goto LABEL_28;
    v21 = *(_QWORD *)(v27 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A39F582C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int v31;
  char v32;
  int v33;
  id v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(_QWORD *);
  char v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  _QWORD v55[5];
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  int v63;
  char v64;
  int v65;
  char v66;
  uint64_t v67;

  v4 = v3;
  v42 = (uint64_t (*)(_QWORD *))result;
  v5 = 0;
  v8 = *(_QWORD *)(a3 + 64);
  v6 = a3 + 64;
  v7 = v8;
  v9 = 1 << *(_BYTE *)(v6 - 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v7;
  v40 = v6;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v11)
    {
      v52 = (v11 - 1) & v11;
      v53 = v5;
      v13 = __clz(__rbit64(v11)) | (v5 << 6);
      goto LABEL_21;
    }
    v14 = __OFADD__(v5, 1);
    v15 = v5 + 1;
    if (v14)
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v15 >= v41)
      goto LABEL_33;
    v16 = *(_QWORD *)(v40 + 8 * v15);
    if (!v16)
      break;
LABEL_20:
    v52 = (v16 - 1) & v16;
    v53 = v15;
    v13 = __clz(__rbit64(v16)) + (v15 << 6);
LABEL_21:
    v18 = *(_QWORD *)(a3 + 56) + 104 * v13;
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_BYTE *)(v18 + 40);
    v25 = *(_BYTE *)(v18 + 41);
    v26 = *(_QWORD *)(v18 + 48);
    v27 = *(_BYTE *)(v18 + 56);
    v28 = *(_QWORD *)(v18 + 64);
    v29 = *(_QWORD *)(v18 + 72);
    v30 = *(void **)(v18 + 80);
    v31 = *(_DWORD *)(v18 + 88);
    v32 = *(_BYTE *)(v18 + 92);
    v33 = *(_DWORD *)(v18 + 96);
    LOBYTE(v18) = *(_BYTE *)(v18 + 100);
    v50 = v21;
    v51 = v20;
    v55[0] = v20;
    v55[1] = v19;
    v55[2] = v22;
    v55[3] = v21;
    v55[4] = v23;
    v48 = v25;
    v49 = v24;
    v56 = v24;
    v57 = v25;
    v47 = v26;
    v58 = v26;
    v45 = v31;
    v46 = v27;
    v59 = v27;
    v60 = v28;
    v61 = v29;
    v62 = v30;
    v63 = v31;
    v64 = v32;
    v65 = v33;
    v44 = v18;
    v66 = v18;
    v54 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = v30;
    v35 = v42(v55);
    if (v4)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12;
    }
    if ((v35 & 1) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v67 = v12;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1A39F8368(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v67;
      }
      v37 = *(_QWORD *)(v12 + 16);
      v36 = *(_QWORD *)(v12 + 24);
      v38 = v37 + 1;
      if (v37 >= v36 >> 1)
      {
        result = (uint64_t)sub_1A39F8368((char *)(v36 > 1), v37 + 1, 1);
        v38 = v37 + 1;
        v12 = v67;
      }
      *(_QWORD *)(v12 + 16) = v38;
      v39 = v12 + 104 * v37;
      *(_QWORD *)(v39 + 32) = v51;
      *(_QWORD *)(v39 + 40) = v54;
      *(_QWORD *)(v39 + 48) = v22;
      *(_QWORD *)(v39 + 56) = v50;
      *(_QWORD *)(v39 + 64) = v23;
      *(_BYTE *)(v39 + 72) = v49;
      *(_BYTE *)(v39 + 73) = v48;
      *(_QWORD *)(v39 + 80) = v47;
      *(_BYTE *)(v39 + 88) = v46;
      *(_QWORD *)(v39 + 96) = v28;
      *(_QWORD *)(v39 + 104) = v29;
      *(_QWORD *)(v39 + 112) = v34;
      *(_DWORD *)(v39 + 120) = v45;
      *(_BYTE *)(v39 + 124) = v32;
      *(_DWORD *)(v39 + 128) = v33;
      *(_BYTE *)(v39 + 132) = v44;
      v4 = 0;
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    v11 = v52;
    v5 = v53;
  }
  v17 = v15 + 1;
  if (v15 + 1 >= v41)
    goto LABEL_33;
  v16 = *(_QWORD *)(v40 + 8 * v17);
  if (v16)
    goto LABEL_19;
  v17 = v15 + 2;
  if (v15 + 2 >= v41)
    goto LABEL_33;
  v16 = *(_QWORD *)(v40 + 8 * v17);
  if (v16)
    goto LABEL_19;
  v17 = v15 + 3;
  if (v15 + 3 >= v41)
    goto LABEL_33;
  v16 = *(_QWORD *)(v40 + 8 * v17);
  if (v16)
    goto LABEL_19;
  v17 = v15 + 4;
  if (v15 + 4 >= v41)
  {
LABEL_33:
    swift_release();
    return v12;
  }
  v16 = *(_QWORD *)(v40 + 8 * v17);
  if (v16)
  {
LABEL_19:
    v15 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v41)
      goto LABEL_33;
    v16 = *(_QWORD *)(v40 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1A39F5BEC(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  int v33;
  char v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  char v62;
  int v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  char v76;
  int v77;
  char v78;
  uint64_t v79;

  v6 = *(_QWORD *)a1;
  v42 = *(_OWORD *)(a1 + 8);
  v47 = *(_QWORD *)(a1 + 32);
  v48 = *(_QWORD *)(a1 + 24);
  v44 = *(_BYTE *)(a1 + 40);
  v39 = *(_BYTE *)(a1 + 41);
  v79 = *(_QWORD *)(a1 + 48);
  v38 = *(_BYTE *)(a1 + 56);
  v36 = *(_QWORD *)(a1 + 80);
  v34 = *(_BYTE *)(a1 + 92);
  v35 = *(_DWORD *)(a1 + 88);
  v32 = *(_BYTE *)(a1 + 100);
  v33 = *(_DWORD *)(a1 + 96);
  v40 = *a2;
  v41 = *(_OWORD *)(a2 + 1);
  v45 = a2[4];
  v46 = a2[3];
  v43 = *((_BYTE *)a2 + 40);
  v49 = a2[6];
  v30 = *((_BYTE *)a2 + 56);
  v31 = *((_BYTE *)a2 + 41);
  v50 = *((_OWORD *)a2 + 4);
  v29 = a2[10];
  v27 = *((_BYTE *)a2 + 92);
  v28 = *((_DWORD *)a2 + 22);
  v37 = *(_OWORD *)(a1 + 64);
  v25 = *((_BYTE *)a2 + 100);
  v26 = *((_DWORD *)a2 + 24);
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1A39F4EF4(v7, a3);
  swift_bridgeObjectRelease();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1A39F4EF4(v9, a3);
  swift_bridgeObjectRelease();
  if (((v8 ^ v10) & 1) != 0)
    return v8 & 1;
  v11 = swift_bridgeObjectRetain();
  v8 = sub_1A39F51B8(v11, a3);
  swift_bridgeObjectRelease();
  v12 = swift_bridgeObjectRetain();
  v13 = sub_1A39F51B8(v12, a3);
  swift_bridgeObjectRelease();
  if (((v8 ^ v13) & 1) != 0)
    return v8 & 1;
  v65 = a4;
  v14 = sub_1A39F637C();
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v65 = v6;
    *(_QWORD *)&v66 = v42;
    v51 = v40;
    *(_QWORD *)&v52 = v41;
    sub_1A39A9EC0();
    v23 = sub_1A3AB5180() == -1;
    goto LABEL_23;
  }
  v16 = (_BYTE *)(v14 + 48);
  while (1)
  {
    v18 = *((_QWORD *)v16 - 2);
    if (!*v16)
      break;
    v19 = *((_QWORD *)v16 - 1);
    if (*v16 == 1)
    {
      v65 = v6;
      v66 = v42;
      v67 = v48;
      v68 = v47;
      v69 = v44;
      v70 = v39;
      v71 = v79;
      v72 = v38;
      v73 = v37;
      v74 = v36;
      v75 = v35;
      v76 = v34;
      v77 = v33;
      v78 = v32;
      v51 = v40;
      v52 = v41;
      v53 = v46;
      v54 = v45;
      v55 = v43;
      v56 = v31;
      v57 = v49;
      v58 = v30;
      v59 = v50;
      v60 = v29;
      v61 = v28;
      v62 = v27;
      v63 = v26;
      v64 = v25;
      swift_retain();
      v20 = ((uint64_t (*)(uint64_t *, uint64_t *))v18)(&v65, &v51);
      sub_1A39FAC60(v18, v19, 1);
      if (v20)
        goto LABEL_22;
    }
    else if (v18 | v19)
    {
      v65 = v48;
      *(_QWORD *)&v66 = v47;
      v51 = v46;
      *(_QWORD *)&v52 = v45;
      sub_1A39A9EC0();
      v21 = sub_1A3AB5180();
      if (v21)
      {
        v20 = v21;
        goto LABEL_22;
      }
    }
    else
    {
      sub_1A39FAC78();
      sub_1A3AB4B74();
      sub_1A3AB4B74();
      if (v65 != v51)
      {
        LOBYTE(v65) = v44;
        v22 = CoreSynthesizer.Voice.Quality.rawValue.getter();
        LOBYTE(v65) = v43;
        if (CoreSynthesizer.Voice.Quality.rawValue.getter() < v22)
          v20 = -1;
        else
          v20 = 1;
        goto LABEL_22;
      }
    }
LABEL_6:
    v16 += 24;
    if (!--v15)
      goto LABEL_18;
  }
  v65 = *((_QWORD *)v16 - 2);
  v51 = v79;
  sub_1A39AE770();
  v17 = sub_1A3AB51C8();
  v65 = v18;
  v51 = v49;
  if (((v17 ^ sub_1A3AB51C8()) & 1) == 0)
    goto LABEL_6;
  if ((v17 & 1) != 0)
    v20 = -1;
  else
    v20 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  v23 = v20 == -1;
LABEL_23:
  LOBYTE(v8) = v23;
  return v8 & 1;
}

uint64_t sub_1A39F60A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = sub_1A3AB4538();
  v36 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A3AB4520();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v31 - v10;
  v12 = sub_1A39A4820(&qword_1ED1B52F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v31 - v16;
  sub_1A3AB452C();
  sub_1A3AB44FC();
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v35 = v5;
  v18(v11, v5);
  v19 = sub_1A3AB4424();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v17, 1, v19) == 1)
  {
    sub_1A39B11F4((uint64_t)v17, &qword_1ED1B52F0);
    v32 = 0;
    v33 = 0;
  }
  else
  {
    v32 = sub_1A3AB43F4();
    v33 = v22;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
  }
  v23 = v34;
  v24 = a2;
  v25 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v4, v24, v34);
  sub_1A3AB452C();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v23);
  sub_1A3AB44FC();
  v18(v9, v35);
  if (v21(v15, 1, v19) == 1)
  {
    sub_1A39B11F4((uint64_t)v15, &qword_1ED1B52F0);
    if (!v33)
      goto LABEL_15;
LABEL_12:
    v29 = 0;
LABEL_17:
    swift_bridgeObjectRelease();
    return v29 & 1;
  }
  v26 = sub_1A3AB43F4();
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
  if (v33)
  {
    if (v28)
    {
      if (v32 == v26 && v33 == v28)
      {
        swift_bridgeObjectRelease();
        v29 = 1;
      }
      else
      {
        v29 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
      }
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    v29 = 0;
    goto LABEL_17;
  }
LABEL_15:
  v29 = 1;
  return v29 & 1;
}

uint64_t sub_1A39F637C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *v0;
  if ((unint64_t)*v0 < 2)
  {
    sub_1A39A4820((uint64_t *)&unk_1EE6D09E0);
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1A3AC0230;
    *(_QWORD *)(v1 + 32) = *(_QWORD *)sub_1A3A39228();
    *(_QWORD *)(v1 + 40) = 0;
    *(_BYTE *)(v1 + 48) = 0;
    v2 = sub_1A3A39240();
LABEL_6:
    *(_QWORD *)(v1 + 56) = *v2;
    *(_QWORD *)(v1 + 64) = 0;
    *(_BYTE *)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0;
    *(_QWORD *)(v1 + 88) = 0;
    *(_BYTE *)(v1 + 96) = 2;
    *(_QWORD *)(v1 + 104) = *(_QWORD *)sub_1A3A391E0();
    *(_QWORD *)(v1 + 112) = 0;
    *(_BYTE *)(v1 + 120) = 0;
    *(_OWORD *)(v1 + 128) = xmmword_1A3AC1BC0;
    *(_BYTE *)(v1 + 144) = 2;
    return v1;
  }
  if (*v0 == 2)
  {
    sub_1A39A4820((uint64_t *)&unk_1EE6D09E0);
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1A3AC0230;
    *(_QWORD *)(v1 + 32) = *(_QWORD *)sub_1A3A391F8();
    *(_QWORD *)(v1 + 40) = 0;
    *(_BYTE *)(v1 + 48) = 0;
    v2 = sub_1A3A39228();
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A39F6468(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v3[11] = *v2;
  sub_1A39A4820(&qword_1ED1B52F0);
  v3[12] = swift_task_alloc();
  v4 = sub_1A3AB4520();
  v3[13] = v4;
  v3[14] = *(_QWORD *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v5 = sub_1A3AB4424();
  v3[16] = v5;
  v3[17] = *(_QWORD *)(v5 - 8);
  v3[18] = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B5320);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v6 = sub_1A3AB4538();
  v3[23] = v6;
  v3[24] = *(_QWORD *)(v6 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  type metadata accessor for VoiceResolver();
  sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  v3[27] = sub_1A3AB4C70();
  v3[28] = v7;
  return swift_task_switch();
}

uint64_t sub_1A39F65E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  int *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);

  if ((Locale.LanguageCode.isMacroLanguage.getter() & 1) == 0)
    goto LABEL_10;
  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD **)(v0 + 80);
  v3 = v1[6];
  v4 = v1[7];
  sub_1A39A19CC(v1 + 3, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  swift_retain();
  v6 = sub_1A39FF56C(v5, v1);
  swift_bridgeObjectRelease();
  swift_release();
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v2;
  v8 = sub_1A39F7564((uint64_t (*)(char *))sub_1A39FF764, v7, v6);
  swift_task_dealloc();
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 176);
  if (*(_QWORD *)(v8 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v10 + 16))(*(_QWORD *)(v0 + 176), v8 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), *(_QWORD *)(v0 + 184));
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v12(v11, 0, 1, v9);
  }
  else
  {
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v12(*(_QWORD *)(v0 + 176), 1, 1, v9);
  }
  v13 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
    v16 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 64);
    sub_1A39B11F4(*(_QWORD *)(v0 + 176), &qword_1ED1B5320);
    v12(v17, 1, 1, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v19 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 120);
  v31 = *(_QWORD *)(v0 + 136);
  v32 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 112);
  v25 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v21 + 32))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 176), v20);
  Locale.withTTSLanguageDisambiguation(overrides:)(0, v19);
  sub_1A3AB452C();
  v26 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  *(_QWORD *)(v0 + 232) = v26;
  v26(v19, v20);
  sub_1A3AB44FC();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v25, 1, v32) == 1)
  {
    v27 = *(_QWORD *)(v0 + 96);
    v26(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 184));
    sub_1A39B11F4(v27, &qword_1ED1B52F0);
LABEL_10:
    *(_QWORD *)(v0 + 248) = 0;
    v28 = *(int **)(**(_QWORD **)(v0 + 80) + 192);
    v33 = (uint64_t (*)(void))((char *)v28 + *v28);
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v29;
    *v29 = v0;
    v29[1] = sub_1A39F6A5C;
    return v33();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 128));
  v30 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v30;
  *v30 = v0;
  v30[1] = sub_1A39F694C;
  return sub_1A39F6468(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 144));
}

uint64_t sub_1A39F694C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F6998()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F6A5C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A39F6AB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v1 = v0[23];
  v2 = v0[21];
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[24] + 56);
  v0[34] = v3;
  v3(v2, 1, 1, v1);
  v4 = *sub_1A39BA3BC();
  swift_bridgeObjectRetain();
  v5 = sub_1A3AB43F4();
  if (*(_QWORD *)(v4 + 16) && (sub_1A39A2734(v5, v6), (v7 & 1) != 0))
  {
    v8 = v0[23];
    v10 = v0[20];
    v9 = v0[21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A3AB4448();
    v3(v10, 0, 1, v8);
    sub_1A39FEDE4(v10, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v11 = v0[33];
  v12 = v0[31];
  v13 = v0[21];
  v14 = v0[9];
  v15 = Locale.LanguageCode.childLanguages.getter();
  v16 = swift_task_alloc();
  *(_QWORD *)(v16 + 16) = v14;
  *(_QWORD *)(v16 + 24) = v15;
  sub_1A39FEC24((uint64_t)sub_1A39FB704, v16, v11);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v17 = swift_bridgeObjectRetain();
  v18 = (_QWORD *)sub_1A39FA630(v17);
  swift_release();
  v27 = v18;
  sub_1A39FBB3C(&v27, v13);
  if (v12)
    return swift_release();
  v20 = (_QWORD *)v0[10];
  swift_release();
  v21 = v27;
  v0[5] = sub_1A39A4820(&qword_1EE6D1800);
  v0[6] = sub_1A39C3EF8(qword_1EE6D1808, &qword_1EE6D1800, MEMORY[0x1E0DEAF50]);
  v0[2] = v21;
  v22 = v20 + 3;
  v23 = v20[6];
  v24 = v20[7];
  sub_1A39A19CC(v22, v23);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
  v0[35] = v25;
  v26 = (_QWORD *)swift_task_alloc();
  v0[36] = v26;
  *v26 = v0;
  v26[1] = sub_1A39F6D04;
  return sub_1A39EFBFC(v0[19], (uint64_t)(v0 + 2), (uint64_t)v22, v25);
}

uint64_t sub_1A39F6D04()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1A39A47C4(v1 + 16);
  return swift_task_switch();
}

uint64_t sub_1A39F6D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 64);
    sub_1A39B11F4(v3, &qword_1ED1B5320);
    sub_1A39FEDA0(v4, v5, &qword_1ED1B5320);
  }
  else
  {
    v6 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 272);
    v7 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v8, v3, v1);
    v6(v8, 0, 1, v1);
    sub_1A39B11F4(v7, &qword_1ED1B5320);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A39F6EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t result;
  char v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;

  v62 = a1;
  v55 = sub_1A39A4820(&qword_1ED1B52F8);
  MEMORY[0x1E0C80A78](v55);
  v56 = (uint64_t)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A3AB4538();
  v5 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  v60 = v5;
  MEMORY[0x1E0C80A78](v4);
  v61 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A3AB4424();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v52 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v63 = (char *)&v52 - v11;
  v12 = sub_1A39A4820(&qword_1ED1B52F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v53 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v57 = (uint64_t)&v52 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v58 = (char *)&v52 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v52 - v19;
  v21 = sub_1A3AB4520();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v52 - v26;
  v28 = a2;
  v29 = Locale.LanguageCode.childLanguages.getter();
  sub_1A3AB452C();
  sub_1A3AB44FC();
  v30 = *(void (**)(char *, uint64_t))(v22 + 8);
  v54 = v21;
  v31 = v21;
  v32 = v7;
  v30(v27, v31);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  result = v33(v20, 1, v7);
  if ((_DWORD)result != 1)
  {
    v35 = sub_1A39F73E0((uint64_t)v20, v29);
    swift_bridgeObjectRelease();
    v36 = *(void (**)(char *, uint64_t))(v8 + 8);
    v36(v20, v7);
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v37(v63, v28, v7);
    v38 = v60;
    v39 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v61, v62, v59);
    if ((v35 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v61, v39);
      v36(v63, v32);
LABEL_7:
      v47 = 1;
      return v47 & 1;
    }
    v40 = (uint64_t)v58;
    v37(v58, (uint64_t)v63, v32);
    v41 = v8;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v40, 0, 1, v32);
    v42 = v30;
    v43 = v61;
    sub_1A3AB452C();
    v44 = v57;
    sub_1A3AB44FC();
    v42(v25, v54);
    v45 = v56;
    v46 = v56 + *(int *)(v55 + 48);
    sub_1A39B9F00(v40, v56, &qword_1ED1B52F0);
    sub_1A39B9F00(v44, v46, &qword_1ED1B52F0);
    if (v33((char *)v45, 1, v32) == 1)
    {
      sub_1A39B11F4(v44, &qword_1ED1B52F0);
      sub_1A39B11F4(v40, &qword_1ED1B52F0);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v43, v59);
      v36(v63, v32);
      if (v33((char *)v46, 1, v32) == 1)
      {
        sub_1A39B11F4(v45, &qword_1ED1B52F0);
        goto LABEL_7;
      }
    }
    else
    {
      v48 = v53;
      sub_1A39B9F00(v45, v53, &qword_1ED1B52F0);
      v49 = v33((char *)v46, 1, v32);
      v50 = v60;
      if (v49 != 1)
      {
        v51 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v52, v46, v32);
        sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
        v47 = sub_1A3AB494C();
        v36(v51, v32);
        sub_1A39B11F4(v57, &qword_1ED1B52F0);
        sub_1A39B11F4((uint64_t)v58, &qword_1ED1B52F0);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v59);
        v36(v63, v32);
        v36((char *)v48, v32);
        sub_1A39B11F4(v45, &qword_1ED1B52F0);
        return v47 & 1;
      }
      sub_1A39B11F4(v57, &qword_1ED1B52F0);
      sub_1A39B11F4((uint64_t)v58, &qword_1ED1B52F0);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v59);
      v36(v63, v32);
      v36((char *)v48, v32);
    }
    sub_1A39B11F4(v45, &qword_1ED1B52F8);
    v47 = 0;
    return v47 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A39F73E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_1A3AB4424();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]),
        v6 = sub_1A3AB48C8(),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v12 = sub_1A3AB494C();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_1A39F7564(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *);
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v4 = v3;
  v33 = a1;
  v34 = a2;
  v6 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A3AB4538();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v31 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v11);
  v35 = (char *)&v26 - v14;
  v36 = MEMORY[0x1E0DEE9D8];
  v32 = *(_QWORD *)(a3 + 16);
  if (v32)
  {
    v15 = 0;
    v30 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_17;
      v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v19 = v35;
      v18(v35, v8, v9);
      v20 = v33(v19);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if ((v20 & 1) != 0)
      {
        v18(v31, v35, v9);
        v21 = v36;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1A39BE06C(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v36;
        }
        v24 = *(_QWORD *)(v21 + 16);
        v23 = *(_QWORD *)(v21 + 24);
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          v27 = v24 + 1;
          sub_1A39BE06C(v23 > 1, v24 + 1, 1);
          v25 = v27;
          v21 = v36;
        }
        *(_QWORD *)(v21 + 16) = v25;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v18)(v21 + v16 + v24 * v17, v31, v9);
        v36 = v21;
        v4 = v28;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v35, v9);
      }
      a3 = v30;
      if (v32 == ++v15)
      {
        v29(v8, 1, 1, v9);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_17:
    swift_bridgeObjectRelease();
    sub_1A39B11F4((uint64_t)v8, &qword_1ED1B5320);
    return v36;
  }
  return result;
}

uint64_t sub_1A39F7830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t result;
  char v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v46 = a3;
  v50 = a2;
  v4 = sub_1A3AB4538();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x1E0C80A78](v4);
  v52 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB4424();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v44 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1ED1B52F8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A39A4820(&qword_1ED1B52F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v49 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v45 = (uint64_t)&v43 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v43 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v43 - v20;
  v22 = sub_1A3AB4520();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v48 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v43 - v26;
  v51 = a1;
  sub_1A3AB452C();
  sub_1A3AB44FC();
  v28 = *(void (**)(char *, uint64_t))(v23 + 8);
  v29 = v22;
  v47 = v28;
  v28(v27, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v19, v50, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  v30 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_1A39B9F00((uint64_t)v21, (uint64_t)v11, &qword_1ED1B52F0);
  sub_1A39B9F00((uint64_t)v19, v30, &qword_1ED1B52F0);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v31((uint64_t)v11, 1, v6) == 1)
  {
    sub_1A39B11F4((uint64_t)v19, &qword_1ED1B52F0);
    sub_1A39B11F4((uint64_t)v21, &qword_1ED1B52F0);
    if (v31(v30, 1, v6) == 1)
    {
      sub_1A39B11F4((uint64_t)v11, &qword_1ED1B52F0);
      v33 = v52;
      v32 = v53;
      v34 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v51, v54);
LABEL_10:
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
      v39 = 1;
      return v39 & 1;
    }
    goto LABEL_6;
  }
  v35 = v45;
  sub_1A39B9F00((uint64_t)v11, v45, &qword_1ED1B52F0);
  if (v31(v30, 1, v6) == 1)
  {
    sub_1A39B11F4((uint64_t)v19, &qword_1ED1B52F0);
    sub_1A39B11F4((uint64_t)v21, &qword_1ED1B52F0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v35, v6);
LABEL_6:
    sub_1A39B11F4((uint64_t)v11, &qword_1ED1B52F8);
    v33 = v52;
    v32 = v53;
    v34 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v51, v54);
    goto LABEL_7;
  }
  v40 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v44, v30, v6);
  sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
  LODWORD(v50) = sub_1A3AB494C();
  v41 = v29;
  v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v40, v6);
  sub_1A39B11F4((uint64_t)v19, &qword_1ED1B52F0);
  sub_1A39B11F4((uint64_t)v21, &qword_1ED1B52F0);
  v42((char *)v35, v6);
  v29 = v41;
  sub_1A39B11F4((uint64_t)v11, &qword_1ED1B52F0);
  v33 = v52;
  v32 = v53;
  v34 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v51, v54);
  if ((v50 & 1) != 0)
    goto LABEL_10;
LABEL_7:
  v36 = v48;
  sub_1A3AB452C();
  v37 = (uint64_t)v49;
  sub_1A3AB44FC();
  v47(v36, v29);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v31)(v37, 1, v6);
  if ((_DWORD)result != 1)
  {
    v39 = sub_1A39F73E0(v37, v46);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v37, v6);
    return v39 & 1;
  }
  __break(1u);
  return result;
}

BOOL sub_1A39F7D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  _QWORD v30[6];

  v5 = sub_1A3AB4538();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A3AB43D0();
  v11 = v10;
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v12(a3, 1, v5))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v30[1] = a2;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
    v20 = sub_1A3AB43D0();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v9 == v20 && v11 == v22)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v24 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      return 1;
  }
  v13 = sub_1A3AB43D0();
  v15 = v14;
  if (v12(a3, 1, v5))
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v30[4] = sub_1A3AB43D0();
    v30[5] = v16;
    v30[2] = sub_1A3AB43D0();
    v30[3] = v17;
    sub_1A39A9EC0();
    v18 = sub_1A3AB515C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v18 == -1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
  v25 = sub_1A3AB43D0();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v13 == v25 && v15 == v27)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  else
  {
    v29 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v29 & 1) == 0)
      goto LABEL_5;
  }
  return result;
}

BOOL sub_1A39F7F6C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;

  v0 = sub_1A39A4820(&qword_1ED1B52E8);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A3AB43E8();
  v3 = sub_1A3AB43DC();
  v4 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3) == 1;
  sub_1A39B11F4((uint64_t)v2, &qword_1ED1B52E8);
  return v4;
}

uint64_t sub_1A39F8018(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1A39F834C(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A39F834C(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1A39F834C((char *)(v5 > 1), v6 + 1, 1);
        v2 = v9;
      }
      v4 += 16;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_1A39AE7B4(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1A39F813C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for VoiceResolver();
  v1 = sub_1A39B9F44(&qword_1EE6D2548, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  return TTSActor.unownedExecutor.getter(v0, v1);
}

unint64_t sub_1A39F8184(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  sub_1A3AB4538();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
  sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
  v3 = sub_1A3AB48C8();
  return sub_1A39F821C(a1, v3, v2, (unint64_t *)&unk_1ED1B5310, MEMORY[0x1E0CB0E60]);
}

unint64_t sub_1A39F821C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  uint64_t v22;

  v21 = a4;
  v22 = a5;
  v6 = v5;
  v19 = a1;
  v20 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      sub_1A39B9F44(v21, v20, v22);
      v17 = sub_1A3AB494C();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

char *sub_1A39F834C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A39F84F8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1A39F8368(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1A39F85FC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_1A39F8384(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1ED1B5458);
  v10 = *(_QWORD *)(sub_1A3AB4538() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(sub_1A3AB4538() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_1A39F84F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2500);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A39F85FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1ED1B5460);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1A39F8714(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;

  v3 = v2;
  v5 = sub_1A3AB4538();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_1A39A4820(&qword_1EE6D2358);
  v62 = a2;
  v80 = sub_1A3AB5498();
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v10 = 1 << *(_BYTE *)(v9 + 32);
  v11 = *(_QWORD *)(v9 + 64);
  v59 = (_QWORD *)(v9 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v57 = v2;
  v58 = (unint64_t)(v10 + 63) >> 6;
  v14 = v80 + 64;
  result = swift_retain();
  v16 = 0;
  v60 = v9;
  v61 = v6;
  v78 = v8;
  v79 = v5;
  while (1)
  {
    if (v13)
    {
      v22 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_22;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v58)
      break;
    v25 = v59;
    v26 = v59[v24];
    ++v16;
    if (!v26)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v58)
        goto LABEL_34;
      v26 = v59[v16];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v58)
        {
LABEL_34:
          swift_release();
          v3 = v57;
          if ((v62 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v59[v27];
        if (!v26)
        {
          while (1)
          {
            v16 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v16 >= v58)
              goto LABEL_34;
            v26 = v59[v16];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v16 = v27;
      }
    }
LABEL_21:
    v13 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v6 + 72);
    v29 = *(_QWORD *)(v9 + 48) + v28 * v23;
    v30 = 104 * v23;
    v77 = v16;
    if ((v62 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v78, v29, v79);
      v31 = *(_QWORD *)(v9 + 56) + v30;
      v32 = *(_QWORD *)v31;
      v75 = *(_QWORD *)(v31 + 8);
      v76 = v32;
      v33 = *(_QWORD *)(v31 + 16);
      v73 = *(_QWORD *)(v31 + 24);
      v74 = v33;
      v72 = *(_QWORD *)(v31 + 32);
      LODWORD(v33) = *(unsigned __int8 *)(v31 + 40);
      v69 = *(unsigned __int8 *)(v31 + 41);
      v70 = v33;
      v34 = *(_QWORD *)(v31 + 48);
      v71 = *(unsigned __int8 *)(v31 + 56);
      v35 = *(_QWORD *)(v31 + 72);
      v63 = *(_QWORD *)(v31 + 64);
      v64 = v34;
      v36 = *(id *)(v31 + 80);
      LODWORD(v34) = *(_DWORD *)(v31 + 88);
      v67 = *(unsigned __int8 *)(v31 + 92);
      v68 = v34;
      v37 = *(_DWORD *)(v31 + 96);
      v65 = *(unsigned __int8 *)(v31 + 100);
      v66 = v37;
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v78, v29, v79);
      v38 = *(_QWORD *)(v9 + 56) + v30;
      v39 = *(_QWORD *)(v38 + 8);
      v76 = *(_QWORD *)v38;
      v40 = *(_QWORD *)(v38 + 16);
      v73 = *(_QWORD *)(v38 + 24);
      v41 = *(_QWORD *)(v38 + 32);
      v42 = *(unsigned __int8 *)(v38 + 40);
      v69 = *(unsigned __int8 *)(v38 + 41);
      v70 = v42;
      v64 = *(_QWORD *)(v38 + 48);
      v71 = *(unsigned __int8 *)(v38 + 56);
      v43 = *(_QWORD *)(v38 + 64);
      v44 = *(_QWORD *)(v38 + 72);
      v45 = *(void **)(v38 + 80);
      v46 = *(_DWORD *)(v38 + 88);
      v67 = *(unsigned __int8 *)(v38 + 92);
      v68 = v46;
      v47 = *(_DWORD *)(v38 + 96);
      v65 = *(unsigned __int8 *)(v38 + 100);
      v66 = v47;
      v75 = v39;
      swift_bridgeObjectRetain();
      v74 = v40;
      swift_bridgeObjectRetain();
      v72 = v41;
      swift_bridgeObjectRetain();
      v63 = v43;
      swift_bridgeObjectRetain();
      v35 = v44;
      swift_bridgeObjectRetain();
      v36 = v45;
    }
    v48 = v80;
    sub_1A39B9F44((unint64_t *)&qword_1ED1B5300, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
    result = sub_1A3AB48C8();
    v49 = -1 << *(_BYTE *)(v48 + 32);
    v50 = result & ~v49;
    v51 = v50 >> 6;
    if (((-1 << v50) & ~*(_QWORD *)(v14 + 8 * (v50 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v50) & ~*(_QWORD *)(v14 + 8 * (v50 >> 6)))) | v50 & 0x7FFFFFFFFFFFFFC0;
      v6 = v61;
    }
    else
    {
      v52 = 0;
      v53 = (unint64_t)(63 - v49) >> 6;
      v6 = v61;
      do
      {
        if (++v51 == v53 && (v52 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v54 = v51 == v53;
        if (v51 == v53)
          v51 = 0;
        v52 |= v54;
        v55 = *(_QWORD *)(v14 + 8 * v51);
      }
      while (v55 == -1);
      v17 = __clz(__rbit64(~v55)) + (v51 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = v80;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v80 + 48) + v28 * v17, v78, v79);
    v19 = *(_QWORD *)(v18 + 56) + 104 * v17;
    v20 = v75;
    *(_QWORD *)v19 = v76;
    *(_QWORD *)(v19 + 8) = v20;
    v21 = v73;
    *(_QWORD *)(v19 + 16) = v74;
    *(_QWORD *)(v19 + 24) = v21;
    *(_QWORD *)(v19 + 32) = v72;
    *(_BYTE *)(v19 + 40) = v70;
    *(_BYTE *)(v19 + 41) = v69;
    *(_QWORD *)(v19 + 48) = v64;
    *(_BYTE *)(v19 + 56) = v71;
    *(_QWORD *)(v19 + 64) = v63;
    *(_QWORD *)(v19 + 72) = v35;
    *(_QWORD *)(v19 + 80) = v36;
    *(_DWORD *)(v19 + 88) = v68;
    *(_BYTE *)(v19 + 92) = v67;
    *(_DWORD *)(v19 + 96) = v66;
    *(_BYTE *)(v19 + 100) = v65;
    ++*(_QWORD *)(v18 + 16);
    v9 = v60;
    v16 = v77;
  }
  swift_release();
  v3 = v57;
  v25 = v59;
  if ((v62 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v56 = 1 << *(_BYTE *)(v9 + 32);
  if (v56 >= 64)
    bzero(v25, ((unint64_t)(v56 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v56;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v80;
  return result;
}

uint64_t sub_1A39F8C28(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(isStackAllocationSafe + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_1A39F8D98((uint64_t)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v3)
      swift_willThrow();
    else
      return v9;
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    a3 = sub_1A39F8D98((uint64_t)v10, v7, v5);
    MEMORY[0x1A859781C](v10, -1, -1);
  }
  return a3;
}

uint64_t sub_1A39F8D98(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  id v16;
  char v17;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v25;
  int64_t v26;

  v20 = 0;
  v19 = (unint64_t *)result;
  v3 = 0;
  v6 = *(_QWORD *)(a3 + 64);
  v4 = a3 + 64;
  v5 = v6;
  v7 = 1 << *(_BYTE *)(v4 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v5;
  v21 = v4;
  v22 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v25 = (v9 - 1) & v9;
    v26 = v3;
    v10 = __clz(__rbit64(v9)) | (v3 << 6);
LABEL_18:
    v23 = v10;
    v15 = *(void **)(*(_QWORD *)(a3 + 56) + 104 * v10 + 80);
    sub_1A39AE770();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v15;
    if ((sub_1A3AB51C8() & 1) != 0)
    {
      sub_1A3A01674();
      sub_1A3AB4B74();
      sub_1A3A016B8();
      sub_1A3AB57A4();
      sub_1A3AB51E0();
      sub_1A3AB521C();
      sub_1A39DB56C();
      v17 = sub_1A3AB494C();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v9 = v25;
      v3 = v26;
      if ((v17 & 1) != 0)
      {
        *(unint64_t *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
        v11 = __OFADD__(v20++, 1);
        if (v11)
          goto LABEL_30;
      }
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v9 = v25;
      v3 = v26;
    }
  }
  v11 = __OFADD__(v3, 1);
  v12 = v3 + 1;
  if (v11)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v12 >= v22)
    return sub_1A39F90F0(v19, a2, v20, a3);
  v13 = *(_QWORD *)(v21 + 8 * v12);
  if (v13)
  {
LABEL_17:
    v25 = (v13 - 1) & v13;
    v26 = v12;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    goto LABEL_18;
  }
  v14 = v12 + 1;
  if (v12 + 1 >= v22)
    return sub_1A39F90F0(v19, a2, v20, a3);
  v13 = *(_QWORD *)(v21 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v12 + 2;
  if (v12 + 2 >= v22)
    return sub_1A39F90F0(v19, a2, v20, a3);
  v13 = *(_QWORD *)(v21 + 8 * v14);
  if (v13)
    goto LABEL_16;
  v14 = v12 + 3;
  if (v12 + 3 >= v22)
    return sub_1A39F90F0(v19, a2, v20, a3);
  v13 = *(_QWORD *)(v21 + 8 * v14);
  if (v13)
  {
LABEL_16:
    v12 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v12 >= v22)
      return sub_1A39F90F0(v19, a2, v20, a3);
    v13 = *(_QWORD *)(v21 + 8 * v12);
    ++v14;
    if (v13)
      goto LABEL_17;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A39F90F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  char v47;
  int v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1A39A4820((uint64_t *)&unk_1ED1B5440);
  result = sub_1A3AB54B0();
  v7 = result;
  if (a2 < 1)
    v8 = 0;
  else
    v8 = *a1;
  v9 = 0;
  v10 = result + 64;
  v41 = v4;
  while (1)
  {
    v55 = v5;
    if (v8)
    {
      v42 = (v8 - 1) & v8;
      v43 = v9;
      v11 = __clz(__rbit64(v8)) | (v9 << 6);
    }
    else
    {
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_40;
      if (v12 >= a2)
        return v7;
      v13 = a1[v12];
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= a2)
          return v7;
        v13 = a1[v14];
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= a2)
            return v7;
          v13 = a1[v14];
          if (!v13)
          {
            v15 = v9 + 4;
            if (v9 + 4 >= a2)
              return v7;
            v13 = a1[v15];
            if (!v13)
            {
              while (1)
              {
                v14 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_41;
                if (v14 >= a2)
                  return v7;
                v13 = a1[v14];
                ++v15;
                if (v13)
                  goto LABEL_24;
              }
            }
            v14 = v9 + 4;
          }
        }
      }
LABEL_24:
      v42 = (v13 - 1) & v13;
      v43 = v14;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
    }
    v16 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(v4 + 56) + 104 * v11;
    v20 = *(_QWORD *)(v19 + 8);
    v44 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 16);
    v53 = *(_QWORD *)(v19 + 24);
    v22 = *(_QWORD *)(v19 + 32);
    v51 = *(_BYTE *)(v19 + 41);
    v52 = *(_BYTE *)(v19 + 40);
    v50 = *(_QWORD *)(v19 + 48);
    v24 = *(_QWORD *)(v19 + 64);
    v23 = *(_QWORD *)(v19 + 72);
    v25 = *(void **)(v19 + 80);
    v48 = *(_DWORD *)(v19 + 88);
    v49 = *(_BYTE *)(v19 + 56);
    v46 = *(_DWORD *)(v19 + 96);
    v47 = *(_BYTE *)(v19 + 92);
    v45 = *(_BYTE *)(v19 + 100);
    sub_1A3AB56FC();
    swift_bridgeObjectRetain();
    v54 = v20;
    v26 = v21;
    v27 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = v25;
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v29 = -1 << *(_BYTE *)(v7 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v10 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v10 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v37 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v32);
    *v37 = v27;
    v37[1] = v18;
    v38 = *(_QWORD *)(v7 + 56) + 104 * v32;
    *(_QWORD *)v38 = v44;
    *(_QWORD *)(v38 + 8) = v54;
    *(_QWORD *)(v38 + 16) = v26;
    *(_QWORD *)(v38 + 24) = v53;
    *(_QWORD *)(v38 + 32) = v22;
    *(_BYTE *)(v38 + 40) = v52;
    *(_BYTE *)(v38 + 41) = v51;
    *(_QWORD *)(v38 + 48) = v50;
    *(_BYTE *)(v38 + 56) = v49;
    *(_QWORD *)(v38 + 64) = v24;
    *(_QWORD *)(v38 + 72) = v23;
    *(_QWORD *)(v38 + 80) = v28;
    *(_DWORD *)(v38 + 88) = v48;
    *(_BYTE *)(v38 + 92) = v47;
    *(_DWORD *)(v38 + 96) = v46;
    *(_BYTE *)(v38 + 100) = v45;
    ++*(_QWORD *)(v7 + 16);
    v5 = v55 - 1;
    if (__OFSUB__(v55, 1))
      break;
    v4 = v41;
    v8 = v42;
    v9 = v43;
    if (v55 == 1)
      return v7;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A39F94B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  int v20;
  char v21;
  __int128 v22;
  char isUniquelyReferenced_nonNull_native;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  char v42;
  int v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[21];
  _BYTE v53[32];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[21];

  v51 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v52 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)&v52[13] = *(_QWORD *)(a2 + 93);
  v49 = *(_OWORD *)(a2 + 32);
  v50 = *(_OWORD *)(a2 + 48);
  v47 = *(_OWORD *)a2;
  v48 = *(_OWORD *)(a2 + 16);
  v5 = *v2;
  sub_1A39A3434();
  swift_bridgeObjectRetain();
  v6 = sub_1A3AB48C8();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  v45 = a1;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = ~v7;
    sub_1A39A4780();
    while (1)
    {
      v10 = *(_QWORD *)(v5 + 48) + 104 * v8;
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 24);
      v13 = *(_QWORD *)(v10 + 32);
      v14 = *(_WORD *)(v10 + 40);
      v15 = *(_QWORD *)(v10 + 48);
      v16 = *(_BYTE *)(v10 + 56);
      v17 = *(_QWORD *)(v10 + 80);
      v18 = *(_DWORD *)(v10 + 88);
      v19 = *(_BYTE *)(v10 + 92);
      v20 = *(_DWORD *)(v10 + 96);
      v21 = *(_BYTE *)(v10 + 100);
      v22 = *(_OWORD *)(v10 + 64);
      *(_OWORD *)&v53[8] = *(_OWORD *)(v10 + 8);
      *(_QWORD *)v53 = v11;
      *(_QWORD *)&v53[24] = v12;
      *(_QWORD *)&v54 = v13;
      WORD4(v54) = v14;
      *(_QWORD *)&v55 = v15;
      BYTE8(v55) = v16;
      v56 = v22;
      *(_QWORD *)v57 = v17;
      *(_DWORD *)&v57[8] = v18;
      v57[12] = v19;
      *(_DWORD *)&v57[16] = v20;
      v57[20] = v21;
      if ((sub_1A3AB494C() & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    sub_1A39FAA10(a2);
    v29 = *(_QWORD *)(*v2 + 48) + 104 * v8;
    v31 = *(_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 8);
    v33 = *(_QWORD *)(v29 + 16);
    v32 = *(_QWORD *)(v29 + 24);
    v34 = *(_QWORD *)(v29 + 32);
    v35 = *(_WORD *)(v29 + 40);
    v36 = *(_QWORD *)(v29 + 48);
    v37 = *(_BYTE *)(v29 + 56);
    v38 = *(_QWORD *)(v29 + 64);
    v39 = *(_QWORD *)(v29 + 72);
    v40 = *(void **)(v29 + 80);
    v41 = *(_DWORD *)(v29 + 88);
    v42 = *(_BYTE *)(v29 + 92);
    v43 = *(_DWORD *)(v29 + 96);
    LOBYTE(v29) = *(_BYTE *)(v29 + 100);
    *(_QWORD *)v45 = v31;
    *(_QWORD *)(v45 + 8) = v30;
    *(_QWORD *)(v45 + 16) = v33;
    *(_QWORD *)(v45 + 24) = v32;
    *(_QWORD *)(v45 + 32) = v34;
    *(_WORD *)(v45 + 40) = v35;
    *(_QWORD *)(v45 + 48) = v36;
    *(_BYTE *)(v45 + 56) = v37;
    *(_QWORD *)(v45 + 64) = v38;
    *(_QWORD *)(v45 + 72) = v39;
    *(_QWORD *)(v45 + 80) = v40;
    *(_DWORD *)(v45 + 88) = v41;
    *(_BYTE *)(v45 + 92) = v42;
    *(_DWORD *)(v45 + 96) = v43;
    *(_BYTE *)(v45 + 100) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = v40;
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v55 = v50;
    v56 = v51;
    *(_OWORD *)v57 = *(_OWORD *)v52;
    *(_OWORD *)v53 = v47;
    *(_QWORD *)&v57[13] = *(_QWORD *)&v52[13];
    *(_OWORD *)&v53[16] = v48;
    v54 = v49;
    v46 = *v2;
    *v2 = 0x8000000000000000;
    sub_1A39FA5C4((uint64_t)v53);
    sub_1A39F9B7C((uint64_t)v53, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v46;
    swift_bridgeObjectRelease();
    v24 = v55;
    v25 = *(_OWORD *)v57;
    *(_OWORD *)(a1 + 64) = v56;
    *(_OWORD *)(a1 + 80) = v25;
    v26 = *(_OWORD *)&v53[16];
    v27 = v54;
    *(_OWORD *)a1 = *(_OWORD *)v53;
    *(_OWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 93) = *(_QWORD *)&v57[13];
    result = 1;
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v24;
  }
  return result;
}

uint64_t sub_1A39F9790()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  int v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D34E8);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v35 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v33 = v1;
    v34 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    v36 = v2;
    while (1)
    {
      if (v7)
      {
        v47 = (v7 - 1) & v7;
        v48 = v10;
        v13 = __clz(__rbit64(v7)) | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v34)
          goto LABEL_33;
        v15 = v35[v14];
        v16 = v10 + 1;
        if (!v15)
        {
          v16 = v10 + 2;
          if (v10 + 2 >= v34)
            goto LABEL_33;
          v15 = v35[v16];
          if (!v15)
          {
            v16 = v10 + 3;
            if (v10 + 3 >= v34)
              goto LABEL_33;
            v15 = v35[v16];
            if (!v15)
            {
              v17 = v10 + 4;
              if (v10 + 4 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v2 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v35[v17];
              if (!v15)
              {
                while (1)
                {
                  v16 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v16 >= v34)
                    goto LABEL_33;
                  v15 = v35[v16];
                  ++v17;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v16 = v10 + 4;
            }
          }
        }
LABEL_23:
        v47 = (v15 - 1) & v15;
        v48 = v16;
        v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 104 * v13;
      v20 = *(_QWORD *)v18;
      v19 = *(_QWORD *)(v18 + 8);
      v21 = *(_QWORD *)(v18 + 24);
      v22 = *(_QWORD *)(v18 + 32);
      v23 = *(_BYTE *)(v18 + 40);
      v24 = *(_BYTE *)(v18 + 41);
      v45 = *(_QWORD *)(v18 + 48);
      v46 = *(_QWORD *)(v18 + 16);
      v44 = *(_BYTE *)(v18 + 56);
      v42 = *(_QWORD *)(v18 + 72);
      v43 = *(_QWORD *)(v18 + 64);
      v41 = *(_QWORD *)(v18 + 80);
      v39 = *(_BYTE *)(v18 + 92);
      v40 = *(_DWORD *)(v18 + 88);
      v37 = *(_BYTE *)(v18 + 100);
      v38 = *(_DWORD *)(v18 + 96);
      sub_1A39A3434();
      result = sub_1A3AB48C8();
      v25 = -1 << *(_BYTE *)(v4 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v8 + 8 * v27);
        }
        while (v31 == -1);
        v11 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 104 * v11;
      *(_QWORD *)v12 = v20;
      *(_QWORD *)(v12 + 8) = v19;
      *(_QWORD *)(v12 + 16) = v46;
      *(_QWORD *)(v12 + 24) = v21;
      *(_QWORD *)(v12 + 32) = v22;
      *(_BYTE *)(v12 + 40) = v23;
      *(_BYTE *)(v12 + 41) = v24;
      *(_QWORD *)(v12 + 48) = v45;
      *(_BYTE *)(v12 + 56) = v44;
      *(_QWORD *)(v12 + 64) = v43;
      *(_QWORD *)(v12 + 72) = v42;
      *(_QWORD *)(v12 + 80) = v41;
      *(_DWORD *)(v12 + 88) = v40;
      *(_BYTE *)(v12 + 92) = v39;
      *(_DWORD *)(v12 + 96) = v38;
      *(_BYTE *)(v12 + 100) = v37;
      ++*(_QWORD *)(v4 + 16);
      v2 = v36;
      v7 = v47;
      v10 = v48;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A39F9B7C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1A39F9790();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1A39F9D98();
      goto LABEL_12;
    }
    sub_1A39F9FF8();
  }
  v8 = *v3;
  sub_1A39A3434();
  result = sub_1A3AB48C8();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = ~v9;
    sub_1A39A4780();
    do
    {
      result = sub_1A3AB494C();
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v10;
    }
    while (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v11 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v12 = *(_QWORD *)(v11 + 48) + 104 * a2;
  v13 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v5;
  *(_OWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 93) = *(_QWORD *)(v5 + 93);
  v14 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(v12 + 64) = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(v12 + 80) = v14;
  v15 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v12 + 48) = v15;
  v16 = *(_QWORD *)(v11 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (!v17)
  {
    *(_QWORD *)(v11 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1A3AB566C();
  __break(1u);
  return result;
}

id sub_1A39F9D98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  void *__src;

  sub_1A39A4820(&qword_1EE6D34E8);
  v34 = v0;
  v1 = *v0;
  v2 = sub_1A3AB5270();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v34 = v3;
    return result;
  }
  result = (id)(v2 + 56);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 56);
  if (v3 != v1 || (unint64_t)result >= v1 + 56 + 8 * v5)
    result = memmove(result, __src, 8 * v5);
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    v31 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v31 >= v11)
      goto LABEL_28;
    v32 = *((_QWORD *)__src + v31);
    ++v7;
    if (!v32)
    {
      v7 = v31 + 1;
      if (v31 + 1 >= v11)
        goto LABEL_28;
      v32 = *((_QWORD *)__src + v7);
      if (!v32)
      {
        v7 = v31 + 2;
        if (v31 + 2 >= v11)
          goto LABEL_28;
        v32 = *((_QWORD *)__src + v7);
        if (!v32)
          break;
      }
    }
LABEL_27:
    v10 = (v32 - 1) & v32;
    v13 = __clz(__rbit64(v32)) + (v7 << 6);
LABEL_12:
    v14 = 104 * v13;
    v15 = *(_QWORD *)(v1 + 48) + v14;
    v17 = *(_QWORD *)v15;
    v16 = *(_QWORD *)(v15 + 8);
    v19 = *(_QWORD *)(v15 + 16);
    v18 = *(_QWORD *)(v15 + 24);
    v20 = *(_QWORD *)(v15 + 32);
    v21 = *(_WORD *)(v15 + 40);
    v22 = *(_QWORD *)(v15 + 48);
    v23 = *(_BYTE *)(v15 + 56);
    v24 = *(_QWORD *)(v15 + 64);
    v25 = *(_QWORD *)(v15 + 72);
    v26 = *(void **)(v15 + 80);
    v27 = *(_DWORD *)(v15 + 88);
    v28 = *(_BYTE *)(v15 + 92);
    v29 = *(_DWORD *)(v15 + 96);
    LOBYTE(v15) = *(_BYTE *)(v15 + 100);
    v30 = *(_QWORD *)(v3 + 48) + v14;
    *(_QWORD *)v30 = v17;
    *(_QWORD *)(v30 + 8) = v16;
    *(_QWORD *)(v30 + 16) = v19;
    *(_QWORD *)(v30 + 24) = v18;
    *(_QWORD *)(v30 + 32) = v20;
    *(_WORD *)(v30 + 40) = v21;
    *(_QWORD *)(v30 + 48) = v22;
    *(_BYTE *)(v30 + 56) = v23;
    *(_QWORD *)(v30 + 64) = v24;
    *(_QWORD *)(v30 + 72) = v25;
    *(_QWORD *)(v30 + 80) = v26;
    *(_DWORD *)(v30 + 88) = v27;
    *(_BYTE *)(v30 + 92) = v28;
    *(_DWORD *)(v30 + 96) = v29;
    *(_BYTE *)(v30 + 100) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = v26;
  }
  v33 = v31 + 3;
  if (v33 >= v11)
    goto LABEL_28;
  v32 = *((_QWORD *)__src + v33);
  if (v32)
  {
    v7 = v33;
    goto LABEL_27;
  }
  while (1)
  {
    v7 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v7 >= v11)
      goto LABEL_28;
    v32 = *((_QWORD *)__src + v7);
    ++v33;
    if (v32)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A39F9FF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  int v38;
  char v39;
  int v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D34E8);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v32 = v0;
  v33 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v34 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  v35 = v2;
  while (1)
  {
    if (v7)
    {
      v47 = (v7 - 1) & v7;
      v48 = v10;
      v13 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v34)
      goto LABEL_33;
    v15 = *(_QWORD *)(v33 + 8 * v14);
    v16 = v10 + 1;
    if (!v15)
    {
      v16 = v10 + 2;
      if (v10 + 2 >= v34)
        goto LABEL_33;
      v15 = *(_QWORD *)(v33 + 8 * v16);
      if (!v15)
      {
        v16 = v10 + 3;
        if (v10 + 3 >= v34)
          goto LABEL_33;
        v15 = *(_QWORD *)(v33 + 8 * v16);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v47 = (v15 - 1) & v15;
    v48 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 104 * v13;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 32);
    v22 = *(_QWORD *)(v18 + 64);
    v23 = *(_QWORD *)(v18 + 72);
    v24 = *(void **)(v18 + 80);
    v45 = *(_QWORD *)(v18 + 24);
    v46 = *(_QWORD *)v18;
    v43 = *(_BYTE *)(v18 + 41);
    v44 = *(_BYTE *)(v18 + 40);
    v42 = *(_QWORD *)(v18 + 48);
    v40 = *(_DWORD *)(v18 + 88);
    v41 = *(_BYTE *)(v18 + 56);
    v38 = *(_DWORD *)(v18 + 96);
    v39 = *(_BYTE *)(v18 + 92);
    v37 = *(_BYTE *)(v18 + 100);
    sub_1A39A3434();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = v24;
    result = sub_1A3AB48C8();
    v25 = -1 << *(_BYTE *)(v4 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v8 + 8 * v27);
      }
      while (v31 == -1);
      v11 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 104 * v11;
    *(_QWORD *)v12 = v46;
    *(_QWORD *)(v12 + 8) = v19;
    *(_QWORD *)(v12 + 16) = v20;
    *(_QWORD *)(v12 + 24) = v45;
    *(_QWORD *)(v12 + 32) = v21;
    *(_BYTE *)(v12 + 40) = v44;
    *(_BYTE *)(v12 + 41) = v43;
    *(_QWORD *)(v12 + 48) = v42;
    *(_BYTE *)(v12 + 56) = v41;
    *(_QWORD *)(v12 + 64) = v22;
    *(_QWORD *)(v12 + 72) = v23;
    v2 = v35;
    *(_QWORD *)(v12 + 80) = v36;
    *(_DWORD *)(v12 + 88) = v40;
    *(_BYTE *)(v12 + 92) = v39;
    *(_DWORD *)(v12 + 96) = v38;
    *(_BYTE *)(v12 + 100) = v37;
    ++*(_QWORD *)(v4 + 16);
    v7 = v47;
    v10 = v48;
  }
  v17 = v10 + 4;
  if (v10 + 4 >= v34)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v32;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v33 + 8 * v17);
  if (v15)
  {
    v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v34)
      goto LABEL_33;
    v15 = *(_QWORD *)(v33 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A39FA3DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t sub_1A39FA438()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39FA45C()
{
  return swift_deallocObject();
}

uint64_t sub_1A39FA46C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1A39D5174;
  v8[2] = a1;
  v8[3] = v7;
  v9 = *a2;
  v8[4] = v6;
  v8[5] = v9;
  return swift_task_switch();
}

uint64_t sub_1A39FA4E4()
{
  uint64_t v0;

  sub_1A39A47C4(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1A39FA508(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = v2 + 16;
  v7 = *(_QWORD *)(v2 + 56);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1A39B1604;
  return sub_1A39EF990(a1, a2, v6, v7);
}

unint64_t sub_1A39FA578(unint64_t result)
{
  if (result >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t type metadata accessor for VoiceResolver()
{
  uint64_t result;

  result = qword_1EE6D4ED0;
  if (!qword_1EE6D4ED0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A39FA5C4(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

size_t sub_1A39FA630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1A39A4820(&qword_1ED1B5458);
  v3 = *(_QWORD *)(sub_1A3AB4538() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      v9 = sub_1A39FF16C(&v10, (uint64_t)v6 + v5, v1, a1);
      sub_1A39AE7C4();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

size_t sub_1A39FA728(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_29;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  v18 = *(_QWORD *)(a6(0) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(_QWORD *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

uint64_t sub_1A39FA89C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = sub_1A3AB4538();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1A39F8184(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return sub_1A39FFC64(a1, v20[7] + 104 * v14);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1A39FB7EC();
      goto LABEL_7;
    }
    sub_1A39F8714(v17, a3 & 1);
    v22 = sub_1A39F8184(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return sub_1A39FFC64(a1, v20[7] + 104 * v14);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1A39FB730(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t sub_1A39FAA10(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A39FAA7C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39FAAB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_1A39D5174;
  *(_OWORD *)(v5 + 120) = v6;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 312)
                                                         + *(_QWORD *)(*(_QWORD *)v2 + 312));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 136) = v7;
  *v7 = v5;
  v7[1] = sub_1A39F1FE0;
  return v9(v5 + 16, v3, v4);
}

uint64_t sub_1A39FAB60()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A39FAB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_1A39D5174;
  *(_OWORD *)(v7 + 120) = v8;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 336)
                                                                            + *(_QWORD *)(*(_QWORD *)v2 + 336));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 136) = v9;
  *v9 = v7;
  v9[1] = sub_1A39F24B8;
  return v11(v7 + 16, v3, v4, v5, v6);
}

uint64_t sub_1A39FAC60(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_release();
  return result;
}

unint64_t sub_1A39FAC78()
{
  unint64_t result;

  result = qword_1ED1B5358;
  if (!qword_1ED1B5358)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Quality, &type metadata for CoreSynthesizer.Voice.Quality);
    atomic_store(result, (unint64_t *)&qword_1ED1B5358);
  }
  return result;
}

uint64_t sub_1A39FACBC(uint64_t a1)
{
  uint64_t result;

  result = sub_1A39B9F44(&qword_1EE6D24B8, (uint64_t (*)(uint64_t))type metadata accessor for VoiceResolver, (uint64_t)&protocol conformance descriptor for VoiceResolver);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of VoiceSource.voices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of VoiceSource.preferredLanguages.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VoiceSource.disambiguations.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1A39FAD10()
{
  return type metadata accessor for VoiceResolver();
}

void sub_1A39FAD18()
{
  unint64_t v0;

  sub_1A39FB27C();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for VoiceResolver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VoiceResolver.locales.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of VoiceResolver.systemLocale.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of VoiceResolver.currentSystemLocale()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 184) + *(_QWORD *)(*(_QWORD *)v1 + 184));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A39D5174;
  return v6(a1);
}

uint64_t dispatch thunk of VoiceResolver.currentLocales()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 192) + *(_QWORD *)(*(_QWORD *)v0 + 192));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D42E0;
  return v4();
}

uint64_t dispatch thunk of VoiceResolver.currentLocaleIdentifiers(completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of VoiceResolver.currentLocaleIdentifiers()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 208) + *(_QWORD *)(*(_QWORD *)v0 + 208));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5170;
  return v4();
}

uint64_t dispatch thunk of VoiceResolver.currentSystemLocaleIdentifier()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 216) + *(_QWORD *)(*(_QWORD *)v0 + 216));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39FAF6C;
  return v4();
}

uint64_t sub_1A39FAF6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of VoiceResolver.languageChanged()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of VoiceResolver.__allocating_init(voiceSource:requiredTraits:forbiddenTraits:sortMode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of VoiceResolver.voice(forIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 264)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 264));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1A39D5174;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of VoiceResolver.invalidateResolutionCaches()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of VoiceResolver.voice(forLocale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 304) + *(_QWORD *)(*(_QWORD *)v2 + 304));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D5174;
  return v8(a1, a2);
}

uint64_t dispatch thunk of VoiceResolver.voice(forLocaleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 312)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 312));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1A39D5174;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of VoiceResolver.voice(forLocaleIdentifier:completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of VoiceResolver.voice(forIdentifier:preferringLanguage:completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of VoiceResolver.voice(forIdentifier:preferringLanguage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v5 + 336)
                                                                            + *(_QWORD *)(*(_QWORD *)v5 + 336));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_1A39D5174;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of VoiceResolver.fallback(forVoice:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 344) + *(_QWORD *)(*(_QWORD *)v2 + 344));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1A39D5174;
  return v8(a1, a2);
}

void sub_1A39FB27C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE6D24B0)
  {
    sub_1A39AB624((uint64_t *)&unk_1EE6D2490);
    v0 = sub_1A3AB4D90();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE6D24B0);
  }
}

uint64_t sub_1A39FB2D8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_retain();
  return result;
}

uint64_t destroy for VoiceResolver.VoiceSortKey(uint64_t a1)
{
  return sub_1A39FAC60(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12TextToSpeech13VoiceResolverC12VoiceSortKeyOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A39FB2D8(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VoiceResolver.VoiceSortKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A39FB2D8(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A39FAC60(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for VoiceResolver.VoiceSortKey(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VoiceResolver.VoiceSortKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A39FAC60(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceResolver.VoiceSortKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VoiceResolver.VoiceSortKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A39FB480(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1A39FB498(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VoiceResolver.VoiceSortKey()
{
  return &type metadata for VoiceResolver.VoiceSortKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for VoiceResolver.Mode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_bridgeObjectRetain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for VoiceResolver.Mode(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t *assignWithCopy for VoiceResolver.Mode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_bridgeObjectRetain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for VoiceResolver.Mode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceResolver.Mode(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VoiceResolver.Mode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VoiceResolver.Mode()
{
  return &type metadata for VoiceResolver.Mode;
}

void type metadata accessor for ComparisonResult()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE6D33F8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, &qword_1EE6D33F8);
  }
}

uint64_t sub_1A39FB704(uint64_t a1)
{
  uint64_t v1;

  return sub_1A39F7830(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_1A39FB730(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1A3AB4538();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v11 = a4[7] + 104 * a1;
  v12 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a3;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 93) = *(_QWORD *)(a3 + 93);
  v13 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v11 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v11 + 80) = v13;
  v14 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v11 + 48) = v14;
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

id sub_1A39FB7EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  const void *v40;
  int64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;

  v1 = sub_1A3AB4538();
  v43 = *(_QWORD *)(v1 - 8);
  v44 = v1;
  MEMORY[0x1E0C80A78](v1);
  v42 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A4820(&qword_1EE6D2358);
  v39 = v0;
  v3 = *v0;
  v4 = sub_1A3AB548C();
  v5 = *(_QWORD *)(v3 + 16);
  v46 = v4;
  if (!v5)
  {
    result = (id)swift_release();
    v38 = v46;
    v37 = v39;
LABEL_28:
    *v37 = v38;
    return result;
  }
  v6 = v4;
  result = (id)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v40 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, v40, 8 * v8);
    v6 = v46;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v45 = v3;
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v41 = (unint64_t)(v11 + 63) >> 6;
  v15 = v42;
  v14 = v43;
  while (1)
  {
    if (v13)
    {
      v47 = (v13 - 1) & v13;
      v48 = v10;
      v16 = __clz(__rbit64(v13)) | (v10 << 6);
      v17 = v45;
      goto LABEL_12;
    }
    v33 = v10 + 1;
    v17 = v45;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v33 >= v41)
      goto LABEL_26;
    v34 = *((_QWORD *)v40 + v33);
    v35 = v10 + 1;
    if (!v34)
    {
      v35 = v33 + 1;
      if (v33 + 1 >= v41)
        goto LABEL_26;
      v34 = *((_QWORD *)v40 + v35);
      if (!v34)
        break;
    }
LABEL_25:
    v47 = (v34 - 1) & v34;
    v48 = v35;
    v16 = __clz(__rbit64(v34)) + (v35 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v14 + 72) * v16;
    v19 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v17 + 48) + v18, v44);
    v20 = 104 * v16;
    v21 = *(_QWORD *)(v17 + 56) + 104 * v16;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v58 = *(_QWORD *)(v21 + 24);
    v59 = v22;
    v25 = *(_QWORD *)(v21 + 32);
    v57 = *(unsigned __int16 *)(v21 + 40);
    v56 = *(_QWORD *)(v21 + 48);
    LODWORD(v22) = *(unsigned __int8 *)(v21 + 56);
    v26 = *(_QWORD *)(v21 + 64);
    v27 = *(void **)(v21 + 80);
    v49 = *(_QWORD *)(v21 + 72);
    v50 = v27;
    v54 = *(_DWORD *)(v21 + 88);
    v55 = v22;
    LODWORD(v22) = *(unsigned __int8 *)(v21 + 92);
    v52 = *(_DWORD *)(v21 + 96);
    v53 = v22;
    v51 = *(unsigned __int8 *)(v21 + 100);
    v28 = v46;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v46 + 48) + v18, v15, v19);
    v29 = *(_QWORD *)(v28 + 56) + v20;
    *(_QWORD *)v29 = v59;
    *(_QWORD *)(v29 + 8) = v23;
    v30 = v58;
    *(_QWORD *)(v29 + 16) = v24;
    *(_QWORD *)(v29 + 24) = v30;
    *(_QWORD *)(v29 + 32) = v25;
    *(_WORD *)(v29 + 40) = v57;
    *(_QWORD *)(v29 + 48) = v56;
    *(_BYTE *)(v29 + 56) = v55;
    v32 = v49;
    v31 = v50;
    *(_QWORD *)(v29 + 64) = v26;
    *(_QWORD *)(v29 + 72) = v32;
    *(_QWORD *)(v29 + 80) = v31;
    *(_DWORD *)(v29 + 88) = v54;
    *(_BYTE *)(v29 + 92) = v53;
    *(_DWORD *)(v29 + 96) = v52;
    *(_BYTE *)(v29 + 100) = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = v31;
    v13 = v47;
    v10 = v48;
  }
  v36 = v33 + 2;
  if (v36 >= v41)
  {
LABEL_26:
    result = (id)swift_release();
    v37 = v39;
    v38 = v46;
    goto LABEL_28;
  }
  v34 = *((_QWORD *)v40 + v36);
  if (v34)
  {
    v35 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    v35 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v35 >= v41)
      goto LABEL_26;
    v34 = *((_QWORD *)v40 + v35);
    ++v36;
    if (v34)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A39FBB3C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8[2];

  v4 = *(_QWORD *)(sub_1A3AB4538() - 8);
  v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = (_QWORD *)sub_1A39FF544(v5);
  v6 = v5[2];
  v8[0] = (uint64_t)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  result = sub_1A39FBBCC(v8, a2);
  *a1 = v5;
  return result;
}

uint64_t sub_1A39FBBCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t (*v68)(char *, uint64_t);
  char v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  unsigned int (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  char v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  char v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  void (*v179)(uint64_t, uint64_t);
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(char *, uint64_t, uint64_t);
  uint64_t v199;
  char *v200;
  void (*v201)(char *, uint64_t, uint64_t);
  void (*v202)(char *, uint64_t);
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;

  v4 = sub_1A3AB4538();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v187 = (char *)&v180 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v200 = (char *)&v180 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v211 = (char *)&v180 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v204 = (char *)&v180 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v192 = (char *)&v180 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v180 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v180 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v180 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v180 - v25;
  v206 = a1;
  v27 = a1[1];
  result = sub_1A3AB5618();
  if (result >= v27)
  {
    if (v27 < 0)
      goto LABEL_177;
    if (v27)
      return sub_1A39FCB28(0, v27, 1, v206, a2);
    return result;
  }
  if (v27 >= 0)
    v29 = v27;
  else
    v29 = v27 + 1;
  if (v27 < -1)
    goto LABEL_176;
  v199 = a2;
  v189 = v21;
  v183 = result;
  if (v27 <= 1)
  {
    v32 = MEMORY[0x1E0DEE9D8];
    v190 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v180 = MEMORY[0x1E0DEE9D8];
    if (v27 != 1)
    {
      v113 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      goto LABEL_141;
    }
    v181 = v26;
    v182 = v24;
  }
  else
  {
    v181 = v26;
    v182 = v24;
    v30 = v29 >> 1;
    result = sub_1A3AB4BF8();
    *(_QWORD *)(result + 16) = v30;
    v31 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v180 = result;
    v190 = result + v31;
  }
  v33 = 0;
  v32 = MEMORY[0x1E0DEE9D8];
  v196 = v5;
  v205 = v4;
  v185 = v18;
  do
  {
    v34 = v33;
    v184 = v32;
    v188 = v33;
    if (v33 + 1 >= v27)
    {
      v43 = v33 + 1;
      goto LABEL_39;
    }
    v197 = v33 + 1;
    v198 = (void (*)(char *, uint64_t, uint64_t))v27;
    v35 = *v206;
    v36 = *(_QWORD *)(v5 + 72);
    v37 = *v206 + v36 * (v33 + 1);
    v201 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v38 = (uint64_t)v181;
    v201(v181, v37, v4);
    v186 = v35;
    v203 = v36;
    v39 = v35 + v36 * v34;
    v40 = v34;
    v41 = (uint64_t)v182;
    v201(v182, v39, v4);
    LODWORD(v195) = sub_1A39F7D0C(v38, v41, a2);
    if (v191)
    {
      v179 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v179(v41, v4);
      v179(v38, v4);
      goto LABEL_154;
    }
    v42 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v42(v41, v4);
    v202 = (void (*)(char *, uint64_t))v42;
    result = ((uint64_t (*)(uint64_t, uint64_t))v42)(v38, v4);
    v43 = v40 + 2;
    if (v40 + 2 >= (uint64_t)v198)
    {
      v34 = v40;
      v27 = (uint64_t)v198;
      if ((v195 & 1) != 0)
        goto LABEL_126;
      goto LABEL_39;
    }
    v194 = v203 * v197;
    v44 = v186;
    v193 = v203 * v43;
    while (1)
    {
      v197 = v43;
      v45 = v201;
      v201(v189, v44 + v193, v4);
      v45(v18, v44 + v194, v4);
      v46 = sub_1A3AB43D0();
      v48 = v47;
      v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v49(a2, 1, v4))
      {
        swift_bridgeObjectRelease();
        v27 = (uint64_t)v198;
      }
      else
      {
        v59 = v192;
        v45(v192, a2, v4);
        v60 = sub_1A3AB43D0();
        v62 = v61;
        v202(v59, v4);
        if (v46 == v60 && v48 == v62)
        {
          swift_bridgeObjectRelease_n();
          v58 = 1;
          v27 = (uint64_t)v198;
          a2 = v199;
          v5 = v196;
          goto LABEL_29;
        }
        v67 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = (uint64_t)v198;
        a2 = v199;
        v18 = v185;
        if ((v67 & 1) != 0)
        {
          v58 = 1;
          v5 = v196;
          goto LABEL_32;
        }
      }
      v50 = sub_1A3AB43D0();
      v52 = v51;
      v53 = v205;
      if (v49(a2, 1, v205))
      {
        swift_bridgeObjectRelease();
        v5 = v196;
        v54 = v189;
LABEL_22:
        v209 = sub_1A3AB43D0();
        v210 = v55;
        v207 = sub_1A3AB43D0();
        v208 = v56;
        sub_1A39A9EC0();
        v57 = sub_1A3AB515C();
        swift_bridgeObjectRelease();
        a2 = v199;
        swift_bridgeObjectRelease();
        v58 = v57 == -1;
        goto LABEL_33;
      }
      v63 = v192;
      v201(v192, a2, v53);
      v64 = sub_1A3AB43D0();
      v66 = v65;
      v202(v63, v53);
      v5 = v196;
      if (v50 == v64 && v52 == v66)
      {
        swift_bridgeObjectRelease_n();
        v58 = 0;
        a2 = v199;
LABEL_29:
        v18 = v185;
LABEL_32:
        v54 = v189;
        goto LABEL_33;
      }
      v69 = sub_1A3AB5654();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = 0;
      a2 = v199;
      v18 = v185;
      v54 = v189;
      if ((v69 & 1) == 0)
        goto LABEL_22;
LABEL_33:
      v4 = v205;
      v68 = (uint64_t (*)(char *, uint64_t))v202;
      v202(v18, v205);
      result = v68(v54, v4);
      if (((v195 ^ v58) & 1) != 0)
        break;
      v43 = v197 + 1;
      v44 += v203;
      if (v27 == v197 + 1)
      {
        v43 = v27;
        v32 = v184;
        goto LABEL_125;
      }
    }
    v32 = v184;
    v43 = v197;
LABEL_125:
    v34 = v188;
    if ((v195 & 1) != 0)
    {
LABEL_126:
      if (v43 >= v34)
      {
        if (v34 < v43)
        {
          v163 = 0;
          v164 = v203 * (v43 - 1);
          v165 = v43 * v203;
          v166 = v34;
          v167 = v34 * v203;
          do
          {
            if (v166 != v43 + v163 - 1)
            {
              v170 = v186;
              if (!v186)
                goto LABEL_183;
              v171 = v186 + v167;
              v202 = (void (*)(char *, uint64_t))(v186 + v164);
              v201 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
              v201(v187, v186 + v167, v205);
              if (v167 < v164 || v171 >= v170 + v165)
              {
                v168 = v202;
                v169 = v205;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v169 = v205;
                v168 = v202;
                if (v167 != v164)
                  swift_arrayInitWithTakeBackToFront();
              }
              result = ((uint64_t (*)(void (*)(char *, uint64_t), char *, uint64_t))v201)(v168, v187, v169);
              v5 = v196;
              v32 = v184;
              v34 = v188;
            }
            ++v166;
            --v163;
            v164 -= v203;
            v165 -= v203;
            v167 += v203;
          }
          while (v166 < v43 + v163);
          v27 = (uint64_t)v198;
          a2 = v199;
          v4 = v205;
        }
        goto LABEL_39;
      }
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
      return result;
    }
LABEL_39:
    if (v43 >= v27)
      goto LABEL_75;
    if (__OFSUB__(v43, v34))
      goto LABEL_175;
    if (v43 - v34 >= v183)
      goto LABEL_75;
    if (__OFADD__(v34, v183))
      goto LABEL_178;
    if (v34 + v183 >= v27)
      v70 = v27;
    else
      v70 = v34 + v183;
    if (v70 < v34)
    {
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    if (v43 == v70)
      goto LABEL_75;
    v71 = *(_QWORD *)(v5 + 72);
    v72 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v73 = v71 * (v43 - 1);
    v193 = v71;
    v74 = v43 * v71;
    v198 = v72;
    v186 = v70;
    while (2)
    {
      v76 = 0;
      v197 = v43;
      v194 = v74;
      v195 = v73;
      while (2)
      {
        v77 = *v206;
        v202 = (void (*)(char *, uint64_t))(v74 + v76);
        v203 = v34;
        v72(v204, v74 + v76 + v77, v4);
        v201 = (void (*)(char *, uint64_t, uint64_t))(v73 + v76);
        v72(v211, v73 + v76 + v77, v4);
        v78 = sub_1A3AB43D0();
        v80 = v79;
        v81 = v72;
        v82 = v5;
        v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v83(a2, 1, v4))
        {
          swift_bridgeObjectRelease();
          v73 = v195;
          goto LABEL_57;
        }
        v88 = v192;
        v81(v192, a2, v4);
        v89 = sub_1A3AB43D0();
        v91 = v90;
        v92 = *(void (**)(char *, uint64_t))(v82 + 8);
        v92(v88, v4);
        if (v78 == v89 && v80 == v91)
        {
          swift_bridgeObjectRelease_n();
          v73 = v195;
          goto LABEL_68;
        }
        v107 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a2 = v199;
        v73 = v195;
        if ((v107 & 1) != 0)
        {
LABEL_68:
          v4 = v205;
          v92(v211, v205);
          result = ((uint64_t (*)(char *, uint64_t))v92)(v204, v4);
          v5 = v196;
          goto LABEL_69;
        }
LABEL_57:
        v84 = sub_1A3AB43D0();
        v86 = v85;
        v87 = v205;
        if (v83(a2, 1, v205))
        {
          swift_bridgeObjectRelease();
          v5 = v196;
          goto LABEL_65;
        }
        v93 = v192;
        v198(v192, a2, v87);
        v94 = sub_1A3AB43D0();
        v96 = v95;
        v97 = v196;
        v98 = v87;
        v99 = *(void (**)(char *, uint64_t))(v196 + 8);
        v99(v93, v98);
        if (v84 != v94 || v86 != v96)
        {
          v100 = sub_1A3AB5654();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v5 = v97;
          if ((v100 & 1) != 0)
            goto LABEL_50;
LABEL_65:
          v101 = v204;
          v209 = sub_1A3AB43D0();
          v210 = v102;
          v103 = v211;
          v207 = sub_1A3AB43D0();
          v208 = v104;
          sub_1A39A9EC0();
          v105 = sub_1A3AB515C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v106 = *(void (**)(char *, uint64_t))(v5 + 8);
          v4 = v205;
          v106(v103, v205);
          result = ((uint64_t (*)(char *, uint64_t))v106)(v101, v4);
          if (v105 != -1)
            goto LABEL_51;
LABEL_69:
          v108 = *v206;
          v72 = v198;
          v74 = v194;
          if (!*v206)
            goto LABEL_181;
          v109 = v108 + v73 + v76;
          v110 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
          v110(v200, v108 + v194 + v76, v4);
          swift_arrayInitWithTakeFrontToBack();
          result = ((uint64_t (*)(uint64_t, char *, uint64_t))v110)(v109, v200, v4);
          v76 -= v193;
          v34 = v203 + 1;
          v75 = v197;
          a2 = v199;
          if (v197 == v203 + 1)
            goto LABEL_52;
          continue;
        }
        break;
      }
      swift_bridgeObjectRelease_n();
      v5 = v97;
LABEL_50:
      v4 = v205;
      v99(v211, v205);
      result = ((uint64_t (*)(char *, uint64_t))v99)(v204, v4);
LABEL_51:
      v72 = v198;
      a2 = v199;
      v75 = v197;
      v74 = v194;
LABEL_52:
      v43 = v75 + 1;
      v73 += v193;
      v74 += v193;
      v34 = v188;
      if (v43 != v186)
        continue;
      break;
    }
    v43 = v186;
    v32 = v184;
LABEL_75:
    if (v43 < v34)
      goto LABEL_171;
    result = swift_isUniquelyReferenced_nonNull_native();
    v197 = v43;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1A39D3764(0, *(_QWORD *)(v32 + 16) + 1, 1, (char *)v32);
      v32 = result;
    }
    v112 = *(_QWORD *)(v32 + 16);
    v111 = *(_QWORD *)(v32 + 24);
    v113 = v112 + 1;
    if (v112 >= v111 >> 1)
    {
      result = (uint64_t)sub_1A39D3764((char *)(v111 > 1), v112 + 1, 1, (char *)v32);
      v32 = result;
    }
    *(_QWORD *)(v32 + 16) = v113;
    v114 = v32 + 32;
    v115 = (uint64_t *)(v32 + 32 + 16 * v112);
    v116 = v197;
    *v115 = v34;
    v115[1] = v116;
    if (v112)
    {
      while (2)
      {
        v117 = v113 - 1;
        if (v113 >= 4)
        {
          v122 = v114 + 16 * v113;
          v123 = *(_QWORD *)(v122 - 64);
          v124 = *(_QWORD *)(v122 - 56);
          v128 = __OFSUB__(v124, v123);
          v125 = v124 - v123;
          if (v128)
            goto LABEL_159;
          v127 = *(_QWORD *)(v122 - 48);
          v126 = *(_QWORD *)(v122 - 40);
          v128 = __OFSUB__(v126, v127);
          v120 = v126 - v127;
          v121 = v128;
          if (v128)
            goto LABEL_160;
          v129 = v113 - 2;
          v130 = (uint64_t *)(v114 + 16 * (v113 - 2));
          v132 = *v130;
          v131 = v130[1];
          v128 = __OFSUB__(v131, v132);
          v133 = v131 - v132;
          if (v128)
            goto LABEL_161;
          v128 = __OFADD__(v120, v133);
          v134 = v120 + v133;
          if (v128)
            goto LABEL_163;
          if (v134 >= v125)
          {
            v152 = (uint64_t *)(v114 + 16 * v117);
            v154 = *v152;
            v153 = v152[1];
            v128 = __OFSUB__(v153, v154);
            v155 = v153 - v154;
            if (v128)
              goto LABEL_169;
            v145 = v120 < v155;
          }
          else
          {
LABEL_94:
            if ((v121 & 1) != 0)
              goto LABEL_162;
            v129 = v113 - 2;
            v135 = (uint64_t *)(v114 + 16 * (v113 - 2));
            v137 = *v135;
            v136 = v135[1];
            v138 = __OFSUB__(v136, v137);
            v139 = v136 - v137;
            v140 = v138;
            if (v138)
              goto LABEL_164;
            v141 = (uint64_t *)(v114 + 16 * v117);
            v143 = *v141;
            v142 = v141[1];
            v128 = __OFSUB__(v142, v143);
            v144 = v142 - v143;
            if (v128)
              goto LABEL_166;
            if (__OFADD__(v139, v144))
              goto LABEL_168;
            if (v139 + v144 < v120)
              goto LABEL_106;
            v145 = v120 < v144;
          }
          if (v145)
            v117 = v129;
        }
        else
        {
          if (v113 == 3)
          {
            v119 = *(_QWORD *)(v32 + 32);
            v118 = *(_QWORD *)(v32 + 40);
            v128 = __OFSUB__(v118, v119);
            v120 = v118 - v119;
            v121 = v128;
            goto LABEL_94;
          }
          v146 = *(_QWORD *)(v32 + 32);
          v147 = *(_QWORD *)(v32 + 40);
          v128 = __OFSUB__(v147, v146);
          v139 = v147 - v146;
          v140 = v128;
LABEL_106:
          if ((v140 & 1) != 0)
            goto LABEL_165;
          v148 = (uint64_t *)(v114 + 16 * v117);
          v150 = *v148;
          v149 = v148[1];
          v128 = __OFSUB__(v149, v150);
          v151 = v149 - v150;
          if (v128)
            goto LABEL_167;
          if (v151 < v139)
            goto LABEL_123;
        }
        v156 = v117 - 1;
        if (v117 - 1 >= v113)
        {
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
          goto LABEL_179;
        }
        if (!*v206)
          goto LABEL_182;
        v157 = (uint64_t *)(v114 + 16 * v156);
        v158 = *v157;
        v159 = (_QWORD *)(v114 + 16 * v117);
        v160 = v159[1];
        v161 = v191;
        result = sub_1A39FCFA4(*v206 + *(_QWORD *)(v5 + 72) * *v157, *v206 + *(_QWORD *)(v5 + 72) * *v159, *v206 + *(_QWORD *)(v5 + 72) * v160, v190, v199);
        v191 = v161;
        if (v161)
          goto LABEL_154;
        if (v160 < v158)
          goto LABEL_156;
        if (v117 > *(_QWORD *)(v32 + 16))
          goto LABEL_157;
        *v157 = v158;
        *(_QWORD *)(v114 + 16 * v156 + 8) = v160;
        v162 = *(_QWORD *)(v32 + 16);
        if (v117 >= v162)
          goto LABEL_158;
        v113 = v162 - 1;
        result = (uint64_t)memmove((void *)(v114 + 16 * v117), v159 + 2, 16 * (v162 - 1 - v117));
        *(_QWORD *)(v32 + 16) = v162 - 1;
        a2 = v199;
        v4 = v205;
        if (v162 <= 2)
          goto LABEL_123;
        continue;
      }
    }
    v113 = 1;
LABEL_123:
    v27 = v206[1];
    v33 = v197;
    v18 = v185;
  }
  while (v197 < v27);
LABEL_141:
  v172 = v191;
  if (v113 >= 2)
  {
    v173 = *v206;
    do
    {
      v174 = v113 - 2;
      if (v113 < 2)
        goto LABEL_170;
      if (!v173)
        goto LABEL_184;
      v175 = *(_QWORD *)(v32 + 32 + 16 * v174);
      v176 = *(_QWORD *)(v32 + 32 + 16 * (v113 - 1) + 8);
      result = sub_1A39FCFA4(v173 + *(_QWORD *)(v5 + 72) * v175, v173 + *(_QWORD *)(v5 + 72) * *(_QWORD *)(v32 + 32 + 16 * (v113 - 1)), v173 + *(_QWORD *)(v5 + 72) * v176, v190, v199);
      if (v172)
        break;
      if (v176 < v175)
        goto LABEL_172;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1A39D385C(v32);
        v32 = result;
      }
      if (v174 >= *(_QWORD *)(v32 + 16))
        goto LABEL_173;
      v177 = (_QWORD *)(v32 + 32 + 16 * v174);
      *v177 = v175;
      v177[1] = v176;
      v178 = *(_QWORD *)(v32 + 16);
      if (v113 > v178)
        goto LABEL_174;
      result = (uint64_t)memmove((void *)(v32 + 32 + 16 * (v113 - 1)), (const void *)(v32 + 32 + 16 * v113), 16 * (v178 - v113));
      *(_QWORD *)(v32 + 16) = v178 - 1;
      v113 = v178 - 1;
    }
    while (v178 > 2);
  }
LABEL_154:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v180 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A39FCB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD, _QWORD, _QWORD);
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;

  v64 = a5;
  v68 = a4;
  v57 = a1;
  v7 = sub_1A3AB4538();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v65 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v58 = (char *)&v55 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v75 = (char *)&v55 - v14;
  result = MEMORY[0x1E0C80A78](v13);
  v69 = (char *)&v55 - v16;
  v62 = a3;
  v56 = a2;
  if (a3 != a2)
  {
    v17 = v8[9];
    v18 = (void (*)(_QWORD, _QWORD, _QWORD))v8[2];
    v19 = v17 * (v62 - 1);
    v59 = v17;
    v70 = v17 * v62;
    v63 = v8;
    v61 = v18;
LABEL_7:
    v20 = 0;
    v21 = v57;
    v60 = v19;
    while (1)
    {
      v22 = *v68;
      v67 = v70 + v20;
      v18(v69, v70 + v20 + v22, v7);
      v66 = v19 + v20;
      v18(v75, v19 + v20 + v22, v7);
      v23 = sub_1A3AB43D0();
      v25 = v24;
      v26 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v8[6];
      v27 = v64;
      if (v26(v64, 1, v7))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v32 = v27;
        v33 = v58;
        v18(v58, v32, v7);
        v34 = sub_1A3AB43D0();
        v35 = (void (*)(char *, uint64_t))v8[1];
        v36 = v33;
        v38 = v37;
        v35(v36, v7);
        if (v23 == v34 && v25 == v38)
        {
          swift_bridgeObjectRelease_n();
          v18 = v61;
LABEL_22:
          v35(v75, v7);
          result = ((uint64_t (*)(char *, uint64_t))v35)(v69, v7);
          v8 = v63;
          v19 = v60;
          goto LABEL_23;
        }
        v51 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18 = v61;
        if ((v51 & 1) != 0)
          goto LABEL_22;
      }
      v28 = sub_1A3AB43D0();
      v30 = v29;
      v31 = v64;
      if (v26(v64, 1, v7))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v39 = v58;
        v18(v58, v31, v7);
        v40 = sub_1A3AB43D0();
        v42 = v41;
        v43 = (void (*)(char *, uint64_t))v63[1];
        v43(v39, v7);
        if (v28 == v40 && v30 == v42)
        {
          swift_bridgeObjectRelease_n();
LABEL_5:
          v43(v75, v7);
          result = ((uint64_t (*)(char *, uint64_t))v43)(v69, v7);
          v8 = v63;
          v19 = v60;
          v18 = v61;
LABEL_6:
          v19 += v59;
          v70 += v59;
          if (++v62 == v56)
            return result;
          goto LABEL_7;
        }
        v44 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v44 & 1) != 0)
          goto LABEL_5;
      }
      v45 = v69;
      v73 = sub_1A3AB43D0();
      v74 = v46;
      v47 = v75;
      v71 = sub_1A3AB43D0();
      v72 = v48;
      sub_1A39A9EC0();
      v49 = sub_1A3AB515C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v63;
      v50 = (void (*)(char *, uint64_t))v63[1];
      v50(v47, v7);
      result = ((uint64_t (*)(char *, uint64_t))v50)(v45, v7);
      v19 = v60;
      v18 = v61;
      if (v49 != -1)
        goto LABEL_6;
LABEL_23:
      v52 = *v68;
      if (!*v68)
      {
        __break(1u);
        return result;
      }
      v53 = v52 + v19 + v20;
      v54 = (void (*)(char *, uint64_t, uint64_t))v8[4];
      v54(v65, v52 + v70 + v20, v7);
      swift_arrayInitWithTakeFrontToBack();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v54)(v53, v65, v7);
      v20 -= v59;
      if (v62 == ++v21)
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t sub_1A39FCFA4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  char v57;
  unint64_t v58;
  void (*v59)(_QWORD);
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  char *v65;
  uint64_t v66;
  void (*v67)(_QWORD);
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  unint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  void (*v104)(_QWORD);
  unint64_t v105;
  char *v106;
  unint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  unint64_t v110;
  char *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;

  v10 = sub_1A3AB4538();
  v11 = *(_QWORD **)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v108 = (void (*)(char *, uint64_t, uint64_t))((char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v12);
  v15 = MEMORY[0x1E0C80A78](v14);
  v106 = (char *)&v102 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v111 = (char *)&v102 - v18;
  result = MEMORY[0x1E0C80A78](v17);
  v109 = (uint64_t)&v102 - v21;
  v22 = v11[9];
  if (!v22)
  {
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  if (a2 - a1 == 0x8000000000000000 && v22 == -1)
    goto LABEL_92;
  v23 = a3 - a2;
  if (a3 - a2 != 0x8000000000000000 || v22 != -1)
  {
    v24 = (uint64_t)(a2 - a1) / v22;
    v121 = a1;
    v120 = a4;
    v114 = a5;
    v112 = v11;
    if (v24 < v23 / v22)
    {
      v25 = v24 * v22;
      if (a4 < a1 || a1 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a1)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v107 = a4 + v25;
      v119 = a4 + v25;
      if (v25 >= 1 && a2 < a3)
      {
        v28 = (void (*)(char *, uint64_t, uint64_t))v11[2];
        v108 = v28;
        v104 = (void (*)(_QWORD))v22;
        v110 = a3;
        while (1)
        {
          v28((char *)v109, a2, v10);
          v28(v111, a4, v10);
          v29 = sub_1A3AB43D0();
          v31 = v30;
          v32 = v11;
          v33 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v11[6];
          v34 = v114;
          if (v33(v114, 1, v10))
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v113 = a2;
            v47 = v106;
            v28(v106, v34, v10);
            v48 = sub_1A3AB43D0();
            v50 = v49;
            v51 = (void (*)(char *, uint64_t))v32[1];
            v51(v47, v10);
            if (v29 == v48 && v31 == v50)
            {
              swift_bridgeObjectRelease_n();
              a2 = v113;
LABEL_34:
              v51(v111, v10);
              v51((char *)v109, v10);
              v11 = v112;
              v40 = v110;
              goto LABEL_35;
            }
            v57 = sub_1A3AB5654();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a2 = v113;
            if ((v57 & 1) != 0)
              goto LABEL_34;
          }
          v35 = sub_1A3AB43D0();
          v37 = v36;
          v38 = v114;
          v39 = v33(v114, 1, v10);
          v40 = v110;
          if (v39)
          {
            swift_bridgeObjectRelease();
            v11 = v112;
          }
          else
          {
            v113 = a2;
            v52 = v106;
            v108(v106, v38, v10);
            v53 = sub_1A3AB43D0();
            v55 = v54;
            v11 = v112;
            v56 = (void (*)(char *, uint64_t))v112[1];
            v56(v52, v10);
            if (v35 == v53 && v37 == v55)
            {
              swift_bridgeObjectRelease_n();
              a2 = v113;
LABEL_41:
              v56(v111, v10);
              v56((char *)v109, v10);
LABEL_42:
              v58 = v121;
              v59 = v104;
              v62 = (unint64_t)v104 + v120;
              v28 = v108;
              if (v121 < v120 || v121 >= v62)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v121 != v120)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              v120 = v62;
              v60 = a2;
              goto LABEL_48;
            }
            v61 = sub_1A3AB5654();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a2 = v113;
            if ((v61 & 1) != 0)
              goto LABEL_41;
          }
          v41 = (char *)v109;
          v117 = sub_1A3AB43D0();
          v118 = v42;
          v43 = v111;
          v115 = sub_1A3AB43D0();
          v116 = v44;
          sub_1A39A9EC0();
          v45 = sub_1A3AB515C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v46 = (void (*)(char *, uint64_t))v11[1];
          v46(v43, v10);
          v46(v41, v10);
          if (v45 != -1)
            goto LABEL_42;
LABEL_35:
          v58 = v121;
          v59 = v104;
          v60 = (unint64_t)v104 + a2;
          v28 = v108;
          if (v121 < a2 || v121 >= v60)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v121 == a2)
          {
            v58 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
LABEL_48:
          v121 = (unint64_t)v59 + v58;
          a4 = v120;
          if (v120 < v107)
          {
            a2 = v60;
            if (v60 < v40)
              continue;
          }
          goto LABEL_58;
        }
      }
      goto LABEL_58;
    }
    v26 = v23 / v22 * v22;
    v111 = v20;
    if (a4 < a2 || a2 + v26 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v63 = a4 + v26;
    v119 = a4 + v26;
    v121 = a2;
    v64 = v26 < 1 || a1 >= a2;
    v65 = (char *)v108;
    if (v64)
    {
LABEL_58:
      sub_1A39FE02C(&v121, &v120, (uint64_t *)&v119);
      return 1;
    }
    v66 = -v22;
    v67 = (void (*)(_QWORD))v11[2];
    v103 = a4;
    v104 = v67;
    v105 = a1;
    v109 = -v22;
    while (1)
    {
      v68 = v66;
      v69 = (void (*)(char *, uint64_t, uint64_t))v104;
      ((void (*)(char *, unint64_t, uint64_t))v104)(v111, v63 + v66, v10);
      v113 = a2;
      v70 = a2 + v68;
      v71 = v69;
      v107 = v70;
      ((void (*)(char *))v69)(v65);
      v72 = sub_1A3AB43D0();
      v74 = v73;
      v75 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v11[6];
      v76 = v114;
      if (v75(v114, 1, v10))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v110 = a3;
        v87 = v106;
        v71(v106, v76, v10);
        v88 = sub_1A3AB43D0();
        v90 = v89;
        v86 = (void (*)(char *, uint64_t))v11[1];
        v86(v87, v10);
        if (v72 == v88 && v74 == v90)
        {
          swift_bridgeObjectRelease_n();
          v85 = 1;
          goto LABEL_70;
        }
        v95 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v110;
        a4 = v103;
        if ((v95 & 1) != 0)
        {
          v85 = 1;
          goto LABEL_73;
        }
      }
      v77 = sub_1A3AB43D0();
      v79 = v78;
      v80 = v114;
      if (v75(v114, 1, v10))
      {
        swift_bridgeObjectRelease();
        v65 = (char *)v108;
        v81 = v111;
      }
      else
      {
        v110 = a3;
        v91 = v106;
        v71(v106, v80, v10);
        v92 = sub_1A3AB43D0();
        v94 = v93;
        v86 = (void (*)(char *, uint64_t))v112[1];
        v86(v91, v10);
        if (v77 == v92 && v79 == v94)
        {
          swift_bridgeObjectRelease_n();
          v85 = 0;
LABEL_70:
          a3 = v110;
          a4 = v103;
LABEL_73:
          v65 = (char *)v108;
          v81 = v111;
          goto LABEL_74;
        }
        v101 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v85 = 0;
        a3 = v110;
        v81 = v111;
        a4 = v103;
        v65 = (char *)v108;
        if ((v101 & 1) != 0)
          goto LABEL_74;
      }
      v117 = sub_1A3AB43D0();
      v118 = v82;
      v115 = sub_1A3AB43D0();
      v116 = v83;
      sub_1A39A9EC0();
      v84 = sub_1A3AB515C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v85 = v84 == -1;
      v86 = (void (*)(char *, uint64_t))v112[1];
LABEL_74:
      v96 = v109;
      v97 = (char *)(a3 + v109);
      v86(v65, v10);
      v86(v81, v10);
      v98 = v105;
      if (v85)
      {
        v11 = v112;
        if (a3 < v113 || (unint64_t)v97 >= v113)
        {
          v99 = v107;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v99 = v107;
          if (a3 != v113)
            swift_arrayInitWithTakeBackToFront();
        }
        v66 = v109;
        v121 += v109;
      }
      else
      {
        v100 = v119;
        v119 += v96;
        v11 = v112;
        if (a3 < v100 || (unint64_t)v97 >= v100)
        {
          swift_arrayInitWithTakeFrontToBack();
          v66 = v109;
          v99 = v113;
        }
        else
        {
          v66 = v96;
          v99 = v113;
          if (a3 != v100)
          {
            swift_arrayInitWithTakeBackToFront();
            v66 = v109;
          }
        }
      }
      v63 = v119;
      if (v119 > a4)
      {
        a2 = v99;
        a3 = (unint64_t)v97;
        if (v99 > v98)
          continue;
      }
      goto LABEL_58;
    }
  }
LABEL_93:
  __break(1u);
  return result;
}

uint64_t sub_1A39FD8D4(char *__dst, char *__src, unint64_t a3, char *a4, unint64_t a5, unint64_t a6)
{
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  char v42;
  int v43;
  char v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  char v49;
  char v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char v80;
  int v81;
  char v82;
  id v83;
  uint64_t v84;
  char v85;
  char v86;
  size_t v87;
  char *v88;
  size_t v89;
  char *v90;
  void *v92;
  void *v93;
  id v94;
  unint64_t v97;
  char *v98;
  void *v99;
  uint64_t v100;
  char *__dsta;
  char *__dstb;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  int v120;
  char v121;
  int v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  int v135;
  char v136;
  int v137;
  char v138;
  uint64_t v139;

  v6 = a4;
  v7 = a3;
  v8 = __src;
  v9 = __dst;
  v10 = __src - __dst;
  v11 = (__src - __dst) / 104;
  v12 = a3 - (_QWORD)__src;
  v13 = (uint64_t)(a3 - (_QWORD)__src) / 104;
  if (v11 < v13)
  {
    v14 = 104 * v11;
    if (a4 != __dst || &__dst[v14] <= a4)
      memmove(a4, __dst, v14);
    v15 = &v6[v14];
    if ((unint64_t)v8 < v7 && v10 >= 104)
    {
      v103 = &v6[v14];
      v97 = v7;
      while (1)
      {
        v16 = *((_QWORD *)v8 + 1);
        v18 = *((_QWORD *)v8 + 2);
        v17 = *((_QWORD *)v8 + 3);
        v19 = *((_QWORD *)v8 + 4);
        v20 = v8[40];
        v21 = v8[41];
        v22 = *((_QWORD *)v8 + 6);
        v23 = v8[56];
        v25 = *((_QWORD *)v8 + 8);
        v24 = *((_QWORD *)v8 + 9);
        v99 = (void *)*((_QWORD *)v8 + 10);
        __dsta = v9;
        v26 = *((_DWORD *)v8 + 22);
        v27 = v8[92];
        v28 = *((_DWORD *)v8 + 24);
        v107 = v8;
        v29 = v8[100];
        v124 = *(_QWORD *)v8;
        v125 = v16;
        v126 = v18;
        v127 = v17;
        v128 = v19;
        LOBYTE(v129) = v20;
        HIBYTE(v129) = v21;
        v130 = v22;
        v131 = v23;
        v132 = v25;
        v133 = v24;
        v134 = v99;
        v135 = v26;
        v136 = v27;
        v137 = v28;
        v138 = v29;
        v30 = *((_QWORD *)v6 + 1);
        v32 = *((_QWORD *)v6 + 2);
        v31 = *((_QWORD *)v6 + 3);
        v33 = *((_QWORD *)v6 + 4);
        v34 = v6[40];
        v35 = v6[41];
        v36 = *((_QWORD *)v6 + 6);
        v37 = v6[56];
        v39 = *((_QWORD *)v6 + 8);
        v38 = *((_QWORD *)v6 + 9);
        v40 = (void *)*((_QWORD *)v6 + 10);
        v41 = *((_DWORD *)v6 + 22);
        v42 = v6[92];
        v43 = *((_DWORD *)v6 + 24);
        v105 = v6;
        v44 = v6[100];
        v109 = *(_QWORD *)v6;
        v110 = v30;
        v111 = v32;
        v112 = v31;
        v113 = v33;
        LOBYTE(v114) = v34;
        HIBYTE(v114) = v35;
        v115 = v36;
        v116 = v37;
        v117 = v39;
        v118 = v38;
        v119 = v40;
        v45 = v40;
        v120 = v41;
        v121 = v42;
        v122 = v43;
        v123 = v44;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v46 = v99;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v47 = v45;
        v48 = v139;
        v49 = sub_1A39F5BEC((uint64_t)&v124, &v109, a5, a6);
        if (v48)
          break;
        v50 = v49;
        v139 = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if ((v50 & 1) != 0)
        {
          v6 = v105;
          v51 = v107;
          v52 = v107;
          v8 = v107 + 104;
        }
        else
        {
          v51 = v105;
          v8 = v107;
          v52 = v105;
          v6 = v105 + 104;
        }
        if (__dsta != v51)
          memmove(__dsta, v52, 0x68uLL);
        v9 = __dsta + 104;
        v15 = v103;
        if (v6 >= v103 || (unint64_t)v8 >= v97)
          goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v88 = v105;
      v89 = 104 * ((v103 - v105) / 104);
      v90 = __dsta;
      if (__dsta < v105 || __dsta >= &v105[v89] || __dsta != v105)
LABEL_43:
        memmove(v90, v88, v89);
      goto LABEL_45;
    }
LABEL_16:
    v8 = v9;
LABEL_31:
    v87 = 104 * ((v15 - v6) / 104);
    if (v8 < v6 || v8 >= &v6[v87] || v8 != v6)
      memmove(v8, v6, v87);
    goto LABEL_45;
  }
  v53 = 104 * v13;
  if (a4 != __src || &__src[v53] <= a4)
    memmove(a4, __src, 104 * v13);
  v15 = &v6[v53];
  if (v9 >= v8 || v12 < 104)
    goto LABEL_31;
  v54 = v139;
  v106 = v6;
  __dstb = v9;
  while (1)
  {
    v139 = v54;
    v104 = v15;
    v56 = *((_QWORD *)v15 - 13);
    v55 = *((_QWORD *)v15 - 12);
    v15 -= 104;
    v58 = *((_QWORD *)v15 + 2);
    v57 = *((_QWORD *)v15 + 3);
    v59 = *((_QWORD *)v15 + 4);
    v60 = *((_WORD *)v15 + 20);
    v61 = *((_QWORD *)v15 + 6);
    v62 = v15[56];
    v63 = *((_QWORD *)v15 + 8);
    v98 = (char *)v7;
    v100 = *((_QWORD *)v15 + 9);
    v93 = (void *)*((_QWORD *)v15 + 10);
    v64 = *((_DWORD *)v15 + 22);
    v65 = v15[92];
    v66 = *((_DWORD *)v15 + 24);
    v67 = v15[100];
    v124 = v56;
    v125 = v55;
    v126 = v58;
    v127 = v57;
    v128 = v59;
    v129 = v60;
    v130 = v61;
    v131 = v62;
    v132 = v63;
    v133 = v100;
    v134 = v93;
    v135 = v64;
    v136 = v65;
    v137 = v66;
    v138 = v67;
    v108 = v8;
    v68 = *((_QWORD *)v8 - 13);
    v70 = *((_QWORD *)v8 - 12);
    v69 = v8 - 104;
    v72 = *((_QWORD *)v8 - 11);
    v71 = *((_QWORD *)v8 - 10);
    v73 = *((_QWORD *)v8 - 9);
    v74 = *((_WORD *)v8 - 32);
    v75 = *((_QWORD *)v8 - 7);
    v76 = *(v8 - 48);
    v78 = *((_QWORD *)v8 - 5);
    v77 = *((_QWORD *)v69 + 9);
    v92 = (void *)*((_QWORD *)v69 + 10);
    v79 = *((_DWORD *)v69 + 22);
    v80 = v69[92];
    v81 = *((_DWORD *)v69 + 24);
    v82 = v69[100];
    v109 = v68;
    v110 = v70;
    v111 = v72;
    v112 = v71;
    v113 = v73;
    v114 = v74;
    v115 = v75;
    v116 = v76;
    v117 = v78;
    v118 = v77;
    v119 = v92;
    v120 = v79;
    v121 = v80;
    v122 = v81;
    v123 = v82;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v94 = v93;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v83 = v92;
    v84 = v139;
    v85 = sub_1A39F5BEC((uint64_t)&v124, &v109, a5, a6);
    v139 = v84;
    if (v84)
      break;
    v86 = v85;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v7 = (unint64_t)(v98 - 104);
    if ((v86 & 1) == 0)
    {
      v69 = v15;
      v6 = v106;
      v54 = v139;
      v8 = v108;
      if (v98 == v104)
        goto LABEL_29;
LABEL_28:
      memmove(v98 - 104, v69, 0x68uLL);
      goto LABEL_29;
    }
    v6 = v106;
    v8 = v69;
    v54 = v139;
    v15 = v104;
    if (v98 != v108)
      goto LABEL_28;
LABEL_29:
    if (v15 <= v6 || v8 <= __dstb)
      goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v88 = v106;
  v89 = 104 * ((v104 - v106) / 104);
  v90 = v108;
  if (v108 < v106 || v108 >= &v106[v89])
  {
    memmove(v108, v106, v89);
  }
  else if (v108 != v106)
  {
    goto LABEL_43;
  }
LABEL_45:
  sub_1A39FA578(a6);
  return 1;
}

uint64_t sub_1A39FE02C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_1A3AB4538();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_13;
  if (v3 < v4 || v3 >= v4 + (uint64_t)(v5 - v4) / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t sub_1A39FE0DC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = sub_1A39FE25C((_QWORD *)((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = sub_1A39FE25C((unint64_t *)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x1A859781C](v8, -1, -1);
  }
  return v7;
}

uint64_t sub_1A39FE25C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, unint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t (*v42)(char *, uint64_t);
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t i;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, unint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v66 = a2;
  v69 = a1;
  v6 = sub_1A3AB4424();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v66 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v66 - v15;
  result = MEMORY[0x1E0C80A78](v14);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(a4 + 16);
  v75 = a4;
  v76 = a3;
  v77 = v7;
  if (v20 >= v19)
  {
    v71 = 0;
    v43 = 0;
    v44 = *(_QWORD *)(a3 + 56);
    v67 = a3 + 56;
    v45 = 1 << *(_BYTE *)(a3 + 32);
    if (v45 < 64)
      v46 = ~(-1 << v45);
    else
      v46 = -1;
    v47 = v46 & v44;
    v68 = (unint64_t)(v45 + 63) >> 6;
    v74 = a4 + 56;
    if (v47)
      goto LABEL_38;
LABEL_39:
    v49 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v49 < v68)
    {
      v50 = *(_QWORD *)(v67 + 8 * v49);
      v51 = v43 + 1;
      if (v50)
        goto LABEL_52;
      v51 = v43 + 2;
      if (v43 + 2 < v68)
      {
        v50 = *(_QWORD *)(v67 + 8 * v51);
        if (v50)
          goto LABEL_52;
        v51 = v43 + 3;
        if (v43 + 3 < v68)
        {
          v50 = *(_QWORD *)(v67 + 8 * v51);
          if (v50)
            goto LABEL_52;
          v52 = v43 + 4;
          if (v43 + 4 < v68)
          {
            v50 = *(_QWORD *)(v67 + 8 * v52);
            if (!v50)
            {
              while (1)
              {
                v51 = v52 + 1;
                if (__OFADD__(v52, 1))
                  goto LABEL_67;
                if (v51 >= v68)
                  goto LABEL_61;
                v50 = *(_QWORD *)(v67 + 8 * v51);
                ++v52;
                if (v50)
                  goto LABEL_52;
              }
            }
            v51 = v43 + 4;
LABEL_52:
            v72 = (v50 - 1) & v50;
            v73 = v51;
            for (i = __clz(__rbit64(v50)) + (v51 << 6); ; i = __clz(__rbit64(v47)) | (v43 << 6))
            {
              v53 = *(_QWORD *)(a3 + 48);
              v54 = *(_QWORD *)(v7 + 72);
              v70 = i;
              v55 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
              v55(v10, v53 + v54 * i, v6);
              sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
              v56 = v7;
              v57 = v10;
              v58 = sub_1A3AB48C8();
              v59 = -1 << *(_BYTE *)(a4 + 32);
              v60 = v58 & ~v59;
              if (((*(_QWORD *)(v74 + ((v60 >> 3) & 0xFFFFFFFFFFFFF8)) >> v60) & 1) != 0)
              {
                v61 = ~v59;
                while (1)
                {
                  v55(v13, *(_QWORD *)(v75 + 48) + v60 * v54, v6);
                  sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
                  v62 = sub_1A3AB494C();
                  v63 = *(void (**)(char *, uint64_t))(v77 + 8);
                  v63(v13, v6);
                  if ((v62 & 1) != 0)
                    break;
                  v60 = (v60 + 1) & v61;
                  if (((*(_QWORD *)(v74 + ((v60 >> 3) & 0xFFFFFFFFFFFFF8)) >> v60) & 1) == 0)
                    goto LABEL_59;
                }
                v10 = v57;
                result = ((uint64_t (*)(char *, uint64_t))v63)(v57, v6);
                *(unint64_t *)((char *)v69 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v70;
                v47 = v72;
                v26 = __OFADD__(v71++, 1);
                a4 = v75;
                a3 = v76;
                v7 = v77;
                v43 = v73;
                if (v26)
                  goto LABEL_65;
                if (!v72)
                  goto LABEL_39;
              }
              else
              {
                v63 = *(void (**)(char *, uint64_t))(v56 + 8);
LABEL_59:
                v10 = v57;
                result = ((uint64_t (*)(char *, uint64_t))v63)(v57, v6);
                a4 = v75;
                a3 = v76;
                v7 = v77;
                v47 = v72;
                v43 = v73;
                if (!v72)
                  goto LABEL_39;
              }
LABEL_38:
              v72 = (v47 - 1) & v47;
              v73 = v43;
            }
          }
        }
      }
    }
LABEL_61:
    v64 = v66;
    v65 = v71;
    swift_retain();
    return sub_1A39FE934(v69, v64, v65, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], &qword_1EE6D2BD0, &qword_1EE6D2348, MEMORY[0x1E0CB0B00]);
  }
  v70 = (unint64_t)&v66 - v18;
  v71 = 0;
  v21 = 0;
  v22 = *(_QWORD *)(a4 + 56);
  v67 = a4 + 56;
  v23 = 1 << *(_BYTE *)(a4 + 32);
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v25 = v24 & v22;
  v68 = (unint64_t)(v23 + 63) >> 6;
  v74 = a3 + 56;
  do
  {
    v27 = v70;
    if (v25)
    {
LABEL_8:
      v72 = (v25 - 1) & v25;
      v73 = v21;
      v28 = __clz(__rbit64(v25)) | (v21 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v29 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        goto LABEL_63;
      }
      if (v29 >= v68)
        goto LABEL_61;
      v30 = *(_QWORD *)(v67 + 8 * v29);
      v31 = v21 + 1;
      if (!v30)
      {
        v31 = v21 + 2;
        if (v21 + 2 >= v68)
          goto LABEL_61;
        v30 = *(_QWORD *)(v67 + 8 * v31);
        if (!v30)
        {
          v31 = v21 + 3;
          if (v21 + 3 >= v68)
            goto LABEL_61;
          v30 = *(_QWORD *)(v67 + 8 * v31);
          if (!v30)
          {
            v32 = v21 + 4;
            if (v21 + 4 >= v68)
              goto LABEL_61;
            v30 = *(_QWORD *)(v67 + 8 * v32);
            if (!v30)
            {
              while (1)
              {
                v31 = v32 + 1;
                if (__OFADD__(v32, 1))
                  goto LABEL_66;
                if (v31 >= v68)
                  goto LABEL_61;
                v30 = *(_QWORD *)(v67 + 8 * v31);
                ++v32;
                if (v30)
                  goto LABEL_22;
              }
            }
            v31 = v21 + 4;
          }
        }
      }
LABEL_22:
      v72 = (v30 - 1) & v30;
      v73 = v31;
      v28 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_23:
      v33 = *(_QWORD *)(v7 + 72);
      v34 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      v34(v27, *(_QWORD *)(a4 + 48) + v33 * v28, v6);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v16, v27, v6);
      sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
      v35 = v7;
      v36 = v16;
      v37 = sub_1A3AB48C8();
      a3 = v76;
      v38 = -1 << *(_BYTE *)(v76 + 32);
      v39 = v37 & ~v38;
      if (((*(_QWORD *)(v74 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
        break;
      v42 = *(uint64_t (**)(char *, uint64_t))(v35 + 8);
LABEL_29:
      v16 = v36;
      result = v42(v36, v6);
      a4 = v75;
      v7 = v77;
      v27 = v70;
      v25 = v72;
      v21 = v73;
      if (v72)
        goto LABEL_8;
    }
    v40 = ~v38;
    while (1)
    {
      v34((unint64_t)v13, *(_QWORD *)(a3 + 48) + v39 * v33, v6);
      sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v41 = sub_1A3AB494C();
      v42 = *(uint64_t (**)(char *, uint64_t))(v77 + 8);
      v42(v13, v6);
      if ((v41 & 1) != 0)
        break;
      v39 = (v39 + 1) & v40;
      a3 = v76;
      if (((*(_QWORD *)(v74 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        goto LABEL_29;
    }
    v16 = v36;
    result = v42(v36, v6);
    *(unint64_t *)((char *)v69 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v39;
    v25 = v72;
    v26 = __OFADD__(v71++, 1);
    a4 = v75;
    a3 = v76;
    v7 = v77;
    v21 = v73;
  }
  while (!v26);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t sub_1A39FE934(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a7;
  v42 = a8;
  v40 = a5;
  v13 = a5(0);
  v43 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v38 - v14;
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1A39A4820(a6);
  result = sub_1A3AB5288();
  v16 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v23 >= v39)
      {
LABEL_37:
        swift_release();
        return v16;
      }
      v24 = v38[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v39)
          goto LABEL_37;
        v24 = v38[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v39)
            goto LABEL_37;
          v24 = v38[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v39)
              goto LABEL_37;
            v24 = v38[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v39)
                  goto LABEL_37;
                v24 = v38[v19];
                ++v25;
                if (v24)
                  goto LABEL_24;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_24:
      v18 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = *(_QWORD *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v15, v27 + v28 * v22, v13);
    sub_1A39B9F44(v41, v40, v42);
    result = sub_1A3AB48C8();
    v29 = -1 << *(_BYTE *)(v16 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v20 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v20 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v20 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v20 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v43 + 32))(*(_QWORD *)(v16 + 48) + v32 * v28, v15, v13);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v26;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A39FEC24(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(char *);
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];

  v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v12[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a3 + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_1A39FEE2C((_QWORD *)((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, v5);
    swift_release();
    if (v3)
      swift_willThrow();
  }
  else
  {
    v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    v9 = sub_1A39FEE2C((unint64_t *)v10, v7, a3, v5);
    swift_release();
    MEMORY[0x1A859781C](v10, -1, -1);
  }
  return v9;
}

uint64_t sub_1A39FEDA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1A39A4820(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A39FEDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1ED1B5320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A39FEE2C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;

  v31 = a4;
  v26 = a2;
  v27 = a1;
  v6 = sub_1A3AB4538();
  v7 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v32 = a3;
  v12 = *(_QWORD *)(a3 + 56);
  v28 = 0;
  v29 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v30 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v11 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v7 + 72) * v17, v6);
    v21 = v31(v10);
    if (v4)
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v22 = v21;
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v22 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v28++, 1);
      if (v18)
        goto LABEL_30;
    }
  }
  v18 = __OFADD__(v11++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v11);
  if (v19)
  {
LABEL_16:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }
  v20 = v11 + 1;
  if (v11 + 1 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 2;
  if (v11 + 2 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 3;
  if (v11 + 3 >= v30)
  {
LABEL_27:
    v23 = v26;
    v24 = v28;
    v25 = v32;
    swift_retain();
    return sub_1A39FE934(v27, v23, v24, v25, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], &qword_1ED1B5428, (unint64_t *)&qword_1ED1B5300, MEMORY[0x1E0CB0E58]);
  }
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v30)
      goto LABEL_27;
    v19 = *(_QWORD *)(v29 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A39FF0B4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1A39FF11C;
  return v5(v2 + 32);
}

uint64_t sub_1A39FF11C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1A39FF16C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A3AB4538();
  v41 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x1E0C80A78](v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_1A39B11F4((uint64_t)v10, &qword_1ED1B5320);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1A39FF4BC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

size_t sub_1A39FF544(_QWORD *a1)
{
  return sub_1A39F8384(0, a1[2], 0, a1);
}

char *sub_1A39FF558(uint64_t a1)
{
  return sub_1A39F85FC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1A39FF56C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = sub_1A3AB4538();
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v29 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v23 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v23[1] = v2;
    v32 = MEMORY[0x1E0DEE9D8];
    sub_1A39BE06C(0, v10, 0);
    v11 = v32;
    v27 = a2 + 3;
    v28 = a2;
    v12 = a1 + 40;
    v14 = v24;
    v13 = v25;
    v26 = v9;
    do
    {
      v30 = v10;
      v31 = v11;
      swift_bridgeObjectRetain_n();
      v15 = (uint64_t)v9;
      v16 = v29;
      sub_1A3AB4448();
      v17 = a2[6];
      v18 = a2[7];
      sub_1A39A19CC(v27, v17);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
      Locale.withTTSLanguageDisambiguation(overrides:)(v19, v15);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v11 = v31;
      swift_bridgeObjectRelease();
      v32 = v11;
      v21 = *(_QWORD *)(v11 + 16);
      v20 = *(_QWORD *)(v11 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1A39BE06C(v20 > 1, v21 + 1, 1);
        v14 = v24;
        v13 = v25;
        v11 = v32;
      }
      v12 += 16;
      *(_QWORD *)(v11 + 16) = v21 + 1;
      v9 = v26;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v11+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v21, v26, v13);
      v10 = v30 - 1;
      a2 = v28;
    }
    while (v30 != 1);
  }
  return v11;
}

uint64_t sub_1A39FF764(uint64_t a1)
{
  uint64_t v1;

  return sub_1A39F6EA0(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1A39FF790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v16 = sub_1A3AB4538();
  v4 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v14 = v2;
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1A39BE06C(0, v7, 0);
    v8 = v18;
    v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v9 = a1 + v15;
    v10 = *(_QWORD *)(v4 + 72);
    do
    {
      Locale.withTTSLanguageDisambiguation(overrides:)(v17, (uint64_t)v6);
      v18 = v8;
      v12 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v8 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1A39BE06C(v11 > 1, v12 + 1, 1);
        v8 = v18;
      }
      *(_QWORD *)(v8 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v15 + v12 * v10, v6, v16);
      v9 += v10;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_1A39FF8DC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1EE6D3408 + dword_1EE6D3408))(v2, v3, v4);
}

void sub_1A39FF950(uint64_t a1)
{
  uint64_t v1;

  sub_1A39F20D0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A39FF95C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (const void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, const void *, uint64_t))((char *)&dword_1EE6D3428 + dword_1EE6D3428))(v2, v3, v4);
}

uint64_t sub_1A39FF9D4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39FFA08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(int, void *, uint64_t))((char *)&dword_1EE6D3448 + dword_1EE6D3448))(v2, v3, v4);
}

uint64_t sub_1A39FFA80()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A39D5174;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1EE6D3468 + dword_1EE6D3468))(v2, v3);
}

uint64_t sub_1A39FFAEC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_1A39FFB10()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (id)sub_1A3AB4BA4();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t sub_1A39FFB5C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A39D5174;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1EE6D3488 + dword_1EE6D3488))(v2, v3);
}

uint64_t sub_1A39FFBCC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A39FFBF8()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A39D5174;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1EE6D34A8 + dword_1EE6D34A8))(v2, v3);
}

uint64_t sub_1A39FFC64(uint64_t a1, uint64_t a2)
{
  _s5VoiceVwta(a2, a1);
  return a2;
}

uint64_t sub_1A39FFCA0(uint64_t *a1)
{
  uint64_t v1;

  return sub_1A39F446C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1A39FFCBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8[13];
  uint64_t v9;
  _OWORD v10[5];
  _OWORD v11[2];

  v2 = *(_QWORD *)(a1 + 16);
  sub_1A39A3434();
  result = sub_1A3AB4ED4();
  v9 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      v5 = *(_OWORD *)(v4 + 80);
      v10[4] = *(_OWORD *)(v4 + 64);
      v11[0] = v5;
      *(_QWORD *)((char *)v11 + 13) = *(_QWORD *)(v4 + 93);
      v6 = *(_OWORD *)(v4 + 16);
      v10[0] = *(_OWORD *)v4;
      v10[1] = v6;
      v7 = *(_OWORD *)(v4 + 48);
      v10[2] = *(_OWORD *)(v4 + 32);
      v10[3] = v7;
      sub_1A39FA5C4((uint64_t)v10);
      sub_1A39F94B8((uint64_t)v8, (uint64_t)v10);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 104;
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

void sub_1A39FFDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  char v31;
  id v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  char v42;
  int v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67[5];
  __int16 v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  int v74;
  char v75;
  int v76;
  char v77;
  _QWORD v78[5];
  __int16 v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  int v85;
  char v86;
  int v87;
  char v88;
  uint64_t v89;

  if (a3 != a2)
  {
    v57 = *a4;
    v6 = *a4 + 104 * a3 - 104;
    v54 = a1;
LABEL_4:
    v56 = v6;
    v58 = a3;
    while (1)
    {
      v61 = a1;
      v7 = (_OWORD *)(v6 + 104);
      v8 = *(_QWORD *)(v6 + 120);
      v9 = *(_QWORD *)(v6 + 128);
      v10 = *(_QWORD *)(v6 + 136);
      v11 = *(_WORD *)(v6 + 144);
      v12 = *(_QWORD *)(v6 + 152);
      v13 = *(_BYTE *)(v6 + 160);
      v15 = *(_QWORD *)(v6 + 168);
      v14 = *(_QWORD *)(v6 + 176);
      v64 = *(void **)(v6 + 184);
      v66 = *(_QWORD *)(v6 + 112);
      v16 = *(_DWORD *)(v6 + 192);
      v17 = *(_BYTE *)(v6 + 196);
      v18 = *(_DWORD *)(v6 + 200);
      v19 = *(_BYTE *)(v6 + 204);
      v78[0] = *(_QWORD *)(v6 + 104);
      v78[1] = v66;
      v78[2] = v8;
      v78[3] = v9;
      v78[4] = v10;
      v79 = v11;
      v80 = v12;
      v81 = v13;
      v82 = v15;
      v83 = v14;
      v84 = v64;
      v85 = v16;
      v86 = v17;
      v87 = v18;
      v88 = v19;
      v20 = *(_QWORD *)(v6 + 8);
      v22 = *(_QWORD *)(v6 + 16);
      v21 = *(_QWORD *)(v6 + 24);
      v23 = *(_QWORD *)(v6 + 32);
      v24 = *(_WORD *)(v6 + 40);
      v25 = *(_QWORD *)(v6 + 48);
      v26 = *(_BYTE *)(v6 + 56);
      v27 = *(_QWORD *)(v6 + 64);
      v62 = *(_QWORD *)(v6 + 72);
      v63 = *(void **)(v6 + 80);
      v28 = *(_DWORD *)(v6 + 88);
      v29 = *(_BYTE *)(v6 + 92);
      v30 = *(_DWORD *)(v6 + 96);
      v31 = *(_BYTE *)(v6 + 100);
      v67[0] = *(_QWORD *)v6;
      v67[1] = v20;
      v67[2] = v22;
      v67[3] = v21;
      v67[4] = v23;
      v68 = v24;
      v69 = v25;
      v70 = v26;
      v71 = v27;
      v72 = v62;
      v73 = v63;
      v74 = v28;
      v75 = v29;
      v76 = v30;
      v77 = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65 = v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v32 = v63;
      v33 = v89;
      v34 = sub_1A39F5BEC((uint64_t)v78, v67, a5, a6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v89 = v33;
      if (v33)
        break;
      if ((v34 & 1) == 0)
      {
        v53 = v58;
LABEL_11:
        a3 = v53 + 1;
        v6 = v56 + 104;
        a1 = v54;
        if (a3 != a2)
          goto LABEL_4;
        return;
      }
      if (!v57)
      {
        __break(1u);
        return;
      }
      v35 = *(_QWORD *)(v6 + 128);
      v36 = *(_QWORD *)(v6 + 136);
      v37 = *(_WORD *)(v6 + 144);
      v38 = *(_QWORD *)(v6 + 152);
      v39 = *(_BYTE *)(v6 + 160);
      v40 = *(_QWORD *)(v6 + 184);
      v41 = *(_DWORD *)(v6 + 192);
      v42 = *(_BYTE *)(v6 + 196);
      v43 = *(_DWORD *)(v6 + 200);
      v44 = *(_BYTE *)(v6 + 204);
      v45 = *(_OWORD *)(v6 + 112);
      v46 = *(_OWORD *)(v6 + 168);
      v47 = *(_OWORD *)(v6 + 80);
      v48 = *(_QWORD *)(v6 + 96);
      v49 = *(_QWORD *)(v6 + 104);
      *(_OWORD *)(v6 + 168) = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(v6 + 184) = v47;
      *(_QWORD *)(v6 + 200) = v48;
      v50 = *(_OWORD *)(v6 + 16);
      *v7 = *(_OWORD *)v6;
      *(_OWORD *)(v6 + 120) = v50;
      *(_OWORD *)(v6 + 8) = v45;
      v52 = *(_OWORD *)(v6 + 32);
      v51 = *(_OWORD *)(v6 + 48);
      *(_QWORD *)v6 = v49;
      *(_QWORD *)(v6 + 24) = v35;
      *(_QWORD *)(v6 + 32) = v36;
      *(_WORD *)(v6 + 40) = v37;
      *(_QWORD *)(v6 + 48) = v38;
      *(_BYTE *)(v6 + 56) = v39;
      *(_OWORD *)(v6 + 64) = v46;
      *(_QWORD *)(v6 + 80) = v40;
      *(_DWORD *)(v6 + 88) = v41;
      *(_BYTE *)(v6 + 92) = v42;
      *(_DWORD *)(v6 + 96) = v43;
      *(_BYTE *)(v6 + 100) = v44;
      v6 -= 104;
      a1 = v61 + 1;
      v7[2] = v52;
      v7[3] = v51;
      v53 = v58;
      if (v58 == v61 + 1)
        goto LABEL_11;
    }
  }
}

unint64_t sub_1A3A000AC(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int v47;
  char v48;
  int v49;
  char *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char *v63;
  int v64;
  char v65;
  int v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int16 v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  int v79;
  char v80;
  char *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  char *v117;
  _BYTE *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  char *v129;
  void *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  int v138;
  char v139;
  int v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  char v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  unint64_t v208;
  unint64_t result;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  char v228;
  int v229;
  char v230;
  int v231;
  char v232;
  char v233;
  char v234;
  int v235;
  char v236;
  int v237;
  char v238;
  char v239;
  _OWORD *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char v244;
  char v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  char *v254;
  __int128 v255;
  uint64_t v256;
  int v257;
  char v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  __int16 v264;
  void *v265;
  id v266;
  char v267;
  char *v268;
  int v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  unint64_t v273;
  int v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  __int16 v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  int v289;
  char v290;
  int v291;
  char v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  __int16 v298;
  uint64_t v299;
  char v300;
  uint64_t v301;
  char *v302;
  char *v303;
  int v304;
  char v305;
  int v306;
  char v307;
  uint64_t v308;

  v4 = v3;
  v5 = a3;
  v8 = a1[1];
  sub_1A39EE2B4(a3);
  sub_1A39EE2B4(v5);
  sub_1A39EE2B4(v5);
  v9 = sub_1A3AB5618();
  if (v9 >= v8)
  {
    if (v8 < 0)
      goto LABEL_163;
    v13 = v5;
    if (v8)
    {
      sub_1A39EE2B4(v5);
      sub_1A39FFDA4(0, v8, 1, a1, a2, v5);
      sub_1A39FA578(v5);
      v13 = v5;
    }
    sub_1A39FA578(v13);
    sub_1A39FA578(v5);
    return sub_1A39FA578(v5);
  }
  v212 = v9;
  if (v8 >= 0)
    v10 = v8;
  else
    v10 = v8 + 1;
  if (v8 < -1)
    goto LABEL_162;
  v222 = v5;
  v226 = a2;
  v216 = v8;
  v210 = a1;
  if (v8 > 1)
  {
    v11 = v10 >> 1;
    v12 = sub_1A3AB4BF8();
    *(_QWORD *)(v12 + 16) = v11;
    v213 = v12;
    v217 = (char *)(v12 + 32);
LABEL_14:
    v15 = 0;
    v16 = *a1;
    v211 = *a1 + 308;
    v17 = (char *)MEMORY[0x1E0DEE9D8];
    v18 = v216;
    v225 = *a1;
    while (1)
    {
      v214 = v17;
      v19 = v15;
      v20 = v15 + 1;
      v224 = v15;
      if (v15 + 1 >= v18)
      {
        v53 = v216;
        v52 = v20;
      }
      else
      {
        v21 = v16 + 104 * v20;
        v23 = *(_QWORD *)v21;
        v22 = *(_QWORD *)(v21 + 8);
        v25 = *(_QWORD *)(v21 + 16);
        v24 = *(_QWORD *)(v21 + 24);
        v26 = *(_QWORD *)(v21 + 32);
        v27 = *(_WORD *)(v21 + 40);
        v28 = *(_QWORD *)(v21 + 48);
        v29 = *(_BYTE *)(v21 + 56);
        v31 = *(_QWORD *)(v21 + 64);
        v30 = *(char **)(v21 + 72);
        v262 = *(char **)(v21 + 80);
        v32 = *(_DWORD *)(v21 + 88);
        v33 = *(_BYTE *)(v21 + 92);
        v34 = *(_DWORD *)(v21 + 96);
        LOBYTE(v21) = *(_BYTE *)(v21 + 100);
        v293 = v23;
        v294 = v22;
        v295 = v25;
        v296 = v24;
        v297 = v26;
        v298 = v27;
        v299 = v28;
        v300 = v29;
        v301 = v31;
        v302 = v30;
        v303 = v262;
        v304 = v32;
        v305 = v33;
        v306 = v34;
        v307 = v21;
        v35 = v16 + 104 * v19;
        v36 = *(_QWORD *)v35;
        v37 = *(char **)(v35 + 8);
        v39 = *(_QWORD *)(v35 + 16);
        v38 = *(_QWORD *)(v35 + 24);
        v40 = *(char **)(v35 + 32);
        v41 = *(_WORD *)(v35 + 40);
        v42 = *(_QWORD *)(v35 + 48);
        v43 = *(_BYTE *)(v35 + 56);
        v248 = v4;
        v45 = *(_QWORD *)(v35 + 64);
        v44 = *(_QWORD *)(v35 + 72);
        v46 = *(void **)(v35 + 80);
        v47 = *(_DWORD *)(v35 + 88);
        v48 = *(_BYTE *)(v35 + 92);
        v49 = *(_DWORD *)(v35 + 96);
        LOBYTE(v35) = *(_BYTE *)(v35 + 100);
        v278 = v36;
        v279 = v37;
        v280 = v39;
        v281 = v38;
        v282 = v40;
        v283 = v41;
        v284 = v42;
        v285 = v43;
        v286 = v45;
        v287 = v44;
        v288 = v46;
        v289 = v47;
        v290 = v48;
        v291 = v49;
        v292 = v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v308 = (uint64_t)v30;
        swift_bridgeObjectRetain();
        v50 = v262;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51 = v46;
        v257 = sub_1A39F5BEC((uint64_t)&v293, &v278, v226, v222);
        if (v248)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

LABEL_137:
          swift_bridgeObjectRelease();
          v5 = v222;
          goto LABEL_138;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v19 = v224;
        v52 = v224 + 2;
        v53 = v216;
        if (v224 + 2 < v216)
        {
          v54 = (_BYTE *)(v211 + 104 * v224);
          while (1)
          {
            v218 = v52;
            v55 = *(_QWORD *)(v54 - 92);
            v56 = *(_QWORD *)(v54 - 84);
            v57 = *(_QWORD *)(v54 - 76);
            v58 = *(_QWORD *)(v54 - 68);
            v59 = *((_WORD *)v54 - 30);
            v60 = *(_QWORD *)(v54 - 52);
            v61 = *(v54 - 44);
            v62 = *(_QWORD *)(v54 - 36);
            v63 = *(char **)(v54 - 28);
            v263 = *(char **)(v54 - 20);
            v64 = *((_DWORD *)v54 - 3);
            v65 = *(v54 - 8);
            v66 = *((_DWORD *)v54 - 1);
            v67 = *v54;
            v293 = *(_QWORD *)(v54 - 100);
            v294 = v55;
            v295 = v56;
            v296 = v57;
            v297 = v58;
            v298 = v59;
            v299 = v60;
            v300 = v61;
            v301 = v62;
            v302 = v63;
            v303 = v263;
            v304 = v64;
            v305 = v65;
            v306 = v66;
            v307 = v67;
            v68 = *(char **)(v54 - 196);
            v69 = *(_QWORD *)(v54 - 188);
            v70 = *(_QWORD *)(v54 - 180);
            v71 = *(char **)(v54 - 172);
            v72 = *((_WORD *)v54 - 82);
            v73 = *(_QWORD *)(v54 - 156);
            v74 = *(v54 - 148);
            v75 = *(_QWORD *)(v54 - 140);
            v76 = *(_QWORD *)(v54 - 132);
            v260 = *(void **)(v54 - 124);
            v77 = *((_DWORD *)v54 - 29);
            v78 = *(v54 - 112);
            v79 = *((_DWORD *)v54 - 27);
            v80 = *(v54 - 104);
            v278 = *(_QWORD *)(v54 - 204);
            v279 = v68;
            v280 = v69;
            v281 = v70;
            v282 = v71;
            v283 = v72;
            v284 = v73;
            v285 = v74;
            v286 = v75;
            v287 = v76;
            v288 = v260;
            v289 = v77;
            v290 = v78;
            v291 = v79;
            v292 = v80;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v308 = (uint64_t)v63;
            swift_bridgeObjectRetain();
            v81 = v263;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v82 = v260;
            LODWORD(v63) = sub_1A39F5BEC((uint64_t)&v293, &v278, v226, v222);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            if (((v257 ^ v63) & 1) != 0)
              break;
            v52 = v218 + 1;
            v54 += 104;
            v53 = v216;
            if (v216 == v218 + 1)
            {
              v52 = v216;
              goto LABEL_24;
            }
          }
          v53 = v216;
          v52 = v218;
LABEL_24:
          v19 = v224;
        }
        v4 = 0;
        v16 = v225;
        if ((v257 & 1) != 0)
        {
          if (v52 < v19)
            goto LABEL_167;
          if (v19 < v52)
          {
            v83 = 104 * v52;
            v219 = v52;
            v84 = v19;
            v85 = 104 * v19;
            do
            {
              if (v84 != --v52)
              {
                if (!v16)
                  goto LABEL_170;
                v86 = *(_QWORD *)(v16 + v85);
                v87 = v225 + v83;
                v88 = *(_QWORD *)(v16 + v85 + 24);
                v89 = *(_QWORD *)(v16 + v85 + 32);
                v264 = *(_WORD *)(v16 + v85 + 40);
                v261 = *(_QWORD *)(v16 + v85 + 48);
                v258 = *(_BYTE *)(v16 + v85 + 56);
                v308 = *(_QWORD *)(v16 + v85 + 80);
                v274 = *(_DWORD *)(v16 + v85 + 88);
                v271 = *(_BYTE *)(v16 + v85 + 92);
                v269 = *(_DWORD *)(v16 + v85 + 96);
                v267 = *(_BYTE *)(v16 + v85 + 100);
                v253 = *(_OWORD *)(v16 + v85 + 8);
                v255 = *(_OWORD *)(v16 + v85 + 64);
                memmove((void *)(v16 + v85), (const void *)(v225 + v83 - 104), 0x68uLL);
                *(_QWORD *)(v87 - 104) = v86;
                *(_OWORD *)(v87 - 96) = v253;
                *(_QWORD *)(v87 - 80) = v88;
                *(_QWORD *)(v87 - 72) = v89;
                *(_WORD *)(v87 - 64) = v264;
                *(_QWORD *)(v87 - 56) = v261;
                *(_BYTE *)(v87 - 48) = v258;
                *(_OWORD *)(v87 - 40) = v255;
                *(_QWORD *)(v87 - 24) = v308;
                *(_DWORD *)(v87 - 16) = v274;
                *(_BYTE *)(v87 - 12) = v271;
                *(_DWORD *)(v87 - 8) = v269;
                *(_BYTE *)(v87 - 4) = v267;
                v19 = v224;
                v16 = v225;
              }
              ++v84;
              v83 -= 104;
              v85 += 104;
            }
            while (v84 < v52);
            v53 = v216;
            v52 = v219;
          }
        }
      }
      v249 = v4;
      if (v52 < v53)
      {
        if (__OFSUB__(v52, v19))
          goto LABEL_164;
        if (v52 - v19 < v212)
        {
          v90 = v19 + v212;
          if (__OFADD__(v19, v212))
            goto LABEL_165;
          if (v90 >= v53)
            v90 = v53;
          if (v90 < v19)
          {
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            sub_1A39FA578(v222);
            sub_1A39FA578(v222);
            sub_1A39FA578(v222);
            __break(1u);
LABEL_169:
            sub_1A39FA578(v222);
            sub_1A39FA578(v222);
            sub_1A39FA578(v222);
            __break(1u);
LABEL_170:
            sub_1A39FA578(v222);
            sub_1A39FA578(v222);
            sub_1A39FA578(v222);
            __break(1u);
            goto LABEL_171;
          }
          v215 = v90;
          if (v52 != v90)
            break;
        }
      }
LABEL_74:
      if (v52 < v224)
        goto LABEL_161;
      v147 = v16;
      v17 = v214;
      v221 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = sub_1A39D3764(0, *((_QWORD *)v214 + 2) + 1, 1, v214);
      v4 = v249;
      v149 = *((_QWORD *)v17 + 2);
      v148 = *((_QWORD *)v17 + 3);
      v150 = v149 + 1;
      if (v149 >= v148 >> 1)
      {
        v202 = sub_1A39D3764((char *)(v148 > 1), v149 + 1, 1, v17);
        v16 = v147;
        v17 = v202;
      }
      else
      {
        v16 = v147;
      }
      *((_QWORD *)v17 + 2) = v150;
      v151 = v17 + 32;
      v152 = &v17[16 * v149 + 32];
      *(_QWORD *)v152 = v224;
      *((_QWORD *)v152 + 1) = v221;
      if (v149)
      {
        while (1)
        {
          v153 = v150 - 1;
          if (v150 >= 4)
          {
            v158 = &v151[16 * v150];
            v159 = *((_QWORD *)v158 - 8);
            v160 = *((_QWORD *)v158 - 7);
            v164 = __OFSUB__(v160, v159);
            v161 = v160 - v159;
            if (v164)
              goto LABEL_147;
            v163 = *((_QWORD *)v158 - 6);
            v162 = *((_QWORD *)v158 - 5);
            v164 = __OFSUB__(v162, v163);
            v156 = v162 - v163;
            v157 = v164;
            if (v164)
              goto LABEL_148;
            v165 = v150 - 2;
            v166 = &v151[16 * v150 - 32];
            v168 = *(_QWORD *)v166;
            v167 = *((_QWORD *)v166 + 1);
            v164 = __OFSUB__(v167, v168);
            v169 = v167 - v168;
            if (v164)
              goto LABEL_150;
            v164 = __OFADD__(v156, v169);
            v170 = v156 + v169;
            if (v164)
              goto LABEL_151;
            if (v170 >= v161)
            {
              v188 = &v151[16 * v153];
              v190 = *(_QWORD *)v188;
              v189 = *((_QWORD *)v188 + 1);
              v164 = __OFSUB__(v189, v190);
              v191 = v189 - v190;
              if (v164)
                goto LABEL_157;
              v181 = v156 < v191;
              goto LABEL_111;
            }
          }
          else
          {
            if (v150 != 3)
            {
              v182 = *((_QWORD *)v17 + 4);
              v183 = *((_QWORD *)v17 + 5);
              v164 = __OFSUB__(v183, v182);
              v175 = v183 - v182;
              v176 = v164;
              goto LABEL_105;
            }
            v155 = *((_QWORD *)v17 + 4);
            v154 = *((_QWORD *)v17 + 5);
            v164 = __OFSUB__(v154, v155);
            v156 = v154 - v155;
            v157 = v164;
          }
          if ((v157 & 1) != 0)
            goto LABEL_149;
          v165 = v150 - 2;
          v171 = &v151[16 * v150 - 32];
          v173 = *(_QWORD *)v171;
          v172 = *((_QWORD *)v171 + 1);
          v174 = __OFSUB__(v172, v173);
          v175 = v172 - v173;
          v176 = v174;
          if (v174)
            goto LABEL_152;
          v177 = &v151[16 * v153];
          v179 = *(_QWORD *)v177;
          v178 = *((_QWORD *)v177 + 1);
          v164 = __OFSUB__(v178, v179);
          v180 = v178 - v179;
          if (v164)
            goto LABEL_155;
          if (__OFADD__(v175, v180))
            goto LABEL_156;
          if (v175 + v180 >= v156)
          {
            v181 = v156 < v180;
LABEL_111:
            if (v181)
              v153 = v165;
            goto LABEL_113;
          }
LABEL_105:
          if ((v176 & 1) != 0)
            goto LABEL_153;
          v184 = &v151[16 * v153];
          v186 = *(_QWORD *)v184;
          v185 = *((_QWORD *)v184 + 1);
          v164 = __OFSUB__(v185, v186);
          v187 = v185 - v186;
          if (v164)
            goto LABEL_154;
          if (v187 < v175)
            goto LABEL_122;
LABEL_113:
          v192 = v153 - 1;
          if (v153 - 1 >= v150)
          {
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
            goto LABEL_166;
          }
          if (!v16)
            goto LABEL_169;
          v193 = v4;
          v194 = &v151[16 * v192];
          v195 = *(_QWORD *)v194;
          v196 = v153;
          v197 = &v151[16 * v153];
          v198 = *(_QWORD *)v197;
          v199 = *((_QWORD *)v197 + 1);
          v308 = v16 + 104 * *(_QWORD *)v194;
          v273 = v16 + 104 * v199;
          v276 = (char *)(v16 + 104 * v198);
          sub_1A39EE2B4(v222);
          sub_1A39FD8D4((char *)v308, v276, v273, v217, v226, v222);
          if (v193)
            goto LABEL_137;
          if (v199 < v195)
            goto LABEL_144;
          if (v196 > *((_QWORD *)v17 + 2))
            goto LABEL_145;
          v200 = v196;
          *(_QWORD *)v194 = v195;
          v151 = v17 + 32;
          *(_QWORD *)&v17[16 * v192 + 40] = v199;
          v201 = *((_QWORD *)v17 + 2);
          if (v200 >= v201)
            goto LABEL_146;
          v150 = v201 - 1;
          memmove(v197, v197 + 16, 16 * (v201 - 1 - v200));
          *((_QWORD *)v17 + 2) = v201 - 1;
          v4 = 0;
          v16 = v225;
          if (v201 <= 2)
            goto LABEL_122;
        }
      }
      v150 = 1;
LABEL_122:
      v18 = v216;
      v15 = v221;
      if (v221 >= v216)
      {
        v14 = v213;
        goto LABEL_127;
      }
    }
    while (2)
    {
      v220 = v52;
      v91 = v52;
LABEL_45:
      v241 = v91;
      v92 = v16 + 104 * v91;
      v93 = *(_QWORD *)(v92 + 8);
      v243 = *(_QWORD *)v92;
      v94 = *(_QWORD *)(v92 + 16);
      v247 = *(_QWORD *)(v92 + 24);
      v95 = *(_QWORD *)(v92 + 32);
      v245 = *(_BYTE *)(v92 + 40);
      v252 = *(_QWORD *)(v92 + 48);
      v238 = *(_BYTE *)(v92 + 56);
      v239 = *(_BYTE *)(v92 + 41);
      v96 = *(_QWORD *)(v92 + 64);
      v97 = *(char **)(v92 + 72);
      v308 = *(_QWORD *)(v92 + 80);
      v236 = *(_BYTE *)(v92 + 92);
      v237 = *(_DWORD *)(v92 + 88);
      v234 = *(_BYTE *)(v92 + 100);
      v235 = *(_DWORD *)(v92 + 96);
      v242 = *(_QWORD *)(v92 - 104);
      v240 = (_OWORD *)(v92 - 104);
      v99 = *(char **)(v92 - 96);
      v98 = *(_QWORD *)(v92 - 88);
      v100 = *(char **)(v92 - 72);
      v246 = *(_QWORD *)(v92 - 80);
      v244 = *(_BYTE *)(v92 - 64);
      v251 = *(_QWORD *)(v92 - 56);
      v232 = *(_BYTE *)(v92 - 48);
      v233 = *(_BYTE *)(v92 - 63);
      v101 = *(_QWORD *)(v92 - 40);
      v102 = *(_QWORD *)(v92 - 32);
      v265 = *(void **)(v92 - 24);
      v230 = *(_BYTE *)(v92 - 12);
      v231 = *(_DWORD *)(v92 - 16);
      v228 = *(_BYTE *)(v92 - 4);
      v229 = *(_DWORD *)(v92 - 8);
      v270 = v93;
      swift_bridgeObjectRetain();
      v256 = v94;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      v254 = v97;
      swift_bridgeObjectRetain();
      v275 = (char *)(id)v308;
      v308 = (uint64_t)v99;
      swift_bridgeObjectRetain();
      v272 = v98;
      swift_bridgeObjectRetain();
      v268 = v100;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v259 = v102;
      swift_bridgeObjectRetain();
      v103 = v265;
      v104 = sub_1A39F4EF4(v96, v226);
      swift_bridgeObjectRelease();
      v105 = swift_bridgeObjectRetain();
      LODWORD(v98) = sub_1A39F4EF4(v105, v226);
      swift_bridgeObjectRelease();
      if (((v104 ^ v98) & 1) != 0
        || (v266 = v103,
            v106 = swift_bridgeObjectRetain(),
            v104 = sub_1A39F51B8(v106, v226),
            swift_bridgeObjectRelease(),
            v107 = swift_bridgeObjectRetain(),
            v108 = sub_1A39F51B8(v107, v226),
            swift_bridgeObjectRelease(),
            ((v104 ^ v108) & 1) != 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v109 = v241;
        v16 = v225;
        if ((v104 & 1) != 0)
          goto LABEL_70;
LABEL_43:
        v52 = v220 + 1;
        if (v220 + 1 == v215)
        {
          v52 = v215;
          goto LABEL_74;
        }
        continue;
      }
      break;
    }
    v227 = v101;
    v293 = v222;
    v223 = sub_1A39F637C();
    v110 = *(_QWORD *)(v223 + 16);
    v112 = v272;
    v111 = v275;
    v113 = v256;
    v114 = v270;
    v115 = v259;
    v116 = v103;
    v117 = (char *)v308;
    if (!v110)
    {
LABEL_64:
      v128 = v116;
      swift_bridgeObjectRelease();
      v293 = v243;
      v294 = v114;
      v278 = v242;
      v279 = v117;
      sub_1A39A9EC0();
      v124 = sub_1A3AB5180();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_69;
    }
    v118 = (_BYTE *)(v223 + 48);
    while (1)
    {
      v121 = v96;
      v122 = *((_QWORD *)v118 - 2);
      if (*v118)
      {
        v123 = *((_QWORD *)v118 - 1);
        if (*v118 == 1)
        {
          v293 = v243;
          v294 = v114;
          v295 = v113;
          v296 = v247;
          v297 = v95;
          LOBYTE(v298) = v245;
          HIBYTE(v298) = v239;
          v299 = v252;
          v300 = v238;
          v301 = v121;
          v302 = v254;
          v303 = v111;
          v304 = v237;
          v305 = v236;
          v306 = v235;
          v307 = v234;
          v278 = v242;
          v279 = (char *)v308;
          v280 = v112;
          v281 = v246;
          v282 = v268;
          LOBYTE(v283) = v244;
          HIBYTE(v283) = v233;
          v284 = v251;
          v285 = v232;
          v286 = v227;
          v287 = v115;
          v288 = v116;
          v289 = v231;
          v290 = v230;
          v291 = v229;
          v292 = v228;
          swift_retain();
          v124 = ((uint64_t (*)(unint64_t *, uint64_t *))v122)(&v293, &v278);
          v125 = v122;
          v96 = v121;
          sub_1A39FAC60(v125, v123, 1);
          goto LABEL_58;
        }
        if (v122 | v123)
        {
          v293 = v247;
          v294 = v95;
          v278 = v246;
          v279 = v268;
          sub_1A39A9EC0();
          v124 = sub_1A3AB5180();
          v96 = v121;
LABEL_58:
          v112 = v272;
          v111 = v275;
          v116 = v266;
          v117 = (char *)v308;
          if (v124)
            goto LABEL_68;
          goto LABEL_52;
        }
        sub_1A39FAC78();
        sub_1A3AB4B74();
        v115 = v259;
        sub_1A3AB4B74();
        v96 = v121;
        v112 = v272;
        v111 = v275;
        v116 = v266;
        v117 = (char *)v308;
        if (v293 != v278)
        {
          LOBYTE(v293) = v245;
          v126 = CoreSynthesizer.Voice.Quality.rawValue.getter();
          LOBYTE(v293) = v244;
          v127 = CoreSynthesizer.Voice.Quality.rawValue.getter();
          v116 = v266;
          v111 = v275;
          if (v127 < v126)
            v124 = -1;
          else
            v124 = 1;
          goto LABEL_68;
        }
      }
      else
      {
        v293 = *((_QWORD *)v118 - 2);
        v278 = v252;
        sub_1A39AE770();
        v119 = sub_1A3AB51C8();
        v293 = v122;
        v278 = v251;
        v115 = v259;
        v113 = v256;
        v120 = sub_1A3AB51C8();
        v116 = v266;
        v112 = v272;
        v111 = v275;
        v96 = v121;
        v117 = (char *)v308;
        if (((v119 ^ v120) & 1) != 0)
        {
          if ((v119 & 1) != 0)
            v124 = -1;
          else
            v124 = 1;
LABEL_68:
          v129 = v111;
          v130 = v116;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

LABEL_69:
          v109 = v241;
          v16 = v225;
          if (v124 != -1)
            goto LABEL_43;
LABEL_70:
          if (!v16)
            goto LABEL_168;
          v91 = v109 - 1;
          v131 = *(_QWORD *)v92;
          v132 = *(_QWORD *)(v92 + 24);
          v133 = *(_QWORD *)(v92 + 32);
          v134 = *(_WORD *)(v92 + 40);
          v135 = *(_QWORD *)(v92 + 48);
          v136 = *(_BYTE *)(v92 + 56);
          v137 = *(_QWORD *)(v92 + 80);
          v138 = *(_DWORD *)(v92 + 88);
          v139 = *(_BYTE *)(v92 + 92);
          v140 = *(_DWORD *)(v92 + 96);
          v141 = *(_BYTE *)(v92 + 100);
          v142 = *(_OWORD *)(v92 + 8);
          v143 = *(_OWORD *)(v92 + 64);
          v144 = *(_OWORD *)(v92 - 24);
          *(_OWORD *)(v92 + 64) = *(_OWORD *)(v92 - 40);
          *(_OWORD *)(v92 + 80) = v144;
          *(_QWORD *)(v92 + 96) = *(_QWORD *)(v92 - 8);
          v145 = *(_OWORD *)(v92 - 88);
          *(_OWORD *)v92 = *v240;
          *(_OWORD *)(v92 + 16) = v145;
          v146 = *(_OWORD *)(v92 - 56);
          *(_OWORD *)(v92 + 32) = *(_OWORD *)(v92 - 72);
          *(_OWORD *)(v92 + 48) = v146;
          *(_QWORD *)v240 = v131;
          *(_OWORD *)(v92 - 96) = v142;
          *(_QWORD *)(v92 - 80) = v132;
          *(_QWORD *)(v92 - 72) = v133;
          *(_WORD *)(v92 - 64) = v134;
          *(_QWORD *)(v92 - 56) = v135;
          *(_BYTE *)(v92 - 48) = v136;
          *(_OWORD *)(v92 - 40) = v143;
          *(_QWORD *)(v92 - 24) = v137;
          *(_DWORD *)(v92 - 16) = v138;
          *(_BYTE *)(v92 - 12) = v139;
          *(_DWORD *)(v92 - 8) = v140;
          *(_BYTE *)(v92 - 4) = v141;
          if (v91 == v224)
            goto LABEL_43;
          goto LABEL_45;
        }
      }
LABEL_52:
      v118 += 24;
      --v110;
      v114 = v270;
      if (!v110)
        goto LABEL_64;
    }
  }
  v14 = MEMORY[0x1E0DEE9D8];
  v217 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if (v8 == 1)
  {
    v213 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v150 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v17 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_127:
  v250 = v4;
  v213 = v14;
  if (v150 < 2)
  {
LABEL_136:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v213 + 16) = 0;
    swift_bridgeObjectRelease();
    v5 = v222;
LABEL_139:
    sub_1A39FA578(v5);
    sub_1A39FA578(v5);
    return sub_1A39FA578(v5);
  }
  v277 = *v210;
  if (*v210)
  {
    while (1)
    {
      v203 = v150 - 2;
      v204 = *(_QWORD *)&v17[16 * v150];
      v308 = v150 - 1;
      v205 = *(_QWORD *)&v17[16 * v150 + 24];
      v206 = (char *)(v277 + 104 * *(_QWORD *)&v17[16 * v150 + 16]);
      v5 = v222;
      sub_1A39EE2B4(v222);
      sub_1A39FD8D4((char *)(v277 + 104 * v204), v206, v277 + 104 * v205, v217, v226, v222);
      if (v250)
        break;
      if (v205 < v204)
        goto LABEL_158;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = sub_1A39D385C((uint64_t)v17);
      if (v203 >= *((_QWORD *)v17 + 2))
        goto LABEL_159;
      v207 = &v17[16 * v203 + 32];
      *(_QWORD *)v207 = v204;
      *((_QWORD *)v207 + 1) = v205;
      v208 = *((_QWORD *)v17 + 2);
      if (v150 > v208)
        goto LABEL_160;
      memmove(&v17[16 * v308 + 32], &v17[16 * v150 + 32], 16 * (v208 - 1 - v308));
      *((_QWORD *)v17 + 2) = v208 - 1;
      v150 = v208 - 1;
      if (v208 <= 2)
        goto LABEL_136;
    }
    swift_bridgeObjectRelease();
LABEL_138:
    *(_QWORD *)(v213 + 16) = 0;
    swift_bridgeObjectRelease();
    goto LABEL_139;
  }
LABEL_171:
  sub_1A39FA578(v222);
  sub_1A39FA578(v222);
  result = sub_1A39FA578(v222);
  __break(1u);
  return result;
}

unint64_t sub_1A3A014A8(char **a1, unint64_t a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v9[2];

  v6 = *a1;
  sub_1A39EE2B4(a3);
  sub_1A39EE2B4(a3);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = sub_1A39FF558((uint64_t)v6);
  v7 = *((_QWORD *)v6 + 2);
  v9[0] = (uint64_t)(v6 + 32);
  v9[1] = v7;
  sub_1A39EE2B4(a3);
  sub_1A3A000AC(v9, a2, a3);
  sub_1A39FA578(a3);
  *a1 = v6;
  sub_1A39FA578(a3);
  return sub_1A39FA578(a3);
}

uint64_t sub_1A3A01560(uint64_t a1)
{
  uint64_t v1;

  return sub_1A39F4C8C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1A3A0158C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A3A015B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A39D5174;
  return sub_1A39EE588(a1, v1);
}

uint64_t sub_1A3A01604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE6D34D8 + dword_1EE6D34D8))(a1, v4);
}

unint64_t sub_1A3A01674()
{
  unint64_t result;

  result = qword_1ED1B5338;
  if (!qword_1ED1B5338)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Trait, &type metadata for CoreSynthesizer.Voice.Trait);
    atomic_store(result, (unint64_t *)&qword_1ED1B5338);
  }
  return result;
}

unint64_t sub_1A3A016B8()
{
  unint64_t result;

  result = qword_1ED1B5350;
  if (!qword_1ED1B5350)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Trait, &type metadata for CoreSynthesizer.Voice.Trait);
    atomic_store(result, (unint64_t *)&qword_1ED1B5350);
  }
  return result;
}

id sub_1A3A01720(uint64_t a1)
{
  return sub_1A3A017C0(a1, 0xD000000000000063, 0x80000001A3AF0CB0, &qword_1EE6E6D78);
}

id sub_1A3A01748(uint64_t a1)
{
  return sub_1A3A017C0(a1, 0xD000000000000083, 0x80000001A3AF0FD0, &qword_1EE6E6D80);
}

id sub_1A3A01770(uint64_t a1)
{
  return sub_1A3A017C0(a1, 0xD00000000000001CLL, 0x80000001A3AF0FB0, &qword_1EE6E6D88);
}

id sub_1A3A01798(uint64_t a1)
{
  return sub_1A3A017C0(a1, 0xD000000000000064, 0x80000001A3AF0F10, &qword_1EE6E6D90);
}

id sub_1A3A017C0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id result;

  v7 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  result = sub_1A3A03838(a2, a3, 0);
  *a4 = result;
  return result;
}

BOOL sub_1A3A01848(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1A3A0185C()
{
  return sub_1A3AB5708();
}

uint64_t sub_1A3A01884()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

void *sub_1A3A018C4()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

void sub_1A3A01904(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;

}

uint64_t (*sub_1A3A01948())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void *sub_1A3A01984()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 48);
  v2 = v1;
  return v1;
}

void sub_1A3A019C4(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;

}

uint64_t (*sub_1A3A01A08())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void *sub_1A3A01A44()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void sub_1A3A01A84(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;

}

uint64_t (*sub_1A3A01AC8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A01B04()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_1A3A01B34(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_1A3A01B70())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A01BAC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t sub_1A3A01BDC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 65) = a1;
  return result;
}

uint64_t (*sub_1A3A01C18())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A01C54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 312))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3A01C84(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 320);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A3A01CB4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A01CE8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A3A01D2C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A3A01D68()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t sub_1A3A01D98(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 80) = a1;
  return result;
}

uint64_t (*sub_1A3A01DD4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A01E10()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A01E44(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A3A01E88())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A01EC4()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 96);
}

uint64_t sub_1A3A01EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*sub_1A3A01F30())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A01F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
  result = sub_1A3AB4A48();
  if (result < v1)
  {
    __break(1u);
  }
  else
  {
    v3 = sub_1A3AB4A60();
    result = sub_1A3AB4A60();
    if ((unint64_t)result >> 14 >= v3 >> 14)
    {
      v4 = sub_1A3AB4B38();
      v5 = MEMORY[0x1A85957F4](v4);
      swift_bridgeObjectRelease();
      return v5;
    }
  }
  __break(1u);
  return result;
}

void sub_1A3A0202C()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void);
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))() & 1) != 0)
  {
    if (qword_1EE6D85B8 != -1)
      swift_once();
    v1 = (void *)qword_1EE6E6D88;
    v2 = *(void (**)(void))(*(_QWORD *)v0 + 408);
    v2();
    v3 = (void *)sub_1A3AB4958();
    v4 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t))v2)(v4);
    v5 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t))v2)(v5);
    sub_1A39A4820(&qword_1EE6D34F0);
    sub_1A3A03910();
    sub_1A39A9EC0();
    v6 = sub_1A3AB50E4();
    v8 = objc_msgSend(v1, sel_matchesInString_options_range_, v3, 0, v6, v7);

    sub_1A3A0395C();
    v9 = sub_1A3AB4BB0();

    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = sub_1A3AB5480();
      swift_bridgeObjectRelease();
      if (v16)
      {
LABEL_6:
        if ((v9 & 0xC000000000000001) != 0)
        {
          v10 = (id)MEMORY[0x1A85960B8](0, v9);
        }
        else
        {
          if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_17;
          }
          v10 = *(id *)(v9 + 32);
        }
        v11 = v10;
        swift_bridgeObjectRelease();
        objc_msgSend(v11, sel_range);
        v13 = v12;

        v2();
        if ((v13 & 0x8000000000000000) == 0)
        {
          v14 = sub_1A3AB4A60();
          if ((unint64_t)sub_1A3AB4A60() >> 14 >= v14 >> 14)
          {
            v15 = sub_1A3AB4B38();
            MEMORY[0x1A85957F4](v15);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          goto LABEL_18;
        }
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        return;
      }
    }
    else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A3A0229C()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  id v2;
  id v3;
  void (*v4)(void);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1EE6D85A8 != -1)
    swift_once();
  v1 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 288);
  v2 = (id)qword_1EE6E6D78;
  if ((v1() & 1) == 0)
    goto LABEL_6;
  if (qword_1EE6D85B0 != -1)
    goto LABEL_21;
  while (1)
  {
    v3 = (id)qword_1EE6E6D80;

    v2 = v3;
LABEL_6:
    v4 = *(void (**)(void))(*(_QWORD *)v0 + 408);
    v4();
    v5 = (void *)sub_1A3AB4958();
    v6 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t))v4)(v6);
    v7 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t))v4)(v7);
    sub_1A39A4820(&qword_1EE6D34F0);
    sub_1A3A03910();
    sub_1A39A9EC0();
    v8 = sub_1A3AB50E4();
    v10 = objc_msgSend(v2, sel_matchesInString_options_range_, v5, 0, v8, v9);

    sub_1A3A0395C();
    v11 = sub_1A3AB4BB0();

    if (v11 >> 62)
      break;
    if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
LABEL_8:
    if ((v11 & 0xC000000000000001) != 0)
    {
      v12 = (id)MEMORY[0x1A85960B8](0, v11);
    }
    else
    {
      if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      v12 = *(id *)(v11 + 32);
    }
    v13 = v12;
    v14 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t))v4)(v14);
    v0 = v15;
    if (((unint64_t)objc_msgSend(v13, sel_range) & 0x8000000000000000) != 0)
      goto LABEL_19;
    v16 = sub_1A3AB4A60();
    if ((unint64_t)sub_1A3AB4A60() >> 14 >= v16 >> 14)
    {
      v17 = sub_1A3AB4B38();
      v18 = MEMORY[0x1A85957F4](v17);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
  }
  swift_bridgeObjectRetain();
  v19 = sub_1A3AB5480();
  swift_bridgeObjectRelease();
  if (v19)
    goto LABEL_8;
LABEL_15:
  v20 = swift_bridgeObjectRelease();
  v18 = ((uint64_t (*)(uint64_t))v4)(v20);

  return v18;
}

uint64_t sub_1A3A02558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD **v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[32];
  __int128 v13[2];

  if ((*(unsigned __int8 (**)(void))(*(_QWORD *)v1 + 336))())
  {
    sub_1A39A1AD0(a1, (uint64_t)v13);
    v3 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 376))(v12);
  }
  else
  {
    sub_1A39A1AD0(a1, (uint64_t)v13);
    v3 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 328))(v12);
  }
  v5 = (uint64_t (*)(_BYTE *, _QWORD))v3;
  v6 = v4;
  v7 = *v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = sub_1A39BFBD8(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = sub_1A39BFBD8((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  sub_1A39A1AB8(v13, (uint64_t)&v7[5 * v10 + 4]);
  return v5(v12, 0);
}

uint64_t sub_1A3A02668()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v0 + 368))(MEMORY[0x1E0DEE9D8]);
}

void sub_1A3A0267C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void (*v3)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  char v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD *, _QWORD);
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  float v53;
  float v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  id v65;
  char v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  _QWORD v74[6];

  if (qword_1EE6D85C0 != -1)
    swift_once();
  v2 = (void *)qword_1EE6E6D90;
  v3 = *(void (**)(void))(*(_QWORD *)v0 + 408);
  v3();
  v4 = (void *)sub_1A3AB4958();
  v5 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t))v3)(v5);
  v6 = swift_bridgeObjectRelease();
  v74[5] = 15;
  v74[0] = ((uint64_t (*)(uint64_t))v3)(v6);
  v74[1] = v7;
  sub_1A39A4820(&qword_1EE6D34F0);
  v8 = (id)sub_1A3A03910();
  sub_1A39A9EC0();
  v9 = sub_1A3AB50E4();
  v11 = objc_msgSend(v2, sel_matchesInString_options_range_, v4, 0, v9, v10);

  sub_1A3A0395C();
  v12 = sub_1A3AB4BB0();

  if (!(v12 >> 62))
  {
    v13 = *(void **)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_5;
LABEL_39:
    swift_bridgeObjectRelease();
    v55 = sub_1A3AB4FD0();
    v13 = sub_1A3A12674();
    v56 = sub_1A3A04828();
    sub_1A3A126B4(v55, (uint64_t)v13, v56 & 1, 0xD000000000000080, 0x80000001A3AF0D20, 0x6D6F436573726170, 0xEE002928646E616DLL);
LABEL_40:

    return;
  }
  swift_bridgeObjectRetain();
  v13 = (void *)sub_1A3AB5480();
  swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_39;
LABEL_5:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v14 = (id)MEMORY[0x1A85960B8](0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_43;
    }
    v14 = *(id *)(v12 + 32);
  }
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = (void *)sub_1A3AB4958();
  objc_msgSend(v15, sel_rangeWithName_, v16);

  v3();
  v8 = (id)sub_1A3AB4FA0();
  v1 = v17;
  v19 = v18;
  swift_bridgeObjectRelease();
  v20 = (void *)sub_1A3AB4958();
  v73 = v15;
  objc_msgSend(v15, sel_rangeWithName_, v20);

  v3();
  sub_1A3AB4FA0();
  v22 = v21;
  v24 = v23;
  v25 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t))v3)(v25);
  if ((v19 & 1) != 0)
  {
    __break(1u);
    goto LABEL_82;
  }
  v26 = v3;
  v27 = sub_1A3AB4B38();
  v29 = v28;
  v31 = v30;
  v33 = v32;
  swift_bridgeObjectRelease();
  v1 = MEMORY[0x1A85957F4](v27, v29, v31, v33);
  v8 = v34;
  v35 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t))v26)(v35);
  if ((v24 & 1) != 0)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v36 = sub_1A3AB4B38();
  v38 = v37;
  v40 = v39;
  v42 = v41;
  swift_bridgeObjectRelease();
  MEMORY[0x1A85957F4](v36, v38, v40, v42);
  swift_bridgeObjectRelease();
  if (v1 == 1702125938 && v8 == (id)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v13 = v73;
LABEL_15:
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
    objc_msgSend(v8, sel_setNumberStyle_, 1);
    v43 = (void *)sub_1A3AB4958();
    v1 = (uint64_t)objc_msgSend(v8, sel_numberFromString_, v43);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 176))(v1);
    goto LABEL_16;
  }
  v13 = v73;
  if ((sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v1 == 1935762032 && v8 == (id)0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
    objc_msgSend(v8, sel_setNumberStyle_, 1);
    v49 = (void *)sub_1A3AB4958();
    v1 = (uint64_t)objc_msgSend(v8, sel_numberFromString_, v49);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 224))(v1);
    goto LABEL_16;
  }
  if (v1 == 1685024112 && v8 == (id)0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
    objc_msgSend(v8, sel_setNumberStyle_, 1);
    v50 = (void *)sub_1A3AB4958();
    v1 = (uint64_t)objc_msgSend(v8, sel_numberFromString_, v50);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 248))(v1);
    goto LABEL_16;
  }
  if (v1 == 1835822966 && v8 == (id)0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
    objc_msgSend(v8, sel_setNumberStyle_, 1);
    v51 = (void *)sub_1A3AB4958();
    v1 = (uint64_t)objc_msgSend(v8, sel_numberFromString_, v51);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 200))(v1);
    goto LABEL_16;
  }
  if ((v1 != 1668181107 || v8 != (id)0xE400000000000000) && (sub_1A3AB5654() & 1) == 0)
  {
    if (v1 == 1918986339 && v8 == (id)0xE400000000000000)
      goto LABEL_45;
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
  objc_msgSend(v8, sel_setNumberStyle_, 1);
  v1 = sub_1A3AB4958();
  v52 = objc_msgSend(v8, sel_numberFromString_, v1);
  swift_bridgeObjectRelease();

  if (v52)
  {
    objc_msgSend(v52, sel_floatValue);
    v54 = v53;

    v74[3] = &type metadata for TTSMarkup.Pause;
    v74[4] = &protocol witness table for TTSMarkup.Pause;
    v74[0] = swift_allocObject();
    TTSMarkup.Pause.init(seconds:)(v74[0] + 16, v54 / 1000.0);
    (*(void (**)(_QWORD *))(*(_QWORD *)v0 + 432))(v74);
    sub_1A39A47C4((uint64_t)v74);
    while (1)
    {
      while (1)
      {
LABEL_16:
        objc_msgSend(v13, sel_range, v71, v72);
        v45 = v44;
        v46 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v0 + 400))(v74);
        if (!__OFADD__(*v47, v45))
        {
          *v47 += v45;
          v48 = v46(v74, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v0 + 464))(v48);
          goto LABEL_40;
        }
LABEL_43:
        __break(1u);
LABEL_44:
        if ((sub_1A3AB5654() & 1) == 0)
          break;
LABEL_45:
        swift_bridgeObjectRelease();
        v1 = 1819440236;
        v8 = (id)sub_1A3AB49F4();
        v58 = v57;
        swift_bridgeObjectRelease();
        if (v8 == (id)1819440236 && v58 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
          v59 = 1;
        }
        else
        {
          v59 = sub_1A3AB5654();
          swift_bridgeObjectRelease();
        }
        (*(void (**)(_QWORD))(*(_QWORD *)v0 + 272))(v59 & 1);
      }
      if (v1 == 1919053166 && v8 == (id)0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v1 = 1819440236;
        v8 = (id)sub_1A3AB49F4();
        v61 = v60;
        swift_bridgeObjectRelease();
        if (v8 == (id)1819440236 && v61 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
          v62 = 1;
        }
        else
        {
          v62 = sub_1A3AB5654();
          swift_bridgeObjectRelease();
        }
        (*(void (**)(_QWORD))(*(_QWORD *)v0 + 296))(v62 & 1);
      }
      else
      {
        if (v1 == 1954051171 && v8 == (id)0xE400000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v1 = sub_1A3AB5654();
          swift_bridgeObjectRelease();
          if ((v1 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v64 = sub_1A3AB4FDC();
            v65 = sub_1A3A12674();
            v66 = sub_1A3A04828();
            v67 = MEMORY[0x1E0DEE9D8];
            v68 = "Unhandled PlainTalk Command";
LABEL_72:
            v71 = (unint64_t)(v68 - 32) | 0x8000000000000000;
            v72 = v67;
            sub_1A3A126B4(v64, (uint64_t)v65, v66 & 1, 0xD000000000000080, 0x80000001A3AF0D20, 0x6D6F436573726170, 0xEE002928646E616DLL);

            goto LABEL_58;
          }
        }
        v1 = 1886090100;
        v8 = (id)sub_1A3AB49F4();
        v22 = v63;
        swift_bridgeObjectRelease();
        if (v8 == (id)1886090103 && v22 == 0xE400000000000000
          || (sub_1A3AB5654() & 1) != 0
          || v8 == (id)1886090100 && v22 == 0xE400000000000000
          || (sub_1A3AB5654() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))(*(_QWORD *)v0 + 344))(1);
          goto LABEL_58;
        }
        if (v8 == (id)1685221239 && v22 == 0xE400000000000000
          || (sub_1A3AB5654() & 1) != 0
          || v8 == (id)1954047348 && v22 == 0xE400000000000000
          || (sub_1A3AB5654() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))(*(_QWORD *)v0 + 344))(2);
        }
        else
        {
LABEL_83:
          if (v8 == (id)1836216174 && v22 == 0xE400000000000000)
          {
            v69 = swift_bridgeObjectRelease();
          }
          else
          {
            v70 = sub_1A3AB5654();
            v69 = swift_bridgeObjectRelease();
            if ((v70 & 1) == 0)
            {
              v64 = sub_1A3AB4FDC();
              v65 = sub_1A3A12674();
              v66 = sub_1A3A04828();
              v67 = MEMORY[0x1E0DEE9D8];
              v68 = "Unexpected ctxt value";
              goto LABEL_72;
            }
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v0 + 440))(v69);
          (*(void (**)(_QWORD))(*(_QWORD *)v0 + 344))(0);
        }
      }
LABEL_58:
      v13 = v73;
    }
  }
  __break(1u);
}

void sub_1A3A03368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  ValueMetadata *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void);
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  void (*v23)(_QWORD *);
  id v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD *, _QWORD);
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[3];
  ValueMetadata *v30;
  _UNKNOWN **v31;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
  v3 = v2;
  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))() & 1) != 0)
  {
    v4 = *(void (**)(void))(*(_QWORD *)v0 + 416);
    v4();
    v6 = v5;
    swift_bridgeObjectRelease();
    if (v6)
    {
      v7 = swift_bridgeObjectRelease();
      v1 = ((uint64_t (*)(uint64_t))v4)(v7);
      v3 = v8;
    }
  }
  if (!v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v9 = TTSMarkup.SpeechText.init(_:)(v1, v3, v29);
  v11 = (void *)v29[0];
  v10 = v29[1];
  v13 = v29[2];
  v12 = v30;
  v14 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 168);
  v15 = (void *)((uint64_t (*)(uint64_t))v14)(v9);

  if (v15)
  {
    v16 = (void *)v14();
    if (!v16)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_16;
    }
    v17 = v16;
    objc_msgSend(v16, sel_floatValue);

  }
  v18 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 216);
  v19 = (void *)v18();

  if (!v19)
  {
LABEL_11:
    v30 = &type metadata for TTSMarkup.SpeechText;
    v31 = &protocol witness table for TTSMarkup.SpeechText;
    v22 = (_QWORD *)swift_allocObject();
    v29[0] = v22;
    v22[2] = v11;
    v22[3] = v10;
    v22[4] = v13;
    v22[5] = v12;
    v23 = *(void (**)(_QWORD *))(*(_QWORD *)v0 + 432);
    v24 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v29);
    sub_1A39A47C4((uint64_t)v29);
    v25 = sub_1A3AB4A48();
    swift_bridgeObjectRelease();
    v26 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v0 + 400))(v29);
    if (!__OFADD__(*v27, v25))
    {
      *v27 += v25;
      v28 = v26(v29, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v0 + 464))(v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    __break(1u);
    goto LABEL_14;
  }
  v20 = (void *)v18();
  if (v20)
  {
    v21 = v20;
    objc_msgSend(v20, sel_floatValue);

    goto LABEL_11;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t sub_1A3A03570()
{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(uint64_t (**)(void))(*v0 + 408);
  v2 = v1();
  v4 = v3;
  v5 = swift_bridgeObjectRelease();
  v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v6 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v6)
    return (*(uint64_t (**)(void))(*v0 + 440))();
  ((void (*)(uint64_t))v1)(v5);
  if (qword_1EE6D85C0 != -1)
    swift_once();
  v7 = (void *)qword_1EE6E6D90;
  v8 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRetain();
  sub_1A39A4820(&qword_1EE6D34F0);
  sub_1A3A03910();
  sub_1A39A9EC0();
  v9 = sub_1A3AB50E4();
  v11 = objc_msgSend(v7, sel_matchesInString_options_range_, v8, 0, v9, v10);

  sub_1A3A0395C();
  v12 = sub_1A3AB4BB0();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1A3AB5480();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v14 = swift_bridgeObjectRelease();
  v15 = *v0;
  if (v13 < 1)
    return (*(uint64_t (**)(uint64_t))(v15 + 456))(v14);
  else
    return (*(uint64_t (**)(uint64_t))(v15 + 448))(v14);
}

double PTParser.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;

  v4 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_WORD *)(v4 + 64) = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 72) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = v6;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  return result;
}

uint64_t PTParser.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + 64) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 72) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = v3;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

id *PTParser.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PTParser.__deallocating_deinit()
{
  PTParser.deinit();
  return swift_deallocClassInstance();
}

id sub_1A3A03838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    sub_1A3AB42BC();

    swift_willThrow();
  }
  return v6;
}

unint64_t sub_1A3A03910()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D34F8;
  if (!qword_1EE6D34F8)
  {
    v1 = sub_1A39AB624(&qword_1EE6D34F0);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEC928], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D34F8);
  }
  return result;
}

unint64_t sub_1A3A0395C()
{
  unint64_t result;

  result = qword_1EE6D3500;
  if (!qword_1EE6D3500)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE6D3500);
  }
  return result;
}

uint64_t sub_1A3A03998()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A039C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A3A039FC()
{
  unint64_t result;

  result = qword_1EE6D3508;
  if (!qword_1EE6D3508)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC1DCC, &type metadata for PTParserState);
    atomic_store(result, (unint64_t *)&qword_1EE6D3508);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PTParserState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A3A03A8C + 4 * byte_1A3AC1DC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A3A03AC0 + 4 * byte_1A3AC1DC0[v4]))();
}

uint64_t sub_1A3A03AC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A03AC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A03AD0);
  return result;
}

uint64_t sub_1A3A03ADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A03AE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A3A03AE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A03AF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PTParserState()
{
  return &type metadata for PTParserState;
}

uint64_t type metadata accessor for PTParser()
{
  return objc_opt_self();
}

uint64_t method lookup function for PTParser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PTParser.parsedSpeechElements.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of PTParser.parsedSpeechElements.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of PTParser.parsedSpeechElements.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of PTParser.parse()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of PTParser.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 472))();
}

uint64_t sub_1A3A03B70()
{
  sub_1A39B9F44(&qword_1EE6D3818, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1A3AC2DCC);
  return sub_1A3AB4B8C();
}

uint64_t sub_1A3A03BE4()
{
  sub_1A39B9F44(&qword_1EE6D3818, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1A3AC2DCC);
  return sub_1A3AB4B80();
}

void PostMatchRule.hash(into:)()
{
  __asm { BR              X11 }
}

void sub_1A3A03C84(uint64_t a1@<X8>, uint64_t a2, id a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  id v12;

  v11 = *(void **)(a1 + 16);
  sub_1A3AB5708();
  sub_1A3AB497C();
  v12 = v11;
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5720();

}

uint64_t sub_1A3A03CF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1A3AB5708();
  return sub_1A3A0D038(v1, v2);
}

void sub_1A3A03D40(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A03D80(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1A3A03DF0 + 4 * byte_1A3AC1EC8[a2]))(0x65636E65726563);
}

uint64_t sub_1A3A03DF0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65636E65726563 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1A3A03EA4(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 6385769;
  else
    v2 = 7823730;
  if ((a2 & 1) != 0)
    v3 = 6385769;
  else
    v3 = 7823730;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1A3AB5654();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1A3A03F10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X11 }
  }
  return 1;
}

uint64_t sub_1A3A041B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  BOOL v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v5 = 0;
      v6 = v2 - 1;
      do
      {
        v7 = *(_QWORD *)(a1 + v5 + 48);
        v8 = *(_QWORD *)(a1 + v5 + 56);
        v9 = *(_BYTE *)(a1 + v5 + 64);
        v10 = *(_BYTE *)(a1 + v5 + 65);
        v11 = *(_QWORD *)(a1 + v5 + 88);
        v28 = *(_OWORD *)(a1 + v5 + 32);
        v29 = v7;
        v30 = v8;
        v31 = v9;
        v32 = v10;
        v33 = *(_OWORD *)(a1 + v5 + 72);
        v34 = v11;
        v12 = *(_QWORD *)(a2 + v5 + 48);
        v13 = *(_QWORD *)(a2 + v5 + 56);
        v14 = *(_BYTE *)(a2 + v5 + 64);
        v15 = *(_BYTE *)(a2 + v5 + 65);
        v16 = *(_QWORD *)(a2 + v5 + 88);
        v21 = *(_OWORD *)(a2 + v5 + 32);
        v22 = v12;
        v23 = v13;
        v24 = v14;
        v25 = v15;
        v26 = *(_OWORD *)(a2 + v5 + 72);
        v27 = v16;
        v17 = _s12TextToSpeech16PronuncationRuleV2eeoiySbAC_ACtFZ_0((uint64_t)&v28, (uint64_t)&v21);
        v19 = v6-- != 0;
        if ((v17 & 1) == 0)
          break;
        v5 += 64;
      }
      while (v19);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1A3A042A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v34 = 0;
    v25 = a1 + 32;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = a2 + 32;
    while (1)
    {
      v4 = (_QWORD *)(v25 + 40 * v34);
      v5 = *v4;
      v6 = (_QWORD *)(v24 + 40 * v34);
      v7 = *v6;
      v8 = *(_QWORD *)(*v4 + 16);
      if (v8 != *(_QWORD *)(*v6 + 16))
        return 0;
      v27 = v4[1];
      v33 = v4[2];
      v30 = v4[4];
      v31 = v4[3];
      v26 = v6[1];
      v32 = v6[2];
      if (v8)
        v9 = v5 == v7;
      else
        v9 = 1;
      v28 = v6[3];
      v29 = v6[4];
      if (!v9)
      {
        v12 = 0;
        v35 = *v6;
        v36 = *v4;
        do
        {
          v13 = *(_QWORD *)(v5 + v12 + 48);
          v14 = *(_QWORD *)(v5 + v12 + 56);
          v15 = *(unsigned __int8 *)(v5 + v12 + 64);
          v37 = *(_QWORD *)(v5 + v12 + 72);
          v38 = *(_QWORD *)(v5 + v12 + 80);
          v16 = *(_QWORD *)(v7 + v12 + 48);
          v17 = *(_QWORD *)(v7 + v12 + 56);
          v18 = *(unsigned __int8 *)(v7 + v12 + 64);
          v19 = *(_QWORD *)(v7 + v12 + 72);
          v20 = *(_QWORD *)(v7 + v12 + 80);
          if ((*(_QWORD *)(v5 + v12 + 32) != *(_QWORD *)(v7 + v12 + 32)
             || *(_QWORD *)(v5 + v12 + 40) != *(_QWORD *)(v7 + v12 + 40))
            && (sub_1A3AB5654() & 1) == 0)
          {
            return 0;
          }
          if (v13 == v16 && v14 == v17)
          {
            if (v15 != v18)
              return 0;
          }
          else
          {
            v21 = sub_1A3AB5654();
            result = 0;
            if ((v21 & 1) == 0 || ((v15 ^ v18) & 1) != 0)
              return result;
          }
          if ((v37 != v19 || v38 != v20) && (sub_1A3AB5654() & 1) == 0)
            return 0;
          v12 += 56;
          --v8;
          v7 = v35;
          v5 = v36;
        }
        while (v8);
      }
      if (v33)
      {
        v10 = v23;
        if (!v32)
          return 0;
        v11 = v27 == v26 && v33 == v32;
        if (!v11 && (sub_1A3AB5654() & 1) == 0)
          return 0;
      }
      else
      {
        v10 = v23;
        if (v32)
          return 0;
      }
      v22 = v31 == v28 && v30 == v29;
      if (!v22 && (sub_1A3AB5654() & 1) == 0)
        return 0;
      result = 1;
      if (++v34 == v10)
        return result;
    }
  }
  return 1;
}

uint64_t sub_1A3A044DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    for (i = 0; ; i += 56)
    {
      v4 = *(_QWORD *)(a1 + i + 48);
      v5 = *(_QWORD *)(a1 + i + 56);
      v17 = *(unsigned __int8 *)(a1 + i + 64);
      v6 = *(_QWORD *)(a1 + i + 72);
      v16 = *(_QWORD *)(a1 + i + 80);
      v7 = *(_QWORD *)(a2 + i + 48);
      v8 = *(_QWORD *)(a2 + i + 56);
      v9 = *(unsigned __int8 *)(a2 + i + 64);
      v11 = *(_QWORD *)(a2 + i + 72);
      v10 = *(_QWORD *)(a2 + i + 80);
      if ((*(_QWORD *)(a1 + i + 32) != *(_QWORD *)(a2 + i + 32) || *(_QWORD *)(a1 + i + 40) != *(_QWORD *)(a2 + i + 40))
        && (sub_1A3AB5654() & 1) == 0)
      {
        break;
      }
      if (v4 == v7 && v5 == v8)
      {
        if (v17 != v9)
          return 0;
      }
      else
      {
        v12 = sub_1A3AB5654();
        result = 0;
        if ((v12 & 1) == 0 || ((v17 ^ v9) & 1) != 0)
          return result;
      }
      if ((v6 != v11 || v16 != v10) && (sub_1A3AB5654() & 1) == 0)
        break;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1A3A04634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X9 }
  }
  return 1;
}

uint64_t sub_1A3A04828()
{
  return 1;
}

uint64_t sub_1A3A04838()
{
  return 0x73656C7572;
}

uint64_t sub_1A3A04850()
{
  return 0;
}

void sub_1A3A0485C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1A3A04868()
{
  sub_1A3A0D5FC();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A04890()
{
  sub_1A3A0D5FC();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A048C0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A048F8 + 4 * byte_1A3AC1EDE[*v0]))(0x7053664F74726170, 0xEC00000068636565);
}

uint64_t sub_1A3A048F8()
{
  return 6581857;
}

uint64_t sub_1A3A04908()
{
  return 29295;
}

uint64_t sub_1A3A04914()
{
  return 7630702;
}

uint64_t sub_1A3A04924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A114D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A04948()
{
  sub_1A3A0D4EC();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A04970()
{
  sub_1A3A0D4EC();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A04998()
{
  sub_1A3A0D530();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A049C0()
{
  sub_1A3A0D530();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A049E8()
{
  return sub_1A3AB5708();
}

uint64_t sub_1A3A04A0C()
{
  sub_1A3A0D5B8();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A04A34()
{
  sub_1A3A0D5B8();
  return sub_1A3AB5798();
}

BOOL sub_1A3A04A5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1A3A04A74()
{
  _BYTE *v0;

  if (*v0)
    return 0x61747265436E696DLL;
  else
    return 6775156;
}

uint64_t sub_1A3A04AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A11668(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A04AD4()
{
  sub_1A3A0D640();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A04AFC()
{
  sub_1A3A0D640();
  return sub_1A3AB5798();
}

void PostMatchRule.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[14];

  v2 = v1;
  v4 = sub_1A39A4820(&qword_1EE6D3510);
  v11[7] = *(_QWORD *)(v4 - 8);
  v11[8] = v4;
  MEMORY[0x1E0C80A78](v4);
  v11[6] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820(&qword_1EE6D3518);
  v11[4] = *(_QWORD *)(v6 - 8);
  v11[5] = v6;
  MEMORY[0x1E0C80A78](v6);
  v7 = sub_1A39A4820(&qword_1EE6D3520);
  v11[0] = *(_QWORD *)(v7 - 8);
  v11[1] = v7;
  MEMORY[0x1E0C80A78](v7);
  v8 = sub_1A39A4820(&qword_1EE6D3528);
  v11[2] = *(_QWORD *)(v8 - 8);
  v11[3] = v8;
  MEMORY[0x1E0C80A78](v8);
  v9 = sub_1A39A4820(&qword_1EE6D3530);
  v11[10] = *(_QWORD *)(v9 - 8);
  v11[11] = v9;
  MEMORY[0x1E0C80A78](v9);
  v10 = *v2;
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0D4EC();
  sub_1A3AB5780();
  __asm { BR              X10 }
}

void sub_1A3A04CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)(v2 + 16);
  *(_BYTE *)(v3 - 88) = 0;
  sub_1A3A0D640();
  v5 = v4;
  v6 = *(_QWORD *)(v3 - 104);
  v7 = v1;
  sub_1A3AB5588();
  *(_QWORD *)(v3 - 88) = v5;
  *(_BYTE *)(v3 - 89) = 0;
  type metadata accessor for NLTag();
  sub_1A39B9F44(&qword_1EE6D3550, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&protocol conformance descriptor for NLTag);
  v8 = *(_QWORD *)(v3 - 168);
  v9 = *(_QWORD *)(v3 - 120);
  sub_1A3AB55DC();
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 176) + 8))(v0, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 112) + 8))(v7, v6);

  }
  else
  {
    *(_BYTE *)(v3 - 88) = 1;
    sub_1A3AB55C4();

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 176) + 8))(v0, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 112) + 8))(v7, v6);
  }
}

uint64_t PostMatchRule.hashValue.getter()
{
  return sub_1A3A069EC((void (*)(_QWORD *))PostMatchRule.hash(into:));
}

uint64_t PostMatchRule.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;

  v24 = a2;
  v20 = sub_1A39A4820(&qword_1EE6D3558);
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v28 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1A39A4820(&qword_1EE6D3560);
  v23 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v25 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1A39A4820(&qword_1EE6D3568);
  v19[3] = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v26 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820(&qword_1EE6D3570);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = sub_1A39A4820(&qword_1EE6D3578);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v29 = a1;
  sub_1A39A19CC(a1, v12);
  sub_1A3A0D4EC();
  v13 = v30;
  sub_1A3AB5774();
  if (!v13)
  {
    v19[1] = v7;
    v19[2] = v6;
    v30 = v9;
    v14 = sub_1A3AB5570();
    if (*(_QWORD *)(v14 + 16) == 1)
      __asm { BR              X10 }
    v15 = sub_1A3AB52F4();
    swift_allocError();
    v17 = v16;
    sub_1A39A4820(&qword_1EE6D3580);
    *v17 = &type metadata for PostMatchRule;
    sub_1A3AB54F8();
    sub_1A3AB52E8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC450], v15);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
  }
  return sub_1A39A47C4((uint64_t)v29);
}

uint64_t sub_1A3A05898@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PostMatchRule.init(from:)(a1, a2);
}

void sub_1A3A058AC(_QWORD *a1)
{
  PostMatchRule.encode(to:)(a1);
}

uint64_t sub_1A3A058C0(uint64_t a1, uint64_t a2)
{
  return sub_1A3A073A4(a1, a2, (void (*)(_QWORD *))PostMatchRule.hash(into:));
}

uint64_t sub_1A3A058D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A3A07400(a1, a2, a3, (void (*)(_QWORD *))PostMatchRule.hash(into:));
}

TextToSpeech::RulesetTargetSynthesizer_optional __swiftcall RulesetTargetSynthesizer.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  TextToSpeech::RulesetTargetSynthesizer_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A3AB54E0();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static RulesetTargetSynthesizer.allCases.getter()
{
  return &unk_1E4A99950;
}

uint64_t RulesetTargetSynthesizer.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A0596C + 4 * byte_1A3AC1EEA[*v0]))(1769105779, 0xE400000000000000);
}

uint64_t sub_1A3A0596C()
{
  return 0x65636E65726563;
}

uint64_t sub_1A3A05984()
{
  return 0x636E6575716F6C65;
}

uint64_t sub_1A3A059A0()
{
  return 0x6C61746E6963616DLL;
}

void sub_1A3A059C0(char *a1)
{
  sub_1A3A03D40(*a1);
}

TextToSpeech::RulesetTargetSynthesizer_optional sub_1A3A059CC(Swift::String *a1)
{
  return RulesetTargetSynthesizer.init(rawValue:)(*a1);
}

uint64_t sub_1A3A059D8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1A3A05A00 + 4 * byte_1A3AC1EEE[*v0]))();
}

void sub_1A3A05A00(_QWORD *a1@<X8>)
{
  *a1 = 0x65636E65726563;
  a1[1] = 0xE700000000000000;
}

void sub_1A3A05A1C(_QWORD *a1@<X8>)
{
  *a1 = 0x636E6575716F6C65;
  a1[1] = 0xE900000000000065;
}

void sub_1A3A05A3C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C61746E6963616DLL;
  a1[1] = 0xE90000000000006BLL;
}

uint64_t sub_1A3A05A60()
{
  sub_1A39C3FF8();
  return sub_1A3AB4B8C();
}

uint64_t sub_1A3A05ABC()
{
  sub_1A39C3FF8();
  return sub_1A3AB4B80();
}

void sub_1A3A05B08()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A3AB56FC();
  __asm { BR              X9 }
}

uint64_t sub_1A3A05B4C()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

void sub_1A3A05BC8()
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A05BFC()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

void sub_1A3A05C64()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1A3AB56FC();
  __asm { BR              X9 }
}

uint64_t sub_1A3A05CA4()
{
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

void sub_1A3A05D20(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4A999F8;
}

void RulesetActivationRule.hash(into:)()
{
  __asm { BR              X11 }
}

uint64_t sub_1A3A05D64()
{
  sub_1A3AB5708();
  return sub_1A3AB4A30();
}

uint64_t sub_1A3A05D90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = sub_1A3AB5708();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1A3A05DC4 + 4 * byte_1A3AC1F04[v1]))(v2, 1769105779);
}

uint64_t sub_1A3A05DC4()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A05E94()
{
  return 0;
}

uint64_t sub_1A3A05EA0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1A3A05ECC()
{
  sub_1A3A0DA14();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A05EF4()
{
  sub_1A3A0DA14();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A05F1C()
{
  sub_1A3A0D9D0();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A05F44()
{
  sub_1A3A0D9D0();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A05F6C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A3A05FA0 + 4 * byte_1A3AC1F08[*v0]))(0xD000000000000015, 0x80000001A3AF10C0);
}

uint64_t sub_1A3A05FA0()
{
  return 0x69736568746E7973;
}

uint64_t sub_1A3A05FC0()
{
  return 7105633;
}

uint64_t sub_1A3A05FD0()
{
  return 6581857;
}

uint64_t sub_1A3A05FE0()
{
  return 29295;
}

uint64_t sub_1A3A05FEC()
{
  return 7630702;
}

uint64_t sub_1A3A05FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A11760(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A06020()
{
  sub_1A3A0D8C0();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A06048()
{
  sub_1A3A0D8C0();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A06070()
{
  sub_1A3A0D904();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A06098()
{
  sub_1A3A0D904();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A060C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73656C7572 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A3AB5654();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A3A0614C()
{
  sub_1A3A0D98C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A06174()
{
  sub_1A3A0D98C();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A0619C()
{
  return 0x69736568746E7973;
}

uint64_t sub_1A3A061BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x69736568746E7973 && a2 == 0xEB0000000072657ALL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A3AB5654();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A3A06268()
{
  sub_1A3A0DA58();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A06290()
{
  sub_1A3A0DA58();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A062B8()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A062F8()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A06334()
{
  return 0x786966657270;
}

uint64_t sub_1A3A06348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x786966657270 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1A3AB5654();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1A3A063D4()
{
  sub_1A3A0DAE0();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A063FC()
{
  sub_1A3A0DAE0();
  return sub_1A3AB5798();
}

void RulesetActivationRule.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v24 = sub_1A39A4820(&qword_1EE6D35A0);
  v14[1] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v23 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A39A4820(&qword_1EE6D35A8);
  v21 = *(_QWORD *)(v4 - 8);
  v22 = v4;
  MEMORY[0x1E0C80A78](v4);
  v20 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820(&qword_1EE6D35B0);
  v18 = *(_QWORD *)(v6 - 8);
  v19 = v6;
  MEMORY[0x1E0C80A78](v6);
  v17 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A39A4820(&qword_1EE6D35B8);
  v14[4] = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v14[2] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1A39A4820(&qword_1EE6D35C0);
  v14[5] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v14[3] = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A39A4820(&qword_1EE6D35C8);
  MEMORY[0x1E0C80A78](v10);
  v27 = sub_1A39A4820(&qword_1EE6D35D0);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v1;
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0D8C0();
  v26 = v12;
  sub_1A3AB5780();
  __asm { BR              X10 }
}

uint64_t sub_1A3A06670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 72) = 0;
  sub_1A3A0DAE0();
  v5 = *(_QWORD *)(v3 - 104);
  v4 = *(_QWORD *)(v3 - 96);
  sub_1A3AB5588();
  sub_1A3AB55AC();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 112) + 8))(v5, v4);
}

void sub_1A3A0697C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 - 72) = 2;
  sub_1A3A0DA14();
  v1 = *(_QWORD *)(v0 - 224);
  v3 = *(_QWORD *)(v0 - 104);
  v2 = *(_QWORD *)(v0 - 96);
  sub_1A3AB5588();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 - 208) + 8))(v1, *(_QWORD *)(v0 - 192));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 112) + 8))(v3, v2);
  JUMPOUT(0x1A3A06958);
}

uint64_t RulesetActivationRule.hashValue.getter()
{
  return sub_1A3A069EC((void (*)(_QWORD *))RulesetActivationRule.hash(into:));
}

uint64_t sub_1A3A069EC(void (*a1)(_QWORD *))
{
  _QWORD *v1;
  _QWORD v4[10];

  v4[9] = *v1;
  sub_1A3AB56FC();
  a1(v4);
  return sub_1A3AB5738();
}

uint64_t RulesetActivationRule.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;

  v39 = a2;
  v33 = sub_1A39A4820(&qword_1EE6D35F8);
  v36 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v44 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A39A4820(&qword_1EE6D3600);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820(&qword_1EE6D3608);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  MEMORY[0x1E0C80A78](v6);
  v41 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A39A4820(&qword_1EE6D3610);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v43 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1A39A4820(&qword_1EE6D3618);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v42 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A39A4820(&qword_1EE6D3620);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1A39A4820(&qword_1EE6D3628);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v45 = a1;
  sub_1A39A19CC(a1, v19);
  sub_1A3A0D8C0();
  v20 = v46;
  sub_1A3AB5774();
  v46 = v20;
  if (!v20)
  {
    v27[0] = v12;
    v27[1] = v14;
    v28 = v16;
    v21 = sub_1A3AB5570();
    if (*(_QWORD *)(v21 + 16) == 1)
      __asm { BR              X10 }
    v22 = sub_1A3AB52F4();
    v23 = swift_allocError();
    v25 = v24;
    sub_1A39A4820(&qword_1EE6D3580);
    *v25 = &type metadata for RulesetActivationRule;
    sub_1A3AB54F8();
    sub_1A3AB52E8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v25, *MEMORY[0x1E0DEC450], v22);
    v46 = v23;
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v15);
  }
  return sub_1A39A47C4((uint64_t)v45);
}

void sub_1A3A06DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 69) = 1;
  sub_1A3A0DA58();
  v4 = *(_QWORD *)(v3 - 96);
  sub_1A3AB54EC();
  *(_QWORD *)(v3 - 96) = v4;
  if (!v4)
  {
    swift_allocObject();
    sub_1A3A0DB78();
    v5 = *(_QWORD *)(v3 - 232);
    v6 = *(_QWORD *)(v3 - 96);
    sub_1A3AB554C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 208) + 8))(v0, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 240) + 8))(v1, v2);
    *(_QWORD *)(v3 - 96) = v6;
    if (!v6)
      JUMPOUT(0x1A3A07364);
    JUMPOUT(0x1A3A07280);
  }
  JUMPOUT(0x1A3A06DACLL);
}

void sub_1A3A06EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 68) = 2;
  sub_1A3A0DA14();
  v4 = *(_QWORD *)(v3 - 96);
  sub_1A3AB54EC();
  *(_QWORD *)(v3 - 96) = v4;
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 224) + 8))(v0, *(_QWORD *)(v3 - 216));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 240) + 8))(v1, v2);
    JUMPOUT(0x1A3A07364);
  }
  JUMPOUT(0x1A3A06DACLL);
}

void sub_1A3A06F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 67) = 3;
  sub_1A3A0D9D0();
  v3 = *(_QWORD *)(v2 - 96);
  sub_1A3AB54EC();
  *(_QWORD *)(v2 - 96) = v3;
  if (!v3)
  {
    *(_QWORD *)(v2 - 120) = v1;
    swift_allocObject();
    sub_1A39A4820(&qword_1EE6D35D8);
    sub_1A3A0E78C(&qword_1EE6D3630, &qword_1EE6D35D8, (uint64_t (*)(void))sub_1A3A0DB24, MEMORY[0x1E0DEAF40]);
    v4 = *(_QWORD *)(v2 - 184);
    v5 = *(_QWORD *)(v2 - 136);
    v6 = *(_QWORD *)(v2 - 96);
    sub_1A3AB554C();
    v7 = *(_QWORD *)(v2 - 240);
    *(_QWORD *)(v2 - 96) = v6;
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v5, v4);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v0, *(_QWORD *)(v2 - 120));
      JUMPOUT(0x1A3A07280);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v5, v4);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v0, *(_QWORD *)(v2 - 120));
    JUMPOUT(0x1A3A07364);
  }
  JUMPOUT(0x1A3A06DACLL);
}

uint64_t sub_1A3A07370@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RulesetActivationRule.init(from:)(a1, a2);
}

void sub_1A3A07384(_QWORD *a1)
{
  RulesetActivationRule.encode(to:)(a1);
}

uint64_t sub_1A3A07398(uint64_t a1, uint64_t a2)
{
  return sub_1A3A073A4(a1, a2, (void (*)(_QWORD *))RulesetActivationRule.hash(into:));
}

uint64_t sub_1A3A073A4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  _QWORD *v3;
  _QWORD v6[10];

  v6[9] = *v3;
  sub_1A3AB56FC();
  a3(v6);
  return sub_1A3AB5738();
}

uint64_t sub_1A3A073F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1A3A07400(a1, a2, a3, (void (*)(_QWORD *))RulesetActivationRule.hash(into:));
}

uint64_t sub_1A3A07400(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  _QWORD *v4;
  _QWORD v7[10];

  v7[9] = *v4;
  sub_1A3AB56FC();
  a4(v7);
  return sub_1A3AB5738();
}

TextToSpeech::PronuncationRule::ReplacementType_optional __swiftcall PronuncationRule.ReplacementType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  TextToSpeech::PronuncationRule::ReplacementType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A3AB54E0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

void *static PronuncationRule.ReplacementType.allCases.getter()
{
  return &unk_1E4A98A78;
}

uint64_t PronuncationRule.ReplacementType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 6385769;
  else
    return 7823730;
}

uint64_t sub_1A3A074DC(char *a1, char *a2)
{
  return sub_1A3A03EA4(*a1, *a2);
}

TextToSpeech::PronuncationRule::ReplacementType_optional sub_1A3A074E8(Swift::String *a1)
{
  return PronuncationRule.ReplacementType.init(rawValue:)(*a1);
}

void sub_1A3A074F4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 7823730;
  if (*v1)
    v2 = 6385769;
  *a1 = v2;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1A3A0751C()
{
  sub_1A39C3E70();
  return sub_1A3AB4B8C();
}

uint64_t sub_1A3A07578()
{
  sub_1A39C3E70();
  return sub_1A3AB4B80();
}

uint64_t sub_1A3A075C4()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A07628()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A07660()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

void sub_1A3A076C0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4A98AF0;
}

uint64_t PronuncationRule.regex.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PronuncationRule.regex.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PronuncationRule.regex.modify())()
{
  return nullsub_19;
}

uint64_t PronuncationRule.replacement.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PronuncationRule.replacement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PronuncationRule.replacement.modify())()
{
  return nullsub_19;
}

void PronuncationRule.replacementType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *PronuncationRule.replacementType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*PronuncationRule.replacementType.modify())()
{
  return nullsub_19;
}

uint64_t PronuncationRule.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t PronuncationRule.enabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*PronuncationRule.enabled.modify())()
{
  return nullsub_19;
}

uint64_t PronuncationRule.postMatch.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = v2;
  return sub_1A39C3E58(v2);
}

uint64_t PronuncationRule.postMatch.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = sub_1A39C3F78(*(_QWORD *)(v1 + 40));
  *(_QWORD *)(v1 + 40) = v2;
  return result;
}

uint64_t (*PronuncationRule.postMatch.modify())()
{
  return nullsub_19;
}

uint64_t PronuncationRule.notes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PronuncationRule.notes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*PronuncationRule.notes.modify())()
{
  return nullsub_19;
}

double PronuncationRule.init(regex:replacement:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_WORD *)(a5 + 32) = 256;
  result = -3.10503618e231;
  *(_OWORD *)(a5 + 40) = xmmword_1A3AC3C80;
  *(_QWORD *)(a5 + 56) = 0xE000000000000000;
  return result;
}

uint64_t PronuncationRule.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  sub_1A3AB5714();
  if ((~v1 & 0xF000000000000007) != 0)
    PostMatchRule.hash(into:)();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A07A04()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A07A30 + 4 * byte_1A3AC1F20[*v0]))(0x7865676572, 0xE500000000000000);
}

uint64_t sub_1A3A07A30()
{
  return 0x6D6563616C706572;
}

uint64_t sub_1A3A07A64()
{
  return 0x64656C62616E65;
}

uint64_t sub_1A3A07A7C()
{
  return 0x6374614D74736F70;
}

uint64_t sub_1A3A07A98()
{
  return 0x7365746F6ELL;
}

uint64_t sub_1A3A07AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A119AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A07ACC()
{
  sub_1A3A0DDF8();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A07AF4()
{
  sub_1A3A0DDF8();
  return sub_1A3AB5798();
}

uint64_t PronuncationRule.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v3 = sub_1A39A4820(&qword_1EE6D3648);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v17 = *(_QWORD *)(v1 + 24);
  v18 = v7;
  LODWORD(v7) = *(unsigned __int8 *)(v1 + 32);
  v15 = *(unsigned __int8 *)(v1 + 33);
  v16 = v7;
  v8 = *(_QWORD *)(v1 + 40);
  v13[1] = *(_QWORD *)(v1 + 48);
  v14 = v8;
  v13[0] = *(_QWORD *)(v1 + 56);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0DDF8();
  sub_1A3AB5780();
  v27 = 0;
  v9 = v19;
  sub_1A3AB55AC();
  if (!v9)
  {
    v10 = v16;
    v11 = v14;
    v26 = 1;
    sub_1A3AB55AC();
    v25 = v10;
    v24 = 2;
    sub_1A3A0DE3C();
    sub_1A3AB55DC();
    v23 = 3;
    sub_1A3AB55B8();
    v20 = v11;
    v22 = 4;
    sub_1A3A0D574();
    sub_1A3AB55A0();
    v21 = 5;
    sub_1A3AB55AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PronuncationRule.hashValue.getter()
{
  sub_1A3AB56FC();
  PronuncationRule.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t PronuncationRule.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  unsigned __int8 v35;
  char v36;
  char v37;

  v5 = sub_1A39A4820(&qword_1EE6D3658);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0DDF8();
  sub_1A3AB5774();
  if (v2)
  {
    sub_1A39A47C4((uint64_t)a1);
    return sub_1A39C3F78(0xF000000000000007);
  }
  else
  {
    v37 = 0;
    v9 = sub_1A3AB551C();
    v11 = v10;
    v29 = v9;
    v36 = 1;
    swift_bridgeObjectRetain();
    v12 = sub_1A3AB551C();
    v14 = v13;
    v28 = v12;
    v34 = 2;
    sub_1A3A0DE80();
    swift_bridgeObjectRetain();
    sub_1A3AB554C();
    v27 = v14;
    LODWORD(v14) = v35;
    v33 = 3;
    v25 = sub_1A3AB5528();
    v26 = v14;
    v32 = 4;
    sub_1A3A0D6FC();
    sub_1A3AB5510();
    v24 = v11;
    v15 = v30;
    v31 = 5;
    sub_1A39C3E58(v30);
    v16 = sub_1A3AB551C();
    v18 = v17;
    v25 &= 1u;
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20 = v16;
    v19(v8, v5);
    v21 = v24;
    swift_bridgeObjectRetain();
    v22 = v27;
    swift_bridgeObjectRetain();
    sub_1A39C3E58(v15);
    swift_bridgeObjectRetain();
    sub_1A39C3F78(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v29;
    *(_QWORD *)(a2 + 8) = v21;
    *(_QWORD *)(a2 + 16) = v28;
    *(_QWORD *)(a2 + 24) = v22;
    *(_BYTE *)(a2 + 32) = v26;
    *(_BYTE *)(a2 + 33) = v25;
    *(_QWORD *)(a2 + 40) = v15;
    *(_QWORD *)(a2 + 48) = v20;
    *(_QWORD *)(a2 + 56) = v18;
    sub_1A39A47C4((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1A39C3F78(v15);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1A3A0815C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PronuncationRule.init(from:)(a1, a2);
}

uint64_t sub_1A3A08170(_QWORD *a1)
{
  return PronuncationRule.encode(to:)(a1);
}

uint64_t sub_1A3A08184()
{
  sub_1A3AB56FC();
  PronuncationRule.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A081F8()
{
  sub_1A3AB56FC();
  PronuncationRule.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t PronunciationRuleSet.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PronunciationRuleSet.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PronunciationRuleSet.name.modify())()
{
  return nullsub_19;
}

uint64_t PronunciationRuleSet.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PronunciationRuleSet() + 20);
  v4 = sub_1A3AB4388();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PronunciationRuleSet.uuid.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PronunciationRuleSet() + 20);
  v4 = sub_1A3AB4388();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PronunciationRuleSet.uuid.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PronunciationRuleSet();
  return nullsub_19;
}

uint64_t PronunciationRuleSet.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PronunciationRuleSet() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PronunciationRuleSet.language.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for PronunciationRuleSet() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PronunciationRuleSet.language.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PronunciationRuleSet();
  return nullsub_19;
}

uint64_t PronunciationRuleSet.activationRule.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PronunciationRuleSet() + 28));
  return swift_retain();
}

uint64_t PronunciationRuleSet.activationRule.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *(int *)(type metadata accessor for PronunciationRuleSet() + 28);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = v2;
  return result;
}

uint64_t (*PronunciationRuleSet.activationRule.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PronunciationRuleSet();
  return nullsub_19;
}

uint64_t PronunciationRuleSet.operatingRegex.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PronunciationRuleSet() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PronunciationRuleSet.operatingRegex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for PronunciationRuleSet() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PronunciationRuleSet.operatingRegex.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PronunciationRuleSet();
  return nullsub_19;
}

uint64_t PronunciationRuleSet.rules.getter()
{
  type metadata accessor for PronunciationRuleSet();
  return swift_bridgeObjectRetain();
}

uint64_t PronunciationRuleSet.rules.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PronunciationRuleSet() + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PronunciationRuleSet.rules.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PronunciationRuleSet();
  return nullsub_19;
}

uint64_t PronunciationRuleSet.priority.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PronunciationRuleSet() + 40));
}

uint64_t PronunciationRuleSet.priority.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PronunciationRuleSet();
  *(_QWORD *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*PronunciationRuleSet.priority.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PronunciationRuleSet();
  return nullsub_19;
}

uint64_t PronunciationRuleSet.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PronunciationRuleSet() + 44));
}

uint64_t PronunciationRuleSet.enabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PronunciationRuleSet();
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*PronunciationRuleSet.enabled.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PronunciationRuleSet();
  return nullsub_19;
}

uint64_t PronunciationRuleSet.notes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PronunciationRuleSet() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PronunciationRuleSet.notes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for PronunciationRuleSet() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*PronunciationRuleSet.notes.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PronunciationRuleSet();
  return nullsub_19;
}

uint64_t PronunciationRuleSet.init(name:language:priority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int *v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v12 = (int *)type metadata accessor for PronunciationRuleSet();
  result = sub_1A3AB437C();
  v14 = (_QWORD *)((char *)a6 + v12[8]);
  *v14 = 0;
  v14[1] = 0;
  *(_QWORD *)((char *)a6 + v12[9]) = MEMORY[0x1E0DEE9D8];
  *((_BYTE *)a6 + v12[11]) = 1;
  v15 = (_QWORD *)((char *)a6 + v12[12]);
  *v15 = 0;
  v15[1] = 0xE000000000000000;
  *a6 = a1;
  a6[1] = a2;
  v16 = (_QWORD *)((char *)a6 + v12[6]);
  *v16 = a3;
  v16[1] = a4;
  *(_QWORD *)((char *)a6 + v12[10]) = a5;
  *(_QWORD *)((char *)a6 + v12[7]) = 0xA000000000000000;
  return result;
}

void PronunciationRuleSet.hash(into:)()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for PronunciationRuleSet();
  sub_1A3AB4388();
  sub_1A39B9F44(&qword_1ED1B52E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1A3AB48D4();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_1A3A08930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1A3AB5708();
  swift_retain();
  sub_1A3AB4A30();
  swift_release();
  if (*(_QWORD *)(v1 + *(int *)(v2 + 32) + 8))
  {
    sub_1A3AB5714();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1A3AB5714();
  }
  v3 = *(_QWORD *)(v1 + *(int *)(v2 + 36));
  swift_bridgeObjectRetain();
  sub_1A3A0CAE8(v0, v3);
  swift_bridgeObjectRelease();
  sub_1A3AB5708();
  sub_1A3AB5714();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A08B4C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A08B78 + 4 * byte_1A3AC1F30[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1A3A08B78()
{
  return 1684632949;
}

uint64_t sub_1A3A08B84()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_1A3A08B9C()
{
  return 0x6974617669746361;
}

uint64_t sub_1A3A08BC0()
{
  return 0x6E6974617265706FLL;
}

uint64_t sub_1A3A08BE4()
{
  return 0x73656C7572;
}

uint64_t sub_1A3A08BF8()
{
  return 0x797469726F697270;
}

uint64_t sub_1A3A08C10()
{
  return 0x64656C62616E65;
}

uint64_t sub_1A3A08C28()
{
  return 0x7365746F6ELL;
}

uint64_t sub_1A3A08C3C()
{
  unsigned __int8 *v0;

  return sub_1A3A08B4C(*v0);
}

uint64_t sub_1A3A08C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A11C5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A08C68()
{
  sub_1A3A0E184();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A08C90()
{
  sub_1A3A0E184();
  return sub_1A3AB5798();
}

uint64_t PronunciationRuleSet.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v5 = sub_1A39A4820(&qword_1EE6D3668);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0E184();
  sub_1A3AB5780();
  LOBYTE(v12) = 0;
  sub_1A3AB55AC();
  if (!v2)
  {
    v9 = type metadata accessor for PronunciationRuleSet();
    LOBYTE(v12) = 1;
    sub_1A3AB4388();
    sub_1A39B9F44(&qword_1EE6D3670, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_1A3AB55DC();
    LOBYTE(v12) = 2;
    sub_1A3AB55AC();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 28));
    HIBYTE(v11) = 3;
    sub_1A3A0D948();
    sub_1A3AB55DC();
    LOBYTE(v12) = 4;
    sub_1A3AB5594();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 36));
    HIBYTE(v11) = 5;
    sub_1A39A4820(&qword_1EE6D3678);
    sub_1A3A0E78C(&qword_1EE6D3680, &qword_1EE6D3678, (uint64_t (*)(void))sub_1A3A0E1C8, MEMORY[0x1E0DEAF10]);
    sub_1A3AB55DC();
    LOBYTE(v12) = 6;
    sub_1A3AB55D0();
    LOBYTE(v12) = 7;
    sub_1A3AB55B8();
    LOBYTE(v12) = 8;
    sub_1A3AB55AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PronunciationRuleSet.hashValue.getter()
{
  sub_1A3AB56FC();
  PronunciationRuleSet.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t PronunciationRuleSet.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v39 = a2;
  v49 = sub_1A3AB4388();
  v43 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1A39A4820(&qword_1EE6D3690);
  v5 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for PronunciationRuleSet();
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = (char *)v11 + *(int *)(v9 + 20);
  sub_1A3AB437C();
  v12 = (char *)v11 + v8[8];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v47 = v12;
  v44 = v8[9];
  v45 = a1;
  *(uint64_t *)((char *)v11 + v44) = MEMORY[0x1E0DEE9D8];
  v13 = v8[11];
  *((_BYTE *)v11 + v13) = 1;
  v14 = v8[12];
  v42 = v11;
  v15 = (char *)v11 + v14;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0xE000000000000000;
  v16 = (uint64_t *)((char *)v11 + v14);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0E184();
  v41 = v7;
  v17 = v46;
  sub_1A3AB5774();
  if (v17)
  {
    v19 = v49;
    v20 = v43;
    sub_1A39A47C4((uint64_t)v45);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v48, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v38 = v13;
    v46 = v5;
    LOBYTE(v51) = 0;
    v18 = sub_1A3AB551C();
    v21 = (uint64_t)v42;
    *v42 = v18;
    *(_QWORD *)(v21 + 8) = v22;
    LOBYTE(v51) = 1;
    sub_1A39B9F44(&qword_1EE6D3698, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v23 = v49;
    sub_1A3AB554C();
    (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v48, v4, v23);
    LOBYTE(v51) = 2;
    v24 = sub_1A3AB551C();
    v25 = v44;
    v26 = (uint64_t *)(v21 + v8[6]);
    *v26 = v24;
    v26[1] = v27;
    v50 = 3;
    sub_1A3A0DB24();
    sub_1A3AB554C();
    *(_QWORD *)(v21 + v8[7]) = v51;
    LOBYTE(v51) = 4;
    v28 = sub_1A3AB5504();
    v30 = v29;
    v31 = (uint64_t *)v47;
    swift_bridgeObjectRelease();
    *v31 = v28;
    v31[1] = v30;
    sub_1A39A4820(&qword_1EE6D3678);
    v50 = 5;
    sub_1A3A0E78C(&qword_1EE6D36A0, &qword_1EE6D3678, (uint64_t (*)(void))sub_1A3A0E20C, MEMORY[0x1E0DEAF40]);
    sub_1A3AB554C();
    v32 = v51;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v21 + v25) = v32;
    LOBYTE(v51) = 6;
    *(_QWORD *)(v21 + v8[10]) = sub_1A3AB5540();
    LOBYTE(v51) = 7;
    *(_BYTE *)(v21 + v38) = sub_1A3AB5528() & 1;
    LOBYTE(v51) = 8;
    v33 = sub_1A3AB551C();
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v40);
    swift_bridgeObjectRelease();
    *v16 = v33;
    v16[1] = v35;
    sub_1A39C3D68(v21, v39);
    sub_1A39A47C4((uint64_t)v45);
    return sub_1A39C3DAC(v21);
  }
}

uint64_t sub_1A3A0951C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PronunciationRuleSet.init(from:)(a1, a2);
}

uint64_t sub_1A3A09530(_QWORD *a1)
{
  return PronunciationRuleSet.encode(to:)(a1);
}

uint64_t sub_1A3A09544()
{
  sub_1A3AB56FC();
  PronunciationRuleSet.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A09584()
{
  sub_1A3AB56FC();
  PronunciationRuleSet.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t SiriRule.regex.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriRule.regex.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SiriRule.regex.modify())()
{
  return nullsub_19;
}

uint64_t SiriRule.replacement.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriRule.replacement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*SiriRule.replacement.modify())()
{
  return nullsub_19;
}

uint64_t SiriRule.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SiriRule.enabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*SiriRule.enabled.modify())()
{
  return nullsub_19;
}

uint64_t SiriRule.notes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriRule.notes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*SiriRule.notes.modify())()
{
  return nullsub_19;
}

uint64_t SiriRule.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A097E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1A3A09814 + 4 * byte_1A3AC1F39[*v0]))(0x7865676572, 0xE500000000000000);
}

uint64_t sub_1A3A09814()
{
  return 0x6D6563616C706572;
}

uint64_t sub_1A3A09834()
{
  return 0x64656C62616E65;
}

uint64_t sub_1A3A0984C()
{
  return 0x7365746F6ELL;
}

uint64_t sub_1A3A0985C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A12020(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A09880()
{
  sub_1A3A0E368();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A098A8()
{
  sub_1A3A0E368();
  return sub_1A3AB5798();
}

uint64_t SiriRule.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = sub_1A39A4820(&qword_1EE6D36B0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  v15[2] = *(_QWORD *)(v1 + 24);
  v15[3] = v8;
  v16 = *(unsigned __int8 *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  v15[0] = *(_QWORD *)(v1 + 48);
  v15[1] = v9;
  v10 = a1[3];
  v11 = a1;
  v13 = v12;
  sub_1A39A19CC(v11, v10);
  sub_1A3A0E368();
  sub_1A3AB5780();
  v20 = 0;
  sub_1A3AB55AC();
  if (!v2)
  {
    v19 = 1;
    sub_1A3AB55AC();
    v18 = 2;
    sub_1A3AB55B8();
    v17 = 3;
    sub_1A3AB55AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
}

uint64_t SiriRule.hashValue.getter()
{
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t SiriRule.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v5 = sub_1A39A4820(&qword_1EE6D36B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0E368();
  sub_1A3AB5774();
  if (v2)
  {
    sub_1A39A47C4((uint64_t)a1);
  }
  else
  {
    v31 = 0;
    v9 = sub_1A3AB551C();
    v12 = v11;
    v26 = v9;
    v30 = 1;
    swift_bridgeObjectRetain();
    v13 = sub_1A3AB551C();
    v15 = v14;
    v24 = v13;
    v29 = 2;
    swift_bridgeObjectRetain();
    v25 = v15;
    v27 = sub_1A3AB5528();
    v28 = 3;
    v16 = sub_1A3AB551C();
    v18 = v17;
    v19 = v27 & 1;
    v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21 = v16;
    v20(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22 = v25;
    *(_QWORD *)a2 = v26;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v24;
    *(_QWORD *)(a2 + 24) = v22;
    *(_BYTE *)(a2 + 32) = v19;
    *(_QWORD *)(a2 + 40) = v21;
    *(_QWORD *)(a2 + 48) = v18;
    sub_1A39A47C4((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A09DAC()
{
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A09E60()
{
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A09F24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SiriRule.init(from:)(a1, a2);
}

uint64_t sub_1A3A09F38(_QWORD *a1)
{
  return SiriRule.encode(to:)(a1);
}

uint64_t sub_1A3A09F50()
{
  uint64_t v0;

  v0 = sub_1A39A4820(&qword_1EE6D36C0);
  sub_1A39AB688(v0, qword_1EE6E6D98);
  sub_1A39AAC98(v0, (uint64_t)qword_1EE6E6D98);
  sub_1A39A4820(&qword_1EE6D36F8);
  return sub_1A3AB4694();
}

uint64_t sub_1A3A09FCC()
{
  uint64_t v0;

  v0 = sub_1A39A4820(&qword_1EE6D36C8);
  sub_1A39AB688(v0, qword_1EE6E6DB0);
  sub_1A39AAC98(v0, (uint64_t)qword_1EE6E6DB0);
  sub_1A39A4820(&qword_1EE6D36E0);
  return sub_1A3AB4694();
}

uint64_t SiriRuleSet.rules.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriRuleSet.rules.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*SiriRuleSet.rules.modify())()
{
  return nullsub_19;
}

uint64_t SiriRuleSet.normalizationDomain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriRuleSet.normalizationDomain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*SiriRuleSet.normalizationDomain.modify())()
{
  return nullsub_19;
}

uint64_t SiriRuleSet.fileName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriRuleSet.fileName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SiriRuleSet.fileName.modify())()
{
  return nullsub_19;
}

void __swiftcall SiriRuleSet.init(name:)(TextToSpeech::SiriRuleSet *__return_ptr retstr, Swift::String name)
{
  retstr->rules._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  retstr->normalizationDomain.value._countAndFlagsBits = 0;
  retstr->normalizationDomain.value._object = 0;
  retstr->fileName = name;
}

uint64_t SiriRuleSet.init(fromUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  void *v6;
  const __CFData *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v4 = sub_1A3AB49D0();
  MEMORY[0x1E0C80A78](v4);
  v29 = 0uLL;
  v5 = objc_allocWithZone(MEMORY[0x1E0C99D50]);
  v6 = (void *)sub_1A3AB42EC();
  v7 = (const __CFData *)objc_msgSend(v5, sel_initWithContentsOfURL_, v6);

  if (v7)
  {
    result = (uint64_t)TTSCreateDecryptedDataFromEncryptedData(v7);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v9 = (void *)result;
    v10 = sub_1A3AB4334();
    v12 = v11;

    sub_1A3AB49C4();
    v13 = sub_1A3AB4994();
    if (v14)
    {
      v15 = v13;
      v16 = v14;
      v17 = sub_1A3AB42E0();
      v31 = v18;
      v30 = v17;
      v27[0] = 10;
      v27[1] = 0xE100000000000000;
      v28 = MEMORY[0x1E0DEE9D8];
      MEMORY[0x1E0C80A78](v17);
      *(&v26 - 2) = (uint64_t)v27;
      swift_bridgeObjectRetain();
      v19 = sub_1A39AC208(0x7FFFFFFFFFFFFFFFLL, 1, sub_1A39AC82C, (uint64_t)(&v26 - 4), v15, v16);
      swift_bridgeObjectRelease();
      v20 = sub_1A3A0A3E4((uint64_t)v19);
      swift_bridgeObjectRelease();
      sub_1A3A0A4FC(v20);
      sub_1A3A0E3AC(v10, v12);

      swift_bridgeObjectRelease();
      v21 = sub_1A3AB431C();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
      v22 = v30;
      v23 = v31;
      *(_QWORD *)a2 = v28;
      *(_OWORD *)(a2 + 8) = v29;
      *(_QWORD *)(a2 + 24) = v22;
      *(_QWORD *)(a2 + 32) = v23;
      return result;
    }
    v25 = sub_1A3AB431C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a1, v25);
    sub_1A3A0E3AC(v10, v12);

  }
  else
  {
    v24 = sub_1A3AB431C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1, v24);
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_1A3A0A3E4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1A3A0C5A0(0, v1, 0);
    v2 = v16;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 3);
      v6 = *(v4 - 2);
      v8 = *(v4 - 1);
      v7 = *v4;
      v16 = v2;
      v10 = *(_QWORD *)(v2 + 16);
      v9 = *(_QWORD *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v9 >> 1)
      {
        sub_1A3A0C5A0((_QWORD *)(v9 > 1), v10 + 1, 1);
        v2 = v16;
      }
      v14 = MEMORY[0x1E0DEBAF0];
      v15 = sub_1A3A1240C();
      v11 = (_QWORD *)swift_allocObject();
      *(_QWORD *)&v13 = v11;
      v11[2] = v5;
      v11[3] = v6;
      v11[4] = v8;
      v11[5] = v7;
      *(_QWORD *)(v2 + 16) = v10 + 1;
      sub_1A39A1AB8(&v13, v2 + 40 * v10 + 32);
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1A3A0A4FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char **v88;
  __int128 v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;

  v2 = sub_1A39A4820(&qword_1EE6D36C0);
  v86 = *(_QWORD *)(v2 - 8);
  v87 = v2;
  MEMORY[0x1E0C80A78](v2);
  v85 = (char *)v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A39A4820(&qword_1EE6D36D0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A39A4820(&qword_1EE6D36C8);
  v83 = *(_QWORD *)(v7 - 8);
  v84 = v7;
  MEMORY[0x1E0C80A78](v7);
  v82 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1EE6D36D8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A3AB4268();
  v13 = *(_QWORD *)(v12 - 8);
  result = MEMORY[0x1E0C80A78](v12);
  v90 = (char *)v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v80 = v11;
    v17 = (_QWORD *)(a1 + 32);
    v65[1] = a1;
    swift_bridgeObjectRetain();
    v81 = v6;
    v78 = v13;
    v79 = v12;
    do
    {
      v91 = v16;
      sub_1A39A19CC(v17, v17[3]);
      v18 = v90;
      sub_1A3AB425C();
      v19 = sub_1A3AB5168();
      v21 = v20;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      if ((sub_1A3AB4AFC() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        *(_QWORD *)&v111 = v19;
        *((_QWORD *)&v111 + 1) = v21;
        if (qword_1EE6D86D8 != -1)
          swift_once();
        v22 = v84;
        v23 = sub_1A39AAC98(v84, (uint64_t)qword_1EE6E6DB0);
        swift_beginAccess();
        v25 = v82;
        v24 = v83;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v82, v23, v22);
        sub_1A39A4820(&qword_1EE6D36E0);
        v26 = sub_1A39C3EB4();
        sub_1A39C3EF8(&qword_1EE6D36E8, &qword_1EE6D36C8, MEMORY[0x1E0DF1F60]);
        v27 = (uint64_t)v80;
        *(_QWORD *)&v89 = v26;
        sub_1A3AB48E0();
        (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v22);
        v28 = sub_1A39A4820(&qword_1EE6D36F0);
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
        {
          sub_1A39B11F4(v27, &qword_1EE6D36D8);
        }
        else
        {
          sub_1A3AB46AC();
          v77 = v113;
          v30 = v27;
          v31 = v114;
          v32 = v115;
          v33 = v116;
          v34 = v117;
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
          v35 = MEMORY[0x1A85957F4](v31, v32, v33, v34);
          v37 = v36;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v38 = v88;
          swift_bridgeObjectRelease();
          v38[1] = (char *)v35;
          v38[2] = v37;
        }
        v39 = (uint64_t)v81;
        *(_QWORD *)&v111 = v19;
        *((_QWORD *)&v111 + 1) = v21;
        if (qword_1EE6D86D0 != -1)
          swift_once();
        v40 = v87;
        v41 = sub_1A39AAC98(v87, (uint64_t)qword_1EE6E6D98);
        swift_beginAccess();
        v43 = v85;
        v42 = v86;
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v85, v41, v40);
        sub_1A39A4820(&qword_1EE6D36F8);
        sub_1A39C3EF8(&qword_1EE6D3700, &qword_1EE6D36C0, MEMORY[0x1E0DF1F60]);
        sub_1A3AB48E0();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v40);
        swift_bridgeObjectRelease();
        v44 = sub_1A39A4820(&qword_1EE6D3708);
        v45 = *(_QWORD *)(v44 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v39, 1, v44) == 1)
        {
          sub_1A39B11F4(v39, &qword_1EE6D36D0);
          v13 = v78;
          v12 = v79;
        }
        else
        {
          sub_1A3AB46AC();
          v89 = v92;
          v46 = v95;
          v76 = v94;
          v77 = v93;
          v47 = v96;
          v48 = v97;
          v49 = v98;
          v75 = v99;
          v73 = v101;
          v74 = v100;
          v50 = v103;
          v51 = v39;
          v52 = v104;
          v66 = v105;
          v67 = v102;
          v71 = v107;
          v72 = v106;
          v70 = v108;
          v68 = v110;
          v69 = v109;
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v51, v44);
          v111 = v89;
          v112 = v77;
          v113 = v76;
          v114 = v46;
          v115 = v47;
          v116 = v48;
          v117 = v49;
          v118 = v75;
          v119 = v74;
          v120 = v73;
          v53 = v66;
          v54 = v67;
          v121 = v67;
          v122 = v50;
          v123 = v52;
          v124 = v66;
          v125 = v72;
          v126 = v71;
          v127 = v70;
          v128 = v69;
          v129 = v68;
          v55 = MEMORY[0x1A85957F4](v46, v47, v48, v49);
          *(_QWORD *)&v89 = v56;
          v57 = MEMORY[0x1A85957F4](v54, v50, v52, v53);
          v59 = v58;
          sub_1A3A0E3F0((uint64_t)&v111);
          v60 = *v88;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v60 = sub_1A3A0C6F0(0, *((_QWORD *)v60 + 2) + 1, 1, v60);
          v62 = *((_QWORD *)v60 + 2);
          v61 = *((_QWORD *)v60 + 3);
          v13 = v78;
          if (v62 >= v61 >> 1)
            v60 = sub_1A3A0C6F0((char *)(v61 > 1), v62 + 1, 1, v60);
          *((_QWORD *)v60 + 2) = v62 + 1;
          v63 = &v60[56 * v62];
          v64 = v89;
          *((_QWORD *)v63 + 4) = v55;
          *((_QWORD *)v63 + 5) = v64;
          *((_QWORD *)v63 + 6) = v57;
          *((_QWORD *)v63 + 7) = v59;
          v63[64] = 1;
          *((_QWORD *)v63 + 9) = 0;
          *((_QWORD *)v63 + 10) = 0xE000000000000000;
          *v88 = v60;
          v12 = v79;
        }
      }
      v17 += 5;
      v16 = v91 - 1;
    }
    while (v91 != 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SiriRuleSet.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  sub_1A3A0CF38(a1, v3);
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A0AC90()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000013;
  if (*v0 != 1)
    v1 = 0x656D614E656C6966;
  if (*v0)
    return v1;
  else
    return 0x73656C7572;
}

uint64_t sub_1A3A0ACEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A121E0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A3A0AD10(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1A3A0AD1C()
{
  sub_1A3A0E464();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A0AD44()
{
  sub_1A3A0E464();
  return sub_1A3AB5798();
}

uint64_t SiriRuleSet.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v4 = sub_1A39A4820(&qword_1EE6D3710);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v12[3] = v1[2];
  v12[4] = v8;
  v10 = v1[3];
  v12[1] = v1[4];
  v12[2] = v10;
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0E464();
  sub_1A3AB5780();
  v16 = v9;
  v15 = 0;
  sub_1A39A4820(&qword_1EE6D3718);
  sub_1A3A0E78C(&qword_1EE6D3720, &qword_1EE6D3718, (uint64_t (*)(void))sub_1A3A0E4A8, MEMORY[0x1E0DEAF10]);
  sub_1A3AB55DC();
  if (!v2)
  {
    v14 = 1;
    sub_1A3AB5594();
    v13 = 2;
    sub_1A3AB55AC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SiriRuleSet.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[2];
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3A0CF38((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t SiriRuleSet.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;

  v5 = sub_1A39A4820(&qword_1EE6D3730);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0E464();
  sub_1A3AB5774();
  if (v2)
  {
    sub_1A39A47C4((uint64_t)a1);
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D3718);
    v23 = 0;
    sub_1A3A0E78C(&qword_1EE6D3738, &qword_1EE6D3718, (uint64_t (*)(void))sub_1A3A0E4EC, MEMORY[0x1E0DEAF40]);
    sub_1A3AB554C();
    v10 = v24;
    v22 = 1;
    swift_bridgeObjectRetain();
    v11 = sub_1A3AB5504();
    v13 = v12;
    v20 = v11;
    v21 = 2;
    swift_bridgeObjectRetain();
    v14 = sub_1A3AB551C();
    v16 = v15;
    v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18 = v14;
    v17(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v19 = v20;
    *a2 = v10;
    a2[1] = v19;
    a2[2] = v13;
    a2[3] = v18;
    a2[4] = v16;
    sub_1A39A47C4((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A0B248(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  sub_1A3A0CF38(a1, v3);
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A0B300()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[2];
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3A0CF38((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  sub_1A3AB5714();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A0B3C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SiriRuleSet.init(from:)(a1, a2);
}

uint64_t sub_1A3A0B3D8(_QWORD *a1)
{
  return SiriRuleSet.encode(to:)(a1);
}

uint64_t SiriRulesetGroup.config.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriRulesetGroup.config.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*SiriRulesetGroup.config.modify())()
{
  return nullsub_19;
}

uint64_t SiriRulesetGroup.rulesets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriRulesetGroup.rulesets.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SiriRulesetGroup.rulesets.modify())()
{
  return nullsub_19;
}

TextToSpeech::SiriRulesetGroup __swiftcall SiriRulesetGroup.init(config:rulesets:)(Swift::OpaquePointer config, Swift::OpaquePointer rulesets)
{
  Swift::OpaquePointer *v2;
  TextToSpeech::SiriRulesetGroup result;

  v2->_rawValue = config._rawValue;
  v2[1]._rawValue = rulesets._rawValue;
  result.rulesets = rulesets;
  result.config = config;
  return result;
}

uint64_t SiriRulesetGroup.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v8 = result;
    v9 = (uint64_t *)(v5 + 64);
    while (1)
    {
      v10 = *(v9 - 4);
      v11 = *(v9 - 3);
      v12 = *(v9 - 2);
      v13 = *(v9 - 1);
      v14 = *v9;
      if (v13 == v8 && v14 == a2)
        break;
      result = sub_1A3AB5654();
      if ((result & 1) != 0)
        goto LABEL_11;
      v9 += 5;
      if (!--v6)
        goto LABEL_9;
    }
    v13 = v8;
    v14 = a2;
LABEL_11:
    *a3 = v10;
    a3[1] = v11;
    a3[2] = v12;
    a3[3] = v13;
    a3[4] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_9:
    a3[4] = 0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double sub_1A3A0B55C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_1A3A0B84C(v4, v5, v6, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v7 = v11;
  result = *(double *)v10;
  v9 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 32) = v7;
  return result;
}

uint64_t sub_1A3A0B5F0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[5];

  v3 = *a3;
  v4 = a3[1];
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v10[0] = *a1;
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  v10[4] = v8;
  swift_bridgeObjectRetain();
  sub_1A3A0E530(v10[0]);
  return SiriRulesetGroup.subscript.setter(v10, v3, v4);
}

uint64_t SiriRulesetGroup.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v21 = a1[3];
  v22 = a1[4];
  v10 = *(_QWORD *)(v3 + 8);
  v9 = (uint64_t *)(v3 + 8);
  v8 = v10;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v13 = 0;
    v14 = 64;
    while (1)
    {
      v15 = *(_QWORD *)(v8 + v14 - 8) == a2 && *(_QWORD *)(v8 + v14) == a3;
      if (v15 || (sub_1A3AB5654() & 1) != 0)
        break;
      ++v13;
      v14 += 40;
      if (v11 == v13)
        goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    if (v6)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1A3A0C920(v8);
        v8 = result;
      }
      if (v13 < *(_QWORD *)(v8 + 16))
      {
        v20 = (_QWORD *)(v8 + v14);
        *(v20 - 4) = v6;
        *(v20 - 3) = v5;
        *(v20 - 2) = v7;
        *(v20 - 1) = v21;
        *v20 = v22;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
LABEL_20:
        *v9 = v8;
        return result;
      }
      __break(1u);
    }
    else
    {
      sub_1A3A0B96C(v13, (uint64_t)&v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_9:
    result = swift_bridgeObjectRelease();
    if (v6)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1A3A0C80C(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
        v8 = result;
      }
      v18 = *(_QWORD *)(v8 + 16);
      v17 = *(_QWORD *)(v8 + 24);
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)sub_1A3A0C80C((char *)(v17 > 1), v18 + 1, 1, (char *)v8);
        v8 = result;
      }
      *(_QWORD *)(v8 + 16) = v18 + 1;
      v19 = (_QWORD *)(v8 + 40 * v18);
      v19[4] = v6;
      v19[5] = v5;
      v19[6] = v7;
      v19[7] = v21;
      v19[8] = v22;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_1A3A0B84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v5 = a4;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v8 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
    while (1)
    {
      v10 = *(v8 - 4);
      v9 = *(v8 - 3);
      v11 = *(v8 - 2);
      v12 = *(v8 - 1);
      v13 = *v8;
      if (v12 == a2 && v13 == a3)
        break;
      if ((sub_1A3AB5654() & 1) != 0)
        goto LABEL_12;
      v8 += 5;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        v5 = a4;
        goto LABEL_10;
      }
    }
    v12 = a2;
    v13 = a3;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a4 = v10;
    a4[1] = v9;
    a4[2] = v11;
    a4[3] = v12;
    a4[4] = v13;
  }
  else
  {
LABEL_10:
    result = swift_bridgeObjectRelease();
    v5[4] = 0;
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
  }
  return result;
}

uint64_t sub_1A3A0B96C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1A3A0C920(v5);
    v5 = result;
  }
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v5 + 40 * a1;
    v9 = *(_QWORD *)(v8 + 32);
    v8 += 32;
    v10 = v7 - 1;
    v11 = *(_QWORD *)(v8 + 24);
    v12 = *(_QWORD *)(v8 + 32);
    *(_QWORD *)a2 = v9;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v8 + 8);
    *(_QWORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v12;
    result = (uint64_t)memmove((void *)v8, (const void *)(v8 + 40), 40 * (v10 - a1));
    *(_QWORD *)(v5 + 16) = v10;
    *v2 = v5;
  }
  return result;
}

void (*SiriRulesetGroup.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[6] = a3;
  v7[7] = v3;
  v7[5] = a2;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v8 + 64);
    while (1)
    {
      v11 = *(v10 - 4);
      v12 = *(v10 - 3);
      v13 = *(v10 - 2);
      v14 = *(v10 - 1);
      v15 = *v10;
      if (v14 == a2 && v15 == a3)
        break;
      if ((sub_1A3AB5654() & 1) != 0)
        goto LABEL_11;
      v10 += 5;
      if (!--v9)
        goto LABEL_9;
    }
    v14 = a2;
    v15 = a3;
LABEL_11:
    *v7 = v11;
    v7[1] = v12;
    v7[2] = v13;
    v7[3] = v14;
    v7[4] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
LABEL_9:
    v7[4] = 0;
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
  }
  return sub_1A3A0BB00;
}

void sub_1A3A0BB00(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[5];

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[6];
  v9 = (*a1)[4];
  v8 = (*a1)[5];
  v10[0] = v4;
  v10[1] = v3;
  v10[2] = v6;
  v10[3] = v5;
  v10[4] = v9;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1A3A0E530(v4);
    SiriRulesetGroup.subscript.setter(v10, v8, v7);
    sub_1A3A0E56C(*v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    SiriRulesetGroup.subscript.setter(v10, v8, v7);
  }
  free(v2);
}

uint64_t SiriRulesetGroup.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1A3A0D174(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3A0CD10(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static SiriRulesetGroup.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_1A3A0BC74(*a1, *a2) & 1) != 0)
    return sub_1A3A042A0(v2, v3);
  else
    return 0;
}

uint64_t sub_1A3A0BC74(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD **)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = sub_1A39A2734(v16, v17);
    v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      goto LABEL_50;
    v22 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v19);
    v23 = v22[2];
    if (v23 != v18[2])
      goto LABEL_50;
    if (v23)
      v24 = v22 == v18;
    else
      v24 = 1;
    if (!v24)
    {
      v25 = v22[4] == v18[4] && v22[5] == v18[5];
      if (!v25 && (sub_1A3AB5654() & 1) == 0)
        goto LABEL_50;
      if (v23 != 1)
      {
        v26 = v22[6] == v18[6] && v22[7] == v18[7];
        if (!v26 && (sub_1A3AB5654() & 1) == 0)
          goto LABEL_50;
        v27 = v23 - 2;
        if (v27)
        {
          v28 = 0;
          while (1)
          {
            v29 = v22[v28 + 8] == v18[v28 + 8] && v22[v28 + 9] == v18[v28 + 9];
            if (!v29 && (sub_1A3AB5654() & 1) == 0)
              break;
            v28 += 2;
            if (!--v27)
              goto LABEL_6;
          }
LABEL_50:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
    }
LABEL_6:
    result = swift_bridgeObjectRelease();
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_1A3A0BEE0()
{
  _BYTE *v0;

  if (*v0)
    return 0x73746573656C7572;
  else
    return 0x6769666E6F63;
}

uint64_t sub_1A3A0BF18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A12324(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A0BF3C()
{
  sub_1A3A0E5A4();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A0BF64()
{
  sub_1A3A0E5A4();
  return sub_1A3AB5798();
}

uint64_t SiriRulesetGroup.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v4 = sub_1A39A4820(&qword_1EE6D3748);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v10 = v1[1];
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0E5A4();
  sub_1A3AB5780();
  v12 = v8;
  v11 = 0;
  sub_1A39A4820(&qword_1EE6D3750);
  sub_1A3A0E5E8();
  sub_1A3AB55DC();
  if (!v2)
  {
    v12 = v10;
    v11 = 1;
    sub_1A39A4820(&qword_1EE6D3768);
    sub_1A3A0E78C(&qword_1EE6D3770, &qword_1EE6D3768, (uint64_t (*)(void))sub_1A3A0E668, MEMORY[0x1E0DEAF10]);
    sub_1A3AB55DC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SiriRulesetGroup.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3A0D174((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3A0CD10((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t SiriRulesetGroup.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = sub_1A39A4820(&qword_1EE6D3780);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A0E5A4();
  sub_1A3AB5774();
  if (v2)
    return sub_1A39A47C4((uint64_t)a1);
  sub_1A39A4820(&qword_1EE6D3750);
  v13 = 0;
  sub_1A3A0E6AC();
  sub_1A3AB554C();
  v9 = v14;
  sub_1A39A4820(&qword_1EE6D3768);
  v13 = 1;
  sub_1A3A0E78C(&qword_1EE6D3798, &qword_1EE6D3768, (uint64_t (*)(void))sub_1A3A0E7F0, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1A3AB554C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v14;
  *a2 = v9;
  a2[1] = v10;
  swift_bridgeObjectRetain();
  sub_1A39A47C4((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A0C374@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SiriRulesetGroup.init(from:)(a1, a2);
}

uint64_t sub_1A3A0C388(_QWORD *a1)
{
  return SiriRulesetGroup.encode(to:)(a1);
}

uint64_t sub_1A3A0C39C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3A0D174((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3A0CD10((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A0C40C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1A3A0D174(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3A0CD10(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A0C468()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3A0D174((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3A0CD10((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A0C4D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_1A3A0BC74(*a1, *a2) & 1) != 0)
    return sub_1A3A042A0(v2, v3);
  else
    return 0;
}

uint64_t sub_1A3A0C51C()
{
  sub_1A39B9F44(&qword_1EE6D3830, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1A3AC2E68);
  sub_1A39B9F44(&qword_1EE6D3838, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1A3AC2E08);
  return sub_1A3AB54D4();
}

_QWORD *sub_1A3A0C5A0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1A3A0C5BC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1A3A0C5BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3858);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D3860);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1A3A0C6F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3848);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A3A0C80C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3840);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A3A0C920(uint64_t a1)
{
  return sub_1A3A0C80C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1A3A0C934(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A3AB5708();
  if (v3)
    __asm { BR              X9 }
  return result;
}

uint64_t sub_1A3A0CAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A3AB5708();
  if (v3)
  {
    v5 = a2 + 48;
    do
    {
      v7 = v3;
      v6 = *(_QWORD *)(v5 + 24);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1A39C3E58(v6);
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      sub_1A3AB5714();
      if ((~v6 & 0xF000000000000007) != 0)
      {
        sub_1A3AB5714();
        __asm { BR              X9 }
      }
      sub_1A3AB5714();
      v5 += 64;
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1A39C3F78(v6);
      result = swift_bridgeObjectRelease();
      --v3;
    }
    while (v7 != 1);
  }
  return result;
}

uint64_t sub_1A3A0CD10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A3AB5708();
  v12 = v3;
  if (v3)
  {
    v5 = 0;
    v11 = a2 + 32;
    do
    {
      v6 = (uint64_t *)(v11 + 40 * v5);
      v7 = *v6;
      v8 = v6[2];
      sub_1A3AB5708();
      v9 = *(_QWORD *)(v7 + 16);
      if (v9)
      {
        v13 = v5;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        v10 = v7 + 80;
        do
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1A3AB4A30();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_1A3AB4A30();
          swift_bridgeObjectRelease();
          sub_1A3AB5714();
          swift_bridgeObjectRetain();
          sub_1A3AB4A30();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v10 += 56;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
        v5 = v13;
        if (!v8)
        {
LABEL_10:
          sub_1A3AB5714();
          goto LABEL_5;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!v8)
          goto LABEL_10;
      }
      sub_1A3AB5714();
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
LABEL_5:
      ++v5;
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
    }
    while (v5 != v12);
  }
  return result;
}

uint64_t sub_1A3A0CF38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A3AB5708();
  if (v3)
  {
    v5 = a2 + 80;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      sub_1A3AB5714();
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      v5 += 56;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1A3A0D038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1A3AB5708();
  if (v3)
    __asm { BR              X9 }
  return result;
}

uint64_t sub_1A3A0D174(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;

  v17 = a2 + 64;
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v18 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_19;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v18)
      goto LABEL_23;
    v12 = *(_QWORD *)(v17 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v18)
        goto LABEL_23;
      v12 = *(_QWORD *)(v17 + 8 * v8);
      if (!v12)
        break;
    }
LABEL_18:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_19:
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    swift_bridgeObjectRelease();
    sub_1A3AB5708();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = v14 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_1A3AB4A30();
        swift_bridgeObjectRelease();
        v16 += 16;
        --v15;
      }
      while (v15);
    }
    swift_bridgeObjectRelease();
    result = sub_1A3AB5738();
    v7 ^= result;
  }
  v13 = v11 + 2;
  if (v13 >= v18)
  {
LABEL_23:
    swift_release();
    return sub_1A3AB5708();
  }
  v12 = *(_QWORD *)(v17 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v18)
      goto LABEL_23;
    v12 = *(_QWORD *)(v17 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void _s12TextToSpeech13PostMatchRuleO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1A3A0D3B0@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  float v3;
  void *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  id v13;
  id v14;

  if (a1 >> 62)
    return 0;
  v2 = *(void **)(v1 + 16);
  v3 = *(float *)(v1 + 24);
  v4 = *(void **)(a1 + 16);
  v5 = *(float *)(a1 + 24);
  v6 = sub_1A3AB497C();
  v8 = v7;
  if (v6 == sub_1A3AB497C() && v8 == v9)
    v11 = 1;
  else
    v11 = sub_1A3AB5654();
  swift_retain();
  v13 = v2;
  v14 = v4;
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & (v3 == v5);
}

unint64_t sub_1A3A0D4EC()
{
  unint64_t result;

  result = qword_1EE6D86E0;
  if (!qword_1EE6D86E0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3C30, &type metadata for PostMatchRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D86E0);
  }
  return result;
}

unint64_t sub_1A3A0D530()
{
  unint64_t result;

  result = qword_1EE6D86E8;
  if (!qword_1EE6D86E8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3BE0, &type metadata for PostMatchRule.NotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D86E8);
  }
  return result;
}

unint64_t sub_1A3A0D574()
{
  unint64_t result;

  result = qword_1EE6D3548;
  if (!qword_1EE6D3548)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PostMatchRule, &type metadata for PostMatchRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D3548);
  }
  return result;
}

unint64_t sub_1A3A0D5B8()
{
  unint64_t result;

  result = qword_1EE6D86F0;
  if (!qword_1EE6D86F0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3B90, &type metadata for PostMatchRule.OrCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D86F0);
  }
  return result;
}

unint64_t sub_1A3A0D5FC()
{
  unint64_t result;

  result = qword_1EE6D86F8;
  if (!qword_1EE6D86F8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3B40, &type metadata for PostMatchRule.AndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D86F8);
  }
  return result;
}

unint64_t sub_1A3A0D640()
{
  unint64_t result;

  result = qword_1EE6D8700;
  if (!qword_1EE6D8700)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3AF0, &type metadata for PostMatchRule.PartOfSpeechCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8700);
  }
  return result;
}

void type metadata accessor for NLTag()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE6D3810)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EE6D3810);
  }
}

uint64_t sub_1A3A0D6D8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1A3A0D6FC()
{
  unint64_t result;

  result = qword_1EE6D3590;
  if (!qword_1EE6D3590)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PostMatchRule, &type metadata for PostMatchRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D3590);
  }
  return result;
}

uint64_t sub_1A3A0D740()
{
  uint64_t v0;

  return swift_deallocObject();
}

void _s12TextToSpeech21RulesetActivationRuleO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1A3A0D798@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;

  if (a1 >> 61)
    return 0;
  if (*(_QWORD *)(v1 + 16) == *(_QWORD *)(a1 + 16) && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 24))
    return 1;
  else
    return sub_1A3AB5654();
}

unint64_t sub_1A3A0D8C0()
{
  unint64_t result;

  result = qword_1EE6D8708;
  if (!qword_1EE6D8708)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3AA0, &type metadata for RulesetActivationRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8708);
  }
  return result;
}

unint64_t sub_1A3A0D904()
{
  unint64_t result;

  result = qword_1EE6D8710;
  if (!qword_1EE6D8710)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3A50, &type metadata for RulesetActivationRule.NotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8710);
  }
  return result;
}

unint64_t sub_1A3A0D948()
{
  unint64_t result;

  result = qword_1EE6D35E8;
  if (!qword_1EE6D35E8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for RulesetActivationRule, &type metadata for RulesetActivationRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D35E8);
  }
  return result;
}

unint64_t sub_1A3A0D98C()
{
  unint64_t result;

  result = qword_1EE6D8718;
  if (!qword_1EE6D8718)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3A00, &type metadata for RulesetActivationRule.OrCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8718);
  }
  return result;
}

unint64_t sub_1A3A0D9D0()
{
  unint64_t result;

  result = qword_1EE6D8720;
  if (!qword_1EE6D8720)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC39B0, &type metadata for RulesetActivationRule.AndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8720);
  }
  return result;
}

unint64_t sub_1A3A0DA14()
{
  unint64_t result;

  result = qword_1EE6D8728;
  if (!qword_1EE6D8728)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3960, &type metadata for RulesetActivationRule.AllCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8728);
  }
  return result;
}

unint64_t sub_1A3A0DA58()
{
  unint64_t result;

  result = qword_1EE6D8730;
  if (!qword_1EE6D8730)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3910, &type metadata for RulesetActivationRule.SynthesizerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8730);
  }
  return result;
}

unint64_t sub_1A3A0DA9C()
{
  unint64_t result;

  result = qword_1EE6D35F0;
  if (!qword_1EE6D35F0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for RulesetTargetSynthesizer, &type metadata for RulesetTargetSynthesizer);
    atomic_store(result, (unint64_t *)&qword_1EE6D35F0);
  }
  return result;
}

unint64_t sub_1A3A0DAE0()
{
  unint64_t result;

  result = qword_1EE6D8738;
  if (!qword_1EE6D8738)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC38C0, &type metadata for RulesetActivationRule.VoiceIdentifierPrefixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8738);
  }
  return result;
}

unint64_t sub_1A3A0DB24()
{
  unint64_t result;

  result = qword_1EE6D3638;
  if (!qword_1EE6D3638)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for RulesetActivationRule, &type metadata for RulesetActivationRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D3638);
  }
  return result;
}

uint64_t sub_1A3A0DB68()
{
  return swift_deallocObject();
}

unint64_t sub_1A3A0DB78()
{
  unint64_t result;

  result = qword_1EE6D3640;
  if (!qword_1EE6D3640)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for RulesetTargetSynthesizer, &type metadata for RulesetTargetSynthesizer);
    atomic_store(result, (unint64_t *)&qword_1EE6D3640);
  }
  return result;
}

uint64_t sub_1A3A0DBBC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _s12TextToSpeech16PronuncationRuleV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 33);
  v6 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  v10 = *(unsigned __int8 *)(a2 + 33);
  v11 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_1A3AB5654(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8 || (v14 = sub_1A3AB5654(), result = 0, (v14 & 1) != 0))
    {
      if (v4)
        v15 = 6385769;
      else
        v15 = 7823730;
      if (v9)
        v16 = 6385769;
      else
        v16 = 7823730;
      if (v15 == v16)
      {
        swift_bridgeObjectRelease_n();
        if (v5 != v10)
          return 0;
      }
      else
      {
        v17 = sub_1A3AB5654();
        swift_bridgeObjectRelease_n();
        result = 0;
        if ((v17 & 1) == 0 || ((v5 ^ v10) & 1) != 0)
          return result;
      }
      if ((~v6 & 0xF000000000000007) != 0)
      {
        v24 = v6;
        if ((~v11 & 0xF000000000000007) != 0)
        {
          sub_1A39C3E58(v6);
          swift_retain();
          _s12TextToSpeech13PostMatchRuleO2eeoiySbAC_ACtFZ_0((uint64_t)&v24);
          v19 = v18;
          swift_release();
          sub_1A39C3F78(v6);
          if ((v19 & 1) != 0)
          {
LABEL_25:
            if (v23 == v21 && v22 == v20)
              return 1;
            else
              return sub_1A3AB5654();
          }
          return 0;
        }
        swift_retain();
      }
      else if ((~v11 & 0xF000000000000007) == 0)
      {
        goto LABEL_25;
      }
      sub_1A39C3E58(v11);
      sub_1A39C3F78(v6);
      sub_1A39C3F78(v11);
      return 0;
    }
  }
  return result;
}

unint64_t sub_1A3A0DDF8()
{
  unint64_t result;

  result = qword_1EE6D8740;
  if (!qword_1EE6D8740)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3870, &type metadata for PronuncationRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8740);
  }
  return result;
}

unint64_t sub_1A3A0DE3C()
{
  unint64_t result;

  result = qword_1EE6D3650;
  if (!qword_1EE6D3650)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PronuncationRule.ReplacementType, &type metadata for PronuncationRule.ReplacementType);
    atomic_store(result, (unint64_t *)&qword_1EE6D3650);
  }
  return result;
}

unint64_t sub_1A3A0DE80()
{
  unint64_t result;

  result = qword_1EE6D3660;
  if (!qword_1EE6D3660)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PronuncationRule.ReplacementType, &type metadata for PronuncationRule.ReplacementType);
    atomic_store(result, (unint64_t *)&qword_1EE6D3660);
  }
  return result;
}

uint64_t type metadata accessor for PronunciationRuleSet()
{
  uint64_t result;

  result = qword_1EE6D9C70;
  if (!qword_1EE6D9C70)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t _s12TextToSpeech11SiriRuleSetV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[4];
  v6 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  if ((sub_1A3A044DC(*a1, *a2) & 1) == 0)
    return 0;
  if (!v4)
  {
    if (!v8)
    {
LABEL_11:
      if (v3 == v7 && v5 == v9)
        return 1;
      else
        return sub_1A3AB5654();
    }
    return 0;
  }
  if (!v8)
    return 0;
  if (v2 == v6 && v4 == v8)
    goto LABEL_11;
  v10 = sub_1A3AB5654();
  result = 0;
  if ((v10 & 1) != 0)
    goto LABEL_11;
  return result;
}

uint64_t _s12TextToSpeech20PronunciationRuleSetV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  char v5;
  uint64_t result;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  if (*a1 != *a2 || a1[1] != a2[1])
  {
    v5 = sub_1A3AB5654();
    result = 0;
    if ((v5 & 1) == 0)
      return result;
  }
  v7 = (int *)type metadata accessor for PronunciationRuleSet();
  if ((sub_1A3AB4370() & 1) == 0)
    return 0;
  v8 = v7[6];
  v9 = *(_QWORD *)((char *)a1 + v8);
  v10 = *(_QWORD *)((char *)a1 + v8 + 8);
  v11 = (_QWORD *)((char *)a2 + v8);
  if (v9 != *v11 || v10 != v11[1])
  {
    v13 = sub_1A3AB5654();
    result = 0;
    if ((v13 & 1) == 0)
      return result;
  }
  v26 = *(_QWORD *)((char *)a1 + v7[7]);
  _s12TextToSpeech21RulesetActivationRuleO2eeoiySbAC_ACtFZ_0((uint64_t)&v26);
  if ((v14 & 1) == 0)
    return 0;
  v15 = v7[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = *(_QWORD *)((char *)a1 + v15 + 8);
  v18 = (_QWORD *)((char *)a2 + v15);
  v19 = v18[1];
  if (v17)
  {
    if (v19)
    {
      if (*v16 != *v18 || v17 != v19)
      {
        v21 = sub_1A3AB5654();
        result = 0;
        if ((v21 & 1) == 0)
          return result;
      }
      goto LABEL_22;
    }
    return 0;
  }
  if (v19)
    return 0;
LABEL_22:
  if ((sub_1A3A041B0(*(_QWORD *)((char *)a1 + v7[9]), *(_QWORD *)((char *)a2 + v7[9])) & 1) == 0
    || *(_QWORD *)((char *)a1 + v7[10]) != *(_QWORD *)((char *)a2 + v7[10])
    || *((unsigned __int8 *)a1 + v7[11]) != *((unsigned __int8 *)a2 + v7[11]))
  {
    return 0;
  }
  v22 = v7[12];
  v23 = *(_QWORD *)((char *)a1 + v22);
  v24 = *(_QWORD *)((char *)a1 + v22 + 8);
  v25 = (_QWORD *)((char *)a2 + v22);
  if (v23 == *v25 && v24 == v25[1])
    return 1;
  else
    return sub_1A3AB5654();
}

unint64_t sub_1A3A0E184()
{
  unint64_t result;

  result = qword_1EE6D8748;
  if (!qword_1EE6D8748)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3820, &type metadata for PronunciationRuleSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8748);
  }
  return result;
}

unint64_t sub_1A3A0E1C8()
{
  unint64_t result;

  result = qword_1EE6D3688;
  if (!qword_1EE6D3688)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PronuncationRule, &type metadata for PronuncationRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D3688);
  }
  return result;
}

unint64_t sub_1A3A0E20C()
{
  unint64_t result;

  result = qword_1EE6D36A8;
  if (!qword_1EE6D36A8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PronuncationRule, &type metadata for PronuncationRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D36A8);
  }
  return result;
}

uint64_t _s12TextToSpeech8SiriRuleV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_1A3AB5654(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8)
    {
      if (v4 != v9)
        return 0;
    }
    else
    {
      v14 = sub_1A3AB5654();
      result = 0;
      if ((v14 & 1) == 0 || ((v4 ^ v9) & 1) != 0)
        return result;
    }
    if (v5 == v10 && v6 == v11)
      return 1;
    else
      return sub_1A3AB5654();
  }
  return result;
}

unint64_t sub_1A3A0E368()
{
  unint64_t result;

  result = qword_1EE6D8750;
  if (!qword_1EE6D8750)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC37D0, &type metadata for SiriRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8750);
  }
  return result;
}

uint64_t sub_1A3A0E3AC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1A3A0E3F0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1A3A0E464()
{
  unint64_t result;

  result = qword_1EE6D8758;
  if (!qword_1EE6D8758)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3780, &type metadata for SiriRuleSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D8758);
  }
  return result;
}

unint64_t sub_1A3A0E4A8()
{
  unint64_t result;

  result = qword_1EE6D3728;
  if (!qword_1EE6D3728)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SiriRule, &type metadata for SiriRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D3728);
  }
  return result;
}

unint64_t sub_1A3A0E4EC()
{
  unint64_t result;

  result = qword_1EE6D3740;
  if (!qword_1EE6D3740)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SiriRule, &type metadata for SiriRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D3740);
  }
  return result;
}

uint64_t sub_1A3A0E530(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1A3A0E56C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1A3A0E5A4()
{
  unint64_t result;

  result = qword_1EE6D8760[0];
  if (!qword_1EE6D8760[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3730, &type metadata for SiriRulesetGroup.CodingKeys);
    atomic_store(result, qword_1EE6D8760);
  }
  return result;
}

unint64_t sub_1A3A0E5E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EE6D3758;
  if (!qword_1EE6D3758)
  {
    v1 = sub_1A39AB624(&qword_1EE6D3750);
    v2[0] = MEMORY[0x1E0DEA970];
    v2[1] = sub_1A3A0E72C(&qword_1EE6D3760, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA0B8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EE6D3758);
  }
  return result;
}

unint64_t sub_1A3A0E668()
{
  unint64_t result;

  result = qword_1EE6D3778;
  if (!qword_1EE6D3778)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SiriRuleSet, &type metadata for SiriRuleSet);
    atomic_store(result, (unint64_t *)&qword_1EE6D3778);
  }
  return result;
}

unint64_t sub_1A3A0E6AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EE6D3788;
  if (!qword_1EE6D3788)
  {
    v1 = sub_1A39AB624(&qword_1EE6D3750);
    v2[0] = MEMORY[0x1E0DEA9A0];
    v2[1] = sub_1A3A0E72C(&qword_1EE6D3790, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEA0D8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EE6D3788);
  }
  return result;
}

uint64_t sub_1A3A0E72C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_1A39AB624(&qword_1EE6D2380);
    v8 = a2;
    result = MEMORY[0x1A8597738](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A3A0E78C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = sub_1A39AB624(a2);
    v9 = a3();
    result = MEMORY[0x1A8597738](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A3A0E7F0()
{
  unint64_t result;

  result = qword_1EE6D37A0;
  if (!qword_1EE6D37A0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SiriRuleSet, &type metadata for SiriRuleSet);
    atomic_store(result, (unint64_t *)&qword_1EE6D37A0);
  }
  return result;
}

unint64_t sub_1A3A0E838()
{
  unint64_t result;

  result = qword_1EE6D37A8;
  if (!qword_1EE6D37A8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PostMatchRule, &type metadata for PostMatchRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D37A8);
  }
  return result;
}

unint64_t sub_1A3A0E880()
{
  unint64_t result;

  result = qword_1EE6D37B0;
  if (!qword_1EE6D37B0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for RulesetTargetSynthesizer, &type metadata for RulesetTargetSynthesizer);
    atomic_store(result, (unint64_t *)&qword_1EE6D37B0);
  }
  return result;
}

uint64_t sub_1A3A0E8C4()
{
  return sub_1A39C3EF8(&qword_1EE6D37B8, &qword_1EE6D37C0, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1A3A0E8F4()
{
  unint64_t result;

  result = qword_1EE6D37C8;
  if (!qword_1EE6D37C8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for RulesetActivationRule, &type metadata for RulesetActivationRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D37C8);
  }
  return result;
}

unint64_t sub_1A3A0E93C()
{
  unint64_t result;

  result = qword_1EE6D37D0;
  if (!qword_1EE6D37D0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PronuncationRule.ReplacementType, &type metadata for PronuncationRule.ReplacementType);
    atomic_store(result, (unint64_t *)&qword_1EE6D37D0);
  }
  return result;
}

uint64_t sub_1A3A0E980()
{
  return sub_1A39C3EF8(&qword_1EE6D37D8, &qword_1EE6D37E0, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1A3A0E9B0()
{
  unint64_t result;

  result = qword_1EE6D37E8;
  if (!qword_1EE6D37E8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PronuncationRule, &type metadata for PronuncationRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D37E8);
  }
  return result;
}

uint64_t sub_1A3A0E9F4()
{
  return sub_1A39B9F44(&qword_1EE6D37F0, (uint64_t (*)(uint64_t))type metadata accessor for PronunciationRuleSet, (uint64_t)&protocol conformance descriptor for PronunciationRuleSet);
}

unint64_t sub_1A3A0EA24()
{
  unint64_t result;

  result = qword_1EE6D37F8;
  if (!qword_1EE6D37F8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SiriRule, &type metadata for SiriRule);
    atomic_store(result, (unint64_t *)&qword_1EE6D37F8);
  }
  return result;
}

unint64_t sub_1A3A0EA6C()
{
  unint64_t result;

  result = qword_1EE6D3800;
  if (!qword_1EE6D3800)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SiriRuleSet, &type metadata for SiriRuleSet);
    atomic_store(result, (unint64_t *)&qword_1EE6D3800);
  }
  return result;
}

unint64_t sub_1A3A0EAB4()
{
  unint64_t result;

  result = qword_1EE6D3808;
  if (!qword_1EE6D3808)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for SiriRulesetGroup, &type metadata for SiriRulesetGroup);
    atomic_store(result, (unint64_t *)&qword_1EE6D3808);
  }
  return result;
}

uint64_t sub_1A3A0EAF8()
{
  return 0;
}

_QWORD *_s4SpecV7ControlOwCP(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t _s4SpecV7ControlOwxx()
{
  return swift_release();
}

_QWORD *_s4SpecV7ControlOwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *_s4SpecV7ControlOwta(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t _s4SpecV7ControlOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s4SpecV7ControlOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1A3A0EC64(_QWORD *a1)
{
  return *a1 >> 62;
}

_QWORD *sub_1A3A0EC70(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_1A3A0EC80(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for PostMatchRule()
{
  return &type metadata for PostMatchRule;
}

ValueMetadata *type metadata accessor for RulesetTargetSynthesizer()
{
  return &type metadata for RulesetTargetSynthesizer;
}

uint64_t dispatch thunk of TTSPronunciationLoader.siriRules(language:orderKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of TTSPronunciationLoader.axRules(language:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

_QWORD *initializeBufferWithCopyOfBuffer for RulesetActivationRule(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for RulesetActivationRule()
{
  return swift_release();
}

_QWORD *assignWithCopy for RulesetActivationRule(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for RulesetActivationRule(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RulesetActivationRule(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 123);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RulesetActivationRule(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7A)
  {
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1A3A0EE28(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 61;
  if (v1 <= 4)
    return v1;
  else
    return (*a1 >> 3) + 5;
}

_QWORD *sub_1A3A0EE44(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1A3A0EE54(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 5)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 61;
  }
  else
  {
    v2 = 8 * (a2 - 5);
    v3 = 0xA000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for RulesetActivationRule()
{
  return &type metadata for RulesetActivationRule;
}

uint64_t destroy for PronuncationRule(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((~*(_QWORD *)(a1 + 40) & 0xF000000000000007) != 0)
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PronuncationRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((~v7 & 0xF000000000000007) != 0)
    swift_retain();
  v9 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PronuncationRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = v6 & 0xF000000000000007;
  if ((~v4 & 0xF000000000000007) != 0)
  {
    if (v7 == 0xF000000000000007)
    {
      sub_1A3A0F06C(a1 + 40);
      *v5 = *(_QWORD *)(a2 + 40);
    }
    else
    {
      *v5 = v6;
      swift_retain();
      swift_release();
    }
  }
  else
  {
    *v5 = v6;
    if (v7 != 0xF000000000000007)
      swift_retain();
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A3A0F06C(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t assignWithTake for PronuncationRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = *(_QWORD *)(a2 + 40);
  if ((~v6 & 0xF000000000000007) != 0)
  {
    if ((~v8 & 0xF000000000000007) != 0)
    {
      *v7 = v8;
      swift_release();
      goto LABEL_6;
    }
    sub_1A3A0F06C(a1 + 40);
  }
  *v7 = v8;
LABEL_6:
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PronuncationRule(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PronuncationRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PronuncationRule()
{
  return &type metadata for PronuncationRule;
}

ValueMetadata *type metadata accessor for PronuncationRule.ReplacementType()
{
  return &type metadata for PronuncationRule.ReplacementType;
}

_QWORD *initializeBufferWithCopyOfBuffer for PronunciationRuleSet(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1A3AB4388();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)v4 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(_QWORD *)((char *)v4 + v14) = *(_QWORD *)((char *)a2 + v14);
    v18 = a3[8];
    v19 = a3[9];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    *(_QWORD *)((char *)v4 + v19) = *(_QWORD *)((char *)a2 + v19);
    v23 = a3[11];
    *(_QWORD *)((char *)v4 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
    *((_BYTE *)v4 + v23) = *((_BYTE *)a2 + v23);
    v24 = a3[12];
    v25 = (_QWORD *)((char *)v4 + v24);
    v26 = (_QWORD *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PronunciationRuleSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1A3AB4388();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PronunciationRuleSet(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A3AB4388();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v17 = a3[8];
  v18 = a3[9];
  v19 = (_QWORD *)((char *)a1 + v17);
  v20 = (_QWORD *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v22 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
  v23 = a3[12];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PronunciationRuleSet(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A3AB4388();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  v13 = a3[8];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v16 = a3[12];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for PronunciationRuleSet(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A3AB4388();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  return a1;
}

_QWORD *assignWithTake for PronunciationRuleSet(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A3AB4388();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_release();
  v16 = a3[8];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  v21 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  v22 = a3[12];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PronunciationRuleSet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A0F800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A3AB4388();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PronunciationRuleSet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A0F888(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1A3AB4388();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A3A0F8FC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A3AB4388();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for SiriRule()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriRule(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SiriRule(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SiriRule(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SiriRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRule(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriRule()
{
  return &type metadata for SiriRule;
}

uint64_t destroy for SiriRuleSet()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SiriRuleSet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SiriRuleSet(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SiriRuleSet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRuleSet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriRuleSet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriRuleSet()
{
  return &type metadata for SiriRuleSet;
}

uint64_t destroy for SiriRulesetGroup()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s12TextToSpeech16SiriRulesetGroupVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SiriRulesetGroup(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SiriRulesetGroup(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRulesetGroup(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriRulesetGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriRulesetGroup()
{
  return &type metadata for SiriRulesetGroup;
}

ValueMetadata *type metadata accessor for SiriRulesetGroup.CodingKeys()
{
  return &type metadata for SiriRulesetGroup.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SiriRuleSet.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A3A0FFCC + 4 * byte_1A3AC1F5E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A3A10000 + 4 * byte_1A3AC1F59[v4]))();
}

uint64_t sub_1A3A10000(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A10008(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A10010);
  return result;
}

uint64_t sub_1A3A1001C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A10024);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A3A10028(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A10030(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriRuleSet.CodingKeys()
{
  return &type metadata for SiriRuleSet.CodingKeys;
}

ValueMetadata *type metadata accessor for SiriRule.CodingKeys()
{
  return &type metadata for SiriRule.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PronunciationRuleSet.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PronunciationRuleSet.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1A3A10138 + 4 * byte_1A3AC1F68[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1A3A1016C + 4 * byte_1A3AC1F63[v4]))();
}

uint64_t sub_1A3A1016C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A10174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A1017CLL);
  return result;
}

uint64_t sub_1A3A10188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A10190);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1A3A10194(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A1019C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PronunciationRuleSet.CodingKeys()
{
  return &type metadata for PronunciationRuleSet.CodingKeys;
}

ValueMetadata *type metadata accessor for PronuncationRule.CodingKeys()
{
  return &type metadata for PronuncationRule.CodingKeys;
}

uint64_t _s12TextToSpeech16PronuncationRuleV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1A3A1021C + 4 * byte_1A3AC1F72[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1A3A10250 + 4 * byte_1A3AC1F6D[v4]))();
}

uint64_t sub_1A3A10250(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A10258(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A10260);
  return result;
}

uint64_t sub_1A3A1026C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A10274);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1A3A10278(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A10280(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RulesetActivationRule.CodingKeys()
{
  return &type metadata for RulesetActivationRule.CodingKeys;
}

ValueMetadata *type metadata accessor for RulesetActivationRule.VoiceIdentifierPrefixCodingKeys()
{
  return &type metadata for RulesetActivationRule.VoiceIdentifierPrefixCodingKeys;
}

ValueMetadata *type metadata accessor for RulesetActivationRule.SynthesizerCodingKeys()
{
  return &type metadata for RulesetActivationRule.SynthesizerCodingKeys;
}

ValueMetadata *type metadata accessor for RulesetActivationRule.AllCodingKeys()
{
  return &type metadata for RulesetActivationRule.AllCodingKeys;
}

ValueMetadata *type metadata accessor for RulesetActivationRule.AndCodingKeys()
{
  return &type metadata for RulesetActivationRule.AndCodingKeys;
}

ValueMetadata *type metadata accessor for RulesetActivationRule.OrCodingKeys()
{
  return &type metadata for RulesetActivationRule.OrCodingKeys;
}

ValueMetadata *type metadata accessor for RulesetActivationRule.NotCodingKeys()
{
  return &type metadata for RulesetActivationRule.NotCodingKeys;
}

uint64_t getEnumTagSinglePayload for TTSSpeechQueue.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12TextToSpeech24RulesetTargetSynthesizerOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A3A103E4 + 4 * byte_1A3AC1F7C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A3A10418 + 4 * byte_1A3AC1F77[v4]))();
}

uint64_t sub_1A3A10418(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A10420(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A10428);
  return result;
}

uint64_t sub_1A3A10434(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A1043CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A3A10440(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A10448(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PostMatchRule.CodingKeys()
{
  return &type metadata for PostMatchRule.CodingKeys;
}

uint64_t _s12TextToSpeech16PronuncationRuleV15ReplacementTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A3A104B0 + 4 * byte_1A3AC1F86[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A3A104E4 + 4 * byte_1A3AC1F81[v4]))();
}

uint64_t sub_1A3A104E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A104EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A104F4);
  return result;
}

uint64_t sub_1A3A10500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A10508);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A3A1050C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A10514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PostMatchRule.PartOfSpeechCodingKeys()
{
  return &type metadata for PostMatchRule.PartOfSpeechCodingKeys;
}

ValueMetadata *type metadata accessor for PostMatchRule.AndCodingKeys()
{
  return &type metadata for PostMatchRule.AndCodingKeys;
}

ValueMetadata *type metadata accessor for PostMatchRule.OrCodingKeys()
{
  return &type metadata for PostMatchRule.OrCodingKeys;
}

uint64_t getEnumTagSinglePayload for TTSSSEParamCustomUnit(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s12TextToSpeech21RulesetActivationRuleO31VoiceIdentifierPrefixCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A3A105E0 + 4 * byte_1A3AC1F8B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A3A10600 + 4 * byte_1A3AC1F90[v4]))();
}

_BYTE *sub_1A3A105E0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A3A10600(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A3A10608(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A3A10610(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A3A10618(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A3A10620(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PostMatchRule.NotCodingKeys()
{
  return &type metadata for PostMatchRule.NotCodingKeys;
}

unint64_t sub_1A3A10640()
{
  unint64_t result;

  result = qword_1EE6D9D80[0];
  if (!qword_1EE6D9D80[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2A88, &type metadata for PostMatchRule.NotCodingKeys);
    atomic_store(result, qword_1EE6D9D80);
  }
  return result;
}

unint64_t sub_1A3A10688()
{
  unint64_t result;

  result = qword_1EE6D9F90[0];
  if (!qword_1EE6D9F90[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2B40, &type metadata for PostMatchRule.OrCodingKeys);
    atomic_store(result, qword_1EE6D9F90);
  }
  return result;
}

unint64_t sub_1A3A106D0()
{
  unint64_t result;

  result = qword_1EE6DA1A0[0];
  if (!qword_1EE6DA1A0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2BF8, &type metadata for PostMatchRule.AndCodingKeys);
    atomic_store(result, qword_1EE6DA1A0);
  }
  return result;
}

unint64_t sub_1A3A10718()
{
  unint64_t result;

  result = qword_1EE6DA3B0[0];
  if (!qword_1EE6DA3B0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2CB0, &type metadata for PostMatchRule.PartOfSpeechCodingKeys);
    atomic_store(result, qword_1EE6DA3B0);
  }
  return result;
}

unint64_t sub_1A3A10760()
{
  unint64_t result;

  result = qword_1EE6DA5C0[0];
  if (!qword_1EE6DA5C0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2D68, &type metadata for PostMatchRule.CodingKeys);
    atomic_store(result, qword_1EE6DA5C0);
  }
  return result;
}

uint64_t sub_1A3A107A4()
{
  return sub_1A39B9F44(&qword_1EE6D3818, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1A3AC2DCC);
}

uint64_t sub_1A3A107D0()
{
  return sub_1A39B9F44(&qword_1EE6D3820, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1A3AC2DA0);
}

uint64_t sub_1A3A107FC()
{
  return sub_1A39B9F44(&qword_1EE6D3828, (uint64_t (*)(uint64_t))type metadata accessor for NLTag, (uint64_t)&unk_1A3AC2E3C);
}

unint64_t sub_1A3A1082C()
{
  unint64_t result;

  result = qword_1EE6DAAD0[0];
  if (!qword_1EE6DAAD0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2F88, &type metadata for RulesetActivationRule.NotCodingKeys);
    atomic_store(result, qword_1EE6DAAD0);
  }
  return result;
}

unint64_t sub_1A3A10874()
{
  unint64_t result;

  result = qword_1EE6DACE0[0];
  if (!qword_1EE6DACE0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3040, &type metadata for RulesetActivationRule.OrCodingKeys);
    atomic_store(result, qword_1EE6DACE0);
  }
  return result;
}

unint64_t sub_1A3A108BC()
{
  unint64_t result;

  result = qword_1EE6DAEF0[0];
  if (!qword_1EE6DAEF0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC30F8, &type metadata for RulesetActivationRule.AndCodingKeys);
    atomic_store(result, qword_1EE6DAEF0);
  }
  return result;
}

unint64_t sub_1A3A10904()
{
  unint64_t result;

  result = qword_1EE6DB200[0];
  if (!qword_1EE6DB200[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3200, &type metadata for RulesetActivationRule.SynthesizerCodingKeys);
    atomic_store(result, qword_1EE6DB200);
  }
  return result;
}

unint64_t sub_1A3A1094C()
{
  unint64_t result;

  result = qword_1EE6DB410[0];
  if (!qword_1EE6DB410[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC32B8, &type metadata for RulesetActivationRule.VoiceIdentifierPrefixCodingKeys);
    atomic_store(result, qword_1EE6DB410);
  }
  return result;
}

unint64_t sub_1A3A10994()
{
  unint64_t result;

  result = qword_1EE6DB620[0];
  if (!qword_1EE6DB620[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3370, &type metadata for RulesetActivationRule.CodingKeys);
    atomic_store(result, qword_1EE6DB620);
  }
  return result;
}

unint64_t sub_1A3A109DC()
{
  unint64_t result;

  result = qword_1EE6DB830[0];
  if (!qword_1EE6DB830[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3428, &type metadata for PronuncationRule.CodingKeys);
    atomic_store(result, qword_1EE6DB830);
  }
  return result;
}

unint64_t sub_1A3A10A24()
{
  unint64_t result;

  result = qword_1EE6DBA40[0];
  if (!qword_1EE6DBA40[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC34E0, &type metadata for PronunciationRuleSet.CodingKeys);
    atomic_store(result, qword_1EE6DBA40);
  }
  return result;
}

unint64_t sub_1A3A10A6C()
{
  unint64_t result;

  result = qword_1EE6DBC50[0];
  if (!qword_1EE6DBC50[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3598, &type metadata for SiriRule.CodingKeys);
    atomic_store(result, qword_1EE6DBC50);
  }
  return result;
}

unint64_t sub_1A3A10AB4()
{
  unint64_t result;

  result = qword_1EE6DBE60[0];
  if (!qword_1EE6DBE60[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3650, &type metadata for SiriRuleSet.CodingKeys);
    atomic_store(result, qword_1EE6DBE60);
  }
  return result;
}

unint64_t sub_1A3A10AFC()
{
  unint64_t result;

  result = qword_1EE6DC070[0];
  if (!qword_1EE6DC070[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3708, &type metadata for SiriRulesetGroup.CodingKeys);
    atomic_store(result, qword_1EE6DC070);
  }
  return result;
}

unint64_t sub_1A3A10B44()
{
  unint64_t result;

  result = qword_1EE6DC180;
  if (!qword_1EE6DC180)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3678, &type metadata for SiriRulesetGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC180);
  }
  return result;
}

unint64_t sub_1A3A10B8C()
{
  unint64_t result;

  result = qword_1EE6DC188[0];
  if (!qword_1EE6DC188[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC36A0, &type metadata for SiriRulesetGroup.CodingKeys);
    atomic_store(result, qword_1EE6DC188);
  }
  return result;
}

unint64_t sub_1A3A10BD4()
{
  unint64_t result;

  result = qword_1EE6DC210;
  if (!qword_1EE6DC210)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC35C0, &type metadata for SiriRuleSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC210);
  }
  return result;
}

unint64_t sub_1A3A10C1C()
{
  unint64_t result;

  result = qword_1EE6DC218[0];
  if (!qword_1EE6DC218[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC35E8, &type metadata for SiriRuleSet.CodingKeys);
    atomic_store(result, qword_1EE6DC218);
  }
  return result;
}

unint64_t sub_1A3A10C64()
{
  unint64_t result;

  result = qword_1EE6DC2A0;
  if (!qword_1EE6DC2A0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3508, &type metadata for SiriRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC2A0);
  }
  return result;
}

unint64_t sub_1A3A10CAC()
{
  unint64_t result;

  result = qword_1EE6DC2A8[0];
  if (!qword_1EE6DC2A8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3530, &type metadata for SiriRule.CodingKeys);
    atomic_store(result, qword_1EE6DC2A8);
  }
  return result;
}

unint64_t sub_1A3A10CF4()
{
  unint64_t result;

  result = qword_1EE6DC330;
  if (!qword_1EE6DC330)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3450, &type metadata for PronunciationRuleSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC330);
  }
  return result;
}

unint64_t sub_1A3A10D3C()
{
  unint64_t result;

  result = qword_1EE6DC338[0];
  if (!qword_1EE6DC338[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3478, &type metadata for PronunciationRuleSet.CodingKeys);
    atomic_store(result, qword_1EE6DC338);
  }
  return result;
}

unint64_t sub_1A3A10D84()
{
  unint64_t result;

  result = qword_1EE6DC3C0;
  if (!qword_1EE6DC3C0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3398, &type metadata for PronuncationRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC3C0);
  }
  return result;
}

unint64_t sub_1A3A10DCC()
{
  unint64_t result;

  result = qword_1EE6DC3C8[0];
  if (!qword_1EE6DC3C8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC33C0, &type metadata for PronuncationRule.CodingKeys);
    atomic_store(result, qword_1EE6DC3C8);
  }
  return result;
}

unint64_t sub_1A3A10E14()
{
  unint64_t result;

  result = qword_1EE6DC450;
  if (!qword_1EE6DC450)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3228, &type metadata for RulesetActivationRule.VoiceIdentifierPrefixCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC450);
  }
  return result;
}

unint64_t sub_1A3A10E5C()
{
  unint64_t result;

  result = qword_1EE6DC458[0];
  if (!qword_1EE6DC458[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3250, &type metadata for RulesetActivationRule.VoiceIdentifierPrefixCodingKeys);
    atomic_store(result, qword_1EE6DC458);
  }
  return result;
}

unint64_t sub_1A3A10EA4()
{
  unint64_t result;

  result = qword_1EE6DC4E0;
  if (!qword_1EE6DC4E0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3170, &type metadata for RulesetActivationRule.SynthesizerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC4E0);
  }
  return result;
}

unint64_t sub_1A3A10EEC()
{
  unint64_t result;

  result = qword_1EE6DC4E8[0];
  if (!qword_1EE6DC4E8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3198, &type metadata for RulesetActivationRule.SynthesizerCodingKeys);
    atomic_store(result, qword_1EE6DC4E8);
  }
  return result;
}

unint64_t sub_1A3A10F34()
{
  unint64_t result;

  result = qword_1EE6DC570;
  if (!qword_1EE6DC570)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3120, &type metadata for RulesetActivationRule.AllCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC570);
  }
  return result;
}

unint64_t sub_1A3A10F7C()
{
  unint64_t result;

  result = qword_1EE6DC578;
  if (!qword_1EE6DC578)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3148, &type metadata for RulesetActivationRule.AllCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC578);
  }
  return result;
}

unint64_t sub_1A3A10FC4()
{
  unint64_t result;

  result = qword_1EE6DC600;
  if (!qword_1EE6DC600)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3068, &type metadata for RulesetActivationRule.AndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC600);
  }
  return result;
}

unint64_t sub_1A3A1100C()
{
  unint64_t result;

  result = qword_1EE6DC608[0];
  if (!qword_1EE6DC608[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3090, &type metadata for RulesetActivationRule.AndCodingKeys);
    atomic_store(result, qword_1EE6DC608);
  }
  return result;
}

unint64_t sub_1A3A11054()
{
  unint64_t result;

  result = qword_1EE6DC690;
  if (!qword_1EE6DC690)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2FB0, &type metadata for RulesetActivationRule.OrCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC690);
  }
  return result;
}

unint64_t sub_1A3A1109C()
{
  unint64_t result;

  result = qword_1EE6DC698[0];
  if (!qword_1EE6DC698[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2FD8, &type metadata for RulesetActivationRule.OrCodingKeys);
    atomic_store(result, qword_1EE6DC698);
  }
  return result;
}

unint64_t sub_1A3A110E4()
{
  unint64_t result;

  result = qword_1EE6DC720;
  if (!qword_1EE6DC720)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2EF8, &type metadata for RulesetActivationRule.NotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC720);
  }
  return result;
}

unint64_t sub_1A3A1112C()
{
  unint64_t result;

  result = qword_1EE6DC728[0];
  if (!qword_1EE6DC728[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2F20, &type metadata for RulesetActivationRule.NotCodingKeys);
    atomic_store(result, qword_1EE6DC728);
  }
  return result;
}

unint64_t sub_1A3A11174()
{
  unint64_t result;

  result = qword_1EE6DC7B0;
  if (!qword_1EE6DC7B0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC32E0, &type metadata for RulesetActivationRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC7B0);
  }
  return result;
}

unint64_t sub_1A3A111BC()
{
  unint64_t result;

  result = qword_1EE6DC7B8[0];
  if (!qword_1EE6DC7B8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC3308, &type metadata for RulesetActivationRule.CodingKeys);
    atomic_store(result, qword_1EE6DC7B8);
  }
  return result;
}

unint64_t sub_1A3A11204()
{
  unint64_t result;

  result = qword_1EE6DC840;
  if (!qword_1EE6DC840)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2C20, &type metadata for PostMatchRule.PartOfSpeechCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC840);
  }
  return result;
}

unint64_t sub_1A3A1124C()
{
  unint64_t result;

  result = qword_1EE6DC848[0];
  if (!qword_1EE6DC848[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2C48, &type metadata for PostMatchRule.PartOfSpeechCodingKeys);
    atomic_store(result, qword_1EE6DC848);
  }
  return result;
}

unint64_t sub_1A3A11294()
{
  unint64_t result;

  result = qword_1EE6DC8D0;
  if (!qword_1EE6DC8D0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2B68, &type metadata for PostMatchRule.AndCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC8D0);
  }
  return result;
}

unint64_t sub_1A3A112DC()
{
  unint64_t result;

  result = qword_1EE6DC8D8[0];
  if (!qword_1EE6DC8D8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2B90, &type metadata for PostMatchRule.AndCodingKeys);
    atomic_store(result, qword_1EE6DC8D8);
  }
  return result;
}

unint64_t sub_1A3A11324()
{
  unint64_t result;

  result = qword_1EE6DC960;
  if (!qword_1EE6DC960)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2AB0, &type metadata for PostMatchRule.OrCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC960);
  }
  return result;
}

unint64_t sub_1A3A1136C()
{
  unint64_t result;

  result = qword_1EE6DC968[0];
  if (!qword_1EE6DC968[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2AD8, &type metadata for PostMatchRule.OrCodingKeys);
    atomic_store(result, qword_1EE6DC968);
  }
  return result;
}

unint64_t sub_1A3A113B4()
{
  unint64_t result;

  result = qword_1EE6DC9F0;
  if (!qword_1EE6DC9F0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC29F8, &type metadata for PostMatchRule.NotCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DC9F0);
  }
  return result;
}

unint64_t sub_1A3A113FC()
{
  unint64_t result;

  result = qword_1EE6DC9F8[0];
  if (!qword_1EE6DC9F8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2A20, &type metadata for PostMatchRule.NotCodingKeys);
    atomic_store(result, qword_1EE6DC9F8);
  }
  return result;
}

unint64_t sub_1A3A11444()
{
  unint64_t result;

  result = qword_1EE6DCA80;
  if (!qword_1EE6DCA80)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2CD8, &type metadata for PostMatchRule.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DCA80);
  }
  return result;
}

unint64_t sub_1A3A1148C()
{
  unint64_t result;

  result = qword_1EE6DCA88[0];
  if (!qword_1EE6DCA88[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC2D00, &type metadata for PostMatchRule.CodingKeys);
    atomic_store(result, qword_1EE6DCA88);
  }
  return result;
}

uint64_t sub_1A3A114D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7053664F74726170 && a2 == 0xEC00000068636565;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581857 && a2 == 0xE300000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 29295 && a2 == 0xE200000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7630702 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A3A11668(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6775156 && a2 == 0xE300000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61747265436E696DLL && a2 == 0xEC00000079746E69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A3A11760(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x80000001A3AF10C0 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69736568746E7973 && a2 == 0xEB0000000072657ALL || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7105633 && a2 == 0xE300000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 6581857 && a2 == 0xE300000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 29295 && a2 == 0xE200000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7630702 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1A3A119AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7865676572 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6563616C706572 && a2 == 0xEB00000000746E65 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D6563616C706572 && a2 == 0xEF65707954746E65 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6374614D74736F70 && a2 == 0xE900000000000068 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7365746F6ELL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1A3A11C5C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684632949 && a2 == 0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6974617669746361 && a2 == 0xEE00656C75526E6FLL || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6974617265706FLL && a2 == 0xEE00786567655267 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73656C7572 && a2 == 0xE500000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7365746F6ELL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_1A3A12020(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7865676572 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6563616C706572 && a2 == 0xEB00000000746E65 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7365746F6ELL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A3A121E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73656C7572 && a2 == 0xE500000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A3AF10E0 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A3A12324(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6769666E6F63 && a2 == 0xE600000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746573656C7572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1A3A1240C()
{
  unint64_t result;

  result = qword_1EE6D3850;
  if (!qword_1EE6D3850)
  {
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EE6D3850);
  }
  return result;
}

uint64_t sub_1A3A12450()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A12494()
{
  uint64_t result;

  sub_1A3A12A44();
  result = sub_1A3AB50F0();
  qword_1EE6E6DC8 = result;
  return result;
}

uint64_t sub_1A3A124F0()
{
  uint64_t result;

  sub_1A3A12A44();
  result = sub_1A3AB50F0();
  qword_1EE6E6DD0 = result;
  return result;
}

uint64_t sub_1A3A12548()
{
  uint64_t result;

  sub_1A3A12A44();
  result = sub_1A3AB50F0();
  qword_1EE6E6DD8 = result;
  return result;
}

id sub_1A3A125A8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v5;

  sub_1A39A4820((uint64_t *)&unk_1EE6D23B0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1A3AC3C90;
  if (qword_1EE6DCB10 != -1)
    swift_once();
  v1 = (void *)qword_1EE6E6DC8;
  *(_QWORD *)(v0 + 32) = qword_1EE6E6DC8;
  v2 = qword_1EE6DCB18;
  v3 = v1;
  if (v2 != -1)
    swift_once();
  v5 = (void *)qword_1EE6E6DD0;
  *(_QWORD *)(v0 + 40) = qword_1EE6E6DD0;
  sub_1A3AB4BC8();
  qword_1EE6DCB30 = v0;
  return v5;
}

id sub_1A3A12674()
{
  if (qword_1EE6DCB20 != -1)
    swift_once();
  return (id)qword_1EE6E6DD8;
}

uint64_t sub_1A3A126B4(int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  int v26;
  uint64_t v27;
  uint64_t v28;

  v25[1] = a6;
  v25[2] = a7;
  v26 = a1;
  v9 = sub_1A3AB431C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EE6DCB28 != -1)
    swift_once();
  v13 = qword_1EE6DCB30;
  swift_bridgeObjectRetain();
  v14 = sub_1A3A128D0(a2, v13);
  result = swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1A3AB42D4();
      v16 = sub_1A3AB42E0();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v27 = v16;
      v28 = v18;
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      v19 = v27;
      v20 = v28;
      sub_1A3AB49A0();
      v27 = v19;
      v28 = v20;
      swift_bridgeObjectRetain();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v27;
      v22 = v28;
    }
    else
    {
      v21 = sub_1A3AB49A0();
      v22 = v23;
    }
    sub_1A39A4820(&qword_1EE6D23F8);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v24 + 64) = sub_1A39C18E8();
    *(_QWORD *)(v24 + 32) = v21;
    *(_QWORD *)(v24 + 40) = v22;
    sub_1A3AB4700();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A3A128D0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  char v14;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = sub_1A3AB5480())
  {
    v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v5 = (id)MEMORY[0x1A85960B8](0, a2);
LABEL_5:
      v6 = v5;
      sub_1A3A12A44();
      v7 = sub_1A3AB50CC();

      if ((v7 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1)
        goto LABEL_18;
      if (v4)
        break;
      v4 = 5;
      while (1)
      {
        v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        v13 = *(id *)(a2 + 8 * v4);
        v14 = sub_1A3AB50CC();

        if ((v14 & 1) != 0)
          goto LABEL_6;
        ++v4;
        if (v12 == v3)
          goto LABEL_18;
      }
      __break(1u);
    }
    v9 = 1;
    while (1)
    {
      MEMORY[0x1A85960B8](v9, a2);
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v11 = sub_1A3AB50CC();
      swift_unknownObjectRelease();
      if ((v11 & 1) != 0)
        goto LABEL_6;
      ++v9;
      if (v10 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1A3A12A44()
{
  unint64_t result;

  result = qword_1EE6D3868;
  if (!qword_1EE6D3868)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE6D3868);
  }
  return result;
}

TextToSpeech::TTSAudioEffect_optional AudioEffectConfiguration.spec.getter@<W0>(uint64_t a1@<X8>)
{
  Swift::String v2;
  TextToSpeech::TTSAudioEffect_optional result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v2._countAndFlagsBits = sub_1A3AB4634();
  result.value = TTSAudioEffect.init(rawValue:)(v2).value;
  if (v15 == 2)
  {
    *(_QWORD *)(a1 + 48) = 0;
    v4 = 0uLL;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    v5 = 0uLL;
  }
  else
  {
    result.value = TTSAudioEffect.spec.getter((uint64_t)v9);
    v6 = v9[1];
    v7 = v12;
    v4 = v13;
    v5 = v14;
    *(_QWORD *)a1 = v9[0];
    *(_QWORD *)(a1 + 8) = v6;
    v8 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 48) = v7;
  }
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 72) = v5;
  return result;
}

uint64_t sub_1A3A12B10()
{
  __int128 *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, _QWORD, _QWORD);
  char *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD v26[2];
  __int128 *v27;
  void (*v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  _QWORD v38[6];
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v1 = v0;
  v31 = sub_1A3AB464C();
  v2 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[3];
  v45 = v0[2];
  v46 = v5;
  v47 = *((_QWORD *)v0 + 8);
  v6 = v0[1];
  v43 = *v0;
  v44 = v6;
  v7 = sub_1A3A12E24();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v27 = v0;
    v9 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v26[1] = v7;
    v10 = v7 + v9;
    v11 = *(_QWORD *)(v2 + 72);
    v12 = *(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 16);
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    v14 = v31;
    v30 = v2;
    v29 = v11;
    v28 = v12;
    v12(v4, v7 + v9, v31);
    while (1)
    {
      v15._countAndFlagsBits = sub_1A3AB4634();
      TTSAudioEffect.init(rawValue:)(v15);
      if (v42 == 2)
      {
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v14);
      }
      else
      {
        v37 = v42 & 1;
        TTSAudioEffect.spec.getter((uint64_t)v38);
        v34 = v38[0];
        v16 = v38[1];
        v17 = v2;
        v19 = v38[2];
        v18 = v38[3];
        v20 = v38[4];
        v33 = v38[5];
        v32 = v39;
        v36 = v40;
        v35 = v41;
        (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_1A3A1523C(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
        v22 = *((_QWORD *)v13 + 2);
        v21 = *((_QWORD *)v13 + 3);
        if (v22 >= v21 >> 1)
          v13 = sub_1A3A1523C((char *)(v21 > 1), v22 + 1, 1, v13);
        *((_QWORD *)v13 + 2) = v22 + 1;
        v23 = &v13[88 * v22];
        *((_QWORD *)v23 + 4) = v34;
        *((_QWORD *)v23 + 5) = v16;
        *((_QWORD *)v23 + 6) = v19;
        *((_QWORD *)v23 + 7) = v18;
        v24 = v33;
        *((_QWORD *)v23 + 8) = v20;
        *((_QWORD *)v23 + 9) = v24;
        v23[80] = v32;
        *(_OWORD *)(v23 + 88) = v36;
        *(_OWORD *)(v23 + 104) = v35;
        v14 = v31;
        v2 = v30;
        v11 = v29;
        v12 = v28;
      }
      v10 += v11;
      if (!--v8)
        break;
      v12(v4, v10, v14);
    }
    swift_bridgeObjectRelease();
    v1 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  if ((sub_1A3A1500C((uint64_t)v13, *((_QWORD *)v1 + 1)) & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *((_QWORD *)v1 + 1) = v13;
    sub_1A3A12FE4();
  }
  return sub_1A3A13470();
}

uint64_t sub_1A3A12DFC(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease();
  *v1 = a1;
  return sub_1A3A12B10();
}

uint64_t sub_1A3A12E24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = sub_1A3AB464C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v20 - v6;
  v25 = *v0;
  v8 = MEMORY[0x1E0DEE9D8];
  v24 = MEMORY[0x1E0DEE9D8];
  v9 = *(_QWORD *)(v25 + 16);
  v10 = swift_bridgeObjectRetain();
  if (v9)
  {
    v11 = *(_QWORD *)(v2 + 72);
    v22 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v23 = v5;
    v12 = v10 + v22;
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    v13 = v21;
    v21(v7, v10 + v22, v1);
    while (1)
    {
      if ((sub_1A3AB4640() & 1) != 0)
      {
        v14 = v2;
        v15 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
        v15(v5, v7, v1);
        v16 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A3A15358(0, *(_QWORD *)(v16 + 16) + 1, 1);
          v16 = v24;
        }
        v18 = *(_QWORD *)(v16 + 16);
        v17 = *(_QWORD *)(v16 + 24);
        if (v18 >= v17 >> 1)
        {
          sub_1A3A15358(v17 > 1, v18 + 1, 1);
          v16 = v24;
        }
        *(_QWORD *)(v16 + 16) = v18 + 1;
        v5 = v23;
        v15((char *)(v16 + v22 + v18 * v11), v23, v1);
        v24 = v16;
        v2 = v14;
        v13 = v21;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      }
      v12 += v11;
      if (!--v9)
        break;
      v13(v7, v12, v1);
    }
    v8 = v24;
  }
  sub_1A3A187BC((uint64_t)&v25);
  return v8;
}

uint64_t sub_1A3A12FE4()
{
  __int128 *v0;
  _QWORD *v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD v38[5];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  _BYTE v58[16];
  _QWORD v59[3];

  v1 = v0;
  v2 = v0[3];
  v53[0] = v0[2];
  v53[1] = v2;
  v54 = *((_QWORD *)v0 + 8);
  v3 = v0[1];
  v51 = *v0;
  v52 = v3;
  sub_1A39FEDA0((uint64_t)v53, (uint64_t)v58, &qword_1EE6D09C0);
  sub_1A39FEDA0((uint64_t)&v54, (uint64_t)&v57, &qword_1EE6D3870);
  v4 = *(_QWORD *)(sub_1A3A12E24() + 16);
  swift_bridgeObjectRelease();
  if (v4)
  {
    v5 = *((_QWORD *)&v51 + 1);
    v59[0] = *((_QWORD *)&v51 + 1);
    v55 = *((_QWORD *)&v52 + 1);
    v56 = v52;
    v49 = 0xD000000000000045;
    v50 = 0x80000001A3AF11F0;
    sub_1A3A187BC((uint64_t)&v56);
    sub_1A3A187BC((uint64_t)&v55);
    v6 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v0 + 2) = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v0 + 3) = v6;
    v30 = *(_QWORD *)(v5 + 16);
    if (v30)
    {
      v35 = 0x75706E496E69616DLL;
      v29 = v0;
      swift_bridgeObjectRetain();
      v36 = 0;
      v37 = 0;
      v7 = 0;
      v8 = (__int128 *)(v5 + 56);
      v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v33 = v10;
        v34 = v9;
        v11 = *((_QWORD *)v8 - 2);
        v12 = *((_QWORD *)v8 - 1);
        v13 = *((_QWORD *)v8 + 2);
        v14 = *((_BYTE *)v8 + 24);
        v15 = *((_QWORD *)v8 + 4);
        v16 = *((_QWORD *)v8 + 5);
        v18 = *((_QWORD *)v8 + 6);
        v17 = *((_QWORD *)v8 + 7);
        v39 = *((_QWORD *)v8 - 3);
        v40 = v11;
        v41 = v12;
        v42 = *v8;
        v43 = v13;
        v44 = v14;
        v45 = v15;
        v46 = v16;
        v47 = v18;
        v48 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31 = v7;
        sub_1A3A168AC((uint64_t)&v39, v7, v35, v36, v37, (uint64_t)v38);
        v19 = v38[2];
        v32 = v38[3];
        v35 = v38[4];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1A3A1511C(0, v34[2] + 1, 1, v34);
        v21 = v9[2];
        v20 = v9[3];
        v10 = v33;
        if (v21 >= v20 >> 1)
          v9 = sub_1A3A1511C((_QWORD *)(v20 > 1), v21 + 1, 1, v9);
        v9[2] = v21 + 1;
        v9[v21 + 4] = v19;
        swift_bridgeObjectRetain();
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1A3A1511C(0, v33[2] + 1, 1, v33);
          v10 = (_QWORD *)result;
        }
        v24 = v10[2];
        v23 = v10[3];
        if (v24 >= v23 >> 1)
        {
          result = (uint64_t)sub_1A3A1511C((_QWORD *)(v23 > 1), v24 + 1, 1, v10);
          v10 = (_QWORD *)result;
        }
        v10[2] = v24 + 1;
        v10[v24 + 4] = v32;
        v25 = *(_QWORD *)(v32 + 16);
        v26 = __OFADD__(v37, v25);
        v37 += v25;
        if (v26)
          break;
        v27 = *(_QWORD *)(v19 + 16);
        v26 = __OFADD__(v36, v27);
        v36 += v27;
        if (v26)
          goto LABEL_19;
        ++v7;
        v8 = (__int128 *)((char *)v8 + 88);
        swift_bridgeObjectRetain();
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30 == v31 + 1)
        {
          sub_1A3A187BC((uint64_t)v59);
          v1 = v29;
          v29[2] = v9;
          v29[3] = v10;
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
    }
    else
    {
LABEL_16:
      v39 = 0;
      v40 = 0xE000000000000000;
      sub_1A3AB52AC();
      swift_bridgeObjectRelease();
      v39 = 0x2065726977;
      v40 = 0xE500000000000000;
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3A18794((uint64_t)v58);
      sub_1A3A183EC(&v57);
      v28 = v50;
      v1[4] = v49;
      v1[5] = v28;
      v1[8] = 0;
      return sub_1A3A13470();
    }
  }
  else
  {
    sub_1A3A18794((uint64_t)v58);
    result = (uint64_t)sub_1A3A183EC(&v57);
    *((_QWORD *)v0 + 8) = 0;
    *((_QWORD *)v0 + 4) = 0;
    *((_QWORD *)v0 + 5) = 0;
  }
  return result;
}

uint64_t sub_1A3A13470()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  char v56;
  unsigned int v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  void *v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  unint64_t v94;
  int64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char v100;
  char v101;
  unint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  char v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int64_t v116;
  int64_t v117;
  unint64_t v118;
  unint64_t v119;
  int64_t v120;
  unint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  char v130;
  unsigned int v131;
  char v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  char v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  id v145;
  uint64_t result;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int64_t v161;
  unsigned int v162;
  uint64_t v163;
  char v164;
  unint64_t v165;
  int64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  char v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  void *v175;
  uint64_t v176;
  char v177;
  _QWORD v178[4];
  __int128 v179;
  unint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  char v185;

  v1 = v0[3];
  v173 = v0[2];
  v174 = v1;
  v175 = (void *)*((_QWORD *)v0 + 8);
  v2 = v0[1];
  v171 = *v0;
  v172 = v2;
  sub_1A39EC244((uint64_t)&v171);
  v3 = sub_1A3A12E24();
  sub_1A39EC2C8((uint64_t)&v171);
  v4 = sub_1A3A18218(MEMORY[0x1E0DEE9D8]);
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    sub_1A3AB464C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v160 = 0;
    v6 = 0;
    v7 = v4;
    v154 = v5;
LABEL_5:
    v158 = v7;
    v9._countAndFlagsBits = sub_1A3AB4634();
    TTSAudioEffect.init(rawValue:)(v9);
    if (v170 == 2)
    {
      v8 = swift_bridgeObjectRetain();
      goto LABEL_4;
    }
    v156 = v6;
    LOBYTE(v176) = v170 & 1;
    TTSAudioEffect.spec.getter((uint64_t)v178);
    v10 = v183;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = sub_1A3AB461C();
    v12 = 0;
    v163 = v11 + 64;
    v13 = 1 << *(_BYTE *)(v11 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & *(_QWORD *)(v11 + 64);
    v166 = (unint64_t)(v13 + 63) >> 6;
    while (1)
    {
      if (v15)
      {
        v16 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v17 = v16 | (v12 << 6);
        goto LABEL_28;
      }
      v18 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_167;
      if (v18 >= v166)
        break;
      v19 = *(_QWORD *)(v163 + 8 * v18);
      ++v12;
      if (!v19)
      {
        v12 = v18 + 1;
        if (v18 + 1 >= v166)
          break;
        v19 = *(_QWORD *)(v163 + 8 * v12);
        if (!v19)
        {
          v12 = v18 + 2;
          if (v18 + 2 >= v166)
            break;
          v19 = *(_QWORD *)(v163 + 8 * v12);
          if (!v19)
          {
            v20 = v18 + 3;
            if (v20 >= v166)
              break;
            v19 = *(_QWORD *)(v163 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                v12 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_172;
                if (v12 >= v166)
                  goto LABEL_39;
                v19 = *(_QWORD *)(v163 + 8 * v12);
                ++v20;
                if (v19)
                  goto LABEL_27;
              }
            }
            v12 = v20;
          }
        }
      }
LABEL_27:
      v15 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_28:
      v21 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = *(_DWORD *)(*(_QWORD *)(v11 + 56) + 4 * v17);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v178[0] = v10;
      v27 = sub_1A39A2734(v23, v22);
      v28 = *(_QWORD *)(v10 + 16);
      v29 = (v26 & 1) == 0;
      v30 = v28 + v29;
      if (__OFADD__(v28, v29))
      {
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
        goto LABEL_173;
      }
      v31 = v26;
      if (*(_QWORD *)(v10 + 24) >= v30)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v26 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_1A3A164D0();
          v10 = v178[0];
          if ((v31 & 1) != 0)
            goto LABEL_10;
        }
      }
      else
      {
        sub_1A3A15A9C(v30, isUniquelyReferenced_nonNull_native);
        v10 = v178[0];
        v32 = sub_1A39A2734(v23, v22);
        if ((v31 & 1) != (v33 & 1))
          goto LABEL_183;
        v27 = v32;
        if ((v31 & 1) != 0)
        {
LABEL_10:
          *(_DWORD *)(*(_QWORD *)(v10 + 56) + 4 * v27) = v24;
          goto LABEL_11;
        }
      }
      *(_QWORD *)(v10 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      v34 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v27);
      *v34 = v23;
      v34[1] = v22;
      *(_DWORD *)(*(_QWORD *)(v10 + 56) + 4 * v27) = v24;
      v35 = *(_QWORD *)(v10 + 16);
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
        goto LABEL_166;
      *(_QWORD *)(v10 + 16) = v37;
      swift_bridgeObjectRetain();
LABEL_11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
LABEL_39:
    swift_release();
    v38 = v10 + 64;
    v39 = 1 << *(_BYTE *)(v10 + 32);
    if (v39 < 64)
      v40 = ~(-1 << v39);
    else
      v40 = -1;
    v41 = v40 & *(_QWORD *)(v10 + 64);
    v42 = (unint64_t)(v39 + 63) >> 6;
    v8 = v158;
    swift_bridgeObjectRetain();
    v43 = 0;
    while (1)
    {
      if (v41)
      {
        v44 = __clz(__rbit64(v41));
        v41 &= v41 - 1;
        v45 = v44 | (v43 << 6);
        if ((v160 & 0x8000000000000000) != 0)
          goto LABEL_161;
      }
      else
      {
        v46 = v43 + 1;
        if (__OFADD__(v43, 1))
          goto LABEL_168;
        if (v46 >= v42)
        {
LABEL_76:
          swift_release();
          if (__OFADD__(v160, 1))
            goto LABEL_176;
          ++v160;
          v6 = v156;
          v5 = v154;
LABEL_4:
          ++v6;
          swift_bridgeObjectRelease();
          v7 = v8;
          if (v6 == v5)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v4 = v8;
            goto LABEL_80;
          }
          goto LABEL_5;
        }
        v47 = *(_QWORD *)(v38 + 8 * v46);
        ++v43;
        if (!v47)
        {
          v43 = v46 + 1;
          if (v46 + 1 >= v42)
            goto LABEL_76;
          v47 = *(_QWORD *)(v38 + 8 * v43);
          if (!v47)
          {
            v43 = v46 + 2;
            if (v46 + 2 >= v42)
              goto LABEL_76;
            v47 = *(_QWORD *)(v38 + 8 * v43);
            if (!v47)
            {
              v48 = v46 + 3;
              if (v48 >= v42)
                goto LABEL_76;
              v47 = *(_QWORD *)(v38 + 8 * v48);
              if (!v47)
              {
                while (1)
                {
                  v43 = v48 + 1;
                  if (__OFADD__(v48, 1))
                    break;
                  if (v43 >= v42)
                    goto LABEL_76;
                  v47 = *(_QWORD *)(v38 + 8 * v43);
                  ++v48;
                  if (v47)
                    goto LABEL_59;
                }
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
                goto LABEL_178;
              }
              v43 = v48;
            }
          }
        }
LABEL_59:
        v41 = (v47 - 1) & v47;
        v45 = __clz(__rbit64(v47)) + (v43 << 6);
        if ((v160 & 0x8000000000000000) != 0)
          goto LABEL_161;
      }
      v49 = v169[2];
      if (v160 >= *(_QWORD *)(v49 + 16))
        goto LABEL_162;
      v50 = *(_QWORD *)(v49 + 8 * v160 + 32);
      if (*(_QWORD *)(v50 + 16))
      {
        v51 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v45);
        v52 = *v51;
        v53 = v51[1];
        v54 = *(_DWORD *)(*(_QWORD *)(v10 + 56) + 4 * v45);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v55 = sub_1A39A2734(v52, v53);
        if ((v56 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          continue;
        }
        v57 = *(_DWORD *)(*(_QWORD *)(v50 + 56) + 4 * v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v164 = swift_isUniquelyReferenced_nonNull_native();
        v178[0] = v8;
        v59 = sub_1A39A4DEC(v57);
        v60 = v8;
        v61 = *(_QWORD *)(v8 + 16);
        v62 = (v58 & 1) == 0;
        v63 = v61 + v62;
        if (__OFADD__(v61, v62))
          goto LABEL_177;
        v64 = v58;
        if (*(_QWORD *)(v60 + 24) >= v63)
        {
          if ((v164 & 1) != 0)
          {
            v67 = (_QWORD *)v178[0];
            if ((v58 & 1) == 0)
              goto LABEL_73;
          }
          else
          {
            sub_1A3A16344();
            v67 = (_QWORD *)v178[0];
            if ((v64 & 1) == 0)
              goto LABEL_73;
          }
        }
        else
        {
          sub_1A3A157F0(v63, v164);
          v65 = sub_1A39A4DEC(v57);
          if ((v64 & 1) != (v66 & 1))
            goto LABEL_184;
          v59 = v65;
          v67 = (_QWORD *)v178[0];
          if ((v64 & 1) == 0)
          {
LABEL_73:
            v67[(v59 >> 6) + 8] |= 1 << v59;
            v68 = 4 * v59;
            *(_DWORD *)(v67[6] + v68) = v57;
            *(_DWORD *)(v67[7] + v68) = v54;
            v69 = v67[2];
            v36 = __OFADD__(v69, 1);
            v70 = v69 + 1;
            if (v36)
              goto LABEL_181;
            v8 = (uint64_t)v67;
            v67[2] = v70;
            goto LABEL_75;
          }
        }
        *(_DWORD *)(v67[7] + 4 * v59) = v54;
        v8 = (uint64_t)v67;
LABEL_75:
        swift_bridgeObjectRelease();
        continue;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_80:
  v176 = v174;
  sub_1A3A187BC((uint64_t)&v176);
  v72 = *((_QWORD *)&v171 + 1);
  v71 = v171;
  v73 = *((_QWORD *)&v172 + 1);
  v74 = v172;
  v75 = v173;
  v76 = v175;
  v169[6] = v4;
  v150 = v76;
  v77 = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78 = sub_1A3A12E24();
  v151 = v77;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v152 = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v79 = sub_1A3A182F0(MEMORY[0x1E0DEE9D8]);
  v153 = *(_QWORD *)(v78 + 16);
  if (!v153)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v144 = v79;
LABEL_159:
    v169[7] = v144;
    v178[0] = v71;
    v178[1] = v72;
    v178[2] = v74;
    v178[3] = v152;
    v179 = v75;
    v180 = v4;
    v181 = v144;
    v182 = v150;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v145 = v151;
    sub_1A3A147FC();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v147 = v74;
  v148 = v72;
  v149 = v71;
  sub_1A3AB464C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v80 = 0;
  v81 = 0;
  v157 = v4;
LABEL_85:
  v155 = v81;
  v83._countAndFlagsBits = sub_1A3AB4634();
  TTSAudioEffect.init(rawValue:)(v83);
  if (v185 != 2)
  {
    v165 = v80;
    v177 = v185 & 1;
    TTSAudioEffect.spec.getter((uint64_t)v178);
    v84 = v184;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85 = sub_1A3AB4628();
    v86 = 0;
    v159 = v85 + 64;
    v167 = v85;
    v87 = 1 << *(_BYTE *)(v85 + 32);
    if (v87 < 64)
      v88 = ~(-1 << v87);
    else
      v88 = -1;
    v89 = v88 & *(_QWORD *)(v85 + 64);
    v161 = (unint64_t)(v87 + 63) >> 6;
    while (1)
    {
      if (v89)
      {
        v90 = __clz(__rbit64(v89));
        v89 &= v89 - 1;
        v91 = v90 | (v86 << 6);
      }
      else
      {
        v92 = v86 + 1;
        v4 = v157;
        if (__OFADD__(v86, 1))
          goto LABEL_170;
        v93 = v165;
        if (v92 >= v161)
        {
LABEL_119:
          swift_release();
          v112 = v84 + 64;
          v113 = 1 << *(_BYTE *)(v84 + 32);
          if (v113 < 64)
            v114 = ~(-1 << v113);
          else
            v114 = -1;
          v115 = v114 & *(_QWORD *)(v84 + 64);
          v116 = (unint64_t)(v113 + 63) >> 6;
          v117 = 0;
          v168 = (_QWORD *)swift_bridgeObjectRetain();
          while (1)
          {
            if (v115)
            {
              v118 = __clz(__rbit64(v115));
              v115 &= v115 - 1;
              v119 = v118 | (v117 << 6);
              if ((v93 & 0x8000000000000000) != 0)
                goto LABEL_164;
            }
            else
            {
              v120 = v117 + 1;
              if (__OFADD__(v117, 1))
                goto LABEL_171;
              if (v120 >= v116)
              {
LABEL_155:
                swift_release();
                v36 = __OFADD__(v93, 1);
                v80 = v93 + 1;
                if (v36)
                  goto LABEL_179;
                v82 = (uint64_t)v168;
LABEL_84:
                v81 = v155 + 1;
                swift_bridgeObjectRelease();
                if (v155 + 1 == v153)
                {
                  v144 = v82;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                  v72 = v148;
                  v71 = v149;
                  v74 = v147;
                  goto LABEL_159;
                }
                goto LABEL_85;
              }
              v121 = *(_QWORD *)(v112 + 8 * v120);
              ++v117;
              if (!v121)
              {
                v117 = v120 + 1;
                if (v120 + 1 >= v116)
                  goto LABEL_155;
                v121 = *(_QWORD *)(v112 + 8 * v117);
                if (!v121)
                {
                  v117 = v120 + 2;
                  if (v120 + 2 >= v116)
                    goto LABEL_155;
                  v121 = *(_QWORD *)(v112 + 8 * v117);
                  if (!v121)
                  {
                    v122 = v120 + 3;
                    if (v122 >= v116)
                      goto LABEL_155;
                    v121 = *(_QWORD *)(v112 + 8 * v122);
                    if (!v121)
                    {
                      while (1)
                      {
                        v117 = v122 + 1;
                        if (__OFADD__(v122, 1))
                          goto LABEL_175;
                        if (v117 >= v116)
                          goto LABEL_155;
                        v121 = *(_QWORD *)(v112 + 8 * v117);
                        ++v122;
                        if (v121)
                          goto LABEL_139;
                      }
                    }
                    v117 = v122;
                  }
                }
              }
LABEL_139:
              v115 = (v121 - 1) & v121;
              v119 = __clz(__rbit64(v121)) + (v117 << 6);
              if ((v93 & 0x8000000000000000) != 0)
                goto LABEL_164;
            }
            v123 = v169[3];
            if (v93 >= *(_QWORD *)(v123 + 16))
              goto LABEL_165;
            v124 = *(_QWORD *)(v123 + 8 * v93 + 32);
            if (*(_QWORD *)(v124 + 16))
            {
              v125 = (uint64_t *)(*(_QWORD *)(v84 + 48) + 16 * v119);
              v126 = *v125;
              v127 = v125[1];
              v128 = *(_DWORD *)(*(_QWORD *)(v84 + 56) + 4 * v119);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v129 = sub_1A39A2734(v126, v127);
              if ((v130 & 1) != 0)
              {
                v131 = *(_DWORD *)(*(_QWORD *)(v124 + 56) + 4 * v129);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v132 = swift_isUniquelyReferenced_nonNull_native();
                v178[0] = v168;
                v162 = v131;
                v134 = sub_1A39A4DEC(v131);
                v135 = v168[2];
                v136 = (v133 & 1) == 0;
                v137 = v135 + v136;
                if (__OFADD__(v135, v136))
                  goto LABEL_180;
                v138 = v133;
                if (v168[3] >= v137)
                {
                  if ((v132 & 1) == 0)
                    sub_1A3A1667C();
                }
                else
                {
                  sub_1A3A15DA0(v137, v132);
                  v139 = sub_1A39A4DEC(v162);
                  if ((v138 & 1) != (v140 & 1))
                    goto LABEL_184;
                  v134 = v139;
                }
                v168 = (_QWORD *)v178[0];
                if ((v138 & 1) != 0)
                {
                  *(_DWORD *)(*(_QWORD *)(v178[0] + 56) + 4 * v134) = v128;
                }
                else
                {
                  *(_QWORD *)(v178[0] + 8 * (v134 >> 6) + 64) |= 1 << v134;
                  v141 = 4 * v134;
                  *(_DWORD *)(v168[6] + v141) = v162;
                  *(_DWORD *)(v168[7] + v141) = v128;
                  v142 = v168[2];
                  v36 = __OFADD__(v142, 1);
                  v143 = v142 + 1;
                  if (v36)
                    goto LABEL_182;
                  v168[2] = v143;
                }
                swift_bridgeObjectRelease();
                v4 = v157;
                v93 = v165;
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v93 = v165;
              }
            }
          }
        }
        v94 = *(_QWORD *)(v159 + 8 * v92);
        ++v86;
        if (!v94)
        {
          v86 = v92 + 1;
          if (v92 + 1 >= v161)
            goto LABEL_119;
          v94 = *(_QWORD *)(v159 + 8 * v86);
          if (!v94)
          {
            v86 = v92 + 2;
            if (v92 + 2 >= v161)
              goto LABEL_119;
            v94 = *(_QWORD *)(v159 + 8 * v86);
            if (!v94)
            {
              v95 = v92 + 3;
              if (v95 >= v161)
                goto LABEL_119;
              v94 = *(_QWORD *)(v159 + 8 * v95);
              if (!v94)
              {
                while (1)
                {
                  v86 = v95 + 1;
                  if (__OFADD__(v95, 1))
                    goto LABEL_174;
                  if (v86 >= v161)
                    goto LABEL_119;
                  v94 = *(_QWORD *)(v159 + 8 * v86);
                  ++v95;
                  if (v94)
                    goto LABEL_107;
                }
              }
              v86 = v95;
            }
          }
        }
LABEL_107:
        v89 = (v94 - 1) & v94;
        v91 = __clz(__rbit64(v94)) + (v86 << 6);
      }
      v96 = (uint64_t *)(*(_QWORD *)(v167 + 48) + 16 * v91);
      v98 = *v96;
      v97 = v96[1];
      v99 = *(_DWORD *)(*(_QWORD *)(v167 + 56) + 4 * v91);
      swift_bridgeObjectRetain();
      v100 = swift_isUniquelyReferenced_nonNull_native();
      v178[0] = v84;
      v102 = sub_1A39A2734(v98, v97);
      v103 = *(_QWORD *)(v84 + 16);
      v104 = (v101 & 1) == 0;
      v105 = v103 + v104;
      if (__OFADD__(v103, v104))
        goto LABEL_163;
      v106 = v101;
      if (*(_QWORD *)(v84 + 24) >= v105)
      {
        if ((v100 & 1) != 0)
        {
          if ((v101 & 1) != 0)
            goto LABEL_90;
        }
        else
        {
          sub_1A3A16198();
          v84 = v178[0];
          if ((v106 & 1) != 0)
            goto LABEL_90;
        }
      }
      else
      {
        sub_1A3A154E8(v105, v100);
        v84 = v178[0];
        v107 = sub_1A39A2734(v98, v97);
        if ((v106 & 1) != (v108 & 1))
          goto LABEL_183;
        v102 = v107;
        if ((v106 & 1) != 0)
        {
LABEL_90:
          *(_DWORD *)(*(_QWORD *)(v84 + 56) + 4 * v102) = v99;
          goto LABEL_91;
        }
      }
      *(_QWORD *)(v84 + 8 * (v102 >> 6) + 64) |= 1 << v102;
      v109 = (uint64_t *)(*(_QWORD *)(v84 + 48) + 16 * v102);
      *v109 = v98;
      v109[1] = v97;
      *(_DWORD *)(*(_QWORD *)(v84 + 56) + 4 * v102) = v99;
      v110 = *(_QWORD *)(v84 + 16);
      v36 = __OFADD__(v110, 1);
      v111 = v110 + 1;
      if (v36)
        goto LABEL_169;
      *(_QWORD *)(v84 + 16) = v111;
      swift_bridgeObjectRetain();
LABEL_91:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v36 = __OFADD__(v80++, 1);
  if (!v36)
  {
    v82 = swift_bridgeObjectRetain();
    goto LABEL_84;
  }
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  sub_1A3AB5678();
  __break(1u);
LABEL_184:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t sub_1A3A1434C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  char *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[2];
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD, _QWORD);
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  char v54;
  _QWORD v55[6];
  unsigned __int8 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v44 = a2;
  v3 = sub_1A3AB464C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)v43 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v43 - v11;
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v61 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v61 + 1) = MEMORY[0x1E0DEE9D8];
  v64 = 0;
  v62 = 0uLL;
  *(_QWORD *)&v60 = a1;
  *((_QWORD *)&v60 + 1) = MEMORY[0x1E0DEE9D8];
  v55[0] = MEMORY[0x1E0DEE9D8];
  v14 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  *(_QWORD *)&v53 = v14;
  if (v14)
  {
    v50 = v7;
    v16 = 0;
    *(_QWORD *)&v52 = a1;
    v51 = v10;
    while (v16 < *(_QWORD *)(a1 + 16))
    {
      v17 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v18 = *(_QWORD *)(v4 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v12, a1 + v17 + v18 * v16, v3);
      if ((sub_1A3AB4640() & 1) != 0)
      {
        v19 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
        v19(v10, v12, v3);
        v20 = v55[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1A3A15358(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = v55[0];
        }
        v22 = *(_QWORD *)(v20 + 16);
        v21 = *(_QWORD *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_1A3A15358(v21 > 1, v22 + 1, 1);
          v20 = v55[0];
        }
        *(_QWORD *)(v20 + 16) = v22 + 1;
        v23 = v20 + v17 + v22 * v18;
        v10 = v51;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v19)(v23, v51, v3);
        v55[0] = v20;
        a1 = v52;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v12, v3);
      }
      if ((_QWORD)v53 == ++v16)
      {
        v13 = v55[0];
        v7 = v50;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(v13 + 16);
    if (v24)
    {
      v25 = v13 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v26 = *(_QWORD *)(v4 + 72);
      v27 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16);
      v43[1] = v13;
      swift_retain();
      v28 = (char *)MEMORY[0x1E0DEE9D8];
      v46 = v26;
      v45 = v27;
      do
      {
        v27(v7, v25, v3);
        v29._countAndFlagsBits = sub_1A3AB4634();
        TTSAudioEffect.init(rawValue:)(v29);
        if (v59 == 2)
        {
          (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        }
        else
        {
          v54 = v59 & 1;
          TTSAudioEffect.spec.getter((uint64_t)v55);
          v30 = v55[0];
          v31 = v55[1];
          v51 = (char *)v55[2];
          v50 = (char *)v55[3];
          v49 = v55[4];
          v48 = v55[5];
          v47 = v56;
          v53 = v57;
          v52 = v58;
          (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v28 = sub_1A3A1523C(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
          v33 = *((_QWORD *)v28 + 2);
          v32 = *((_QWORD *)v28 + 3);
          if (v33 >= v32 >> 1)
            v28 = sub_1A3A1523C((char *)(v32 > 1), v33 + 1, 1, v28);
          *((_QWORD *)v28 + 2) = v33 + 1;
          v34 = &v28[88 * v33];
          *((_QWORD *)v34 + 4) = v30;
          *((_QWORD *)v34 + 5) = v31;
          v35 = v50;
          *((_QWORD *)v34 + 6) = v51;
          *((_QWORD *)v34 + 7) = v35;
          v36 = v48;
          *((_QWORD *)v34 + 8) = v49;
          *((_QWORD *)v34 + 9) = v36;
          v34[80] = v47;
          *(_OWORD *)(v34 + 88) = v53;
          *(_OWORD *)(v34 + 104) = v52;
          v26 = v46;
          v27 = v45;
        }
        v25 += v26;
        --v24;
      }
      while (v24);
      swift_release_n();
    }
    else
    {
      swift_release();
      v28 = (char *)MEMORY[0x1E0DEE9D8];
    }
    v37 = v44;
    swift_bridgeObjectRelease();
    *((_QWORD *)&v60 + 1) = v28;
    v38 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v63 = sub_1A3A18218(MEMORY[0x1E0DEE9D8]);
    *((_QWORD *)&v63 + 1) = sub_1A3A182F0(v38);
    result = sub_1A3A12FE4();
    v39 = v64;
    v40 = v61;
    v41 = v62;
    v42 = v63;
    *(_OWORD *)v37 = v60;
    *(_OWORD *)(v37 + 16) = v40;
    *(_OWORD *)(v37 + 32) = v41;
    *(_OWORD *)(v37 + 48) = v42;
    *(_QWORD *)(v37 + 64) = v39;
  }
  return result;
}

id *sub_1A3A147FC()
{
  uint64_t v0;
  id *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  OSStatus v16;
  id *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;

  sub_1A39FEDA0(v0 + 64, (uint64_t)&v22, &qword_1EE6D3870);
  result = (id *)sub_1A39FEDA0((uint64_t)&v22, (uint64_t)&v23, &qword_1EE6D3870);
  v2 = v23;
  if (!v23)
    return result;
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v3 + 64);
  v20 = v3 + 64;
  v21 = v3;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  sub_1A3A183C4(&v22);
  result = (id *)sub_1A3A187E4((uint64_t)&v21);
  v8 = 0;
  v9 = (unint64_t)(v5 + 63) >> 6;
  v19 = xmmword_1A3ABF990;
  while (v7)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v8 << 6);
LABEL_21:
    v15 = 4 * v11;
    v16 = AudioUnitSetParameter((AudioUnit)objc_msgSend(v2, sel_audioUnit, v19), *(_DWORD *)(*(_QWORD *)(v3 + 48) + v15), 0, 0, *(AudioUnitParameterValue *)(*(_QWORD *)(v3 + 56) + v15), 4u);
    result = (id *)sub_1A3AB473C();
    if (v16 != (_DWORD)result)
    {
      result = (id *)(id)AXTTSLogCommon();
      if (!result)
        goto LABEL_28;
      v17 = result;
      sub_1A3AB4FD0();
      sub_1A39A4820(&qword_1EE6D23F8);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v19;
      *(_QWORD *)(v18 + 56) = MEMORY[0x1E0DEDBC8];
      *(_QWORD *)(v18 + 64) = MEMORY[0x1E0DEDC38];
      *(_DWORD *)(v18 + 32) = v16;
      sub_1A3AB46F4();

      result = (id *)swift_bridgeObjectRelease();
    }
  }
  v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v12 >= v9)
    goto LABEL_24;
  v13 = *(_QWORD *)(v20 + 8 * v12);
  ++v8;
  if (v13)
    goto LABEL_20;
  v8 = v12 + 1;
  if (v12 + 1 >= v9)
    goto LABEL_24;
  v13 = *(_QWORD *)(v20 + 8 * v8);
  if (v13)
    goto LABEL_20;
  v8 = v12 + 2;
  if (v12 + 2 >= v9)
    goto LABEL_24;
  v13 = *(_QWORD *)(v20 + 8 * v8);
  if (v13)
  {
LABEL_20:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_21;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
  {
LABEL_24:
    swift_release();
    return sub_1A3A183EC(&v22);
  }
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v9)
      goto LABEL_24;
    v13 = *(_QWORD *)(v20 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

id sub_1A3A14A84()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;

  v1 = (void *)v0[8];
  v2 = v1;
  if (!v1)
  {
    v3 = v0[5];
    if (v3)
    {
      v4 = v0[4];
      v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89B28]), sel_init);
      sub_1A3A14B34(v4, v3);
      v0[8] = v2;
      v5 = v2;
      sub_1A3A147FC();
    }
    else
    {
      v2 = 0;
    }
  }
  v6 = v1;
  return v2;
}

id sub_1A3A14B34(uint64_t a1, uint64_t a2)
{
  void *v2;
  OpaqueAudioComponentInstance *v3;
  AudioUnitPropertyID v4;
  OSStatus v5;
  id result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  if (a2)
    v11 = sub_1A3AB4958();

  v3 = (OpaqueAudioComponentInstance *)objc_msgSend(v2, sel_audioUnit, v11, v12);
  v4 = sub_1A3A14C8C();
  v5 = AudioUnitSetProperty(v3, v4, 0, 0, &v11, 8u);
  result = (id)sub_1A3AB473C();
  if (v5 != (_DWORD)result)
  {
    result = (id)AXTTSLogCommon();
    if (result)
    {
      v7 = result;
      sub_1A3AB4FD0();
      sub_1A39A4820(&qword_1EE6D23F8);
      v8 = swift_allocObject();
      v9 = MEMORY[0x1E0DEDBC8];
      *(_OWORD *)(v8 + 16) = xmmword_1A3ABF990;
      v10 = MEMORY[0x1E0DEDC38];
      *(_QWORD *)(v8 + 56) = v9;
      *(_QWORD *)(v8 + 64) = v10;
      *(_DWORD *)(v8 + 32) = v5;
      sub_1A3AB46F4();

      return (id)swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_1A3A14C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = sub_1A3AB49D0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  sub_1A3AB49B8();
  sub_1A3AB4988();
  v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5 >> 60 != 15)
    __asm { BR              X10 }
  result = v8;
  if (HIDWORD(v8))
  {
    __break(1u);
    JUMPOUT(0x1A3A14F40);
  }
  return result;
}

uint64_t sub_1A3A14F80(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x1A3A14FFCLL);
  }
  return ((uint64_t (*)(void))((char *)&loc_1A3A14F90 + dword_1A3A14FFC[a3 >> 62]))();
}

uint64_t sub_1A3A1500C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v5 = 1;
    }
    else
    {
      sub_1A3A189A0();
      v3 = 0;
      v4 = v2 - 1;
      do
      {
        v5 = sub_1A3AB494C();
        v7 = v4-- != 0;
        if ((v5 & 1) == 0)
          break;
        v3 += 88;
      }
      while (v7);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

_QWORD *sub_1A3A1511C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D38A0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D38A8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1A3A1523C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3878);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8])
      memmove(v12, v13, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1A3A15358(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1A3A15374(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

size_t sub_1A3A15374(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D38C0);
  v10 = *(_QWORD *)(sub_1A3AB464C() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(sub_1A3AB464C() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

uint64_t sub_1A3A154E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D3888);
  v37 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A157F0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D3890);
  result = sub_1A3AB5498();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 4 * v18;
      v23 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = MEMORY[0x1A85964CC](*(_QWORD *)(v7 + 40), v23, 4);
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 4 * v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A15A9C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D3898);
  v37 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A15DA0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D3880);
  result = sub_1A3AB5498();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 4 * v18;
      v23 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = MEMORY[0x1A85964CC](*(_QWORD *)(v7 + 40), v23, 4);
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 4 * v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A16048(int a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1A39A2734(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1A3A16198();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_DWORD *)(v18[7] + 4 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_DWORD *)(v18[7] + 4 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1A3A154E8(result, a4 & 1);
  result = sub_1A39A2734(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

void *sub_1A3A16198()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D3888);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v20) = (_DWORD)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A3A16344()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D3890);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A3A164D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D3898);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 4 * v15;
    v20 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A3A1667C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D3880);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A3A16808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1A3AB4280();
  v10 = result;
  if (result)
  {
    result = sub_1A3AB4298();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v10 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_1A3AB428C();
    sub_1A3A14F80(v10, a4, a5);
    return sub_1A3A0E3AC(a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1A3A168AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t i;
  char v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char v70;
  char v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int64_t v88;
  unint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t result;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  unint64_t v119;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v125;
  int64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  int64_t v134;
  unsigned __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  _BYTE v140[40];
  _BYTE v141[40];
  _OWORD v142[3];
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  __int128 v150;
  unsigned __int128 v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  char v155;
  _OWORD v156[2];
  char v157;

  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)&v142[0] = 0x6870617267;
  *((_QWORD *)&v142[0] + 1) = 0xE500000000000000;
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  v9 = v142[0];
  sub_1A3AB52AC();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v142[0] = 0xD00000000000001BLL;
  *((_QWORD *)&v142[0] + 1) = 0x80000001A3AF1270;
  *(_QWORD *)&v156[0] = a2;
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  v139 = v142[0];
  if ((a5 & 0x8000000000000000) != 0)
    goto LABEL_140;
  if (HIDWORD(a5))
  {
LABEL_141:
    __break(1u);
LABEL_142:
    *(_QWORD *)&v151 = 0;
    *((_QWORD *)&v151 + 1) = 0xE000000000000000;
    sub_1A3AB52AC();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v151 = 0xD000000000000011;
    *((_QWORD *)&v151 + 1) = 0x80000001A3AF1340;
    sub_1A3AB4A84();
    while (1)
    {
LABEL_143:
      sub_1A3AB5444();
      __break(1u);
    }
  }
  sub_1A3AB52AC();
  swift_bridgeObjectRelease();
  *((_QWORD *)&v142[0] + 1) = 0xE900000000000020;
  LODWORD(v156[0]) = a5;
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  v10 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v136 = v10;
  *(_QWORD *)&v142[0] = v10;
  v122 = a5;
  sub_1A3A16048(a5, 0x737361707962, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  v12 = v10;
  swift_bridgeObjectRelease();
  v148 = v8;
  v114 = v8 + 64;
  v13 = 1 << *(_BYTE *)(v8 + 32);
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v119 = v14 & *(_QWORD *)(v8 + 64);
  sub_1A3A187E4((uint64_t)&v148);
  v115 = (unint64_t)(v13 + 63) >> 6;
  v15 = swift_bridgeObjectRetain();
  v16 = 0;
  v131 = v8;
  v116 = a3;
  v117 = v15;
LABEL_8:
  v137 = v12;
  if (v119)
  {
    v17 = __clz(__rbit64(v119));
    v118 = v16;
    v119 &= v119 - 1;
    v18 = v17 | (v16 << 6);
LABEL_24:
    v23 = *(_QWORD *)(v131 + 56) + 88 * v18;
    v24 = *(_OWORD *)(v23 + 16);
    v142[0] = *(_OWORD *)v23;
    v142[1] = v24;
    v26 = *(_OWORD *)(v23 + 48);
    v25 = *(_OWORD *)(v23 + 64);
    v27 = *(_OWORD *)(v23 + 32);
    v145 = *(_QWORD *)(v23 + 80);
    v143 = v26;
    v144 = v25;
    v142[2] = v27;
    v156[0] = v9;
    swift_bridgeObjectRetain();
    sub_1A3A1880C((uint64_t)v142);
    swift_bridgeObjectRetain();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    v28 = *((_QWORD *)&v156[0] + 1);
    v29 = *(_QWORD *)&v156[0];
    *(_QWORD *)&v156[0] = 0;
    *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
    sub_1A3AB52AC();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v156[0] = 544763746;
    *((_QWORD *)&v156[0] + 1) = 0xE400000000000000;
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    sub_1A3A65B48();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    v30 = *((_QWORD *)&v144 + 1);
    v147 = *((_QWORD *)&v144 + 1);
    v152 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 16);
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    v146 = v145;
    v132 = v145;
    v152 = *(_QWORD *)(v145 + 16);
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v156[0] = 0;
    *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
    sub_1A3AB52AC();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v156[0] = 0xD000000000000012;
    *((_QWORD *)&v156[0] + 1) = 0x80000001A3AF12B0;
    LODWORD(v152) = v122;
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    v135 = __PAIR128__(v28, v29);
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v30 + 16);
    v33 = v116;
    v32 = v117;
    if (v31)
    {
      swift_bridgeObjectRetain();
      v34 = (unint64_t *)(v30 + 40);
      do
      {
        v35 = *v34;
        if (*v34)
        {
          if (v35 == 1)
            goto LABEL_143;
          v36 = *(v34 - 1);
          v37 = *(_QWORD *)(v131 + 16);
          swift_bridgeObjectRetain();
          if (!v37)
            goto LABEL_143;
          swift_bridgeObjectRetain();
          sub_1A39A2734(v36, v35);
          v39 = v38;
          sub_1A3A1887C(v36, v35);
          if ((v39 & 1) == 0)
            goto LABEL_143;
          v156[0] = v9;
          swift_bridgeObjectRetain();
          sub_1A3AB4A84();
          sub_1A3A1887C(v36, v35);
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v34 += 2;
        *(_QWORD *)&v156[0] = 0;
        *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
        sub_1A3AB52AC();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v156[0] = 0x2065726977;
        *((_QWORD *)&v156[0] + 1) = 0xE500000000000000;
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        sub_1A3AB4A84();
        sub_1A3AB4A84();
        sub_1A3AB4A84();
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        sub_1A3AB4A84();
        --v31;
      }
      while (v31);
      sub_1A3A187BC((uint64_t)&v147);
    }
    v40 = *(_QWORD *)(v132 + 16);
    if (v40)
    {
      v41 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      do
      {
        v42 = *v41;
        if (*v41 == 1)
        {
          swift_bridgeObjectRelease();
          v32 = *((_QWORD *)&v135 + 1);
          swift_bridgeObjectRetain();
          v33 = v135;
        }
        else
        {
          if (!v42)
            goto LABEL_143;
          v43 = *(v41 - 1);
          v44 = *(_QWORD *)(v131 + 16);
          swift_bridgeObjectRetain();
          if (!v44)
            goto LABEL_143;
          swift_bridgeObjectRetain();
          sub_1A39A2734(v43, v42);
          v46 = v45;
          sub_1A3A1887C(v43, v42);
          if ((v46 & 1) == 0)
            goto LABEL_143;
          v156[0] = v9;
          swift_bridgeObjectRetain();
          sub_1A3AB4A84();
          sub_1A3A1887C(v43, v42);
          *(_QWORD *)&v156[0] = 0;
          *((_QWORD *)&v156[0] + 1) = 0xE000000000000000;
          sub_1A3AB52AC();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v156[0] = 0x2065726977;
          *((_QWORD *)&v156[0] + 1) = 0xE500000000000000;
          sub_1A3AB4A84();
          sub_1A3AB4A84();
          sub_1A3AB4A84();
          swift_bridgeObjectRelease();
          sub_1A3AB4A84();
          sub_1A3AB4A84();
          swift_bridgeObjectRelease();
        }
        v41 += 2;
        sub_1A3AB4A84();
        --v40;
      }
      while (v40);
      v116 = v33;
      v117 = v32;
      sub_1A3A187BC((uint64_t)&v146);
    }
    v123 = *((_QWORD *)&v143 + 1) + 64;
    v47 = 1 << *(_BYTE *)(*((_QWORD *)&v143 + 1) + 32);
    if (v47 < 64)
      v48 = ~(-1 << v47);
    else
      v48 = -1;
    v49 = v48 & *(_QWORD *)(*((_QWORD *)&v143 + 1) + 64);
    v125 = (unint64_t)(v47 + 63) >> 6;
    v129 = *((_QWORD *)&v143 + 1);
    swift_bridgeObjectRetain();
    for (i = 0; ; i = v133)
    {
      if (v49)
      {
        v53 = __clz(__rbit64(v49));
        v49 &= v49 - 1;
        v133 = i;
        v54 = v53 | (i << 6);
      }
      else
      {
        v55 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v56 = MEMORY[0x1E0DEE0F8];
        if (v55 >= v125)
          goto LABEL_85;
        v57 = *(_QWORD *)(v123 + 8 * v55);
        v58 = i + 1;
        if (!v57)
        {
          v58 = i + 2;
          if (i + 2 >= v125)
            goto LABEL_85;
          v57 = *(_QWORD *)(v123 + 8 * v58);
          if (!v57)
          {
            v58 = i + 3;
            if (i + 3 >= v125)
              goto LABEL_85;
            v57 = *(_QWORD *)(v123 + 8 * v58);
            if (!v57)
            {
              v59 = i + 4;
              if (i + 4 >= v125)
              {
LABEL_85:
                swift_release();
                v79 = *(_QWORD *)(v144 + 64);
                v124 = v144 + 64;
                v80 = 1 << *(_BYTE *)(v144 + 32);
                v130 = v144;
                swift_bridgeObjectRetain();
                sub_1A3A18898((uint64_t)v142);
                v81 = 0;
                if (v80 < 64)
                  v82 = ~(-1 << v80);
                else
                  v82 = -1;
                v83 = v82 & v79;
                v126 = (unint64_t)(v80 + 63) >> 6;
                v12 = v137;
                while (2)
                {
                  v138 = v12;
                  if (v83)
                  {
                    v86 = __clz(__rbit64(v83));
                    v83 &= v83 - 1;
                    v134 = v81;
                    v87 = v86 | (v81 << 6);
                  }
                  else
                  {
                    v88 = v81 + 1;
                    if (__OFADD__(v81, 1))
                      goto LABEL_129;
                    if (v88 >= v126)
                    {
LABEL_7:
                      swift_bridgeObjectRelease();
                      swift_release();
                      v16 = v118;
                      goto LABEL_8;
                    }
                    v89 = *(_QWORD *)(v124 + 8 * v88);
                    v90 = v81 + 1;
                    if (!v89)
                    {
                      v90 = v81 + 2;
                      if (v81 + 2 >= v126)
                        goto LABEL_7;
                      v89 = *(_QWORD *)(v124 + 8 * v90);
                      if (!v89)
                      {
                        v90 = v81 + 3;
                        if (v81 + 3 >= v126)
                          goto LABEL_7;
                        v89 = *(_QWORD *)(v124 + 8 * v90);
                        if (!v89)
                        {
                          v91 = v81 + 4;
                          if (v81 + 4 >= v126)
                            goto LABEL_7;
                          v89 = *(_QWORD *)(v124 + 8 * v91);
                          if (!v89)
                          {
                            while (1)
                            {
                              v90 = v91 + 1;
                              if (__OFADD__(v91, 1))
                                break;
                              if (v90 >= v126)
                                goto LABEL_7;
                              v89 = *(_QWORD *)(v124 + 8 * v90);
                              ++v91;
                              if (v89)
                                goto LABEL_106;
                            }
LABEL_137:
                            __break(1u);
LABEL_138:
                            __break(1u);
LABEL_139:
                            __break(1u);
LABEL_140:
                            __break(1u);
                            goto LABEL_141;
                          }
                          v90 = v81 + 4;
                        }
                      }
                    }
LABEL_106:
                    v83 = (v89 - 1) & v89;
                    v134 = v90;
                    v87 = __clz(__rbit64(v89)) + (v90 << 6);
                  }
                  v92 = *(unsigned int *)(*(_QWORD *)(v130 + 48) + 4 * v87);
                  sub_1A39FEDA0(*(_QWORD *)(v130 + 56) + 40 * v87, (uint64_t)v141, &qword_1EE6D38B8);
                  sub_1A3A1895C((uint64_t)v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
                  *(_QWORD *)&v156[0] = 40;
                  *((_QWORD *)&v156[0] + 1) = 0xE100000000000000;
                  sub_1A3AB4A84();
                  sub_1A3AB4A84();
                  v152 = v92;
                  sub_1A3AB5624();
                  sub_1A3AB4A84();
                  swift_bridgeObjectRelease();
                  sub_1A3AB4A84();
                  sub_1A39FEDA0((uint64_t)v141, (uint64_t)&v152, &qword_1EE6D38B8);
                  sub_1A39FEDA0((uint64_t)v141, (uint64_t)v156, &qword_1EE6D38B8);
                  if ((v157 & 1) != 0)
                  {
                    v93 = v153;
                    v94 = v154;
                    v95 = v155;
                    if (v153)
                    {
                      v96 = v152;
                      sub_1A3A1895C((uint64_t)v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      v151 = v135;
                      sub_1A3A1895C((uint64_t)v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_1A3AB4A84();
                      sub_1A3AB4A84();
                      sub_1A3AB4A84();
                      *(_QWORD *)&v150 = v92;
                      sub_1A3AB5624();
                      sub_1A3AB4A84();
                      swift_bridgeObjectRelease();
                      v93 = *((_QWORD *)&v151 + 1);
                      v96 = v151;
                    }
                    v103 = *(_QWORD *)(v12 + 16);
                    v128 = v95;
                    if (v103)
                    {
                      swift_bridgeObjectRetain();
                      v104 = sub_1A39A2734(v96, v93);
                      if ((v105 & 1) != 0)
                      {
                        LODWORD(v106) = *(_DWORD *)(*(_QWORD *)(v12 + 56) + 4 * v104);
                        swift_bridgeObjectRelease();
                        goto LABEL_121;
                      }
                      swift_bridgeObjectRelease();
                      v103 = *(_QWORD *)(v12 + 16);
                    }
                    v106 = v103 + v122;
                    if (__OFADD__(v103, v122))
                      goto LABEL_133;
                    if ((v106 & 0x8000000000000000) != 0)
                      goto LABEL_134;
                    if (HIDWORD(v106))
                      goto LABEL_135;
LABEL_121:
                    *(_QWORD *)&v151 = 0;
                    *((_QWORD *)&v151 + 1) = 0xE000000000000000;
                    sub_1A3AB52AC();
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v151 = 0x7061724765726977;
                    *((_QWORD *)&v151 + 1) = 0xE900000000000068;
                    *(_QWORD *)&v150 = 0x79747265706F7270;
                    *((_QWORD *)&v150 + 1) = 0xE800000000000000;
                    sub_1A39A9EC0();
                    sub_1A3AB5150();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    sub_1A3AB4A84();
                    LODWORD(v150) = v106;
                    sub_1A3AB5624();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    sub_1A3AB4A84();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    sub_1A3AB4A84();
                    sub_1A3AB4A84();
                    sub_1A3AB4A84();
                    if (*(_QWORD *)(v12 + 16))
                    {
                      swift_bridgeObjectRetain();
                      sub_1A39A2734(v96, v93);
                      v108 = v107;
                      swift_bridgeObjectRelease();
                      if ((v108 & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        goto LABEL_124;
                      }
                    }
                    *(_QWORD *)&v151 = 0x79747265706F7270;
                    *((_QWORD *)&v151 + 1) = 0xE800000000000000;
                    swift_bridgeObjectRetain();
                    sub_1A3AB4A84();
                    LODWORD(v150) = v106;
                    sub_1A3AB5624();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    v109 = v56;
                    v110 = *((_QWORD *)&v151 + 1);
                    v111 = v151;
                    if ((v128 & 1) == 0)
                    {
                      v149 = v94;
                      *(_QWORD *)&v150 = 32;
                      *((_QWORD *)&v150 + 1) = 0xE100000000000000;
                      sub_1A3A64D58(v109);
                      sub_1A3AB4A84();
                      swift_bridgeObjectRelease();
                      sub_1A3AB4A84();
                      swift_bridgeObjectRelease();
                      v110 = *((_QWORD *)&v151 + 1);
                      v111 = v151;
                    }
                    v84 = swift_isUniquelyReferenced_nonNull_native();
                    *(_QWORD *)&v150 = v12;
                    sub_1A3A16048(v106, v96, v93, v84);
                    v85 = v150;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v150 = v111;
                    *((_QWORD *)&v150 + 1) = v110;
                    swift_bridgeObjectRetain();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v56 = MEMORY[0x1E0DEE0F8];
                  }
                  else
                  {
                    v98 = v152;
                    v97 = v153;
                    v99 = v154;
                    v100 = *(_QWORD *)(v131 + 16);
                    sub_1A3A1895C((uint64_t)v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50B0);
                    swift_bridgeObjectRetain();
                    if (!v100)
                      goto LABEL_142;
                    swift_bridgeObjectRetain();
                    sub_1A39A2734(v98, v97);
                    v102 = v101;
                    swift_bridgeObjectRelease();
                    if ((v102 & 1) == 0)
                      goto LABEL_142;
                    *(_QWORD *)&v151 = 0;
                    *((_QWORD *)&v151 + 1) = 0xE000000000000000;
                    sub_1A3AB52AC();
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v151 = 1701996919;
                    *((_QWORD *)&v151 + 1) = 0xE400000000000000;
                    *(_QWORD *)&v150 = 0x79747265706F7270;
                    *((_QWORD *)&v150 + 1) = 0xE800000000000000;
                    sub_1A39A9EC0();
                    sub_1A3AB5150();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    sub_1A3AB4A84();
                    v150 = v9;
                    swift_bridgeObjectRetain();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    sub_1A3AB4A84();
                    LODWORD(v150) = v99;
                    sub_1A3AB5624();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    sub_1A3AB4A84();
                    sub_1A3AB4A84();
                    swift_bridgeObjectRelease();
                    sub_1A3AB4A84();
                    v12 = v138;
LABEL_124:
                    v85 = v12;
                  }
                  swift_bridgeObjectRelease();
                  sub_1A3A1895C((uint64_t)v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A189E4);
                  sub_1A3AB4A84();
                  swift_bridgeObjectRelease();
                  v12 = v85;
                  v81 = v134;
                  continue;
                }
              }
              v57 = *(_QWORD *)(v123 + 8 * v59);
              if (!v57)
              {
                while (1)
                {
                  v58 = v59 + 1;
                  if (__OFADD__(v59, 1))
                    goto LABEL_136;
                  if (v58 >= v125)
                    goto LABEL_85;
                  v57 = *(_QWORD *)(v123 + 8 * v58);
                  ++v59;
                  if (v57)
                    goto LABEL_65;
                }
              }
              v58 = i + 4;
            }
          }
        }
LABEL_65:
        v49 = (v57 - 1) & v57;
        v133 = v58;
        v54 = __clz(__rbit64(v57)) + (v58 << 6);
      }
      v60 = *(unsigned int *)(*(_QWORD *)(v129 + 48) + 4 * v54);
      sub_1A39FEDA0(*(_QWORD *)(v129 + 56) + 40 * v54, (uint64_t)v140, &qword_1EE6D38B0);
      sub_1A3A1895C((uint64_t)v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
      *(_QWORD *)&v156[0] = 40;
      *((_QWORD *)&v156[0] + 1) = 0xE100000000000000;
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      v152 = v60;
      sub_1A3AB5624();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      sub_1A39FEDA0((uint64_t)v140, (uint64_t)&v152, &qword_1EE6D38B0);
      sub_1A39FEDA0((uint64_t)v140, (uint64_t)v156, &qword_1EE6D38B0);
      if ((v157 & 1) != 0)
        break;
      v67 = v152;
      v66 = v153;
      v68 = v154;
      v69 = *(_QWORD *)(v131 + 16);
      sub_1A3A1895C((uint64_t)v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
      swift_bridgeObjectRetain();
      if (!v69)
        goto LABEL_142;
      swift_bridgeObjectRetain();
      sub_1A39A2734(v67, v66);
      v71 = v70;
      swift_bridgeObjectRelease();
      if ((v71 & 1) == 0)
        goto LABEL_142;
      *(_QWORD *)&v151 = 0;
      *((_QWORD *)&v151 + 1) = 0xE000000000000000;
      sub_1A3AB52AC();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v151 = 1701996919;
      *((_QWORD *)&v151 + 1) = 0xE400000000000000;
      *(_QWORD *)&v150 = 0x6D61726170;
      *((_QWORD *)&v150 + 1) = 0xE500000000000000;
      sub_1A39A9EC0();
      sub_1A3AB5150();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      v150 = v9;
      swift_bridgeObjectRetain();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      LODWORD(v150) = v68;
      sub_1A3AB5624();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      v52 = v136;
LABEL_49:
      swift_bridgeObjectRelease();
      sub_1A3A1895C((uint64_t)v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A3A18890);
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      v136 = v52;
    }
    v61 = v153;
    v62 = v154;
    v127 = v155;
    if (v153)
    {
      v63 = v152;
      sub_1A3A1895C((uint64_t)v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
      v64 = v136;
      swift_bridgeObjectRetain();
      v65 = *(_QWORD *)(v136 + 16);
      if (!v65)
        goto LABEL_77;
    }
    else
    {
      v151 = v135;
      sub_1A3A1895C((uint64_t)v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))sub_1A39A50A8);
      v64 = v136;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      *(_QWORD *)&v150 = v60;
      sub_1A3AB5624();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      v61 = *((_QWORD *)&v151 + 1);
      v63 = v151;
      v65 = *(_QWORD *)(v136 + 16);
      if (!v65)
        goto LABEL_77;
    }
    swift_bridgeObjectRetain();
    v72 = sub_1A39A2734(v63, v61);
    if ((v73 & 1) != 0)
    {
      LODWORD(v74) = *(_DWORD *)(*(_QWORD *)(v64 + 56) + 4 * v72);
      swift_bridgeObjectRelease();
LABEL_80:
      *(_QWORD *)&v151 = 0;
      *((_QWORD *)&v151 + 1) = 0xE000000000000000;
      sub_1A3AB52AC();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v151 = 0x7061724765726977;
      *((_QWORD *)&v151 + 1) = 0xE900000000000068;
      *(_QWORD *)&v150 = 0x6D61726170;
      *((_QWORD *)&v150 + 1) = 0xE500000000000000;
      sub_1A39A9EC0();
      sub_1A3AB5150();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      LODWORD(v150) = v74;
      sub_1A3AB5624();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      sub_1A3AB4A84();
      if (*(_QWORD *)(v136 + 16)
        && (swift_bridgeObjectRetain(), sub_1A39A2734(v63, v61), v76 = v75, swift_bridgeObjectRelease(), (v76 & 1) != 0))
      {
        swift_bridgeObjectRelease();
        v52 = v136;
      }
      else
      {
        *(_QWORD *)&v151 = 0x6D61726170;
        *((_QWORD *)&v151 + 1) = 0xE500000000000000;
        swift_bridgeObjectRetain();
        sub_1A3AB4A84();
        LODWORD(v150) = v74;
        sub_1A3AB5624();
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        v77 = *((_QWORD *)&v151 + 1);
        v78 = v151;
        if ((v127 & 1) == 0)
        {
          v149 = v62;
          *(_QWORD *)&v150 = 32;
          *((_QWORD *)&v150 + 1) = 0xE100000000000000;
          sub_1A3A64C80();
          sub_1A3AB4A84();
          swift_bridgeObjectRelease();
          sub_1A3AB4A84();
          swift_bridgeObjectRelease();
          v77 = *((_QWORD *)&v151 + 1);
          v78 = v151;
        }
        v51 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v150 = v136;
        sub_1A3A16048(v74, v63, v61, v51);
        v52 = v150;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v150 = v78;
        *((_QWORD *)&v150 + 1) = v77;
        swift_bridgeObjectRetain();
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1A3AB4A84();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_49;
    }
    swift_bridgeObjectRelease();
    v65 = *(_QWORD *)(v64 + 16);
LABEL_77:
    v74 = v65 + a4;
    if (__OFADD__(v65, a4))
      goto LABEL_130;
    if ((v74 & 0x8000000000000000) != 0)
      goto LABEL_131;
    if (HIDWORD(v74))
      goto LABEL_132;
    goto LABEL_80;
  }
  v19 = v16 + 1;
  if (__OFADD__(v16, 1))
    goto LABEL_138;
  if (v19 < v115)
  {
    v20 = *(_QWORD *)(v114 + 8 * v19);
    v21 = v16 + 1;
    if (v20)
      goto LABEL_23;
    v21 = v16 + 2;
    if (v16 + 2 >= v115)
      goto LABEL_127;
    v20 = *(_QWORD *)(v114 + 8 * v21);
    if (v20)
      goto LABEL_23;
    v21 = v16 + 3;
    if (v16 + 3 >= v115)
      goto LABEL_127;
    v20 = *(_QWORD *)(v114 + 8 * v21);
    if (v20)
    {
LABEL_23:
      v118 = v21;
      v119 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v21 << 6);
      goto LABEL_24;
    }
    v22 = v16 + 4;
    if (v16 + 4 < v115)
    {
      v20 = *(_QWORD *)(v114 + 8 * v22);
      if (v20)
      {
        v21 = v16 + 4;
        goto LABEL_23;
      }
      while (1)
      {
        v21 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_139;
        if (v21 >= v115)
          break;
        v20 = *(_QWORD *)(v114 + 8 * v21);
        ++v22;
        if (v20)
          goto LABEL_23;
      }
    }
  }
LABEL_127:
  swift_bridgeObjectRelease();
  result = swift_release();
  *(_OWORD *)a6 = v139;
  *(_QWORD *)(a6 + 16) = v136;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v116;
  *(_QWORD *)(a6 + 40) = v117;
  return result;
}

unint64_t sub_1A3A18218(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int *i;
  unsigned int v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1A39A4820(&qword_1EE6D3890);
    v3 = (_QWORD *)sub_1A3AB54B0();
    for (i = (int *)(a1 + 36); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1A39A4DEC(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 4 * result;
      *(_DWORD *)(v3[6] + v9) = v5;
      *(_DWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

unint64_t sub_1A3A182F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int *i;
  unsigned int v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1A39A4820(&qword_1EE6D3880);
    v3 = (_QWORD *)sub_1A3AB54B0();
    for (i = (int *)(a1 + 36); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1A39A4DEC(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 4 * result;
      *(_DWORD *)(v3[6] + v9) = v5;
      *(_DWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

id *sub_1A3A183C4(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

id *sub_1A3A183EC(id *a1)
{

  return a1;
}

uint64_t sub_1A3A18414(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1A3A0E3AC(a1, a2);
  return a1;
}

uint64_t sub_1A3A18428(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1A3A1843C(a1, a2);
  return a1;
}

uint64_t sub_1A3A1843C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

void _s7ManagerVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *_s7ManagerVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = (void *)a2[8];
  a1[8] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v7;
  return a1;
}

_QWORD *_s7ManagerVwca(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[8];
  v5 = (void *)a2[8];
  a1[8] = v5;
  v6 = v5;

  return a1;
}

uint64_t _s7ManagerVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  return a1;
}

uint64_t _s7ManagerVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s7ManagerVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s7ManagerVMa()
{
  return &_s7ManagerVN;
}

uint64_t sub_1A3A18794(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A3A187BC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A3A187E4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A3A1880C(uint64_t a1)
{
  sub_1A39A5070(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A3A1887C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1A3A18890()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A18898(uint64_t a1)
{
  sub_1A3A18908(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1A3A18908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1A3A1895C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 36) << 32), *(unsigned __int8 *)(a1 + 37));
  return a1;
}

unint64_t sub_1A3A189A0()
{
  unint64_t result;

  result = qword_1EE6D38C8;
  if (!qword_1EE6D38C8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSAudioEffect.Spec, &type metadata for TTSAudioEffect.Spec);
    atomic_store(result, (unint64_t *)&qword_1EE6D38C8);
  }
  return result;
}

uint64_t sub_1A3A189E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A3A18A18(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 128);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_1A3A18A5C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A18A98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A3A18AC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A3A18B0C()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A3A18B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A18BA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3A18BD4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A3A18C04()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A18C38(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A18C7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3A18CAC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 200);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A3A18CDC()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A18D10(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A18D54()
{
  uint64_t v0;

  v0 = sub_1A39A4820(&qword_1EE6D2C00);
  sub_1A39AB688(v0, qword_1EE6DCB40);
  sub_1A39AAC98(v0, (uint64_t)qword_1EE6DCB40);
  return sub_1A3AB4694();
}

uint64_t SSMLConverter.__allocating_init(withSSML:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  SSMLConverter.init(withSSML:)(a1, a2);
  return v4;
}

uint64_t SSMLConverter.init(withSSML:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v3[2] = a1;
  v3[3] = a2;
  swift_bridgeObjectRetain();
  static SSMLConverter.plainStringAndIntervals(fromSSML:)(a1, a2, &v21);
  swift_bridgeObjectRelease();
  v6 = v22;
  if (!v22)
  {
    v3[4] = 0;
    v3[5] = 0xE000000000000000;
    v18 = MEMORY[0x1E0DEE9D8];
    v3[6] = MEMORY[0x1E0DEE9D8];
    SpeechStringIntervalTree.init()(&v21);
    v19 = v21;
    v3[7] = v18;
    v3[8] = v19;
    return (uint64_t)v3;
  }
  v7 = v23;
  v8 = v21;
  v3[4] = v21;
  v3[5] = v6;
  v3[6] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A3A195EC(v8, v6);
  swift_beginAccess();
  v9 = v3[5];
  v20[0] = v3[4];
  v20[1] = v9;
  v10 = qword_1EE6DCB38;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = sub_1A39A4820(&qword_1EE6D2C00);
  sub_1A39AAC98(v11, (uint64_t)qword_1EE6DCB40);
  sub_1A39C3EB4();
  sub_1A3A1961C();
  v12 = sub_1A3AB48F8();
  swift_bridgeObjectRelease();
  v3[7] = v12;
  SpeechStringIntervalTree.init()(v20);
  v3[8] = v20[0];
  swift_beginAccess();
  v13 = v3[6];
  if (!(v13 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_6;
LABEL_14:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v14 = result;
  if (!result)
    goto LABEL_14;
LABEL_6:
  if (v14 >= 1)
  {
    v16 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        v17 = MEMORY[0x1A85960B8](v16, v13);
      }
      else
      {
        v17 = *(_QWORD *)(v13 + 8 * v16 + 32);
        swift_retain();
      }
      ++v16;
      swift_beginAccess();
      SpeechStringIntervalTree.insert(_:)(v17);
      swift_endAccess();
      swift_release();
    }
    while (v14 != v16);
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t static SSMLConverter.plainStringAndIntervals(fromSSML:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  int v28;
  id v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v38 = 0;
  v39 = 0xE000000000000000;
  v36 = 0xE000000000000000;
  v37 = MEMORY[0x1E0DEE9D8];
  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  v34[1] = a1;
  v34[2] = a2;
  v34[3] = 0;
  v34[4] = v3;
  v35 = 0;
  swift_bridgeObjectRetain();
  v31 = 0;
  v4 = 0;
  while (2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 1;
    do
    {
      v9 = v4;
      v10 = sub_1A3AB4AA8();
      if (!v11)
        goto LABEL_45;
      ++v4;
      if (__OFADD__(v9, 1))
        goto LABEL_47;
      v12 = v10;
      v13 = v11;
      if (v10 == 60 && v11 == 0xE100000000000000)
      {
        v12 = 60;
LABEL_14:
        if ((v7 & 1) == 0)
          goto LABEL_46;
        v8 = 1;
        v6 = v9;
        goto LABEL_7;
      }
      if ((sub_1A3AB5654() & 1) != 0)
        goto LABEL_14;
      if (v12 == 62 && v13 == 0xE100000000000000)
      {
        v12 = 62;
LABEL_20:
        if ((v7 & 1) != 0)
        {
LABEL_46:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v28 = sub_1A3AB4FD0();
          v29 = sub_1A3A12674();
          v30 = sub_1A3A04828();
          sub_1A3A126B4(v28, (uint64_t)v29, v30 & 1, 0xD000000000000071, 0x80000001A3AF1360, 0xD000000000000022, 0x80000001A3AF13E0);

          result = swift_bridgeObjectRelease();
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          return result;
        }
        v8 = 0;
        v5 = v9;
        goto LABEL_7;
      }
      if ((sub_1A3AB5654() & 1) != 0)
        goto LABEL_20;
      if ((v7 & 1) != 0)
      {
        MEMORY[0x1A8595860](v12, v13);
        MEMORY[0x1A8595860](v12, v13);
        swift_bridgeObjectRelease();
        v14 = sub_1A3AB4AA8();
        if (!v15)
        {
LABEL_45:
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          v26 = v39;
          v27 = v37;
          *a3 = v38;
          a3[1] = v26;
          a3[2] = v27;
          return result;
        }
        v12 = v14;
        v13 = v15;
        v6 = v9 + 1;
        while (1)
        {
          v4 = v6 + 1;
          if (__OFADD__(v6, 1))
            break;
          if (v12 == 60 && v13 == 0xE100000000000000)
          {
            v12 = 60;
LABEL_35:
            if (__OFSUB__(v6, 1))
              goto LABEL_51;
            if (v6 - 1 >= 1)
            {
              type metadata accessor for SpeechStringIntervalNode();
              sub_1A39A4820(&qword_1EE6D38D0);
              v33 = v6 - 1;
              v34[0] = v9;
              v17 = sub_1A3A31D28((uint64_t)v34, (uint64_t)&v33);
              sub_1A3A4A184(v17, v31, v35, v36, 0);
              MEMORY[0x1A8595980]();
              if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                sub_1A3AB4BE0();
              sub_1A3AB4C10();
              sub_1A3AB4BC8();
              v35 = 0;
              v36 = 0xE000000000000000;
              goto LABEL_6;
            }
            goto LABEL_52;
          }
          if ((sub_1A3AB5654() & 1) != 0)
            goto LABEL_35;
          if (v12 == 62 && v13 == 0xE100000000000000 || (sub_1A3AB5654() & 1) != 0)
            goto LABEL_46;
          MEMORY[0x1A8595860](v12, v13);
          MEMORY[0x1A8595860](v12, v13);
          swift_bridgeObjectRelease();
          v12 = sub_1A3AB4AA8();
          v13 = v16;
          ++v6;
          if (!v16)
            goto LABEL_45;
        }
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_6:
      v8 = 1;
LABEL_7:
      MEMORY[0x1A8595860](v12, v13);
      swift_bridgeObjectRelease();
      v7 = 0;
    }
    while ((v8 & 1) != 0);
    sub_1A39A4820(&qword_1EE6D38D0);
    v33 = v5;
    v34[0] = v6;
    v18 = sub_1A3A31D28((uint64_t)v34, (uint64_t)&v33);
    type metadata accessor for SpeechStringIntervalNode();
    v19 = v35;
    v20 = v36;
    swift_retain();
    v21 = sub_1A3A04828();
    sub_1A3A4A184(v18, v31, v19, v20, v21 & 1);
    MEMORY[0x1A8595980]();
    if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1A3AB4BE0();
    sub_1A3AB4C10();
    sub_1A3AB4BC8();
    swift_release();
    v22 = v5 - v6;
    if (__OFSUB__(v5, v6))
      goto LABEL_48;
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_49;
    if (!__OFADD__(v31, v24))
    {
      v31 += v24;
      v35 = 0;
      v36 = 0xE000000000000000;
      continue;
    }
    break;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = sub_1A3AB5444();
  __break(1u);
  return result;
}

uint64_t sub_1A3A195EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1A3A1961C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D2C38;
  if (!qword_1EE6D2C38)
  {
    v1 = sub_1A39AB624(&qword_1EE6D2C00);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DF1F60], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D2C38);
  }
  return result;
}

uint64_t SSMLConverter.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t SSMLConverter.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A196E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void);
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, unint64_t, uint64_t);
  void (*v31)(void);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = sub_1A39A4820(&qword_1EE6D2C40);
  v7 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  v35 = v7;
  result = MEMORY[0x1E0C80A78](v6);
  v33 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v36 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 192))(result);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v26[1] = v10;
    v27 = a2 - a1;
    v31 = *(void (**)(void))(*(_QWORD *)v3 + 144);
    v32 = a1;
    v12 = v34;
    v13 = v10 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v28 = *(_QWORD *)(v35 + 72);
    v29 = a1;
    v30 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v35 + 16);
    v14 = v31;
    while (1)
    {
      v37 = v11;
      v18 = v33;
      v19 = v30(v33, v13, v12);
      ((void (*)(uint64_t))v14)(v19);
      v14();
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      sub_1A3AB46A0();
      swift_release();
      v20 = sub_1A3AB4AD8();
      v21 = swift_bridgeObjectRelease();
      ((void (*)(uint64_t))v14)(v21);
      v14();
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      sub_1A3AB46A0();
      swift_release();
      v22 = sub_1A3AB4AD8();
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v18, v12);
      v23 = v22 - v20;
      if (__OFSUB__(v22, v20))
        goto LABEL_24;
      v15 = __OFSUB__(v23, 1);
      v24 = v23 - 1;
      if (v15)
        goto LABEL_25;
      if (v36 < v20)
        goto LABEL_18;
      if (v22 <= v29)
        break;
      if (v20 < v29)
        goto LABEL_7;
      v17 = v37;
      if (v36 >= v22)
      {
        v15 = __OFSUB__(v27, v24);
        v27 -= v24;
        if (v15)
        {
          __break(1u);
LABEL_18:
          result = swift_bridgeObjectRelease();
          a1 = v32;
          v25 = v32 + v27;
          if (__OFADD__(v32, v27))
            goto LABEL_23;
          goto LABEL_19;
        }
      }
LABEL_8:
      v13 += v28;
      v11 = v17 - 1;
      if (!v11)
        goto LABEL_18;
    }
    v15 = __OFSUB__(v32, v24);
    v16 = v32 - v24;
    if (v15)
      goto LABEL_26;
    v32 = v16;
LABEL_7:
    v17 = v37;
    goto LABEL_8;
  }
  result = swift_bridgeObjectRelease();
  v25 = a2;
  if (__OFADD__(a1, a2 - a1))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_19:
  if (v25 >= a1)
    return a1;
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1A3A199A0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

uint64_t SSMLConverter.plainStringRange(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  char v20;
  int v21;
  char v22;
  uint64_t v23;
  _QWORD v24[2];

  swift_beginAccess();
  v24[1] = *(_QWORD *)(v2 + 64);
  sub_1A39A4820(&qword_1EE6D38D0);
  v23 = a2;
  v24[0] = a1;
  swift_retain();
  v5 = sub_1A3A31D28((uint64_t)v24, (uint64_t)&v23);
  v6 = SpeechStringIntervalTree.intersections(with:)(v5);
  swift_release();
  result = swift_release();
  if (!(v6 >> 62))
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    v21 = sub_1A3AB4FD0();
    v19 = sub_1A3A12674();
    v22 = sub_1A3A04828();
    sub_1A3A126B4(v21, (uint64_t)v19, v22 & 1, 0xD000000000000071, 0x80000001A3AF1360, 0xD000000000000017, 0x80000001A3AF14F0);
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v8 = sub_1A3AB5480();
  result = swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_19;
LABEL_3:
  if ((v6 & 0xC000000000000001) == 0)
  {
    v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
      if (!__OFSUB__(v8, 1))
      {
        if (v8 - 1 < v9)
        {
          swift_retain();
          swift_retain();
LABEL_8:
          swift_bridgeObjectRelease();
          v10 = sub_1A3A19D10(a1, 0);
          v12 = v11;
          result = sub_1A3A19D10(a2, 1);
          v14 = result;
          if ((v12 & 1) != 0)
          {
            if ((v13 & 1) == 0)
            {
              v16 = result + 1;
              if (!__OFADD__(result, 1))
              {
                if ((v16 & 0x8000000000000000) == 0)
                {
                  v15 = 0;
                  goto LABEL_16;
                }
                goto LABEL_29;
              }
LABEL_28:
              __break(1u);
LABEL_29:
              __break(1u);
              goto LABEL_30;
            }
          }
          else if ((v13 & 1) == 0)
          {
            if (result >= v10)
            {
              v15 = v10;
              v16 = v14;
LABEL_16:
              v17 = sub_1A3A196E8(v15, v16);
              swift_release();
              swift_release();
              return v17;
            }
            goto LABEL_27;
          }
          v18 = sub_1A3AB4FD0();
          v19 = sub_1A3A12674();
          v20 = sub_1A3A04828();
          sub_1A3A126B4(v18, (uint64_t)v19, v20 & 1, 0xD000000000000071, 0x80000001A3AF1360, 0xD000000000000017, 0x80000001A3AF14F0);
          swift_release();
          swift_release();
LABEL_20:

          return 0;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  MEMORY[0x1A85960B8](0, v6);
  swift_bridgeObjectRelease();
  result = v8 - 1;
  if (!__OFSUB__(v8, 1))
  {
    MEMORY[0x1A85960B8](result, v6);
    goto LABEL_8;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A3A19D10(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 < 0)
  {
    v8 = sub_1A3AB4FD0();
    v9 = sub_1A3A12674();
    v10 = sub_1A3A04828();
    sub_1A3A126B4(v8, (uint64_t)v9, v10 & 1, 0xD000000000000071, 0x80000001A3AF1360, 0xD000000000000025, 0x80000001A3AF1620);

    return 0;
  }
  if (((*(uint64_t (**)(void))(*(_QWORD *)v2 + 376))() & 1) != 0)
  {
    v5 = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 136))(&v12);
    v6 = v12;
    result = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 328))(v5);
    if (!__OFSUB__(v6, result))
      return (v6 - result) & ~((v6 - result) >> 63);
    __break(1u);
    goto LABEL_10;
  }
  result = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 328))();
  v11 = a1 - result;
  if (__OFSUB__(a1, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = v11 + (a2 & 1);
  if (__OFADD__(v11, a2 & 1))
LABEL_11:
    __break(1u);
  return result;
}

uint64_t sub_1A3A19E40()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t sub_1A3A19E68()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t sub_1A3A19E90(uint64_t a1, uint64_t a2)
{
  return SSMLConverter.plainStringRange(from:)(a1, a2);
}

uint64_t SSMLConverter.ConversionResult.plainString.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SSMLConverter.ConversionResult.plainString.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SSMLConverter.ConversionResult.plainString.modify())()
{
  return nullsub_19;
}

uint64_t SSMLConverter.ConversionResult.rangeIntervals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SSMLConverter.ConversionResult.rangeIntervals.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SSMLConverter.ConversionResult.rangeIntervals.modify())()
{
  return nullsub_19;
}

uint64_t type metadata accessor for SSMLConverter()
{
  return objc_opt_self();
}

uint64_t method lookup function for SSMLConverter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SSMLConverter.originalString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SSMLConverter.originalString.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SSMLConverter.originalString.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SSMLConverter.plainString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SSMLConverter.plainString.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SSMLConverter.plainString.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SSMLConverter.rangeIntervals.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SSMLConverter.rangeIntervals.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SSMLConverter.rangeIntervals.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SSMLConverter.escapedIntervals.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SSMLConverter.escapedIntervals.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SSMLConverter.escapedIntervals.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SSMLConverter.__allocating_init(withSSML:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t destroy for SSMLConverter.ConversionResult()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s12TextToSpeech13SSMLConverterC16ConversionResultVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SSMLConverter.ConversionResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SSMLConverter.ConversionResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SSMLConverter.ConversionResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SSMLConverter.ConversionResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SSMLConverter.ConversionResult()
{
  return &type metadata for SSMLConverter.ConversionResult;
}

uint64_t sub_1A3A1A1D0()
{
  sub_1A3AB56FC();
  sub_1A3AB5720();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A1A214()
{
  return sub_1A3AB5720();
}

uint64_t sub_1A3A1A23C()
{
  sub_1A3AB56FC();
  sub_1A3AB5720();
  return sub_1A3AB5738();
}

uint64_t commonScriptCode.getter()
{
  return 2038004058;
}

uint64_t sub_1A3A1A28C()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1A39BEFBC((uint64_t)&unk_1E4A96168);
  result = swift_arrayDestroy();
  qword_1EE6E6DE0 = v0;
  *(_QWORD *)algn_1EE6E6DE8 = 0;
  byte_1EE6E6DF0 = 1;
  return result;
}

unint64_t sub_1A3A1A2E0()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t result;

  sub_1A39A4820(&qword_1EE6D3950);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3AC3DA0;
  *(_QWORD *)(inited + 32) = 1768841544;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  if (qword_1EE6DCB70 != -1)
    swift_once();
  v1 = qword_1EE6E6DE0;
  v2 = *(_QWORD *)algn_1EE6E6DE8;
  *(_QWORD *)(inited + 48) = qword_1EE6E6DE0;
  *(_QWORD *)(inited + 56) = v2;
  v3 = byte_1EE6E6DF0;
  *(_BYTE *)(inited + 64) = byte_1EE6E6DF0;
  *(_QWORD *)(inited + 72) = 1953390920;
  *(_QWORD *)(inited + 80) = 0xE400000000000000;
  *(_QWORD *)(inited + 88) = v1;
  *(_QWORD *)(inited + 96) = v2;
  *(_BYTE *)(inited + 104) = v3;
  *(_QWORD *)(inited + 112) = 1936613704;
  *(_QWORD *)(inited + 120) = 0xE400000000000000;
  *(_QWORD *)(inited + 128) = v1;
  *(_QWORD *)(inited + 136) = v2;
  *(_BYTE *)(inited + 144) = v3;
  *(_QWORD *)(inited + 152) = 1634888008;
  *(_QWORD *)(inited + 160) = 0xE400000000000000;
  *(_QWORD *)(inited + 168) = v1;
  *(_QWORD *)(inited + 176) = v2;
  *(_BYTE *)(inited + 184) = v3;
  *(_QWORD *)(inited + 192) = 1634623819;
  *(_QWORD *)(inited + 200) = 0xE400000000000000;
  *(_QWORD *)(inited + 208) = v1;
  *(_QWORD *)(inited + 216) = v2;
  *(_BYTE *)(inited + 224) = v3;
  *(_QWORD *)(inited + 232) = 1851879498;
  *(_QWORD *)(inited + 240) = 0xE400000000000000;
  *(_QWORD *)(inited + 248) = v1;
  *(_QWORD *)(inited + 256) = v2;
  *(_BYTE *)(inited + 264) = v3;
  *(_QWORD *)(inited + 272) = 1701998411;
  *(_QWORD *)(inited + 280) = 0xE400000000000000;
  sub_1A3A20648(v1, v2, v3);
  *(_QWORD *)(inited + 288) = v1;
  *(_QWORD *)(inited + 296) = v2;
  *(_BYTE *)(inited + 304) = v3;
  *(_QWORD *)(inited + 312) = 1735287112;
  *(_QWORD *)(inited + 320) = 0xE400000000000000;
  sub_1A3A20648(v1, v2, v3);
  *(_QWORD *)(inited + 328) = v1;
  *(_QWORD *)(inited + 336) = v2;
  *(_BYTE *)(inited + 344) = v3;
  sub_1A3A20648(v1, v2, v3);
  sub_1A3A20648(v1, v2, v3);
  sub_1A3A20648(v1, v2, v3);
  sub_1A3A20648(v1, v2, v3);
  sub_1A3A20648(v1, v2, v3);
  sub_1A3A20648(v1, v2, v3);
  result = sub_1A3A1A4A0(inited);
  qword_1EE6E6DF8 = result;
  return result;
}

unint64_t sub_1A3A1A4A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D3958);
  v2 = (_QWORD *)sub_1A3AB54B0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unsigned __int8 *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    sub_1A3A20648(v7, v8, v9);
    result = sub_1A39A2734(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 24 * result;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 40;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A3A1A5E0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A3A1A614(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 120))(*a1);
}

uint64_t sub_1A3A1A640(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t sub_1A3A1A67C()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A1A6B0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A1A6F4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *);
  void (*v12)(_BYTE *, _QWORD);
  uint64_t *v13;
  uint64_t *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _BYTE v18[32];

  v2 = v1;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 136))();
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1A3A1F340(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 2038004058;
    swift_bridgeObjectRelease();
    if (uscript_getShortName())
    {
      v8 = sub_1A3AB4A90();
      v10 = v9;
      if (sub_1A3AB4A48() < 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v11 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 152);
        swift_bridgeObjectRetain();
        v12 = (void (*)(_BYTE *, _QWORD))v11(v18);
        v14 = v13;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = *v14;
        *v14 = 0x8000000000000000;
        sub_1A3A1F990(v8, v10, a1, isUniquelyReferenced_nonNull_native);
        *v14 = v17;
        swift_bridgeObjectRelease();
        v12(v18, 0);
        return v8;
      }
    }
  }
  return v7;
}

char *sub_1A3A1A834(int a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  int ScriptExtensions;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char v39;

  if (a1 < 0)
    __break(1u);
  v2 = v1;
  v3 = (const void *)v1[5];
  ScriptExtensions = uscript_getScriptExtensions();
  v39 = 0;
  v5 = sub_1A3A20344(v3, ScriptExtensions);
  v6 = v5[2];
  if (!v6)
  {
    swift_release();
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_41;
  }
  v7 = 0;
  v8 = v5 + 4;
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  v35 = v2;
  v36 = v5[2];
  v38 = v5 + 4;
  do
  {
    v10 = *((_DWORD *)v8 + v7);
    if (!v10)
    {
      v39 = 1;
      goto LABEL_5;
    }
    v11 = sub_1A3A1A6F4(v10);
    v12 = v11;
    v14 = v13;
    if (qword_1EE6DCB78 != -1)
      v11 = swift_once();
    v15 = qword_1EE6E6DF8;
    if (!*(_QWORD *)(qword_1EE6E6DF8 + 16))
      goto LABEL_16;
    swift_bridgeObjectRetain();
    v16 = sub_1A39A2734(v12, v14);
    if ((v17 & 1) == 0)
    {
      v11 = swift_bridgeObjectRelease();
LABEL_16:
      if (((*(uint64_t (**)(uint64_t))(*v2 + 112))(v11) & 1) == 0)
      {
        if (!*(_QWORD *)(v2[3] + 16)
          || (swift_bridgeObjectRetain(), sub_1A39A2734(v12, v14),
                                          v25 = v24,
                                          swift_bridgeObjectRelease(),
                                          (v25 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
      }
      LOBYTE(v20) = 0;
      v19 = v14;
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_1A3A1FF88(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v27 = *((_QWORD *)v9 + 2);
      v26 = *((_QWORD *)v9 + 3);
      if (v27 >= v26 >> 1)
        v9 = sub_1A3A1FF88((char *)(v26 > 1), v27 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v27 + 1;
      v28 = &v9[24 * v27];
      *((_QWORD *)v28 + 4) = v12;
      *((_QWORD *)v28 + 5) = v19;
      v28[48] = v20;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v15 + 56) + 24 * v16;
    v12 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(unsigned __int8 *)(v18 + 16);
    sub_1A3A20648(*(_QWORD *)v18, v19, *(_BYTE *)(v18 + 16));
    swift_bridgeObjectRelease_n();
    if (v20)
    {
      if (v20 == 1)
      {
        v21 = swift_bridgeObjectRetain();
        v22 = sub_1A3A203E4(v21);
        sub_1A3A204C8(v12, v19, 1u);
        v23 = v22[2];
        if (v23)
          goto LABEL_29;
      }
      else
      {
        sub_1A3A204C8(v12, v19, 2u);
        v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v23 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
        if (v23)
        {
LABEL_29:
          v37 = v9;
          v29 = v2[3];
          swift_bridgeObjectRetain();
          v30 = v22 + 5;
          while (1)
          {
            if (*(_QWORD *)(v29 + 16))
            {
              v31 = *(v30 - 1);
              v32 = *v30;
              swift_bridgeObjectRetain_n();
              sub_1A39A2734(v31, v32);
              LOBYTE(v31) = v33;
              swift_bridgeObjectRelease_n();
              if ((v31 & 1) != 0)
                break;
            }
            v30 += 2;
            if (!--v23)
            {
              swift_bridgeObjectRelease();
              v2 = v35;
              v9 = v37;
              goto LABEL_36;
            }
          }
          swift_bridgeObjectRelease_n();
          v2 = v35;
          v6 = v36;
          v9 = v37;
          if (v20 != 255)
            goto LABEL_20;
          goto LABEL_37;
        }
      }
    }
    else
    {
      sub_1A39A4820(&qword_1ED1B5468);
      v22 = (_QWORD *)swift_allocObject();
      *((_OWORD *)v22 + 1) = xmmword_1A3ABF990;
      v22[4] = v12;
      v22[5] = v19;
      swift_bridgeObjectRetain();
      v23 = v22[2];
      if (v23)
        goto LABEL_29;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    sub_1A3A204C8(v12, v19, v20);
    v6 = v36;
LABEL_37:
    v8 = v38;
LABEL_5:
    ++v7;
  }
  while (v7 != v6);
  swift_release();
  if ((v39 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (char *)&unk_1E4A98868;
  }
LABEL_41:
  if (!*((_QWORD *)v9 + 2))
  {
    swift_bridgeObjectRelease();
    return (char *)&unk_1E4A988A0;
  }
  return v9;
}

_QWORD *sub_1A3A1AC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16))
  {
    if (*(_BYTE *)(v0 + 16) == 1)
    {
      v3 = swift_bridgeObjectRetain();
      v4 = sub_1A3A203E4(v3);
      sub_1A3A204C8(v2, v1, 1u);
      return v4;
    }
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1A39A4820(&qword_1ED1B5468);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(v6 + 32) = v2;
    *(_QWORD *)(v6 + 40) = v1;
    swift_bridgeObjectRetain();
  }
  return (_QWORD *)v6;
}

_QWORD *sub_1A3A1ACC8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t AssociatedConformanceWitness;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(unint64_t *, _QWORD);
  int *v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t AssociatedTypeWitness;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD v119[2];
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  unint64_t v127;

  v104 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v100 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v99 = (char *)&v96 - v6;
  v105 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v8);
  swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedTypeWitness();
  v97 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v96 - v10;
  v12 = MEMORY[0x1E0DEE9D8];
  v118 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v106 = a1;
  v107 = v7;
  sub_1A3AB4F40();
  v13 = v12;
  sub_1A3AB4B44();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v102 = v11;
  v103 = v9;
  v98 = AssociatedConformanceWitness;
  sub_1A3AB512C();
  if ((v124 & 1) != 0)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v97 + 8))(v102, v103);
    v15 = *(_QWORD *)(v13 + 16);
    v16 = v106;
    if (v15)
    {
      swift_bridgeObjectRetain();
      v17 = v13;
      v18 = (unint64_t *)(v13 + 56);
      while (1)
      {
        v19 = a2;
        v20 = *(v18 - 3);
        v13 = *(v18 - 2);
        v21 = *((unsigned __int8 *)v18 - 8);
        v22 = *v18;
        v23 = v16;
        sub_1A3AB4F4C();
        v24 = v123;
        if (v123 >> 14 < v22 >> 14)
          goto LABEL_131;
        v18 += 5;
        v123 = v20;
        v124 = v13;
        v125 = v21;
        v126 = v22;
        v127 = v24;
        sub_1A3A1C1B4((uint64_t)&v123);
        --v15;
        a2 = v19;
        if (!v15)
        {
          v13 = v17;
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    v21 = (unint64_t)v118;
    v25 = v118[2];
    if (!v25)
    {
      sub_1A3AB4F28();
      v15 = v123;
      sub_1A3AB4F4C();
      v23 = v119[0];
      if (v119[0] >> 14 < v15 >> 14)
        goto LABEL_132;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_133;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  v13 = MEMORY[0x1E0DEE9D8];
  v41 = v123;
  v109 = a2;
LABEL_52:
  v110 = v41;
  v42 = v99;
  v43 = v106;
  v44 = v105;
  sub_1A3AB51A4();
  v119[0] = v110;
  v45 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  v46 = (void (*)(unint64_t *, _QWORD))sub_1A3AB4F88();
  v48 = *v47;
  v46(&v123, 0);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v42, v45);
  v49 = sub_1A3A1A834(v48);
  v50 = sub_1A3A21050((uint64_t)v49);
  v51 = swift_bridgeObjectRelease();
  v15 = (unint64_t)&v96;
  MEMORY[0x1E0C80A78](v51);
  *(&v96 - 6) = a2;
  *(&v96 - 5) = v44;
  v21 = v110;
  *(&v96 - 4) = v50;
  *(&v96 - 3) = (uint64_t)&v118;
  *(&v96 - 2) = v21;
  *(&v96 - 1) = v43;
  swift_bridgeObjectRetain();
  v52 = v104;
  v23 = sub_1A3A1C674((uint64_t)sub_1A3A210F4, (uint64_t)(&v96 - 8), v13);
  v104 = v52;
  swift_bridgeObjectRelease();
  v53 = 0;
  v54 = *(_QWORD *)(v50 + 56);
  v111 = v50 + 56;
  v55 = 1 << *(_BYTE *)(v50 + 32);
  if (v55 < 64)
    v56 = ~(-1 << v55);
  else
    v56 = -1;
  v57 = v56 & v54;
  v112 = (unint64_t)(v55 + 63) >> 6;
  v113 = (_QWORD *)v50;
  v108 = v21 >> 14;
  v13 = v23;
  while (1)
  {
    if (v57)
    {
      v59 = __clz(__rbit64(v57));
      v60 = (v57 - 1) & v57;
      v61 = v59 | (v53 << 6);
    }
    else
    {
      v62 = v53 + 1;
      if (__OFADD__(v53, 1))
        goto LABEL_126;
      if (v62 >= v112)
        goto LABEL_51;
      v63 = *(_QWORD *)(v111 + 8 * v62);
      ++v53;
      if (!v63)
      {
        v53 = v62 + 1;
        if (v62 + 1 >= v112)
          goto LABEL_51;
        v63 = *(_QWORD *)(v111 + 8 * v53);
        if (!v63)
        {
          v53 = v62 + 2;
          if (v62 + 2 >= v112)
            goto LABEL_51;
          v63 = *(_QWORD *)(v111 + 8 * v53);
          if (!v63)
          {
            v64 = v62 + 3;
            if (v64 >= v112)
              goto LABEL_51;
            v63 = *(_QWORD *)(v111 + 8 * v64);
            if (!v63)
            {
              while (1)
              {
                v53 = v64 + 1;
                if (__OFADD__(v64, 1))
                  goto LABEL_130;
                if (v53 >= v112)
                  break;
                v63 = *(_QWORD *)(v111 + 8 * v53);
                ++v64;
                if (v63)
                  goto LABEL_73;
              }
LABEL_51:
              swift_release();
              sub_1A3AB512C();
              v41 = v123;
              if ((v124 & 1) != 0)
                goto LABEL_2;
              goto LABEL_52;
            }
            v53 = v64;
          }
        }
      }
LABEL_73:
      v60 = (v63 - 1) & v63;
      v61 = __clz(__rbit64(v63)) + (v53 << 6);
    }
    v114 = v60;
    v115 = v53;
    v65 = v113[6] + 24 * v61;
    v67 = *(_QWORD *)v65;
    v66 = *(_QWORD *)(v65 + 8);
    v68 = *(unsigned __int8 *)(v65 + 16);
    v69 = *(_QWORD *)(v13 + 16);
    if (v69)
      break;
    sub_1A3A20648(*(_QWORD *)v65, *(_QWORD *)(v65 + 8), *(_BYTE *)(v65 + 16));
LABEL_103:
    v15 = v21;
    if (!*(_QWORD *)(v13 + 16))
    {
      v15 = v21;
      if (!v118[2])
      {
        v23 = v106;
        sub_1A3AB4F28();
        v15 = v123;
        if (v108 < v123 >> 14)
        {
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
          goto LABEL_129;
        }
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = (unint64_t)sub_1A3A2009C(0, *(_QWORD *)(v13 + 16) + 1, 1, (_QWORD *)v13);
    v84 = *(_QWORD *)(v13 + 16);
    v83 = *(_QWORD *)(v13 + 24);
    v23 = v84 + 1;
    if (v84 >= v83 >> 1)
      v13 = (unint64_t)sub_1A3A2009C((_QWORD *)(v83 > 1), v84 + 1, 1, (_QWORD *)v13);
    *(_QWORD *)(v13 + 16) = v23;
    v58 = v13 + 40 * v84;
    *(_QWORD *)(v58 + 32) = v67;
    *(_QWORD *)(v58 + 40) = v66;
    *(_BYTE *)(v58 + 48) = v68;
    *(_QWORD *)(v58 + 56) = v15;
    *(_QWORD *)(v58 + 64) = v21;
LABEL_57:
    v57 = v114;
    v53 = v115;
  }
  sub_1A3A20648(*(_QWORD *)v65, *(_QWORD *)(v65 + 8), *(_BYTE *)(v65 + 16));
  v70 = v68 != 2;
  v71 = v68 == 2;
  if (v66 | v67)
    v71 = 0;
  LODWORD(v116) = v71;
  if (v67 != 1 || v66 != 0)
    v70 = 1;
  LODWORD(v117) = v70;
  swift_bridgeObjectRetain();
  v73 = 0;
  v74 = 64;
  while (1)
  {
    v15 = v13;
    v21 = *(_QWORD *)(v13 + v74 - 32);
    v75 = *(_QWORD *)(v13 + v74 - 24);
    v76 = *(unsigned __int8 *)(v13 + v74 - 16);
    if (!v76)
      break;
    if (v76 != 1)
    {
      if (v21 | v75)
      {
        if ((v117 & 1) == 0)
        {
          v13 = v15;
          v80 = v15 + v74 - 24;
          v85 = (unsigned __int8 *)(v15 + v74 - 16);
          sub_1A3A204C8(v21, v75, 2u);
          v81 = 1;
          v82 = 0;
LABEL_111:
          sub_1A3A204C8(v81, v82, 2u);
          v89 = v75;
          v23 = v80;
          sub_1A3A204C8(v21, v89, 2u);
          swift_bridgeObjectRelease();
          goto LABEL_115;
        }
      }
      else if ((v116 & 1) != 0)
      {
        v13 = v15;
        v80 = v15 + v74 - 24;
        v85 = (unsigned __int8 *)(v15 + v74 - 16);
        sub_1A3A204C8(v21, v75, 2u);
        sub_1A3A204C8(0, 0, 2u);
        v81 = v21;
        v82 = v75;
        goto LABEL_111;
      }
LABEL_84:
      sub_1A3A20648(v67, v66, v68);
      sub_1A3A20648(v21, v75, v76);
      sub_1A3A204C8(v21, v75, v76);
      sub_1A3A204C8(v67, v66, v68);
      goto LABEL_85;
    }
    if (v68 != 1)
      goto LABEL_84;
    sub_1A3A20648(v21, v75, 1u);
    sub_1A3A20648(v21, v75, 1u);
    sub_1A3A20648(v67, v66, 1u);
    sub_1A3A20648(v21, v75, 1u);
    v77 = sub_1A3A1D68C(v21, v67);
    sub_1A3A204C8(v21, v75, 1u);
    sub_1A3A204C8(v67, v66, 1u);
    sub_1A3A204C8(v21, v75, 1u);
    sub_1A3A204C8(v21, v75, 1u);
    if ((v77 & 1) != 0)
    {
      v13 = v15;
      v23 = v15 + v74 - 24;
      v85 = (unsigned __int8 *)(v15 + v74 - 16);
      swift_bridgeObjectRelease();
      v86 = v67;
      v87 = v66;
      v88 = 1;
      goto LABEL_114;
    }
LABEL_85:
    ++v73;
    v74 += 40;
    v13 = v15;
    if (v69 == v73)
    {
      swift_bridgeObjectRelease();
      a2 = v109;
      v21 = v110;
      goto LABEL_103;
    }
  }
  if (v68)
    goto LABEL_84;
  if (v21 != v67 || v75 != v66)
  {
    v79 = sub_1A3AB5654();
    sub_1A3A20648(v67, v66, 0);
    sub_1A3A20648(v21, v75, 0);
    sub_1A3A204C8(v21, v75, 0);
    sub_1A3A204C8(v67, v66, 0);
    if ((v79 & 1) != 0)
    {
      v13 = v15;
      v23 = v15 + v74 - 24;
      v85 = (unsigned __int8 *)(v15 + v74 - 16);
      goto LABEL_113;
    }
    goto LABEL_85;
  }
  v13 = v15;
  v23 = v15 + v74 - 24;
  v85 = (unsigned __int8 *)(v15 + v74 - 16);
  sub_1A3A20648(v67, v66, 0);
  sub_1A3A20648(v67, v66, 0);
  sub_1A3A204C8(v67, v66, 0);
  sub_1A3A204C8(v67, v66, 0);
LABEL_113:
  swift_bridgeObjectRelease();
  v86 = v67;
  v87 = v66;
  v88 = 0;
LABEL_114:
  sub_1A3A204C8(v86, v87, v88);
LABEL_115:
  if (v73 >= *(_QWORD *)(v13 + 16))
    goto LABEL_127;
  v90 = *(_QWORD *)(v13 + v74 - 8);
  if (v108 < v90 >> 14)
    goto LABEL_128;
  v13 = *(_QWORD *)(v13 + v74 - 32);
  v21 = *(_QWORD *)v23;
  v23 = *v85;
  sub_1A3A20648(v13, v21, *v85);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v15 = (unint64_t)sub_1A3A20634((_QWORD *)v15);
  if (v73 < *(_QWORD *)(v15 + 16))
  {
    v91 = (unint64_t *)(v15 + v74);
    v92 = *(_QWORD *)(v15 + v74 - 32);
    v93 = *(_QWORD *)(v15 + v74 - 24);
    *(v91 - 4) = v13;
    *(v91 - 3) = v21;
    v94 = *(_BYTE *)(v15 + v74 - 16);
    *((_BYTE *)v91 - 16) = v23;
    v21 = v110;
    *(v91 - 1) = v90;
    *v91 = v21;
    sub_1A3A204C8(v92, v93, v94);
    v13 = v15;
    a2 = v109;
    goto LABEL_57;
  }
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  v21 = (unint64_t)sub_1A3A2009C(0, *(_QWORD *)(v21 + 16) + 1, 1, (_QWORD *)v21);
LABEL_10:
  v27 = *(_QWORD *)(v21 + 16);
  v26 = *(_QWORD *)(v21 + 24);
  a2 = v27 + 1;
  if (v27 >= v26 >> 1)
    v21 = (unint64_t)sub_1A3A2009C((_QWORD *)(v26 > 1), v27 + 1, 1, (_QWORD *)v21);
  *(_QWORD *)(v21 + 16) = a2;
  v28 = v21 + 40 * v27;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_BYTE *)(v28 + 48) = 2;
  *(_QWORD *)(v28 + 56) = v15;
  *(_QWORD *)(v28 + 64) = v23;
  v25 = v27 + 1;
  v118 = (_QWORD *)v21;
LABEL_13:
  v109 = v13;
  v29 = 0;
  v13 = 0;
  v30 = 0;
  v117 = 40 * v25 + 32;
  v115 = 0;
  v116 = -v25;
  v21 = 255;
  v23 = v25;
  while (2)
  {
    v32 = (_QWORD *)v30;
    v33 = v118;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v33 = sub_1A3A20634(v33);
    v34 = v33[2];
    if (v23 <= v34)
    {
      v113 = v32;
      v35 = v13;
      v114 = v23 - 1;
      v23 = v34 - 1;
      v36 = *(_QWORD *)((char *)v33 + v117 - 40);
      v37 = *(_QWORD *)((char *)v33 + v117 - 32);
      LODWORD(a2) = *((unsigned __int8 *)v33 + v117 - 24);
      v13 = *(_QWORD *)((char *)v33 + v117 - 16);
      v15 = *(_QWORD *)((char *)v33 + v117 - 8);
      memmove((char *)v33 + v117 - 40, (char *)v33 + v117, 40 * (v116 + v34));
      v33[2] = v23;
      v118 = v33;
      if (v21 != 255)
      {
        if (v115 >> 14 < v13 >> 14)
        {
          __break(1u);
          goto LABEL_124;
        }
        v112 = v13;
        v13 = v35;
        if (v21 >= 2u && !(v29 | v35))
        {
          sub_1A3A204C8(v29, v35, 2u);
          sub_1A3A204C8(0, 0, 2u);
          sub_1A3A2067C(v29, v35, v21);
          v29 = v36;
          v13 = v37;
          v23 = v114;
          goto LABEL_46;
        }
        sub_1A3A20648(v29, v35, v21);
        sub_1A3A204C8(v29, v35, v21);
        sub_1A3A204C8(0, 0, 2u);
        v23 = v114;
        if ((_BYTE)v21)
        {
          v38 = v37;
          if (v21 == 1)
          {
            v39 = v36;
            v40 = v15;
            v15 = (unint64_t)v113;
            if ((_DWORD)a2 == 1)
            {
              v111 = v40;
              sub_1A3A20668(v29, v13, v21);
              sub_1A3A20648(v39, v38, 1u);
              sub_1A3A20668(v29, v13, v21);
              sub_1A3A20648(v39, v38, 1u);
              LODWORD(v110) = sub_1A3A1D68C(v29, v39);
              sub_1A3A204C8(v29, v13, 1u);
              sub_1A3A204C8(v39, v38, 1u);
              sub_1A3A204C8(v39, v38, 1u);
              v40 = v111;
              sub_1A3A2067C(v29, v13, v21);
              if ((v110 & 1) != 0)
              {
                sub_1A3A2067C(v29, v13, v21);
                LOBYTE(a2) = 1;
                goto LABEL_45;
              }
LABEL_43:
              sub_1A3A20648(v39, v38, a2);
              sub_1A3A204C8(v39, v38, a2);
              sub_1A3A204C8(0, 0, 2u);
              if (v33[2] < v23)
                goto LABEL_125;
              v123 = v29;
              v124 = v13;
              v125 = v21;
              v126 = v15;
              v127 = v115;
              sub_1A3A204E8(v23, v23, (uint64_t)&v123);
              v115 = v40;
LABEL_45:
              v29 = v39;
              v13 = v38;
LABEL_46:
              v30 = v112;
LABEL_15:
              v21 = a2;
              v31 = __CFADD__(v116++, 1);
              v117 -= 40;
              if (v31)
                goto LABEL_122;
              continue;
            }
          }
          else
          {
            v39 = v36;
            v40 = v15;
            v15 = (unint64_t)v113;
            if (v29 | v13)
            {
              if ((_DWORD)a2 == 2 && v39 == 1 && !v38)
              {
                LOBYTE(a2) = 2;
                sub_1A3A204C8(v29, v13, 2u);
                sub_1A3A204C8(1, 0, 2u);
                sub_1A3A2067C(v29, v13, v21);
                v13 = 0;
                v29 = 1;
                goto LABEL_46;
              }
            }
            else if ((_DWORD)a2 == 2 && !(v38 | v39))
            {
              LOBYTE(a2) = 2;
              sub_1A3A204C8(v29, v13, 2u);
              sub_1A3A204C8(0, 0, 2u);
              sub_1A3A2067C(v29, v13, v21);
              v29 = 0;
              v13 = 0;
              goto LABEL_46;
            }
          }
        }
        else
        {
          v38 = v37;
          v39 = v36;
          v40 = v15;
          v15 = (unint64_t)v113;
          if (!(_DWORD)a2)
          {
            if (v29 == v39 && v13 == v38)
            {
              sub_1A3A20668(v29, v13, v21);
              sub_1A3A20648(v29, v13, 0);
              sub_1A3A204C8(v29, v13, 0);
              sub_1A3A204C8(v29, v13, 0);
            }
            else
            {
              LODWORD(v111) = sub_1A3AB5654();
              sub_1A3A20668(v29, v13, v21);
              sub_1A3A20648(v39, v38, 0);
              sub_1A3A204C8(v29, v13, 0);
              sub_1A3A204C8(v39, v38, 0);
              if ((v111 & 1) == 0)
                goto LABEL_43;
            }
            sub_1A3A2067C(v29, v13, v21);
            LOBYTE(a2) = 0;
            goto LABEL_45;
          }
        }
        sub_1A3A20668(v29, v13, v21);
        sub_1A3A20648(v39, v38, a2);
        sub_1A3A204C8(v29, v13, v21);
        sub_1A3A204C8(v39, v38, a2);
        if (a2 < 2 || v39 | v38)
          goto LABEL_43;
        sub_1A3A204C8(v39, v38, 2u);
        sub_1A3A204C8(0, 0, 2u);
        LOBYTE(a2) = v21;
        goto LABEL_46;
      }
      v115 = v15;
      v29 = v36;
      v23 = v114;
      v30 = v13;
      v13 = v37;
      goto LABEL_15;
    }
    break;
  }
  __break(1u);
LABEL_122:
  v119[0] = v29;
  v119[1] = v13;
  v120 = a2;
  v121 = v30;
  v122 = v115;
  sub_1A3A204E8(0, 0, (uint64_t)v119);
  swift_bridgeObjectRelease();
  return v118;
}

uint64_t sub_1A3A1BD84(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  char v21;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  _BYTE v29[72];

  if (!*(_QWORD *)(a4 + 16))
    return 0;
  sub_1A3AB56FC();
  if (a3)
  {
    sub_1A3AB5708();
    if (a3 == 1)
      sub_1A3A20A34((uint64_t)v29, a1);
  }
  else
  {
    sub_1A3AB5708();
    sub_1A3AB4A30();
  }
  v8 = sub_1A3AB5738();
  v9 = -1 << *(_BYTE *)(a4 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return 0;
  v28 = ~v9;
  v11 = a3 != 2;
  v12 = a3 == 2;
  if (a2 | a1)
    v12 = 0;
  if (a1 != 1 || a2 != 0)
    v11 = 1;
  v26 = v12;
  v27 = v11;
  while (1)
  {
    v14 = *(_QWORD *)(a4 + 48) + 24 * v10;
    v16 = *(_QWORD *)v14;
    v15 = *(_QWORD *)(v14 + 8);
    v17 = *(unsigned __int8 *)(v14 + 16);
    if (!*(_BYTE *)(v14 + 16))
      break;
    if (v17 != 1)
    {
      if (v16 | v15)
      {
        if (!v27)
        {
          sub_1A3A204C8(v16, v15, 2u);
          v18 = 1;
          sub_1A3A204C8(1, 0, 2u);
          return v18;
        }
      }
      else if (v26)
      {
        sub_1A3A204C8(v16, v15, 2u);
        v23 = 0;
        v24 = 0;
        v25 = 2;
        goto LABEL_37;
      }
LABEL_16:
      sub_1A3A20648(v16, v15, v17);
      sub_1A3A20648(a1, a2, a3);
      sub_1A3A204C8(v16, v15, v17);
      sub_1A3A204C8(a1, a2, a3);
      goto LABEL_17;
    }
    if (a3 != 1)
      goto LABEL_16;
    v18 = 1;
    sub_1A3A20648(v16, v15, 1u);
    sub_1A3A20648(v16, v15, 1u);
    sub_1A3A20648(a1, a2, 1u);
    v19 = sub_1A3A1D68C(v16, a1);
    sub_1A3A204C8(v16, v15, 1u);
    sub_1A3A204C8(a1, a2, 1u);
    sub_1A3A204C8(v16, v15, 1u);
    if ((v19 & 1) != 0)
      return v18;
LABEL_17:
    v10 = (v10 + 1) & v28;
    if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      return 0;
  }
  if (a3)
    goto LABEL_16;
  if (v16 != a1 || v15 != a2)
  {
    v21 = sub_1A3AB5654();
    sub_1A3A20648(v16, v15, 0);
    sub_1A3A20648(a1, a2, 0);
    sub_1A3A204C8(v16, v15, 0);
    sub_1A3A204C8(a1, a2, 0);
    if ((v21 & 1) != 0)
      return 1;
    goto LABEL_17;
  }
  sub_1A3A20648(a1, a2, 0);
  sub_1A3A20648(a1, a2, 0);
  sub_1A3A204C8(a1, a2, 0);
  v23 = a1;
  v24 = a2;
  v25 = 0;
LABEL_37:
  sub_1A3A204C8(v23, v24, v25);
  return 1;
}

uint64_t TTSStringTagger.Tag.extendingRangeTo(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;

  v4 = v3;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, v8);
  v13 = *(_QWORD *)(v4 + *(int *)(a2 + 36));
  if (a1 >> 14 < v13 >> 14)
  {
    __break(1u);
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 24);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v11, v8);
    result = type metadata accessor for TTSStringTagger.Tag(0, v8, v14, v15);
    v16 = (unint64_t *)(a3 + *(int *)(result + 36));
    *v16 = v13;
    v16[1] = a1;
  }
  return result;
}

uint64_t sub_1A3A1C1B4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _QWORD v56[2];
  unsigned __int8 v57;
  _QWORD v58[2];
  unsigned __int8 v59;

  v2 = v1;
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v53 = v7;
  v46 = v6;
  v58[0] = v6;
  sub_1A3A20648(v4, v3, v5);
  sub_1A3A20648(v4, v3, v5);
  v49 = sub_1A3AB4904();
  v43 = v3;
  if ((_DWORD)v5 != 2 || (v3 | v4) != 0)
  {
    v9 = *(_QWORD *)(*v1 + 16);
    v44 = v5;
    if (!v9)
    {
LABEL_46:
      v35 = v43;
      sub_1A3A204C8(v4, v43, v5);
      goto LABEL_32;
    }
    v42 = v4;
    v45 = v1;
    v47 = v46 >> 14;
    v10 = 40 * v9 + 32;
    v11 = -v9;
    v2 = (_QWORD *)*v1;
    while (1)
    {
      if (v9 > v2[2])
      {
        __break(1u);
LABEL_41:
        v4 = v42;
        v35 = v43;
        sub_1A3A204C8(v42, v43, v44);
LABEL_30:
        v2 = v45;
        goto LABEL_33;
      }
      v52 = v9;
      v14 = (char *)v2 + v10;
      v5 = *(_QWORD *)((char *)v2 + v10 - 8);
      v48 = v7;
      v7 >>= 14;
      v15 = v5 >> 14;
      if (v7 >= v5 >> 14)
      {
        v4 = v42;
        v35 = v43;
        sub_1A3A204C8(v42, v43, v44);
        v7 = v48;
        v5 = v48;
        goto LABEL_30;
      }
      v50 = v11;
      v51 = v10;
      v4 = (uint64_t)v2;
      v17 = *((_QWORD *)v14 - 5);
      v16 = *((_QWORD *)v14 - 4);
      v18 = *(v14 - 24);
      v19 = *((_QWORD *)v14 - 2);
      v2 = (_QWORD *)(v19 >> 14);
      if (v19 >> 14 == v7 && v15 == v47)
      {
        v58[0] = *((_QWORD *)v14 - 5);
        v58[1] = v16;
        v59 = v18;
        v56[0] = v42;
        v56[1] = v43;
        v57 = v44;
        sub_1A3A20648(v17, v16, v18);
        sub_1A3A1D14C((uint64_t)v58, (uint64_t)v56, (uint64_t)&v53);
        sub_1A3A204C8(v42, v43, v44);
        sub_1A3A204C8(v17, v16, v18);
        sub_1A3A204C8(v42, v43, v44);
        v4 = v53;
        v36 = v54;
        v44 = v55;
        v2 = v1;
        sub_1A3A1C820(v52 - 1, (uint64_t)&v53);
        v35 = v36;
        sub_1A3A204C8(v53, v54, v55);
        v7 = v48;
        goto LABEL_32;
      }
      v53 = *((_QWORD *)v14 - 2);
      v58[0] = v5;
      sub_1A3A20648(v17, v16, v18);
      if (sub_1A3AB4904() >= v49)
        break;
      if ((unint64_t)v2 < v7)
      {
        v7 = v48;
        v21 = v52;
        if ((unint64_t)v2 > v48 >> 14)
          goto LABEL_43;
        v2 = (_QWORD *)v4;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = sub_1A3A20634((_QWORD *)v4);
        v4 = v51;
        if (v52 > v2[2])
          goto LABEL_44;
        v22 = (char *)v2 + v51;
        v23 = *(_QWORD *)((char *)v2 + v51 - 40);
        v24 = *(_QWORD *)((char *)v2 + v51 - 32);
        *((_QWORD *)v22 - 5) = v17;
        *((_QWORD *)v22 - 4) = v16;
        v25 = *((_BYTE *)v2 + v51 - 24);
        *(v22 - 24) = v18;
        *((_QWORD *)v22 - 2) = v19;
        *((_QWORD *)v22 - 1) = v48;
        sub_1A3A204C8(v23, v24, v25);
        *v1 = v2;
        v5 = v48;
LABEL_7:
        v12 = v50;
        goto LABEL_8;
      }
      sub_1A3A204C8(v17, v16, v18);
      v26 = (_QWORD *)v4;
      v7 = v48;
      v21 = v52;
      v12 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v26 = sub_1A3A20634((_QWORD *)v4);
      v4 = v51;
      v27 = v26[2];
      if (v52 > v27)
        goto LABEL_45;
      v28 = (char *)v26 + v51;
      v29 = (_QWORD *)((char *)v26 + v51 - 40);
      v30 = *v29;
      v31 = v26;
      v32 = v27 - 1;
      v33 = *(_QWORD *)((char *)v26 + v51 - 32);
      v34 = *(v28 - 24);
      memmove(v29, v28, 40 * (v50 + v27));
      v31[2] = v32;
      v2 = v31;
      sub_1A3A204C8(v30, v33, v34);
      *v1 = v31;
      v5 = v48;
LABEL_8:
      v10 = v4 - 40;
      v9 = v21 - 1;
      v13 = __CFADD__(v12, 1);
      v11 = v12 + 1;
      if (v13)
        goto LABEL_41;
    }
    sub_1A3A204C8(v17, v16, v18);
    if (v47 < v15)
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v53 = v5;
    v58[0] = v46;
    v49 = sub_1A3AB4904();
    v7 = v5;
    v2 = (_QWORD *)v4;
    v4 = v51;
    v21 = v52;
    goto LABEL_7;
  }
  v4 = 0;
  v35 = 0;
  v44 = 2;
LABEL_32:
  v5 = v7;
LABEL_33:
  if ((v5 ^ v46) < 0x4000)
    return sub_1A3A204C8(v4, v35, v44);
  v38 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1A3A2009C(0, v38[2] + 1, 1, v38);
    v38 = (_QWORD *)result;
  }
  v40 = v38[2];
  v39 = v38[3];
  if (v40 >= v39 >> 1)
  {
    result = (uint64_t)sub_1A3A2009C((_QWORD *)(v39 > 1), v40 + 1, 1, v38);
    v38 = (_QWORD *)result;
  }
  v38[2] = v40 + 1;
  v41 = &v38[5 * v40];
  v41[4] = v4;
  v41[5] = v35;
  *((_BYTE *)v41 + 48) = v44;
  v41[7] = v7;
  v41[8] = v46;
  *v2 = v38;
  return result;
}

uint64_t sub_1A3A1C674(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD v20[2];
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v18 = (uint64_t (*)(_QWORD *))result;
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
    v3 = 0;
    v4 = (_QWORD *)(a3 + 64);
    v5 = MEMORY[0x1E0DEE9D8];
    v16 = a3;
    while (v3 < *(_QWORD *)(a3 + 16))
    {
      v7 = *(v4 - 4);
      v6 = *(v4 - 3);
      v8 = *((_BYTE *)v4 - 16);
      v9 = *(v4 - 1);
      v10 = *v4;
      v20[0] = v7;
      v20[1] = v6;
      v21 = v8;
      v22 = v9;
      v23 = v10;
      sub_1A3A20648(v7, v6, v8);
      v11 = v18(v20);
      if (v19)
      {
        sub_1A3A204C8(v7, v6, v8);
        swift_release();
        goto LABEL_16;
      }
      if ((v11 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v24 = v5;
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1A3A20690(0, *(_QWORD *)(v5 + 16) + 1, 1);
          v5 = v24;
        }
        v13 = *(_QWORD *)(v5 + 16);
        v12 = *(_QWORD *)(v5 + 24);
        v14 = v13 + 1;
        if (v13 >= v12 >> 1)
        {
          result = (uint64_t)sub_1A3A20690((_QWORD *)(v12 > 1), v13 + 1, 1);
          v14 = v13 + 1;
          v5 = v24;
        }
        *(_QWORD *)(v5 + 16) = v14;
        v15 = v5 + 40 * v13;
        *(_QWORD *)(v15 + 32) = v7;
        *(_QWORD *)(v15 + 40) = v6;
        *(_BYTE *)(v15 + 48) = v8;
        *(_QWORD *)(v15 + 56) = v9;
        *(_QWORD *)(v15 + 64) = v10;
      }
      else
      {
        result = sub_1A3A204C8(v7, v6, v8);
      }
      ++v3;
      v4 += 5;
      a3 = v16;
      if (v17 == v3)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_1A3A1C820@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  __int128 v10;
  char v11;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1A3A20634(v5);
    v5 = (_QWORD *)result;
  }
  v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    v8 = v7 - 1;
    v9 = &v5[5 * a1];
    v10 = *((_OWORD *)v9 + 2);
    v9 += 4;
    v11 = *((_BYTE *)v9 + 16);
    *(_OWORD *)a2 = v10;
    *(_BYTE *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v9 + 3);
    result = (uint64_t)memmove(v9, v9 + 5, 40 * (v8 - a1));
    v5[2] = v8;
    *v2 = v5;
  }
  return result;
}

uint64_t sub_1A3A1C8C0(uint64_t a1)
{
  void (*v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v3;

  swift_retain();
  v3 = sub_1A3A213B8(a1, v1);
  swift_release();
  return v3;
}

uint64_t sub_1A3A1C918@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD, _QWORD, _QWORD);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  void (*v92)(_QWORD, _QWORD, _QWORD);
  uint64_t v93;

  v6 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A3AB4520();
  v86 = *(_QWORD *)(v9 - 8);
  v87 = v9;
  MEMORY[0x1E0C80A78](v9);
  v85 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A3AB4424();
  v88 = *(_QWORD *)(v11 - 8);
  v89 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v84 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v83 = (uint64_t)&v65 - v15;
  MEMORY[0x1E0C80A78](v14);
  v82 = (char *)&v65 - v16;
  v17 = sub_1A3AB4538();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(unsigned __int8 *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24);
  v71 = *(_QWORD *)(a1 + 32);
  v70 = v27;
  v69 = v26;
  if (v26)
  {
    v92 = a2;
    if (v26 == 1)
    {
      swift_bridgeObjectRetain_n();
      sub_1A3A204C8(v24, v25, 1u);
      sub_1A3A204C8(1, 0, 2u);
      v28 = swift_bridgeObjectRetain();
      v29 = sub_1A3A203E4(v28);
      sub_1A3A204C8(v24, v25, 1u);
      sub_1A3A204C8(v24, v25, 1u);
      v30 = v29;
    }
    else
    {
      sub_1A3A204C8(v24, v25, 2u);
      sub_1A3A204C8(1, 0, 2u);
      if (v24 | v25)
      {
        sub_1A39A4820(&qword_1EE6D2BD8);
        v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_1A3ABF990;
        sub_1A3AB440C();
        v34 = sub_1A39BED30(v33);
        swift_setDeallocating();
        swift_arrayDestroy();
        result = swift_deallocClassInstance();
        *(_QWORD *)a3 = v24;
        *(_QWORD *)(a3 + 8) = v25;
        *(_BYTE *)(a3 + 16) = 2;
        v36 = v70;
        *(_QWORD *)(a3 + 24) = v34;
        *(_QWORD *)(a3 + 32) = v36;
        *(_QWORD *)(a3 + 40) = v71;
        return result;
      }
      v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    a2 = v92;
    v31 = v30[2];
    if (v31)
      goto LABEL_10;
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_1A3A204C8(v24, v25, 0);
    sub_1A3A204C8(1, 0, 2u);
    sub_1A39A4820(&qword_1ED1B5468);
    v30 = (_QWORD *)swift_allocObject();
    *((_OWORD *)v30 + 1) = xmmword_1A3ABF990;
    v30[4] = v24;
    v30[5] = v25;
    v31 = v30[2];
    if (v31)
    {
LABEL_10:
      v66 = v25;
      v67 = v24;
      v68 = a3;
      v76 = v30 + 4;
      v37 = *((_QWORD *)a2 + 3);
      v65 = v30;
      swift_bridgeObjectRetain();
      v38 = 0;
      v39 = MEMORY[0x1E0DEE9E8];
      v72 = v31;
      v80 = v8;
      v81 = v17;
      v78 = v37;
      v79 = v23;
      do
      {
        v40 = &v76[2 * v38];
        v41 = *v40;
        v42 = v40[1];
        v93 = v39;
        if (*(_QWORD *)(v37 + 16))
        {
          v77 = v38;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43 = sub_1A39A2734(v41, v42);
          if ((v44 & 1) != 0)
          {
            v74 = v42;
            v75 = v39;
            v45 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v43);
            v46 = *(_QWORD *)(v45 + 16);
            v73 = v45;
            if (v46)
            {
              v47 = v45 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
              swift_bridgeObjectRetain();
              v48 = *(void (**)(_QWORD, _QWORD, _QWORD))(v18 + 16);
              v91 = *(_QWORD *)(v18 + 72);
              v92 = v48;
              v48(v23, v47, v17);
              while (1)
              {
                v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
                v90(v23, 0, 1, v17);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v23, 1, v17) == 1)
                  break;
                (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v23, v17);
                v49 = v85;
                sub_1A3AB452C();
                sub_1A3AB44FC();
                (*(void (**)(char *, uint64_t))(v86 + 8))(v49, v87);
                v51 = v88;
                v50 = v89;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v8, 1, v89) == 1)
                {
                  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
                  sub_1A39B11F4((uint64_t)v8, &qword_1ED1B52F0);
                }
                else
                {
                  v52 = v82;
                  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v82, v8, v50);
                  v53 = v84;
                  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v84, v52, v50);
                  v54 = v50;
                  v55 = v20;
                  v56 = v18;
                  v57 = v83;
                  v58 = v53;
                  v37 = v78;
                  sub_1A39BCA58(v83, v58);
                  v59 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
                  v60 = v57;
                  v18 = v56;
                  v20 = v55;
                  v23 = v79;
                  v59(v60, v54);
                  v61 = v52;
                  v62 = v54;
                  v8 = v80;
                  v17 = v81;
                  v59((uint64_t)v61, v62);
                  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
                }
                v47 += v91;
                if (!--v46)
                {
                  v90(v23, 1, 1, v17);
                  break;
                }
                v92(v23, v47, v17);
              }
            }
            else
            {
              swift_bridgeObjectRetain();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v23, 1, 1, v17);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v39 = v93;
            v31 = v72;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v38 = v77;
        }
        ++v38;
      }
      while (v38 != v31);
      swift_bridgeObjectRelease_n();
      a3 = v68;
      v32 = v39;
      v24 = v67;
      v25 = v66;
      goto LABEL_28;
    }
  }
  swift_bridgeObjectRelease();
  v32 = MEMORY[0x1E0DEE9E8];
LABEL_28:
  *(_QWORD *)a3 = v24;
  *(_QWORD *)(a3 + 8) = v25;
  v63 = v69;
  *(_BYTE *)(a3 + 16) = v69;
  *(_QWORD *)(a3 + 24) = v32;
  v64 = v71;
  *(_QWORD *)(a3 + 32) = v70;
  *(_QWORD *)(a3 + 40) = v64;
  return sub_1A3A20648(v24, v25, v63);
}

uint64_t sub_1A3A1CFD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  sub_1A39A19CC(a1, a1[3]);
  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_1A39A19CC(a1, v3);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)v1 + 176))(v5, v3, v4);
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 184))();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t TTSStringTagger.__allocating_init(locales:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_1A3A21510(a1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t TTSStringTagger.init(locales:)(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1A3A21510(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t TTSStringTagger.deinit()
{
  uint64_t v0;

  MEMORY[0x1A859781C](*(_QWORD *)(v0 + 40), -1, -1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TTSStringTagger.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x1A859781C](*(_QWORD *)(v0 + 40), -1, -1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A1D14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 >= 2 && *(_OWORD *)a1 == 0)
  {
    v18 = *(_QWORD *)a1;
    v19 = v4;
  }
  else
  {
    v9 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v10 = *(unsigned __int8 *)(a2 + 16);
    sub_1A3A20648(*(_QWORD *)a1, v4, v6);
    sub_1A3A204C8(v5, v4, v6);
    sub_1A3A204C8(0, 0, 2u);
    if (v10 < 2 || (v9 | v8) != 0)
    {
      sub_1A3A20648(v9, v8, v10);
      sub_1A3A204C8(v9, v8, v10);
      sub_1A3A204C8(0, 0, 2u);
      if (v6)
      {
        if (v6 == 1)
        {
          v12 = swift_bridgeObjectRetain();
          v13 = (uint64_t)sub_1A3A203E4(v12);
          sub_1A3A204C8(v5, v4, 1u);
          if (!v10)
            goto LABEL_17;
LABEL_14:
          if (v10 == 1)
          {
            v14 = swift_bridgeObjectRetain();
            v15 = (uint64_t)sub_1A3A203E4(v14);
            sub_1A3A204C8(v9, v8, 1u);
          }
          else
          {
            sub_1A3A204C8(v9, v8, 2u);
            v15 = MEMORY[0x1E0DEE9D8];
          }
          goto LABEL_19;
        }
        sub_1A3A204C8(v5, v4, 2u);
        v13 = MEMORY[0x1E0DEE9D8];
        if (v10)
          goto LABEL_14;
      }
      else
      {
        sub_1A39A4820(&qword_1ED1B5468);
        v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_1A3ABF990;
        *(_QWORD *)(v13 + 32) = v5;
        *(_QWORD *)(v13 + 40) = v4;
        swift_bridgeObjectRetain();
        if (v10)
          goto LABEL_14;
      }
LABEL_17:
      sub_1A39A4820(&qword_1ED1B5468);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1A3ABF990;
      *(_QWORD *)(v15 + 32) = v9;
      *(_QWORD *)(v15 + 40) = v8;
      swift_bridgeObjectRetain();
LABEL_19:
      sub_1A39BE30C(v15);
      v16 = sub_1A39BEFBC(v13);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a3 = v16;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    v18 = v9;
    v19 = v8;
  }
  sub_1A3A204C8(v18, v19, 2u);
  result = sub_1A3A204C8(0, 0, 2u);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 2;
  return result;
}

uint64_t TTSStringTagger.CombinedScriptLanguageTag.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 24);
  if (*(_BYTE *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 16) == 1)
    {
      sub_1A3AB5708();
      swift_bridgeObjectRetain();
      sub_1A3A20A34((uint64_t)a1, v3);
      sub_1A3A204C8(v3, v4, 1u);
    }
    else
    {
      sub_1A3AB5708();
    }
  }
  else
  {
    sub_1A3AB5708();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    sub_1A3A204C8(v3, v4, 0);
  }
  swift_bridgeObjectRetain();
  sub_1A3A20BC8(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t static TTSStringTagger.CombinedScriptLanguageTag.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t v21;
  unsigned __int8 v22;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v8 == 1)
      {
        sub_1A3A20648(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), 1u);
        sub_1A3A20648(v3, v2, 1u);
        v10 = sub_1A3A1D68C(v3, v7);
        sub_1A3A204C8(v3, v2, 1u);
        v11 = v7;
        v12 = v6;
        v13 = 1;
        goto LABEL_11;
      }
LABEL_27:
      sub_1A3A20648(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v8);
      sub_1A3A20648(v3, v2, v4);
      sub_1A3A204C8(v3, v2, v4);
      sub_1A3A204C8(v7, v6, v8);
      return 0;
    }
    if (v3 | v2)
    {
      if (v8 != 2 || v7 != 1 || v6 != 0)
        goto LABEL_27;
      sub_1A3A204C8(*(_QWORD *)a1, v2, 2u);
      v18 = 1;
    }
    else
    {
      if (v8 != 2 || (v6 | v7) != 0)
        goto LABEL_27;
      sub_1A3A204C8(*(_QWORD *)a1, v2, 2u);
      v18 = 0;
    }
    v21 = 0;
    v22 = 2;
  }
  else
  {
    if (*(_BYTE *)(a2 + 16))
      goto LABEL_27;
    v14 = *(_QWORD *)a1;
    if (v3 != v7 || v2 != v6)
    {
      v10 = sub_1A3AB5654();
      sub_1A3A20648(v7, v6, 0);
      sub_1A3A20648(v3, v2, 0);
      sub_1A3A204C8(v3, v2, 0);
      v11 = v7;
      v12 = v6;
      v13 = 0;
LABEL_11:
      sub_1A3A204C8(v11, v12, v13);
      if ((v10 & 1) != 0)
        return sub_1A3A1D92C(v5, v9);
      return 0;
    }
    sub_1A3A20648(v14, v2, 0);
    sub_1A3A20648(v3, v2, 0);
    sub_1A3A204C8(v3, v2, 0);
    v18 = v3;
    v21 = v2;
    v22 = 0;
  }
  sub_1A3A204C8(v18, v21, v22);
  return sub_1A3A1D92C(v5, v9);
}

uint64_t sub_1A3A1D68C(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_1A3AB56FC();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    v18 = sub_1A3AB5738();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_1A3AB5654() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_1A3AB5654() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1A3A1D92C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = sub_1A3AB4424();
  v40 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v33 - v9;
  result = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v33 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v39 = a2 + 56;
  v33 = (char *)&v33 - v12;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v13, v4);
    sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
    v27 = sub_1A3AB48C8();
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v4);
      return 0;
    }
    v30 = ~v28;
    while (1)
    {
      v26(v7, *(_QWORD *)(a2 + 48) + v29 * v25, v4);
      sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
      v31 = sub_1A3AB494C();
      v32 = *(void (**)(char *, uint64_t))(v40 + 8);
      v32(v7, v4);
      if ((v31 & 1) != 0)
        break;
      v29 = (v29 + 1) & v30;
      if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v32(v10, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v32)(v10, v4);
    v13 = v33;
    a1 = v34;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v20 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v36)
        return 1;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v36)
          return 1;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v20 + 3 >= v36)
            return 1;
          v21 = *(_QWORD *)(v35 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_24:
    v37 = (v21 - 1) & v21;
    v38 = v22;
  }
  v23 = v20 + 4;
  if (v23 >= v36)
    return 1;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t TTSStringTagger.CombinedScriptLanguageTag.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6[4];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  sub_1A3AB56FC();
  if (v3)
  {
    sub_1A3AB5708();
    if (v3 == 1)
    {
      swift_bridgeObjectRetain();
      sub_1A3A20A34((uint64_t)v6, v1);
      sub_1A3A204C8(v1, v2, 1u);
    }
  }
  else
  {
    sub_1A3AB5708();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    sub_1A3A204C8(v1, v2, 0);
  }
  swift_bridgeObjectRetain();
  sub_1A3A20BC8(v6, v4);
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A1DD9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v6[4];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  sub_1A3AB56FC();
  if (v3)
  {
    sub_1A3AB5708();
    if (v3 == 1)
    {
      swift_bridgeObjectRetain();
      sub_1A3A20A34((uint64_t)v6, v1);
      sub_1A3A204C8(v1, v2, 1u);
    }
  }
  else
  {
    sub_1A3AB5708();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    sub_1A3A204C8(v1, v2, 0);
  }
  swift_bridgeObjectRetain();
  sub_1A3A20BC8(v6, v4);
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A1DE90(__int128 *a1, __int128 *a2)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v7;
  char v8;
  __int128 v9;
  char v10;

  v2 = *((_BYTE *)a1 + 16);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *((_BYTE *)a2 + 16);
  v5 = *((_QWORD *)a2 + 3);
  v9 = *a1;
  v10 = v2;
  v7 = *a2;
  v8 = v4;
  if ((_s12TextToSpeech15TTSStringTaggerC9ScriptTagO2eeoiySbAE_AEtFZ_0((uint64_t)&v9, (uint64_t)&v7) & 1) != 0)
    return sub_1A3A1D92C(v3, v5);
  else
    return 0;
}

uint64_t TTSStringTagger.Tag.type.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TTSStringTagger.Tag.range.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t TTSStringTagger.Tag.range.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t (*TTSStringTagger.Tag.range.modify())()
{
  return nullsub_19;
}

BOOL static TTSStringTagger.Tag.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BOOL8 result;

  result = 0;
  if ((sub_1A3AB494C() & 1) != 0)
  {
    v9 = *(int *)(type metadata accessor for TTSStringTagger.Tag(0, a3, a4, v8) + 36);
    v10 = a1 + v9;
    v11 = *(_QWORD *)(a1 + v9);
    v12 = (_QWORD *)(a2 + v9);
    if (!((*v12 ^ v11) >> 14) && (*(_QWORD *)(v10 + 8) ^ v12[1]) < 0x4000)
      return 1;
  }
  return result;
}

BOOL sub_1A3A1DFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TTSStringTagger.Tag.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t TTSStringTagger.ScriptTag.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 16) == 1)
    {
      sub_1A3AB5708();
      return sub_1A3A20A34(a1, v3);
    }
    else
    {
      return sub_1A3AB5708();
    }
  }
  else
  {
    sub_1A3AB5708();
    return sub_1A3AB4A30();
  }
}

uint64_t TTSStringTagger.ScriptTag.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  sub_1A3AB56FC();
  if (v2)
  {
    sub_1A3AB5708();
    if (v2 == 1)
      sub_1A3A20A34((uint64_t)v4, v1);
  }
  else
  {
    sub_1A3AB5708();
    sub_1A3AB4A30();
  }
  return sub_1A3AB5738();
}

uint64_t sub_1A3A1E134()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  sub_1A3AB56FC();
  if (v2)
  {
    sub_1A3AB5708();
    if (v2 == 1)
      sub_1A3A20A34((uint64_t)v4, v1);
  }
  else
  {
    sub_1A3AB5708();
    sub_1A3AB4A30();
  }
  return sub_1A3AB5738();
}

uint64_t sub_1A3A1E1DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 16) == 1)
    {
      sub_1A3AB5708();
      return sub_1A3A20A34(a1, v3);
    }
    else
    {
      return sub_1A3AB5708();
    }
  }
  else
  {
    sub_1A3AB5708();
    return sub_1A3AB4A30();
  }
}

uint64_t sub_1A3A1E27C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  sub_1A3AB56FC();
  if (v2)
  {
    sub_1A3AB5708();
    if (v2 == 1)
      sub_1A3A20A34((uint64_t)v4, v1);
  }
  else
  {
    sub_1A3AB5708();
    sub_1A3AB4A30();
  }
  return sub_1A3AB5738();
}

uint64_t sub_1A3A1E320(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  char v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  _QWORD *v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  _QWORD v39[9];

  v9 = *v4;
  sub_1A3AB56FC();
  v35 = v4;
  if (a4)
  {
    sub_1A3AB5708();
    swift_bridgeObjectRetain();
    if (a4 == 1)
      sub_1A3A20A34((uint64_t)v39, a2);
  }
  else
  {
    sub_1A3AB5708();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
  }
  v10 = sub_1A3AB5738();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  v13 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39[0] = *v35;
    *v35 = 0x8000000000000000;
    sub_1A3A20648(a2, a3, a4);
    sub_1A3A1EAA8(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *v35 = v39[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = a3;
    result = 1;
    *(_BYTE *)(a1 + 16) = a4;
    return result;
  }
  v38 = ~v11;
  v14 = a4 != 2;
  v15 = a4 == 2;
  if (a3 | a2)
    v15 = 0;
  if (a2 != 1 || a3 != 0)
    v14 = 1;
  v36 = v15;
  v37 = v14;
  while (1)
  {
    v17 = v9;
    v18 = *(_QWORD *)(v9 + 48) + 24 * v12;
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v21 = *(unsigned __int8 *)(v18 + 16);
    if (!*(_BYTE *)(v18 + 16))
      break;
    if (v21 != 1)
    {
      if (v20 | v19)
      {
        if (!v37)
        {
          sub_1A3A204C8(v20, v19, 2u);
          v25 = 1;
LABEL_34:
          sub_1A3A204C8(v25, 0, 2u);
          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
      }
      else if (v36)
      {
        sub_1A3A204C8(v20, v19, 2u);
        v25 = 0;
        goto LABEL_34;
      }
LABEL_15:
      sub_1A3A20648(a2, a3, a4);
      sub_1A3A20648(v20, v19, v21);
      sub_1A3A204C8(v20, v19, v21);
      sub_1A3A204C8(a2, a3, a4);
      goto LABEL_16;
    }
    if (a4 != 1)
      goto LABEL_15;
    sub_1A3A20648(v20, v19, 1u);
    sub_1A3A20648(a2, a3, 1u);
    sub_1A3A20648(v20, v19, 1u);
    v22 = sub_1A3A1D68C(v20, a2);
    sub_1A3A204C8(v20, v19, 1u);
    sub_1A3A204C8(a2, a3, 1u);
    sub_1A3A204C8(v20, v19, 1u);
    if ((v22 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v28 = a2;
      v29 = a3;
      v30 = 1;
      goto LABEL_37;
    }
LABEL_16:
    v12 = (v12 + 1) & v38;
    v9 = v17;
    if (((*(_QWORD *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_32;
  }
  if (a4)
    goto LABEL_15;
  if (v20 != a2 || v19 != a3)
  {
    v24 = sub_1A3AB5654();
    sub_1A3A20648(a2, a3, 0);
    sub_1A3A20648(v20, v19, 0);
    sub_1A3A204C8(v20, v19, 0);
    sub_1A3A204C8(a2, a3, 0);
    if ((v24 & 1) != 0)
      goto LABEL_36;
    goto LABEL_16;
  }
  sub_1A3A20648(a2, a3, 0);
  sub_1A3A20648(a2, a3, 0);
  sub_1A3A204C8(a2, a3, 0);
  sub_1A3A204C8(a2, a3, 0);
LABEL_36:
  swift_bridgeObjectRelease();
  v28 = a2;
  v29 = a3;
  v30 = 0;
LABEL_37:
  sub_1A3A204C8(v28, v29, v30);
LABEL_38:
  v31 = *(_QWORD *)(*v35 + 48) + 24 * v12;
  v32 = *(_QWORD *)v31;
  v33 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v31;
  *(_QWORD *)(a1 + 8) = v33;
  v34 = *(_BYTE *)(v31 + 16);
  *(_BYTE *)(a1 + 16) = v34;
  sub_1A3A20648(v32, v33, v34);
  return 0;
}

uint64_t sub_1A3A1E758()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  char v32[72];

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D3938);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v31 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v30 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v15 >= v30)
          goto LABEL_37;
        v16 = v31[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v30)
            goto LABEL_37;
          v16 = v31[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v30)
              goto LABEL_37;
            v16 = v31[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v30)
              {
LABEL_37:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v31[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_43;
                  if (v10 >= v30)
                    goto LABEL_37;
                  v16 = v31[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 24 * v14;
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = *(unsigned __int8 *)(v18 + 16);
      sub_1A3AB56FC();
      if (v21)
      {
        sub_1A3AB5708();
        if (v21 == 1)
          sub_1A3A20A34((uint64_t)v32, v19);
      }
      else
      {
        sub_1A3AB5708();
        sub_1A3AB4A30();
      }
      result = sub_1A3AB5738();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v8 + 8 * v24);
        }
        while (v28 == -1);
        v11 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 24 * v11;
      *(_QWORD *)v12 = v19;
      *(_QWORD *)(v12 + 8) = v20;
      *(_BYTE *)(v12 + 16) = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A3A1EAA8(uint64_t result, uint64_t a2, unsigned __int8 a3, unint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t *v32;
  _BYTE v33[72];

  v11 = result;
  v12 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)v5 + 24);
  if (v13 > v12 && (a5 & 1) != 0)
    goto LABEL_39;
  if ((a5 & 1) != 0)
  {
    sub_1A3A1E758();
  }
  else
  {
    if (v13 > v12)
    {
      result = (uint64_t)sub_1A3A1EE5C();
      goto LABEL_39;
    }
    sub_1A3A1F018();
  }
  v14 = *(_QWORD *)v5;
  sub_1A3AB56FC();
  if (a3)
  {
    sub_1A3AB5708();
    if (a3 == 1)
      sub_1A3A20A34((uint64_t)v33, v11);
  }
  else
  {
    sub_1A3AB5708();
    sub_1A3AB4A30();
  }
  v5 = (uint64_t)v33;
  result = sub_1A3AB5738();
  v15 = -1 << *(_BYTE *)(v14 + 32);
  a4 = result & ~v15;
  if (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v16 = ~v15;
    v17 = a3 != 2;
    v18 = a3 == 2;
    if (a2 | v11)
      v18 = 0;
    if (v11 != 1 || a2 != 0)
      v17 = 1;
    v30 = v18;
    v31 = v17;
    do
    {
      v20 = *(_QWORD *)(v14 + 48) + 24 * a4;
      v6 = *(_QWORD *)v20;
      v5 = *(_QWORD *)(v20 + 8);
      v7 = *(unsigned __int8 *)(v20 + 16);
      if (*(_BYTE *)(v20 + 16))
      {
        if (v7 != 1)
        {
          if (v6 | v5)
          {
            if (!v31)
              goto LABEL_42;
          }
          else if (v30)
          {
            a2 = 0;
            v11 = 0;
            goto LABEL_44;
          }
LABEL_23:
          sub_1A3A20648(v6, v5, v7);
          sub_1A3A20648(v11, a2, a3);
          sub_1A3A204C8(v6, v5, v7);
          result = sub_1A3A204C8(v11, a2, a3);
          goto LABEL_24;
        }
        if (a3 != 1)
          goto LABEL_23;
        sub_1A3A20648(v6, v5, 1u);
        sub_1A3A20648(v6, v5, 1u);
        sub_1A3A20648(v11, a2, 1u);
        LOBYTE(v7) = sub_1A3A1D68C(v6, v11);
        sub_1A3A204C8(v6, v5, 1u);
        sub_1A3A204C8(v11, a2, 1u);
        v21 = v6;
        v22 = v5;
        v23 = 1;
      }
      else
      {
        if (a3)
          goto LABEL_23;
        if (v6 == v11 && v5 == a2)
        {
          sub_1A3A20648(v11, a2, 0);
          sub_1A3A20648(v11, a2, 0);
          v5 = a2;
          v6 = v11;
LABEL_44:
          sub_1A3A204C8(v6, v5, v7);
          sub_1A3A204C8(v11, a2, v7);
LABEL_45:
          result = sub_1A3AB566C();
          __break(1u);
          return result;
        }
        LOBYTE(v7) = sub_1A3AB5654();
        sub_1A3A20648(v6, v5, 0);
        sub_1A3A20648(v11, a2, 0);
        sub_1A3A204C8(v6, v5, 0);
        v21 = v11;
        v22 = a2;
        v23 = 0;
      }
      result = sub_1A3A204C8(v21, v22, v23);
      if ((v7 & 1) != 0)
        goto LABEL_45;
LABEL_24:
      a4 = (a4 + 1) & v16;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_39:
  v25 = *v32;
  *(_QWORD *)(*v32 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v26 = *(_QWORD *)(v25 + 48) + 24 * a4;
  *(_QWORD *)v26 = v11;
  *(_QWORD *)(v26 + 8) = a2;
  *(_BYTE *)(v26 + 16) = a3;
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
    __break(1u);
LABEL_42:
    a2 = 0;
    v11 = 1;
    goto LABEL_44;
  }
  *(_QWORD *)(v25 + 16) = v29;
  return result;
}

void *sub_1A3A1EE5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D3938);
  v2 = *v0;
  v3 = sub_1A3AB5270();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    v21 = *(_BYTE *)(v17 + 16);
    *(_QWORD *)v20 = *(_QWORD *)v17;
    *(_QWORD *)(v20 + 8) = v19;
    *(_BYTE *)(v20 + 16) = v21;
    result = (void *)sub_1A3A20648(v18, v19, v21);
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A3A1F018()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  char v31[72];

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D3938);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_39:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v29 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v30 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v15 >= v30)
      goto LABEL_37;
    v16 = *(_QWORD *)(v29 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v30)
        goto LABEL_37;
      v16 = *(_QWORD *)(v29 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v30)
          goto LABEL_37;
        v16 = *(_QWORD *)(v29 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 24 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(unsigned __int8 *)(v18 + 16);
    sub_1A3AB56FC();
    if (v21)
    {
      sub_1A3AB5708();
      if (v21 == 1)
      {
        swift_bridgeObjectRetain();
        sub_1A3A20A34((uint64_t)v31, v19);
      }
    }
    else
    {
      sub_1A3AB5708();
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
    }
    result = sub_1A3AB5738();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v8 + 8 * v24);
      }
      while (v28 == -1);
      v11 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 24 * v11;
    *(_QWORD *)v12 = v19;
    *(_QWORD *)(v12 + 8) = v20;
    *(_BYTE *)(v12 + 16) = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v30)
  {
LABEL_37:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_39;
  }
  v16 = *(_QWORD *)(v29 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v30)
      goto LABEL_37;
    v16 = *(_QWORD *)(v29 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_1A3A1F340(int a1)
{
  uint64_t v2;

  sub_1A3AB56FC();
  sub_1A3AB5720();
  v2 = sub_1A3AB5738();
  return sub_1A39A4E20(a1, v2);
}

uint64_t sub_1A3A1F398(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D38F8);
  v34 = a2;
  result = sub_1A3AB5498();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_1A3AB56FC();
      sub_1A3AB5720();
      result = sub_1A3AB5738();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A1F67C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D3908);
  v36 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A1F990(uint64_t a1, uint64_t a2, int a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1A3A1F340(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1A3A1FC28();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      result = swift_bridgeObjectRelease();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1A3A1F398(result, a4 & 1);
  result = sub_1A3A1F340(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for UScriptCode();
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t sub_1A3A1FACC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1A39A2734(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1A3A1FDD4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1A3A1F67C(v15, a4 & 1);
  v21 = sub_1A39A2734(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

void *sub_1A3A1FC28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D38F8);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1A3A1FDD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D3908);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1A3A1FF88(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3940);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1A3A2009C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3920);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D3928);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_1A3A201D0(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1ED1B5458);
  v10 = *(_QWORD *)(sub_1A3AB4538() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(sub_1A3AB4538() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

_QWORD *sub_1A3A20344(const void *a1, uint64_t a2)
{
  size_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (!a2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (a2 <= 0)
  {
    v4 = 4 * a2;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D3948);
    v4 = 4 * a2;
    v5 = (_QWORD *)swift_allocObject();
    v6 = j__malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 29;
    v5[2] = a2;
    v5[3] = 2 * (v7 >> 2);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

_QWORD *sub_1A3A203E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1A39A4820(&qword_1ED1B5468);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1A3A20E54((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1A39AE7C4();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1A3A204C8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1A3A204E8(unint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1A3A2009C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[5 * v7 + 4];
  sub_1A39A4820(&qword_1EE6D3928);
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_19;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_25;
  result = v14 + 40;
  v18 = &v5[5 * a2 + 4];
  if ((_QWORD *)(v14 + 40) != v18 || result >= (unint64_t)&v18[5 * v17])
    result = (unint64_t)memmove((void *)result, v18, 40 * v17);
  v19 = v5[2];
  v16 = __OFADD__(v19, v9);
  v20 = v19 + v9;
  if (!v16)
  {
    v5[2] = v20;
LABEL_19:
    v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)v14 = *(_OWORD *)a3;
    *(_OWORD *)(v14 + 16) = v21;
    *(_QWORD *)(v14 + 32) = *(_QWORD *)(a3 + 32);
    *(_QWORD *)v3 = v5;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

_QWORD *sub_1A3A20634(_QWORD *a1)
{
  return sub_1A3A2009C(0, a1[2], 0, a1);
}

uint64_t sub_1A3A20648(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1A3A20668(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_1A3A20648(a1, a2, a3);
  return a1;
}

uint64_t sub_1A3A2067C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_1A3A204C8(a1, a2, a3);
  return a1;
}

_QWORD *sub_1A3A20690(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1A3A206C8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1A3A206AC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1A3A207FC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1A3A206C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3920);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D3928);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_1A3A207FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3910);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D3918);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t sub_1A3A20934(size_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_1A3A201D0(result, v11, 1, v3);
  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = (v3[3] >> 1) - v3[2];
  result = sub_1A3AB4538();
  if (v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v8 = v3[2];
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1A3A20A34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_1A3AB5738();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_1A3AB5708();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_1A3AB56FC();
    swift_bridgeObjectRetain();
    sub_1A3AB4A30();
    v11 = sub_1A3AB5738();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1A3A20BC8(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t result;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = sub_1A3AB4424();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)a1 + 8);
  v12 = a1[1];
  v31 = *a1;
  v32 = v12;
  v13 = a1[2];
  v14 = a1[3];
  v29[1] = a1;
  v33 = v13;
  v34 = v14;
  v35 = v11;
  v29[2] = sub_1A3AB5738();
  v30 = a2;
  v15 = a2 + 56;
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a2 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v22 = 0;
  if (!v18)
    goto LABEL_5;
LABEL_4:
  v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
      goto LABEL_19;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
    v28 = sub_1A3AB48C8();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 ^= v28;
    if (v18)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v22++, 1))
      goto LABEL_21;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    if (!v26)
      break;
LABEL_14:
    v18 = (v26 - 1) & v26;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v19)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
LABEL_19:
    swift_release();
    return sub_1A3AB5708();
  }
  v26 = *(_QWORD *)(v15 + 8 * v27);
  if (v26)
  {
    ++v22;
    goto LABEL_14;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_14;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1A3A20E54(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A3A21050(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8[2];
  unsigned __int8 v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1A3A225A4();
  result = sub_1A3AB4ED4();
  v10 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 48);
    do
    {
      v5 = *((_QWORD *)v4 - 2);
      v6 = *((_QWORD *)v4 - 1);
      v7 = *v4;
      v4 += 24;
      sub_1A3A20648(v5, v6, v7);
      sub_1A3A1E320((uint64_t)v8, v5, v6, v7);
      sub_1A3A204C8(v8[0], v8[1], v9);
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_1A3A210F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  _QWORD v10[2];
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  sub_1A3A20648(*(_QWORD *)a1, v5, v6);
  v8 = sub_1A3A1BD84(v4, v5, v6, v2);
  result = sub_1A3A204C8(v4, v5, v6);
  if ((v8 & 1) != 0)
    return v8 & 1;
  if (v3 >> 14 >= v7 >> 14)
  {
    v10[0] = v4;
    v10[1] = v5;
    v11 = v6;
    v12 = v7;
    v13 = v3;
    sub_1A3A1C1B4((uint64_t)v10);
    return v8 & 1;
  }
  __break(1u);
  return result;
}

uint64_t _s12TextToSpeech15TTSStringTaggerC9ScriptTagO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  char v11;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      if (v3 == v6 && v2 == v5)
        v11 = 1;
      else
        v11 = sub_1A3AB5654();
      sub_1A3A20648(v6, v5, 0);
      sub_1A3A20648(v3, v2, 0);
      sub_1A3A204C8(v3, v2, 0);
      sub_1A3A204C8(v6, v5, 0);
      return v11 & 1;
    }
    goto LABEL_25;
  }
  if (v4 == 1)
  {
    if (v7 == 1)
    {
      sub_1A3A20648(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), 1u);
      sub_1A3A20648(v3, v2, 1u);
      v8 = sub_1A3A1D68C(v3, v6);
      sub_1A3A204C8(v3, v2, 1u);
      sub_1A3A204C8(v6, v5, 1u);
      return v8 & 1;
    }
    goto LABEL_25;
  }
  if (!(v3 | v2))
  {
    if (v7 == 2 && (v5 | v6) == 0)
    {
      sub_1A3A204C8(*(_QWORD *)a1, v2, 2u);
      sub_1A3A204C8(0, 0, 2u);
      v11 = 1;
      return v11 & 1;
    }
    goto LABEL_25;
  }
  if (v7 != 2 || v6 != 1 || v5 != 0)
  {
LABEL_25:
    sub_1A3A20648(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
    sub_1A3A20648(v3, v2, v4);
    sub_1A3A204C8(v3, v2, v4);
    sub_1A3A204C8(v6, v5, v7);
    v11 = 0;
    return v11 & 1;
  }
  sub_1A3A204C8(*(_QWORD *)a1, v2, 2u);
  v11 = 1;
  sub_1A3A204C8(1, 0, 2u);
  return v11 & 1;
}

uint64_t type metadata accessor for TTSStringTagger.Tag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TTSStringTagger.Tag);
}

uint64_t sub_1A3A213B8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  _OWORD *i;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  unsigned __int8 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v28 = MEMORY[0x1E0DEE9D8];
    sub_1A3A206AC(0, v3, 0);
    v4 = v28;
    for (i = (_OWORD *)(a1 + 56); ; i = (_OWORD *)((char *)i + 40))
    {
      v8 = *((_QWORD *)i - 3);
      v9 = *((_QWORD *)i - 2);
      v10 = *((_BYTE *)i - 8);
      v21[0] = v8;
      v21[1] = v9;
      v22 = v10;
      v23 = *i;
      sub_1A3A20648(v8, v9, v10);
      sub_1A3A1C918((uint64_t)v21, a2, (uint64_t)&v24);
      if (v2)
        break;
      sub_1A3A204C8(v8, v9, v10);
      v11 = v24;
      v12 = v25;
      v13 = v26;
      v14 = v27;
      v28 = v4;
      v16 = *(_QWORD *)(v4 + 16);
      v15 = *(_QWORD *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        v19 = v27;
        v20 = v24;
        sub_1A3A206AC((_QWORD *)(v15 > 1), v16 + 1, 1);
        v14 = v19;
        v11 = v20;
        v4 = v28;
      }
      *(_QWORD *)(v4 + 16) = v16 + 1;
      v17 = v4 + 48 * v16;
      *(_OWORD *)(v17 + 32) = v11;
      *(_BYTE *)(v17 + 48) = v12;
      *(_QWORD *)(v17 + 56) = v13;
      *(_OWORD *)(v17 + 64) = v14;
      if (!--v3)
        return v4;
    }
    sub_1A3A204C8(v8, v9, v10);
    swift_release();
  }
  return v4;
}

uint64_t sub_1A3A21510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  size_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  size_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;

  v3 = sub_1A39A4820(&qword_1EE6D3900);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_1A3AB4520();
  v80 = *(_QWORD *)(v84 - 8);
  v6 = MEMORY[0x1E0C80A78](v84);
  v79 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v78 = (char *)&v63 - v8;
  v9 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1A3AB4538();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + 40) = swift_slowAlloc();
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v64 = v1;
    v20 = *(unsigned __int8 *)(v13 + 80);
    v21 = (v20 + 32) & ~v20;
    v22 = a1 + v21;
    v23 = *(_QWORD *)(v13 + 72);
    v83 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v70 = v21;
    v77 = v23;
    v69 = v23 + v21;
    v82 = MEMORY[0x1E0DEE9E0];
    v68 = v20 | 7;
    v67 = xmmword_1A3ABF990;
    v75 = v11;
    v66 = v12;
    v65 = v15;
    v81 = v5;
    v73 = v13;
    v74 = v18;
    v83(v18, a1 + v21, v12);
    while (1)
    {
      v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
      v76(v18, 0, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
      {
        v1 = v64;
        v61 = v82;
        goto LABEL_42;
      }
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
      v24 = v78;
      sub_1A3AB452C();
      sub_1A3AB44FC();
      v25 = *(void (**)(char *, uint64_t))(v80 + 8);
      v25(v24, v84);
      v26 = sub_1A3AB4424();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v26) == 1)
      {
        sub_1A39B11F4((uint64_t)v11, &qword_1ED1B52F0);
        v28 = (uint64_t)v81;
      }
      else
      {
        v29 = sub_1A3AB43F4();
        v30 = v11;
        v31 = v29;
        v33 = v32;
        (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
        if (v31 == 7236963 && v33 == 0xE300000000000000)
        {
          swift_bridgeObjectRelease();
          v28 = (uint64_t)v81;
LABEL_13:
          v35 = v82;
          if (*(_QWORD *)(v82 + 16))
          {
            v36 = sub_1A39A2734(1936613704, 0xE400000000000000);
            v37 = MEMORY[0x1E0DEE9D8];
            if ((v38 & 1) != 0)
            {
              v37 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v36);
              swift_bridgeObjectRetain();
            }
          }
          else
          {
            v37 = MEMORY[0x1E0DEE9D8];
          }
          sub_1A39A4820(&qword_1ED1B5458);
          v39 = swift_allocObject();
          *(_OWORD *)(v39 + 16) = v67;
          v83((char *)(v39 + v70), (uint64_t)v15, v12);
          v85 = v37;
          sub_1A3A20934(v39);
          v40 = v85;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v85 = v35;
          sub_1A3A1FACC(v40, 1936613704, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
          v82 = v85;
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        v34 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        v28 = (uint64_t)v81;
        if ((v34 & 1) != 0)
          goto LABEL_13;
      }
LABEL_18:
      v42 = v79;
      sub_1A3AB452C();
      sub_1A3AB4514();
      v25(v42, v84);
      v43 = sub_1A3AB44A8();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v28, 1, v43) == 1)
      {
        sub_1A39B11F4(v28, &qword_1EE6D3900);
        v18 = v74;
        v11 = v75;
        v13 = v73;
        goto LABEL_4;
      }
      v46 = sub_1A3AB43F4();
      v47 = v45;
      if (v46 != 1936613704 || v45 != 0xE400000000000000)
      {
        if ((sub_1A3AB5654() & 1) != 0)
          goto LABEL_23;
        if (v46 != 1953390920 || v47 != 0xE400000000000000)
        {
          if ((sub_1A3AB5654() & 1) == 0)
          {
            if (v46 == 1869439306 && v47 == 0xE400000000000000)
            {
              v48 = 0xE400000000000000;
              swift_bridgeObjectRelease();
              v49 = 1735287112;
            }
            else
            {
              v48 = 0xE400000000000000;
              v59 = sub_1A3AB5654();
              swift_bridgeObjectRelease();
              v49 = 1735287112;
              if ((v59 & 1) == 0)
              {
                v49 = sub_1A3AB43F4();
                v48 = v60;
              }
            }
            goto LABEL_25;
          }
LABEL_23:
          swift_bridgeObjectRelease();
          v48 = 0xE400000000000000;
          goto LABEL_24;
        }
      }
      v48 = 0xE400000000000000;
      swift_bridgeObjectRelease();
LABEL_24:
      v49 = 1768841544;
LABEL_25:
      (*(void (**)(char *, uint64_t))(v44 + 8))(v81, v43);
      v50 = v82;
      v51 = *(_QWORD *)(v82 + 16);
      v71 = v19;
      v72 = v49;
      if (v51)
      {
        swift_bridgeObjectRetain();
        v52 = v50;
        v53 = sub_1A39A2734(v49, v48);
        v54 = MEMORY[0x1E0DEE9D8];
        if ((v55 & 1) != 0)
        {
          v54 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v52 = v82;
        v54 = MEMORY[0x1E0DEE9D8];
      }
      v13 = v73;
      sub_1A39A4820(&qword_1ED1B5458);
      v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = v67;
      v15 = v65;
      v12 = v66;
      v83((char *)(v56 + v70), (uint64_t)v65, v66);
      v85 = v54;
      sub_1A3A20934(v56);
      v57 = v85;
      v58 = swift_isUniquelyReferenced_nonNull_native();
      v85 = v52;
      sub_1A3A1FACC(v57, v72, v48, v58);
      v82 = v85;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = v74;
      v11 = v75;
      v19 = v71;
LABEL_4:
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      v22 += v77;
      if (!--v19)
      {
        v1 = v64;
        v61 = v82;
        v76(v18, 1, 1, v12);
        goto LABEL_42;
      }
      v83(v18, v22, v12);
    }
  }
  v61 = MEMORY[0x1E0DEE9E0];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v18, 1, 1, v12);
LABEL_42:
  *(_QWORD *)(v1 + 24) = v61;
  return v1;
}

uint64_t sub_1A3A21C60()
{
  return sub_1A39B9F44(&qword_1EE6D38D8, (uint64_t (*)(uint64_t))type metadata accessor for UScriptCode, (uint64_t)&unk_1A3AC3FFC);
}

void type metadata accessor for UScriptCode()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE6D38F0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EE6D38F0);
  }
}

unint64_t sub_1A3A21CE4()
{
  unint64_t result;

  result = qword_1EE6D38E0;
  if (!qword_1EE6D38E0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSStringTagger.CombinedScriptLanguageTag, &type metadata for TTSStringTagger.CombinedScriptLanguageTag);
    atomic_store(result, (unint64_t *)&qword_1EE6D38E0);
  }
  return result;
}

unint64_t sub_1A3A21D2C()
{
  unint64_t result;

  result = qword_1EE6D38E8;
  if (!qword_1EE6D38E8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSStringTagger.ScriptTag, &type metadata for TTSStringTagger.ScriptTag);
    atomic_store(result, (unint64_t *)&qword_1EE6D38E8);
  }
  return result;
}

uint64_t type metadata accessor for TTSStringTagger()
{
  return objc_opt_self();
}

uint64_t method lookup function for TTSStringTagger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSStringTagger.allowUnsupportedScripts.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of TTSStringTagger.allowUnsupportedScripts.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of TTSStringTagger.allowUnsupportedScripts.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of TTSStringTagger.scriptTags<A>(forString:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of TTSStringTagger.possibleLanguageTags<A>(forScriptTags:string:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of TTSStringTagger.possibleLanguageTags(forString:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of TTSStringTagger.__allocating_init(locales:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t destroy for TTSStringTagger.CombinedScriptLanguageTag(uint64_t a1)
{
  sub_1A3A204C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TTSStringTagger.CombinedScriptLanguageTag(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1A3A20648(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TTSStringTagger.CombinedScriptLanguageTag(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1A3A20648(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_1A3A204C8(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TTSStringTagger.CombinedScriptLanguageTag(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_1A3A204C8(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TTSStringTagger.CombinedScriptLanguageTag(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTSStringTagger.CombinedScriptLanguageTag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSStringTagger.CombinedScriptLanguageTag()
{
  return &type metadata for TTSStringTagger.CombinedScriptLanguageTag;
}

uint64_t sub_1A3A21FE0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1A3A22054(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_1A3A22104(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1A3A22114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1A3A22170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_1A3A221D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1A3A22230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_1A3A22294(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1A3A22304 + 4 * byte_1A3AC3DB0[v8]))();
}

void sub_1A3A2235C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1A3A22444()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1A3A2244C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1A3A22454);
}

void sub_1A3A22470()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1A3A22478()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1A3A22480(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x1A3A22488);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t destroy for TTSStringTagger.ScriptTag(uint64_t a1)
{
  return sub_1A3A204C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12TextToSpeech15TTSStringTaggerC9ScriptTagOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A3A20648(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TTSStringTagger.ScriptTag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A3A20648(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A3A204C8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TTSStringTagger.ScriptTag(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A3A204C8(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for TTSStringTagger.ScriptTag()
{
  return &type metadata for TTSStringTagger.ScriptTag;
}

unint64_t sub_1A3A225A4()
{
  unint64_t result;

  result = qword_1EE6D3930;
  if (!qword_1EE6D3930)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSStringTagger.ScriptTag, &type metadata for TTSStringTagger.ScriptTag);
    atomic_store(result, (unint64_t *)&qword_1EE6D3930);
  }
  return result;
}

double sub_1A3A225E8@<D0>(uint64_t a1@<X8>)
{
  return TTSMarkupSpeech.content.getter(a1);
}

double TTSMarkupSpeech.content.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t TTSMarkupSpeech.startingTag.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v5[3];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 8))(v5);
  SSMLTag.rawValue.getter();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  TTSMarkupSpeech.attributeText.getter(a1, a2);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 24))(v5, a1, a2);
  sub_1A39BFB74((uint64_t)v5);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  return 60;
}

uint64_t TTSMarkupSpeech.endingTag.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  _QWORD v7[5];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 24))(v7);
  v4 = v7[3];
  sub_1A39BFB74((uint64_t)v7);
  if (!v4)
    return 0;
  v7[0] = 12092;
  v7[1] = 0xE200000000000000;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a2 + 8))(&v6, a1, a2);
  SSMLTag.rawValue.getter();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  return v7[0];
}

uint64_t TTSMarkupSpeech.ssml.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(void))(a2 + 32))();
  TTSMarkupSpeech.contentSSML.getter(a1, a2);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1A3A22844()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t TTSMarkupSpeech.eventTaps.getter()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1A3A2285C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  nullsub_19(a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t TTSMarkupSpeech.eventTaps.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  nullsub_19(a2, a3);
  return swift_bridgeObjectRelease();
}

void (*sub_1A3A228B4(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TTSMarkupSpeech.eventTaps.modify(v2);
  return sub_1A39C2B84;
}

uint64_t (*TTSMarkupSpeech.eventTaps.modify(_QWORD *a1))()
{
  *a1 = MEMORY[0x1E0DEE9D8];
  return destroy for SpeechError;
}

uint64_t destroy for SpeechError()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A22914(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A3A238F0(a1, a2, a5, a6);
}

uint64_t TTSMarkupSpeech.handle(event:breadcrumb:ssml:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1A3A238F0(a1, a2, a5, a6);
}

void sub_1A3A2292C(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1A3A2293C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return nullsub_19(*(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t TTSMarkupSpeech.tap(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t (*v12)(_BYTE *, _QWORD);
  _QWORD **v13;
  _QWORD *v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _BYTE v21[32];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v5);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 72);
  swift_retain();
  v12 = (uint64_t (*)(_BYTE *, _QWORD))v11(v21, a3, a4);
  v14 = v13;
  v15 = *v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_1A3A236E8(0, v15[2] + 1, 1, v15);
    *v14 = v15;
  }
  v18 = v15[2];
  v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    v15 = sub_1A3A236E8((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
    *v14 = v15;
  }
  v15[2] = v18 + 1;
  v19 = &v15[2 * v18];
  v19[4] = sub_1A39A9090;
  v19[5] = v10;
  return v12(v21, 0);
}

void TTSMarkupSpeech.init(ssml:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v19 = a2;
  v6 = sub_1A3AB50FC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - v8;
  type metadata accessor for SSMLParser();
  v10 = static SSMLParser.parseRootElement(ssml:)();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    v11 = a3;
    v12 = v19;
    sub_1A39D518C((uint64_t)&v20);
    sub_1A39A4820(&qword_1EE6D2B60);
    v13 = swift_dynamicCast();
    v14 = *(_QWORD *)(a1 - 8);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    if ((v13 & 1) != 0)
    {
      v15(v9, 0, 1, a1);

      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v11, v9, a1);
    }
    else
    {
      v15(v9, 1, 1, a1);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v20 = 0;
      v21 = 0xE000000000000000;
      sub_1A3AB52AC();
      swift_bridgeObjectRelease();
      v20 = 0xD000000000000026;
      v21 = 0x80000001A3AF1700;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v22, a1, v12);
      SSMLTag.rawValue.getter();
      sub_1A3AB4A84();
      swift_bridgeObjectRelease();
      v16 = v20;
      v17 = v21;
      sub_1A39A8E44();
      swift_allocError();
      *v18 = v16;
      v18[1] = v17;
      swift_willThrow();

    }
  }
}

uint64_t Array<A>.init(_:)(void *a1)
{

  return 0;
}

void static Array<A>.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

unint64_t Array<A>.attributes.getter()
{
  return sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
}

uint64_t Array<A>.ssml.getter(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1A39AE488(0, v1, 0);
    v4 = a1 + 32;
    v2 = v18;
    do
    {
      sub_1A39A1AD0(v4, (uint64_t)v15);
      v5 = v16;
      v6 = v17;
      sub_1A39A19CC(v15, v16);
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v5, v6);
      v9 = v8;
      sub_1A39A47C4((uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1A39AE488(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v18;
      }
      v11 = *(_QWORD *)(v2 + 16);
      v10 = *(_QWORD *)(v2 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_1A39AE488((char *)(v10 > 1), v11 + 1, 1);
        v2 = v18;
      }
      *(_QWORD *)(v2 + 16) = v11 + 1;
      v12 = v2 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  v15[0] = v2;
  sub_1A39A4820(&qword_1EE6D2380);
  sub_1A39AB5D8();
  v13 = sub_1A3AB4910();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1A3A22E2C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1A39AE488(0, v1, 0);
  v2 = v27;
  result = sub_1A39FF4BC(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v21 = v1;
  v22 = v5;
  v23 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v24 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v25 = *v12;
    v26 = v12[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v27 + 16);
    v14 = *(_QWORD *)(v27 + 24);
    if (v13 >= v14 >> 1)
      result = (uint64_t)sub_1A39AE488((char *)(v14 > 1), v13 + 1, 1);
    *(_QWORD *)(v27 + 16) = v13 + 1;
    v15 = v27 + 16 * v13;
    *(_QWORD *)(v15 + 32) = v25;
    *(_QWORD *)(v15 + 40) = v26;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v16 = *(_QWORD *)(v23 + 8 * v11);
    if ((v16 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v22;
    if (*(_DWORD *)(a1 + 36) != v22)
      goto LABEL_27;
    v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      v9 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v21;
    }
    else
    {
      v18 = v11 + 1;
      v19 = (unint64_t)(v9 + 63) >> 6;
      v10 = v21;
      if (v11 + 1 < v19)
      {
        v20 = *(_QWORD *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v9 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v11)
          {
            v20 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v20)
            {
              v18 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v24 + 1;
    v6 = v9;
    if (v24 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t Array<A>.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a2, a3, a4);
}

uint64_t Array<A>.init(ssml:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;
  _QWORD *v3;

  type metadata accessor for SSMLParser();
  v1 = static SSMLParser.parse(ssml:)();
  result = swift_bridgeObjectRelease();
  if (!v0)
  {
    v3 = sub_1A3A2315C(v1);
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  return result;
}

_QWORD *sub_1A3A2315C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14[2];
  uint64_t v15;

  v2 = v1;
  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_1A3AB5480())
  {
    v15 = v2;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    for (i = 4; ; ++i)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A85960B8](i - 4, a1) : *(id *)(a1 + 8 * i);
      v8 = v7;
      v2 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      sub_1A39D518C((uint64_t)&v12);

      if (v13)
      {
        sub_1A39A1AB8(&v12, (uint64_t)v14);
        sub_1A39A1AB8(v14, (uint64_t)&v12);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = sub_1A39BFBD8(0, v5[2] + 1, 1, v5);
        v10 = v5[2];
        v9 = v5[3];
        if (v10 >= v9 >> 1)
          v5 = sub_1A39BFBD8((_QWORD *)(v9 > 1), v10 + 1, 1, v5);
        v5[2] = v10 + 1;
        sub_1A39A1AB8(&v12, (uint64_t)&v5[5 * v10 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v12);
      }
      if (v2 == v4)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

void sub_1A3A23310(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

double sub_1A3A2331C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1A3A2332C()
{
  SSMLTag.rawValue.getter();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3A23808();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  sub_1A3AB4A84();
  return 60;
}

uint64_t sub_1A3A233B8()
{
  uint64_t *v0;

  return Array<A>.ssml.getter(*v0);
}

uint64_t (*sub_1A3A233C4(_QWORD *a1))()
{
  *a1 = MEMORY[0x1E0DEE9D8];
  return j__s12TextToSpeech11SpeechErrorOwxx;
}

uint64_t sub_1A3A233E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.accept<A>(_:)(a1, *v3, a2, a3);
}

void sub_1A3A233F0(void *a1@<X0>, _QWORD *a2@<X8>)
{

  *a2 = 0;
}

uint64_t TTSMarkupSpeech.ssmlTag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t TTSMarkupSpeech.attributeText.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (*(uint64_t (**)(void))(a2 + 16))();
  sub_1A3A22E2C(v2);
  swift_bridgeObjectRelease();
  sub_1A39A4820(&qword_1EE6D2380);
  sub_1A39AB5D8();
  v3 = sub_1A3AB4910();
  v5 = v4;
  swift_bridgeObjectRelease();
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    return 32;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

BOOL TTSMarkupSpeech.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _QWORD v4[5];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 24))(v4);
  v2 = v4[3] == 0;
  sub_1A39BFB74((uint64_t)v4);
  return v2;
}

uint64_t TTSMarkupSpeech.contentSSML.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD *__return_ptr))(a2 + 24))(v5);
  v2 = v6;
  if (v6)
  {
    v3 = v7;
    sub_1A39A19CC(v5, v6);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
    sub_1A39A47C4((uint64_t)v5);
  }
  else
  {
    sub_1A39BFB74((uint64_t)v5);
  }
  return v2;
}

uint64_t TTSMarkupSpeech.asSSML.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

Swift::String __swiftcall TTSMarkupSpeech.asPlainText()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Swift::String result;
  uint64_t v18[6];

  v3 = v1;
  v4 = v0;
  type metadata accessor for StringStream();
  v5 = StringStream.__allocating_init()();
  sub_1A39A4820(&qword_1EE6D3960);
  v18[0] = v5;
  swift_retain();
  v6 = FormattedStream.__allocating_init(_:)((uint64_t)v18);
  v8 = nullsub_19(v6, v7);
  v18[4] = v3;
  v18[5] = v8;
  v18[3] = v4;
  v9 = sub_1A39B1230(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v9, v2, v4);
  v10 = sub_1A39A4820(&qword_1EE6D3968);
  TTSMarkupVisitor.visit(_:)(v18, v10, (uint64_t)&off_1E4A990D8);
  v11 = sub_1A39A47C4((uint64_t)v18);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v11);
  v14 = v13;
  swift_release();
  swift_release();
  v15 = v12;
  v16 = v14;
  result._object = v16;
  result._countAndFlagsBits = v15;
  return result;
}

_QWORD *sub_1A3A236E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3970);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D09F8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A3A23808()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  sub_1A3A22E2C(v0);
  swift_bridgeObjectRelease();
  sub_1A39A4820(&qword_1EE6D2380);
  sub_1A39AB5D8();
  v1 = sub_1A3AB4910();
  v3 = v2;
  swift_bridgeObjectRelease();
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    return 32;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_1A3A238F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  _QWORD v13[4];

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 40;
    do
    {
      v11 = *(void (**)(_QWORD *))(v10 - 8);
      v13[0] = v4;
      v13[1] = v5;
      v13[2] = v6;
      v13[3] = v7;
      swift_retain();
      v11(v13);
      swift_release();
      v10 += 16;
      --v9;
    }
    while (v9);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A2398C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A239B0()
{
  return 16;
}

__n128 sub_1A3A239BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static TTSMarkupSpeech.tag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.attributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.content.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.startingTag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.endingTag.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.ssml.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.eventTaps.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.eventTaps.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.eventTaps.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of TTSMarkupSpeech.handle(event:breadcrumb:ssml:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

void *sub_1A3A23A2C()
{
  return &unk_1A3AC4074;
}

float TTSSSEParamValueUnset.getter()
{
  return -424240.0;
}

uint64_t TTSSSEParamCustomUnit.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t TTSSSEParamCustomUnit.rawValue.getter()
{
  return 5066839;
}

uint64_t sub_1A3A23AAC()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A23AF4()
{
  return sub_1A3AB4A30();
}

uint64_t sub_1A3A23B04()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A23B48@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1A3A23B98(_QWORD *a1@<X8>)
{
  *a1 = 5066839;
  a1[1] = 0xE300000000000000;
}

uint64_t TTSExtendedParameterInfo.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSExtendedParameterInfo.footerText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

TextToSpeech::TTSExtendedParameterInfo __swiftcall TTSExtendedParameterInfo.init(name:footerText:)(Swift::String name, Swift::String_optional footerText)
{
  Swift::String_optional *v2;
  TextToSpeech::TTSExtendedParameterInfo result;

  v2->value = name;
  v2[1] = footerText;
  result.footerText = footerText;
  result.name = name;
  return result;
}

uint64_t sub_1A3A23C10()
{
  _BYTE *v0;

  if (*v0)
    return 0x65547265746F6F66;
  else
    return 1701667182;
}

uint64_t sub_1A3A23C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A248D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A23C6C()
{
  sub_1A3A23DF0();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A23C94()
{
  sub_1A3A23DF0();
  return sub_1A3AB5798();
}

uint64_t TTSExtendedParameterInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  char v11;
  char v12;

  v4 = sub_1A39A4820(&qword_1EE6D17E8);
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v9[1] = *(_QWORD *)(v1 + 24);
  v9[2] = v7;
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A23DF0();
  sub_1A3AB5780();
  v12 = 0;
  sub_1A3AB55AC();
  if (!v2)
  {
    v11 = 1;
    sub_1A3AB5594();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

unint64_t sub_1A3A23DF0()
{
  unint64_t result;

  result = qword_1EE6D4BA0[0];
  if (!qword_1EE6D4BA0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC427C, &type metadata for TTSExtendedParameterInfo.CodingKeys);
    atomic_store(result, qword_1EE6D4BA0);
  }
  return result;
}

uint64_t TTSExtendedParameterInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v5 = sub_1A39A4820(&qword_1EE6D3978);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A23DF0();
  sub_1A3AB5774();
  if (v2)
    return sub_1A39A47C4((uint64_t)a1);
  v20 = 0;
  v9 = sub_1A3AB551C();
  v11 = v10;
  v19 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1A3AB5504();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16 = v12;
  v15(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v16;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  sub_1A39A47C4((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A23FD4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TTSExtendedParameterInfo.init(from:)(a1, a2);
}

uint64_t sub_1A3A23FE8(_QWORD *a1)
{
  return TTSExtendedParameterInfo.encode(to:)(a1);
}

__n128 AUParameter.ttsExtendedInfo.getter@<Q0>(__n128 *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 result;
  _QWORD v18[4];
  __n128 v19;

  v2 = v1;
  v4 = sub_1A3AB49D0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v2, sel_displayName);
  sub_1A3AB497C();

  sub_1A3AB49C4();
  v9 = sub_1A3AB4988();
  v11 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v11 >> 60 == 15)
  {
    v12 = objc_msgSend(v2, sel_displayName);
    v13 = sub_1A3AB497C();
    v15 = v14;

    a1->n128_u64[0] = v13;
    a1->n128_u64[1] = v15;
    a1[1].n128_u64[0] = 0;
    a1[1].n128_u64[1] = 0;
  }
  else
  {
    sub_1A3AB422C();
    swift_allocObject();
    sub_1A3AB4220();
    sub_1A3A241B0();
    sub_1A3AB4214();
    sub_1A3A18414(v9, v11);
    swift_release();
    v16 = v18[3];
    result = v19;
    a1->n128_u64[0] = v18[2];
    a1->n128_u64[1] = v16;
    a1[1] = result;
  }
  return result;
}

unint64_t sub_1A3A241B0()
{
  unint64_t result;

  result = qword_1EE6D3980;
  if (!qword_1EE6D3980)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSExtendedParameterInfo, &type metadata for TTSExtendedParameterInfo);
    atomic_store(result, (unint64_t *)&qword_1EE6D3980);
  }
  return result;
}

id static AUParameterTree.ttsCreateParameter(withIdentifier:name:address:min:max:unit:unitName:valueStrings:dependentParameters:footerText:)(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  id v29;

  v16 = sub_1A3AB49D0();
  MEMORY[0x1E0C80A78](v16);
  sub_1A3AB4250();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A3AB4244();
  sub_1A3A2445C();
  v17 = sub_1A3AB4238();
  v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1A3AB49C4();
  sub_1A3AB4994();
  v21 = v20;
  sub_1A3A0E3AC(v17, v19);
  if (!v21)
    swift_bridgeObjectRetain();
  v22 = a11;
  v23 = (void *)sub_1A3AB4958();
  v24 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  if (a10)
    a10 = (void *)sub_1A3AB4958();
  v25 = a12;
  if (a11)
    v22 = (void *)sub_1A3AB4BA4();
  if (a12)
  {
    sub_1A39AE734();
    v25 = (void *)sub_1A3AB4BA4();
  }
  v26 = (void *)objc_opt_self();
  *(float *)&v27 = a1;
  *(float *)&v28 = a2;
  v29 = objc_msgSend(v26, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v23, v24, a7, a8, a10, 0, v27, v28, v22, v25);

  return v29;
}

unint64_t sub_1A3A2445C()
{
  unint64_t result;

  result = qword_1EE6D0A00;
  if (!qword_1EE6D0A00)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSExtendedParameterInfo, &type metadata for TTSExtendedParameterInfo);
    atomic_store(result, (unint64_t *)&qword_1EE6D0A00);
  }
  return result;
}

unint64_t sub_1A3A244A4()
{
  unint64_t result;

  result = qword_1EE6D3988;
  if (!qword_1EE6D3988)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSSEParamCustomUnit, &type metadata for TTSSSEParamCustomUnit);
    atomic_store(result, (unint64_t *)&qword_1EE6D3988);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TTSSSEParamCustomUnit(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A3A24528 + 4 * byte_1A3AC4060[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A3A24548 + 4 * byte_1A3AC4065[v4]))();
}

_BYTE *sub_1A3A24528(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A3A24548(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A3A24550(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A3A24558(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A3A24560(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A3A24568(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TTSSSEParamCustomUnit()
{
  return &type metadata for TTSSSEParamCustomUnit;
}

uint64_t destroy for TTSExtendedParameterInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TTSExtendedParameterInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TTSExtendedParameterInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TTSExtendedParameterInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TTSExtendedParameterInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TTSExtendedParameterInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSExtendedParameterInfo()
{
  return &type metadata for TTSExtendedParameterInfo;
}

uint64_t storeEnumTagSinglePayload for TTSExtendedParameterInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A3A2477C + 4 * byte_1A3AC406F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A3A247B0 + 4 * byte_1A3AC406A[v4]))();
}

uint64_t sub_1A3A247B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A247B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A247C0);
  return result;
}

uint64_t sub_1A3A247CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A247D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A3A247D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A247E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSExtendedParameterInfo.CodingKeys()
{
  return &type metadata for TTSExtendedParameterInfo.CodingKeys;
}

unint64_t sub_1A3A24800()
{
  unint64_t result;

  result = qword_1EE6DD200[0];
  if (!qword_1EE6DD200[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4254, &type metadata for TTSExtendedParameterInfo.CodingKeys);
    atomic_store(result, qword_1EE6DD200);
  }
  return result;
}

unint64_t sub_1A3A24848()
{
  unint64_t result;

  result = qword_1EE6D4BC0[0];
  if (!qword_1EE6D4BC0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC41C4, &type metadata for TTSExtendedParameterInfo.CodingKeys);
    atomic_store(result, qword_1EE6D4BC0);
  }
  return result;
}

unint64_t sub_1A3A24890()
{
  unint64_t result;

  result = qword_1EE6D4BB8;
  if (!qword_1EE6D4BB8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC41EC, &type metadata for TTSExtendedParameterInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6D4BB8);
  }
  return result;
}

uint64_t sub_1A3A248D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65547265746F6F66 && a2 == 0xEA00000000007478)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t TTSSpeechEvent.description.getter()
{
  uint64_t v0;

  sub_1A3A24A18(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return sub_1A3AB49E8();
}

uint64_t sub_1A3A24A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  result = a2;
  switch(a9)
  {
    case 0:
    case 4:
      goto LABEL_4;
    case 1:
    case 5:
      goto LABEL_3;
    case 2:
    case 3:
      swift_bridgeObjectRetain();
LABEL_3:
      swift_bridgeObjectRetain();
LABEL_4:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void TTSSpeechEvent.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A24AFC()
{
  sub_1A3AB5708();
  return sub_1A3AB4A30();
}

uint64_t sub_1A3A24BEC()
{
  uint64_t v0;

  sub_1A3AB5708();
  sub_1A3AB4A30();
  if (!v0)
    return sub_1A3AB5714();
  sub_1A3AB5714();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A24D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2C868(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_1A3A24DC8()
{
  sub_1A3A2C04C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A24DF0()
{
  sub_1A3A2C04C();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A24E18(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1A3A24E50 + 4 * byte_1A3AC42E0[a1]))(0xD000000000000010, 0x80000001A3AF1910);
}

uint64_t sub_1A3A24E50()
{
  return 0x696F506B63656863;
}

uint64_t sub_1A3A24E70()
{
  return 0x65756575716E65;
}

uint64_t sub_1A3A24E88()
{
  return 0x72776552656C7572;
}

uint64_t sub_1A3A24EA8()
{
  return 0x776552726568746FLL;
}

uint64_t sub_1A3A24EC8()
{
  return 0x7472617473;
}

uint64_t sub_1A3A24EDC()
{
  return 0x696C537472617473;
}

uint64_t sub_1A3A24EF8()
{
  return 0x6573756170;
}

uint64_t sub_1A3A24F0C()
{
  return 0x656D75736572;
}

uint64_t sub_1A3A24F20()
{
  return 1886352499;
}

uint64_t sub_1A3A24F30()
{
  return 0x64656873696E6966;
}

uint64_t sub_1A3A24F48(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_1A3A24FD4(char a1)
{
  if ((a1 & 1) != 0)
    return 28532;
  else
    return 1836020326;
}

uint64_t sub_1A3A24FF8(char a1)
{
  return qword_1A3AC5868[a1];
}

uint64_t sub_1A3A25018(char a1)
{
  return *(_QWORD *)&aOriginalreplac[8 * a1];
}

uint64_t sub_1A3A25038(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6563696F76;
  else
    return 0x6563696C73;
}

uint64_t sub_1A3A25058()
{
  unsigned __int8 *v0;

  return sub_1A3A24E18(*v0);
}

uint64_t sub_1A3A25060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2C144(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A3A25084(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_1A3A25090()
{
  sub_1A3A2BB74();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A250B8()
{
  sub_1A3A2BB74();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A250E0()
{
  sub_1A3A2C008();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25108()
{
  sub_1A3A2C008();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A25134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2C7B4(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_1A3A25160()
{
  sub_1A3A2BDA4();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25188()
{
  sub_1A3A2BDA4();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A251B0()
{
  char *v0;

  return sub_1A3A24FD4(*v0);
}

uint64_t sub_1A3A251B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2C8D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A251DC()
{
  sub_1A3A2BBB8();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25204()
{
  sub_1A3A2BBB8();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A2522C()
{
  sub_1A3A2BC50();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25254()
{
  sub_1A3A2BC50();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A2527C()
{
  sub_1A3A2BFC4();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A252A4()
{
  sub_1A3A2BFC4();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A252CC()
{
  char *v0;

  return sub_1A3A24FF8(*v0);
}

uint64_t sub_1A3A252D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2C994(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A252F8()
{
  sub_1A3A2BF3C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25320()
{
  sub_1A3A2BF3C();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A25348()
{
  sub_1A3A2BE70();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25370()
{
  sub_1A3A2BE70();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A25398()
{
  sub_1A3A2BD1C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A253C0()
{
  sub_1A3A2BD1C();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A253E8()
{
  sub_1A3A2BD60();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25410()
{
  sub_1A3A2BD60();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A25438()
{
  sub_1A3A2BCD8();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25460()
{
  sub_1A3A2BCD8();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A25488()
{
  sub_1A3A2BC94();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A254B0()
{
  sub_1A3A2BC94();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A254D8()
{
  sub_1A3A2BE2C();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25500()
{
  sub_1A3A2BE2C();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A25528()
{
  char *v0;

  return sub_1A3A25018(*v0);
}

uint64_t sub_1A3A25530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2CAA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A25554()
{
  sub_1A3A2BF80();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A2557C()
{
  sub_1A3A2BF80();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A255A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2CC50(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_1A3A255D4()
{
  sub_1A3A2BEF8();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A255FC()
{
  sub_1A3A2BEF8();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A25624()
{
  char *v0;

  return sub_1A3A25038(*v0);
}

uint64_t sub_1A3A2562C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2CCE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1A3A25650()
{
  sub_1A3A2BEB4();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A25678()
{
  sub_1A3A2BEB4();
  return sub_1A3AB5798();
}

uint64_t sub_1A3A256A0()
{
  sub_1A3A2BDE8();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A256C8()
{
  sub_1A3A2BDE8();
  return sub_1A3AB5798();
}

void TTSSpeechEvent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;

  v70 = sub_1A39A4820(&qword_1EE6D3990);
  v50 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v69 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1A39A4820(&qword_1EE6D3998);
  v54 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v67 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1A39A4820(&qword_1EE6D39A0);
  v28 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v27 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1A39A4820(&qword_1EE6D39A8);
  v25[1] = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v25[0] = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1A39A4820(&qword_1EE6D39B0);
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v30 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1A39A4820(&qword_1EE6D39B8);
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v33 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1A39A4820(&qword_1EE6D39C0);
  v53 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v65 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1A39A4820(&qword_1EE6D39C8);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v36 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1A39A4820(&qword_1EE6D39D0);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v39 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1A39A4820(&qword_1EE6D39D8);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v42 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1A39A4820(&qword_1EE6D39E0);
  v49 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v61 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_1A39A4820(&qword_1EE6D39E8);
  v52 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v57 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_1A39A4820(&qword_1EE6D39F0);
  v48 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v59 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_1A39A4820(&qword_1EE6D39F8);
  v47 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v62 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1A39A4820(&qword_1EE6D3A00);
  v51 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v55 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1A39A4820(&qword_1EE6D3A08);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v18 = sub_1A39A4820(&qword_1EE6D3A10);
  MEMORY[0x1E0C80A78](v18);
  v80 = sub_1A39A4820(&qword_1EE6D3A18);
  v78 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = *v1;
  v21 = v1[1];
  v22 = v1[2];
  v76 = v1[3];
  v77 = v21;
  v74 = v1[4];
  v75 = v22;
  v23 = v1[5];
  v71 = v1[6];
  v72 = v1[7];
  v73 = v23;
  v24 = *((unsigned __int8 *)v1 + 64);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A2BB74();
  v79 = v20;
  sub_1A3AB5780();
  __asm { BR              X9 }
}

uint64_t sub_1A3A25D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 104) = 0;
  sub_1A3A2C04C();
  v5 = *(_QWORD *)(v3 - 136);
  v4 = *(_QWORD *)(v3 - 128);
  sub_1A3AB5588();
  sub_1A3AB55AC();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 144) + 8))(v5, v4);
}

uint64_t TTSSpeechEvent.hashValue.getter()
{
  sub_1A3AB56FC();
  TTSSpeechEvent.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t TTSSpeechEvent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v37[5];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;

  v82 = a2;
  v65 = sub_1A39A4820(&qword_1EE6D3A28);
  v45 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v80 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1A39A4820(&qword_1EE6D3A30);
  v44 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v86 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_1A39A4820(&qword_1EE6D3A38);
  v64 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v79 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1A39A4820(&qword_1EE6D3A40);
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v78 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_1A39A4820(&qword_1EE6D3A48);
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v77 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_1A39A4820(&qword_1EE6D3A50);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v75 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_1A39A4820(&qword_1EE6D3A58);
  v43 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v76 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_1A39A4820(&qword_1EE6D3A60);
  v54 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v72 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1A39A4820(&qword_1EE6D3A68);
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v71 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1A39A4820(&qword_1EE6D3A70);
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v70 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1A39A4820(&qword_1EE6D3A78);
  v42 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v74 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1A39A4820(&qword_1EE6D3A80);
  v40 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v69 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_1A39A4820(&qword_1EE6D3A88);
  v41 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v73 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_1A39A4820(&qword_1EE6D3A90);
  v67 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v81 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_1A39A4820(&qword_1EE6D3A98);
  v39 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v68 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1A39A4820(&qword_1EE6D3AA0);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1A39A4820(&qword_1EE6D3AA8);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_1A39A4820(&qword_1EE6D3AB0);
  v24 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v26 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a1[3];
  v88 = a1;
  sub_1A39A19CC(a1, v27);
  sub_1A3A2BB74();
  v28 = v89;
  sub_1A3AB5774();
  v89 = v28;
  if (!v28)
  {
    v37[2] = v19;
    v37[3] = v23;
    v37[1] = v21;
    v38 = v24;
    v29 = v26;
    v30 = sub_1A3AB5570();
    if (*(_QWORD *)(v30 + 16) == 1)
    {
      v37[4] = v26;
      __asm { BR              X10 }
    }
    v31 = sub_1A3AB52F4();
    v32 = swift_allocError();
    v34 = v33;
    sub_1A39A4820(&qword_1EE6D3580);
    *v34 = &type metadata for TTSSpeechEvent;
    v35 = v87;
    sub_1A3AB54F8();
    sub_1A3AB52E8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v34, *MEMORY[0x1E0DEC450], v31);
    v89 = v32;
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v35);
  }
  return sub_1A39A47C4((uint64_t)v88);
}

void sub_1A3A2772C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v0 - 104) = 16;
  sub_1A3A2BBB8();
  v1 = *(_QWORD *)(v0 - 200);
  v2 = *(_QWORD *)(v0 - 144);
  v3 = *(_QWORD *)(v0 - 544);
  v4 = *(_QWORD *)(v0 - 128);
  sub_1A3AB54EC();
  if (v4)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 536) + 8))(v3, v2);
    *(_QWORD *)(v0 - 128) = v4;
    JUMPOUT(0x1A3A27704);
  }
  type metadata accessor for _NSRange();
  *(_BYTE *)(v0 - 120) = 0;
  sub_1A39B9F44(&qword_1EE6D3AB8, (uint64_t (*)(uint64_t))type metadata accessor for _NSRange, MEMORY[0x1E0CB21B0]);
  v5 = *(_QWORD *)(v0 - 320);
  sub_1A3AB554C();
  *(_QWORD *)(v0 - 152) = *(_QWORD *)(v0 - 104);
  *(_BYTE *)(v0 - 65) = 1;
  sub_1A3AB554C();
  v6 = *(_QWORD *)(v0 - 480);
  *(_QWORD *)(v0 - 128) = 0;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 536) + 8))(*(_QWORD *)(v0 - 544), v2);
  JUMPOUT(0x1A3A27E84);
}

uint64_t sub_1A3A27FA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TTSSpeechEvent.init(from:)(a1, a2);
}

void sub_1A3A27FB4(_QWORD *a1)
{
  TTSSpeechEvent.encode(to:)(a1);
}

uint64_t sub_1A3A27FC8()
{
  sub_1A3AB56FC();
  TTSSpeechEvent.hash(into:)();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A28024()
{
  sub_1A3AB56FC();
  TTSSpeechEvent.hash(into:)();
  return sub_1A3AB5738();
}

BOOL TTSSpeechEvent.isSensitive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64) - 1 < 4;
}

uint64_t TTSSpeechEvent.redacted.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  result = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_BYTE *)(v1 + 64);
  switch(v8)
  {
    case 1:
      *(_OWORD *)a1 = xmmword_1A3AC5930;
      *(_OWORD *)(a1 + 16) = xmmword_1A3AC5930;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v9 = 1;
      goto LABEL_8;
    case 2:
      *(_OWORD *)a1 = xmmword_1A3AC5930;
      *(_OWORD *)(a1 + 16) = xmmword_1A3AC5930;
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v6;
      *(_QWORD *)(a1 + 56) = v7;
      *(_BYTE *)(a1 + 64) = 2;
      goto LABEL_6;
    case 3:
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = v3;
      *(_OWORD *)(a1 + 16) = xmmword_1A3AC5930;
      *(_OWORD *)(a1 + 32) = xmmword_1A3AC5930;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 64) = 3;
LABEL_6:
      result = swift_bridgeObjectRetain();
      break;
    case 4:
      *(_OWORD *)a1 = xmmword_1A3AC5930;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      v9 = 4;
LABEL_8:
      *(_BYTE *)(a1 + 64) = v9;
      break;
    default:
      v10 = *(_QWORD *)(v1 + 16);
      v11 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = v3;
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v6;
      *(_QWORD *)(a1 + 56) = v7;
      *(_BYTE *)(a1 + 64) = v8;
      result = sub_1A3A24A18(result, v3, v10, v11, v4, v5, v6, v7, v8);
      break;
  }
  return result;
}

Swift::Void __swiftcall TTSSpeechEvent.emit(forJob:)(Swift::String forJob)
{
  __int128 *v1;
  void *object;
  uint64_t countAndFlagsBits;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  char v14;

  object = forJob._object;
  countAndFlagsBits = forJob._countAndFlagsBits;
  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = v1[3];
  v8 = *((_BYTE *)v1 + 64);
  if (qword_1EE6DD310 != -1)
  {
    v11 = v1[1];
    v12 = *v1;
    v9 = v1[3];
    v10 = v1[2];
    swift_once();
    v7 = v9;
    v6 = v10;
    v5 = v11;
    v4 = v12;
  }
  v13[0] = v4;
  v13[1] = v5;
  v13[2] = v6;
  v13[3] = v7;
  v14 = v8;
  (*(void (**)(_OWORD *, uint64_t, void *))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)qword_1EE6DD318) + 0x128))(v13, countAndFlagsBits, object);
}

uint64_t TTSSpeechEvent.logLevel.getter()
{
  int8x16_t *v0;
  int v1;
  int8x16_t v3;
  uint64_t v4;

  v1 = v0[4].u8[0];
  if (v1 == 4 || v1 == 6)
    return sub_1A3AB4FE8();
  if (v1 != 9)
    return sub_1A3AB4FC4();
  v3 = vorrq_s8(v0[2], v0[3]);
  v4 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v0[1].i64[1] | v0[1].i64[0] | v0->i64[1];
  if ((unint64_t)(v0->i64[0] - 1) <= 2 && v4 == 0)
    return sub_1A3AB4FE8();
  if (v0->i64[0] != 4 || v4 != 0)
    return sub_1A3AB4FC4();
  return sub_1A3AB4FB8();
}

uint64_t TTSLoggedSpeechEvent.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSLoggedSpeechEvent.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TTSLoggedSpeechEvent.identifier.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSLoggedSpeechEvent.event.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  v10 = *(_BYTE *)(v1 + 80);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  return sub_1A3A24A18(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

__n128 TTSLoggedSpeechEvent.event.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;

  v7 = a1[1];
  v8 = *a1;
  v6 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  v4 = *((_BYTE *)a1 + 64);
  sub_1A3A2C090(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80));
  *(_OWORD *)(v1 + 16) = v8;
  *(_OWORD *)(v1 + 32) = v7;
  result = v6;
  *(__n128 *)(v1 + 48) = v6;
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 80) = v4;
  return result;
}

uint64_t (*TTSLoggedSpeechEvent.event.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSLoggedSpeechEvent.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TTSLoggedSpeechEvent() + 24);
  v4 = sub_1A3AB4358();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TTSLoggedSpeechEvent.timestamp.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TTSLoggedSpeechEvent() + 24);
  v4 = sub_1A3AB4358();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*TTSLoggedSpeechEvent.timestamp.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TTSLoggedSpeechEvent();
  return nullsub_19;
}

uint64_t TTSLoggedSpeechEvent.pid.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for TTSLoggedSpeechEvent() + 28));
}

uint64_t TTSLoggedSpeechEvent.pid.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TTSLoggedSpeechEvent();
  *(_DWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*TTSLoggedSpeechEvent.pid.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TTSLoggedSpeechEvent();
  return nullsub_19;
}

uint64_t TTSLoggedSpeechEvent.processName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TTSLoggedSpeechEvent() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSLoggedSpeechEvent.processName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TTSLoggedSpeechEvent() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TTSLoggedSpeechEvent.processName.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TTSLoggedSpeechEvent();
  return nullsub_19;
}

uint64_t TTSLoggedSpeechEvent.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  TTSSpeechEvent.hash(into:)();
  type metadata accessor for TTSLoggedSpeechEvent();
  sub_1A3AB4358();
  sub_1A39B9F44(&qword_1EE6D3AC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1A3AB48D4();
  sub_1A3AB5720();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A286C4(char a1)
{
  return *(_QWORD *)&aIdentifievent[8 * a1];
}

uint64_t sub_1A3A286E4()
{
  char *v0;

  return sub_1A3A286C4(*v0);
}

uint64_t sub_1A3A286EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1A3A2D030(a1, a2);
  *a3 = result;
  return result;
}

void sub_1A3A28710(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1A3A2871C()
{
  sub_1A3A2CEC4();
  return sub_1A3AB578C();
}

uint64_t sub_1A3A28744()
{
  sub_1A3A2CEC4();
  return sub_1A3AB5798();
}

uint64_t TTSLoggedSpeechEvent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v3 = v1;
  v5 = sub_1A39A4820(&qword_1EE6D3AC8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A2CEC4();
  sub_1A3AB5780();
  LOBYTE(v14) = 0;
  sub_1A3AB55AC();
  if (!v2)
  {
    v9 = *(_BYTE *)(v3 + 80);
    v10 = *(_OWORD *)(v3 + 32);
    v14 = *(_OWORD *)(v3 + 16);
    v15 = v10;
    v11 = *(_OWORD *)(v3 + 64);
    v16 = *(_OWORD *)(v3 + 48);
    v17 = v11;
    v18 = v9;
    v13[15] = 1;
    sub_1A3A2CF08();
    sub_1A3AB55DC();
    type metadata accessor for TTSLoggedSpeechEvent();
    LOBYTE(v14) = 2;
    sub_1A3AB4358();
    sub_1A39B9F44(&qword_1EE6D3AD8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1A3AB55DC();
    LOBYTE(v14) = 3;
    sub_1A3AB55E8();
    LOBYTE(v14) = 4;
    sub_1A3AB55AC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TTSLoggedSpeechEvent.hashValue.getter()
{
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  TTSSpeechEvent.hash(into:)();
  type metadata accessor for TTSLoggedSpeechEvent();
  sub_1A3AB4358();
  sub_1A39B9F44(&qword_1EE6D3AC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1A3AB48D4();
  sub_1A3AB5720();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t TTSLoggedSpeechEvent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;

  v28 = a2;
  v3 = sub_1A3AB4358();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1A39A4820(&qword_1EE6D3AE0);
  v6 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for TTSLoggedSpeechEvent();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A19CC(a1, a1[3]);
  sub_1A3A2CEC4();
  v32 = v8;
  v12 = v33;
  sub_1A3AB5774();
  if (v12)
    return sub_1A39A47C4((uint64_t)a1);
  v33 = v5;
  v13 = v6;
  v14 = v30;
  LOBYTE(v34) = 0;
  v15 = v11;
  *(_QWORD *)v11 = sub_1A3AB551C();
  *((_QWORD *)v11 + 1) = v16;
  v39 = 1;
  sub_1A3A2CF4C();
  sub_1A3AB554C();
  v17 = v38;
  v18 = v35;
  *((_OWORD *)v11 + 1) = v34;
  *((_OWORD *)v11 + 2) = v18;
  v19 = v37;
  *((_OWORD *)v11 + 3) = v36;
  *((_OWORD *)v11 + 4) = v19;
  v11[80] = v17;
  LOBYTE(v34) = 2;
  sub_1A39B9F44(&qword_1EE6D3AF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  v20 = v33;
  v27[1] = 0;
  sub_1A3AB554C();
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v15[v9[6]], v20, v14);
  LOBYTE(v34) = 3;
  *(_DWORD *)&v15[v9[7]] = sub_1A3AB5558();
  LOBYTE(v34) = 4;
  v21 = (uint64_t)v15;
  v22 = sub_1A3AB551C();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v31);
  v25 = (uint64_t *)(v21 + v9[8]);
  *v25 = v22;
  v25[1] = v24;
  sub_1A3A2CF90(v21, v28);
  sub_1A39A47C4((uint64_t)a1);
  return sub_1A3A2CFD4(v21);
}

uint64_t sub_1A3A28E2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TTSLoggedSpeechEvent.init(from:)(a1, a2);
}

uint64_t sub_1A3A28E40(_QWORD *a1)
{
  return TTSLoggedSpeechEvent.encode(to:)(a1);
}

uint64_t sub_1A3A28E58()
{
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  TTSSpeechEvent.hash(into:)();
  sub_1A3AB4358();
  sub_1A39B9F44(&qword_1EE6D3AC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1A3AB48D4();
  sub_1A3AB5720();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A28F58()
{
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  TTSSpeechEvent.hash(into:)();
  sub_1A3AB4358();
  sub_1A39B9F44(&qword_1EE6D3AC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1A3AB48D4();
  sub_1A3AB5720();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

id sub_1A3A29064()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TTSSpeechTracer()), sel_init);
  qword_1EE6DD318 = (uint64_t)result;
  return result;
}

id TTSSpeechTracer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id static TTSSpeechTracer.shared.getter()
{
  if (qword_1EE6DD310 != -1)
    swift_once();
  return (id)qword_1EE6DD318;
}

uint64_t sub_1A3A29130()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer____lazy_storage___pid);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer____lazy_storage___pid + 4) != 1)
    return *(unsigned int *)v1;
  result = getpid();
  *(_DWORD *)v1 = result;
  v1[4] = 0;
  return result;
}

uint64_t sub_1A3A29174()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer____lazy_storage___procName);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer____lazy_storage___procName + 8))
  {
    v2 = *v1;
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v4 = objc_msgSend(v3, sel_processName);

    v2 = sub_1A3AB497C();
    v6 = v5;

    *v1 = v2;
    v1[1] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

id sub_1A3A29230()
{
  uint64_t v0;
  id result;

  v0 = sub_1A3AB4724();
  sub_1A39AB688(v0, qword_1EE6DD328);
  sub_1A39AAC98(v0, (uint64_t)qword_1EE6DD328);
  result = TTSRosebudLogger();
  if (result)
    return (id)sub_1A3AB4730();
  __break(1u);
  return result;
}

uint64_t static TTSSpeechTracer.eventLog.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EE6DD320 != -1)
    swift_once();
  v2 = sub_1A3AB4724();
  v3 = sub_1A39AAC98(v2, (uint64_t)qword_1EE6DD328);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

id TTSSpeechTracer.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  void *v13;
  __CFNotificationCenter *v14;
  __CFString *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_super v20;
  uint64_t v21;

  v1 = sub_1A3AB500C();
  v18 = *(_QWORD *)(v1 - 8);
  v19 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A3AB5000();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_1A3AB4808();
  MEMORY[0x1E0C80A78](v6);
  v7 = &v0[OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer____lazy_storage___pid];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  v8 = &v0[OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer____lazy_storage___procName];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v17 = OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_operationQueue;
  sub_1A39D5D14();
  v9 = v0;
  sub_1A3AB47F0();
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1A39B9F44((unint64_t *)&unk_1ED1B5410, v5, MEMORY[0x1E0DEF828]);
  sub_1A39A4820(&qword_1ED1B5390);
  sub_1A3A2D890(&qword_1ED1B5398, &qword_1ED1B5390);
  sub_1A3AB5228();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v3, *MEMORY[0x1E0DEF8D0], v19);
  *(_QWORD *)&v0[v17] = sub_1A3AB5030();
  v10 = OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_encoder;
  sub_1A3AB4250();
  swift_allocObject();
  *(_QWORD *)&v9[v10] = sub_1A3AB4244();
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_eventQueue] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v9[OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_eventBufferSize] = 1000;

  v11 = (objc_class *)type metadata accessor for TTSSpeechTracer();
  v20.receiver = v9;
  v20.super_class = v11;
  v12 = objc_msgSendSuper2(&v20, sel_init);
  if (TTSIsInternalBuild())
  {
    v13 = (void *)sub_1A3AB4958();
    v14 = CFNotificationCenterGetDarwinNotifyCenter();
    v15 = v13;
    CFNotificationCenterAddObserver(v14, 0, (CFNotificationCallback)sub_1A3A295E8, v15, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  }
  return v12;
}

uint64_t sub_1A3A2960C()
{
  sub_1A3A2D54C(0, 5, 0xD00000000000003ELL, 0x80000001A3AF1750);
  sub_1A39A4820(&qword_1EE6D3B28);
  sub_1A3A2D890(&qword_1EE6D3B30, &qword_1EE6D3B28);
  return sub_1A3AB4B2C();
}

uint64_t sub_1A3A29694(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1A3A2D54C(0, result, 0xD00000000000003ELL, 0x80000001A3AF1750);
    sub_1A39A4820(&qword_1EE6D3B28);
    sub_1A3A2D890(&qword_1EE6D3B30, &qword_1EE6D3B28);
    return sub_1A3AB4B2C();
  }
  return result;
}

uint64_t sub_1A3A297DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v13;
  _QWORD v16[8];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58))(&v18);
  v3 = v18;
  v4 = v19;
  v5 = v20;
  v6 = v21;
  v7 = v22;
  v8 = v23;
  v9 = v24;
  v10 = v25;
  v11 = v26;
  v16[0] = v18;
  v16[1] = v19;
  v16[2] = v20;
  v16[3] = v21;
  v16[4] = v22;
  v16[5] = v23;
  v16[6] = v24;
  v16[7] = v25;
  v17 = v26;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x128))(v16, a2, a3);
  return sub_1A3A2C090(v3, v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1A3A299DC(uint64_t a1, char *a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];
  _BYTE v40[72];
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v34 = a3;
  v33 = a2;
  v5 = sub_1A3AB47E4();
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1A3AB4808();
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A3AB4358();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v30 - v15;
  sub_1A3A2D70C(a1, (uint64_t)v40);
  result = TTSIsInternalBuild();
  if ((_DWORD)result)
  {
    sub_1A3A2D70C((uint64_t)v40, (uint64_t)v41);
    if (v46 == 3)
    {
      result = v42;
      v18 = v43;
      v19 = v45;
      if (v42 != v44)
        goto LABEL_8;
    }
    else
    {
      if (v46 != 1)
      {
LABEL_9:
        sub_1A3AB434C();
        v31 = *(id *)&v3[OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_operationQueue];
        (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
        v20 = (*(unsigned __int8 *)(v11 + 80) + 97) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        v32 = v5;
        v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
        v22 = swift_allocObject();
        v23 = v33;
        v33 = v7;
        v24 = v34;
        *(_QWORD *)(v22 + 16) = v23;
        *(_QWORD *)(v22 + 24) = v24;
        sub_1A3A2D70C((uint64_t)v40, v22 + 32);
        (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v22 + v20, v14, v10);
        *(_QWORD *)(v22 + v21) = v3;
        aBlock[4] = sub_1A3A2D7E8;
        aBlock[5] = v22;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1A39CF138;
        aBlock[3] = &unk_1E4A9F878;
        v25 = _Block_copy(aBlock);
        v31 = v31;
        swift_bridgeObjectRetain();
        sub_1A3A2D848((uint64_t)v40);
        v26 = v3;
        sub_1A3AB47F0();
        v38 = MEMORY[0x1E0DEE9D8];
        sub_1A39B9F44(&qword_1EE6D23C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        sub_1A39A4820(&qword_1EE6D23D8);
        sub_1A3A2D890((unint64_t *)&qword_1EE6D23E0, &qword_1EE6D23D8);
        v27 = v33;
        v28 = v32;
        sub_1A3AB5228();
        v29 = v31;
        MEMORY[0x1A8595E0C](0, v9, v27, v25);
        _Block_release(v25);

        (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v28);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
        return swift_release();
      }
      result = v41[0];
      v18 = v41[1];
      v19 = v43;
      if (v41[0] != v42)
      {
LABEL_8:
        result = sub_1A3AB5654();
        if ((result & 1) != 0)
          return result;
        goto LABEL_9;
      }
    }
    if (v18 == v19)
      return result;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1A3A29D98(uint64_t a1, uint8_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int8x16_t v40;
  uint64_t v41;
  os_log_type_t v42;
  os_log_type_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  int8x16_t v59;
  int8x16_t v60;
  char v61;

  v55 = (uint8_t *)a1;
  v9 = sub_1A3AB4724();
  v53 = *(_QWORD *)(v9 - 8);
  v54 = v9;
  MEMORY[0x1E0C80A78](v9);
  v51 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1A3AB49D0();
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TTSLoggedSpeechEvent();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (uint8_t **)((char *)&v50 - v19);
  v21 = (char *)&v50 + *(int *)(v18 + 24) - v19;
  v22 = sub_1A3AB4358();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a4, v22);
  swift_bridgeObjectRetain();
  sub_1A3A2D848(a3);
  LODWORD(v21) = sub_1A3A29130();
  v23 = sub_1A3A29174();
  v25 = v24;
  *v20 = v55;
  v20[1] = a2;
  v55 = (uint8_t *)a3;
  sub_1A3A2D70C(a3, (uint64_t)(v20 + 2));
  *(_DWORD *)((char *)v20 + *(int *)(v13 + 28)) = (_DWORD)v21;
  v26 = (uint64_t *)((char *)v20 + *(int *)(v13 + 32));
  *v26 = v23;
  v26[1] = v25;
  v27 = *(_QWORD *)(a5 + OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_eventBufferSize);
  v28 = (unint64_t *)(a5 + OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_eventQueue);
  swift_beginAccess();
  sub_1A3A2CF90((uint64_t)v20, (uint64_t)v17);
  v29 = *v28;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v28 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v29 = sub_1A3A2ADB0(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
    *v28 = v29;
  }
  v32 = *(_QWORD *)(v29 + 16);
  v31 = *(_QWORD *)(v29 + 24);
  if (v32 >= v31 >> 1)
  {
    v29 = sub_1A3A2ADB0(v31 > 1, v32 + 1, 1, v29);
    *v28 = v29;
  }
  *(_QWORD *)(v29 + 16) = v32 + 1;
  sub_1A3A2F7FC((uint64_t)v17, v29+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v32);
  v33 = *(_QWORD *)(*v28 + 16);
  if (v27 >= v33)
  {
LABEL_8:
    swift_endAccess();
    if ((TTSIsBaseSystem() & 1) != 0
      || (objc_msgSend((id)objc_opt_self(), sel_shouldLogSensitiveSpeech) & 1) == 0)
    {
      return sub_1A3A2CFD4((uint64_t)v20);
    }
    sub_1A39B9F44(&qword_1EE6D3B58, (uint64_t (*)(uint64_t))type metadata accessor for TTSLoggedSpeechEvent, (uint64_t)&protocol conformance descriptor for TTSLoggedSpeechEvent);
    swift_retain();
    v17 = (char *)sub_1A3AB4238();
    v13 = v34;
    swift_release();
    sub_1A3AB49C4();
    v35 = sub_1A3AB4994();
    if (!v36)
    {
      sub_1A3A2CFD4((uint64_t)v20);
      return sub_1A3A0E3AC((uint64_t)v17, v13);
    }
    v27 = v35;
    a5 = v36;
    if (qword_1EE6DD320 == -1)
      goto LABEL_12;
    goto LABEL_28;
  }
  if (v33)
  {
    sub_1A3A2F958(0, 1);
    goto LABEL_8;
  }
  __break(1u);
LABEL_28:
  swift_once();
LABEL_12:
  v37 = v54;
  v38 = sub_1A39AAC98(v54, (uint64_t)qword_1EE6DD328);
  v39 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v51, v38, v37);
  sub_1A3A2D70C((uint64_t)v55, (uint64_t)v58);
  if (v61 == 4 || v61 == 6)
    goto LABEL_17;
  if (v61 != 9)
    goto LABEL_22;
  v40 = vorrq_s8(v59, v60);
  v41 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)) | v58[3] | v58[2] | v58[1];
  if ((unint64_t)(v58[0] - 1) <= 2 && !v41)
  {
LABEL_17:
    v42 = sub_1A3AB4FE8();
    goto LABEL_23;
  }
  if (v58[0] == 4 && !v41)
    v42 = sub_1A3AB4FB8();
  else
LABEL_22:
    v42 = sub_1A3AB4FC4();
LABEL_23:
  v44 = v42;
  swift_bridgeObjectRetain();
  v45 = sub_1A3AB470C();
  v46 = v44;
  if (os_log_type_enabled(v45, v44))
  {
    v47 = (uint8_t *)swift_slowAlloc();
    v48 = v27;
    v49 = swift_slowAlloc();
    v57 = v49;
    *(_DWORD *)v47 = 136315138;
    v55 = v47 + 4;
    swift_bridgeObjectRetain();
    v56 = sub_1A39A2878(v48, a5, &v57);
    sub_1A3AB5138();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A3940000, v45, v46, "%s", v47, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v49, -1, -1);
    MEMORY[0x1A859781C](v47, -1, -1);
    sub_1A3A0E3AC((uint64_t)v17, v13);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v51, v54);
  }
  else
  {
    sub_1A3A0E3AC((uint64_t)v17, v13);
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v54);
  }
  return sub_1A3A2CFD4((uint64_t)v20);
}

uint64_t sub_1A3A2A330(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v45 = sub_1A3AB4724();
  v2 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v42 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A3AB49D0();
  MEMORY[0x1E0C80A78](v4);
  v41 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TTSLoggedSpeechEvent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (int8x16_t *)((char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = a1;
  v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_eventQueue);
  swift_beginAccess();
  result = *v11;
  v13 = *(_QWORD *)(*v11 + 16);
  if (!v13)
    return result;
  v14 = result + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v46 = *(_QWORD *)(v7 + 72);
  v47 = OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_encoder;
  v36[0] = result;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v15 = 136315138;
  v37 = v15;
  v36[1] = MEMORY[0x1E0DEE9B8] + 8;
  v39 = v6;
  v40 = v2;
  v38 = v10;
  while (1)
  {
    sub_1A3A2CF90(v14, (uint64_t)v9);
    sub_1A39B9F44(&qword_1EE6D3B58, (uint64_t (*)(uint64_t))type metadata accessor for TTSLoggedSpeechEvent, (uint64_t)&protocol conformance descriptor for TTSLoggedSpeechEvent);
    swift_retain();
    v16 = sub_1A3AB4238();
    v18 = v17;
    swift_release();
    sub_1A3AB49C4();
    v43 = v16;
    v44 = v18;
    v19 = sub_1A3AB4994();
    if (!v20)
      break;
    v21 = v19;
    v22 = v20;
    if (qword_1EE6DD320 != -1)
      swift_once();
    v23 = v45;
    v24 = sub_1A39AAC98(v45, (uint64_t)qword_1EE6DD328);
    v25 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v42, v24, v23);
    v26 = v9[5].u8[0];
    if (v26 == 4 || v26 == 6)
      goto LABEL_12;
    if (v26 != 9)
      goto LABEL_16;
    v27 = v9[1].i64[0];
    v28 = vorrq_s8(v9[3], v9[4]);
    v29 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)) | v9[2].i64[1] | v9[2].i64[0] | v9[1].i64[1];
    if ((unint64_t)(v27 - 1) <= 2 && !v29)
    {
LABEL_12:
      v30 = sub_1A3AB4FE8();
    }
    else
    {
      if (v27 != 4 || v29)
      {
LABEL_16:
        v30 = sub_1A3AB4FC4();
        goto LABEL_17;
      }
      v30 = sub_1A3AB4FB8();
    }
LABEL_17:
    v31 = v30;
    swift_bridgeObjectRetain();
    v32 = sub_1A3AB470C();
    if (os_log_type_enabled(v32, v31))
    {
      v33 = v21;
      v34 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v48 = v35;
      *(_DWORD *)v34 = v37;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v34 + 4) = sub_1A39A2878(v33, v22, &v48);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A3940000, v32, v31, "%s", (uint8_t *)v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A859781C](v35, -1, -1);
      MEMORY[0x1A859781C](v34, -1, -1);
      sub_1A3A0E3AC(v43, v44);

      v2 = v40;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v45);
    }
    else
    {
      sub_1A3A0E3AC(v43, v44);
      swift_bridgeObjectRelease_n();

      v2 = v40;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v45);
    }
    sub_1A3A2CFD4((uint64_t)v9);
    v14 += v46;
    if (!--v13)
      return swift_bridgeObjectRelease();
  }
  sub_1A3A0E3AC(v43, v44);
  sub_1A3A2CFD4((uint64_t)v9);
  return swift_bridgeObjectRelease();
}

id TTSSpeechTracer.__deallocating_deinit()
{
  return sub_1A39A8C1C(type metadata accessor for TTSSpeechTracer);
}

uint64_t sub_1A3A2A7D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = v1 + OBJC_IVAR____TtC12TextToSpeech18TTSSpeechEventObjc_wrappedEvent;
  swift_beginAccess();
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  v11 = *(_QWORD *)(v3 + 56);
  v12 = *(_BYTE *)(v3 + 64);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v12;
  return sub_1A3A24A18(v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1A3A2A848(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v18;
  __int128 v19;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[4];
  v18 = *(_OWORD *)(a1 + 5);
  v19 = *((_OWORD *)a1 + 1);
  v5 = a1[7];
  v6 = *((_BYTE *)a1 + 64);
  v7 = v1 + OBJC_IVAR____TtC12TextToSpeech18TTSSpeechEventObjc_wrappedEvent;
  swift_beginAccess();
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(_QWORD *)(v7 + 24);
  v12 = *(_QWORD *)(v7 + 32);
  v13 = *(_QWORD *)(v7 + 40);
  v14 = *(_QWORD *)(v7 + 48);
  v15 = *(_QWORD *)(v7 + 56);
  v16 = *(_BYTE *)(v7 + 64);
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = v3;
  *(_OWORD *)(v7 + 16) = v19;
  *(_QWORD *)(v7 + 32) = v4;
  *(_OWORD *)(v7 + 40) = v18;
  *(_QWORD *)(v7 + 56) = v5;
  *(_BYTE *)(v7 + 64) = v6;
  return sub_1A3A2C090(v8, v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t (*sub_1A3A2A8F8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id sub_1A3A2A93C(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = *(_BYTE *)(a1 + 64);
  v5 = &v3[OBJC_IVAR____TtC12TextToSpeech18TTSSpeechEventObjc_wrappedEvent];
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *((_OWORD *)v5 + 1) = v6;
  v7 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v5 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v5 + 3) = v7;
  v5[64] = v4;
  v9.receiver = v3;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id static TTSSpeechEventObjc.make(otherRewrite:from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v12;
  char *v13;
  char *v14;
  objc_super v16;

  v12 = (objc_class *)type metadata accessor for TTSSpeechEventObjc();
  v13 = (char *)objc_allocWithZone(v12);
  v14 = &v13[OBJC_IVAR____TtC12TextToSpeech18TTSSpeechEventObjc_wrappedEvent];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  *((_QWORD *)v14 + 2) = a3;
  *((_QWORD *)v14 + 3) = a4;
  *((_QWORD *)v14 + 4) = a5;
  *((_QWORD *)v14 + 5) = a6;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 7) = 0;
  v14[64] = 3;
  v16.receiver = v13;
  v16.super_class = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v16, sel_init);
}

id static TTSSpeechEventObjc.make(start:)(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v4 = (objc_class *)type metadata accessor for TTSSpeechEventObjc();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC12TextToSpeech18TTSSpeechEventObjc_wrappedEvent];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  v6[64] = 4;
  v8.receiver = v5;
  v8.super_class = v4;
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v8, sel_init);
}

void TTSSpeechEventObjc.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TTSSpeechEventObjc.__deallocating_deinit()
{
  return sub_1A39A8C1C(type metadata accessor for TTSSpeechEventObjc);
}

_QWORD *sub_1A3A2ACA4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1A39A4820(&qword_1EE6D3B68);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1A3A2D45C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A2ADB0(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D3B60);
  v10 = *(_QWORD *)(type metadata accessor for TTSLoggedSpeechEvent() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_1A3AB5438();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for TTSLoggedSpeechEvent() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1A3A2F840(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void _s12TextToSpeech14TTSSpeechEventO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1A3A2B040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[248];

  v21 = v17;
  v35 = v11;
  v23 = v14;
  v24 = a6;
  v33 = v15;
  v30 = v19;
  if (v13)
  {
    swift_bridgeObjectRetain();
    sub_1A3A24A18(v12, v16, v20, v23, a5, v24, a7, a8, v13);
    sub_1A3A2FB2C((uint64_t)v37);
    v27 = 0;
  }
  else
  {
    v34 = v10;
    v32 = v9;
    v36 = v8;
    if (v21 == v12 && v18 == v16)
    {
      v27 = 1;
      v28 = v21;
    }
    else
    {
      v31 = v21;
      v27 = sub_1A3AB5654();
      a6 = v24;
      v28 = v31;
    }
    sub_1A3A24A18(v12, v16, v20, v23, a5, a6, a7, a8, 0);
    sub_1A3A24A18(v28, v18, v34, v32, v35, v36, v33, v30, 0);
    sub_1A3A2FB2C((uint64_t)v37);
  }
  return v27 & 1;
}

unint64_t sub_1A3A2BB74()
{
  unint64_t result;

  result = qword_1EE6DD340;
  if (!qword_1EE6DD340)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5814, &type metadata for TTSSpeechEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD340);
  }
  return result;
}

unint64_t sub_1A3A2BBB8()
{
  unint64_t result;

  result = qword_1EE6DD348;
  if (!qword_1EE6DD348)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC57C4, &type metadata for TTSSpeechEvent.MarkerConversionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD348);
  }
  return result;
}

void type metadata accessor for _NSRange()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE6D3B50)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EE6D3B50);
  }
}

unint64_t sub_1A3A2BC50()
{
  unint64_t result;

  result = qword_1EE6DD350;
  if (!qword_1EE6DD350)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5774, &type metadata for TTSSpeechEvent.MarkerRecievedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD350);
  }
  return result;
}

unint64_t sub_1A3A2BC94()
{
  unint64_t result;

  result = qword_1EE6DD358;
  if (!qword_1EE6DD358)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5724, &type metadata for TTSSpeechEvent.ReceivedStopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD358);
  }
  return result;
}

unint64_t sub_1A3A2BCD8()
{
  unint64_t result;

  result = qword_1EE6DD360;
  if (!qword_1EE6DD360)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC56D4, &type metadata for TTSSpeechEvent.ReceivedStartCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD360);
  }
  return result;
}

unint64_t sub_1A3A2BD1C()
{
  unint64_t result;

  result = qword_1EE6DD368;
  if (!qword_1EE6DD368)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5684, &type metadata for TTSSpeechEvent.PlayedFirstBufferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD368);
  }
  return result;
}

unint64_t sub_1A3A2BD60()
{
  unint64_t result;

  result = qword_1EE6DD370;
  if (!qword_1EE6DD370)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5634, &type metadata for TTSSpeechEvent.ReceivedFirstBufferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD370);
  }
  return result;
}

unint64_t sub_1A3A2BDA4()
{
  unint64_t result;

  result = qword_1EE6DD378;
  if (!qword_1EE6DD378)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC55E4, &type metadata for TTSSpeechEvent.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD378);
  }
  return result;
}

unint64_t sub_1A3A2BDE8()
{
  unint64_t result;

  result = qword_1EE6DD380;
  if (!qword_1EE6DD380)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5594, &type metadata for TTSSpeechEvent.StopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD380);
  }
  return result;
}

unint64_t sub_1A3A2BE2C()
{
  unint64_t result;

  result = qword_1EE6DD388;
  if (!qword_1EE6DD388)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5544, &type metadata for TTSSpeechEvent.ResumeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD388);
  }
  return result;
}

unint64_t sub_1A3A2BE70()
{
  unint64_t result;

  result = qword_1EE6DD390;
  if (!qword_1EE6DD390)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC54F4, &type metadata for TTSSpeechEvent.PauseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD390);
  }
  return result;
}

unint64_t sub_1A3A2BEB4()
{
  unint64_t result;

  result = qword_1EE6DD398;
  if (!qword_1EE6DD398)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC54A4, &type metadata for TTSSpeechEvent.StartSliceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD398);
  }
  return result;
}

unint64_t sub_1A3A2BEF8()
{
  unint64_t result;

  result = qword_1EE6DD3A0;
  if (!qword_1EE6DD3A0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5454, &type metadata for TTSSpeechEvent.StartCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD3A0);
  }
  return result;
}

unint64_t sub_1A3A2BF3C()
{
  unint64_t result;

  result = qword_1EE6DD3A8;
  if (!qword_1EE6DD3A8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5404, &type metadata for TTSSpeechEvent.OtherRewriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD3A8);
  }
  return result;
}

unint64_t sub_1A3A2BF80()
{
  unint64_t result;

  result = qword_1EE6DD3B0;
  if (!qword_1EE6DD3B0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC53B4, &type metadata for TTSSpeechEvent.RuleRewriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD3B0);
  }
  return result;
}

unint64_t sub_1A3A2BFC4()
{
  unint64_t result;

  result = qword_1EE6DD3B8;
  if (!qword_1EE6DD3B8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5364, &type metadata for TTSSpeechEvent.MarkupConversionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD3B8);
  }
  return result;
}

unint64_t sub_1A3A2C008()
{
  unint64_t result;

  result = qword_1EE6DD3C0;
  if (!qword_1EE6DD3C0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5314, &type metadata for TTSSpeechEvent.EnqueueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD3C0);
  }
  return result;
}

unint64_t sub_1A3A2C04C()
{
  unint64_t result;

  result = qword_1EE6DD3C8;
  if (!qword_1EE6DD3C8)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC52C4, &type metadata for TTSSpeechEvent.CheckPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DD3C8);
  }
  return result;
}

uint64_t sub_1A3A2C090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  result = a2;
  switch(a9)
  {
    case 0:
    case 4:
      goto LABEL_4;
    case 1:
    case 5:
      goto LABEL_3;
    case 2:
    case 3:
      swift_bridgeObjectRelease();
LABEL_3:
      swift_bridgeObjectRelease();
LABEL_4:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for TTSLoggedSpeechEvent()
{
  uint64_t result;

  result = qword_1EE6DD7E0;
  if (!qword_1EE6DD7E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A3A2C138()
{
  return 12383;
}

uint64_t sub_1A3A2C144(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x696F506B63656863 && a2 == 0xEA0000000000746ELL || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756575716E65 && a2 == 0xE700000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A3AF1910 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x72776552656C7572 && a2 == 0xEB00000000657469 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x776552726568746FLL && a2 == 0xEC00000065746972 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7472617473 && a2 == 0xE500000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696C537472617473 && a2 == 0xEA00000000006563 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6573756170 && a2 == 0xE500000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656D75736572 && a2 == 0xE600000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1886352499 && a2 == 0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001A3AF1930 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001A3AF1950 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6465766965636572 && a2 == 0xED00007472617453 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6465766965636572 && a2 == 0xEC000000706F7453 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x655272656B72616DLL && a2 == 0xEE00646576656963 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001A3AF1970)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    v5 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

uint64_t sub_1A3A2C7B4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6673736563637573 && a2 == 0xEC000000796C6C75)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1A3A2C848()
{
  return 0x6673736563637573;
}

uint64_t sub_1A3A2C868(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1A3A2C8D4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1836020326 && a2 == 0xE400000000000000;
  if (v3 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 28532 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1A3A2C994(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 7956599 && a2 == 0xE300000000000000;
  if (v3 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1836020326 && a2 == 0xE400000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 28532 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1A3A2CAA0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6C616E696769726FLL && a2 == 0xE800000000000000;
  if (v3 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6563616C706572 && a2 == 0xEB00000000746E65 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1A3A2CC50(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x686365657073 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1A3A2CCCC()
{
  return 0x686365657073;
}

uint64_t sub_1A3A2CCE0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6563696C73 && a2 == 0xE500000000000000;
  if (v3 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6563696F76 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t _s12TextToSpeech09TTSLoggedC5EventV2eeoiySbAC_ACtFZ_0(uint64_t a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  char v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD v16[4];
  char v17;

  v4 = *(_QWORD *)a1 == *a2 && *(_QWORD *)(a1 + 8) == a2[1];
  if (v4 || (v5 = sub_1A3AB5654(), result = 0, (v5 & 1) != 0))
  {
    v7 = *(_BYTE *)(a1 + 80);
    v8 = *(_OWORD *)(a1 + 32);
    v16[0] = *(_OWORD *)(a1 + 16);
    v16[1] = v8;
    v9 = *(_OWORD *)(a1 + 64);
    v16[2] = *(_OWORD *)(a1 + 48);
    v16[3] = v9;
    v17 = v7;
    _s12TextToSpeech14TTSSpeechEventO2eeoiySbAC_ACtFZ_0((uint64_t)v16);
    if ((v10 & 1) != 0
      && (v11 = type metadata accessor for TTSLoggedSpeechEvent(), (sub_1A3AB4340() & 1) != 0)
      && *(_DWORD *)(a1 + *(int *)(v11 + 28)) == *(_DWORD *)((char *)a2 + *(int *)(v11 + 28)))
    {
      v12 = *(int *)(v11 + 32);
      v13 = *(_QWORD *)(a1 + v12);
      v14 = *(_QWORD *)(a1 + v12 + 8);
      v15 = (_QWORD *)((char *)a2 + v12);
      if (v13 == *v15 && v14 == v15[1])
        return 1;
      else
        return sub_1A3AB5654();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1A3A2CEC4()
{
  unint64_t result;

  result = qword_1EE6DD3D0[0];
  if (!qword_1EE6DD3D0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5274, &type metadata for TTSLoggedSpeechEvent.CodingKeys);
    atomic_store(result, qword_1EE6DD3D0);
  }
  return result;
}

unint64_t sub_1A3A2CF08()
{
  unint64_t result;

  result = qword_1EE6D3AD0;
  if (!qword_1EE6D3AD0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechEvent, &type metadata for TTSSpeechEvent);
    atomic_store(result, (unint64_t *)&qword_1EE6D3AD0);
  }
  return result;
}

unint64_t sub_1A3A2CF4C()
{
  unint64_t result;

  result = qword_1EE6D3AE8;
  if (!qword_1EE6D3AE8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechEvent, &type metadata for TTSSpeechEvent);
    atomic_store(result, (unint64_t *)&qword_1EE6D3AE8);
  }
  return result;
}

uint64_t sub_1A3A2CF90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTSLoggedSpeechEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A2CFD4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTSLoggedSpeechEvent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for TTSSpeechTracer()
{
  return objc_opt_self();
}

uint64_t sub_1A3A2D030(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E657665 && a2 == 0xE500000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 6580592 && a2 == 0xE300000000000000 || (sub_1A3AB5654() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4E737365636F7270 && a2 == 0xEB00000000656D61)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1A3A2D234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  char *v14;
  _QWORD v15[2];
  _QWORD aBlock[6];

  v0 = sub_1A3AB47E4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A3AB4808();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EE6DD310 != -1)
    swift_once();
  v8 = (char *)qword_1EE6DD318;
  result = TTSIsInternalBuild();
  if ((_DWORD)result)
  {
    v15[0] = v1;
    v10 = *(void **)&v8[OBJC_IVAR____TtC12TextToSpeech15TTSSpeechTracer_operationQueue];
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v8;
    aBlock[4] = sub_1A3A2FB24;
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A39CF138;
    aBlock[3] = &unk_1E4AA3BD0;
    v12 = _Block_copy(aBlock);
    v13 = v10;
    v14 = v8;
    sub_1A3AB47F0();
    v15[1] = MEMORY[0x1E0DEE9D8];
    sub_1A39B9F44(&qword_1EE6D23C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1A39A4820(&qword_1EE6D23D8);
    sub_1A3A2D890((unint64_t *)&qword_1EE6D23E0, &qword_1EE6D23D8);
    sub_1A3AB5228();
    MEMORY[0x1A8595E0C](0, v7, v3, v12);
    _Block_release(v12);

    (*(void (**)(char *, uint64_t))(v15[0] + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_1A3A2D45C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A2D54C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result == a2)
  {
    return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = result;
    if (a2 >= result)
    {
      v7 = HIBYTE(a4) & 0xF;
      if ((a4 & 0x2000000000000000) == 0)
        v7 = a3 & 0xFFFFFFFFFFFFLL;
      v16 = v7;
      v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (v6 < a2)
      {
        if (v16)
        {
          result = sub_1A3AB4A48();
          if (result < 0)
            goto LABEL_22;
          v9 = result;
          if (!result)
            goto LABEL_23;
          v17 = 0;
          MEMORY[0x1A8597834](&v17, 8);
          if (v9 > v17 * v9)
          {
            v10 = -(uint64_t)v9 % v9;
            while (v10 > v17 * v9)
            {
              v17 = 0;
              MEMORY[0x1A8597834](&v17, 8);
            }
          }
          sub_1A3AB4A60();
          v11 = sub_1A3AB4B20();
          v13 = v12;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1A3A2ACA4(0, v4[2] + 1, 1, v4);
            v4 = (_QWORD *)result;
          }
          v15 = v4[2];
          v14 = v4[3];
          if (v15 >= v14 >> 1)
          {
            result = (uint64_t)sub_1A3A2ACA4((_QWORD *)(v14 > 1), v15 + 1, 1, v4);
            v4 = (_QWORD *)result;
          }
          v4[2] = v15 + 1;
          v8 = &v4[2 * v15];
          v8[4] = v11;
          v8[5] = v13;
        }
        if (++v6 == a2)
          return (uint64_t)v4;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1A3A2D70C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

uint64_t sub_1A3A2D734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_1A3AB4358();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 97) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  sub_1A3A2C090(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1A3A2D7E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_1A3AB4358() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 97) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1A3A29D98(*(_QWORD *)(v0 + 16), *(uint8_t **)(v0 + 24), v0 + 32, v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1A3A2D830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A3A2D840()
{
  return swift_release();
}

uint64_t sub_1A3A2D848(uint64_t a1)
{
  sub_1A3A24A18(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t sub_1A3A2D890(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1A39AB624(a2);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TTSSpeechEventObjc()
{
  return objc_opt_self();
}

unint64_t sub_1A3A2D8F4()
{
  unint64_t result;

  result = qword_1EE6D3B40;
  if (!qword_1EE6D3B40)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSpeechEvent, &type metadata for TTSSpeechEvent);
    atomic_store(result, (unint64_t *)&qword_1EE6D3B40);
  }
  return result;
}

uint64_t sub_1A3A2D938()
{
  return sub_1A39B9F44(&qword_1EE6D3B48, (uint64_t (*)(uint64_t))type metadata accessor for TTSLoggedSpeechEvent, (uint64_t)&protocol conformance descriptor for TTSLoggedSpeechEvent);
}

uint64_t destroy for TTSSpeechEvent(uint64_t a1)
{
  return sub_1A3A2C090(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t initializeWithCopy for TTSSpeechEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_1A3A24A18(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for TTSSpeechEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_1A3A24A18(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  sub_1A3A2C090(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

__n128 initializeWithTake for TTSSpeechEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TTSSpeechEvent(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  sub_1A3A2C090(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTSSpeechEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 247);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 9)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TTSSpeechEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 247;
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A3A2DC10(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) <= 8u)
    return *(unsigned __int8 *)(a1 + 64);
  else
    return (*(_DWORD *)a1 + 9);
}

uint64_t sub_1A3A2DC28(uint64_t result, unsigned int a2)
{
  if (a2 >= 9)
  {
    *(_QWORD *)result = a2 - 9;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_QWORD *)(result + 56) = 0;
    LOBYTE(a2) = 9;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent()
{
  return &type metadata for TTSSpeechEvent;
}

uint64_t initializeBufferWithCopyOfBuffer for TTSLoggedSpeechEvent(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[2];
    v25 = a2[3];
    v9 = a2[4];
    v10 = a2[5];
    v11 = a2[6];
    v12 = a2[7];
    v13 = a2[8];
    v26 = a2[9];
    v14 = *((_BYTE *)a2 + 80);
    swift_bridgeObjectRetain();
    sub_1A3A24A18(v8, v25, v9, v10, v11, v12, v13, v26, v14);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v26;
    *(_BYTE *)(a1 + 80) = v14;
    v15 = a3[6];
    v16 = a1 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = sub_1A3AB4358();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[8];
    *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v20 = (_QWORD *)(a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TTSLoggedSpeechEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_1A3A2C090(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1A3AB4358();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TTSLoggedSpeechEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v23 = *(_QWORD *)(a2 + 64);
  v13 = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain();
  sub_1A3A24A18(v6, v7, v8, v9, v10, v11, v23, v12, v13);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v23;
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v13;
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_1A3AB4358();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TTSLoggedSpeechEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  sub_1A3A24A18(v5, v6, v7, v8, v9, v10, v12, v11, *(_BYTE *)(a2 + 80));
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v30;
  sub_1A3A2C090(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = a3[6];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_1A3AB4358();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v26 = a3[8];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TTSLoggedSpeechEvent(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 16);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v11 = sub_1A3AB4358();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for TTSLoggedSpeechEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_BYTE *)(a2 + 80);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_BYTE *)(a1 + 80);
  v17 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v17;
  v18 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 80) = v7;
  sub_1A3A2C090(v8, v9, v10, v11, v12, v13, v14, v15, v16);
  v19 = a3[6];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_1A3AB4358();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TTSLoggedSpeechEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A2E1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A3AB4358();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TTSLoggedSpeechEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A2E280(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1A3AB4358();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A3A2E2F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A3AB4358();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t method lookup function for TTSSpeechTracer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSSpeechTracer.makeSpeechJobIdentifier()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of TTSSpeechTracer.emit(event:forIdentifier:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t method lookup function for TTSSpeechEventObjc()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for TTSLoggedSpeechEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A3A2E438 + 4 * byte_1A3AC434B[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A3A2E46C + 4 * byte_1A3AC4346[v4]))();
}

uint64_t sub_1A3A2E46C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A2E47CLL);
  return result;
}

uint64_t sub_1A3A2E488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A2E490);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A3A2E494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E49C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSLoggedSpeechEvent.CodingKeys()
{
  return &type metadata for TTSLoggedSpeechEvent.CodingKeys;
}

uint64_t sub_1A3A2E4B8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A3A2E4D8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for TTSSpeechEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TTSSpeechEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1A3A2E5DC + 4 * byte_1A3AC4355[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1A3A2E610 + 4 * byte_1A3AC4350[v4]))();
}

uint64_t sub_1A3A2E610(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E618(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A2E620);
  return result;
}

uint64_t sub_1A3A2E62C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A2E634);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1A3A2E638(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E640(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.CodingKeys()
{
  return &type metadata for TTSSpeechEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.CheckPointCodingKeys()
{
  return &type metadata for TTSSpeechEvent.CheckPointCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.EnqueueCodingKeys()
{
  return &type metadata for TTSSpeechEvent.EnqueueCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.MarkupConversionCodingKeys()
{
  return &type metadata for TTSSpeechEvent.MarkupConversionCodingKeys;
}

uint64_t storeEnumTagSinglePayload for TTSSpeechEvent.RuleRewriteCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A3A2E6E0 + 4 * byte_1A3AC435F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A3A2E714 + 4 * byte_1A3AC435A[v4]))();
}

uint64_t sub_1A3A2E714(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E71C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A2E724);
  return result;
}

uint64_t sub_1A3A2E730(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A2E738);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A3A2E73C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E744(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.RuleRewriteCodingKeys()
{
  return &type metadata for TTSSpeechEvent.RuleRewriteCodingKeys;
}

uint64_t storeEnumTagSinglePayload for TTSSpeechEvent.OtherRewriteCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A3A2E7AC + 4 * byte_1A3AC4369[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A3A2E7E0 + 4 * byte_1A3AC4364[v4]))();
}

uint64_t sub_1A3A2E7E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E7E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A2E7F0);
  return result;
}

uint64_t sub_1A3A2E7FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A2E804);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A3A2E808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.OtherRewriteCodingKeys()
{
  return &type metadata for TTSSpeechEvent.OtherRewriteCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.StartCodingKeys()
{
  return &type metadata for TTSSpeechEvent.StartCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.StartSliceCodingKeys()
{
  return &type metadata for TTSSpeechEvent.StartSliceCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.PauseCodingKeys()
{
  return &type metadata for TTSSpeechEvent.PauseCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.ResumeCodingKeys()
{
  return &type metadata for TTSSpeechEvent.ResumeCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.StopCodingKeys()
{
  return &type metadata for TTSSpeechEvent.StopCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.FinishedCodingKeys()
{
  return &type metadata for TTSSpeechEvent.FinishedCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.ReceivedFirstBufferCodingKeys()
{
  return &type metadata for TTSSpeechEvent.ReceivedFirstBufferCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.PlayedFirstBufferCodingKeys()
{
  return &type metadata for TTSSpeechEvent.PlayedFirstBufferCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.ReceivedStartCodingKeys()
{
  return &type metadata for TTSSpeechEvent.ReceivedStartCodingKeys;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.ReceivedStopCodingKeys()
{
  return &type metadata for TTSSpeechEvent.ReceivedStopCodingKeys;
}

uint64_t _s12TextToSpeech14TTSSpeechEventO20CheckPointCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A3A2E90C + 4 * byte_1A3AC436E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A3A2E92C + 4 * byte_1A3AC4373[v4]))();
}

_BYTE *sub_1A3A2E90C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A3A2E92C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A3A2E934(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A3A2E93C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A3A2E944(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A3A2E94C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.MarkerRecievedCodingKeys()
{
  return &type metadata for TTSSpeechEvent.MarkerRecievedCodingKeys;
}

uint64_t _s12TextToSpeech14TTSSpeechEventO26MarkupConversionCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A3A2E9B4 + 4 * byte_1A3AC437D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A3A2E9E8 + 4 * byte_1A3AC4378[v4]))();
}

uint64_t sub_1A3A2E9E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2E9F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A2E9F8);
  return result;
}

uint64_t sub_1A3A2EA04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A2EA0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A3A2EA10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A2EA18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSSpeechEvent.MarkerConversionCodingKeys()
{
  return &type metadata for TTSSpeechEvent.MarkerConversionCodingKeys;
}

unint64_t sub_1A3A2EA38()
{
  unint64_t result;

  result = qword_1EE6DD8F0[0];
  if (!qword_1EE6DD8F0[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC489C, &type metadata for TTSSpeechEvent.MarkerConversionCodingKeys);
    atomic_store(result, qword_1EE6DD8F0);
  }
  return result;
}

unint64_t sub_1A3A2EA80()
{
  unint64_t result;

  result = qword_1EE6DDB00[0];
  if (!qword_1EE6DDB00[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4954, &type metadata for TTSSpeechEvent.MarkerRecievedCodingKeys);
    atomic_store(result, qword_1EE6DDB00);
  }
  return result;
}

unint64_t sub_1A3A2EAC8()
{
  unint64_t result;

  result = qword_1EE6DE110[0];
  if (!qword_1EE6DE110[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4B4C, &type metadata for TTSSpeechEvent.FinishedCodingKeys);
    atomic_store(result, qword_1EE6DE110);
  }
  return result;
}

unint64_t sub_1A3A2EB10()
{
  unint64_t result;

  result = qword_1EE6DE620[0];
  if (!qword_1EE6DE620[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4CF4, &type metadata for TTSSpeechEvent.StartSliceCodingKeys);
    atomic_store(result, qword_1EE6DE620);
  }
  return result;
}

unint64_t sub_1A3A2EB58()
{
  unint64_t result;

  result = qword_1EE6DE830[0];
  if (!qword_1EE6DE830[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4DAC, &type metadata for TTSSpeechEvent.StartCodingKeys);
    atomic_store(result, qword_1EE6DE830);
  }
  return result;
}

unint64_t sub_1A3A2EBA0()
{
  unint64_t result;

  result = qword_1EE6DEA40[0];
  if (!qword_1EE6DEA40[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4E64, &type metadata for TTSSpeechEvent.OtherRewriteCodingKeys);
    atomic_store(result, qword_1EE6DEA40);
  }
  return result;
}

unint64_t sub_1A3A2EBE8()
{
  unint64_t result;

  result = qword_1EE6DEC50[0];
  if (!qword_1EE6DEC50[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4F1C, &type metadata for TTSSpeechEvent.RuleRewriteCodingKeys);
    atomic_store(result, qword_1EE6DEC50);
  }
  return result;
}

unint64_t sub_1A3A2EC30()
{
  unint64_t result;

  result = qword_1EE6DEE60[0];
  if (!qword_1EE6DEE60[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4FD4, &type metadata for TTSSpeechEvent.MarkupConversionCodingKeys);
    atomic_store(result, qword_1EE6DEE60);
  }
  return result;
}

unint64_t sub_1A3A2EC78()
{
  unint64_t result;

  result = qword_1EE6DF170[0];
  if (!qword_1EE6DF170[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC50DC, &type metadata for TTSSpeechEvent.CheckPointCodingKeys);
    atomic_store(result, qword_1EE6DF170);
  }
  return result;
}

unint64_t sub_1A3A2ECC0()
{
  unint64_t result;

  result = qword_1EE6DF380[0];
  if (!qword_1EE6DF380[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5194, &type metadata for TTSSpeechEvent.CodingKeys);
    atomic_store(result, qword_1EE6DF380);
  }
  return result;
}

unint64_t sub_1A3A2ED08()
{
  unint64_t result;

  result = qword_1EE6DF590[0];
  if (!qword_1EE6DF590[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC524C, &type metadata for TTSLoggedSpeechEvent.CodingKeys);
    atomic_store(result, qword_1EE6DF590);
  }
  return result;
}

unint64_t sub_1A3A2ED50()
{
  unint64_t result;

  result = qword_1EE6DF6A0;
  if (!qword_1EE6DF6A0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC51BC, &type metadata for TTSLoggedSpeechEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DF6A0);
  }
  return result;
}

unint64_t sub_1A3A2ED98()
{
  unint64_t result;

  result = qword_1EE6DF6A8[0];
  if (!qword_1EE6DF6A8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC51E4, &type metadata for TTSLoggedSpeechEvent.CodingKeys);
    atomic_store(result, qword_1EE6DF6A8);
  }
  return result;
}

unint64_t sub_1A3A2EDE0()
{
  unint64_t result;

  result = qword_1EE6DF730;
  if (!qword_1EE6DF730)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC504C, &type metadata for TTSSpeechEvent.CheckPointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DF730);
  }
  return result;
}

unint64_t sub_1A3A2EE28()
{
  unint64_t result;

  result = qword_1EE6DF738[0];
  if (!qword_1EE6DF738[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5074, &type metadata for TTSSpeechEvent.CheckPointCodingKeys);
    atomic_store(result, qword_1EE6DF738);
  }
  return result;
}

unint64_t sub_1A3A2EE70()
{
  unint64_t result;

  result = qword_1EE6DF7C0;
  if (!qword_1EE6DF7C0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4FFC, &type metadata for TTSSpeechEvent.EnqueueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DF7C0);
  }
  return result;
}

unint64_t sub_1A3A2EEB8()
{
  unint64_t result;

  result = qword_1EE6DF7C8[0];
  if (!qword_1EE6DF7C8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5024, &type metadata for TTSSpeechEvent.EnqueueCodingKeys);
    atomic_store(result, qword_1EE6DF7C8);
  }
  return result;
}

unint64_t sub_1A3A2EF00()
{
  unint64_t result;

  result = qword_1EE6DF850;
  if (!qword_1EE6DF850)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4F44, &type metadata for TTSSpeechEvent.MarkupConversionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DF850);
  }
  return result;
}

unint64_t sub_1A3A2EF48()
{
  unint64_t result;

  result = qword_1EE6DF858[0];
  if (!qword_1EE6DF858[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4F6C, &type metadata for TTSSpeechEvent.MarkupConversionCodingKeys);
    atomic_store(result, qword_1EE6DF858);
  }
  return result;
}

unint64_t sub_1A3A2EF90()
{
  unint64_t result;

  result = qword_1EE6DF8E0;
  if (!qword_1EE6DF8E0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4E8C, &type metadata for TTSSpeechEvent.RuleRewriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DF8E0);
  }
  return result;
}

unint64_t sub_1A3A2EFD8()
{
  unint64_t result;

  result = qword_1EE6DF8E8[0];
  if (!qword_1EE6DF8E8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4EB4, &type metadata for TTSSpeechEvent.RuleRewriteCodingKeys);
    atomic_store(result, qword_1EE6DF8E8);
  }
  return result;
}

unint64_t sub_1A3A2F020()
{
  unint64_t result;

  result = qword_1EE6DF970;
  if (!qword_1EE6DF970)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4DD4, &type metadata for TTSSpeechEvent.OtherRewriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DF970);
  }
  return result;
}

unint64_t sub_1A3A2F068()
{
  unint64_t result;

  result = qword_1EE6DF978;
  if (!qword_1EE6DF978)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4DFC, &type metadata for TTSSpeechEvent.OtherRewriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DF978);
  }
  return result;
}

unint64_t sub_1A3A2F0B0()
{
  unint64_t result;

  result = qword_1EE6DFA00;
  if (!qword_1EE6DFA00)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4D1C, &type metadata for TTSSpeechEvent.StartCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFA00);
  }
  return result;
}

unint64_t sub_1A3A2F0F8()
{
  unint64_t result;

  result = qword_1EE6DFA08[0];
  if (!qword_1EE6DFA08[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4D44, &type metadata for TTSSpeechEvent.StartCodingKeys);
    atomic_store(result, qword_1EE6DFA08);
  }
  return result;
}

unint64_t sub_1A3A2F140()
{
  unint64_t result;

  result = qword_1EE6DFA90;
  if (!qword_1EE6DFA90)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4C64, &type metadata for TTSSpeechEvent.StartSliceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFA90);
  }
  return result;
}

unint64_t sub_1A3A2F188()
{
  unint64_t result;

  result = qword_1EE6DFA98[0];
  if (!qword_1EE6DFA98[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4C8C, &type metadata for TTSSpeechEvent.StartSliceCodingKeys);
    atomic_store(result, qword_1EE6DFA98);
  }
  return result;
}

unint64_t sub_1A3A2F1D0()
{
  unint64_t result;

  result = qword_1EE6DFB20;
  if (!qword_1EE6DFB20)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4C14, &type metadata for TTSSpeechEvent.PauseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFB20);
  }
  return result;
}

unint64_t sub_1A3A2F218()
{
  unint64_t result;

  result = qword_1EE6DFB28[0];
  if (!qword_1EE6DFB28[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4C3C, &type metadata for TTSSpeechEvent.PauseCodingKeys);
    atomic_store(result, qword_1EE6DFB28);
  }
  return result;
}

unint64_t sub_1A3A2F260()
{
  unint64_t result;

  result = qword_1EE6DFBB0;
  if (!qword_1EE6DFBB0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4BC4, &type metadata for TTSSpeechEvent.ResumeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFBB0);
  }
  return result;
}

unint64_t sub_1A3A2F2A8()
{
  unint64_t result;

  result = qword_1EE6DFBB8[0];
  if (!qword_1EE6DFBB8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4BEC, &type metadata for TTSSpeechEvent.ResumeCodingKeys);
    atomic_store(result, qword_1EE6DFBB8);
  }
  return result;
}

unint64_t sub_1A3A2F2F0()
{
  unint64_t result;

  result = qword_1EE6DFC40;
  if (!qword_1EE6DFC40)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4B74, &type metadata for TTSSpeechEvent.StopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFC40);
  }
  return result;
}

unint64_t sub_1A3A2F338()
{
  unint64_t result;

  result = qword_1EE6DFC48[0];
  if (!qword_1EE6DFC48[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4B9C, &type metadata for TTSSpeechEvent.StopCodingKeys);
    atomic_store(result, qword_1EE6DFC48);
  }
  return result;
}

unint64_t sub_1A3A2F380()
{
  unint64_t result;

  result = qword_1EE6DFCD0;
  if (!qword_1EE6DFCD0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4ABC, &type metadata for TTSSpeechEvent.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFCD0);
  }
  return result;
}

unint64_t sub_1A3A2F3C8()
{
  unint64_t result;

  result = qword_1EE6DFCD8[0];
  if (!qword_1EE6DFCD8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4AE4, &type metadata for TTSSpeechEvent.FinishedCodingKeys);
    atomic_store(result, qword_1EE6DFCD8);
  }
  return result;
}

unint64_t sub_1A3A2F410()
{
  unint64_t result;

  result = qword_1EE6DFD60;
  if (!qword_1EE6DFD60)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4A6C, &type metadata for TTSSpeechEvent.ReceivedFirstBufferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFD60);
  }
  return result;
}

unint64_t sub_1A3A2F458()
{
  unint64_t result;

  result = qword_1EE6DFD68[0];
  if (!qword_1EE6DFD68[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4A94, &type metadata for TTSSpeechEvent.ReceivedFirstBufferCodingKeys);
    atomic_store(result, qword_1EE6DFD68);
  }
  return result;
}

unint64_t sub_1A3A2F4A0()
{
  unint64_t result;

  result = qword_1EE6DFDF0;
  if (!qword_1EE6DFDF0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4A1C, &type metadata for TTSSpeechEvent.PlayedFirstBufferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFDF0);
  }
  return result;
}

unint64_t sub_1A3A2F4E8()
{
  unint64_t result;

  result = qword_1EE6DFDF8[0];
  if (!qword_1EE6DFDF8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4A44, &type metadata for TTSSpeechEvent.PlayedFirstBufferCodingKeys);
    atomic_store(result, qword_1EE6DFDF8);
  }
  return result;
}

unint64_t sub_1A3A2F530()
{
  unint64_t result;

  result = qword_1EE6DFE80;
  if (!qword_1EE6DFE80)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC49CC, &type metadata for TTSSpeechEvent.ReceivedStartCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFE80);
  }
  return result;
}

unint64_t sub_1A3A2F578()
{
  unint64_t result;

  result = qword_1EE6DFE88[0];
  if (!qword_1EE6DFE88[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC49F4, &type metadata for TTSSpeechEvent.ReceivedStartCodingKeys);
    atomic_store(result, qword_1EE6DFE88);
  }
  return result;
}

unint64_t sub_1A3A2F5C0()
{
  unint64_t result;

  result = qword_1EE6DFF10;
  if (!qword_1EE6DFF10)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC497C, &type metadata for TTSSpeechEvent.ReceivedStopCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFF10);
  }
  return result;
}

unint64_t sub_1A3A2F608()
{
  unint64_t result;

  result = qword_1EE6DFF18[0];
  if (!qword_1EE6DFF18[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC49A4, &type metadata for TTSSpeechEvent.ReceivedStopCodingKeys);
    atomic_store(result, qword_1EE6DFF18);
  }
  return result;
}

unint64_t sub_1A3A2F650()
{
  unint64_t result;

  result = qword_1EE6DFFA0;
  if (!qword_1EE6DFFA0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC48C4, &type metadata for TTSSpeechEvent.MarkerRecievedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6DFFA0);
  }
  return result;
}

unint64_t sub_1A3A2F698()
{
  unint64_t result;

  result = qword_1EE6DFFA8[0];
  if (!qword_1EE6DFFA8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC48EC, &type metadata for TTSSpeechEvent.MarkerRecievedCodingKeys);
    atomic_store(result, qword_1EE6DFFA8);
  }
  return result;
}

unint64_t sub_1A3A2F6E0()
{
  unint64_t result;

  result = qword_1EE6E0030;
  if (!qword_1EE6E0030)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC480C, &type metadata for TTSSpeechEvent.MarkerConversionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6E0030);
  }
  return result;
}

unint64_t sub_1A3A2F728()
{
  unint64_t result;

  result = qword_1EE6E0038[0];
  if (!qword_1EE6E0038[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC4834, &type metadata for TTSSpeechEvent.MarkerConversionCodingKeys);
    atomic_store(result, qword_1EE6E0038);
  }
  return result;
}

unint64_t sub_1A3A2F770()
{
  unint64_t result;

  result = qword_1EE6E00C0;
  if (!qword_1EE6E00C0)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC5104, &type metadata for TTSSpeechEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE6E00C0);
  }
  return result;
}

unint64_t sub_1A3A2F7B8()
{
  unint64_t result;

  result = qword_1EE6E00C8[0];
  if (!qword_1EE6E00C8[0])
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC512C, &type metadata for TTSSpeechEvent.CodingKeys);
    atomic_store(result, qword_1EE6E00C8);
  }
  return result;
}

uint64_t sub_1A3A2F7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTSLoggedSpeechEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A2F840(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for TTSLoggedSpeechEvent() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A2F958(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1A3A2ADB0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for TTSLoggedSpeechEvent() - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = sub_1A3AB54BC();
  __break(1u);
  return result;
}

uint64_t sub_1A3A2FB00()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A3A2FB24()
{
  uint64_t v0;

  return sub_1A3A2A330(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1A3A2FB2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  sub_1A3A2C090(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  sub_1A3A2C090(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t TTSMarkup.SpeechDocument.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 8))(v3);
}

void static TTSMarkup.SpeechDocument.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

unint64_t TTSMarkup.SpeechDocument.attributes.getter()
{
  return sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
}

uint64_t TTSMarkup.SpeechDocument.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.SpeechDocument.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.SpeechDocument.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.SpeechDocument._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.SpeechDocument._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.SpeechDocument._content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.SpeechDocument.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.SpeechDocument.init(_:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;
  _OWORD v21[3];

  *(_QWORD *)&v21[0] = MEMORY[0x1E0DEE9D8];
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x100))();
  v5 = v4;
  if (!(v4 >> 62))
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v15 = a2;
    if (v6)
      goto LABEL_3;
LABEL_17:
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_18:
    swift_bridgeObjectRelease_n();
    v19 = sub_1A39A4820(&qword_1EE6D2BE0);
    v20 = &protocol witness table for <A> [A];

    *(_QWORD *)&v18 = v9;
    result = sub_1A39A1AB8(&v18, (uint64_t)v21 + 8);
    v14 = v21[1];
    *v15 = v21[0];
    v15[1] = v14;
    v15[2] = v21[2];
    return result;
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v6 = result;
  v15 = a2;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1A85960B8](v8, v5);
      else
        v10 = *(id *)(v5 + 8 * v8 + 32);
      v11 = v10;
      sub_1A39D518C((uint64_t)&v16);

      if (v17)
      {
        sub_1A39A1AB8(&v16, (uint64_t)&v18);
        sub_1A39A1AB8(&v18, (uint64_t)&v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1A39BFBD8(0, v9[2] + 1, 1, v9);
        v13 = v9[2];
        v12 = v9[3];
        if (v13 >= v12 >> 1)
          v9 = sub_1A39BFBD8((_QWORD *)(v12 > 1), v13 + 1, 1, v9);
        v9[2] = v13 + 1;
        sub_1A39A1AB8(&v16, (uint64_t)&v9[5 * v13 + 4]);
      }
      else
      {
        sub_1A39B11F4((uint64_t)&v16, &qword_1EE6D2B60);
      }
      ++v8;
    }
    while (v6 != v8);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t TTSMarkup.SpeechDocument.init(_:)@<X0>(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = MEMORY[0x1E0DEE9D8];
  return a1();
}

uint64_t TTSMarkup.SpeechDocument.init(ssml:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  _BYTE v8[24];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for SSMLParser();
  v3 = static SSMLParser.parseRootElement(ssml:)();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_1A39D518C((uint64_t)v8);
    if (v9)
    {
      sub_1A39A4820(&qword_1EE6D2B78);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if ((_QWORD)v10)
        {

          v13 = v10;
          v14 = v11;
          v15 = v12;
          result = swift_bridgeObjectRelease();
          v5 = v14;
          *(_OWORD *)a1 = v13;
          *(_OWORD *)(a1 + 16) = v5;
          *(_OWORD *)(a1 + 32) = v15;
          return result;
        }
      }
      else
      {
        v11 = 0u;
        v12 = 0u;
        v10 = 0u;
      }
    }
    else
    {
      sub_1A39B11F4((uint64_t)v8, &qword_1EE6D2B60);
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
    }
    sub_1A39B11F4((uint64_t)&v10, &qword_1EE6D3B70);
    *(_QWORD *)&v13 = 0;
    *((_QWORD *)&v13 + 1) = 0xE000000000000000;
    sub_1A3AB52AC();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v13 = 0xD000000000000026;
    *((_QWORD *)&v13 + 1) = 0x80000001A3AF1700;
    LOBYTE(v10) = 0;
    SSMLTag.rawValue.getter();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    v6 = v13;
    sub_1A39A8E44();
    swift_allocError();
    *v7 = v6;
    swift_willThrow();

  }
  return swift_bridgeObjectRelease();
}

Swift::String __swiftcall TTSMarkup.SpeechDocument.asSSML()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = TTSMarkupSpeech.ssml.getter((uint64_t)&type metadata for TTSMarkup.SpeechDocument, (uint64_t)&protocol witness table for TTSMarkup.SpeechDocument);
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall TTSMarkup.SpeechDocument.asSwiftSpeech()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  type metadata accessor for StringStream();
  v0 = StringStream.__allocating_init()();
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 88))(v0);
  v3 = v2;
  swift_release();
  v4 = v1;
  v5 = v3;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

float sub_1A3A30148()
{
  return 225.0;
}

float sub_1A3A30154()
{
  return 50.0;
}

float sub_1A3A30160()
{
  return 500.0;
}

float sub_1A3A3016C()
{
  return 41.0;
}

Swift::String __swiftcall TTSMarkup.SpeechDocument.asPlainTalk(normalSpeakingRate:minSpeakingRate:maxSpeakingRate:defaultVoiceMidiPitch:)(Swift::Float normalSpeakingRate, Swift::Float minSpeakingRate, Swift::Float maxSpeakingRate, Swift::Float defaultVoiceMidiPitch)
{
  uint64_t v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  Swift::String result;
  _DWORD v19[6];
  uint64_t v20;
  uint64_t v21;
  char v22[8];

  type metadata accessor for StringStream();
  v9 = StringStream.__allocating_init()();
  sub_1A39A4820(&qword_1EE6D3960);
  v20 = v9;
  swift_retain();
  v10 = FormattedStream.__allocating_init(_:)((uint64_t)&v20);
  sub_1A39C6584((uint64_t)v10, (uint64_t)&v20);
  sub_1A3A305DC((uint64_t)&v21, (uint64_t)v22);
  sub_1A3A305DC((uint64_t)v22, (uint64_t)v19);
  *(Swift::Float *)&v19[2] = normalSpeakingRate;
  *(Swift::Float *)&v19[3] = minSpeakingRate;
  *(Swift::Float *)&v19[4] = maxSpeakingRate;
  *(Swift::Float *)&v19[5] = defaultVoiceMidiPitch;
  v11 = sub_1A39A4820(&qword_1EE6D3B80);
  v12 = TTSMarkupVisitor.visit(_:)(v4, v11, (uint64_t)&off_1E4A98760);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v12);
  v15 = v14;
  swift_release();
  swift_release();
  v16 = v13;
  v17 = v15;
  result._object = v17;
  result._countAndFlagsBits = v16;
  return result;
}

uint64_t sub_1A3A30288()
{
  uint64_t v0;

  v0 = sub_1A39A4820(&qword_1EE6D3B88);
  sub_1A39AB688(v0, qword_1EE6E0158);
  sub_1A39AAC98(v0, (uint64_t)qword_1EE6E0158);
  sub_1A39A4820(&qword_1EE6D3B98);
  return sub_1A3AB4694();
}

uint64_t static TTSMarkup.SpeechDocument.vocalizerEndingMarkupRegex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EE6E0150 != -1)
    swift_once();
  v2 = sub_1A39A4820(&qword_1EE6D3B88);
  v3 = sub_1A39AAC98(v2, (uint64_t)qword_1EE6E0158);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static TTSMarkup.SpeechDocument.vocalizerEndingMarkupRegex.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1EE6E0150 != -1)
    swift_once();
  v2 = sub_1A39A4820(&qword_1EE6D3B88);
  v3 = sub_1A39AAC98(v2, (uint64_t)qword_1EE6E0158);
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static TTSMarkup.SpeechDocument.vocalizerEndingMarkupRegex.modify())()
{
  uint64_t v0;

  if (qword_1EE6E0150 != -1)
    swift_once();
  v0 = sub_1A39A4820(&qword_1EE6D3B88);
  sub_1A39AAC98(v0, (uint64_t)qword_1EE6E0158);
  swift_beginAccess();
  return j__swift_endAccess;
}

Swift::String __swiftcall TTSMarkup.SpeechDocument.asVocalizerMarkup(normalVoiceMidi:defaultRate:defaultPitch:defaultVolume:language:)(Swift::Float normalVoiceMidi, Swift::Int defaultRate, Swift::Int defaultPitch, Swift::Int defaultVolume, Swift::String language)
{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String result;
  int64x2_t v20;
  Swift::Int v21;
  Swift::Int v22;
  Swift::Int v23;
  Swift::Float v24;

  type metadata accessor for StringStream();
  v10 = StringStream.__allocating_init()();
  sub_1A39A4820(&qword_1EE6D3960);
  v20.i64[0] = v10;
  swift_retain();
  v11 = FormattedStream.__allocating_init(_:)((uint64_t)&v20);
  VocalizerMarkupWriter.init(stream:)((uint64_t)v11, &v20);
  v21 = defaultRate;
  v22 = defaultPitch;
  v23 = defaultVolume;
  v24 = normalVoiceMidi;
  v12 = sub_1A39A4820(&qword_1EE6D3B90);
  v13 = VocalizerMarkupWriter.visit(_:)(v5, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v13);
  v16 = v15;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v17 = v14;
  v18 = v16;
  result._object = v18;
  result._countAndFlagsBits = v17;
  return result;
}

uint64_t sub_1A3A305DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D3B78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TTSMarkup.SpeechDocument()
{
  return &type metadata for TTSMarkup.SpeechDocument;
}

uint64_t sub_1A3A30634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjCClassFromMetadata;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t result;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v0 = sub_1A3AB431C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A39A4820(&qword_1EE6D3BA0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A3AB422C();
  swift_allocObject();
  v7 = sub_1A3AB4220();
  type metadata accessor for TTSPronunciationUtils();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v9 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v10 = (void *)sub_1A3AB4958();
  v11 = (void *)sub_1A3AB4958();
  v12 = objc_msgSend(v9, sel_URLForResource_withExtension_, v10, v11);

  if (v12)
  {
    sub_1A3AB42F8();

    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v6, v3, v0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v0);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0);
    if ((_DWORD)result != 1)
    {
      sub_1A3AB4304();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
      v14 = objc_allocWithZone((Class)TTSStreamingZipReader);
      v15 = (void *)sub_1A3AB4958();
      swift_bridgeObjectRelease();
      v16 = (void *)sub_1A3AB4958();
      objc_msgSend(v14, sel_initWithPath_andPassword_, v15, v16);

      return v7;
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A308AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  char v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v49 = a7;
  v50 = a4;
  v51 = a3;
  v13 = sub_1A39A4820(&qword_1EE6D3BA0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v47 - v17;
  sub_1A3AB4310();
  v19 = sub_1A3AB431C();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19) == 1)
    return sub_1A39B11F4((uint64_t)v18, &qword_1EE6D3BA0);
  v48 = a8;
  v52 = a5;
  v53 = a6;
  v23 = (_QWORD *)sub_1A3AB42C8();
  v24 = *(void (**)(char *, uint64_t))(v20 + 8);
  v24(v18, v19);
  if (!v23[2])
    return swift_bridgeObjectRelease();
  v25 = v23[4];
  v26 = v23[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A3AB4310();
  if (v21(v16, 1, v19) == 1)
  {
    swift_bridgeObjectRelease();
    return sub_1A39B11F4((uint64_t)v16, &qword_1EE6D3BA0);
  }
  v27 = sub_1A3AB42C8();
  v24(v16, v19);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v29 = v27 + 16 * v28;
    v31 = *(_QWORD *)(v29 + 16);
    v30 = *(_QWORD *)(v29 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v25 == v52 && v26 == v53)
    {
      swift_bridgeObjectRelease();
      v34 = v48;
    }
    else
    {
      v33 = sub_1A3AB5654();
      swift_bridgeObjectRelease();
      v34 = v48;
      if ((v33 & 1) == 0)
        return swift_bridgeObjectRelease();
    }
    if (v31 == 0x6C75722E69726973 && v30 == 0xEB00000000626465)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v36 = sub_1A3AB5654();
      result = swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
        return result;
    }
    v37 = (uint64_t *)(v49 + 16);
    v56 = v51(result);
    v57 = v38;
    v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v34 + 104))(&v56, a9, a10);
    swift_beginAccess();
    *v37 = v39;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v40 = *v37;
    if (!*v37)
      return sub_1A3A0E3AC(v56, v57);
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain_n();
      result = sub_1A3AB5480();
      v41 = result;
      if (result)
        goto LABEL_26;
    }
    else
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n();
      if (v41)
      {
LABEL_26:
        if (v41 < 1)
        {
          __break(1u);
          return result;
        }
        v42 = 0;
        do
        {
          if ((v40 & 0xC000000000000001) != 0)
            v43 = (id)MEMORY[0x1A85960B8](v42, v40);
          else
            v43 = *(id *)(v40 + 8 * v42 + 32);
          v44 = v43;
          ++v42;
          v54 = 0x5F69726973;
          v55 = 0xE500000000000000;
          sub_1A3AB4A84();
          sub_1A3AB4A84();
          v45 = objc_msgSend(v44, sel_identifier);
          sub_1A3AB497C();

          sub_1A3AB4A84();
          swift_bridgeObjectRelease();
          v46 = (void *)sub_1A3AB4958();
          swift_bridgeObjectRelease();
          objc_msgSend(v44, sel_setIdentifier_, v46);

        }
        while (v41 != v42);
      }
    }
    swift_bridgeObjectRelease();
    sub_1A3A0E3AC(v56, v57);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A30D1C(uint64_t a1, uint64_t a2, const void *a3)
{
  void (*v4)(uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v4 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t))(a1 + 32);
  v5 = sub_1A3AB497C();
  v7 = v6;
  v8 = _Block_copy(a3);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  swift_retain();
  v4(v5, v7, sub_1A3A317F4, v9);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1A3A30DB8(uint64_t a1)
{
  id v1;
  uint64_t v2;

  v1 = (id)(*(uint64_t (**)(void))(a1 + 16))();
  v2 = sub_1A3AB4334();

  return v2;
}

uint64_t sub_1A3A30E04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v14[6];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9D8];
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = v8;
  v14[4] = sub_1A3A316AC;
  v14[5] = v9;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_1A3A30D1C;
  v14[3] = &unk_1E4A9F8A0;
  v10 = _Block_copy(v14);
  swift_bridgeObjectRetain();
  swift_retain();
  v11 = a4;
  swift_retain();
  swift_release();
  objc_msgSend(v11, sel_enumerateFiles_, v10);
  _Block_release(v10);
  swift_beginAccess();
  v12 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v12;
}

uint64_t sub_1A3A30F4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD *v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v46;

  v41 = a8;
  v45 = a3;
  v46 = a7;
  v44 = a4;
  v8 = sub_1A39A4820(&qword_1EE6D3BA8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PronunciationRuleSet();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v42 = (uint64_t)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v43 = (uint64_t)&v39 - v15;
  v16 = sub_1A39A4820(&qword_1EE6D3BA0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A3AB4310();
  v19 = sub_1A3AB431C();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    return sub_1A39B11F4((uint64_t)v18, &qword_1EE6D3BA0);
  v40 = v12;
  v22 = (_QWORD *)sub_1A3AB42C8();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  if (!v22[2])
    return swift_bridgeObjectRelease();
  v24 = v22[4];
  v23 = v22[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A3AB49F4();
  sub_1A3AB49F4();
  v25 = sub_1A3AB4AFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v26 = v40;
  }
  else
  {
    v27 = v24 == 42 && v23 == 0xE100000000000000;
    v26 = v40;
    if (v27)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = sub_1A3AB5654();
      result = swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
        return result;
    }
  }
  result = sub_1A3AB4B08();
  if ((result & 1) != 0)
  {
    v29 = v45();
    v31 = v30;
    sub_1A3A317FC();
    sub_1A3AB4214();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v11);
    v32 = v43;
    sub_1A39C3F90((uint64_t)v10, v43);
    if (*(_BYTE *)(v32 + *(int *)(v11 + 44)) == 1)
    {
      v33 = v42;
      v34 = (_QWORD **)(v41 + 16);
      sub_1A39C3D68(v32, v42);
      swift_beginAccess();
      v35 = *v34;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v34 = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = (_QWORD *)sub_1A3A31378(0, v35[2] + 1, 1, v35);
        *v34 = v35;
      }
      v38 = v35[2];
      v37 = v35[3];
      if (v38 >= v37 >> 1)
      {
        v35 = (_QWORD *)sub_1A3A31378(v37 > 1, v38 + 1, 1, v35);
        *v34 = v35;
      }
      v35[2] = v38 + 1;
      sub_1A39C3F90(v33, (uint64_t)v35+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v38);
      sub_1A3A0E3AC(v29, v31);
      return sub_1A39C3DAC(v32);
    }
    else
    {
      sub_1A39C3DAC(v32);
      return sub_1A3A0E3AC(v29, v31);
    }
  }
  return result;
}

uint64_t sub_1A3A31368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1A3A314EC(a1, a2, a3, a4, *(void **)(v4 + 8));
}

uint64_t sub_1A3A31370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1A3A30E04(a1, a2, *(_QWORD *)v2, *(void **)(v2 + 8));
}

size_t sub_1A3A31378(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1A39A4820(&qword_1EE6D2C48);
  v10 = *(_QWORD *)(type metadata accessor for PronunciationRuleSet() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for PronunciationRuleSet() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

uint64_t sub_1A3A314EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[6];

  type metadata accessor for TTSSQLiteReader();
  v10 = sub_1A3A3BBF8();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v11;
  v12[5] = v10;
  v12[6] = a3;
  v12[7] = a4;
  v16[4] = sub_1A3A31880;
  v16[5] = v12;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1107296256;
  v16[2] = sub_1A3A30D1C;
  v16[3] = &unk_1E4A9F958;
  v13 = _Block_copy(v16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(a5, sel_enumerateFiles_, v13);
  swift_release();
  _Block_release(v13);
  swift_beginAccess();
  v14 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v14;
}

uint64_t sub_1A3A3164C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A31670()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A316AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t *v4;

  return sub_1A3A30F4C(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[6]);
}

uint64_t sub_1A3A316BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A3A316CC()
{
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for TTSEmbeddedResourceRulesetLoader(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  v4 = v3;
  return a1;
}

void destroy for TTSEmbeddedResourceRulesetLoader(uint64_t a1)
{
  swift_release();

}

_QWORD *assignWithCopy for TTSEmbeddedResourceRulesetLoader(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for TTSEmbeddedResourceRulesetLoader(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for TTSEmbeddedResourceRulesetLoader()
{
  return &type metadata for TTSEmbeddedResourceRulesetLoader;
}

uint64_t sub_1A3A317D0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A3A317F4()
{
  uint64_t v0;

  return sub_1A3A30DB8(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1A3A317FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D3BB0;
  if (!qword_1EE6D3BB0)
  {
    v1 = type metadata accessor for PronunciationRuleSet();
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for PronunciationRuleSet, v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D3BB0);
  }
  return result;
}

uint64_t sub_1A3A31844()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A31880(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t *v4;

  return sub_1A3A308AC(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
}

uint64_t sub_1A3A318BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_1A3A31920(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t sub_1A3A3198C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 104);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_1A3A319F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t sub_1A3A31A5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_1A3A31AC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*sub_1A3A31B2C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A3A31B70()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A3A31BB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*sub_1A3A31C08())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A31C4C()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A3A31C94(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*sub_1A3A31CE4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A31D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  sub_1A3A31D74(a1, a2);
  return v4;
}

uint64_t sub_1A3A31D74(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  uint64_t result;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;

  v3 = v2;
  v6 = *(_QWORD *)v2;
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v8 = *(_QWORD **)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v18 - v12;
  *(_QWORD *)&v3[*(_QWORD *)(v6 + 120)] = 0;
  *(_QWORD *)&v3[*(_QWORD *)(*(_QWORD *)v3 + 128)] = 0;
  v14 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v14((char *)&v18 - v12, a1, v7);
  v14(v11, a2, v7);
  LOBYTE(v6) = sub_1A3AB4940();
  v15 = (void (*)(char *, uint64_t))v8[1];
  v15(v11, v7);
  result = ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
  if ((v6 & 1) != 0)
  {
    v17 = (void (*)(char *, uint64_t, uint64_t))v8[4];
    v17(&v3[*(_QWORD *)(*(_QWORD *)v3 + 96)], a1, v7);
    v14(&v3[*(_QWORD *)(*(_QWORD *)v3 + 104)], a2, v7);
    v17(&v3[*(_QWORD *)(*(_QWORD *)v3 + 112)], a2, v7);
    return (uint64_t)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A3A31ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  v6 = sub_1A3AB4A84();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 136))(v6);
  sub_1A3AB5648();
  v7 = *(void (**)(char *, uint64_t))(v3 + 8);
  v7(v5, v2);
  v8 = sub_1A3AB4A84();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 160))(v8);
  sub_1A3AB5648();
  v7(v5, v2);
  v9 = sub_1A3AB4A84();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 184))(v9);
  sub_1A3AB5648();
  v7(v5, v2);
  sub_1A3AB4A84();
  return v11[0];
}

uint64_t IntervalNode.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
  v2(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96), v1);
  v2(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104), v1);
  v2(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112), v1);
  swift_release();
  swift_release();
  return v0;
}

uint64_t IntervalNode.__deallocating_deinit()
{
  IntervalNode.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A320C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
}

_QWORD *IntervalNode<>.asRange()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v1 = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v0 + 136))(&v5);
  v2 = v5;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *))(*(_QWORD *)v0 + 160))(&v4, v1);
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else if (v4 + 1 >= v2)
  {
    return (_QWORD *)v2;
  }
  __break(1u);
  return result;
}

_QWORD *IntervalNode<>.asClosedRange()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v1 = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v0 + 136))(&v5);
  v2 = v5;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *))(*(_QWORD *)v0 + 160))(&v4, v1);
  if (v4 >= v2)
    return (_QWORD *)v2;
  __break(1u);
  return result;
}

uint64_t static IntervalNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;

  v5 = *(_QWORD *)(v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v20 - v11;
  v13 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 136))();
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 136))(v13);
  v14 = sub_1A3AB494C();
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v16 = ((uint64_t (*)(char *, uint64_t))v15)(v12, v5);
  if ((v14 & 1) != 0)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 160))(v17);
    v18 = sub_1A3AB494C();
    v15(v9, v5);
    v15(v12, v5);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t static IntervalNode.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1A3A323A4(a1, a2, (uint64_t (*)(char *, char *, uint64_t, _QWORD))MEMORY[0x1E0DEA3C0]);
}

uint64_t static IntervalNode.<= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A3A32334(a1, a2, static IntervalNode.< infix(_:_:), a4);
}

uint64_t type metadata accessor for IntervalNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntervalNode);
}

uint64_t static IntervalNode.>= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A3A32334(a1, a2, static IntervalNode.> infix(_:_:), a4);
}

uint64_t sub_1A3A32334(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for IntervalNode(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4);
  if ((a3(a1, a2) & 1) != 0)
    return 1;
  else
    return static IntervalNode.== infix(_:_:)(a1, a2) & 1;
}

uint64_t static IntervalNode.> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1A3A323A4(a1, a2, (uint64_t (*)(char *, char *, uint64_t, _QWORD))MEMORY[0x1E0DEA3B8]);
}

uint64_t sub_1A3A323A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v6 = *(_QWORD *)(v3 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v17 - v12;
  v14 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 136))();
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 136))(v14);
  LOBYTE(a3) = a3(v13, v10, v6, *(_QWORD *)(v3 + 88));
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  v15(v13, v6);
  return a3 & 1;
}

void sub_1A3A32494()
{
  JUMPOUT(0x1A8597738);
}

uint64_t sub_1A3A324A4(uint64_t *a1, uint64_t *a2)
{
  return static IntervalNode.< infix(_:_:)(*a1, *a2);
}

uint64_t sub_1A3A324B0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static IntervalNode.<= infix(_:_:)(*a1, *a2, a3, a4);
}

uint64_t sub_1A3A324BC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static IntervalNode.>= infix(_:_:)(*a1, *a2, a3, a4);
}

uint64_t sub_1A3A324C8(uint64_t *a1, uint64_t *a2)
{
  return static IntervalNode.> infix(_:_:)(*a1, *a2);
}

uint64_t sub_1A3A324D4(uint64_t *a1, uint64_t *a2)
{
  return static IntervalNode.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_1A3A324E0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for IntervalNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IntervalNode.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

void sub_1A3A32578()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t sub_1A3A32588()
{
  MEMORY[0x1A85960F4]();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A325A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for ManagedCriticalState.LockedBuffer(0, a2, a3, a4);
  v6 = sub_1A3AB5300();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v6;
}

uint64_t type metadata accessor for ManagedCriticalState.LockedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedCriticalState.LockedBuffer);
}

uint64_t sub_1A3A32628@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x1E0DEC528]) - 8) + 16))(a2, v3);
}

void sub_1A3A32680(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = a3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)a3 + 16);
  v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

uint64_t getEnumTagSinglePayload for Lock(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Lock(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Lock()
{
  return &type metadata for Lock;
}

uint64_t type metadata accessor for ManagedCriticalState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedCriticalState);
}

uint64_t sub_1A3A327A8()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE6D24A0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EE6D24A0);
  }
}

uint64_t EloquenceProsody.rate.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EloquenceProsody.rate.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*EloquenceProsody.rate.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceProsody.pitch.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t EloquenceProsody.pitch.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*EloquenceProsody.pitch.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceProsody.volume.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t EloquenceProsody.volume.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*EloquenceProsody.volume.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceMarkupWriter.voiceMinRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t EloquenceMarkupWriter.voiceMinRate.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*EloquenceMarkupWriter.voiceMinRate.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceMarkupWriter.voiceMaxRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t EloquenceMarkupWriter.voiceMaxRate.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*EloquenceMarkupWriter.voiceMaxRate.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceMarkupWriter.voiceNormalRate.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t EloquenceMarkupWriter.voiceNormalRate.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*EloquenceMarkupWriter.voiceNormalRate.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceMarkupWriter.voiceNormalPitch.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t EloquenceMarkupWriter.voiceNormalPitch.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*EloquenceMarkupWriter.voiceNormalPitch.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceMarkupWriter.voiceNormalVolume.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t EloquenceMarkupWriter.voiceNormalVolume.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*EloquenceMarkupWriter.voiceNormalVolume.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceMarkupWriter.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EloquenceMarkupWriter.language.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*EloquenceMarkupWriter.language.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t EloquenceMarkupWriter.phonemeMappings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EloquenceMarkupWriter.phonemeMappings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*EloquenceMarkupWriter.phonemeMappings.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

__n128 EloquenceMarkupWriter.defaultProsody.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 40);
  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  return result;
}

__n128 sub_1A3A32A00@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 72);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v2 + 48);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(a1 + 16) = v3;
    sub_1A3A33A84(0, 1);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 40);
    result = *(__n128 *)(v1 + 24);
    *(__n128 *)a1 = result;
    *(_QWORD *)(a1 + 16) = v5;
  }
  return result;
}

float EloquenceMarkupWriter.standardVoiceMidiPitch.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 80);
}

void EloquenceMarkupWriter.standardVoiceMidiPitch.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 80) = a1;
}

uint64_t (*EloquenceMarkupWriter.standardVoiceMidiPitch.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

double EloquenceMarkupWriter.init(stream:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  double result;

  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 8) = xmmword_1A3AC5B40;
  *(_OWORD *)(a2 + 24) = xmmword_1A3AC5B30;
  *(_QWORD *)&result = 92;
  *(_OWORD *)(a2 + 40) = xmmword_1A3AC5B50;
  *(_QWORD *)(a2 + 56) = 0xE500000000000000;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v4;
  *(_DWORD *)(a2 + 80) = 1110441984;
  return result;
}

void EloquenceMarkupWriter.visit(_:)()
{
  uint64_t *v0;
  double v1;
  uint64_t v2;

  v1 = sub_1A3A82C8C() * 1000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
  {
    v2 = *v0;
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 208))(7364640, 0xE300000000000000);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t EloquenceMarkupWriter.visit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  char v7;
  uint64_t result;
  char v9;
  _BYTE v10[56];
  _BYTE v11[8];
  char v12;

  v3 = v2;
  if (*(_BYTE *)(a1 + 8) == 14)
  {
    sub_1A39C1878(a1, (uint64_t)v11);
  }
  else
  {
    v11[0] = *(_BYTE *)(a1 + 8);
    v10[0] = 0;
    sub_1A39C192C();
    v6 = sub_1A3AB494C();
    sub_1A39C1878(a1, (uint64_t)v11);
    if ((v6 & 1) != 0)
    {
      sub_1A39C18B4((uint64_t)v11);
      sub_1A39C1878(a1, (uint64_t)v10);
      goto LABEL_8;
    }
  }
  if (v12 == 14)
  {
    sub_1A39C18B4((uint64_t)v11);
    sub_1A39C1878(a1, (uint64_t)v10);
    goto LABEL_9;
  }
  v10[0] = v12;
  sub_1A39C192C();
  v7 = sub_1A3AB494C();
  sub_1A39C18B4((uint64_t)v11);
  sub_1A39C1878(a1, (uint64_t)v10);
  if ((v7 & 1) != 0)
  {
LABEL_8:
    sub_1A39C18B4((uint64_t)v10);
LABEL_12:
    (*(void (**)(uint64_t, unint64_t))(**(_QWORD **)v3 + 208))(0x203273746020, 0xE600000000000000);
    TTSMarkupVisitor.visit(_:)((_QWORD *)(a1 + 16), a2, (uint64_t)&protocol witness table for EloquenceMarkupWriter<A>);
    return (*(uint64_t (**)(uint64_t, unint64_t))(**(_QWORD **)v3 + 208))(0x203073746020, 0xE600000000000000);
  }
LABEL_9:
  if (v10[8] == 14)
    return sub_1A39C18B4((uint64_t)v10);
  sub_1A39C192C();
  v9 = sub_1A3AB494C();
  result = sub_1A39C18B4((uint64_t)v10);
  if ((v9 & 1) != 0)
    goto LABEL_12;
  return result;
}

void EloquenceMarkupWriter.visit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  int v52;

  v5 = *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 32);
  if (*(unsigned __int8 *)(a1 + 60) >> 2 > 0x3EuLL)
  {
    v6 = 0;
  }
  else
  {
    LODWORD(v46) = *(_DWORD *)(a1 + 56);
    BYTE4(v46) = BYTE4(v5);
    v6 = sub_1A3A33150(v2[4], *((float *)v2 + 20));
  }
  v7 = *(unsigned int *)(a1 + 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 52) << 32);
  if (*(unsigned __int8 *)(a1 + 52) == 255)
  {
    v8 = 0;
  }
  else
  {
    LODWORD(v46) = *(_DWORD *)(a1 + 48);
    BYTE4(v46) = BYTE4(v7) & 1;
    v8 = sub_1A3A3333C(v2[1], v2[3], v2[2]);
  }
  v9 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  if (*(unsigned __int8 *)(a1 + 68) != 255)
  {
    sub_1A39C9214();
    LODWORD(v46) = v9;
    BYTE4(v46) = BYTE4(v9) & 1;
    v10 = sub_1A39C9214() * (float)v2[5];
    if ((~LODWORD(v10) & 0x7F800000) != 0)
    {
      if (v10 > -9.2234e18)
      {
        if (v10 < 9.2234e18)
        {
          v11 = (uint64_t)v10;
          goto LABEL_13;
        }
LABEL_43:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_43;
  }
  v11 = 0;
LABEL_13:
  v12 = v5 >> 34;
  v13 = HIDWORD(v9);
  if (HIDWORD(v7) < 0xFF)
    goto LABEL_19;
  if (v12 >= 0x3F && v13 >= 0xFF)
  {
    TTSMarkupVisitor.visit(_:)((_QWORD *)(a1 + 8), a2, (uint64_t)&protocol witness table for EloquenceMarkupWriter<A>);
    return;
  }
  v14 = v2[9];
  if (*(_QWORD *)(v14 + 16))
  {
    v8 = *(_QWORD *)(v14 + 32);
LABEL_19:
    if (v12 < 0x3F)
      goto LABEL_24;
    goto LABEL_20;
  }
  v8 = v2[3];
  if (v12 < 0x3F)
    goto LABEL_24;
LABEL_20:
  v15 = v2[9];
  if (*(_QWORD *)(v15 + 16))
    v6 = *(_QWORD *)(v15 + 40);
  else
    v6 = v2[4];
LABEL_24:
  v16 = (_QWORD *)v2[9];
  v17 = v2[5];
  v18 = v16[2];
  v20 = v13 > 0xFE || v18 == 0;
  if (v13 >= 0xFF)
    v21 = v2[5];
  else
    v21 = v11;
  if (v13 >= 0xFF && v18)
  {
    v20 = 0;
    v21 = v16[6];
  }
  v22 = *v2;
  v23 = *(_OWORD *)(v2 + 1);
  v25 = v2[3];
  v24 = v2[4];
  v26 = v2[6];
  v27 = *(_OWORD *)(v2 + 7);
  v28 = *((_DWORD *)v2 + 20);
  v29 = v24;
  v30 = v2[5];
  v31 = v25;
  if (!v20)
  {
    v29 = v16[5];
    v30 = v16[6];
    v31 = v16[4];
  }
  v38 = v30;
  v45 = v21;
  v46 = v22;
  v47 = v23;
  *(_QWORD *)&v48 = v25;
  *((_QWORD *)&v48 + 1) = v24;
  *(_QWORD *)&v49 = v17;
  *((_QWORD *)&v49 + 1) = v26;
  v50 = v27;
  v51 = v16;
  v52 = v28;
  v43 = v8;
  v44 = v6;
  if (!v20)
  {
    v24 = v16[5];
    v17 = v16[6];
    v25 = v16[4];
  }
  *(_QWORD *)&v41 = v25;
  *((_QWORD *)&v41 + 1) = v24;
  v42 = v17;
  sub_1A3A33464(&v43, (uint64_t *)&v41);
  sub_1A3A33838(0, 0, v8, v6, v21);
  TTSMarkupVisitor.visit(_:)((_QWORD *)(a1 + 8), a2, (uint64_t)&protocol witness table for EloquenceMarkupWriter<A>);
  v32 = *v2;
  v33 = v2[7];
  v34 = v2[8];
  v35 = (_QWORD *)v2[9];
  v36 = *((_DWORD *)v2 + 20);
  v37 = *(_OWORD *)(v2 + 3);
  v47 = *(_OWORD *)(v2 + 1);
  v48 = v37;
  v49 = *(_OWORD *)(v2 + 5);
  *(_QWORD *)&v50 = v33;
  *((_QWORD *)&v50 + 1) = v34;
  v51 = v35;
  v52 = v36;
  v43 = v31;
  v44 = v29;
  v45 = v38;
  v46 = v32;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1A3A32A00((uint64_t)&v41);
  v39 = v41;
  v40 = v42;
  sub_1A3A33464(&v43, (uint64_t *)&v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t sub_1A3A33150(uint64_t a1, float a2)
{
  unsigned int *v2;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  float v9;

  v5 = *((unsigned __int8 *)v2 + 4);
  v6 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
  sub_1A39AABB0(a2);
  if (!(v5 >> 6))
    __asm { BR              X11 }
  if (v5 >> 6 == 1)
  {
    sub_1A39AABE4(*(float *)&v6);
    return sub_1A3A33150(a1, a2);
  }
  v7 = HIDWORD(v6) & 0x3F;
  if (!(_DWORD)v7)
    return sub_1A3A33150(a1, a2);
  if ((_DWORD)v7 == 1)
  {
    sub_1A3A4934C(-12.0, 12.0, 0.0, 200.0, *(float *)&v6);
    return sub_1A3A33150(a1, a2);
  }
  if (*(float *)&v6 < 0.0)
  {
    v9 = sub_1A3A4934C(-100.0, 0.0, 40.0, (float)a1, *(float *)&v6);
    if ((~LODWORD(v9) & 0x7F800000) != 0)
    {
      if (v9 > -9.2234e18)
      {
        if (v9 >= 9.2234e18)
        {
          __break(1u);
          JUMPOUT(0x1A3A332B0);
        }
        return (uint64_t)v9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  if (*(float *)&v6 > 0.0)
  {
    v9 = sub_1A3A4934C(0.0, 100.0, (float)a1, 100.0, *(float *)&v6);
    if ((~LODWORD(v9) & 0x7F800000) != 0)
    {
      if (v9 > -9.2234e18)
      {
        if (v9 < 9.2234e18)
          return (uint64_t)v9;
LABEL_24:
        __break(1u);
        JUMPOUT(0x1A3A33328);
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  return a1;
}

uint64_t sub_1A3A3333C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;

  v4 = *(float *)v3;
  if ((*(_BYTE *)(v3 + 4) & 1) == 0)
    __asm { BR              X10 }
  v5 = *(float *)v3;
  v6 = v4 <= 1.0;
  if (v4 >= 1.0)
  {
LABEL_9:
    if (v6)
      return a2;
    v7 = sub_1A3A4934C(1.0, 4.0, (float)a2, (float)a3, v5);
    if ((~LODWORD(v7) & 0x7F800000) != 0)
    {
      if (v7 > -9.2234e18)
      {
        if (v7 < 9.2234e18)
          return (uint64_t)v7;
LABEL_21:
        __break(1u);
        JUMPOUT(0x1A3A33450);
      }
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v7 = sub_1A3A4934C(0.0, 1.0, (float)a1, (float)a2, v4);
  if ((~LODWORD(v7) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v7 <= -9.2234e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = v7 <= 9.2234e18;
  if (v7 >= 9.2234e18)
  {
    __break(1u);
    goto LABEL_9;
  }
  return (uint64_t)v7;
}

uint64_t *sub_1A3A33464(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *result;
  v4 = result[2];
  v5 = *a2;
  v6 = a2[2];
  v7 = *v2;
  if (result[1] == a2[1])
  {
    if (v3 == v5)
      goto LABEL_3;
  }
  else
  {
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 208))(1651925024, 0xE400000000000000);
    result = (uint64_t *)swift_bridgeObjectRelease();
    if (v3 == v5)
    {
LABEL_3:
      if (v4 == v6)
        return result;
      goto LABEL_4;
    }
  }
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 208))(1937137696, 0xE400000000000000);
  result = (uint64_t *)swift_bridgeObjectRelease();
  if (v4 == v6)
    return result;
LABEL_4:
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 208))(1987469344, 0xE400000000000000);
  return (uint64_t *)swift_bridgeObjectRelease();
}

void EloquenceMarkupWriter.visit(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_opt_self();
  v6 = (void *)sub_1A3AB4958();
  v7 = (void *)sub_1A3AB4958();
  v8 = objc_msgSend(v5, sel_eloquencePhonemesFromIPA_language_, v6, v7);

  if (v8)
  {
    v9 = sub_1A3AB497C();
    v11 = v10;

    v12 = v2 + 8;
    swift_bridgeObjectRetain();
    if (v4)
    {
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v15 = *v12;
      *v12 = 0x8000000000000000;
      sub_1A39A93EC(v3, v4, v9, v11, isUniquelyReferenced_nonNull_native);
      *v12 = v15;
    }
    else
    {
      sub_1A39C14B0(v9, v11);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = *v2;
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 208))(5988384, 0xE300000000000000);
    swift_bridgeObjectRelease();
  }
  else if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*v2 + 208))(v3, v4);
  }
}

uint64_t EloquenceMarkupWriter.visit(_:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v1 + 208))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

unint64_t sub_1A3A33838(unint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v5;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = result;
  v10 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > *(_QWORD *)(v7 + 24) >> 1)
  {
    if (v8 <= v12)
      v16 = v8 + v11;
    else
      v16 = v8;
    result = (unint64_t)sub_1A3A33970((char *)result, v16, 1, (char *)v7);
    v7 = result;
  }
  v17 = v7 + 32;
  v18 = (_QWORD *)(v7 + 32 + 24 * v9);
  if (!v11)
    goto LABEL_19;
  v19 = *(_QWORD *)(v7 + 16);
  v20 = __OFSUB__(v19, a2);
  v21 = v19 - a2;
  if (v20)
    goto LABEL_25;
  result = (unint64_t)(v18 + 3);
  v22 = (_QWORD *)(v17 + 24 * a2);
  if (v18 + 3 != v22 || result >= (unint64_t)&v22[3 * v21])
    result = (unint64_t)memmove((void *)result, v22, 24 * v21);
  v23 = *(_QWORD *)(v7 + 16);
  v20 = __OFADD__(v23, v11);
  v24 = v23 + v11;
  if (!v20)
  {
    *(_QWORD *)(v7 + 16) = v24;
LABEL_19:
    *v18 = a3;
    v25 = v17 + 24 * v9;
    *(_QWORD *)(v25 + 8) = a4;
    *(_QWORD *)(v25 + 16) = a5;
    *v5 = v7;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

char *sub_1A3A33970(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D3BB8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1A3A33A84(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_1A3A33970((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 24 * v6;
  v14 = (const void *)(v4 + 32 + 24 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 24 * v13)
    result = (unint64_t)memmove((void *)result, v14, 24 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for EloquenceProsody()
{
  return &type metadata for EloquenceProsody;
}

uint64_t sub_1A3A33BA4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1A3A33BAC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A33BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1A3A33C60(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

__n128 sub_1A3A33D24(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1A3A33D48(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t sub_1A3A33DC4(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 84))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A3A33E0C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 84) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 84) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for EloquenceMarkupWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EloquenceMarkupWriter);
}

void TTSMarkup.SpeechText.init(_:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1;
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x178))();
  v5 = v4;
  if (v4)
  {
    v6 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v6, sel_xmlDeEscaped);

    v5 = sub_1A3AB497C();
    v9 = v8;

    v10 = MEMORY[0x1E0DEE9D8];
  }
  else
  {

    v2 = 0;
    v10 = 0;
    v9 = 0;
  }
  *a2 = v2;
  a2[1] = v10;
  a2[2] = v5;
  a2[3] = v9;
}

void static TTSMarkup.SpeechText.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

unint64_t TTSMarkup.SpeechText.attributes.getter()
{
  return sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
}

uint64_t TTSMarkup.SpeechText.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.SpeechText.eventTaps.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*TTSMarkup.SpeechText.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.SpeechText.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = MEMORY[0x1E0DEE9D8];
  *a3 = 0;
  a3[1] = v3;
  a3[2] = result;
  a3[3] = a2;
  return result;
}

uint64_t TTSMarkup.SpeechText.startingTag.getter()
{
  return 0;
}

uint64_t TTSMarkup.SpeechText.endingTag.getter()
{
  return 0;
}

uint64_t TTSMarkup.SpeechText.ssml.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)sub_1A3AB4958();
  v1 = objc_msgSend(v0, sel_xmlEscaped);

  v2 = sub_1A3AB497C();
  return v2;
}

uint64_t TTSMarkup.SpeechText.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)v3 + 2);
  v5 = *((_QWORD *)v3 + 3);
  v7 = *v3;
  v8 = v4;
  v9 = v5;
  return (*(uint64_t (**)(__int128 *))(a3 + 32))(&v7);
}

unint64_t TTSMarkup.SpeechText.handle(event:breadcrumb:ssml:)(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(__n128 *);
  __n128 v18;
  char v19;
  __n128 v20;
  unint64_t v21;
  unint64_t v22;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)(result + 8);
    v8 = *(_QWORD *)(result + 16);
    v7 = *(_QWORD *)(result + 24);
    if (v8 >> 61 == 1)
    {
      if (*(_QWORD *)(result + 16))
      {
        sub_1A39EB398(*(_QWORD *)result, v6, v8);
        goto LABEL_10;
      }
      if (v5 >> 14 < *(_QWORD *)(a2 + 16) >> 14)
      {
        __break(1u);
      }
      else
      {
        sub_1A39EB398(v5, v6, 0);
        v9 = sub_1A3AB4B38();
        MEMORY[0x1A85957F4](v9);
        swift_bridgeObjectRelease();
        v10 = (void *)sub_1A3AB4958();
        swift_bridgeObjectRelease();
        v11 = objc_msgSend(v10, sel_xmlDeEscaped);

        sub_1A3AB497C();
        v12 = sub_1A3AB4B38();
        MEMORY[0x1A85957F4](v12);
        swift_bridgeObjectRelease();
        v13 = (void *)sub_1A3AB4958();
        swift_bridgeObjectRelease();
        v14 = objc_msgSend(v13, sel_xmlDeEscaped);

        sub_1A3AB497C();
        sub_1A3AB4A48();
        swift_bridgeObjectRelease();
        v15 = sub_1A3AB4A60();
        sub_1A3AB4A48();
        swift_bridgeObjectRelease();
        result = sub_1A3AB4A60();
        if (result >> 14 >= v15 >> 14)
        {
          v18.n128_u64[0] = v15;
          v18.n128_u64[1] = result;
          v19 = 0;
          sub_1A3A3486C(&v18, v7, &v20);
          sub_1A39EB3C4((void *)v5, v6, v8);
          v6 = v20.n128_i64[1];
          v5 = v20.n128_u64[0];
          v7 = v22;
          v8 = v21 | 0x2000000000000000;
LABEL_10:
          swift_bridgeObjectRetain();
          v16 = v3 + 40;
          do
          {
            v17 = *(void (**)(__n128 *))(v16 - 8);
            v20.n128_u64[0] = v5;
            v20.n128_u64[1] = v6;
            v21 = v8;
            v22 = v7;
            swift_retain();
            sub_1A39EB370((id)v5, v6, v8);
            v17(&v20);
            swift_release();
            sub_1A39EB3C4((void *)v5, v6, v8);
            v16 += 16;
            --v4;
          }
          while (v4);
          sub_1A39EB3C4((void *)v5, v6, v8);
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
      return result;
    }
    sub_1A39EB370(*(id *)result, v6, v8);
    goto LABEL_10;
  }
  return result;
}

void sub_1A3A34364(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1A3A34374()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)sub_1A3AB4958();
  v1 = objc_msgSend(v0, sel_xmlEscaped);

  v2 = sub_1A3AB497C();
  return v2;
}

uint64_t sub_1A3A343D8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A343E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_1A3A34408())(_QWORD, _QWORD)
{
  return nullsub_19;
}

void sub_1A3A3441C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1;
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x178))();
  v5 = v4;
  if (v4)
  {
    v6 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v6, sel_xmlDeEscaped);

    v5 = sub_1A3AB497C();
    v9 = v8;

    v10 = MEMORY[0x1E0DEE9D8];
  }
  else
  {

    v2 = 0;
    v10 = 0;
    v9 = 0;
  }
  *a2 = v2;
  a2[1] = v10;
  a2[2] = v5;
  a2[3] = v9;
}

uint64_t _s10SpeechTextVwxx(id *a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s10SpeechTextVwcp(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s10SpeechTextVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10SpeechTextVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TTSMarkup.SpeechText()
{
  return &type metadata for TTSMarkup.SpeechText;
}

uint64_t sub_1A3A34630()
{
  uint64_t v0;

  v0 = sub_1A3AB4C58();
  MEMORY[0x1A8597738](MEMORY[0x1E0DEAF50], v0);
  return sub_1A3AB4F70();
}

uint64_t sub_1A3A34690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  sub_1A3AB4C58();
  return sub_1A3AB4C28();
}

void sub_1A3A34714()
{
  uint64_t v0;

  v0 = sub_1A3AB4C58();
  MEMORY[0x1A8597738](MEMORY[0x1E0DEAF20], v0);
  MEMORY[0x1A8597738](MEMORY[0x1E0DEAF58], v0);
  JUMPOUT(0x1A8595D7CLL);
}

uint64_t sub_1A3A3477C()
{
  return sub_1A3A34630();
}

uint64_t sub_1A3A34798(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1A3A34794(*a1, *a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_1A3A347AC()
{
  Swift::String v0;

  v0._countAndFlagsBits = sub_1A39D5738();
  Array.printByIndex(delimiter:)(v0);
  swift_bridgeObjectRelease();
  sub_1A3AB53CC();
  return 0;
}

uint64_t sub_1A3A3482C()
{
  return sub_1A3A347AC();
}

uint64_t sub_1A3A3483C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for Stack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Stack);
}

uint64_t CoreSynthesizer.Marker.mark.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_1A39EB398(v2, v3, v4);
}

uint64_t CoreSynthesizer.Marker.offset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

__n128 sub_1A3A3486C@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3;
  __n128 result;

  v3 = a1[1].n128_u8[0];
  result = *a1;
  *a3 = *a1;
  a3[1].n128_u8[0] = v3;
  a3[1].n128_u64[1] = a2;
  return result;
}

id sub_1A3A34884@<X0>(void *a1@<X2>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  id v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id result;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = objc_msgSend(v2, sel_textRange);
  if (v5)
    v7 = a1 == 0;
  else
    v7 = 1;
  if (!v7)
    objc_msgSend(a1, sel_translateRangeInTransformedString_, v6, v5);
  v8 = sub_1A3AB4FA0();
  v10 = v9;
  v12 = v11;
  switch((unint64_t)objc_msgSend(v2, sel_mark))
  {
    case 0uLL:
      v13 = objc_msgSend(v2, sel_phoneme);
      v14 = sub_1A3AB497C();
      v16 = v15;

      result = objc_msgSend(v2, sel_byteSampleOffset);
      *a2 = v14;
      a2[1] = v16;
      v18 = 4;
      goto LABEL_16;
    case 1uLL:
      if ((v12 & 1) != 0)
        goto LABEL_14;
      result = objc_msgSend(v2, sel_byteSampleOffset);
      *a2 = v8;
      a2[1] = v10;
      a2[2] = 0;
      goto LABEL_17;
    case 2uLL:
      if ((v12 & 1) != 0)
        goto LABEL_14;
      result = objc_msgSend(v2, sel_byteSampleOffset);
      *a2 = v8;
      a2[1] = v10;
      v18 = 1;
      goto LABEL_16;
    case 3uLL:
      if ((v12 & 1) != 0)
        goto LABEL_14;
      result = objc_msgSend(v2, sel_byteSampleOffset);
      *a2 = v8;
      a2[1] = v10;
      v18 = 2;
      goto LABEL_16;
    case 4uLL:
      v19 = objc_msgSend(v2, sel_bookmarkName);
      v20 = sub_1A3AB497C();
      v22 = v21;

      result = objc_msgSend(v2, sel_byteSampleOffset);
      *a2 = v20;
      a2[1] = v22;
      v18 = 3;
      goto LABEL_16;
    default:
LABEL_14:
      result = 0;
      *a2 = 0;
      a2[1] = 0;
      v18 = 255;
LABEL_16:
      a2[2] = v18;
LABEL_17:
      a2[3] = (uint64_t)result;
      return result;
  }
}

uint64_t _s6MarkerVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1A39EB398(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t _s6MarkerVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_1A39EB398(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_1A39EB3EC(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t _s6MarkerVwta(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_1A39EB3EC(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t _s6MarkerVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6MarkerVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Marker()
{
  return &type metadata for CoreSynthesizer.Marker;
}

uint64_t _s6MarkerV4MarkOwxx(uint64_t a1)
{
  return sub_1A39EB3EC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s6MarkerV4MarkOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A39EB398(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s6MarkerV4MarkOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1A39EB398(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1A39EB3EC(v6, v7, v8);
  return a1;
}

uint64_t _s6MarkerV4MarkOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1A39EB3EC(v4, v5, v6);
  return a1;
}

uint64_t _s6MarkerV4MarkOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6MarkerV4MarkOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1A3A34D8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1A3A34D94(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Marker.Mark()
{
  return &type metadata for CoreSynthesizer.Marker.Mark;
}

uint64_t sub_1A3A34E18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___SSMLRangeConverterInternal_ssml);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1A3A34ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR___SSMLRangeConverterInternal_ssml);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A3A34F30())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A3A34FC8()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)((char *)v0 + OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___plainString);
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___plainString + 8))
  {
    v2 = *v1;
  }
  else
  {
    v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
    v2 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 144))();
    v5 = v4;
    swift_release();
    *v1 = v2;
    v1[1] = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1A3A350AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___plainString);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A3A350C8(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = sub_1A3A34FC8();
  a1[1] = v3;
  return sub_1A3A350FC;
}

uint64_t sub_1A3A350FC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  v2 = (_QWORD *)(a1[2] + OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___plainString);
  *v2 = *a1;
  v2[1] = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A3511C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v1 = OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___converter;
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___converter))
  {
    v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___converter);
  }
  else
  {
    v3 = v0;
    type metadata accessor for SSMLConverter();
    v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
    v2 = SSMLConverter.__allocating_init(withSSML:)(v4, v5);
    *(_QWORD *)((char *)v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1A3A351AC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___converter) = a1;
  return swift_release();
}

uint64_t (*sub_1A3A351C4(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1A3A3511C();
  return sub_1A3A351F8;
}

uint64_t sub_1A3A351F8(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___converter) = *a1;
  return swift_release();
}

id SSMLRangeConverter.__allocating_init(withSSML:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  objc_super v9;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___plainString];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *(_QWORD *)&v5[OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___converter] = 0;
  v7 = &v5[OBJC_IVAR___SSMLRangeConverterInternal_ssml];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = a2;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, sel_init);
}

id SSMLRangeConverter.init(withSSML:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  objc_super v6;

  v3 = &v2[OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___plainString];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *(_QWORD *)&v2[OBJC_IVAR___SSMLRangeConverterInternal____lazy_storage___converter] = 0;
  v4 = &v2[OBJC_IVAR___SSMLRangeConverterInternal_ssml];
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = a2;
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for SSMLRangeConverter();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for SSMLRangeConverter()
{
  return objc_opt_self();
}

uint64_t sub_1A3A35374(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;

  result = sub_1A3AB4208();
  if (result == a1)
    return 0;
  v6 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!a2)
    return 0;
  if (v6 == a1)
    goto LABEL_12;
  if (__OFSUB__(v6, 1))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xC0))(a1, v6 - 1);
  if ((v8 & 1) != 0)
    return 0;
  if (__OFSUB__(v7, result))
  {
    __break(1u);
    return 0;
  }
  return result;
}

uint64_t sub_1A3A3545C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void (*v4)(void);
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  void (*v17)(void);
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  id v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;

  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_16;
  }
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x68);
  v4();
  sub_1A3AB4FA0();
  v6 = v5;
  v7 = swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    return 0;
  ((void (*)(uint64_t))v4)(v7);
  v4();
  swift_bridgeObjectRelease();
  v8 = sub_1A3AB4AD8();
  v9 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t))v4)(v9);
  v4();
  swift_bridgeObjectRelease();
  v10 = sub_1A3AB4AD8();
  result = swift_bridgeObjectRelease();
  if (v10 < v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v8 < 0)
  {
    v22 = sub_1A3AB4FD0();
    v23 = sub_1A3A12674();
    v24 = sub_1A3A04828();
    sub_1A3A126B4(v22, (uint64_t)v23, v24 & 1, 0xD000000000000079, 0x80000001A3AF1A90, 0xD000000000000012, 0x80000001A3AF1B10);

    return 0;
  }
  ((void (*)(uint64_t))v4)(result);
  v11 = sub_1A3AB4A48();
  v12 = swift_bridgeObjectRelease();
  if (v10 >= v11)
  {
    v25 = sub_1A3AB4FD0();
    sub_1A3AB52AC();
    v26 = sub_1A3AB4A84();
    ((void (*)(uint64_t))v4)(v26);
    sub_1A3AB4A48();
    swift_bridgeObjectRelease();
    sub_1A3AB5624();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    sub_1A3AB4A84();
    sub_1A3AB53CC();
    sub_1A3AB4A84();
    sub_1A3AB53CC();
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    v27 = sub_1A3AB4A84();
    ((void (*)(uint64_t))v4)(v27);
    sub_1A3AB4A84();
    swift_bridgeObjectRelease();
    v28 = sub_1A3A12674();
    v29 = sub_1A3A04828();
    sub_1A3A126B4(v25, (uint64_t)v28, v29 & 1, 0xD000000000000079, 0x80000001A3AF1A90, 0xD000000000000012, 0x80000001A3AF1B10);
    swift_bridgeObjectRelease();

    return 0;
  }
  (*(void (**)(uint64_t))((*v3 & *v2) + 0x98))(v12);
  v13 = SSMLConverter.plainStringRange(from:)(v8, v10);
  v15 = v14;
  v16 = swift_release();
  if ((v15 & 1) != 0)
    return v13;
  v17 = *(void (**)(void))((*v3 & *v2) + 0x80);
  ((void (*)(uint64_t))v17)(v16);
  v17();
  swift_bridgeObjectRelease();
  v18 = sub_1A3AB4A60();
  v19 = swift_bridgeObjectRelease();
  ((void (*)(uint64_t))v17)(v19);
  v17();
  swift_bridgeObjectRelease();
  v20 = sub_1A3AB4A60();
  result = swift_bridgeObjectRelease();
  if (v20 >> 14 < v18 >> 14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  ((void (*)(uint64_t))v17)(result);
  sub_1A39A4820(&qword_1EE6D3BD8);
  sub_1A3A35948();
  sub_1A39A9EC0();
  result = sub_1A3AB50E4();
  if (__OFADD__(result, v21))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v13 = result;
  if (result + v21 >= result)
    return v13;
LABEL_19:
  __break(1u);
  return result;
}

unint64_t sub_1A3A35948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D3BE0;
  if (!qword_1EE6D3BE0)
  {
    v1 = sub_1A39AB624(&qword_1EE6D3BD8);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEB8A8], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D3BE0);
  }
  return result;
}

id SSMLRangeConverter.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SSMLRangeConverter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SSMLRangeConverter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SSMLRangeConverter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for SSMLRangeConverter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SSMLRangeConverter.ssml.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SSMLRangeConverter.ssml.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SSMLRangeConverter.ssml.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SSMLRangeConverter.plainString.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SSMLRangeConverter.plainString.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SSMLRangeConverter.plainString.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SSMLRangeConverter.__allocating_init(withSSML:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of SSMLRangeConverter.stringRange(from:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

void sub_1A3A35B64()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _OWORD v160[5];
  uint64_t v161;
  __int128 v162[2];
  uint64_t v163;
  uint64_t v164;
  char v165;

  v0 = (void *)sub_1A3AB4958();
  v1 = TTSLocString(v0);

  if (!v1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v2 = sub_1A3AB497C();
  v4 = v3;

  sub_1A39A4820(&qword_1EE6D2A58);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 30049;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  v162[0] = xmmword_1A3ABF9A0;
  v162[1] = xmmword_1A3AC5D70;
  v163 = sub_1A3A65558();
  v164 = v6;
  v165 = 0;
  v7 = sub_1A39A4EBC((uint64_t)&unk_1E4A971D0, &qword_1EE6D2A80, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1A39A50A8);
  sub_1A39A4820(&qword_1EE6D2A60);
  swift_arrayDestroy();
  v8 = sub_1A39A4EBC((uint64_t)&unk_1E4A97120, &qword_1EE6D2A78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))sub_1A39A50B0);
  sub_1A39A4820(&qword_1EE6D3BE8);
  swift_arrayDestroy();
  sub_1A3A66DA8(v162, v7, v8, (uint64_t)&unk_1E4A97170, (uint64_t)&unk_1E4A971A0, (uint64_t)v160);
  v9 = v160[3];
  *(_OWORD *)(inited + 80) = v160[2];
  *(_OWORD *)(inited + 96) = v9;
  *(_OWORD *)(inited + 112) = v160[4];
  *(_QWORD *)(inited + 128) = v161;
  v10 = v160[1];
  *(_OWORD *)(inited + 48) = v160[0];
  *(_OWORD *)(inited + 64) = v10;
  v159 = sub_1A39A4B10(inited);
  sub_1A39A4820(&qword_1EE6D2A68);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1A3AC1BB0;
  v12 = swift_allocObject();
  strcpy((char *)(v12 + 16), "ultraLowGain");
  *(_BYTE *)(v12 + 29) = 0;
  *(_WORD *)(v12 + 30) = -5120;
  v13 = (void *)sub_1A3AB4958();
  v14 = TTSLocString(v13);

  if (!v14)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = sub_1A3AB497C();
  v17 = v16;

  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v17;
  *(_QWORD *)(v12 + 48) = 0x41A00000C1A00000;
  *(_DWORD *)(v12 + 56) = 1056964608;
  *(_OWORD *)(v12 + 64) = xmmword_1A3AC5D80;
  *(_QWORD *)(v11 + 32) = v12 | 0xC000000000000000;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = 0x6E696147776F6CLL;
  *(_QWORD *)(v18 + 24) = 0xE700000000000000;
  v19 = (void *)sub_1A3AB4958();
  v20 = TTSLocString(v19);

  if (!v20)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v21 = sub_1A3AB497C();
  v23 = v22;

  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v23;
  *(_QWORD *)(v18 + 48) = 0x41A00000C1A00000;
  *(_DWORD *)(v18 + 56) = 1056964608;
  *(_OWORD *)(v18 + 64) = xmmword_1A3AC5D80;
  *(_QWORD *)(v11 + 40) = v18 | 0xC000000000000000;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 0x6E69614764696DLL;
  *(_QWORD *)(v24 + 24) = 0xE700000000000000;
  v25 = (void *)sub_1A3AB4958();
  v26 = TTSLocString(v25);

  if (!v26)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v27 = sub_1A3AB497C();
  v29 = v28;

  *(_QWORD *)(v24 + 32) = v27;
  *(_QWORD *)(v24 + 40) = v29;
  *(_QWORD *)(v24 + 48) = 0x41A00000C1A00000;
  *(_DWORD *)(v24 + 56) = 1056964608;
  *(_OWORD *)(v24 + 64) = xmmword_1A3AC5D80;
  *(_QWORD *)(v11 + 48) = v24 | 0xC000000000000000;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = 0x6E69614768676968;
  *(_QWORD *)(v30 + 24) = 0xE800000000000000;
  v31 = (void *)sub_1A3AB4958();
  v32 = TTSLocString(v31);

  if (!v32)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v33 = sub_1A3AB497C();
  v35 = v34;

  *(_QWORD *)(v30 + 32) = v33;
  *(_QWORD *)(v30 + 40) = v35;
  *(_QWORD *)(v30 + 48) = 0x41A00000C1A00000;
  *(_DWORD *)(v30 + 56) = 1056964608;
  *(_OWORD *)(v30 + 64) = xmmword_1A3AC5D80;
  *(_QWORD *)(v11 + 56) = v30 | 0xC000000000000000;
  if (TTSIsInternalBuild())
  {
    v36 = (void *)sub_1A3AB4958();
    v37 = TTSLocString(v36);

    if (v37)
    {
      v38 = swift_allocObject();
      v39 = sub_1A3AB497C();
      v41 = v40;

      *(_QWORD *)(v38 + 16) = v39;
      *(_QWORD *)(v38 + 24) = v41;
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_1A3ABF990;
      v43 = (void *)sub_1A3AB4958();
      v44 = TTSLocString(v43);

      v158 = v2;
      if (v44)
      {
        v45 = sub_1A3AB497C();
        v47 = v46;

      }
      else
      {
        v45 = 0;
        v47 = 0;
      }
      v157 = v4;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = v45;
      *(_QWORD *)(v48 + 24) = v47;
      v156 = v48;
      v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_1A3AC1BB0;
      v50 = (void *)sub_1A3AB4958();
      v51 = TTSLocString(v50);

      if (v51)
      {
        v155 = v42;
        v52 = swift_allocObject();
        v53 = sub_1A3AB497C();
        v55 = v54;

        *(_QWORD *)(v52 + 16) = v53;
        *(_QWORD *)(v52 + 24) = v55;
        v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = xmmword_1A3AC0240;
        v57 = swift_allocObject();
        strcpy((char *)(v57 + 16), "ultraLowFreq");
        *(_BYTE *)(v57 + 29) = 0;
        *(_WORD *)(v57 + 30) = -5120;
        v58 = (void *)sub_1A3AB4958();
        v59 = TTSLocString(v58);

        if (v59)
        {
          v60 = sub_1A3AB497C();
          v62 = v61;

          *(_QWORD *)(v57 + 32) = v60;
          *(_QWORD *)(v57 + 40) = v62;
          *(_QWORD *)(v57 + 48) = 0x437A000041200000;
          *(_DWORD *)(v57 + 56) = 1065353216;
          *(_OWORD *)(v57 + 64) = xmmword_1A3AC5D90;
          *(_QWORD *)(v56 + 32) = v57 | 0xC000000000000000;
          v63 = swift_allocObject();
          *(_QWORD *)(v63 + 16) = 0x776F4C6172746C75;
          *(_QWORD *)(v63 + 24) = 0xEA00000000005742;
          v64 = (void *)sub_1A3AB4958();
          v65 = TTSLocString(v64);

          if (v65)
          {
            v66 = sub_1A3AB497C();
            v68 = v67;

            *(_QWORD *)(v63 + 32) = v66;
            *(_QWORD *)(v63 + 40) = v68;
            *(_QWORD *)(v63 + 48) = 0x408000003F000000;
            *(_DWORD *)(v63 + 56) = 1056964608;
            *(_OWORD *)(v63 + 64) = xmmword_1A3AC5DA0;
            *(_QWORD *)(v56 + 40) = v63 | 0xC000000000000000;
            v69 = swift_allocObject();
            strcpy((char *)(v69 + 16), "ultraLowBypass");
            *(_BYTE *)(v69 + 31) = -18;
            v70 = (void *)sub_1A3AB4958();
            v71 = TTSLocString(v70);

            if (v71)
            {
              v72 = sub_1A3AB497C();
              v74 = v73;

              *(_QWORD *)(v69 + 32) = v72;
              *(_QWORD *)(v69 + 40) = v74;
              *(_QWORD *)(v56 + 48) = v69 | 0x8000000000000000;
              *(_QWORD *)(v52 + 32) = v56;
              *(_QWORD *)(v49 + 32) = v52 | 0x4000000000000000;
              v75 = (void *)sub_1A3AB4958();
              v76 = TTSLocString(v75);

              if (v76)
              {
                v77 = swift_allocObject();
                v78 = sub_1A3AB497C();
                v80 = v79;

                *(_QWORD *)(v77 + 16) = v78;
                *(_QWORD *)(v77 + 24) = v80;
                v81 = swift_allocObject();
                *(_OWORD *)(v81 + 16) = xmmword_1A3AC0240;
                v82 = swift_allocObject();
                *(_QWORD *)(v82 + 16) = 0x71657246776F6CLL;
                *(_QWORD *)(v82 + 24) = 0xE700000000000000;
                v83 = (void *)sub_1A3AB4958();
                v84 = TTSLocString(v83);

                if (v84)
                {
                  v85 = sub_1A3AB497C();
                  v87 = v86;

                  *(_QWORD *)(v82 + 32) = v85;
                  *(_QWORD *)(v82 + 40) = v87;
                  *(_QWORD *)(v82 + 48) = 0x44BB8000437A0000;
                  *(_DWORD *)(v82 + 56) = 1065353216;
                  *(_OWORD *)(v82 + 64) = xmmword_1A3AC5D90;
                  *(_QWORD *)(v81 + 32) = v82 | 0xC000000000000000;
                  v88 = swift_allocObject();
                  *(_QWORD *)(v88 + 16) = 0x5742776F6CLL;
                  *(_QWORD *)(v88 + 24) = 0xE500000000000000;
                  v89 = (void *)sub_1A3AB4958();
                  v90 = TTSLocString(v89);

                  if (v90)
                  {
                    v91 = sub_1A3AB497C();
                    v93 = v92;

                    *(_QWORD *)(v88 + 32) = v91;
                    *(_QWORD *)(v88 + 40) = v93;
                    *(_QWORD *)(v88 + 48) = 0x408000003F000000;
                    *(_DWORD *)(v88 + 56) = 1056964608;
                    *(_OWORD *)(v88 + 64) = xmmword_1A3AC5DA0;
                    *(_QWORD *)(v81 + 40) = v88 | 0xC000000000000000;
                    v94 = swift_allocObject();
                    *(_QWORD *)(v94 + 16) = 0x7361707942776F6CLL;
                    *(_QWORD *)(v94 + 24) = 0xE900000000000073;
                    v95 = (void *)sub_1A3AB4958();
                    v96 = TTSLocString(v95);

                    if (v96)
                    {
                      v97 = sub_1A3AB497C();
                      v99 = v98;

                      *(_QWORD *)(v94 + 32) = v97;
                      *(_QWORD *)(v94 + 40) = v99;
                      *(_QWORD *)(v81 + 48) = v94 | 0x8000000000000000;
                      *(_QWORD *)(v77 + 32) = v81;
                      *(_QWORD *)(v49 + 40) = v77 | 0x4000000000000000;
                      v100 = (void *)sub_1A3AB4958();
                      v101 = TTSLocString(v100);

                      if (v101)
                      {
                        v102 = swift_allocObject();
                        v103 = sub_1A3AB497C();
                        v105 = v104;

                        *(_QWORD *)(v102 + 16) = v103;
                        *(_QWORD *)(v102 + 24) = v105;
                        v106 = swift_allocObject();
                        *(_OWORD *)(v106 + 16) = xmmword_1A3AC0240;
                        v107 = swift_allocObject();
                        *(_QWORD *)(v107 + 16) = 0x7165724664696DLL;
                        *(_QWORD *)(v107 + 24) = 0xE700000000000000;
                        v108 = (void *)sub_1A3AB4958();
                        v109 = TTSLocString(v108);

                        if (v109)
                        {
                          v110 = sub_1A3AB497C();
                          v112 = v111;

                          *(_QWORD *)(v107 + 32) = v110;
                          *(_QWORD *)(v107 + 40) = v112;
                          *(_QWORD *)(v107 + 48) = 0x457A000044BB8000;
                          *(_DWORD *)(v107 + 56) = 1065353216;
                          *(_OWORD *)(v107 + 64) = xmmword_1A3AC5D90;
                          *(_QWORD *)(v106 + 32) = v107 | 0xC000000000000000;
                          v113 = swift_allocObject();
                          *(_QWORD *)(v113 + 16) = 0x574264696DLL;
                          *(_QWORD *)(v113 + 24) = 0xE500000000000000;
                          v114 = (void *)sub_1A3AB4958();
                          v115 = TTSLocString(v114);

                          if (v115)
                          {
                            v116 = sub_1A3AB497C();
                            v118 = v117;

                            *(_QWORD *)(v113 + 32) = v116;
                            *(_QWORD *)(v113 + 40) = v118;
                            *(_QWORD *)(v113 + 48) = 0x408000003F000000;
                            *(_DWORD *)(v113 + 56) = 1056964608;
                            *(_OWORD *)(v113 + 64) = xmmword_1A3AC5DA0;
                            *(_QWORD *)(v106 + 40) = v113 | 0xC000000000000000;
                            v119 = swift_allocObject();
                            *(_QWORD *)(v119 + 16) = 0x736170794264696DLL;
                            *(_QWORD *)(v119 + 24) = 0xE900000000000073;
                            v120 = (void *)sub_1A3AB4958();
                            v121 = TTSLocString(v120);

                            if (v121)
                            {
                              v122 = sub_1A3AB497C();
                              v124 = v123;

                              *(_QWORD *)(v119 + 32) = v122;
                              *(_QWORD *)(v119 + 40) = v124;
                              *(_QWORD *)(v106 + 48) = v119 | 0x8000000000000000;
                              *(_QWORD *)(v102 + 32) = v106;
                              *(_QWORD *)(v49 + 48) = v102 | 0x4000000000000000;
                              v125 = (void *)sub_1A3AB4958();
                              v126 = TTSLocString(v125);

                              if (v126)
                              {
                                v127 = swift_allocObject();
                                v128 = sub_1A3AB497C();
                                v130 = v129;

                                *(_QWORD *)(v127 + 16) = v128;
                                *(_QWORD *)(v127 + 24) = v130;
                                v131 = swift_allocObject();
                                *(_OWORD *)(v131 + 16) = xmmword_1A3AC0240;
                                v132 = swift_allocObject();
                                *(_QWORD *)(v132 + 16) = 0x7165724668676968;
                                *(_QWORD *)(v132 + 24) = 0xE800000000000000;
                                v133 = (void *)sub_1A3AB4958();
                                v134 = TTSLocString(v133);

                                if (v134)
                                {
                                  v135 = sub_1A3AB497C();
                                  v137 = v136;

                                  *(_QWORD *)(v132 + 32) = v135;
                                  *(_QWORD *)(v132 + 40) = v137;
                                  *(_QWORD *)(v132 + 48) = 0x461C4000457A0000;
                                  *(_DWORD *)(v132 + 56) = 1065353216;
                                  *(_OWORD *)(v132 + 64) = xmmword_1A3AC5D90;
                                  *(_QWORD *)(v131 + 32) = v132 | 0xC000000000000000;
                                  v138 = swift_allocObject();
                                  *(_QWORD *)(v138 + 16) = 0x574268676968;
                                  *(_QWORD *)(v138 + 24) = 0xE600000000000000;
                                  v139 = (void *)sub_1A3AB4958();
                                  v140 = TTSLocString(v139);

                                  if (v140)
                                  {
                                    v141 = sub_1A3AB497C();
                                    v143 = v142;

                                    *(_QWORD *)(v138 + 32) = v141;
                                    *(_QWORD *)(v138 + 40) = v143;
                                    *(_QWORD *)(v138 + 48) = 0x408000003F000000;
                                    *(_DWORD *)(v138 + 56) = 1056964608;
                                    *(_OWORD *)(v138 + 64) = xmmword_1A3AC5DA0;
                                    *(_QWORD *)(v131 + 40) = v138 | 0xC000000000000000;
                                    v144 = swift_allocObject();
                                    *(_QWORD *)(v144 + 16) = 0x6170794268676968;
                                    *(_QWORD *)(v144 + 24) = 0xEA00000000007373;
                                    v145 = (void *)sub_1A3AB4958();
                                    v146 = TTSLocString(v145);

                                    if (v146)
                                    {
                                      v147 = sub_1A3AB497C();
                                      v149 = v148;

                                      *(_QWORD *)(v144 + 32) = v147;
                                      *(_QWORD *)(v144 + 40) = v149;
                                      *(_QWORD *)(v131 + 48) = v144 | 0x8000000000000000;
                                      *(_QWORD *)(v127 + 32) = v131;
                                      *(_QWORD *)(v49 + 56) = v127 | 0x4000000000000000;
                                      *(_QWORD *)(v156 + 32) = v49;
                                      *(_QWORD *)(v155 + 32) = v156;
                                      *(_QWORD *)(v38 + 32) = v155;
                                      swift_retain();
                                      v11 = (uint64_t)sub_1A3A36C80((char *)1, 5, 1, (char *)v11);
                                      *(_QWORD *)(v11 + 16) = 5;
                                      *(_QWORD *)(v11 + 64) = v38 | 0x4000000000000000;
                                      swift_release();
                                      v4 = v157;
                                      v2 = v158;
                                      goto LABEL_28;
                                    }
LABEL_53:
                                    __break(1u);
                                    return;
                                  }
LABEL_52:
                                  __break(1u);
                                  goto LABEL_53;
                                }
LABEL_51:
                                __break(1u);
                                goto LABEL_52;
                              }
LABEL_50:
                              __break(1u);
                              goto LABEL_51;
                            }
LABEL_49:
                            __break(1u);
                            goto LABEL_50;
                          }
LABEL_48:
                          __break(1u);
                          goto LABEL_49;
                        }
LABEL_47:
                        __break(1u);
                        goto LABEL_48;
                      }
LABEL_46:
                      __break(1u);
                      goto LABEL_47;
                    }
LABEL_45:
                    __break(1u);
                    goto LABEL_46;
                  }
LABEL_44:
                  __break(1u);
                  goto LABEL_45;
                }
LABEL_43:
                __break(1u);
                goto LABEL_44;
              }
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_28:
  v150 = (void *)sub_1A3AB4958();
  v151 = TTSLocString(v150);

  if (v151)
  {
    v152 = sub_1A3AB497C();
    v154 = v153;

  }
  else
  {
    v152 = 0;
    v154 = 0;
  }
  sub_1A3A6B480(v2, v4, v159, v11, 0xD000000000000011, 0x80000001A3AF1CD0, v152, v154, (uint64_t)&qword_1EE6E0788, 1);
}

uint64_t *sub_1A3A36B70()
{
  if (qword_1EE6E0780 != -1)
    swift_once();
  return &qword_1EE6E0788;
}

uint64_t static TTSAudioEffect.SimpleEQ.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1EE6E0780 != -1)
    swift_once();
  v2 = unk_1EE6E0790;
  v3 = qword_1EE6E0798;
  v4 = qword_1EE6E07B0;
  v5 = byte_1EE6E07B8;
  v6 = qword_1EE6E07C0;
  v7 = unk_1EE6E07C8;
  v8 = qword_1EE6E07D0;
  v9 = unk_1EE6E07D8;
  *(_QWORD *)a1 = qword_1EE6E0788;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = unk_1EE6E07A0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

char *sub_1A3A36C80(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D2A68);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1A3A36D80()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A36DBC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A36DE8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double TTSMarkup.ForEach.init(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();

  result = 0.0;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return result;
}

uint64_t static TTSMarkup.ForEach.tag.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = byte_1EE6D3BF0;
  return result;
}

uint64_t static TTSMarkup.ForEach.tag.setter(char *a1)
{
  char v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  byte_1EE6D3BF0 = v1;
  return result;
}

uint64_t (*static TTSMarkup.ForEach.tag.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t TTSMarkup.ForEach.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.ForEach.attributes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.ForEach.attributes.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.ForEach._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.ForEach._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.ForEach._content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.ForEach.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.ForEach.init<A>(_:iterationBlock:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[8];

  *a5 = sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  v16[7] = a1;
  v16[2] = a4;
  v16[3] = a2;
  v16[4] = a3;
  v10 = sub_1A3AB4C58();
  v11 = sub_1A39A4820(&qword_1EE6D2B78);
  v12 = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF50], v10);
  v14 = sub_1A3A370CC((void (*)(char *, char *))sub_1A3A370A4, (uint64_t)v16, v10, v11, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  swift_bridgeObjectRelease();
  result = sub_1A39A4820(&qword_1EE6D2BE0);
  a5[4] = result;
  a5[5] = (unint64_t)&protocol witness table for <A> [A];
  a5[1] = v14;
  return result;
}

uint64_t sub_1A3A370A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1A3A370CC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v29 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_1A3AB4F34();
  if (!v20)
    return sub_1A3AB4BEC();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_1A3AB4850();
  v34 = sub_1A3AB5384();
  sub_1A3AB533C();
  v37 = v8;
  result = sub_1A3AB4F28();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_1A3AB4F88();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v14);
      v24(v43, 0);
      v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_1A3AB536C();
      result = sub_1A3AB4F58();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TTSMarkup.ForEach.init(speeches:)@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result;

  *a2 = sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  result = sub_1A39A4820(&qword_1EE6D2BE0);
  a2[4] = result;
  a2[5] = (unint64_t)&protocol witness table for <A> [A];
  a2[1] = a1;
  return result;
}

uint64_t TTSMarkup.ForEach.ssml.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  sub_1A39A19CC(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t TTSMarkup.ForEach.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[4];
  v8 = v3[5];
  sub_1A39A19CC(v3 + 1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 80))(a1, a2, a3, v7, v8);
}

uint64_t sub_1A3A374B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = byte_1EE6D3BF0;
  return result;
}

uint64_t sub_1A3A374F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  sub_1A39A19CC(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

void (*sub_1A3A37544(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TTSMarkupSpeech.eventTaps.modify(v2);
  return sub_1A39C2B84;
}

double sub_1A3A375A4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();

  result = 0.0;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.ForEach()
{
  return &type metadata for TTSMarkup.ForEach;
}

uint64_t TTSMarkup.GenericSpeechElement.init(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;
  _QWORD v21[4];
  _OWORD v22[2];
  uint64_t v23;

  v21[0] = MEMORY[0x1E0DEE9D8];
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v21[3] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))();
  v21[1] = (*(uint64_t (**)(void))((*v4 & *a1) + 0xD0))();
  v21[2] = v5;
  v6 = (*(uint64_t (**)(void))((*v4 & *a1) + 0x100))();
  v7 = v6;
  if (!(v6 >> 62))
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_19:
    swift_bridgeObjectRelease();
    v19 = sub_1A39A4820(&qword_1EE6D2BE0);
    v20 = &protocol witness table for <A> [A];

    *(_QWORD *)&v18 = v11;
    sub_1A3A37854((uint64_t)&v18, (uint64_t)v22);
    sub_1A3A3789C(v21, a2);
    return sub_1A3A378AC((uint64_t)v21);
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v8 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v8 >= 1)
  {
    v10 = 0;
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1A85960B8](v10, v7);
      else
        v12 = *(id *)(v7 + 8 * v10 + 32);
      v13 = v12;
      sub_1A39D518C((uint64_t)&v16);

      if (v17)
      {
        sub_1A39A1AB8(&v16, (uint64_t)&v18);
        sub_1A39A1AB8(&v18, (uint64_t)&v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_1A39BFBD8(0, v11[2] + 1, 1, v11);
        v15 = v11[2];
        v14 = v11[3];
        if (v15 >= v14 >> 1)
          v11 = sub_1A39BFBD8((_QWORD *)(v14 > 1), v15 + 1, 1, v11);
        v11[2] = v15 + 1;
        sub_1A39A1AB8(&v16, (uint64_t)&v11[5 * v15 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v16);
      }
      ++v10;
    }
    while (v8 != v10);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1A3A37854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2B60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A3789C(_QWORD *a1, uint64_t a2)
{
  return _s20GenericSpeechElementVwcp(a2, a1);
}

uint64_t sub_1A3A378AC(uint64_t a1)
{
  _s20GenericSpeechElementVwxx(a1);
  return a1;
}

uint64_t TTSMarkup.GenericSpeechElement.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.GenericSpeechElement.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.GenericSpeechElement.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

void static TTSMarkup.GenericSpeechElement.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t TTSMarkup.GenericSpeechElement.tag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TTSMarkup.GenericSpeechElement.tag.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*TTSMarkup.GenericSpeechElement.tag.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.GenericSpeechElement.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.GenericSpeechElement.attributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*TTSMarkup.GenericSpeechElement.attributes.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.GenericSpeechElement.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A37AB4(v1 + 32, a1);
}

uint64_t TTSMarkup.GenericSpeechElement.content.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A3A37854(a1, v1 + 32);
}

uint64_t (*TTSMarkup.GenericSpeechElement.content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

double TTSMarkup.GenericSpeechElement.init(tag:attributes:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double result;

  v4 = MEMORY[0x1E0DEE9D8];
  result = 0.0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 24) = a3;
  return result;
}

uint64_t TTSMarkup.GenericSpeechElement.init(tag:attributes:speech:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD *__return_ptr)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v5 = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(a5 + 48) = 0u;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)a5 = v5;
  *(_QWORD *)(a5 + 8) = a1;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_OWORD *)(a5 + 32) = 0u;
  v6 = a5 + 32;
  a4(v8);
  return sub_1A3A37854((uint64_t)v8, v6);
}

uint64_t TTSMarkup.GenericSpeechElement.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 96))(v3);
}

uint64_t sub_1A3A37A98()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A37AA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A3A37AB4(v1 + 32, a1);
}

uint64_t sub_1A3A37AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2B60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s20GenericSpeechElementVwxx(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    return sub_1A39A47C4(a1 + 32);
  return result;
}

uint64_t _s20GenericSpeechElementVwcp(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (_OWORD *)(a1 + 32);
  v7 = a2 + 4;
  v8 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    v9 = a2[8];
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v8 - 8))(a1 + 32, v7, v8);
  }
  else
  {
    v10 = *((_OWORD *)v7 + 1);
    *v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 64) = v7[4];
  }
  return a1;
}

uint64_t _s20GenericSpeechElementVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 56) = v4;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    return a1;
  }
  if (!v4)
  {
    sub_1A39A47C4(a1 + 32);
    goto LABEL_7;
  }
  sub_1A39B8070((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  return a1;
}

uint64_t _s20GenericSpeechElementVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
    sub_1A39A47C4(a1 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for TTSMarkup.GenericSpeechElement()
{
  return &type metadata for TTSMarkup.GenericSpeechElement;
}

uint64_t CoreSynthesizer.Voice.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CoreSynthesizer.Voice.cannonicId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 40) == 1)
  {
    sub_1A3AB497C();
    sub_1A3AB497C();
    sub_1A39A9EC0();
    swift_bridgeObjectRetain();
    v1 = sub_1A3AB5174();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t CoreSynthesizer.Voice.alternateIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreSynthesizer.Voice.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void CoreSynthesizer.Voice.quality.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 40);
}

void CoreSynthesizer.Voice.gender.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 41);
}

void CoreSynthesizer.Voice.traits.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 48);
}

_QWORD *CoreSynthesizer.Voice.traits.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = *result;
  return result;
}

uint64_t (*CoreSynthesizer.Voice.traits.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

void CoreSynthesizer.Voice.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

uint64_t CoreSynthesizer.Voice.primaryLocales.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreSynthesizer.Voice.secondaryLocales.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreSynthesizer.Voice.locales.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  return sub_1A39EF508(v2, v1);
}

uint64_t CoreSynthesizer.Voice.primaryLocale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A3A38054(*(_QWORD *)(v1 + 64), (uint64_t)v5);
  v6 = sub_1A3AB4538();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v5, v6);
  sub_1A39B11F4((uint64_t)v5, &qword_1ED1B5320);
  result = sub_1A3AB5444();
  __break(1u);
  return result;
}

uint64_t sub_1A3A38054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_1A39AE5A4(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = sub_1A3AB4538();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_1A3A39560(result, v5, a1, a2);
    v7 = sub_1A3AB4538();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

id CoreSynthesizer.Voice.synthesisProviderVoice.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 80);
}

void CoreSynthesizer.Voice.synthesisProviderVoice.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
}

uint64_t (*CoreSynthesizer.Voice.synthesisProviderVoice.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

unint64_t CoreSynthesizer.Voice.downloadSizeBytes.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 88) | ((unint64_t)*(unsigned __int8 *)(v0 + 92) << 32);
}

uint64_t CoreSynthesizer.Voice.downloadSizeBytes.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 88) = result;
  *(_BYTE *)(v1 + 92) = BYTE4(result) & 1;
  return result;
}

uint64_t (*CoreSynthesizer.Voice.downloadSizeBytes.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t sub_1A3A38174()
{
  return 0x100000000;
}

unint64_t CoreSynthesizer.Voice.diskSizeBytes.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 96) | ((unint64_t)*(unsigned __int8 *)(v0 + 100) << 32);
}

uint64_t CoreSynthesizer.Voice.diskSizeBytes.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 96) = result;
  *(_BYTE *)(v1 + 100) = BYTE4(result) & 1;
  return result;
}

uint64_t (*CoreSynthesizer.Voice.diskSizeBytes.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

__n128 CoreSynthesizer.Voice.init(id:alternateIdentifiers:name:localizedName:localizedNameWithFootprint:quality:gender:traits:type:primaryLocales:secondaryLocales:synthesisProviderVoice:downloadSizeBytes:diskSizeBytes:sampleAudio:sampleText:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, __n128 *a6@<X8>, uint64_t a7, unsigned __int8 *a8, unsigned __int8 *a9, unint64_t *a10, unsigned __int8 *a11, __n128 a12, unint64_t a13, unsigned __int32 a14, char a15, unsigned __int32 a16, char a17, uint64_t a18)
{
  unsigned __int8 v19;
  unsigned __int8 v20;
  unint64_t v21;
  unsigned __int8 v22;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = *a8;
  v20 = *a9;
  v21 = *a10;
  v22 = *a11;
  sub_1A39B11F4(a18, &qword_1EE6D3BA0);
  a6->n128_u64[0] = a1;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  a6[2].n128_u64[0] = a5;
  a6[2].n128_u8[8] = v19;
  a6[2].n128_u8[9] = v20;
  a6[3].n128_u64[0] = v21;
  a6[3].n128_u8[8] = v22;
  result = a12;
  a6[4] = a12;
  a6[5].n128_u64[0] = a13;
  a6[5].n128_u32[2] = a14;
  a6[5].n128_u8[12] = a15 & 1;
  a6[6].n128_u32[0] = a16;
  a6[6].n128_u8[4] = a17 & 1;
  return result;
}

uint64_t CoreSynthesizer.Voice.sampleText.getter()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = (void *)sub_1A3AB4958();
  v2 = objc_msgSend(v0, sel_sampleStringForVoiceIdentifier_, v1);

  if (!v2)
    return 0;
  v3 = sub_1A3AB497C();

  return v3;
}

uint64_t CoreSynthesizer.Voice.localizedName.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 56);
  if (v2 > 0xA)
    goto LABEL_8;
  if (((1 << v2) & 0x338) != 0)
  {
LABEL_3:
    v3 = (void *)objc_opt_self();
    v4 = (void *)sub_1A3AB4958();
    v5 = objc_msgSend(v3, sel_localizedName_forLanguage_, v4, 0);

LABEL_9:
    v1 = sub_1A3AB497C();

    return v1;
  }
  if (((1 << v2) & 0x480) == 0)
  {
    if (v2 == 6 && (*(_BYTE *)(v0 + 49) & 0x80) == 0)
      goto LABEL_3;
LABEL_8:
    v6 = (void *)objc_opt_self();
    v7 = (void *)sub_1A3AB4958();
    v8 = (void *)sub_1A3AB4958();
    v5 = objc_msgSend(v6, sel_siriLocalizedNameForName_identifier_includeSiri_, v7, v8, 0);

    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_1A3A38514()
{
  return &unk_1A3AC5EE8;
}

BOOL static CoreSynthesizer.Voice.VoiceType.SiriVoiceTechnology.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CoreSynthesizer.Voice.localizedNameWithFootprint.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  void *v13;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 56);
  if (v2 > 0xA)
    goto LABEL_8;
  if (((1 << v2) & 0x70) == 0)
  {
    if (((1 << v2) & 0x308) != 0)
    {
      v3 = (void *)objc_opt_self();
      v4 = (void *)sub_1A3AB4958();
      v5 = objc_msgSend(v3, sel_localizedName_forLanguage_, v4, 0);

LABEL_9:
      v1 = sub_1A3AB497C();

      return v1;
    }
    if (((1 << v2) & 0x480) != 0)
    {
      swift_bridgeObjectRetain();
      return v1;
    }
LABEL_8:
    v8 = (void *)objc_opt_self();
    v9 = (void *)sub_1A3AB4958();
    v10 = (void *)sub_1A3AB4958();
    v5 = objc_msgSend(v8, sel_siriLocalizedNameForName_identifier_includeSiri_, v9, v10, 0);

    goto LABEL_9;
  }
  v13 = (void *)objc_opt_self();
  v12 = sub_1A3A64A5C();
  CoreSynthesizer.Voice.localizedName.getter();
  v6 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v13, sel_localizedNameWithFootprint_name_, v12, v6);

  v1 = sub_1A3AB497C();
  return v1;
}

uint64_t CoreSynthesizer.Voice.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v11;
  char v12;
  int v13;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v11 = *(void **)(v1 + 80);
  v12 = *(_BYTE *)(v1 + 92);
  v13 = *(unsigned __int8 *)(v1 + 100);
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5708();
  v7 = *(_QWORD *)(v3 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1A3AB4A30();
      swift_bridgeObjectRelease();
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  sub_1A3AB5708();
  sub_1A3AB5708();
  sub_1A3AB5708();
  if ((v4 - 4) >= 7u)
    sub_1A3AB5708();
  sub_1A3AB5708();
  swift_bridgeObjectRetain();
  sub_1A3A392DC(a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1A3A392DC(a1, v5);
  swift_bridgeObjectRelease();
  v9 = v11;
  sub_1A3AB50D8();

  if ((v12 & 1) != 0)
  {
    sub_1A3AB5714();
    if (!v13)
    {
LABEL_9:
      sub_1A3AB5714();
      return sub_1A3AB5720();
    }
  }
  else
  {
    sub_1A3AB5714();
    sub_1A3AB5720();
    if (!v13)
      goto LABEL_9;
  }
  return sub_1A3AB5714();
}

uint64_t sub_1A3A389BC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1A3AB5654(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_1A3AB5654() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1A3A38A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = sub_1A3AB4538();
  v40 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v33 - v9;
  result = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v33 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v34 = a1;
  v35 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v36 = (unint64_t)(v16 + 63) >> 6;
  v39 = a2 + 56;
  v33 = (char *)&v33 - v12;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v37 = (v18 - 1) & v18;
  v38 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v13, v4);
    sub_1A3A3A298((unint64_t *)&qword_1ED1B5300, MEMORY[0x1E0CB0E58]);
    v27 = sub_1A3AB48C8();
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v29 = v27 & ~v28;
    if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v4);
      return 0;
    }
    v30 = ~v28;
    while (1)
    {
      v26(v7, *(_QWORD *)(a2 + 48) + v29 * v25, v4);
      sub_1A3A3A298((unint64_t *)&unk_1ED1B5310, MEMORY[0x1E0CB0E60]);
      v31 = sub_1A3AB494C();
      v32 = *(void (**)(char *, uint64_t))(v40 + 8);
      v32(v7, v4);
      if ((v31 & 1) != 0)
        break;
      v29 = (v29 + 1) & v30;
      if (((*(_QWORD *)(v39 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v32(v10, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v32)(v10, v4);
    v13 = v33;
    a1 = v34;
    v18 = v37;
    v14 = v38;
    if (v37)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v20 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v36)
        return 1;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v36)
          return 1;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v20 + 3 >= v36)
            return 1;
          v21 = *(_QWORD *)(v35 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_24:
    v37 = (v21 - 1) & v21;
    v38 = v22;
  }
  v23 = v20 + 4;
  if (v23 >= v36)
    return 1;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return 1;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t CoreSynthesizer.Voice.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  __int128 v12[4];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  char v25;

  v1 = v0[3];
  v2 = v0[4];
  v3 = *((_WORD *)v0 + 20);
  v4 = v0[6];
  v5 = *((_BYTE *)v0 + 56);
  v6 = v0[10];
  v7 = *((_DWORD *)v0 + 22);
  v8 = *((_BYTE *)v0 + 92);
  v9 = *((_DWORD *)v0 + 24);
  v10 = *((_BYTE *)v0 + 100);
  v13 = *v0;
  v14 = *(_OWORD *)(v0 + 1);
  v15 = v1;
  v16 = v2;
  v17 = v3;
  v18 = v4;
  v19 = v5;
  v20 = *((_OWORD *)v0 + 4);
  v21 = v6;
  v22 = v7;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  sub_1A3AB56FC();
  CoreSynthesizer.Voice.hash(into:)(v12);
  return sub_1A3AB5738();
}

uint64_t sub_1A3A38E84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  __int128 v12[4];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  char v25;

  v1 = v0[3];
  v2 = v0[4];
  v3 = *((_WORD *)v0 + 20);
  v4 = v0[6];
  v5 = *((_BYTE *)v0 + 56);
  v6 = v0[10];
  v7 = *((_DWORD *)v0 + 22);
  v8 = *((_BYTE *)v0 + 92);
  v9 = *((_DWORD *)v0 + 24);
  v10 = *((_BYTE *)v0 + 100);
  v13 = *v0;
  v14 = *(_OWORD *)(v0 + 1);
  v15 = v1;
  v16 = v2;
  v17 = v3;
  v18 = v4;
  v19 = v5;
  v20 = *((_OWORD *)v0 + 4);
  v21 = v6;
  v22 = v7;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  sub_1A3AB56FC();
  CoreSynthesizer.Voice.hash(into:)(v12);
  return sub_1A3AB5738();
}

uint64_t sub_1A3A38F28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  __int128 v12[4];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  char v25;

  v1 = v0[3];
  v2 = v0[4];
  v3 = *((_WORD *)v0 + 20);
  v4 = v0[6];
  v5 = *((_BYTE *)v0 + 56);
  v6 = v0[10];
  v7 = *((_DWORD *)v0 + 22);
  v8 = *((_BYTE *)v0 + 92);
  v9 = *((_DWORD *)v0 + 24);
  v10 = *((_BYTE *)v0 + 100);
  v13 = *v0;
  v14 = *(_OWORD *)(v0 + 1);
  v15 = v1;
  v16 = v2;
  v17 = v3;
  v18 = v4;
  v19 = v5;
  v20 = *((_OWORD *)v0 + 4);
  v21 = v6;
  v22 = v7;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  sub_1A3AB56FC();
  CoreSynthesizer.Voice.hash(into:)(v12);
  return sub_1A3AB5738();
}

uint64_t CoreSynthesizer.Voice.VoiceType.SiriVoiceTechnology.hash(into:)()
{
  return sub_1A3AB5708();
}

uint64_t CoreSynthesizer.Voice.VoiceType.hash(into:)()
{
  _BYTE *v0;

  if ((*v0 - 4) >= 7u)
    sub_1A3AB5708();
  return sub_1A3AB5708();
}

uint64_t CoreSynthesizer.Voice.VoiceType.hashValue.getter()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_1A3AB56FC();
  if ((v1 - 4) >= 7u)
    sub_1A3AB5708();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A390CC()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_1A3AB56FC();
  if ((v1 - 4) >= 7u)
    sub_1A3AB5708();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

unint64_t CoreSynthesizer.Voice.Quality.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 5;
  if (result < 5)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t CoreSynthesizer.Voice.Quality.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_1A3A3915C@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return CoreSynthesizer.Voice.Quality.init(rawValue:)(*a1, a2);
}

void sub_1A3A39164(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t CoreSynthesizer.Voice.Trait.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CoreSynthesizer.Voice.Trait.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1A3A39180()
{
  return &unk_1A3AC5E90;
}

void static CoreSynthesizer.Voice.Trait.novelty.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void *sub_1A3A39198()
{
  return &unk_1A3AC5E98;
}

void static CoreSynthesizer.Voice.Trait.personal.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void *sub_1A3A391B0()
{
  return &unk_1A3AC5EA0;
}

void static CoreSynthesizer.Voice.Trait.thirdParty.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void *sub_1A3A391C8()
{
  return &unk_1A3AC5EA8;
}

void static CoreSynthesizer.Voice.Trait.system.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void *sub_1A3A391E0()
{
  return &unk_1A3AC5EB0;
}

void static CoreSynthesizer.Voice.Trait.localeDefault.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void *sub_1A3A391F8()
{
  return &unk_1A3AC5EB8;
}

void static CoreSynthesizer.Voice.Trait.siri.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void *sub_1A3A39210()
{
  return &unk_1A3AC5EC0;
}

void static CoreSynthesizer.Voice.Trait.installed.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void *sub_1A3A39228()
{
  return &unk_1A3AC5EC8;
}

void static CoreSynthesizer.Voice.Trait.firstParty.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void *sub_1A3A39240()
{
  return &unk_1A3AC5ED0;
}

void static CoreSynthesizer.Voice.Trait.hasSystemCounterpart.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

void *sub_1A3A39258()
{
  return &unk_1A3AC5ED8;
}

void static CoreSynthesizer.Voice.Trait.hasNeuralCounterpart.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void *sub_1A3A39270()
{
  return &unk_1A3AC5EE0;
}

void static CoreSynthesizer.Voice.Trait.hasNeuralAXCounterpart.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static CoreSynthesizer.Voice.Trait.hasPremiumSiriCounterpart.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000;
}

void *sub_1A3A39294()
{
  return &unk_1A3AC5EF0;
}

void static CoreSynthesizer.Voice.Trait.hasSuperCompactCounterpart.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x10000;
}

void *sub_1A3A392AC()
{
  return &unk_1A3AC5EF8;
}

void static CoreSynthesizer.Voice.Trait.downloadable.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x20000;
}

void *sub_1A3A392C4()
{
  return &unk_1A3AC5F00;
}

void static CoreSynthesizer.Voice.Trait.downloading.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x40000;
}

uint64_t sub_1A3A392DC(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t result;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = sub_1A3AB4538();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)a1 + 8);
  v12 = a1[1];
  v31 = *a1;
  v32 = v12;
  v13 = a1[2];
  v14 = a1[3];
  v29[1] = a1;
  v33 = v13;
  v34 = v14;
  v35 = v11;
  v29[2] = sub_1A3AB5738();
  v30 = a2;
  v15 = a2 + 56;
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a2 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v22 = 0;
  if (!v18)
    goto LABEL_5;
LABEL_4:
  v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
      goto LABEL_19;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_1A3A3A298((unint64_t *)&qword_1ED1B5300, MEMORY[0x1E0CB0E58]);
    v28 = sub_1A3AB48C8();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 ^= v28;
    if (v18)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v22++, 1))
      goto LABEL_21;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    if (!v26)
      break;
LABEL_14:
    v18 = (v26 - 1) & v26;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v19)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
LABEL_19:
    swift_release();
    return sub_1A3AB5708();
  }
  v26 = *(_QWORD *)(v15 + 8 * v27);
  if (v26)
  {
    ++v22;
    goto LABEL_14;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_14;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1A3A39560@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = sub_1A3AB4538();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

BOOL _s12TextToSpeech15CoreSynthesizerC5VoiceV0F4TypeO2eeoiySbAG_AGtFZ_0(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;
  _BOOL8 result;

  v2 = *a2;
  switch(*a1)
  {
    case 4:
      if (v2 != 4)
        goto LABEL_18;
      result = 1;
      break;
    case 5:
      if (v2 != 5)
        goto LABEL_18;
      result = 1;
      break;
    case 6:
      if (v2 != 6)
        goto LABEL_18;
      result = 1;
      break;
    case 7:
      if (v2 != 7)
        goto LABEL_18;
      result = 1;
      break;
    case 8:
      if (v2 != 8)
        goto LABEL_18;
      result = 1;
      break;
    case 9:
      if (v2 != 9)
        goto LABEL_18;
      result = 1;
      break;
    case 0xA:
      if (v2 != 10)
        goto LABEL_18;
      result = 1;
      break;
    default:
      if ((v2 - 4) < 7)
LABEL_18:
        result = 0;
      else
        result = *a1 == v2;
      break;
  }
  return result;
}

BOOL _s12TextToSpeech15CoreSynthesizerC5VoiceV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  _BOOL8 result;
  char v14;
  char v15;
  char v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v32 = *(unsigned __int8 *)(a1 + 41);
  v31 = *(_QWORD *)(a1 + 48);
  v30 = *(unsigned __int8 *)(a1 + 56);
  v28 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 72);
  v24 = *(_BYTE *)(a1 + 92);
  v18 = *(_DWORD *)(a1 + 96);
  v21 = *(_DWORD *)(a1 + 88);
  v22 = *(_BYTE *)(a1 + 100);
  v6 = *(_QWORD **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(unsigned __int8 *)(a2 + 40);
  v10 = *(unsigned __int8 *)(a2 + 41);
  v11 = *(_QWORD *)(a2 + 48);
  v29 = *(unsigned __int8 *)(a2 + 56);
  v27 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v23 = *(unsigned __int8 *)(a2 + 92);
  v17 = *(_DWORD *)(a2 + 96);
  v19 = *(_BYTE *)(a2 + 100);
  v20 = *(_DWORD *)(a2 + 88);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_1A3AB5654(), result = 0, (v12 & 1) != 0))
  {
    if ((sub_1A3A389BC(v2, v6) & 1) == 0)
      return 0;
    if (v3 == v7 && v4 == v8)
    {
      result = 0;
    }
    else
    {
      v14 = sub_1A3AB5654();
      result = 0;
      if ((v14 & 1) == 0)
        return result;
    }
    if (v5 == v9 && v32 == v10 && v31 == v11)
    {
      switch(v30)
      {
        case 4:
          if (v29 != 4)
            return 0;
          goto LABEL_29;
        case 5:
          if (v29 != 5)
            return 0;
          goto LABEL_29;
        case 6:
          if (v29 != 6)
            return 0;
          goto LABEL_29;
        case 7:
          if (v29 != 7)
            return 0;
          goto LABEL_29;
        case 8:
          if (v29 != 8)
            return 0;
          goto LABEL_29;
        case 9:
          if (v29 != 9)
            return 0;
          goto LABEL_29;
        case 10:
          if (v29 != 10)
            return 0;
          goto LABEL_29;
        default:
          result = 0;
          if ((v29 - 11) > 0xFFFFFFF8 || v30 != v29)
            return result;
LABEL_29:
          if ((sub_1A3A38A84(v28, v27) & 1) == 0)
            return 0;
          if ((sub_1A3A38A84(v26, v25) & 1) == 0)
            return 0;
          sub_1A3A3A25C();
          if ((sub_1A3AB50CC() & 1) == 0)
            return 0;
          if ((v24 & 1) != 0)
          {
            if (!v23)
              return 0;
          }
          else
          {
            v15 = v23;
            if (v21 != v20)
              v15 = 1;
            if ((v15 & 1) != 0)
              return 0;
          }
          if ((v22 & 1) != 0)
            return (v19 & 1) != 0;
          v16 = v19;
          if (v18 != v17)
            v16 = 1;
          if ((v16 & 1) == 0)
            return 1;
          break;
      }
      return 0;
    }
  }
  return result;
}

unint64_t sub_1A3A3997C()
{
  unint64_t result;

  result = qword_1EE6D3BF8;
  if (!qword_1EE6D3BF8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Gender, &type metadata for CoreSynthesizer.Voice.Gender);
    atomic_store(result, (unint64_t *)&qword_1EE6D3BF8);
  }
  return result;
}

unint64_t sub_1A3A399C4()
{
  unint64_t result;

  result = qword_1EE6D3C00;
  if (!qword_1EE6D3C00)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.VoiceType.SiriVoiceTechnology, &type metadata for CoreSynthesizer.Voice.VoiceType.SiriVoiceTechnology);
    atomic_store(result, (unint64_t *)&qword_1EE6D3C00);
  }
  return result;
}

unint64_t sub_1A3A39A0C()
{
  unint64_t result;

  result = qword_1EE6D24C8;
  if (!qword_1EE6D24C8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.VoiceType, &type metadata for CoreSynthesizer.Voice.VoiceType);
    atomic_store(result, (unint64_t *)&qword_1EE6D24C8);
  }
  return result;
}

unint64_t sub_1A3A39A64()
{
  unint64_t result;

  result = qword_1ED1B5348;
  if (!qword_1ED1B5348)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for CoreSynthesizer.Voice.Trait, &type metadata for CoreSynthesizer.Voice.Trait);
    atomic_store(result, (unint64_t *)&qword_1ED1B5348);
  }
  return result;
}

void _s5VoiceVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t _s5VoiceVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v6;
  return a1;
}

uint64_t _s5VoiceVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  int v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 80);
  v5 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v4;
  v6 = v4;

  v7 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v7;
  v8 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v8;
  return a1;
}

__n128 _s5VoiceVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 93) = *(_QWORD *)((char *)a2 + 93);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t _s5VoiceVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  return a1;
}

uint64_t _s5VoiceVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 101))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s5VoiceVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 100) = 0;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 101) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 101) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Voice()
{
  return &type metadata for CoreSynthesizer.Voice;
}

uint64_t _s5VoiceV6GenderOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A3A39E94 + 4 * byte_1A3AC5E63[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A3A39EC8 + 4 * byte_1A3AC5E5E[v4]))();
}

uint64_t sub_1A3A39EC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A39ED0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A39ED8);
  return result;
}

uint64_t sub_1A3A39EE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A39EECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A3A39EF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A39EF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Voice.Gender()
{
  return &type metadata for CoreSynthesizer.Voice.Gender;
}

uint64_t _s5VoiceV9VoiceTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
  {
    v6 = *a1;
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 8)
      return v7 - 7;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 10;
    if (a2 + 10 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1A3A39F64 + 4 * byte_1A3AC5E68[v4]))();
  }
}

uint64_t _s5VoiceV9VoiceTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 10;
  if (a3 + 10 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF6)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1A3A3A010 + 4 * byte_1A3AC5E72[v5]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1A3A3A044 + 4 * byte_1A3AC5E6D[v5]))();
}

uint64_t sub_1A3A3A044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3A04C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A3A054);
  return result;
}

uint64_t sub_1A3A3A060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A3A068);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1A3A3A06C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3A074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3A080(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

_BYTE *sub_1A3A3A094(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 3;
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Voice.VoiceType()
{
  return &type metadata for CoreSynthesizer.Voice.VoiceType;
}

uint64_t _s5VoiceV9VoiceTypeO19SiriVoiceTechnologyOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1A3A3A100 + 4 * byte_1A3AC5E7C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1A3A3A134 + 4 * byte_1A3AC5E77[v4]))();
}

uint64_t sub_1A3A3A134(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3A13C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A3A144);
  return result;
}

uint64_t sub_1A3A3A150(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A3A158);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1A3A3A15C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3A164(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Voice.VoiceType.SiriVoiceTechnology()
{
  return &type metadata for CoreSynthesizer.Voice.VoiceType.SiriVoiceTechnology;
}

uint64_t _s5VoiceV7QualityOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1A3A3A1CC + 4 * byte_1A3AC5E86[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1A3A3A200 + 4 * byte_1A3AC5E81[v4]))();
}

uint64_t sub_1A3A3A200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3A208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A3A210);
  return result;
}

uint64_t sub_1A3A3A21C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A3A224);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1A3A3A228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3A230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Voice.Quality()
{
  return &type metadata for CoreSynthesizer.Voice.Quality;
}

ValueMetadata *type metadata accessor for CoreSynthesizer.Voice.Trait()
{
  return &type metadata for CoreSynthesizer.Voice.Trait;
}

unint64_t sub_1A3A3A25C()
{
  unint64_t result;

  result = qword_1ED1B52A8;
  if (!qword_1ED1B52A8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED1B52A8);
  }
  return result;
}

uint64_t sub_1A3A3A298(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1A3AB4538();
    result = MEMORY[0x1A8597738](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t TTSMarkup.Paragraph.init(_:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;
  _OWORD v20[3];

  *(_QWORD *)&v20[0] = MEMORY[0x1E0DEE9D8];
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x100))();
  v5 = v4;
  if (!(v4 >> 62))
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_17:
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_18:
    swift_bridgeObjectRelease_n();
    v18 = sub_1A39A4820(&qword_1EE6D2BE0);
    v19 = &protocol witness table for <A> [A];

    *(_QWORD *)&v17 = v9;
    result = sub_1A39A1AB8(&v17, (uint64_t)v20 + 8);
    v14 = v20[1];
    *a2 = v20[0];
    a2[1] = v14;
    a2[2] = v20[2];
    return result;
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v6 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1A85960B8](v8, v5);
      else
        v10 = *(id *)(v5 + 8 * v8 + 32);
      v11 = v10;
      sub_1A39D518C((uint64_t)&v15);

      if (v16)
      {
        sub_1A39A1AB8(&v15, (uint64_t)&v17);
        sub_1A39A1AB8(&v17, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1A39BFBD8(0, v9[2] + 1, 1, v9);
        v13 = v9[2];
        v12 = v9[3];
        if (v13 >= v12 >> 1)
          v9 = sub_1A39BFBD8((_QWORD *)(v12 > 1), v13 + 1, 1, v9);
        v9[2] = v13 + 1;
        sub_1A39A1AB8(&v15, (uint64_t)&v9[5 * v13 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v15);
      }
      ++v8;
    }
    while (v6 != v8);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Paragraph.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

unint64_t TTSMarkup.Paragraph.attributes.getter()
{
  return sub_1A39A5780(MEMORY[0x1E0DEE9D8]);
}

uint64_t TTSMarkup.Paragraph.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Paragraph.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Paragraph.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Paragraph._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Paragraph._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.Paragraph._content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Paragraph.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Paragraph.init(speech:)@<X0>(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = MEMORY[0x1E0DEE9D8];
  return a1();
}

uint64_t TTSMarkup.Paragraph.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.Paragraph;
  v7[4] = &protocol witness table for TTSMarkup.Paragraph;
  v7[0] = swift_allocObject();
  sub_1A39C1D5C(v3, v7[0] + 16);
  TTSMarkupVisitor.visit(_:)(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

uint64_t sub_1A3A3A658()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for TTSMarkup.Paragraph()
{
  return &type metadata for TTSMarkup.Paragraph;
}

uint64_t IntervalTree.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = v2;
  v6 = *v2;
  swift_retain();
  v7 = sub_1A3A3A708(a1, v6, a2);
  result = swift_release_n();
  *v3 = v7;
  return result;
}

uint64_t sub_1A3A3A708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];

  v6 = a1;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v33 - v12;
  if (v14)
  {
    v33[0] = *v3;
    v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 160);
    v16 = swift_retain();
    v17 = v15(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 184))(v17);
    v18 = *(_QWORD *)(a3 + 24);
    v19 = sub_1A3AB491C();
    v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    v20(v11, v7);
    v21 = ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
    if ((v19 & 1) != 0)
    {
      v15(v21);
      (*(void (**)(char *))(*(_QWORD *)a2 + 192))(v13);
    }
    type metadata accessor for IntervalNode(0, v7, v18, v22);
    v23 = static IntervalNode.> infix(_:_:)(v6, a2);
    v24 = *(_QWORD *)a2;
    if ((v23 & 1) != 0)
    {
      v25 = *(uint64_t (**)(void))(v24 + 232);
      v26 = v25();
      v27 = swift_release();
      if (!v26)
      {
        v28 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 240);
LABEL_11:
        v31 = swift_retain();
        v28(v31);
        return a2;
      }
    }
    else
    {
      v25 = *(uint64_t (**)(void))(v24 + 208);
      v29 = v25();
      v27 = swift_release();
      if (!v29)
      {
        v28 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 216);
        goto LABEL_11;
      }
    }
    v33[1] = v33[0];
    v30 = ((uint64_t (*)(uint64_t))v25)(v27);
    sub_1A3A3A708(v6, v30, a3);
    swift_release();
    swift_release();
    return a2;
  }
  swift_retain();
  return v6;
}

Swift::Void __swiftcall IntervalTree.printTree()()
{
  uint64_t v0;
  uint64_t *v1;

  sub_1A3A3A938(*v1, v0);
}

uint64_t sub_1A3A3A938(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    v4 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 208);
    swift_retain();
    if (v4())
    {
      ((void (*)(void))sub_1A3A3A938)();
      swift_release();
    }
    sub_1A39A4820(&qword_1EE6D2500);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(v5 + 56) = type metadata accessor for IntervalNode(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v6);
    *(_QWORD *)(v5 + 32) = a1;
    swift_retain();
    sub_1A3AB56D8();
    v7 = swift_bridgeObjectRelease();
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(v7);
    if (v8)
    {
      sub_1A3A3A938(v8, a2);
      swift_release();
    }
    return swift_release();
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D2500);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 32) = 0xD000000000000012;
    *(_QWORD *)(v9 + 40) = 0x80000001A3AF1D30;
    sub_1A3AB56D8();
    return swift_bridgeObjectRelease();
  }
}

uint64_t IntervalTree.asArray.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;

  v6 = *v4;
  type metadata accessor for IntervalNode(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v8 = sub_1A3AB4BEC();
  sub_1A3A3AB30(v6, (uint64_t)&v8, a1);
  return v8;
}

uint64_t sub_1A3A3AB30(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v5 = result;
    v6 = *(uint64_t (**)(void))(*(_QWORD *)result + 208);
    swift_retain();
    if (v6())
    {
      ((void (*)(void))sub_1A3A3AB30)();
      swift_release();
    }
    type metadata accessor for IntervalNode(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
    sub_1A3AB4C58();
    swift_retain();
    v8 = sub_1A3AB4C28();
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 232))(v8);
    if (v9)
    {
      sub_1A3A3AB30(v9, a2, a3);
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t IntervalTree.intersections(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v9;

  v7 = *v4;
  type metadata accessor for IntervalNode(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v9 = sub_1A3AB4850();
  sub_1A3A3AC90(a1, v7, (uint64_t)&v9, a2);
  return v9;
}

uint64_t sub_1A3A3AC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v33 - v15;
  if (v17)
  {
    v34 = *v4;
    v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160);
    v19 = swift_retain();
    v20 = v18(v19);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 136))(v20);
    v21 = *(_QWORD *)(a4 + 24);
    v22 = sub_1A3AB4928();
    v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v13, v9);
    v24 = ((uint64_t (*)(char *, uint64_t))v23)(v16, v9);
    if ((v22 & 1) == 0)
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(v24);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 160))(v25);
      v26 = sub_1A3AB491C();
      v23(v13, v9);
      v24 = ((uint64_t (*)(char *, uint64_t))v23)(v16, v9);
      if ((v26 & 1) == 0)
      {
        v36 = a2;
        type metadata accessor for IntervalNode(255, v9, v21, v27);
        sub_1A3AB4C58();
        swift_retain();
        v24 = sub_1A3AB4C28();
      }
    }
    v35 = a3;
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(v24);
    if (v28)
    {
      v29 = v28;
      v30 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 184))();
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(v30);
      v31 = sub_1A3AB4934();
      v23(v13, v9);
      v23(v16, v9);
      if ((v31 & 1) != 0)
      {
        v36 = v34;
        swift_retain();
        sub_1A3A3AC90(a1, v29, v35, a4);
        v28 = swift_release_n();
      }
      else
      {
        v28 = swift_release();
      }
    }
    v36 = v34;
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(v28);
    sub_1A3A3AC90(a1, v32, v35, a4);
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SpeechStringIntervalTree(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SpeechStringIntervalTree(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for SpeechStringIntervalTree(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpeechStringIntervalTree(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpeechStringIntervalTree(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for IntervalTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntervalTree);
}

ValueMetadata *type metadata accessor for TTSMarkup()
{
  return &type metadata for TTSMarkup;
}

void sub_1A3A3B0A4()
{
  qword_1EE6E6E00 = -1;
}

void sub_1A3A3B0B4(uint64_t a1)
{
  sqlite3 *ppDb[2];

  ppDb[1] = *(sqlite3 **)MEMORY[0x1E0C80C00];
  ppDb[0] = 0;
  sub_1A3A3BC64(a1);
  sqlite3_open("file::memory:", ppDb);
  __asm { BR              X12 }
}

uint64_t sub_1A3A3B138(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (__cdecl *v29)(void *);
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  sqlite3 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  char v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  id v77;
  void *v78;
  void *v79;
  uint64_t v80;
  sqlite3 *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  id v85;
  id v86;
  void *v87;
  id v88;
  void *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD v92[16];

  if (sqlite3_deserialize((sqlite3 *)v21, "main", v23, BYTE6(v20), BYTE6(v20), 0))
  {
    sub_1A3A3BE3C();
    swift_allocError();
    v27 = 3;
LABEL_3:
    *(_QWORD *)v26 = v27;
    *(_BYTE *)(v26 + 8) = 1;
LABEL_7:
    swift_willThrow();
    goto LABEL_8;
  }
  *(_QWORD *)(v25 - 104) = 0;
  v28 = sub_1A3AB4A00();
  sqlite3_prepare_v2((sqlite3 *)v21, (const char *)(v28 + 32), -1, (sqlite3_stmt **)(v25 - 104), 0);
  swift_release();
  v21 = *(_QWORD *)(v25 - 104);
  if (qword_1EE6E0B60 != -1)
    goto LABEL_63;
  while (2)
  {
    v29 = (void (__cdecl *)(void *))qword_1EE6E6E00;
    v30 = sub_1A3AB4A00();
    v31 = sqlite3_bind_text((sqlite3_stmt *)v21, 1, (const char *)(v30 + 32), -1, v29);
    swift_release();
    if (v31)
    {
      sub_1A3A3BE3C();
      swift_allocError();
      *(_QWORD *)v32 = 4;
      *(_BYTE *)(v32 + 8) = 1;
      goto LABEL_7;
    }
    if (sqlite3_step((sqlite3_stmt *)v21) != 100)
    {
      sqlite3_finalize(*(sqlite3_stmt **)(v25 - 104));
      sub_1A3A3BE3C();
      swift_allocError();
      v27 = 5;
      goto LABEL_3;
    }
    *(_QWORD *)(v25 - 192) = v22;
    if (!sqlite3_column_text((sqlite3_stmt *)v21, 0))
    {
      __break(1u);
LABEL_71:
      sub_1A3AB5678();
      __break(1u);
      JUMPOUT(0x1A3A3BA78);
    }
    v34 = sub_1A3AB4A9C();
    v36 = v35;
    *(_QWORD *)(v25 - 128) = 44;
    *(_QWORD *)(v25 - 120) = 0xE100000000000000;
    MEMORY[0x1E0C80A78](v34);
    v92[2] = v25 - 128;
    swift_bridgeObjectRetain();
    v37 = sub_1A39AC208(0x7FFFFFFFFFFFFFFFLL, 1, sub_1A39AC82C, (uint64_t)v92, v34, v36);
    *(_QWORD *)(v25 - 208) = v24;
    swift_bridgeObjectRelease();
    v38 = *((_QWORD *)v37 + 2);
    if (v38)
    {
      *(_QWORD *)(v25 - 128) = MEMORY[0x1E0DEE9D8];
      sub_1A39AE488(0, v38, 0);
      v39 = *(_QWORD *)(v25 - 128);
      v40 = (uint64_t *)(v37 + 56);
      do
      {
        v42 = *(v40 - 3);
        v41 = *(v40 - 2);
        v43 = *(v40 - 1);
        v44 = *v40;
        swift_bridgeObjectRetain();
        v45 = MEMORY[0x1A85957F4](v42, v41, v43, v44);
        v47 = v46;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v25 - 128) = v39;
        v49 = *(_QWORD *)(v39 + 16);
        v48 = *(_QWORD *)(v39 + 24);
        if (v49 >= v48 >> 1)
        {
          sub_1A39AE488((char *)(v48 > 1), v49 + 1, 1);
          v39 = *(_QWORD *)(v25 - 128);
        }
        *(_QWORD *)(v39 + 16) = v49 + 1;
        v50 = v39 + 16 * v49;
        *(_QWORD *)(v50 + 32) = v45;
        *(_QWORD *)(v50 + 40) = v47;
        v40 += 4;
        --v38;
      }
      while (v38);
      *(_QWORD *)(v25 - 160) = v39;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 - 160) = MEMORY[0x1E0DEE9D8];
    }
    sqlite3_finalize(*(sqlite3_stmt **)(v25 - 104));
    *(_QWORD *)(v25 - 128) = 0;
    v51 = *(sqlite3 **)(v25 - 96);
    v52 = sub_1A3AB4A00();
    sqlite3_prepare_v2(v51, (const char *)(v52 + 32), -1, (sqlite3_stmt **)(v25 - 128), 0);
    swift_release();
    v53 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v25 - 152) = sub_1A3A3BA88(MEMORY[0x1E0DEE9D8]);
    v21 = *(_QWORD *)(v25 - 128);
    if (sqlite3_step((sqlite3_stmt *)v21) == 100)
    {
      v54 = 1;
      while (sqlite3_column_text((sqlite3_stmt *)v21, 0))
      {
        v55 = sub_1A3AB4A9C();
        v24 = v56;
        v22 = *(_QWORD **)(v25 - 152);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v25 - 136) = v22;
        v21 = sub_1A39A2734(v55, v24);
        v59 = v22[2];
        v60 = (v58 & 1) == 0;
        v61 = v59 + v60;
        if (__OFADD__(v59, v60))
          goto LABEL_59;
        v62 = v58;
        if (v22[3] >= v61)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v22 = (_QWORD *)(v25 - 136);
            sub_1A3A3C188();
          }
        }
        else
        {
          sub_1A3A3BE80(v61, isUniquelyReferenced_nonNull_native);
          v22 = *(_QWORD **)(v25 - 136);
          v63 = sub_1A39A2734(v55, v24);
          if ((v62 & 1) != (v64 & 1))
            goto LABEL_71;
          v21 = v63;
        }
        v65 = *(_QWORD **)(v25 - 136);
        *(_QWORD *)(v25 - 152) = v65;
        if ((v62 & 1) != 0)
        {
          *(_QWORD *)(v65[7] + 8 * v21) = v54;
        }
        else
        {
          v65[((unint64_t)v21 >> 6) + 8] |= 1 << v21;
          v66 = (uint64_t *)(v65[6] + 16 * v21);
          *v66 = v55;
          v66[1] = v24;
          *(_QWORD *)(v65[7] + 8 * v21) = v54;
          v67 = v65[2];
          v68 = __OFADD__(v67, 1);
          v69 = v67 + 1;
          if (v68)
            goto LABEL_62;
          v65[2] = v69;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (__OFADD__(v54, 1))
          goto LABEL_60;
        v21 = *(_QWORD *)(v25 - 128);
        ++v54;
        if (sqlite3_step((sqlite3_stmt *)v21) != 100)
          goto LABEL_35;
      }
LABEL_69:
      __break(1u);
    }
LABEL_35:
    sqlite3_finalize((sqlite3_stmt *)v21);
    *(_QWORD *)(v25 - 136) = v53;
    v70 = *(_QWORD *)(v25 - 160);
    v22 = *(_QWORD **)(v25 - 152);
    v71 = *(_QWORD *)(v70 + 16);
    if (!v71)
    {
LABEL_56:
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v25 - 136);
      swift_bridgeObjectRelease();
      sqlite3_close(*(sqlite3 **)(v25 - 96));
      return v21;
    }
    v24 = 0;
    *(_QWORD *)(v25 - 176) = 30;
    *(_QWORD *)(v25 - 168) = v70 + 32;
    *(_QWORD *)(v25 - 200) = v71;
    while (1)
    {
      if (v24 >= *(_QWORD *)(v70 + 16))
        goto LABEL_61;
      if (!v22[2])
        goto LABEL_38;
      v72 = (uint64_t *)(*(_QWORD *)(v25 - 168) + 16 * v24);
      v74 = *v72;
      v73 = v72[1];
      swift_bridgeObjectRetain();
      v21 = (uint64_t)v22;
      v75 = sub_1A39A2734(v74, v73);
      if ((v76 & 1) != 0)
        break;
      swift_bridgeObjectRelease();
      v70 = *(_QWORD *)(v25 - 160);
LABEL_38:
      if (++v24 == v71)
        goto LABEL_56;
    }
    v21 = *(_QWORD *)(v22[7] + 8 * v75);
    v77 = objc_msgSend(objc_allocWithZone((Class)TTSRuleset), sel_init);
    v78 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    objc_msgSend(v77, sel_setIdentifier_, v78);

    *(_QWORD *)(v25 - 144) = v77;
    v79 = v77;
    v80 = *(_QWORD *)(v25 - 176);
    objc_msgSend(v79, sel_setPriority_, v80);
    *(_QWORD *)(v25 - 176) = v80 + 1;
    if (__OFADD__(v80, 1))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      JUMPOUT(0x1A3A3BA4CLL);
    }
    *(_QWORD *)(v25 - 112) = 0;
    v81 = *(sqlite3 **)(v25 - 96);
    v82 = sub_1A3AB4A00();
    sqlite3_prepare_v2(v81, (const char *)(v82 + 32), -1, (sqlite3_stmt **)(v25 - 112), 0);
    swift_release();
    if (v21 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_65;
    if (v21 > 0x7FFFFFFF)
      goto LABEL_66;
    *(_QWORD *)(v25 - 184) = v24;
    v24 = *(_QWORD *)(v25 - 112);
    if (!sqlite3_bind_int((sqlite3_stmt *)v24, 1, v21))
    {
      while (1)
      {
        if (sqlite3_step((sqlite3_stmt *)v24) != 100)
        {
          v21 = (uint64_t)*(id *)(v25 - 144);
          MEMORY[0x1A8595980]();
          if (*(_QWORD *)((*(_QWORD *)(v25 - 136) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v25 - 136) & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
            sub_1A3AB4BE0();
          sub_1A3AB4C10();
          sub_1A3AB4BC8();
          sqlite3_finalize((sqlite3_stmt *)v24);

          v71 = *(_QWORD *)(v25 - 200);
          v70 = *(_QWORD *)(v25 - 160);
          v22 = *(_QWORD **)(v25 - 152);
          v24 = *(_QWORD *)(v25 - 184);
          goto LABEL_38;
        }
        if (!sqlite3_column_text((sqlite3_stmt *)v24, 0))
        {
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        sub_1A3AB4A9C();
        if (!sqlite3_column_text((sqlite3_stmt *)v24, 1))
          goto LABEL_68;
        sub_1A3AB4A9C();
        v83 = sqlite3_column_int((sqlite3_stmt *)v24, 2);
        v84 = sqlite3_column_int((sqlite3_stmt *)v24, 3);
        v85 = objc_msgSend(objc_allocWithZone((Class)TTSRuleReplacement), sel_init);
        v86 = objc_allocWithZone((Class)TTSRegex);
        v87 = (void *)sub_1A3AB4958();
        swift_bridgeObjectRelease();
        v88 = objc_msgSend(v86, sel_initWithPerlPattern_, v87);

        objc_msgSend(v85, sel_setRegex_, v88);
        objc_msgSend(v85, sel_setIsTerminalRule_, v83 == 1);
        v22 = (_QWORD *)objc_opt_self();
        v89 = (void *)sub_1A3AB4958();
        swift_bridgeObjectRelease();
        v21 = (uint64_t)objc_msgSend(v22, sel_processReplacementStringForSpecialCharacters_, v89);

        if (!v21)
        {
          sub_1A3AB497C();
          v22 = v90;
          v21 = sub_1A3AB4958();
          swift_bridgeObjectRelease();
        }
        objc_msgSend(v85, sel_setReplacement_, v21);

        if ((v84 & 0x80000000) != 0)
          break;
        objc_msgSend(v85, sel_setOriginalRulesetIndex_, v84);
        objc_msgSend(*(id *)(v25 - 144), sel_addRuleReplacement_, v85);

      }
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      swift_once();
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A3A3BE3C();
  swift_allocError();
  *(_QWORD *)v91 = 4;
  *(_BYTE *)(v91 + 8) = 1;
  swift_willThrow();

  swift_bridgeObjectRelease();
LABEL_8:
  sqlite3_close(*(sqlite3 **)(v25 - 96));
  return v21;
}

unint64_t sub_1A3A3BA88(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D3C10);
  v2 = (_QWORD *)sub_1A3AB54B0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_1A39A2734(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t TTSSQLiteReader.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TTSSQLiteReader.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

_QWORD *sub_1A3A3BBF8()
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = 0xD000000000000033;
  result[3] = 0x80000001A3AF1D70;
  result[4] = 0xD00000000000002ALL;
  result[5] = 0x80000001A3AF1DB0;
  result[6] = 0xD000000000000049;
  result[7] = 0x80000001A3AF1DE0;
  return result;
}

void sub_1A3A3BC64(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t *sub_1A3A3BCBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *result;
  uint64_t v3;

  result = &v3;
  *(_QWORD *)(v1 + 8) = a1 & 0xFFFFFFFFFFFFFFLL;
  return result;
}

unint64_t sub_1A3A3BE3C()
{
  unint64_t result;

  result = qword_1EE6D3C08;
  if (!qword_1EE6D3C08)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC64E0, &type metadata for SQLiteError);
    atomic_store(result, (unint64_t *)&qword_1EE6D3C08);
  }
  return result;
}

uint64_t sub_1A3A3BE80(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_1A39A4820(&qword_1EE6D3C10);
  v37 = a2;
  v6 = sub_1A3AB5498();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    result = sub_1A3AB5738();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_1A3A3C188()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D3C10);
  v2 = *v0;
  v3 = sub_1A3AB548C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A3A3C334(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1A3AB4280();
  if (result)
  {
    v5 = result;
    result = sub_1A3AB4298();
    v6 = a1 - result;
    if (__OFSUB__(a1, result))
    {
      __break(1u);
    }
    else if (!__OFSUB__(a2, a1))
    {
      sub_1A3AB428C();
      return v5 + v6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SQLiteError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SQLiteError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SQLiteError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1A3A3C408(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1A3A3C424(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteError()
{
  return &type metadata for SQLiteError;
}

uint64_t type metadata accessor for TTSSQLiteReader()
{
  return objc_opt_self();
}

uint64_t method lookup function for TTSSQLiteReader()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSSQLiteReader.loadSiriRules(fromData:orderKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t TTSAudioEffect.spec.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;

  if ((*v1 & 1) != 0)
    v3 = sub_1A39A4CDC();
  else
    v3 = sub_1A3A36B70();
  v5 = v3[9];
  v4 = v3[10];
  v7 = v3[7];
  v6 = v3[8];
  v15 = *((_BYTE *)v3 + 48);
  v8 = v3[5];
  v14 = v3[4];
  v10 = v3[2];
  v9 = v3[3];
  v12 = *v3;
  v11 = v3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v4;
  return result;
}

TextToSpeech::TTSAudioEffect_optional __swiftcall TTSAudioEffect.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  TextToSpeech::TTSAudioEffect_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1A3AB54E0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

void *static TTSAudioEffect.allCases.getter()
{
  return &unk_1E4A974F0;
}

uint64_t TTSAudioEffect.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x627265766572;
  else
    return 0x657A696C61757165;
}

uint64_t sub_1A3A3C614(char *a1, char *a2)
{
  return sub_1A3A3C620(*a1, *a2);
}

uint64_t sub_1A3A3C620(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x627265766572;
  else
    v3 = 0x657A696C61757165;
  if (v2)
    v4 = 0xE900000000000072;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x627265766572;
  else
    v5 = 0x657A696C61757165;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE900000000000072;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

TextToSpeech::TTSAudioEffect_optional sub_1A3A3C6C4(Swift::String *a1)
{
  return TTSAudioEffect.init(rawValue:)(*a1);
}

void sub_1A3A3C6D0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x657A696C61757165;
  if (*v1)
    v2 = 0x627265766572;
  v3 = 0xE900000000000072;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1A3A3C714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D3C18;
  if (!qword_1EE6D3C18)
  {
    v1 = sub_1A39AB624(&qword_1EE6D3C20);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D3C18);
  }
  return result;
}

void sub_1A3A3C760(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E4A975F8;
}

unint64_t sub_1A3A3C774()
{
  unint64_t result;

  result = qword_1EE6D3C28;
  if (!qword_1EE6D3C28)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSAudioEffect, &type metadata for TTSAudioEffect);
    atomic_store(result, (unint64_t *)&qword_1EE6D3C28);
  }
  return result;
}

uint64_t sub_1A3A3C7B8()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A3C838()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A3C894()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A3C910()
{
  sub_1A3A3CA84();
  return sub_1A3AB4B8C();
}

uint64_t sub_1A3A3C96C()
{
  sub_1A3A3CA84();
  return sub_1A3AB4B80();
}

uint64_t storeEnumTagSinglePayload for TTSAudioEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A3A3CA04 + 4 * byte_1A3AC6575[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A3A3CA38 + 4 * byte_1A3AC6570[v4]))();
}

uint64_t sub_1A3A3CA38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3CA40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A3CA48);
  return result;
}

uint64_t sub_1A3A3CA54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A3CA5CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A3A3CA60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A3CA68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSAudioEffect()
{
  return &type metadata for TTSAudioEffect;
}

unint64_t sub_1A3A3CA84()
{
  unint64_t result;

  result = qword_1EE6D3C30[0];
  if (!qword_1EE6D3C30[0])
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSAudioEffect, &type metadata for TTSAudioEffect);
    atomic_store(result, qword_1EE6D3C30);
  }
  return result;
}

uint64_t StreamCachedValue.executor.getter()
{
  sub_1A3A40C78();
  return swift_retain();
}

uint64_t sub_1A3A3CADC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 112);
  swift_beginAccess();
  v4 = sub_1A3AB50FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A3A3CB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 112);
  swift_beginAccess();
  v4 = sub_1A3AB50FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_1A3A3CBC4()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v1[3] = v3;
  v1[4] = *(_QWORD *)(v3 - 8);
  v1[5] = swift_task_alloc();
  v5 = type metadata accessor for StreamCachedValue(0, v3, *(_QWORD *)(v2 + 88), v4);
  MEMORY[0x1A8597738](&protocol conformance descriptor for StreamCachedValue<A>, v5);
  v1[6] = sub_1A3AB4C70();
  v1[7] = v6;
  return swift_task_switch();
}

uint64_t sub_1A3A3CC64()
{
  uint64_t v0;
  int **v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD);

  v1 = (int **)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 120));
  v2 = *v1;
  *(_QWORD *)(v0 + 64) = *v1;
  if (v2)
  {
    *(_QWORD *)(v0 + 72) = v1[1];
    v5 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = sub_1A3A3CD10;
    return v5(*(_QWORD *)(v0 + 40));
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A3CD10()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A3CD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  sub_1A3A3CDCC(v2);
  sub_1A39E9ED0(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A3CDCC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t result;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  void (*v48)(char *, _QWORD, uint64_t, uint64_t);
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v53 = *v1;
  v3 = *(_QWORD *)(v53 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v44 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB50FC();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (char *)&v43 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v49 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v52 = (char *)&v43 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v43 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v43 - v19;
  v50 = v1;
  sub_1A3A3CADC((uint64_t)&v43 - v19);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v51 = a1;
  v47 = v21;
  v21(v18, a1, v3);
  v48 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56);
  v48(v18, 0, 1, v3);
  v46 = TupleTypeMetadata2;
  v22 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  v23 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v23(v10, v20, v6);
  v23(v22, v18, v6);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v24(v10, 1, v3) == 1)
  {
    v25 = *(void (**)(char *, uint64_t))(v11 + 8);
    v25(v18, v6);
    v25(v20, v6);
    if (v24(v22, 1, v3) == 1)
      return ((uint64_t (*)(char *, uint64_t))v25)(v10, v6);
  }
  else
  {
    v23(v52, v10, v6);
    if (v24(v22, 1, v3) != 1)
    {
      v29 = v44;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v44, v22, v3);
      v30 = v52;
      v31 = sub_1A3AB494C();
      v32 = *(void (**)(char *, uint64_t))(v4 + 8);
      v32(v29, v3);
      v33 = *(void (**)(char *, uint64_t))(v11 + 8);
      v33(v18, v6);
      v33(v20, v6);
      v34 = v30;
      v28 = v53;
      v32(v34, v3);
      result = ((uint64_t (*)(char *, uint64_t))v33)(v10, v6);
      if ((v31 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    v27 = *(void (**)(char *, uint64_t))(v11 + 8);
    v27(v18, v6);
    v27(v20, v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v52, v3);
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v46);
  v28 = v53;
LABEL_8:
  v35 = (uint64_t)v49;
  v36 = v51;
  v47(v49, v51, v3);
  v48((char *)v35, 0, 1, v3);
  v37 = v50;
  sub_1A3A3CB4C(v35);
  swift_beginAccess();
  v38 = v37[3];
  sub_1A3AB4388();
  v39 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  sub_1A3AB4D54();
  v40 = sub_1A39B9F44(&qword_1ED1B52E0, v39, MEMORY[0x1E0CB09C8]);
  v54 = v38;
  MEMORY[0x1E0C80A78](v40);
  v41 = *(_QWORD *)(v28 + 88);
  *(&v43 - 4) = v3;
  *(&v43 - 3) = v41;
  *(&v43 - 2) = v36;
  v42 = sub_1A3AB4898();
  swift_bridgeObjectRetain();
  MEMORY[0x1A8597738](MEMORY[0x1E0DE9F98], v42);
  sub_1A3AB4B68();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A3D210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A3AB4D18();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, a3);
  sub_1A3AB4D54();
  sub_1A3AB4D3C();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1A3A3D2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  sub_1A3AB4D54();
  v0 = sub_1A3AB50FC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - v2;
  swift_beginAccess();
  sub_1A3AB4388();
  sub_1A39B9F44(&qword_1ED1B52E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1A3AB48B0();
  sub_1A3AB4880();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return swift_endAccess();
}

uint64_t sub_1A3A3D3F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a1;
  v40 = *v1;
  v2 = *(_QWORD *)(v40 + 80);
  v39 = sub_1A3AB4D54();
  v3 = sub_1A3AB50FC();
  MEMORY[0x1E0C80A78](v3);
  v44 = (char *)&v36 - v4;
  v45 = sub_1A3AB4388();
  v43 = *(_QWORD *)(v45 - 8);
  v5 = MEMORY[0x1E0C80A78](v45);
  v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v6;
  MEMORY[0x1E0C80A78](v5);
  v41 = (char *)&v36 - v7;
  v36 = sub_1A3AB4D18();
  v8 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v10 = (char *)&v36 - v9;
  v11 = sub_1A3AB50FC();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v36 - v14;
  v16 = *(_QWORD *)(v2 - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v36 - v20;
  v42 = v1;
  sub_1A3A3CADC((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v22 = v39;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, v2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v2);
    v23 = v39;
    sub_1A3AB4D3C();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v36);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v2);
    v22 = v23;
  }
  v24 = v41;
  sub_1A3AB437C();
  v25 = v43;
  v26 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  v27 = v37;
  v28 = v45;
  v26(v37, v24, v45);
  v29 = (*(unsigned __int8 *)(v25 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v30 = (char *)swift_allocObject();
  *((_QWORD *)v30 + 2) = v2;
  v31 = v42;
  *((_QWORD *)v30 + 3) = *(_QWORD *)(v40 + 88);
  *((_QWORD *)v30 + 4) = v31;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v30[v29], v27, v28);
  swift_retain();
  v32 = v46;
  sub_1A3AB4D24();
  v26(v27, v24, v28);
  v33 = *(_QWORD *)(v22 - 8);
  v34 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v44, v32, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, v22);
  swift_beginAccess();
  sub_1A39B9F44(&qword_1ED1B52E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1A3AB48B0();
  sub_1A3AB48BC();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v24, v28);
}

uint64_t sub_1A3A3D7A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v15;

  v3 = *a1;
  v4 = sub_1A3AB4388();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1A3AB4D00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = (char *)swift_allocObject();
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = *(_QWORD *)(v3 + 80);
  *((_QWORD *)v13 + 5) = *(_QWORD *)(v3 + 88);
  *((_QWORD *)v13 + 6) = v11;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v13[v12], (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  sub_1A3A3DA54((uint64_t)v9, (uint64_t)&unk_1EE6D3D20, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_1A3A3D918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[5] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A3D938()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 80) = Strong;
  if (Strong)
  {
    v3 = type metadata accessor for StreamCachedValue(0, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), v2);
    MEMORY[0x1A8597738](&protocol conformance descriptor for StreamCachedValue<A>, v3);
    sub_1A3AB4C70();
    return swift_task_switch();
  }
  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A3D9F0()
{
  sub_1A3A3D2F8();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A3DA38()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 80) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A3DA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1A3AB4D00();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1A3AB4CF4();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1A39D4F2C(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1A3AB4C70();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  sub_1A39A4820(&qword_1ED1B5478);
  return swift_task_create();
}

uint64_t sub_1A3A3DBA0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v2[4] = v4;
  v5 = sub_1A3AB4D90();
  v2[5] = v5;
  v2[6] = *(_QWORD *)(v5 - 8);
  v2[7] = swift_task_alloc();
  v6 = sub_1A3AB50FC();
  v2[8] = v6;
  v2[9] = *(_QWORD *)(v6 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = *(_QWORD *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v7 = *(_QWORD *)(v3 + 88);
  v2[13] = v7;
  v9 = type metadata accessor for StreamCachedValue(0, v4, v7, v8);
  MEMORY[0x1A8597738](&protocol conformance descriptor for StreamCachedValue<A>, v9);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A3DC9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 32);
  sub_1A3A3CADC(v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 24);
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 216))(v8);
    v9 = swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v9;
    *(_QWORD *)(v9 + 16) = v6;
    *(_QWORD *)(v9 + 24) = v4;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v10;
    MEMORY[0x1A8597738](MEMORY[0x1E0DF0848], v5);
    *v10 = v0;
    v10[1] = sub_1A3A3DE14;
    return sub_1A3AB4E20();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 32);
    v15 = *(_QWORD *)(v0 + 16);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
    v16(v12, *(_QWORD *)(v0 + 80), v14);
    v16(v15, v12, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A3DE14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v0 + 48);
  v1 = *(_QWORD *)(*v0 + 56);
  v3 = *(_QWORD *)(*v0 + 40);
  v5 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A3A3DEA8()
{
  uint64_t v0;

  return sub_1A3A41CC0(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t sub_1A3A3DEBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  v2 = *v1;
  v23[1] = a1;
  v24 = v2;
  v3 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v2 + 80);
  v7 = sub_1A3AB4D30();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v23 - v9;
  v11 = sub_1A3AB4D54();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v23 - v16;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DF07B8], v7);
  sub_1A3AB4D0C();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = sub_1A3AB4D00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v5, 1, 1, v18);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  v19 = (*(unsigned __int8 *)(v12 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = v6;
  v21 = v25;
  *((_QWORD *)v20 + 5) = *(_QWORD *)(v24 + 88);
  *((_QWORD *)v20 + 6) = v21;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v19], v15, v11);
  swift_retain();
  sub_1A39DDD84((uint64_t)v5, (uint64_t)&unk_1EE6D3C68, (uint64_t)v20);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
}

uint64_t sub_1A3A3E0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  v6 = type metadata accessor for StreamCachedValue(0, *(_QWORD *)(*(_QWORD *)a4 + 80), *(_QWORD *)(*(_QWORD *)a4 + 88), a4);
  MEMORY[0x1A8597738](&protocol conformance descriptor for StreamCachedValue<A>, v6);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A3E140()
{
  uint64_t v0;

  sub_1A3A3D3F8(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StreamCachedValue.recomputeBlock.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  sub_1A39EA864(v1);
  return v1;
}

char *sub_1A3A3E1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = a1;
  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 80);
  v10 = sub_1A3AB4D90();
  v26 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v24 - v11;
  v13 = sub_1A3AB4D90();
  v28 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v24 - v14;
  v27 = type metadata accessor for StreamCachedValue(0, a3, a4, v16);
  (*(void (**)(void))(v8 + 216))();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v9;
  v17[3] = a3;
  v17[4] = *(_QWORD *)(v8 + 88);
  v17[5] = a4;
  v18 = a4;
  v19 = v25;
  v17[6] = v25;
  v17[7] = a2;
  swift_retain();
  sub_1A3AB4D60();
  swift_release();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a3;
  v20[3] = v18;
  v20[4] = v19;
  v20[5] = a2;
  v20[6] = v24;
  swift_retain();
  swift_retain();
  v22 = sub_1A3A41200((uint64_t)v15, (uint64_t)&unk_1EE6D3C88, (uint64_t)v20, v21);
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
  return v22;
}

uint64_t sub_1A3A3E37C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t);

  v9 = sub_1A3AB50FC();
  v5[2] = v9;
  v5[3] = *(_QWORD *)(v9 - 8);
  v10 = swift_task_alloc();
  v5[4] = v10;
  v11 = *(_QWORD *)(a5 - 8);
  (*(void (**)(void))(v11 + 16))();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, a5);
  v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)a3 + *a3);
  v12 = (_QWORD *)swift_task_alloc();
  v5[5] = v12;
  *v12 = v5;
  v12[1] = sub_1A3A3E460;
  return v14(a1, v10);
}

uint64_t sub_1A3A3E460()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 32);
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = *(_QWORD *)(*v0 + 24);
  v5 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A3A3E4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v4[3] = a2;
  v4[4] = a3;
  v4[2] = a1;
  v5 = *a4;
  v6 = sub_1A3AB50FC();
  v4[5] = v6;
  v4[6] = *(_QWORD *)(v6 - 8);
  v7 = swift_task_alloc();
  v4[7] = v7;
  v10 = (uint64_t (*)(uint64_t))(**(int **)(v5 + 208) + *(_QWORD *)(v5 + 208));
  v8 = (_QWORD *)swift_task_alloc();
  v4[8] = v8;
  *v8 = v4;
  v8[1] = sub_1A3A3E570;
  return v10(v7);
}

uint64_t sub_1A3A3E570()
{
  uint64_t *v0;
  _QWORD *v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  int *v6;

  v1 = (_QWORD *)*v0;
  v2 = *(int **)(*v0 + 24);
  v3 = *v0;
  swift_task_dealloc();
  v6 = (int *)((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  v1[9] = v4;
  *v4 = v3;
  v4[1] = sub_1A3A3E5F4;
  return ((uint64_t (*)(_QWORD, _QWORD))v6)(v1[2], v1[7]);
}

uint64_t sub_1A3A3E5F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v0 + 48);
  v1 = *(_QWORD *)(*v0 + 56);
  v3 = *(_QWORD *)(*v0 + 40);
  v5 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

char *StreamCachedValue.__allocating_init(stream:recomputeBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  uint64_t v7;

  v6 = sub_1A3A41200(a1, a2, a3, a4);
  sub_1A39E9ED0(a2);
  v7 = sub_1A3AB4D90();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  return v6;
}

char *StreamCachedValue.init(stream:recomputeBlock:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;

  v5 = sub_1A3A40F7C(a1, a2, a3);
  sub_1A39E9ED0(a2);
  v6 = sub_1A3AB4D90();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return v5;
}

uint64_t sub_1A3A3E740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[9] = *(_QWORD *)(a6 - 8);
  v7[10] = swift_task_alloc();
  sub_1A3AB50FC();
  v7[11] = swift_task_alloc();
  v8 = sub_1A3AB4D84();
  v7[12] = v8;
  v7[13] = *(_QWORD *)(v8 - 8);
  v7[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A3E7EC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1A3AB4D90();
  sub_1A3AB4D6C();
  swift_beginAccess();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v1;
  *v1 = v0;
  v1[1] = sub_1A3A3E888;
  return sub_1A3AB4D78();
}

uint64_t sub_1A3A3E888()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A3E8DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 80), v1, v3);
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 128) = Strong;
    v7 = *(_QWORD *)(v0 + 56);
    if (Strong)
    {
      v8 = type metadata accessor for StreamCachedValue(0, v7, *(_QWORD *)(v0 + 64), v6);
      MEMORY[0x1A8597738](&protocol conformance descriptor for StreamCachedValue<A>, v8);
      sub_1A3AB4C70();
      return swift_task_switch();
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), v7);
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 120) = v9;
      *v9 = v0;
      v9[1] = sub_1A3A3E888;
      return sub_1A3AB4D78();
    }
  }
}

uint64_t sub_1A3A3EA48()
{
  uint64_t v0;

  sub_1A3A3CDCC(*(_QWORD *)(v0 + 80));
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A3EA90()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0[9] + 8))(v0[10], v0[7]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[15] = v1;
  *v1 = v0;
  v1[1] = sub_1A3A3E888;
  return sub_1A3AB4D78();
}

uint64_t StreamCachedValue.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  swift_beginAccess();
  sub_1A3AB4388();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  sub_1A3AB4D54();
  sub_1A39B9F44(&qword_1ED1B52E0, v2, MEMORY[0x1E0CB09C8]);
  v3 = sub_1A3AB4898();
  swift_bridgeObjectRetain();
  MEMORY[0x1A8597738](MEMORY[0x1E0DE9F98], v3);
  sub_1A3AB4B68();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_1A3AB48B0();
  sub_1A3AB48A4();
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 112);
  v5 = sub_1A3AB50FC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_1A39E9ED0(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120)));
  return v1;
}

uint64_t StreamCachedValue.__deallocating_deinit()
{
  return sub_1A3A40954((void (*)(void))StreamCachedValue.deinit);
}

uint64_t sub_1A3A3ECA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for StreamCachedValue(0, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  v5 = MEMORY[0x1A8597738](&protocol conformance descriptor for StreamCachedValue<A>, v4);
  return TTSActor.unownedExecutor.getter(v4, v5);
}

uint64_t sub_1A3A3ECE8()
{
  sub_1A3A40C78();
  return swift_retain();
}

uint64_t sub_1A3A3ECFC()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t sub_1A3A3ED30(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_unknownObjectRelease();
}

double sub_1A3A3ED74()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 24);
}

uint64_t sub_1A3A3EDA4(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(double *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_1A3A3EDE0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1A3A3EE1C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 32);
}

uint64_t sub_1A3A3EE4C(double a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1A3A3EE90(a1);
  return v2;
}

uint64_t sub_1A3A3EE90(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = sub_1A3AB500C();
  v3 = *(_QWORD *)(v10[0] - 8);
  MEMORY[0x1E0C80A78](v10[0]);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB5000();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v6);
  v8 = sub_1A3AB4808();
  MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v1 + 16) = 0;
  sub_1A39B11BC(0, (unint64_t *)&qword_1ED1B5420);
  sub_1A3AB47F0();
  v10[1] = MEMORY[0x1E0DEE9D8];
  sub_1A39B9F44((unint64_t *)&unk_1ED1B5410, v7, MEMORY[0x1E0DEF828]);
  sub_1A39A4820(&qword_1ED1B5390);
  sub_1A3A2D890(&qword_1ED1B5398, &qword_1ED1B5390);
  sub_1A3AB5228();
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, *MEMORY[0x1E0DEF8D0], v10[0]);
  *(_QWORD *)(v1 + 32) = sub_1A3AB5030();
  *(double *)(v1 + 24) = a1;
  return v1;
}

uint64_t sub_1A3A3F07C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v5 = sub_1A3AB47E4();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18[0] = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A3AB4808();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 152))(v11);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v2;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_1A3A412C4;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1A39CF138;
  aBlock[3] = &unk_1E4A9F8C8;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1A3AB47F0();
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_1A39B9F44(&qword_1EE6D23C0, v6, MEMORY[0x1E0DEF510]);
  sub_1A39A4820(&qword_1EE6D23D8);
  sub_1A3A2D890((unint64_t *)&qword_1EE6D23E0, &qword_1EE6D23D8);
  sub_1A3AB5228();
  MEMORY[0x1A8595E0C](0, v13, v8, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v18[0] + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

void sub_1A3A3F284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD, uint64_t);
  char *v27;
  void (*v28)(_QWORD *, uint64_t);
  uint64_t ObjectType;
  _QWORD *v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];

  v37 = a2;
  v38 = a3;
  v39 = sub_1A3AB47E4();
  MEMORY[0x1E0C80A78](v39);
  v41 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A3AB47D8();
  v35 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v36 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v33 - v8);
  v42 = sub_1A3AB482C();
  v34 = *(_QWORD *)(v42 - 8);
  v10 = MEMORY[0x1E0C80A78](v42);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v40 = (char *)&v33 - v13;
  v14 = sub_1A3AB5048();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104);
  v43 = a1;
  if (v19(v16))
  {
    swift_getObjectType();
    sub_1A3AB506C();
    swift_unknownObjectRelease();
  }
  sub_1A39B11BC(0, &qword_1EE6D23F0);
  v20 = sub_1A3AB503C();
  v21 = v43;
  v22 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 152))(v20);
  sub_1A3AB5054();

  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v23 = sub_1A3AB4814();
  v24 = (*(double (**)(uint64_t))(*(_QWORD *)v21 + 128))(v23) * 1000.0;
  if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v24 < 9.22337204e18)
  {
    *v9 = (uint64_t)v24;
    v25 = v35;
    v26 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v35 + 104);
    v26(v9, *MEMORY[0x1E0DEF490], v5);
    v27 = v40;
    sub_1A3AB4820();
    v28 = *(void (**)(_QWORD *, uint64_t))(v25 + 8);
    v28(v9, v5);
    v35 = *(_QWORD *)(v34 + 8);
    ((void (*)(char *, uint64_t))v35)(v12, v42);
    ObjectType = swift_getObjectType();
    v26(v9, *MEMORY[0x1E0DEF498], v5);
    v30 = v36;
    *v36 = 0;
    v26(v30, *MEMORY[0x1E0DEF480], v5);
    MEMORY[0x1A8595E90](v27, v9, v30, ObjectType);
    v28(v30, v5);
    v28(v9, v5);
    aBlock[4] = v37;
    aBlock[5] = v38;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1A3A3F704;
    aBlock[3] = &unk_1E4AA4348;
    _Block_copy(aBlock);
    v44 = MEMORY[0x1E0DEE9D8];
    sub_1A39B9F44(&qword_1EE6D23C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    swift_retain();
    sub_1A39A4820(&qword_1EE6D23D8);
    sub_1A3A2D890((unint64_t *)&qword_1EE6D23E0, &qword_1EE6D23D8);
    sub_1A3AB5228();
    sub_1A3AB4844();
    swift_allocObject();
    sub_1A3AB4838();
    swift_release();
    sub_1A3AB5060();
    swift_release();
    sub_1A3AB5078();
    v31 = *(void (**)(uint64_t))(*(_QWORD *)v43 + 112);
    v32 = swift_unknownObjectRetain();
    v31(v32);
    swift_unknownObjectRelease();
    ((void (*)(char *, uint64_t))v35)(v27, v42);
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1A3A3F708()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1A3A3F734()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A3F768(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A3A3F7AC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_1A3A3F7E8(uint64_t a1)
{
  sub_1A3A3FB6C(a1, (void (*)(uint64_t, uint64_t))sub_1A3A3F7F4);
}

uint64_t sub_1A3A3F7F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t (*v9)(_BYTE *, _QWORD);
  _BYTE v11[32];

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v11[-v7];
  (*(void (**)(_BYTE *))(v3 + 16))(v6);
  v9 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 128))(v11);
  sub_1A3AB4F1C();
  sub_1A3AB4EE0();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  return v9(v11, 0);
}

void sub_1A3A3F8E4(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v3);
  sub_1A3A3F928(a1, v1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1A3A3F928(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  _BYTE v20[32];
  uint64_t v21[3];
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v20[-v9 - 8];
  v11 = sub_1A3AB50FC();
  MEMORY[0x1E0C80A78](v11);
  v13 = &v20[-v12 - 8];
  v14 = sub_1A39A19CC(a1, a1[3]);
  MEMORY[0x1E0C80A78](v14);
  (*(void (**)(_BYTE *))(v16 + 16))(&v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8]);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1A39B1230(v21);
  sub_1A3AB4B44();
  while (1)
  {
    sub_1A39AF518((uint64_t)v21, AssociatedTypeWitness);
    sub_1A3AB512C();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
      break;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v8, v13, v4);
    v17 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 128))(v20);
    sub_1A3AB4F1C();
    sub_1A3AB4EE0();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
    v17(v20, 0);
  }
  return sub_1A39A47C4((uint64_t)v21);
}

void sub_1A3A3FB60(uint64_t a1)
{
  sub_1A3A3FB6C(a1, (void (*)(uint64_t, uint64_t))sub_1A3A3FBB4);
}

void sub_1A3A3FB6C(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  os_unfair_lock_s *v5;

  v5 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
  os_unfair_lock_lock(v5);
  a2(v2, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1A3A3FBB4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t (*v6)(_BYTE *, _QWORD);
  _BYTE v8[32];

  v1 = *a1;
  v2 = sub_1A3AB50FC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v8[-v4];
  v6 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(v1 + 128))(v8);
  sub_1A3AB4F1C();
  sub_1A3AB4EEC();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  return v6(v8, 0);
}

uint64_t sub_1A3A3FC84()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  void (*v4)(_BYTE *, _QWORD);
  _BYTE v6[32];

  v1 = v0[2];
  sub_1A3AB4F1C();
  v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v2);
  v3 = (*(uint64_t (**)(void))(*v0 + 112))();
  v4 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*v0 + 128))(v6);
  sub_1A3AB4F1C();
  sub_1A3AB4F10();
  v4(v6, 0);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t sub_1A3A3FD3C()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = v0[2];
  sub_1A3AB4F1C();
  v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v2);
  v3 = (*(uint64_t (**)(void))(*v0 + 112))();
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t sub_1A3A3FDA0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A3FDCC()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1A3A3FE00();
  return v0;
}

uint64_t sub_1A3A3FE00()
{
  uint64_t v0;
  uint64_t v1;

  sub_1A39A4820(&qword_1EE6D24A8);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = sub_1A3AB485C();
  return v0;
}

void sub_1A3A3FE4C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  sub_1A3A412F8(v2);
}

uint64_t sub_1A3A3FE5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess();
  sub_1A39AB624(&qword_1EE6D09F0);
  sub_1A3AB4E68();
  v4 = sub_1A3AB50FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1A3A3FEF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess();
  sub_1A39AB624(&qword_1EE6D09F0);
  sub_1A3AB4E68();
  v4 = sub_1A3AB50FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

id sub_1A3A3FF94@<X0>(uint64_t a1@<X8>)
{
  char **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  id result;
  id *v38;
  id v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53[3];

  v45 = a1;
  v52 = *v1;
  v2 = *((_QWORD *)v52 + 10);
  sub_1A39AB624(&qword_1EE6D09F0);
  v3 = sub_1A3AB4E38();
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v41 - v5;
  v7 = *(_QWORD *)(v2 - 8);
  v8 = MEMORY[0x1E0C80A78](v4);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v41 - v11;
  v13 = sub_1A3AB4E68();
  v14 = sub_1A3AB50FC();
  MEMORY[0x1E0C80A78](v14);
  v48 = (char *)&v41 - v15;
  v16 = sub_1A3AB4E44();
  v46 = *(_QWORD *)(v16 - 8);
  v47 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v41 - v18;
  v20 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v41 - v21;
  v23 = sub_1A3AB4E8C();
  v43 = *(_QWORD *)(v23 - 8);
  v44 = v23;
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v41 - v24;
  objc_msgSend(*(id *)((char *)v49 + *((_QWORD *)v52 + 15)), sel_lock);
  sub_1A3A40418((uint64_t)v19);
  v42 = v25;
  sub_1A3AB4E2C();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v47);
  v26 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v27 = (uint64_t)v48;
  v52 = v22;
  v26(v48, v22, v13);
  v47 = v20;
  v28 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v29 = v13;
  v28(v27, 0, 1, v13);
  v30 = v49;
  sub_1A3A3FEF4(v27);
  v31 = (_QWORD *)((char *)v30 + *(_QWORD *)(*v30 + 104));
  swift_beginAccess();
  v32 = *v31;
  v33 = swift_bridgeObjectRetain();
  if (MEMORY[0x1A8595A1C](v33, v2))
  {
    v34 = 0;
    do
    {
      v35 = sub_1A3AB4C04();
      sub_1A3AB4BD4();
      if ((v35 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, v32+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v34, v2);
        v36 = v34 + 1;
        if (__OFADD__(v34, 1))
          goto LABEL_10;
      }
      else
      {
        result = (id)sub_1A3AB52C4();
        if (v41 != 8)
        {
          __break(1u);
          return result;
        }
        v53[0] = result;
        (*(void (**)(char *, id *, uint64_t))(v7 + 16))(v12, v53, v2);
        swift_unknownObjectRelease();
        v36 = v34 + 1;
        if (__OFADD__(v34, 1))
        {
LABEL_10:
          __break(1u);
          break;
        }
      }
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v2);
      sub_1A3AB4E50();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v51);
      ++v34;
    }
    while (v36 != MEMORY[0x1A8595A1C](v32, v2));
  }
  swift_bridgeObjectRelease();
  v38 = (id *)v49;
  swift_beginAccess();
  sub_1A3AB4C58();
  sub_1A3AB4C4C();
  swift_endAccess();
  v39 = v38[2];
  if (v39 == (id)1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v52, v29);
  }
  else
  {
    v53[0] = v38[2];
    sub_1A3A412E8(v39);
    v40 = v52;
    sub_1A3AB4E5C();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v40, v29);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v45, v42, v44);
  return objc_msgSend(*(id *)((char *)v38 + *((_QWORD *)*v38 + 15)), sel_unlock);
}

uint64_t sub_1A3A40418@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0DF0A50];
  sub_1A39AB624(&qword_1EE6D09F0);
  v3 = sub_1A3AB4E44();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

id sub_1A3A40484(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v22 = *(_QWORD *)(v3 - 8);
  v23 = a1;
  MEMORY[0x1E0C80A78](a1);
  v24 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39AB624(&qword_1EE6D09F0);
  v5 = sub_1A3AB4E38();
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  MEMORY[0x1E0C80A78](v5);
  v19 = (char *)&v18 - v6;
  v7 = sub_1A3AB4E68();
  v8 = sub_1A3AB50FC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v18 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v18 - v14;
  objc_msgSend(*(id *)((char *)v1 + *(_QWORD *)(v2 + 120)), sel_lock);
  sub_1A3A3FE5C((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v23, v3);
    swift_beginAccess();
    sub_1A3AB4C58();
    sub_1A3AB4C28();
    swift_endAccess();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v23, v3);
    v16 = v19;
    sub_1A3AB4E50();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v21);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v7);
  }
  return objc_msgSend(*(id *)((char *)v1 + *(_QWORD *)(*v1 + 120)), sel_unlock);
}

id sub_1A3A406FC(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v17[2];

  v3 = *v1;
  sub_1A39AB624(&qword_1EE6D09F0);
  v4 = sub_1A3AB4E68();
  v5 = sub_1A3AB50FC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v17 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)v17 - v11;
  objc_msgSend(*(id *)((char *)v1 + *(_QWORD *)(v3 + 120)), sel_lock);
  v13 = a1;
  v14 = (void *)v1[2];
  v1[2] = a1;
  sub_1A3A412F8(v14);
  sub_1A3A3FE5C((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
    v17[1] = a1;
    v15 = a1;
    sub_1A3AB4E5C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v4);
  }
  return objc_msgSend(*(id *)((char *)v1 + *(_QWORD *)(*v1 + 120)), sel_unlock);
}

uint64_t sub_1A3A4088C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v0 + 264))(0);
}

id *SuspendableStream.deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;

  (*((void (**)(void))*v0 + 34))();
  sub_1A3A412F8(v0[2]);
  v1 = (char *)v0 + *((_QWORD *)*v0 + 12);
  sub_1A39AB624(&qword_1EE6D09F0);
  sub_1A3AB4E68();
  v2 = sub_1A3AB50FC();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t SuspendableStream.__deallocating_deinit()
{
  return sub_1A3A40954((void (*)(void))SuspendableStream.deinit);
}

uint64_t sub_1A3A40954(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t sub_1A3A40978()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1A3A409AC();
  return v0;
}

_QWORD *sub_1A3A409AC()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v0[2] = 1;
  v2 = (char *)v0 + *(_QWORD *)(v1 + 96);
  sub_1A39AB624(&qword_1EE6D09F0);
  v3 = sub_1A3AB4E68();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = *(_QWORD *)(*v0 + 104);
  *(_QWORD *)((char *)v0 + v4) = sub_1A3AB4BEC();
  *((_BYTE *)v0 + *(_QWORD *)(*v0 + 112)) = 2;
  v5 = *(_QWORD *)(*v0 + 120);
  *(_QWORD *)((char *)v0 + v5) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB38E0]), sel_init);
  return v0;
}

uint64_t sub_1A3A40A74()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1A3A40A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_1A3A40A98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  v4 = (uint64_t (*)(_QWORD, uint64_t))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_1A3A40B08;
  return v4(*(_QWORD *)(v0 + 16), v1);
}

uint64_t sub_1A3A40B08()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A3A40B50()
{
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  return swift_unknownObjectRelease();
}

uint64_t sub_1A3A40BA8(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v2 + 112) = a1;
  return v2;
}

uint64_t sub_1A3A40BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for AXSendableLockBox(0, a2, a3, a4);
  v5 = swift_allocObject();
  swift_unknownObjectRetain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v5 + 112) = a1;
  return v5;
}

uint64_t sub_1A3A40C30()
{
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1A3A40C54()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1A3A40C60()
{
  return sub_1A3A40C54();
}

uint64_t sub_1A3A40C78()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t type metadata accessor for StreamCachedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StreamCachedValue);
}

uint64_t sub_1A3A40C8C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1A3A40CD8;
  return sub_1A3A40CD8(1);
}

uint64_t sub_1A3A40CD8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1A3A40D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A3AB4D54();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A3A40DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A3AB4D54() - 8) + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = v0 + ((v2 + 56) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return sub_1A3A3E0CC((uint64_t)v5, v6, v7, v3, v4);
}

uint64_t sub_1A3A40E18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A40E3C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;

  v6 = v2[2];
  v8 = (int *)v2[6];
  v7 = v2[7];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1EE6D3C70 + dword_1EE6D3C70))(a1, a2, v8, v7, v6);
}

uint64_t sub_1A3A40EE4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A40F10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;

  v4 = v1[4];
  v5 = v1[5];
  v6 = (uint64_t *)v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1A39D5174;
  return sub_1A3A3E4CC(a1, v4, v5, v6);
}

char *sub_1A3A40F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = v3;
  v26 = a2;
  v27 = a3;
  v6 = *(_QWORD *)v3;
  v29 = a1;
  v30 = v6;
  v7 = *(_QWORD *)(v6 + 80);
  v28 = sub_1A3AB4D90();
  v8 = *(_QWORD *)(v28 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v28);
  v11 = (char *)&v25 - v10;
  v12 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v14;
  type metadata accessor for TTSExecutor.Serialized();
  v15 = sub_1A3A630D8();
  *((_QWORD *)v3 + 2) = TTSExecutor.Serialized.__allocating_init(executor:)(v15);
  sub_1A3AB4388();
  sub_1A3AB4D54();
  swift_getTupleTypeMetadata2();
  sub_1A3AB4BEC();
  sub_1A39B9F44(&qword_1ED1B52E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  *((_QWORD *)v3 + 3) = sub_1A3AB488C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v4[*(_QWORD *)(*(_QWORD *)v4 + 112)], 1, 1, v7);
  v16 = (uint64_t *)&v4[*(_QWORD *)(*(_QWORD *)v4 + 120)];
  *v16 = a2;
  v16[1] = v27;
  v17 = sub_1A3AB4D00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  v18 = swift_allocObject();
  swift_weakInit();
  v19 = v11;
  v20 = v11;
  v21 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v20, v29, v28);
  v22 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = 0;
  *((_QWORD *)v23 + 4) = v7;
  *((_QWORD *)v23 + 5) = *(_QWORD *)(v30 + 88);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v23[v22], v19, v21);
  *(_QWORD *)&v23[(v9 + v22 + 7) & 0xFFFFFFFFFFFFFFF8] = v18;
  sub_1A39EA864(v26);
  sub_1A39DDD84((uint64_t)v25, (uint64_t)&unk_1EE6D3D40, (uint64_t)v23);
  swift_release();
  return v4;
}

char *sub_1A3A41200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for StreamCachedValue(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4);
  swift_allocObject();
  return sub_1A3A40F7C(a1, a2, a3);
}

uint64_t sub_1A3A41258()
{
  sub_1A3AB4D54();
  return sub_1A3AB4D48();
}

uint64_t sub_1A3A41298()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1A3A412C4()
{
  uint64_t *v0;

  sub_1A3A3F284(v0[2], v0[3], v0[4]);
}

uint64_t sub_1A3A412D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A3A412E0()
{
  return swift_release();
}

id sub_1A3A412E8(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

void sub_1A3A412F8(id a1)
{
  if (a1 != (id)1)

}

uint64_t type metadata accessor for AXSendableLockBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AXSendableLockBox);
}

uint64_t sub_1A3A41314(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1A8597738](&protocol conformance descriptor for StreamCachedValue<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A3A41340()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1A3AB50FC();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for StreamCachedValue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StreamCachedValue.recompute()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 176) + *(_QWORD *)(*(_QWORD *)v0 + 176));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1A39D5174;
  return v4();
}

uint64_t dispatch thunk of StreamCachedValue.currentValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 208) + *(_QWORD *)(*(_QWORD *)v1 + 208));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1A39B1604;
  return v6(a1);
}

uint64_t dispatch thunk of StreamCachedValue.subscribe()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of StreamCachedValue.derived<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of StreamCachedValue.__allocating_init(stream:recomputeBlock:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t type metadata accessor for Debouncer()
{
  return objc_opt_self();
}

uint64_t sub_1A3A414E0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ThreadSafeBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThreadSafeBuffer);
}

uint64_t sub_1A3A4153C()
{
  uint64_t result;
  unint64_t v1;

  sub_1A39AB624(&qword_1EE6D09F0);
  sub_1A3AB4E68();
  result = sub_1A3AB50FC();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SuspendableStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SuspendableStream);
}

uint64_t method lookup function for SuspendableStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SuspendableStream.subscribe()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SuspendableStream.yield(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SuspendableStream.finish(throwing:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SuspendableStream.finish()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t sub_1A3A4164C()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1A3A41658(void **a1)
{
  void *v1;
  int v2;

  v1 = *a1;
  v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF)
    v2 = (int)v1;
  if ((v2 + 1) <= 1)

}

_QWORD *sub_1A3A4167C(_QWORD *a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if (((_DWORD)v4 + 1) <= 1)
    v5 = v3;
  *a1 = v3;
  return a1;
}

void **sub_1A3A416C4(void **a1, void **a2)
{
  void *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  id v9;
  void *v10;
  id v11;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)v3 >= 0xFFFFFFFF)
    v5 = -1;
  else
    v5 = (int)v3;
  v6 = v5 + 1;
  v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  v8 = (_DWORD)v4 + 1;
  if (v6 > 1)
  {
    if (v8 <= 1)
      v11 = v7;
    *a1 = v7;
  }
  else if (v8 > 1)
  {

    *a1 = *a2;
  }
  else
  {
    v9 = v7;
    v10 = *a1;
    *a1 = v7;

  }
  return a1;
}

void **sub_1A3A41760(void **a1, void **a2)
{
  void *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)v3 >= 0xFFFFFFFF)
    v5 = -1;
  else
    v5 = (int)v3;
  v6 = v5 + 1;
  v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  v8 = (_DWORD)v4 + 1;
  if (v6 > 1)
    goto LABEL_11;
  if (v8 > 1)
  {

LABEL_11:
    *a1 = v7;
    return a1;
  }
  *a1 = v7;

  return a1;
}

uint64_t sub_1A3A417D0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 2)
    return (v3 - 1);
  else
    return 0;
}

uint64_t sub_1A3A4182C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_1A3A41888(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *sub_1A3A418A8(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *result = a2;
  }
  return result;
}

uint64_t type metadata accessor for SuspendableStream.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1A39ACBA0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SuspendableStream.State);
}

uint64_t sub_1A3A418E4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1A3A4192C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A3AB4388();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A3A419A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A3AB4388() - 8) + 80);
  return sub_1A3A3D7A0(*(uint64_t **)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_1A3A419D0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A3A419F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A3AB4388();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A3A41A70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1A3AB4388() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = v1 + ((v4 + 56) & ~v4);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = sub_1A39D5174;
  *(_OWORD *)(v7 + 64) = v8;
  *(_QWORD *)(v7 + 48) = v5;
  *(_QWORD *)(v7 + 56) = v6;
  *(_QWORD *)(v7 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A41B04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A41B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A39B1604;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE6D3D28 + dword_1EE6D3D28))(a1, v4);
}

uint64_t sub_1A3A41B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A3AB4D90();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A41C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(sub_1A3AB4D90() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0 + v5;
  v7 = *(_QWORD *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_1A39D5174;
  return sub_1A3A3E740((uint64_t)v8, v9, v10, v6, v7, v2, v3);
}

uint64_t sub_1A3A41CC0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1A3A41CD4(uint64_t a1)
{
  uint64_t v1;

  return sub_1A3A3D210(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t TTSMarkup.Emphasis.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Emphasis.eventTaps.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TTSMarkup.Emphasis.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

void TTSMarkup.Emphasis.init(_:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;
  uint64_t v21;
  _BYTE v22[48];

  v21 = MEMORY[0x1E0DEE9D8];
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (!*(_QWORD *)((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))() + 16)
    || (sub_1A39A2734(0x6C6576656CLL, 0xE500000000000000), (v5 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = TTSMarkup.Emphasis.Level.init(rawValue:)((char *)&v18);
  if (v18 == 3)
  {

LABEL_6:
    *(_BYTE *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return;
  }
  v22[40] = v18;
  v7 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100))(v6);
  v8 = v7;
  if (!(v7 >> 62))
  {
    v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_9;
LABEL_23:
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_24:
    swift_bridgeObjectRelease_n();
    v19 = sub_1A39A4820(&qword_1EE6D2BE0);
    v20 = &protocol witness table for <A> [A];

    *(_QWORD *)&v18 = v11;
    sub_1A39A1AB8(&v18, (uint64_t)v22);
    sub_1A3A4270C((uint64_t)&v21, a2);
    sub_1A3A42780((uint64_t)&v21);
    return;
  }
  swift_bridgeObjectRetain();
  v9 = sub_1A3AB5480();
  if (!v9)
    goto LABEL_23;
LABEL_9:
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v8 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1A85960B8](v10, v8);
      else
        v12 = *(id *)(v8 + 8 * v10 + 32);
      v13 = v12;
      sub_1A39D518C((uint64_t)&v16);

      if (v17)
      {
        sub_1A39A1AB8(&v16, (uint64_t)&v18);
        sub_1A39A1AB8(&v18, (uint64_t)&v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_1A39BFBD8(0, v11[2] + 1, 1, v11);
        v15 = v11[2];
        v14 = v11[3];
        if (v15 >= v14 >> 1)
          v11 = sub_1A39BFBD8((_QWORD *)(v14 > 1), v15 + 1, 1, v11);
        v11[2] = v15 + 1;
        sub_1A39A1AB8(&v16, (uint64_t)&v11[5 * v15 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v16);
      }
      ++v10;
    }
    while (v9 != v10);
    goto LABEL_24;
  }
  __break(1u);
}

uint64_t TTSMarkup.Emphasis.Level.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1A3AB54E0();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

void static TTSMarkup.Emphasis.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t TTSMarkup.Emphasis._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Emphasis._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 8;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.Emphasis._content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Emphasis.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 8, a1);
}

uint64_t TTSMarkup.Emphasis.Level.description.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574617265646F6DLL;
  if (*v0 != 1)
    v1 = 0x64656375646572;
  if (*v0)
    return v1;
  else
    return 0x676E6F727473;
}

uint64_t TTSMarkup.Emphasis.Level.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574617265646F6DLL;
  if (*v0 != 1)
    v1 = 0x64656375646572;
  if (*v0)
    return v1;
  else
    return 0x676E6F727473;
}

uint64_t sub_1A3A42160(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1A3A4216C(*a1, *a2);
}

uint64_t sub_1A3A4216C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6574617265646F6DLL;
    else
      v3 = 0x64656375646572;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6574617265646F6DLL;
      else
        v6 = 0x64656375646572;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x676E6F727473;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x676E6F727473)
  {
LABEL_21:
    v8 = sub_1A3AB5654();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1A3A4227C()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A42318()
{
  sub_1A3AB4A30();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1A3A42390()
{
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  swift_bridgeObjectRelease();
  return sub_1A3AB5738();
}

uint64_t sub_1A3A42428@<X0>(char *a1@<X8>)
{
  return TTSMarkup.Emphasis.Level.init(rawValue:)(a1);
}

void sub_1A3A42434(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6574617265646F6DLL;
  if (v2 != 1)
  {
    v5 = 0x64656375646572;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x676E6F727473;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1A3A42490()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574617265646F6DLL;
  if (*v0 != 1)
    v1 = 0x64656375646572;
  if (*v0)
    return v1;
  else
    return 0x676E6F727473;
}

uint64_t TTSMarkup.Emphasis.init(_:speech:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a1;
  *(_QWORD *)a3 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a3 + 48) = v3;
  return a2();
}

unint64_t TTSMarkup.Emphasis.attributes.getter()
{
  uint64_t v0;
  uint64_t inited;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 0x6C6576656CLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v2 = *(unsigned __int8 *)(v0 + 48);
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6574617265646F6DLL;
  if (v2 != 1)
  {
    v5 = 0x64656375646572;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*(_BYTE *)(v0 + 48))
    v7 = v5;
  else
    v7 = 0x676E6F727473;
  if (!v6)
    v3 = v4;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v3;
  return sub_1A39A5780(inited);
}

uint64_t TTSMarkup.Emphasis.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.Emphasis;
  v7[4] = &protocol witness table for TTSMarkup.Emphasis;
  v7[0] = swift_allocObject();
  sub_1A3A4270C(v3, v7[0] + 16);
  TTSMarkupVisitor.visit(_:)(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

void sub_1A3A42650(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

unint64_t sub_1A3A4265C()
{
  uint64_t v0;
  uint64_t inited;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 0x6C6576656CLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v2 = *(unsigned __int8 *)(v0 + 48);
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6574617265646F6DLL;
  if (v2 != 1)
  {
    v5 = 0x64656375646572;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*(_BYTE *)(v0 + 48))
    v7 = v5;
  else
    v7 = 0x676E6F727473;
  if (!v6)
    v3 = v4;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v3;
  return sub_1A39A5780(inited);
}

uint64_t sub_1A3A4270C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(v4, a1 + 8, v6);
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a1 + 48);
  return a2;
}

uint64_t sub_1A3A42780(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  swift_bridgeObjectRelease();
  sub_1A39A47C4(v2);
  return a1;
}

uint64_t sub_1A3A427B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  return swift_deallocObject();
}

unint64_t sub_1A3A427E4()
{
  unint64_t result;

  result = qword_1EE6D3DB0;
  if (!qword_1EE6D3DB0)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSMarkup.Emphasis.Level, &type metadata for TTSMarkup.Emphasis.Level);
    atomic_store(result, (unint64_t *)&qword_1EE6D3DB0);
  }
  return result;
}

uint64_t _s8EmphasisVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 8, v4, v6);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t _s8EmphasisVwca(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A39B8070((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 _s4SpecV3BoxV7BoxTypeOwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s8EmphasisVwta(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t _s8EmphasisVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s8EmphasisVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Emphasis()
{
  return &type metadata for TTSMarkup.Emphasis;
}

uint64_t _s8EmphasisV5LevelOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A3A42A60 + 4 * byte_1A3AC6915[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A3A42A94 + 4 * byte_1A3AC6910[v4]))();
}

uint64_t sub_1A3A42A94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A42A9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A42AA4);
  return result;
}

uint64_t sub_1A3A42AB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A42AB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A3A42ABC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A42AC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSMarkup.Emphasis.Level()
{
  return &type metadata for TTSMarkup.Emphasis.Level;
}

id sub_1A3A42AE0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CoreSynthesisVoiceShim()), sel_init);
  qword_1EE6E12F8 = (uint64_t)result;
  return result;
}

id CoreSynthesisVoiceShim.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id static CoreSynthesisVoiceShim.shared.getter()
{
  if (qword_1EE6E12F0 != -1)
    swift_once();
  swift_beginAccess();
  return (id)qword_1EE6E12F8;
}

void static CoreSynthesisVoiceShim.shared.setter(uint64_t a1)
{
  void *v2;

  if (qword_1EE6E12F0 != -1)
    swift_once();
  swift_beginAccess();
  v2 = (void *)qword_1EE6E12F8;
  qword_1EE6E12F8 = a1;

}

uint64_t (*static CoreSynthesisVoiceShim.shared.modify())()
{
  if (qword_1EE6E12F0 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A3A42D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v1 = OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___internalResolver;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___internalResolver))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___internalResolver);
  }
  else
  {
    v3 = v0;
    type metadata accessor for VoiceResolver();
    v4 = *sub_1A39D824C();
    v8[3] = type metadata accessor for DefaultVoiceSource();
    v8[4] = &protocol witness table for DefaultVoiceSource;
    v8[0] = v4;
    swift_retain();
    v7 = *(_QWORD *)sub_1A3A39210();
    sub_1A39A08B8(&v6);
    v2 = VoiceResolver.__allocating_init(voiceSource:requiredTraits:sortMode:)((uint64_t)v8, &v7, &v6);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1A3A42E14(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___internalResolver) = a1;
  return swift_release();
}

uint64_t (*sub_1A3A42E2C(uint64_t *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1A3A42D58();
  return sub_1A3A42E60;
}

uint64_t sub_1A3A42E60(_QWORD *a1, uint64_t a2)
{
  return sub_1A3A4305C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___internalResolver);
}

uint64_t sub_1A3A42E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8[2];
  uint64_t v9[2];
  _QWORD v10[5];

  v1 = OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___publicResolver;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___publicResolver))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___publicResolver);
  }
  else
  {
    v3 = v0;
    type metadata accessor for VoiceResolver();
    v4 = *sub_1A39D824C();
    v10[3] = type metadata accessor for DefaultVoiceSource();
    v10[4] = &protocol witness table for DefaultVoiceSource;
    v10[0] = v4;
    sub_1A39AE770();
    swift_retain();
    sub_1A39A4820(&qword_1ED1B5378);
    sub_1A39C3EF8((unint64_t *)&qword_1ED1B5380, &qword_1ED1B5378, MEMORY[0x1E0DEAF38]);
    sub_1A3AB5228();
    v9[0] = v9[1];
    sub_1A39A4820((uint64_t *)&unk_1EE6D3ED0);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1A3ABF990;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)sub_1A3A391F8();
    sub_1A3AB5228();
    v8[0] = v8[1];
    sub_1A39A08B8(&v7);
    v2 = VoiceResolver.__allocating_init(voiceSource:requiredTraits:forbiddenTraits:sortMode:)(v10, v9, v8, &v7);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1A3A43004(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___publicResolver) = a1;
  return swift_release();
}

uint64_t (*sub_1A3A4301C(uint64_t *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_1A3A42E6C();
  return sub_1A3A43050;
}

uint64_t sub_1A3A43050(_QWORD *a1, uint64_t a2)
{
  return sub_1A3A4305C(a1, a2, &OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___publicResolver);
}

uint64_t sub_1A3A4305C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  *(_QWORD *)(a1[1] + *a3) = *a1;
  return swift_release();
}

uint64_t sub_1A3A43070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A4308C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD);

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 136)) + 0x78))();
  *(_QWORD *)(v0 + 144) = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))(**(int **)(*(_QWORD *)v1 + 264)
                                                       + *(_QWORD *)(*(_QWORD *)v1 + 264));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v2;
  *v2 = v0;
  v2[1] = sub_1A3A43120;
  return v4(v0 + 16, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
}

uint64_t sub_1A3A43120()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A432AC(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1A3AB497C();
  v7 = v6;
  v3[4] = v6;
  v8 = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_1A3A4521C;
  v9[16] = v7;
  v9[17] = v8;
  v9[15] = v5;
  return swift_task_switch();
}

uint64_t sub_1A3A4334C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v4 = sub_1A3AB4538();
  v3[18] = v4;
  v3[19] = *(_QWORD *)(v4 - 8);
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A433B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD);

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 136)) + 0x78))();
  *(_QWORD *)(v0 + 168) = v1;
  swift_bridgeObjectRetain();
  sub_1A3AB4448();
  v4 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(*(_QWORD *)v1 + 304) + *(_QWORD *)(*(_QWORD *)v1 + 304));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v2;
  *v2 = v0;
  v2[1] = sub_1A3A43470;
  return v4(v0 + 16, *(_QWORD *)(v0 + 160));
}

uint64_t sub_1A3A43470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

uint64_t sub_1A3A434EC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(void **)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = sub_1A3A6473C();
    sub_1A39A2EB8(v7, v1, v6, v5, v13, v4, v12, v11, v10, v3, v2);
  }
  else
  {
    v8 = 0;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v8);
}

uint64_t sub_1A3A4372C(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1A3AB497C();
  v7 = v6;
  v3[4] = v6;
  a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1A3A4521C;
  return sub_1A3A4334C(v5, v7);
}

uint64_t sub_1A3A437B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v2 = sub_1A39A4820(&qword_1EE6D09D0);
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v3 = sub_1A39A4820(&qword_1EE6D2488);
  v1[7] = v3;
  v1[8] = *(_QWORD *)(v3 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A43858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 24)) + 0x78))();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v1, v5 + OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voices, v3);
  swift_release();
  v6(v2, v1, v3);
  sub_1A39C3EF8(&qword_1EE6D3DE0, &qword_1EE6D2488, MEMORY[0x1E0DF0848]);
  sub_1A3AB4E14();
  sub_1A39C3EF8(&qword_1EE6D3DE8, &qword_1EE6D09D0, MEMORY[0x1E0DF0830]);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v7;
  *v7 = v0;
  v7[1] = sub_1A3A43988;
  return sub_1A3AB4CAC();
}

uint64_t sub_1A3A43988()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[5] + 8))(v2[6], v2[4]);
  else
    return swift_task_switch();
}

uint64_t sub_1A3A439FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    v5 = sub_1A3A43AD4(v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v5 = MEMORY[0x1E0DEE9D8];
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_1A3A43AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;

  v11 = MEMORY[0x1E0DEE9D8];
  v1 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  for (v4 &= v4 - 1; ; v4 = (v9 - 1) & v9)
  {
    sub_1A3A6473C();
    MEMORY[0x1A8595980]();
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1A3AB4BE0();
    sub_1A3AB4C10();
    result = sub_1A3AB4BC8();
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v8 >= v5)
      goto LABEL_25;
    v9 = *(_QWORD *)(v1 + 8 * v8);
    ++v7;
    if (!v9)
    {
      v7 = v8 + 1;
      if (v8 + 1 >= v5)
        goto LABEL_25;
      v9 = *(_QWORD *)(v1 + 8 * v7);
      if (!v9)
      {
        v7 = v8 + 2;
        if (v8 + 2 >= v5)
          goto LABEL_25;
        v9 = *(_QWORD *)(v1 + 8 * v7);
        if (!v9)
        {
          v7 = v8 + 3;
          if (v8 + 3 >= v5)
            goto LABEL_25;
          v9 = *(_QWORD *)(v1 + 8 * v7);
          if (!v9)
            break;
        }
      }
    }
LABEL_20:
    ;
  }
  v10 = v8 + 4;
  if (v10 >= v5)
  {
LABEL_25:
    swift_release();
    return v11;
  }
  v9 = *(_QWORD *)(v1 + 8 * v10);
  if (v9)
  {
    v7 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v7 >= v5)
      goto LABEL_25;
    v9 = *(_QWORD *)(v1 + 8 * v7);
    ++v10;
    if (v9)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A3A43CFC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;

  v21 = MEMORY[0x1E0DEE9D8];
  v15 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v16 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  while (v4)
  {
    v19 = (v4 - 1) & v4;
    v20 = v6;
    v7 = __clz(__rbit64(v4)) | (v6 << 6);
LABEL_24:
    v12 = *(void **)(*(_QWORD *)(a1 + 48) + 104 * v7 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = v12;
    sub_1A3A391F8();
    sub_1A39AE770();
    if ((sub_1A3AB51C8() & 1) != 0 && (a2 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      sub_1A3A6473C();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = swift_bridgeObjectRelease();
      MEMORY[0x1A8595980](v14);
      if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1A3AB4BE0();
      sub_1A3AB4C10();
      result = sub_1A3AB4BC8();
    }
    v4 = v19;
    v6 = v20;
  }
  v8 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v8 >= v16)
    goto LABEL_29;
  v9 = *(_QWORD *)(v15 + 8 * v8);
  v10 = v6 + 1;
  if (v9)
    goto LABEL_23;
  v10 = v6 + 2;
  if (v6 + 2 >= v16)
    goto LABEL_29;
  v9 = *(_QWORD *)(v15 + 8 * v10);
  if (v9)
    goto LABEL_23;
  v10 = v6 + 3;
  if (v6 + 3 >= v16)
    goto LABEL_29;
  v9 = *(_QWORD *)(v15 + 8 * v10);
  if (v9)
    goto LABEL_23;
  v10 = v6 + 4;
  if (v6 + 4 >= v16)
    goto LABEL_29;
  v9 = *(_QWORD *)(v15 + 8 * v10);
  if (v9)
  {
LABEL_23:
    v19 = (v9 - 1) & v9;
    v20 = v10;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    goto LABEL_24;
  }
  v11 = v6 + 5;
  if (v6 + 5 >= v16)
  {
LABEL_29:
    swift_release();
    return v21;
  }
  v9 = *(_QWORD *)(v15 + 8 * v11);
  if (v9)
  {
    v10 = v6 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v16)
      goto LABEL_29;
    v9 = *(_QWORD *)(v15 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1A3A44184(const void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_1A3A441E4;
  return sub_1A3A437B8();
}

uint64_t sub_1A3A441E4()
{
  uint64_t *v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD, _QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v5 = *v0;
  swift_task_dealloc();

  sub_1A3A45054();
  v3 = (void *)sub_1A3AB4BA4();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v3);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1A3A4427C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 104) = a1;
  v3 = sub_1A39A4820(&qword_1EE6D09D0);
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 48) = swift_task_alloc();
  v4 = sub_1A39A4820(&qword_1EE6D2488);
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 72) = swift_task_alloc();
  *(_QWORD *)(v2 + 80) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A44320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 24)) + 0x60))();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v1, v5 + OBJC_IVAR____TtC12TextToSpeech13VoiceResolver_voices, v3);
  swift_release();
  v6(v2, v1, v3);
  sub_1A39C3EF8(&qword_1EE6D3DE0, &qword_1EE6D2488, MEMORY[0x1E0DF0848]);
  sub_1A3AB4E14();
  sub_1A39C3EF8(&qword_1EE6D3DE8, &qword_1EE6D09D0, MEMORY[0x1E0DF0830]);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v7;
  *v7 = v0;
  v7[1] = sub_1A3A44450;
  return sub_1A3AB4CAC();
}

uint64_t sub_1A3A44450()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v2[5] + 8))(v2[6], v2[4]);
  else
    return swift_task_switch();
}

uint64_t sub_1A3A444C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(_BYTE *)(v0 + 104);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    v6 = sub_1A3A43CFC(v1, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v6 = MEMORY[0x1E0DEE9D8];
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_1A3A446D8(char a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  _QWORD *v6;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  v6 = (_QWORD *)swift_task_alloc();
  v3[4] = v6;
  *v6 = v3;
  v6[1] = sub_1A3A45218;
  return sub_1A3A4427C(a1);
}

uint64_t sub_1A3A4474C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A44768()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD);

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 136)) + 0x60))();
  *(_QWORD *)(v0 + 144) = v1;
  v4 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))(**(int **)(*(_QWORD *)v1 + 264)
                                                       + *(_QWORD *)(*(_QWORD *)v1 + 264));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v2;
  *v2 = v0;
  v2[1] = sub_1A3A447FC;
  return v4(v0 + 16, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
}

uint64_t sub_1A3A447FC()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A44858()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v2 = *(void **)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = sub_1A3A6473C();
  sub_1A39A2EB8(v7, v1, v6, v5, v13, v4, v12, v11, v10, v3, v2);
  return (*(uint64_t (**)(id))(v0 + 8))(v8);
}

uint64_t sub_1A3A44A90(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1A3AB497C();
  v7 = v6;
  v3[4] = v6;
  v8 = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_1A3A44B30;
  v9[16] = v7;
  v9[17] = v8;
  v9[15] = v5;
  return swift_task_switch();
}

uint64_t sub_1A3A44B30(void *a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  uint64_t v6;

  v4 = *(void **)(*v1 + 16);
  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 24);
  v6 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  ((void (**)(_QWORD, void *))v3)[2](v3, a1);
  _Block_release(v3);

  return (*(uint64_t (**)(void))(v6 + 8))();
}

id CoreSynthesisVoiceShim.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___internalResolver] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC12TextToSpeech22CoreSynthesisVoiceShim____lazy_storage___publicResolver] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreSynthesisVoiceShim();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for CoreSynthesisVoiceShim()
{
  return objc_opt_self();
}

id CoreSynthesisVoiceShim.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreSynthesisVoiceShim();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for CoreSynthesisVoiceShim()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreSynthesisVoiceShim.voice(identifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x90);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1A39D5170;
  return v9(a1, a2);
}

uint64_t dispatch thunk of CoreSynthesisVoiceShim.voice(languageCode:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x98);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1A39D5170;
  return v9(a1, a2);
}

uint64_t dispatch thunk of CoreSynthesisVoiceShim.publicVoices()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5170;
  return v5();
}

uint64_t dispatch thunk of CoreSynthesisVoiceShim.internalVoices(includingSiri:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xA8);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1A39D5170;
  return v7(a1);
}

uint64_t dispatch thunk of CoreSynthesisVoiceShim.internalVoice(identifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xB0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1A39D42E0;
  return v9(a1, a2);
}

uint64_t sub_1A3A44F40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39B1604;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE6D3E28 + dword_1EE6D3E28))(v2, v3, v4);
}

uint64_t sub_1A3A44FB4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject();
}

uint64_t sub_1A3A44FE0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = *(_BYTE *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(char, void *, void *))((char *)&dword_1EE6D3E48 + dword_1EE6D3E48))(v2, v4, v3);
}

unint64_t sub_1A3A45054()
{
  unint64_t result;

  result = qword_1EE6D3E68;
  if (!qword_1EE6D3E68)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE6D3E68);
  }
  return result;
}

uint64_t sub_1A3A45090()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1A3A450BC()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1A39D5174;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EE6D3E70 + dword_1EE6D3E70))(v2, v3);
}

uint64_t sub_1A3A4512C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE6D3E90 + dword_1EE6D3E90))(v2, v3, v4);
}

uint64_t sub_1A3A451A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EE6D3EB0 + dword_1EE6D3EB0))(v2, v3, v4);
}

uint64_t CoreSynthesizer.isSpeaking.getter()
{
  return sub_1A3A45294(3);
}

uint64_t CoreSynthesizer.isPaused.getter()
{
  return sub_1A3A45294(1);
}

uint64_t sub_1A3A45294(char a1)
{
  _QWORD *v1;
  char v4;
  _BYTE v5[2];

  (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x120))();
  swift_retain();
  swift_release();
  sub_1A3AB4754();
  swift_release();
  v5[0] = v5[1];
  v4 = a1;
  return static TTSSpeechQueue.State.== infix(_:_:)(v5, &v4) & 1;
}

uint64_t CoreSynthesizer.speak(_:synth:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v3[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A45384()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD **)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x488))(0, 0);
  sub_1A39A4820(&qword_1EE6D3EF0);
  v5 = sub_1A39B11BC(0, &qword_1EE6D3EF8);
  v8 = sub_1A3A40BE4(v3, v5, v6, v7);
  sub_1A39A4820(&qword_1EE6D3F00);
  v9 = sub_1A39B11BC(0, &qword_1EE6D3F08);
  v12 = sub_1A3A40BE4(v4, v9, v10, v11);
  v13 = sub_1A3AB4D00();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v1, 1, 1, v13);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = v8;
  *(_QWORD *)(v14 + 40) = v12;
  *(_QWORD *)(v14 + 48) = v2;
  *(_BYTE *)(v14 + 56) = 0;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  v15 = v2;
  sub_1A39CDB64(v1, (uint64_t)&unk_1EE6D3F18, v14);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A4560C(void *a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  _QWORD *v10;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v8 = a1;
  v9 = a2;
  a4;
  v10 = (_QWORD *)swift_task_alloc();
  v4[6] = v10;
  *v10 = v4;
  v10[1] = sub_1A3A4569C;
  return CoreSynthesizer.speak(_:synth:)((uint64_t)v8, (uint64_t)v9);
}

uint64_t sub_1A3A4569C()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;

  v1 = *(void (***)(_QWORD))(*v0 + 40);
  v3 = *(void **)(*v0 + 24);
  v2 = *(void **)(*v0 + 32);
  v4 = *(void **)(*v0 + 16);
  v6 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1A3A45714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)(v8 + 808) = v15;
  *(_OWORD *)(v8 + 792) = v14;
  *(_QWORD *)(v8 + 784) = a8;
  *(_BYTE *)(v8 + 217) = a7;
  *(_QWORD *)(v8 + 776) = a6;
  *(_QWORD *)(v8 + 768) = a5;
  *(_QWORD *)(v8 + 760) = a4;
  v9 = sub_1A3AB47E4();
  *(_QWORD *)(v8 + 816) = v9;
  *(_QWORD *)(v8 + 824) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 832) = swift_task_alloc();
  v10 = sub_1A3AB4808();
  *(_QWORD *)(v8 + 840) = v10;
  *(_QWORD *)(v8 + 848) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 856) = swift_task_alloc();
  v11 = sub_1A39A4820((uint64_t *)&unk_1EE6D4070);
  *(_QWORD *)(v8 + 864) = v11;
  *(_QWORD *)(v8 + 872) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 880) = swift_task_alloc();
  v12 = sub_1A39A4820((uint64_t *)&unk_1EE6D30D0);
  *(_QWORD *)(v8 + 888) = v12;
  *(_QWORD *)(v8 + 896) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 904) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A45818()
{
  _QWORD *v0;
  NSString *v1;
  Class v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, void *, uint64_t, uint64_t);

  v1 = (NSString *)sub_1A3AB4958();
  v2 = NSClassFromString(v1);
  v0[114] = v2;

  if (v2)
  {
    v3 = v0[95];
    v0[115] = swift_getKeyPath();
    v0[116] = *(_QWORD *)(*(_QWORD *)v3 + 120);
    return swift_task_switch();
  }
  else
  {
    v5 = v0[97];
    v6 = v0[96];
    v7 = swift_task_alloc();
    v0[121] = v7;
    *(_QWORD *)(v7 + 16) = v5;
    v10 = (uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v6 + 112)
                                                                     + *(_QWORD *)(*(_QWORD *)v6 + 112));
    v8 = (_QWORD *)swift_task_alloc();
    v0[122] = v8;
    v9 = sub_1A39A4820(&qword_1EE6D4090);
    *v8 = v0;
    v8[1] = sub_1A3A45DB0;
    return v10(v0 + 28, &unk_1EE6D4088, v7, v9);
  }
}

uint64_t sub_1A3A45940()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 928))(*(_QWORD *)(v0 + 920));
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A45994()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, void *, uint64_t, uint64_t);

  if (*(_QWORD *)(v0 + 752)
    && (v1 = objc_msgSend(*(id *)(v0 + 752), sel_isKindOfClass_, *(_QWORD *)(v0 + 912)),
        swift_unknownObjectRelease(),
        (v1 & 1) != 0))
  {
    v2 = *(_QWORD *)(v0 + 768);
    *(_QWORD *)(v0 + 936) = objc_msgSend((id)objc_opt_self(), sel_shared);
    *(_QWORD *)(v0 + 944) = swift_getKeyPath();
    *(_QWORD *)(v0 + 952) = *(_QWORD *)(*(_QWORD *)v2 + 120);
    return swift_task_switch();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 776);
    v5 = *(_QWORD *)(v0 + 768);
    v6 = swift_task_alloc();
    *(_QWORD *)(v0 + 968) = v6;
    *(_QWORD *)(v6 + 16) = v4;
    v9 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v5 + 112)
                                                                   + *(_QWORD *)(*(_QWORD *)v5 + 112));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 976) = v7;
    v8 = sub_1A39A4820(&qword_1EE6D4090);
    *v7 = v0;
    v7[1] = sub_1A3A45DB0;
    return v9(v0 + 224, &unk_1EE6D4088, v6, v8);
  }
}

uint64_t sub_1A3A45AD8()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 952))(*(_QWORD *)(v0 + 944));
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A45B2C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int *v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD *, void *, uint64_t, uint64_t);
  uint64_t (*v14)(void);

  v1 = (void *)v0[117];
  v2 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_parseSSMLToPlainText_, v2);

  v4 = objc_msgSend(v3, sel_error);
  if (v4)
  {
    v5 = v0[97];
    v6 = v0[96];
    v7 = swift_task_alloc();
    v0[121] = v7;
    *(_QWORD *)(v7 + 16) = v5;
    v13 = (uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v6 + 112)
                                                                     + *(_QWORD *)(*(_QWORD *)v6 + 112));
    v8 = (_QWORD *)swift_task_alloc();
    v0[122] = v8;
    v9 = sub_1A39A4820(&qword_1EE6D4090);
    *v8 = v0;
    v8[1] = sub_1A3A45DB0;
    return v13(v0 + 28, &unk_1EE6D4088, v7, v9);
  }
  else
  {
    v11 = *(int **)(*(_QWORD *)v0[96] + 112);
    v14 = (uint64_t (*)(void))((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc();
    v0[120] = v12;
    *v12 = v0;
    v12[1] = sub_1A3A45CB0;
    return v14();
  }
}

uint64_t sub_1A3A45CB0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A45D04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v7)(_QWORD *, void *, uint64_t, uint64_t);

  v1 = v0[97];
  v2 = v0[96];
  v3 = swift_task_alloc();
  v0[121] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v7 = (uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 112)
                                                                  + *(_QWORD *)(*(_QWORD *)v2 + 112));
  v4 = (_QWORD *)swift_task_alloc();
  v0[122] = v4;
  v5 = sub_1A39A4820(&qword_1EE6D4090);
  *v4 = v0;
  v4[1] = sub_1A3A45DB0;
  return v7(v0 + 28, &unk_1EE6D4088, v3, v5);
}

uint64_t sub_1A3A45DB0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A45E10()
{
  uint64_t v0;
  _OWORD *v1;
  _QWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = (_OWORD *)(v0 + 224);
  if (*(_QWORD *)(v0 + 232))
  {
    v2 = *(_QWORD **)(v0 + 776);
    v3 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 64) = v3;
    v4 = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 128) = v4;
    v5 = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 96) = v5;
    *(_OWORD *)(v0 + 201) = *(_OWORD *)(v0 + 409);
    v6 = *(_OWORD *)(v0 + 400);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 384);
    *(_OWORD *)(v0 + 192) = v6;
    v7 = *(_OWORD *)(v0 + 368);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 352);
    *(_OWORD *)(v0 + 160) = v7;
    v8 = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v0 + 16) = *v1;
    *(_OWORD *)(v0 + 32) = v8;
    v9 = 1040;
    if (*(_BYTE *)(v0 + 217))
      v9 = 1064;
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + v9))(v0 + 16);
    sub_1A3AB4D6C();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 984) = v10;
    *v10 = v0;
    v10[1] = sub_1A3A45F84;
    return sub_1A3AB4E80();
  }
  else
  {
    sub_1A39B11F4((uint64_t)v1, &qword_1EE6D4090);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1A3A45F84()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A45FE8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v1 = *(_QWORD *)(v0 + 704);
  if (v1 >> 3 == 0xFFFFFFFF)
  {
    v2 = *(_QWORD *)(v0 + 904);
    v3 = *(_QWORD *)(v0 + 896);
    v4 = *(_QWORD *)(v0 + 888);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 872) + 8))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 864));
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    sub_1A39EA7E4(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v32 = *(void **)(v0 + 688);
    v6 = *(_QWORD *)(v0 + 696);
    v21 = *(_QWORD *)(v0 + 712);
    v25 = *(_QWORD *)(v0 + 856);
    v30 = *(_QWORD *)(v0 + 848);
    v31 = *(_QWORD *)(v0 + 840);
    v29 = *(_QWORD *)(v0 + 824);
    v27 = *(_QWORD *)(v0 + 832);
    v28 = *(_QWORD *)(v0 + 816);
    v24 = *(_QWORD *)(v0 + 808);
    v7 = *(_QWORD *)(v0 + 792);
    v8 = *(_QWORD *)(v0 + 784);
    v22 = *(void **)(v0 + 776);
    v23 = *(_QWORD *)(v0 + 800);
    v9 = *(_QWORD *)(v0 + 768);
    v10 = *(_QWORD *)(v0 + 760);
    sub_1A39B11BC(0, (unint64_t *)&qword_1ED1B5420);
    v26 = (void *)sub_1A3AB5018();
    sub_1A39EA7A8(v0 + 16, v0 + 432);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = v9;
    *(_QWORD *)(v11 + 32) = v32;
    *(_QWORD *)(v11 + 40) = v6;
    *(_QWORD *)(v11 + 48) = v1;
    *(_QWORD *)(v11 + 56) = v21;
    *(_QWORD *)(v11 + 64) = v8;
    *(_QWORD *)(v11 + 72) = v7;
    v12 = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v11 + 240) = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v11 + 256) = v12;
    *(_OWORD *)(v11 + 265) = *(_OWORD *)(v0 + 617);
    v13 = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v11 + 176) = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v11 + 192) = v13;
    v14 = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v11 + 208) = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v11 + 224) = v14;
    v15 = *(_OWORD *)(v0 + 480);
    *(_OWORD *)(v11 + 112) = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v11 + 128) = v15;
    v16 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v11 + 144) = *(_OWORD *)(v0 + 496);
    *(_OWORD *)(v11 + 160) = v16;
    v17 = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v11 + 80) = *(_OWORD *)(v0 + 432);
    *(_OWORD *)(v11 + 96) = v17;
    *(_QWORD *)(v11 + 288) = v23;
    *(_QWORD *)(v11 + 296) = v24;
    *(_QWORD *)(v11 + 304) = v22;
    *(_QWORD *)(v0 + 672) = sub_1A3A48DBC;
    *(_QWORD *)(v0 + 680) = v11;
    *(_QWORD *)(v0 + 640) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 648) = 1107296256;
    *(_QWORD *)(v0 + 656) = sub_1A39CF138;
    *(_QWORD *)(v0 + 664) = &unk_1E4A9D958;
    v18 = _Block_copy((const void *)(v0 + 640));
    swift_retain();
    swift_retain();
    sub_1A3A49168(v32, v6, v1);
    sub_1A39EA864(v8);
    sub_1A39EA864(v23);
    v19 = v22;
    sub_1A3AB47F0();
    *(_QWORD *)(v0 + 744) = MEMORY[0x1E0DEE9D8];
    sub_1A39B9F44(&qword_1EE6D23C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1A39A4820(&qword_1EE6D23D8);
    sub_1A3A4917C();
    sub_1A3AB5228();
    MEMORY[0x1A8595E0C](0, v25, v27, v18);
    _Block_release(v18);

    sub_1A3A491C8(v32, v6, v1);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v25, v31);
    swift_release();
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 992) = v20;
    *v20 = v0;
    v20[1] = sub_1A3A46398;
    return sub_1A3AB4E80();
  }
}

uint64_t sub_1A3A46398()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A463FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(_QWORD *)(v0 + 896);
  v3 = *(_QWORD *)(v0 + 888);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 872) + 8))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 864));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1A39EA7E4(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A464AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_BYTE *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1A39D5174;
  return sub_1A3A45714((uint64_t)v7, v8, v9, v2, v3, v4, v5, v6);
}

id sub_1A3A46544@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_delegate);
  *a2 = result;
  return result;
}

id sub_1A3A4657C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDelegate_, *a1);
}

void sub_1A3A46590(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_speechString);
  v4 = sub_1A3AB497C();
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_1A3A465E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch();
}

uint64_t sub_1A3A465FC()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_speechString);
  if (!v1)
  {
    sub_1A3AB497C();
    v1 = (id)sub_1A3AB4958();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(*(id *)(v0 + 16), sel_setSsmlRepresentation_, v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A46674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A46690()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 32)) + 0x150))(*(id *)(v0 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_1A3A4670C;
  return sub_1A39A0DB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1);
}

uint64_t sub_1A3A4670C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1A3A46754(uint64_t a1)
{
  __asm { BR              X10 }
}

id sub_1A3A4678C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_1A3A4802C();
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C89B58]), sel_initWithWordRange_atByteSampleOffset_, v1, v2, v0);
}

id sub_1A3A4682C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  v3 = objc_allocWithZone(MEMORY[0x1E0C89B58]);
  swift_bridgeObjectRetain();
  v4 = (void *)sub_1A3AB4958();
  sub_1A39EB3EC(v1, v2, 3u);
  v5 = objc_msgSend(v3, sel_initWithBookmarkName_atByteSampleOffset_, v4, v0);

  return v5;
}

uint64_t CoreSynthesizer.write(_:toBufferCallback:synth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v5[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A46944()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *(_QWORD **)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x488))(0, 0);
  sub_1A39A4820(&qword_1EE6D3EF0);
  v7 = sub_1A39B11BC(0, &qword_1EE6D3EF8);
  v10 = sub_1A3A40BE4(v4, v7, v8, v9);
  sub_1A39A4820(&qword_1EE6D3F00);
  v11 = sub_1A39B11BC(0, &qword_1EE6D3F08);
  v14 = sub_1A3A40BE4(v5, v11, v12, v13);
  v15 = sub_1A3AB4D00();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v1, 1, 1, v15);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = v10;
  *(_QWORD *)(v16 + 40) = v14;
  *(_QWORD *)(v16 + 48) = v2;
  *(_BYTE *)(v16 + 56) = 1;
  *(_QWORD *)(v16 + 64) = v6;
  *(_QWORD *)(v16 + 72) = v3;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  v17 = v2;
  swift_retain();
  sub_1A39CDB64(v1, (uint64_t)&unk_1EE6D3F28, v16);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A46C00(void *a1, void *aBlock, void *a3, const void *a4, void *a5)
{
  _QWORD *v5;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;

  v5[3] = a3;
  v5[4] = a5;
  v5[2] = a1;
  v10 = _Block_copy(aBlock);
  v5[5] = _Block_copy(a4);
  v11 = swift_allocObject();
  v5[6] = v11;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = a1;
  v13 = a3;
  a5;
  v14 = (_QWORD *)swift_task_alloc();
  v5[7] = v14;
  *v14 = v5;
  v14[1] = sub_1A3A46CD4;
  return CoreSynthesizer.write(_:toBufferCallback:synth:)((uint64_t)v12, (uint64_t)sub_1A3A49278, v11, (uint64_t)v13);
}

uint64_t sub_1A3A46CD4()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;

  v2 = *(void **)(*v0 + 32);
  v1 = *(void (***)(_QWORD))(*v0 + 40);
  v4 = *(void **)(*v0 + 16);
  v3 = *(void **)(*v0 + 24);
  v6 = *v0;
  swift_task_dealloc();
  swift_release();

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t CoreSynthesizer.write(_:toBufferCallback:toMarkerCallback:synth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v7[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A46DC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v2 = *(_QWORD **)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v20 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x488))(0, 0);
  sub_1A39A4820(&qword_1EE6D3EF0);
  v8 = sub_1A39B11BC(0, &qword_1EE6D3EF8);
  v11 = sub_1A3A40BE4(v4, v8, v9, v10);
  sub_1A39A4820(&qword_1EE6D3F00);
  v12 = sub_1A39B11BC(0, &qword_1EE6D3F08);
  v15 = sub_1A3A40BE4(v6, v12, v13, v14);
  v16 = sub_1A3AB4D00();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v1, 1, 1, v16);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = v11;
  *(_QWORD *)(v17 + 40) = v15;
  *(_QWORD *)(v17 + 48) = v2;
  *(_BYTE *)(v17 + 56) = 1;
  *(_QWORD *)(v17 + 64) = v7;
  *(_QWORD *)(v17 + 72) = v5;
  *(_QWORD *)(v17 + 80) = v20;
  *(_QWORD *)(v17 + 88) = v3;
  v18 = v2;
  swift_retain();
  swift_retain();
  sub_1A39CDB64(v1, (uint64_t)&unk_1EE6D3F38, v17);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A470AC(void *a1, void *aBlock, const void *a3, void *a4, const void *a5, void *a6)
{
  _QWORD *v6;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD *v18;

  v6[3] = a4;
  v6[4] = a6;
  v6[2] = a1;
  v12 = _Block_copy(aBlock);
  v13 = _Block_copy(a3);
  v6[5] = _Block_copy(a5);
  v14 = swift_allocObject();
  v6[6] = v14;
  *(_QWORD *)(v14 + 16) = v12;
  v15 = swift_allocObject();
  v6[7] = v15;
  *(_QWORD *)(v15 + 16) = v13;
  v16 = a1;
  v17 = a4;
  a6;
  v18 = (_QWORD *)swift_task_alloc();
  v6[8] = v18;
  *v18 = v6;
  v18[1] = sub_1A3A471BC;
  return CoreSynthesizer.write(_:toBufferCallback:toMarkerCallback:synth:)((uint64_t)v16, (uint64_t)sub_1A3A48984, v14, (uint64_t)sub_1A3A48994, v15, (uint64_t)v17);
}

uint64_t sub_1A3A471BC()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;

  v1 = *(void (***)(_QWORD))(*v0 + 40);
  v3 = *(void **)(*v0 + 24);
  v2 = *(void **)(*v0 + 32);
  v4 = *(void **)(*v0 + 16);
  v6 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_release();

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

void sub_1A3A47250(uint64_t a1, uint64_t a2)
{
  id v3;

  sub_1A39B11BC(0, &qword_1EE6D4000);
  v3 = (id)sub_1A3AB4BA4();
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v3);

}

uint64_t CoreSynthesizer.stopSpeaking(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch();
}

uint64_t sub_1A3A472CC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;

  v2 = v0[16];
  v1 = (void *)v0[17];
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_1A3A473AC;
  v3 = swift_continuation_init();
  v4 = swift_allocObject();
  v0[10] = MEMORY[0x1E0C809B0];
  v5 = v0 + 10;
  *(_QWORD *)(v4 + 16) = v3;
  v5[4] = sub_1A3A48240;
  v5[5] = v4;
  v5[1] = 1107296256;
  v5[2] = sub_1A39D7BA0;
  v5[3] = &unk_1E4A9F8F0;
  v6 = _Block_copy(v5);
  swift_release();
  objc_msgSend(v1, sel_stopSpeakingAt_completionHandler_, v2, v6);
  _Block_release(v6);
  return swift_continuation_await();
}

uint64_t sub_1A3A473AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v0 + 8))(*(unsigned __int8 *)(*(_QWORD *)v0 + 144));
}

uint64_t CoreSynthesizer.stopSpeaking(at:completionHandler:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t (*)(), uint64_t);
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v7 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v27 - v11;
  if ((objc_msgSend(v3, sel_isSpeaking) & 1) != 0)
  {
    v13 = 1;
    if (a1)
    {
LABEL_3:
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v3;
      v15 = *(void (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x488);
      v16 = v3;
      v15(sub_1A3A48294, v14);
      return a2(v13);
    }
  }
  else
  {
    v13 = (uint64_t)objc_msgSend(v3, sel_isPaused);
    if (a1)
      goto LABEL_3;
  }
  v18 = sub_1A3A63914();
  swift_beginAccess();
  v19 = *v18;
  v20 = sub_1A3AB4D00();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v12, 1, 1, v20);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v3;
  *(_QWORD *)(v22 + 24) = a2;
  *(_QWORD *)(v22 + 32) = a3;
  *(_BYTE *)(v22 + 40) = v13;
  sub_1A39D89E8((uint64_t)v12, (uint64_t)v10);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, v20);
  swift_retain();
  v24 = v3;
  swift_retain();
  if (v23 == 1)
  {
    sub_1A39B11F4((uint64_t)v10, (uint64_t *)&unk_1ED1B53A0);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v20);
  }
  v25 = sub_1A39B9F44((unint64_t *)&qword_1EE6D2540, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = &unk_1EE6D3F50;
  *(_QWORD *)(v26 + 24) = v22;
  v27[1] = 6;
  v27[2] = 0;
  v27[3] = v19;
  v27[4] = v25;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A3A47674(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  *(_BYTE *)(v5 + 40) = a5;
  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = a4;
  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *a2) + 0x438);
  v9 = (uint64_t (*)(void))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 32) = v7;
  *v7 = v5;
  v7[1] = sub_1A3A476E8;
  return v9();
}

uint64_t sub_1A3A476E8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A4773C()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A47770(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v5 = *(int **)((*MEMORY[0x1E0DEEDD8] & *a4) + 0x438);
  v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1A39D5174;
  return v8();
}

uint64_t CoreSynthesizer.pauseSpeaking(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1A3A47860()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t (*)(), uint64_t);
  _QWORD *v5;
  int *v7;
  _QWORD *v8;
  uint64_t (*v9)(void);

  v1 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 40) = objc_msgSend(*(id *)(v0 + 24), sel_isSpeaking);
  v2 = *(_QWORD **)(v0 + 24);
  if (v1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = *(void (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x488);
    v5 = v2;
    v4(sub_1A3A4836C, v3);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 40));
  }
  else
  {
    v7 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x440);
    v9 = (uint64_t (*)(void))((char *)v7 + *v7);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v8;
    *v8 = v0;
    v8[1] = sub_1A3A4795C;
    return v9();
  }
}

uint64_t sub_1A3A4795C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_1A3A479A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;

  v5 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1A3AB4D00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v10 = a1;
  sub_1A39DDD84((uint64_t)v7, a3, (uint64_t)v9);
  swift_release();
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x488))(0, 0);
}

uint64_t sub_1A3A47A90(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v5 = *(int **)((*MEMORY[0x1E0DEEDD8] & *a4) + 0x440);
  v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1A39D5174;
  return v8();
}

uint64_t sub_1A3A47C28(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v5;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v5 = a3;
  return swift_task_switch();
}

uint64_t sub_1A3A47C74()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t (*)(), uint64_t);
  _QWORD *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD);
  int *v9;
  _QWORD *v10;
  uint64_t (*v11)(void);

  v1 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 48) = objc_msgSend(*(id *)(v0 + 24), sel_isSpeaking);
  v2 = *(_QWORD **)(v0 + 24);
  if (v1)
  {
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    v4 = *(void (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x488);
    v5 = v2;
    v4(sub_1A3A4926C, v3);
    v6 = *(unsigned __int8 *)(v0 + 48);
    v7 = *(void (***)(_QWORD, _QWORD))(v0 + 32);

    v7[2](v7, v6);
    _Block_release(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x440);
    v11 = (uint64_t (*)(void))((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v10;
    *v10 = v0;
    v10[1] = sub_1A3A47D90;
    return v11();
  }
}

uint64_t sub_1A3A47D90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void (**v3)(_QWORD, _QWORD);
  uint64_t v5;

  v1 = *v0;
  v5 = *v0;
  swift_task_dealloc();
  v2 = *(unsigned __int8 *)(v1 + 48);
  v3 = *(void (***)(_QWORD, _QWORD))(v1 + 32);

  v3[2](v3, v2);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

Swift::Bool __swiftcall CoreSynthesizer.continueSpeaking()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v9;

  v1 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(v0, sel_isPaused);
  v5 = sub_1A3AB4D00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v7 = v0;
  sub_1A39DDD84((uint64_t)v3, (uint64_t)&unk_1EE6D3F80, (uint64_t)v6);
  swift_release();
  return v4;
}

uint64_t sub_1A3A47ED4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v5 = *(int **)((*MEMORY[0x1E0DEEDD8] & *a4) + 0x448);
  v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1A39D5174;
  return v8();
}

uint64_t sub_1A3A4802C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  sub_1A39A0888(v0 + 144, (uint64_t)&v6);
  if (v8 < 2u)
  {
    v2 = v6;
    v1 = v7;
    sub_1A39A9EC0();
    v3 = sub_1A3AB4A3C();
    v6 = v2;
    v7 = v1;
    v4 = sub_1A3AB4A3C();
    swift_bridgeObjectRelease();
    if (!__OFSUB__(v4, v3))
      return v3;
    __break(1u);
  }
  result = sub_1A3AB5444();
  __break(1u);
  return result;
}

uint64_t sub_1A3A4813C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  if (*(_QWORD *)(v0 + 64))
    swift_release();
  if (*(_QWORD *)(v0 + 80))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A48198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_BYTE *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1A39B1604;
  return sub_1A3A45714((uint64_t)v7, v8, v9, v2, v3, v4, v5, v6);
}

uint64_t sub_1A3A48230()
{
  return swift_deallocObject();
}

uint64_t sub_1A3A48240(char a1)
{
  uint64_t v1;

  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 64) + 40) = a1;
  return swift_continuation_resume();
}

uint64_t sub_1A3A48258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1A3A48268()
{
  return swift_release();
}

uint64_t sub_1A3A48270()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1A3A48294()
{
  uint64_t v0;

  return sub_1A3A479A4(*(void **)(v0 + 16), (uint64_t)&unk_1E4AA4BA0, (uint64_t)&unk_1EE6D4060);
}

uint64_t sub_1A3A482C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1A39D5174;
  *(_BYTE *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x438);
  v9 = (uint64_t (*)(void))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v7;
  *v7 = v4;
  v7[1] = sub_1A3A476E8;
  return v9();
}

uint64_t sub_1A3A4836C()
{
  uint64_t v0;

  return sub_1A3A479A4(*(void **)(v0 + 16), (uint64_t)&unk_1E4AA4B78, (uint64_t)&unk_1EE6D4050);
}

uint64_t sub_1A3A48398()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(_QWORD **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x448);
  v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  v3[2] = v5;
  *v5 = v3;
  v5[1] = sub_1A39D5174;
  return v7();
}

uint64_t sub_1A3A4842C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject();
}

uint64_t sub_1A3A48458()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1A39D5174;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1EE6D3F90 + dword_1EE6D3F90))(v2, v3, v4);
}

uint64_t sub_1A3A484CC(uint64_t a1, _QWORD *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t (*)(), uint64_t);
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v6 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v27 - v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  _Block_copy(a3);
  if ((objc_msgSend(a2, sel_isSpeaking) & 1) != 0)
  {
    v13 = 1;
    if (a1)
    {
LABEL_3:
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = a2;
      v15 = *(void (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x488);
      v16 = a2;
      v15(sub_1A3A49270, v14);
      a3[2](a3, v13);
      return swift_release();
    }
  }
  else
  {
    v13 = (uint64_t)objc_msgSend(a2, sel_isPaused);
    if (a1)
      goto LABEL_3;
  }
  v18 = sub_1A3A63914();
  swift_beginAccess();
  v19 = *v18;
  v20 = sub_1A3AB4D00();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v11, 1, 1, v20);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = sub_1A3A487B4;
  *(_QWORD *)(v22 + 32) = v12;
  *(_BYTE *)(v22 + 40) = v13;
  sub_1A39D89E8((uint64_t)v11, (uint64_t)v9);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v9, 1, v20);
  v24 = a2;
  swift_retain();
  swift_retain();
  if (v23 == 1)
  {
    sub_1A39B11F4((uint64_t)v9, (uint64_t *)&unk_1ED1B53A0);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v20);
  }
  v25 = sub_1A39B9F44((unint64_t *)&qword_1EE6D2540, (uint64_t (*)(uint64_t))type metadata accessor for TTSExecutor, (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = &unk_1EE6D3FD0;
  *(_QWORD *)(v26 + 24) = v22;
  v27[1] = 6;
  v27[2] = 0;
  v27[3] = v19;
  v27[4] = v25;
  swift_task_create();
  swift_release();
  return swift_release();
}

uint64_t sub_1A3A487B4(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_1A3A487CC()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A487F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v2 = *(_QWORD **)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1A39B1604;
  *(_BYTE *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x438);
  v9 = (uint64_t (*)(void))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v7;
  *v7 = v4;
  v7[1] = sub_1A3A476E8;
  return v9();
}

uint64_t sub_1A3A488A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  _Block_release(*(const void **)(v0 + 32));

  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_1A3A488F0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  const void *v4;
  void *v5;
  void *v6;
  const void *v7;
  _QWORD *v8;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (const void *)v0[4];
  v5 = (void *)v0[5];
  v7 = (const void *)v0[6];
  v6 = (void *)v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_1A39D5174;
  return ((uint64_t (*)(void *, void *, const void *, void *, const void *, void *))((char *)&dword_1EE6D3FE0
                                                                                             + dword_1EE6D3FE0))(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_1A3A48984()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_1A3A48994(uint64_t a1)
{
  uint64_t v1;

  sub_1A3A47250(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1A3A4899C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  _Block_release(*(const void **)(v0 + 40));

  return swift_deallocObject();
}

uint64_t sub_1A3A489E0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  const void *v5;
  void *v6;
  _QWORD *v7;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (const void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1A39D5174;
  return ((uint64_t (*)(void *, void *, void *, const void *, void *))((char *)&dword_1EE6D4008
                                                                               + dword_1EE6D4008))(v2, v3, v4, v5, v6);
}

uint64_t sub_1A3A48A68()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A3A48A8C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_1A3A48AC8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1A39D5174;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_1EE6D4028 + dword_1EE6D4028))(v2, v3, v5, v4);
}

uint64_t sub_1A3A48B4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(_QWORD **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x440);
  v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  v3[2] = v5;
  *v5 = v3;
  v5[1] = sub_1A39D5174;
  return v7();
}

uint64_t sub_1A3A48BE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(_QWORD **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1A39D5174;
  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x438);
  v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  v3[2] = v5;
  *v5 = v3;
  v5[1] = sub_1A39D5174;
  return v7();
}

uint64_t sub_1A3A48C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1A39D5174;
  v7[3] = a2;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1A3A48CE4()
{
  uint64_t v0;
  unsigned int v1;

  swift_release();
  swift_release();
  sub_1A39EB3C4(*(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  if (*(_QWORD *)(v0 + 64))
    swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 120))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 264);
  if (v1 == 2)
  {
    sub_1A39A47C4(v0 + 224);
    if (!*(_QWORD *)(v0 + 288))
      goto LABEL_10;
    goto LABEL_9;
  }
  if (v1 <= 1)
    swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 288))
LABEL_9:
    swift_release();
LABEL_10:

  return swift_deallocObject();
}

void sub_1A3A48DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = (id)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 104))();
  (*(void (**)(void))(*(_QWORD *)v1 + 104))();
  v3 = objc_msgSend(v4, sel_delegate);
  __asm { BR              X10 }
}

void sub_1A3A48E5C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void (*v13)(void);
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v7 = v0;
  v22 = v2;
  v23 = v6;
  v24 = v4;
  v25 = v5;
  sub_1A3A46754((uint64_t)&v22);
  v9 = v8;
  if (v1
    && (objc_msgSend(v1, sel_respondsToSelector_, sel_speechSynthesizer_willSpeakMarker_utterance_) & 1) != 0)
  {
    objc_msgSend(v1, sel_speechSynthesizer_willSpeakMarker_utterance_, v21, v9, v0);
  }
  if (v3)
  {
    sub_1A39A4820((uint64_t *)&unk_1EE6D23B0);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1A3AC00A0;
    *(_QWORD *)(v10 + 32) = v9;
    v22 = v10;
    sub_1A3AB4BC8();
    v11 = v22;
    v12 = v9;
    v3(v11);
    swift_bridgeObjectRelease();
  }
  if (objc_msgSend(v9, sel_mark) != (id)1)
  {
    swift_unknownObjectRelease();

    goto LABEL_13;
  }
  v13 = (void (*)(void))(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x480))();
  if (v13)
  {
    v14 = (uint64_t)v13;
    v13();
    sub_1A39E9ED0(v14);
  }
  v15 = objc_msgSend(v9, sel_textRange);
  if (!v1)
  {
LABEL_15:

    v0 = v7;
    goto LABEL_13;
  }
  v17 = v15;
  v18 = v16;
  if ((objc_msgSend(v1, sel_respondsToSelector_, sel_speechSynthesizer_willSpeakRangeOfSpeechString_utterance_) & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_15;
  }
  v19 = v18;
  v0 = v7;
  objc_msgSend(v1, sel_speechSynthesizer_willSpeakRangeOfSpeechString_utterance_, v21, v17, v19, v7);

  swift_unknownObjectRelease();
LABEL_13:

}

id sub_1A3A49168(id result, uint64_t a2, unint64_t a3)
{
  if (a3 >> 3 != 0xFFFFFFFF)
    return sub_1A39EB370(result, a2, a3);
  return result;
}

unint64_t sub_1A3A4917C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D23E0;
  if (!qword_1EE6D23E0)
  {
    v1 = sub_1A39AB624(&qword_1EE6D23D8);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D23E0);
  }
  return result;
}

void sub_1A3A491C8(void *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 3 != 0xFFFFFFFF)
    sub_1A39EB3C4(a1, a2, a3);
}

char *sub_1A3A491DC()
{
  return sel_delegate;
}

char *sub_1A3A491E8()
{
  return sel_speechString;
}

void type metadata accessor for AVSpeechBoundary()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EE6D4108)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EE6D4108);
  }
}

void *sub_1A3A4927C()
{
  return &unk_1A3AC6B2C;
}

float kAVSpeechUtteranceDefaultRate.getter()
{
  return 0.5;
}

void *sub_1A3A49290()
{
  return &unk_1A3AC6B30;
}

float kAVSpeechUtteranceMinimumPitchMultiplier.getter()
{
  return 0.5;
}

void *sub_1A3A492A4()
{
  return &unk_1A3AC6B34;
}

float kAVSpeechUtteranceMaximumPitchMultiplier.getter()
{
  return 2.0;
}

void *sub_1A3A492B8()
{
  return &unk_1A3AC6B38;
}

float kAVSpeechUtteranceDefaultPitchMultiplier.getter()
{
  return 1.0;
}

float kAVSpeechUtteranceMinimumVolume.getter()
{
  return 0.0;
}

float kAVSpeechUtteranceMaximumVolume.getter()
{
  return 1.0;
}

void *sub_1A3A492DC()
{
  return &unk_1A3AC6B3C;
}

float kAVSpeechUtteranceDefaultVolume.getter()
{
  return 1.0;
}

double String.asSpeech.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  TTSMarkup.SpeechText.init(_:)(a1, a2, &v9);
  result = *(double *)&v9;
  v7 = v10;
  v8 = v11;
  *(_OWORD *)a3 = v9;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

float sub_1A3A4934C(float a1, float a2, float a3, float a4, float a5)
{
  return (float)((float)(a4 - a3) * (float)((float)(a5 - a1) / (float)(a2 - a1))) + a3;
}

uint64_t sub_1A3A49368()
{
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4EB0();
  return 0;
}

uint64_t AVSpeechUtterance.asSpeech.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  double v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  double v23;
  float v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  char v41;
  int v42;
  char v43;
  int v44;
  char v45;
  unsigned int v46;
  char v47;

  objc_msgSend(v1, sel_rate);
  if (*(float *)&v3 < 0.0)
  {
    LODWORD(v3) = 0;
    objc_msgSend(v1, sel_setRate_, v3);
  }
  objc_msgSend(v1, sel_rate);
  if (v4 == *(float *)sub_1A3A4927C())
    goto LABEL_4;
  objc_msgSend(v1, sel_rate);
  v8 = v7;
  v9 = *MEMORY[0x1E0C89998];
  objc_msgSend(v1, sel_rate);
  if (v8 >= v9)
  {
    if (v9 >= v10)
    {
LABEL_4:
      v5 = 0.0;
      v6 = 1;
      goto LABEL_10;
    }
    objc_msgSend(v1, sel_rate);
    v6 = 0;
    v11 = (float)((float)(v13 - v9) / (float)(*MEMORY[0x1E0C899A8] - v9)) * 3.0;
    v12 = 1.0;
  }
  else
  {
    v6 = 0;
    v11 = (float)((float)(v10 - *MEMORY[0x1E0C899B0]) / (float)(v9 - *MEMORY[0x1E0C899B0])) * 0.875;
    v12 = 0.125;
  }
  v5 = v11 + v12;
LABEL_10:
  objc_msgSend(v1, sel_pitchMultiplier);
  v15 = v14;
  v16 = (float *)sub_1A3A492B8();
  if (v15 == *v16)
  {
LABEL_11:
    v17 = 0.0;
    v18 = 1;
    goto LABEL_17;
  }
  v19 = v16;
  objc_msgSend(v1, sel_pitchMultiplier);
  v21 = v20;
  v22 = *v19;
  objc_msgSend(v1, sel_pitchMultiplier);
  v24 = *(float *)&v23;
  if (v21 >= v22)
  {
    if (*v19 >= *(float *)&v23)
      goto LABEL_11;
    *(float *)&v23 = *v19;
    objc_msgSend(v1, sel_pitchMultiplier, v23);
    v28 = *v19;
    v18 = 0;
    v26 = (float)((float)(v29 - v28) / (float)(*(float *)sub_1A3A492A4() - v28)) * 100.0;
    v27 = 0.0;
  }
  else
  {
    v25 = (float *)sub_1A3A49290();
    v18 = 0;
    v26 = (float)((float)(v24 - *v25) / (float)(*v19 - *v25)) * 50.0;
    v27 = -50.0;
  }
  v17 = v26 + v27;
LABEL_17:
  objc_msgSend(v1, sel_volume);
  v31 = v30;
  v32 = (float *)sub_1A3A492DC();
  if (v31 == *v32)
  {
    if (v6)
      v33 = 0xFFFFFFFF00000000;
    else
      v33 = LODWORD(v5) | 0x100000000;
    if (v18)
      v34 = 0xFFFFFFFC00000000;
    else
      v34 = LODWORD(v17) | 0x8200000000;
    v35 = 0xFF00000000;
  }
  else
  {
    objc_msgSend(v1, sel_volume);
    if (v6)
      v33 = 0xFFFFFFFF00000000;
    else
      v33 = LODWORD(v5) | 0x100000000;
    if (v18)
      v34 = 0xFFFFFFFC00000000;
    else
      v34 = LODWORD(v17) | 0x8200000000;
    sub_1A39C932C((uint64_t)&v46, v36);
    v37 = 0x100000000;
    if (!v47)
      v37 = 0;
    v35 = v37 | v46;
  }
  v44 = v33;
  v45 = BYTE4(v33);
  v43 = BYTE4(v34);
  v42 = v34;
  v41 = BYTE4(v35);
  v40 = v35;
  MEMORY[0x1E0C80A78](v32);
  v38 = TTSMarkup.Prosody.init(rate:pitch:volume:speech:)(&v44, &v42, &v40, (uint64_t (*)(void))sub_1A3A49764, (uint64_t)&v46);
  MEMORY[0x1E0C80A78](v38);
  TTSMarkup.SpeechDocument.init(_:)(sub_1A3A49BC4, a1);
  return sub_1A3A49BCC((uint64_t)&v46);
}

uint64_t sub_1A3A49764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  _QWORD v9[5];

  v3 = objc_msgSend(*(id *)(v1 + 16), sel_speechString);
  v4 = sub_1A3AB497C();
  v6 = v5;

  v8[3] = &type metadata for TTSMarkup.SpeechText;
  v8[4] = &protocol witness table for TTSMarkup.SpeechText;
  v8[0] = swift_allocObject();
  TTSMarkup.SpeechText.init(_:)(v4, v6, (_QWORD *)(v8[0] + 16));
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v9, v8);
  sub_1A39A47C4((uint64_t)v8);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v9, a1);
  return sub_1A39A47C4((uint64_t)v9);
}

uint64_t sub_1A3A49820(void *a1, uint64_t a2)
{
  double v4;
  double v5;
  float v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  float v16;
  uint64_t v17;
  _BYTE v19[40];
  _OWORD v20[2];
  uint64_t v21;
  _QWORD v22[5];
  __int128 v23;
  __int128 v24;
  _UNKNOWN **v25;
  _QWORD v26[5];

  objc_msgSend(a1, sel_preUtteranceDelay);
  if (v4 == 0.0)
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    static TTSMarkup.SpeechBuilder.buildIf(_:)((uint64_t)&v23, (uint64_t)v26);
    sub_1A39BFB74((uint64_t)&v23);
  }
  else
  {
    objc_msgSend(a1, sel_preUtteranceDelay);
    v6 = v5;
    v26[3] = &type metadata for TTSMarkup.Pause;
    v26[4] = &protocol witness table for TTSMarkup.Pause;
    v26[0] = swift_allocObject();
    TTSMarkup.Pause.init(seconds:)(v26[0] + 16, v6);
    static TTSMarkup.SpeechBuilder.buildExpression(_:)(&v23, v26);
    sub_1A39A47C4((uint64_t)v26);
    static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)&v23, (uint64_t)v22);
    static TTSMarkup.SpeechBuilder.buildIf(_:)((uint64_t)v22, (uint64_t)v26);
    sub_1A39BFB74((uint64_t)v22);
    sub_1A39A47C4((uint64_t)&v23);
  }
  v7 = objc_msgSend(a1, sel_voice);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, sel_identifier);

    v10 = sub_1A3AB497C();
    v12 = v11;

    MEMORY[0x1E0C80A78](v13);
    *((_QWORD *)&v24 + 1) = &type metadata for TTSMarkup.Voice;
    v25 = &protocol witness table for TTSMarkup.Voice;
    *(_QWORD *)&v23 = swift_allocObject();
    TTSMarkup.Voice.init(named:speech:)(v10, v12, (uint64_t (*)(void))sub_1A3A49C2C, v23 + 16);
    static TTSMarkup.SpeechBuilder.buildExpression(_:)(v22, &v23);
    sub_1A39A47C4((uint64_t)&v23);
    static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v22, (uint64_t)v20);
    static TTSMarkup.SpeechBuilder.buildEither(first:)(&v23, v20);
  }
  else
  {
    *((_QWORD *)&v24 + 1) = &type metadata for TTSMarkup.Prosody;
    v25 = &protocol witness table for TTSMarkup.Prosody;
    *(_QWORD *)&v23 = swift_allocObject();
    sub_1A3A49D24(a2, v23 + 16);
    static TTSMarkup.SpeechBuilder.buildExpression(_:)(v22, &v23);
    sub_1A39A47C4((uint64_t)&v23);
    static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v22, (uint64_t)v20);
    static TTSMarkup.SpeechBuilder.buildEither(second:)(&v23, v20);
  }
  sub_1A39A47C4((uint64_t)v20);
  sub_1A39A47C4((uint64_t)v22);
  objc_msgSend(a1, sel_postUtteranceDelay);
  if (v14 == 0.0)
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    static TTSMarkup.SpeechBuilder.buildIf(_:)((uint64_t)v20, (uint64_t)v22);
    sub_1A39BFB74((uint64_t)v20);
  }
  else
  {
    objc_msgSend(a1, sel_postUtteranceDelay);
    v16 = v15;
    v22[3] = &type metadata for TTSMarkup.Pause;
    v22[4] = &protocol witness table for TTSMarkup.Pause;
    v22[0] = swift_allocObject();
    TTSMarkup.Pause.init(seconds:)(v22[0] + 16, v16);
    static TTSMarkup.SpeechBuilder.buildExpression(_:)(v20, v22);
    sub_1A39A47C4((uint64_t)v22);
    static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v20, (uint64_t)v19);
    static TTSMarkup.SpeechBuilder.buildIf(_:)((uint64_t)v19, (uint64_t)v22);
    sub_1A39BFB74((uint64_t)v19);
    sub_1A39A47C4((uint64_t)v20);
  }
  sub_1A39A4820(&qword_1EE6D2BE8);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1A3AC0240;
  sub_1A39A1AD0((uint64_t)v26, v17 + 32);
  sub_1A39A1AD0((uint64_t)&v23, v17 + 72);
  sub_1A39A1AD0((uint64_t)v22, v17 + 112);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)(v17);
  swift_bridgeObjectRelease();
  sub_1A39A47C4((uint64_t)v22);
  sub_1A39A47C4((uint64_t)&v23);
  return sub_1A39A47C4((uint64_t)v26);
}

uint64_t sub_1A3A49BC4()
{
  uint64_t v0;

  return sub_1A3A49820(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1A3A49BCC(uint64_t a1)
{
  _s8SentenceVwxx(a1);
  return a1;
}

uint64_t sub_1A3A49C00()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A49C2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[5];
  _QWORD v6[5];

  v3 = *(_QWORD *)(v1 + 16);
  v5[3] = &type metadata for TTSMarkup.Prosody;
  v5[4] = &protocol witness table for TTSMarkup.Prosody;
  v5[0] = swift_allocObject();
  sub_1A3A49D24(v3, v5[0] + 16);
  static TTSMarkup.SpeechBuilder.buildExpression(_:)(v6, v5);
  sub_1A39A47C4((uint64_t)v5);
  static TTSMarkup.SpeechBuilder.buildBlock(_:)((uint64_t)v6, a1);
  return sub_1A39A47C4((uint64_t)v6);
}

uint64_t sub_1A3A49CB4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 56);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A49CF8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_1A3A49D24(uint64_t a1, uint64_t a2)
{
  _s7ProsodyVwcp(a2, a1);
  return a2;
}

uint64_t sub_1A3A49D60()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A49D94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 304))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3A49DC4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 312);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A3A49DF4()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1A3A49E28(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t sub_1A3A49E6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 328))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3A49E9C(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 336))(*a1);
}

uint64_t sub_1A3A49EC8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_1A3A49EF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_1A3A49F34())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1A3A49F70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 352))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A3A49FA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 360);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1A3A49FE4()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1A3A4A02C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1A3A4A07C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1A3A4A0B8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 376))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A3A4A0EC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*a1);
}

uint64_t sub_1A3A4A118()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t sub_1A3A4A148(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 88) = a1;
  return result;
}

uint64_t sub_1A3A4A184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;

  swift_allocObject();
  v10 = sub_1A3A4A4B8(a1, a2, a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t sub_1A3A4A1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = v0;
  v12 = 0;
  v13 = 0xE000000000000000;
  v2 = sub_1A3AB52AC();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v0 + 136))(&v11, v2);
  v3 = sub_1A3AB5624();
  v5 = v4;
  swift_bridgeObjectRelease();
  v12 = v3;
  v13 = v5;
  v6 = sub_1A3AB4A84();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 160))(&v11, v6);
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  v7 = sub_1A3AB4A84();
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v7);
  sub_1A3AB5624();
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  sub_1A3AB4A84();
  v12 = 10;
  v13 = 0xE100000000000000;
  sub_1A3AB4A84();
  v8 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 376))(v8);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  v9 = sub_1A3AB4A84();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 352))(v9);
  sub_1A3AB4A84();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1A3A4A400()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t SpeechStringIntervalNode.deinit()
{
  uint64_t v0;

  v0 = IntervalNode.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SpeechStringIntervalNode.__deallocating_deinit()
{
  IntervalNode.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_1A3A4A48C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1A3A4A4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *(*v8)(uint64_t *__return_ptr, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = v5;
  *(_QWORD *)(v6 + 56) = a1;
  *(_QWORD *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 72) = a3;
  *(_QWORD *)(v6 + 80) = a4;
  *(_BYTE *)(v6 + 88) = a5;
  v8 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 136);
  v9 = swift_retain();
  v10 = v8(&v15, v9);
  v14 = v15;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*(_QWORD *)a1 + 160))(&v13, v10);
  v12 = v13;
  return sub_1A3A31D74((uint64_t)&v14, (uint64_t)&v12);
}

uint64_t type metadata accessor for SpeechStringIntervalNode()
{
  uint64_t result;

  result = qword_1EE6E1390;
  if (!qword_1EE6E1390)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A3A4A574()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SpeechStringIntervalNode()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.originalRange.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.originalRange.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.originalRange.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.plainStringOffset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.plainStringOffset.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.plainStringOffset.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.associatedSubstring.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.associatedSubstring.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.associatedSubstring.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.isWithinElement.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.isWithinElement.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of SpeechStringIntervalNode.isWithinElement.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t sub_1A3A4A674()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;

  type metadata accessor for TTSSettings();
  v0 = swift_allocObject();
  v1 = sub_1A3A4AA78(MEMORY[0x1E0DEE9D8]);
  result = sub_1A3A4A780(v1);
  *(_QWORD *)(v0 + 16) = result;
  qword_1EE6D5528 = v0;
  return result;
}

uint64_t sub_1A3A4A6BC()
{
  uint64_t v0;
  unint64_t v1;

  v0 = swift_allocObject();
  v1 = sub_1A3A4AA78(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 16) = sub_1A3A4A780(v1);
  return v0;
}

uint64_t *sub_1A3A4A700()
{
  if (qword_1EE6D5530 != -1)
    swift_once();
  return &qword_1EE6D5528;
}

uint64_t static TTSSettings.shared.getter()
{
  if (qword_1EE6D5530 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1A3A4A780(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v9;
  uint64_t v10[5];

  v2 = sub_1A3AB4604();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CF2F10];
  MEMORY[0x1E0C80A78](v2);
  v4 = sub_1A3AB4610();
  MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, _QWORD))(v6 + 104))((char *)&v10[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0CF2F40]);
  v10[0] = MEMORY[0x1E0DEE9D8];
  sub_1A39D4188(&qword_1EE6D2550, 255, v3, MEMORY[0x1E0CF2F20]);
  sub_1A39A4820(&qword_1EE6D2560);
  sub_1A3A4B60C();
  sub_1A3AB5228();
  v10[3] = sub_1A3AB45A4();
  v10[4] = MEMORY[0x1E0CF2E08];
  sub_1A39B1230(v10);
  sub_1A3AB4598();
  v9 = a1;
  v7 = objc_allocWithZone((Class)sub_1A39A4820(&qword_1EE6D2558));
  return sub_1A3AB4658();
}

uint64_t sub_1A3A4A914@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3A4A944(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 96);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A3A4A974()
{
  uint64_t v0;
  id v1;
  uint64_t v3;

  v1 = *(id *)(v0 + 16);
  sub_1A3AB4670();

  return v3;
}

void sub_1A3A4A9B0()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  sub_1A3AB467C();

}

void (*sub_1A3A4A9EC(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + 16);
  v3[4] = v4;
  v5 = v4;
  v3[5] = sub_1A3AB4664();
  return sub_1A3A4AA44;
}

void sub_1A3A4AA44(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);

  free(v1);
}

unint64_t sub_1A3A4AA78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = sub_1A39A4820(&qword_1EE6D2518);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1A39A4820(&qword_1EE6D4118);
  v6 = sub_1A3AB54B0();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1A3A4BF30(v12, (uint64_t)v5);
    result = sub_1A39BC700((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1A3AB4424();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(_QWORD *)(v19 + 72) * v16;
    v21 = v17 + v20;
    v22 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
    v22(v21, v5, v18);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v22)(v7[7] + v20, v9, v18);
    v23 = v7[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v7[2] = v25;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1A3A4AC18()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + 16);
  v2 = sub_1A3AB4688();

  return v2;
}

uint64_t sub_1A3A4AC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, char *, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  int v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  _QWORD *v87;
  void (*v88)(uint64_t, uint64_t);
  size_t v89;
  uint64_t v90;
  _QWORD *v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  uint64_t v94;
  uint64_t result;
  char v96;
  uint64_t v97;
  int64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  __int128 v111;
  _QWORD *v112;
  int64_t v113;
  unint64_t v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;

  v103 = sub_1A3AB4520();
  v101 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v100 = (char *)&v97 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v2);
  v102 = (char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A3AB4538();
  v104 = *(_QWORD *)(v4 - 8);
  v105 = v4;
  MEMORY[0x1E0C80A78](v4);
  v107 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB4424();
  v7 = *(_QWORD **)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v99 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v106 = (uint64_t)&v97 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v117 = (char *)&v97 - v13;
  MEMORY[0x1E0C80A78](v12);
  v115 = (char *)&v97 - v14;
  v15 = sub_1A39A4820(&qword_1EE6D2510);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v97 - v20;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 88))(v19);
  v113 = 0;
  v23 = *(_QWORD *)(v22 + 64);
  v108 = v22 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & v23;
  v109 = (unint64_t)(v24 + 63) >> 6;
  v110 = v22;
  v98 = v109 - 1;
  v116 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v111 = xmmword_1A3ABF990;
  v112 = v7;
  while (1)
  {
    if (v26)
    {
      v29 = __clz(__rbit64(v26));
      v30 = (v26 - 1) & v26;
      v31 = v29 | (v113 << 6);
LABEL_8:
      v32 = v110;
      v33 = v7[9] * v31;
      v34 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      v34(v18, *(_QWORD *)(v110 + 48) + v33, v6);
      v35 = *(_QWORD *)(v32 + 56) + v33;
      v36 = sub_1A39A4820(&qword_1EE6D2508);
      v34(&v18[*(int *)(v36 + 48)], v35, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v18, 0, 1, v36);
      goto LABEL_27;
    }
    v37 = v113 + 1;
    if (__OFADD__(v113, 1))
      goto LABEL_65;
    if (v37 < v109)
    {
      v38 = *(_QWORD *)(v108 + 8 * v37);
      if (v38)
        goto LABEL_12;
      v39 = v113 + 2;
      ++v113;
      if (v37 + 1 < v109)
      {
        v38 = *(_QWORD *)(v108 + 8 * v39);
        if (v38)
          goto LABEL_15;
        v113 = v37 + 1;
        if (v37 + 2 < v109)
        {
          v38 = *(_QWORD *)(v108 + 8 * (v37 + 2));
          if (v38)
          {
            v37 += 2;
LABEL_12:
            v30 = (v38 - 1) & v38;
            v31 = __clz(__rbit64(v38)) + (v37 << 6);
            v113 = v37;
            goto LABEL_8;
          }
          v39 = v37 + 3;
          v113 = v37 + 2;
          if (v37 + 3 < v109)
          {
            v38 = *(_QWORD *)(v108 + 8 * v39);
            if (!v38)
            {
              while (1)
              {
                v37 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_66;
                if (v37 >= v109)
                {
                  v113 = v98;
                  goto LABEL_26;
                }
                v38 = *(_QWORD *)(v108 + 8 * v37);
                ++v39;
                if (v38)
                  goto LABEL_12;
              }
            }
LABEL_15:
            v37 = v39;
            goto LABEL_12;
          }
        }
      }
    }
LABEL_26:
    v40 = sub_1A39A4820(&qword_1EE6D2508);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v18, 1, 1, v40);
    v30 = 0;
LABEL_27:
    sub_1A3A4BB4C((uint64_t)v18, (uint64_t)v21);
    v41 = sub_1A39A4820(&qword_1EE6D2508);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v21, 1, v41) == 1)
    {
      swift_release();
      v68 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
      v69 = objc_msgSend(v68, sel_languageCode);

      if (!v69)
        return (uint64_t)v116;
      v70 = sub_1A3AB497C();
      v72 = v71;

      swift_bridgeObjectRetain();
      sub_1A3AB4448();
      v73 = v100;
      sub_1A3AB452C();
      v74 = (uint64_t)v102;
      sub_1A3AB44FC();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v73, v103);
      v75 = v112;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v112[6])(v74, 1, v6) == 1)
      {
        sub_1A3A4BB94(v74);
      }
      else
      {
        v77 = sub_1A3AB43F4();
        v78 = v74;
        v79 = v77;
        v81 = v80;
        ((void (*)(uint64_t, uint64_t))v75[1])(v78, v6);
        if (v79 == 6649209 && v81 == 0xE300000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
        v83 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        if ((v83 & 1) != 0)
          goto LABEL_50;
      }
      if (v70 != 0x4B482D687ALL || v72 != 0xE500000000000000)
      {
        v82 = sub_1A3AB5654();
        v76 = v116;
        if ((v82 & 1) != 0 || v70 == 0x4B485F687ALL && v72 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v96 = sub_1A3AB5654();
          swift_bridgeObjectRelease();
          if ((v96 & 1) == 0)
          {
LABEL_59:
            (*(void (**)(char *, uint64_t))(v104 + 8))(v107, v105);
            return (uint64_t)v76;
          }
        }
LABEL_54:
        sub_1A3AB4418();
        v84 = (uint64_t)v99;
        sub_1A3AB4418();
        if (v76[2] && (v85 = sub_1A39BC700(v84), (v86 & 1) != 0))
        {
          v87 = *(_QWORD **)(v76[7] + 8 * v85);
          swift_bridgeObjectRetain();
        }
        else
        {
          v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        v88 = (void (*)(uint64_t, uint64_t))v112[1];
        v88(v84, v6);
        sub_1A39A4820(&qword_1EE6D2BB0);
        type metadata accessor for TTSMacroLanguageDisambiguationMapping();
        v89 = swift_allocObject();
        *(_OWORD *)(v89 + 16) = v111;
        sub_1A3AB4418();
        swift_storeEnumTagMultiPayload();
        v118 = v87;
        sub_1A39BE20C(v89);
        v90 = (uint64_t)v118;
        v91 = v116;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v118 = v91;
        v93 = v90;
        v94 = v106;
        sub_1A3A4B9F0(v93, v106, isUniquelyReferenced_nonNull_native);
        v76 = v118;
        swift_bridgeObjectRelease();
        v88(v94, v6);
        goto LABEL_59;
      }
LABEL_50:
      swift_bridgeObjectRelease();
      v76 = v116;
      goto LABEL_54;
    }
    v114 = v30;
    v42 = v18;
    v43 = &v21[*(int *)(v41 + 48)];
    v44 = (void (*)(char *, char *, uint64_t))v7[4];
    v45 = v115;
    v44(v115, v43, v6);
    v46 = (uint64_t)v117;
    v47 = v21;
    v44(v117, v21, v6);
    sub_1A39A4820(&qword_1EE6D2BB0);
    v48 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TTSMacroLanguageDisambiguationMapping() - 8) + 80);
    v49 = (v48 + 32) & ~v48;
    v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = v111;
    v51 = v50 + v49;
    v52 = (void (*)(uint64_t, char *, uint64_t))v7[2];
    v53 = v6;
    v52(v51, v45, v6);
    swift_storeEnumTagMultiPayload();
    v54 = v116;
    v55 = swift_isUniquelyReferenced_nonNull_native();
    v118 = v54;
    v57 = sub_1A39BC700(v46);
    v58 = v54[2];
    v59 = (v56 & 1) == 0;
    v60 = v58 + v59;
    if (__OFADD__(v58, v59))
      break;
    v61 = v56;
    if (v54[3] >= v60)
    {
      if ((v55 & 1) == 0)
        sub_1A3A4BC6C();
    }
    else
    {
      sub_1A3A4B658(v60, v55);
      v62 = sub_1A39BC700((uint64_t)v117);
      if ((v61 & 1) != (v63 & 1))
        goto LABEL_67;
      v57 = v62;
    }
    v6 = v53;
    v64 = v118;
    v7 = v112;
    v116 = v118;
    if ((v61 & 1) != 0)
    {
      v27 = v118[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v27 + 8 * v57) = v50;
    }
    else
    {
      v118[(v57 >> 6) + 8] |= 1 << v57;
      v52(v64[6] + v7[9] * v57, v117, v6);
      *(_QWORD *)(v64[7] + 8 * v57) = v50;
      v65 = v64[2];
      v66 = __OFADD__(v65, 1);
      v67 = v65 + 1;
      if (v66)
        goto LABEL_64;
      v64[2] = v67;
    }
    swift_bridgeObjectRelease();
    v28 = (void (*)(uint64_t, uint64_t))v7[1];
    v28((uint64_t)v117, v6);
    v28((uint64_t)v115, v6);
    v18 = v42;
    v21 = v47;
    v26 = v114;
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  result = sub_1A3AB5678();
  __break(1u);
  return result;
}

uint64_t TTSSettings.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TTSSettings.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t sub_1A3A4B60C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D2568;
  if (!qword_1EE6D2568)
  {
    v1 = sub_1A39AB624(&qword_1EE6D2560);
    result = MEMORY[0x1A8597738](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D2568);
  }
  return result;
}

uint64_t sub_1A3A4B658(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_1A3AB4424();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_1A39A4820(&qword_1EE6D2BC8);
  v42 = a2;
  v10 = sub_1A3AB5498();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
    }
    sub_1A39D4188(&qword_1EE6D2348, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
    result = sub_1A3AB48C8();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1A3A4B9F0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_1A3AB4424();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1A39BC700(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1A3A4BC6C();
    goto LABEL_7;
  }
  sub_1A3A4B658(v17, a3 & 1);
  v23 = sub_1A39BC700(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_1A3AB5678();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1A3A4BBD4(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1A3A4BB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A4BB94(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1A39A4820(&qword_1ED1B52F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A3A4BBD4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1A3AB4424();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void *sub_1A3A4BC6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_1A3AB4424();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1A39A4820(&qword_1EE6D2BC8);
  v24 = v0;
  v5 = *v0;
  v6 = sub_1A3AB548C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1A3A4BE9C(uint64_t a1, uint64_t a2)
{
  return sub_1A39D4188(&qword_1EE6D4110, a2, (uint64_t (*)(uint64_t))type metadata accessor for TTSSettings, (uint64_t)&protocol conformance descriptor for TTSSettings);
}

uint64_t type metadata accessor for TTSSettings()
{
  return objc_opt_self();
}

uint64_t method lookup function for TTSSettings()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSSettings.macroLanguageDisambiguations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of TTSSettings.macroLanguageDisambiguations.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of TTSSettings.macroLanguageDisambiguations.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of TTSSettings.$macroLanguageDisambiguations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of TTSSettings.languageDisambiguations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1A3A4BF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1EE6D2518);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CoreSynthesizer.speak(request:synthesizer:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[5];

  v26[0] = a3;
  v7 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v26 - v11;
  v13 = sub_1A3A63914();
  swift_beginAccess();
  v14 = *v13;
  v15 = sub_1A3AB4D00();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, 1, 1, v15);
  v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v26[0];
  v18[3] = a4;
  v18[4] = v4;
  v18[5] = a1;
  v18[6] = v17;
  v19 = (uint64_t)v12;
  v20 = v14;
  sub_1A39D89E8(v19, (uint64_t)v10);
  LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v10, 1, v15);
  swift_retain();
  swift_retain();
  v21 = v4;
  v22 = a1;
  if ((_DWORD)v14 == 1)
  {
    sub_1A39D4F2C((uint64_t)v10);
  }
  else
  {
    sub_1A3AB4CF4();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v15);
  }
  v23 = sub_1A3A4E204();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = &unk_1EE6D4128;
  *(_QWORD *)(v24 + 24) = v18;
  v26[1] = 6;
  v26[2] = 0;
  v26[3] = v20;
  v26[4] = v23;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1A3A4C184()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1A3A4C1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[90] = a6;
  v6[89] = a5;
  v6[88] = a4;
  v6[87] = a3;
  v6[86] = a2;
  v7 = sub_1A39A4820((uint64_t *)&unk_1EE6D4070);
  v6[91] = v7;
  v6[92] = *(_QWORD *)(v7 - 8);
  v6[93] = swift_task_alloc();
  v8 = sub_1A39A4820((uint64_t *)&unk_1EE6D30D0);
  v6[94] = v8;
  v6[95] = *(_QWORD *)(v8 - 8);
  v6[96] = swift_task_alloc();
  return swift_task_switch();
}

id sub_1A3A4C248()
{
  uint64_t v0;
  id result;
  void *v2;
  _QWORD *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  result = objc_msgSend(*(id *)(v0 + 712), sel_voice);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD **)(v0 + 704);
    v4 = objc_msgSend(result, sel_identifier);

    v5 = sub_1A3AB497C();
    v7 = v6;

    *(_QWORD *)(v0 + 776) = v7;
    v8 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x400);
    *(_QWORD *)(v0 + 784) = v8;
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 792) = v9;
    *v9 = v0;
    v9[1] = sub_1A3A4C33C;
    return (id)v10(v0 + 328, v5, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1A3A4C33C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

id sub_1A3A4C39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id result;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  unsigned __int8 v24;
  char **v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  double v30;
  double v31;
  double v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void *v68;
  int *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  id v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned int v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int16 v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  int v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138[17];

  v1 = *(_QWORD *)(v0 + 336);
  if (!v1)
  {
    result = objc_msgSend(*(id *)(v0 + 712), sel_voice);
    if (result)
    {
      v61 = result;
      v62 = objc_msgSend(result, sel_identifier);

      v63 = sub_1A3AB497C();
      v65 = v64;

      *(_QWORD *)(v0 + 592) = v63;
      *(_QWORD *)(v0 + 600) = v65;
      *(_QWORD *)(v0 + 608) = sub_1A3AB497C();
      *(_QWORD *)(v0 + 616) = v66;
      sub_1A39A9EC0();
      v67 = sub_1A3AB5198();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = objc_msgSend(*(id *)(v0 + 712), sel_voice);
      v68 = result;
      if ((v67 & 1) == 0)
      {
        if (result)
        {
          v88 = objc_msgSend(result, sel_identifier);

          v89 = sub_1A3AB497C();
          v91 = v90;

          sub_1A3A4E8EC();
          v92 = (void *)swift_allocError();
          *v93 = v89;
          v93[1] = v91;
          swift_willThrow();
          sub_1A39A2EB8(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(void **)(v0 + 408));
          v94 = *(_QWORD *)(v0 + 720) + 16;
          swift_beginAccess();
          v95 = MEMORY[0x1A85978E8](v94);
          if (v95)
          {
            v96 = (void *)v95;
            v97 = *(_QWORD *)(v0 + 712);
            v98 = (void *)sub_1A3AB42B0();
            objc_msgSend(v96, sel_speechRequest_didStopWithSuccess_phonemesSpoken_forService_error_, v97, 0, 0, 0, v98);

          }
          else
          {

          }
          (*(void (**)(void))(v0 + 688))();
          swift_task_dealloc();
          swift_task_dealloc();
          return (id)(*(uint64_t (**)(void))(v0 + 8))();
        }
LABEL_36:
        __break(1u);
        return result;
      }
      if (result)
      {
        v69 = *(int **)(v0 + 784);
        v70 = objc_msgSend(result, sel_identifier);

        v71 = sub_1A3AB497C();
        v73 = v72;

        *(_QWORD *)(v0 + 624) = v71;
        *(_QWORD *)(v0 + 632) = v73;
        *(_QWORD *)(v0 + 640) = sub_1A3AB497C();
        *(_QWORD *)(v0 + 648) = v74;
        *(_QWORD *)(v0 + 656) = sub_1A3AB497C();
        *(_QWORD *)(v0 + 664) = v75;
        v76 = sub_1A3AB5174();
        v78 = v77;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 800) = v78;
        v121 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v69 + *v69);
        v79 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 808) = v79;
        *v79 = v0;
        v79[1] = sub_1A3A4CE8C;
        return (id)v121(v0 + 224, v76, v78);
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  v2 = *(unsigned __int8 *)(v0 + 428);
  v3 = *(unsigned int *)(v0 + 424);
  v4 = *(void **)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 328);
  v120 = *(_QWORD *)(v0 + 416);
  v122 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 912) = v120;
  *(_QWORD *)(v0 + 904) = v4;
  *(_QWORD *)(v0 + 896) = v5;
  *(_QWORD *)(v0 + 888) = v6;
  v117 = v8;
  v118 = v7;
  *(_QWORD *)(v0 + 880) = v7;
  *(_QWORD *)(v0 + 872) = v122;
  *(_QWORD *)(v0 + 864) = v8;
  *(_QWORD *)(v0 + 856) = v9;
  v119 = v10;
  *(_QWORD *)(v0 + 848) = v10;
  *(_QWORD *)(v0 + 840) = v11;
  *(_QWORD *)(v0 + 832) = v1;
  v114 = v2;
  v116 = v12;
  *(_QWORD *)(v0 + 824) = v12;
  *(_BYTE *)(v0 + 820) = v2;
  v112 = v3;
  *(_DWORD *)(v0 + 816) = v3;
  v13 = *(void **)(v0 + 712);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v4;
  result = objc_msgSend(v13, sel_speechString);
  if (!result)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v16 = result;
  v106 = v14;
  v107 = v4;
  v108 = v11;
  v109 = v9;
  v111 = v5;
  v17 = objc_msgSend(result, sel_transformedString);

  v18 = v17;
  if (!v17)
  {
    sub_1A3AB497C();
    v18 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
  }
  v110 = v6;
  v19 = sub_1A3AB497C();
  v21 = v20;
  v22 = (void *)objc_opt_self();
  v23 = objc_msgSend(v22, sel_shared);
  v24 = objc_msgSend(v23, sel_isSSMLValid_, v18);

  v25 = &selRef_isActive;
  if ((v24 & 1) == 0)
  {
    v26 = *(void **)(v0 + 712);
    v27 = objc_allocWithZone(MEMORY[0x1E0C89BA0]);
    swift_bridgeObjectRetain();
    v28 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(v27, sel_initWithString_, v28);

    objc_msgSend(v26, sel_rate);
    *(float *)&v30 = v30;
    objc_msgSend(v29, sel_setRate_, v30);
    objc_msgSend(v26, sel_volume);
    *(float *)&v31 = v31;
    objc_msgSend(v29, sel_setVolume_, v31);
    objc_msgSend(v26, sel_pitch);
    *(float *)&v32 = v32;
    objc_msgSend(v29, sel_setPitchMultiplier_, v32);
    v33 = objc_msgSend(v22, sel_shared);
    v34 = objc_msgSend(v33, sel_generateSSMLFromAVSpeechUtterance_, v29);

    v35 = objc_msgSend(v34, sel_ssmlResult);
    v36 = sub_1A3AB497C();
    v38 = v37;

    v123 = v19;
    v124 = v21;
    v125 = v36;
    v126 = v38;
    v127 = 0u;
    v128 = 0u;
    LOBYTE(v129) = 1;
    swift_bridgeObjectRetain();
    result = objc_msgSend(v26, sel_jobIdentifier);
    if (!result)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v39 = result;
    v40 = sub_1A3AB497C();
    v42 = v41;

    v43._countAndFlagsBits = v40;
    v43._object = v42;
    TTSSpeechEvent.emit(forJob:)(v43);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = &selRef_isActive;
  }
  v44 = *(void **)(v0 + 712);
  v45 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 920) = v45;
  v46 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  v47 = objc_msgSend(v45, sel_unescapeDelimeterBoundedSSMLInString_, v46);

  objc_msgSend(v44, sel_setUnescapedSpeechString_, v47);
  result = objc_msgSend(v44, sel_unescapedSpeechString);
  if (!result)
    goto LABEL_32;
  v48 = result;
  v49 = v112 | (v114 << 32);
  v50 = *(_QWORD *)(v0 + 720) + 16;
  v51 = objc_msgSend(result, sel_transformedString);

  v52 = sub_1A3AB497C();
  v113 = v53;
  v115 = v52;

  swift_beginAccess();
  v54 = (void *)MEMORY[0x1A85978E8](v50);
  if (v54)
  {
    v55 = v54;
    objc_msgSend(v54, sel_speechRequestDidStart_forService_, *(_QWORD *)(v0 + 712), 0);

  }
  v56 = objc_msgSend(*(id *)(v0 + 712), v25[35]);
  v105 = v0 + 16;
  if (v56)
  {
    v57 = v56;
    v58 = sub_1A3AB497C();
    v60 = v59;

  }
  else
  {
    v58 = 0;
    v60 = 0;
  }
  v80 = *(void **)(v0 + 712);
  v123 = v116;
  v124 = v1;
  v125 = v108;
  v126 = v119;
  *(_QWORD *)&v127 = v109;
  *((_QWORD *)&v127 + 1) = v117;
  *(_QWORD *)&v128 = v122;
  *((_QWORD *)&v128 + 1) = v118;
  v129 = v110;
  v130 = v111;
  v131 = v107;
  v132 = v120 & 0x1FFFFFFFFLL;
  v134 = BYTE4(v49) & 1;
  v133 = v49;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v81 = v106;
  v82 = sub_1A39A08A8();
  sub_1A39A08B0(&v135);
  v136 = v135;
  sub_1A39A08B0(&v137);
  v138[0] = v137;
  CoreSynthesizer.Utterance.init(id:ssml:voice:priority:behavior:isoPrioritizedBehavior:)(v58, v60, v115, v113, (uint64_t)&v123, v82, &v136, v138, v105);
  v83 = objc_msgSend(v80, sel_voiceSettings);
  if (v83)
  {
    v84 = v83;
    sub_1A39AE734();
    v85 = sub_1A3AB4874();

    v86 = sub_1A3A4E24C(v85);
    swift_bridgeObjectRelease();
    if (v86[2])
    {
      sub_1A39A4820(&qword_1EE6D3898);
      v87 = sub_1A3AB54B0();
    }
    else
    {
      v87 = MEMORY[0x1E0DEE9E0];
    }
    v123 = v87;
    v99 = swift_bridgeObjectRetain();
    sub_1A3A4E56C(v99, 1, &v123);
    swift_bridgeObjectRelease();
    v100 = v123;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = v100;
  }
  v101 = *(_QWORD **)(v0 + 704);
  v102 = objc_msgSend(*(id *)(v0 + 712), sel_synthesizeSilently);
  v103 = 1040;
  if (v102)
    v103 = 1064;
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v101) + v103))(v105);
  sub_1A3AB4D6C();
  swift_beginAccess();
  v104 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 928) = v104;
  *v104 = v0;
  v104[1] = sub_1A3A4D83C;
  return (id)sub_1A3AB4E80();
}

uint64_t sub_1A3A4CE8C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

id sub_1A3A4CEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id result;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  unsigned __int8 v26;
  char **v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  double v32;
  double v33;
  double v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  id v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unsigned int v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  unsigned __int16 v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  int v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118[17];

  sub_1A39A2EB8(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(void **)(v0 + 408));
  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 296);
  v12 = *(void **)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 312);
  v13 = *(unsigned __int8 *)(v0 + 324);
  v14 = *(unsigned int *)(v0 + 320);
  *(_QWORD *)(v0 + 328) = v2;
  *(_QWORD *)(v0 + 336) = v1;
  *(_QWORD *)(v0 + 344) = v4;
  *(_QWORD *)(v0 + 352) = v3;
  *(_QWORD *)(v0 + 360) = v6;
  *(_QWORD *)(v0 + 368) = v5;
  *(_QWORD *)(v0 + 376) = v7;
  *(_QWORD *)(v0 + 384) = v8;
  *(_QWORD *)(v0 + 392) = v10;
  *(_QWORD *)(v0 + 400) = v9;
  *(_QWORD *)(v0 + 408) = v12;
  *(_QWORD *)(v0 + 416) = v11;
  *(_BYTE *)(v0 + 428) = v13;
  *(_DWORD *)(v0 + 424) = v14;
  if (!v1)
  {
    result = objc_msgSend(*(id *)(v0 + 712), sel_voice);
    if (result)
    {
      v62 = result;
      v63 = objc_msgSend(result, sel_identifier);

      v64 = sub_1A3AB497C();
      v66 = v65;

      sub_1A3A4E8EC();
      v67 = (void *)swift_allocError();
      *v68 = v64;
      v68[1] = v66;
      swift_willThrow();
      sub_1A39A2EB8(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(void **)(v0 + 408));
      v69 = *(_QWORD *)(v0 + 720) + 16;
      swift_beginAccess();
      v70 = MEMORY[0x1A85978E8](v69);
      if (v70)
      {
        v71 = (void *)v70;
        v72 = *(_QWORD *)(v0 + 712);
        v73 = (void *)sub_1A3AB42B0();
        objc_msgSend(v71, sel_speechRequest_didStopWithSuccess_phonemesSpoken_forService_error_, v72, 0, 0, 0, v73);

      }
      else
      {

      }
      (*(void (**)(void))(v0 + 688))();
      swift_task_dealloc();
      swift_task_dealloc();
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
    goto LABEL_29;
  }
  v96 = v11;
  v97 = v8;
  *(_QWORD *)(v0 + 912) = v11;
  *(_QWORD *)(v0 + 904) = v12;
  v15 = v14 | (v13 << 32);
  *(_QWORD *)(v0 + 896) = v9;
  *(_QWORD *)(v0 + 888) = v10;
  *(_QWORD *)(v0 + 880) = v8;
  v100 = v7;
  v101 = v3;
  *(_QWORD *)(v0 + 872) = v7;
  v98 = v5;
  *(_QWORD *)(v0 + 864) = v5;
  *(_QWORD *)(v0 + 856) = v6;
  *(_QWORD *)(v0 + 848) = v3;
  *(_QWORD *)(v0 + 840) = v4;
  *(_QWORD *)(v0 + 832) = v1;
  *(_QWORD *)(v0 + 824) = v2;
  *(_DWORD *)(v0 + 816) = v15;
  v95 = v15;
  *(_BYTE *)(v0 + 820) = BYTE4(v15);
  v16 = *(void **)(v0 + 712);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v99 = v12;
  v94 = v12;
  result = objc_msgSend(v16, sel_speechString);
  if (!result)
  {
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v18 = result;
  v89 = v2;
  v90 = v4;
  v91 = v10;
  v93 = v9;
  v19 = objc_msgSend(result, sel_transformedString);

  v20 = v19;
  if (!v19)
  {
    sub_1A3AB497C();
    v20 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
  }
  v92 = v6;
  v21 = sub_1A3AB497C();
  v23 = v22;
  v24 = (void *)objc_opt_self();
  v25 = objc_msgSend(v24, sel_shared);
  v26 = objc_msgSend(v25, sel_isSSMLValid_, v20);

  v27 = &selRef_isActive;
  if ((v26 & 1) == 0)
  {
    v28 = *(void **)(v0 + 712);
    v29 = objc_allocWithZone(MEMORY[0x1E0C89BA0]);
    swift_bridgeObjectRetain();
    v30 = (void *)sub_1A3AB4958();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v29, sel_initWithString_, v30);

    objc_msgSend(v28, sel_rate);
    *(float *)&v32 = v32;
    objc_msgSend(v31, sel_setRate_, v32);
    objc_msgSend(v28, sel_volume);
    *(float *)&v33 = v33;
    objc_msgSend(v31, sel_setVolume_, v33);
    objc_msgSend(v28, sel_pitch);
    *(float *)&v34 = v34;
    objc_msgSend(v31, sel_setPitchMultiplier_, v34);
    v35 = objc_msgSend(v24, sel_shared);
    v36 = objc_msgSend(v35, sel_generateSSMLFromAVSpeechUtterance_, v31);

    v37 = objc_msgSend(v36, sel_ssmlResult);
    v38 = sub_1A3AB497C();
    v40 = v39;

    v103 = v21;
    v104 = v23;
    v105 = v38;
    v106 = v40;
    v107 = 0u;
    v108 = 0u;
    LOBYTE(v109) = 1;
    swift_bridgeObjectRetain();
    result = objc_msgSend(v28, sel_jobIdentifier);
    if (!result)
    {
LABEL_30:
      __break(1u);
      return result;
    }
    v41 = result;
    v42 = sub_1A3AB497C();
    v44 = v43;

    v45._countAndFlagsBits = v42;
    v45._object = v44;
    TTSSpeechEvent.emit(forJob:)(v45);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = &selRef_isActive;
  }
  v46 = *(void **)(v0 + 712);
  v47 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 920) = v47;
  v48 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  v49 = objc_msgSend(v47, sel_unescapeDelimeterBoundedSSMLInString_, v48);

  objc_msgSend(v46, sel_setUnescapedSpeechString_, v49);
  result = objc_msgSend(v46, sel_unescapedSpeechString);
  if (!result)
    goto LABEL_28;
  v50 = result;
  v102 = v0 + 16;
  v51 = *(_QWORD *)(v0 + 720) + 16;
  v52 = objc_msgSend(result, sel_transformedString);

  v88 = sub_1A3AB497C();
  v54 = v53;

  swift_beginAccess();
  v55 = (void *)MEMORY[0x1A85978E8](v51);
  if (v55)
  {
    v56 = v55;
    objc_msgSend(v55, sel_speechRequestDidStart_forService_, *(_QWORD *)(v0 + 712), 0);

  }
  v57 = objc_msgSend(*(id *)(v0 + 712), v27[35]);
  if (v57)
  {
    v58 = v57;
    v59 = sub_1A3AB497C();
    v61 = v60;

  }
  else
  {
    v59 = 0;
    v61 = 0;
  }
  v74 = *(void **)(v0 + 712);
  v103 = v89;
  v104 = v1;
  v105 = v90;
  v106 = v101;
  *(_QWORD *)&v107 = v92;
  *((_QWORD *)&v107 + 1) = v98;
  *(_QWORD *)&v108 = v100;
  *((_QWORD *)&v108 + 1) = v97;
  v109 = v91;
  v110 = v93;
  v111 = v99;
  v112 = v96 & 0x1FFFFFFFFLL;
  v114 = BYTE4(v95) & 1;
  v113 = v95;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75 = v94;
  v76 = sub_1A39A08A8();
  sub_1A39A08B0(&v115);
  v116 = v115;
  sub_1A39A08B0(&v117);
  v118[0] = v117;
  CoreSynthesizer.Utterance.init(id:ssml:voice:priority:behavior:isoPrioritizedBehavior:)(v59, v61, v88, v54, (uint64_t)&v103, v76, &v116, v118, v102);
  v77 = objc_msgSend(v74, sel_voiceSettings);
  if (v77)
  {
    v78 = v77;
    sub_1A39AE734();
    v79 = sub_1A3AB4874();

    v80 = sub_1A3A4E24C(v79);
    swift_bridgeObjectRelease();
    if (v80[2])
    {
      sub_1A39A4820(&qword_1EE6D3898);
      v81 = sub_1A3AB54B0();
    }
    else
    {
      v81 = MEMORY[0x1E0DEE9E0];
    }
    v103 = v81;
    v82 = swift_bridgeObjectRetain();
    sub_1A3A4E56C(v82, 1, &v103);
    swift_bridgeObjectRelease();
    v83 = v103;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = v83;
  }
  v84 = *(_QWORD **)(v0 + 704);
  v85 = objc_msgSend(*(id *)(v0 + 712), sel_synthesizeSilently);
  v86 = 1040;
  if (v85)
    v86 = 1064;
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v84) + v86))(v102);
  sub_1A3AB4D6C();
  swift_beginAccess();
  v87 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 928) = v87;
  *v87 = v0;
  v87[1] = sub_1A3A4D83C;
  return (id)sub_1A3AB4E80();
}

uint64_t sub_1A3A4D83C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 968) = 0;
  else
    *(_QWORD *)(v2 + 936) = 0;
  return swift_task_switch();
}

uint64_t sub_1A3A4D8A4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void (**v15)(_QWORD, _QWORD);
  void *v16;
  _QWORD *v17;
  uint64_t (*v18)();
  id v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void (*v34)(void);
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 480);
  if (v1 >> 3 != 0xFFFFFFFF)
  {
    v11 = *(void **)(v0 + 464);
    v10 = *(_QWORD *)(v0 + 472);
    v12 = *(_QWORD *)(v0 + 488);
    if (v1 >> 61 == 1)
    {
      v28 = *(void **)(v0 + 920);
      v29 = *(_QWORD *)(v0 + 712);
      *(_QWORD *)(v0 + 432) = v11;
      *(_QWORD *)(v0 + 440) = v10;
      *(_BYTE *)(v0 + 448) = v1;
      *(_QWORD *)(v0 + 456) = v12;
      sub_1A3A46754(v0 + 432);
      v31 = v30;
      v32 = objc_msgSend(v28, sel_ttsMarkerForSSEMarker_forRequest_, v30, v29);
      v33 = v32;
      if (v32 && objc_msgSend(v32, sel_markType) == (id)1)
      {
        v34 = (void (*)(void))(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 704)) + 0x480))();
        if (v34)
        {
          v35 = (uint64_t)v34;
          v34();
          sub_1A39E9ED0(v35);
        }
        (*(void (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 704)) + 0x488))(0, 0);
      }
      v36 = (void *)MEMORY[0x1A85978E8](*(_QWORD *)(v0 + 720) + 16);
      if (v36)
      {
        v37 = v36;
        objc_msgSend(v36, sel_speechRequest_withMarker_didStartForService_, *(_QWORD *)(v0 + 712), v33, 0);
        swift_unknownObjectRelease();

        sub_1A3A491C8(v11, v10, v1);
      }
      else
      {
        swift_unknownObjectRelease();

        sub_1A3A491C8(v11, v10, v1);
      }
    }
    else
    {
      if (v1 >> 61 == 2)
      {
        v13 = *(void **)(v0 + 712);
        sub_1A39EB370(*(id *)(v0 + 464), *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480));
        v14 = objc_msgSend(v13, sel_audioBufferCallback);
        if (v14)
        {
          v15 = (void (**)(_QWORD, _QWORD))v14;
          v16 = *(void **)(v0 + 936);
          *(_QWORD *)(v0 + 944) = objc_msgSend(v11, sel_format);

          ((void (**)(_QWORD, void *))v15)[2](v15, v11);
          sub_1A3A491C8(v11, v10, v1);
          sub_1A3A491C8(v11, v10, v1);
          _Block_release(v15);
          v17 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 952) = v17;
          v18 = sub_1A3A4DEB8;
LABEL_26:
          *v17 = v0;
          v17[1] = v18;
          return sub_1A3AB4E80();
        }
        sub_1A3A491C8(v11, v10, v1);
      }
      sub_1A3A491C8(v11, v10, v1);
    }
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 960) = v17;
    v18 = sub_1A3A4DF28;
    goto LABEL_26;
  }
  v2 = *(_QWORD *)(v0 + 720) + 16;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 736) + 8))(*(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 728));
  swift_beginAccess();
  v3 = (void *)MEMORY[0x1A85978E8](v2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_speechRequest_didStopWithSuccess_phonemesSpoken_forService_error_, *(_QWORD *)(v0 + 712), 1, 0, 0, 0);

  }
  if ((TTSSpeechUnitTestingMode() & 1) != 0)
  {
    v5 = *(void **)(v0 + 936);
    v6 = *(_QWORD *)(v0 + 768);
    v7 = *(_QWORD *)(v0 + 760);
    v8 = *(_QWORD *)(v0 + 752);
    sub_1A39A2EB8(*(_QWORD *)(v0 + 824), *(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(void **)(v0 + 904));

    v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  }
  else
  {
    v19 = objc_msgSend(*(id *)(v0 + 712), sel_audioBufferCallback);
    v20 = *(void **)(v0 + 936);
    if (v19)
    {
      v21 = (void (**)(_QWORD, _QWORD))v19;
      v22 = *(void **)(v0 + 904);
      v23 = *(_QWORD *)(v0 + 880);
      v56 = *(_QWORD *)(v0 + 760);
      v57 = *(_QWORD *)(v0 + 768);
      v55 = *(_QWORD *)(v0 + 752);
      v53 = *(_QWORD *)(v0 + 864);
      v54 = *(_QWORD *)(v0 + 872);
      v51 = *(_QWORD *)(v0 + 824);
      v52 = *(_QWORD *)(v0 + 856);
      v49 = *(_QWORD *)(v0 + 840);
      v50 = *(_QWORD *)(v0 + 848);
      if (v20)
      {
        v46 = *(_QWORD *)(v0 + 888);
        v47 = *(_QWORD *)(v0 + 832);
        v24 = *(_QWORD *)(v0 + 896);
        v48 = *(_QWORD *)(v0 + 880);
        v25 = objc_allocWithZone(MEMORY[0x1E0C89AB8]);
        v26 = v20;
        v27 = objc_msgSend(v25, sel_initWithPCMFormat_frameCapacity_, v26, 0);
        ((void (**)(_QWORD, id))v21)[2](v21, v27);

        _Block_release(v21);
        sub_1A39A2EB8(v51, v47, v49, v50, v52, v53, v54, v48, v46, v24, v22);

      }
      else
      {
        v42 = *(_QWORD *)(v0 + 888);
        v43 = *(_QWORD *)(v0 + 896);
        v44 = *(_QWORD *)(v0 + 832);
        _Block_release(v19);
        sub_1A39A2EB8(v51, v44, v49, v50, v52, v53, v54, v23, v42, v43, v22);
      }
      v39 = v57;
      v9 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v40 = v55;
      goto LABEL_29;
    }
    v6 = *(_QWORD *)(v0 + 768);
    v38 = *(_QWORD *)(v0 + 760);
    v8 = *(_QWORD *)(v0 + 752);
    sub_1A39A2EB8(*(_QWORD *)(v0 + 824), *(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(void **)(v0 + 904));

    v9 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  }
  v39 = v6;
  v40 = v8;
LABEL_29:
  v9(v39, v40);
  sub_1A39A2EB8(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(void **)(v0 + 408));
  v45 = sub_1A39EA7E4(v0 + 16);
  (*(void (**)(uint64_t))(v0 + 688))(v45);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A4DEB8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
    v2[121] = v2[118];
  else
    v2[117] = v2[118];
  return swift_task_switch();
}

uint64_t sub_1A3A4DF28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 968) = *(_QWORD *)(v2 + 936);
  return swift_task_switch();
}

uint64_t sub_1A3A4DF90()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v1 = *(void **)(v0 + 968);
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 752);
  v5 = *(_QWORD *)(v0 + 744);
  v6 = *(_QWORD *)(v0 + 736);
  v7 = *(_QWORD *)(v0 + 728);
  sub_1A39A2EB8(*(_QWORD *)(v0 + 824), *(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896), *(void **)(v0 + 904));

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1A39A2EB8(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), *(void **)(v0 + 408));
  v8 = *(void **)(v0 + 672);
  sub_1A39EA7E4(v0 + 16);
  v9 = *(_QWORD *)(v0 + 720) + 16;
  swift_beginAccess();
  v10 = MEMORY[0x1A85978E8](v9);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = *(_QWORD *)(v0 + 712);
    v13 = (void *)sub_1A3AB42B0();
    objc_msgSend(v11, sel_speechRequest_didStopWithSuccess_phonemesSpoken_forService_error_, v12, 0, 0, 0, v13);

  }
  else
  {

  }
  (*(void (**)(void))(v0 + 688))();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A4E154()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A4E190()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_1A39B1604;
  return sub_1A3A4C1A8((uint64_t)v7, v2, v3, v4, v5, v6);
}

unint64_t sub_1A3A4E204()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE6D2540;
  if (!qword_1EE6D2540)
  {
    v1 = type metadata accessor for TTSExecutor();
    result = MEMORY[0x1A8597738](&_s12TextToSpeech11TTSExecutorCSchAAMc, v1);
    atomic_store(result, (unint64_t *)&qword_1EE6D2540);
  }
  return result;
}

id sub_1A3A4E24C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  id result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return (id)v2;
  v29 = MEMORY[0x1E0DEE9D8];
  sub_1A3A4E930(0, v1, 0);
  v2 = v29;
  result = (id)sub_1A39FF4BC(a1);
  v6 = (uint64_t)result;
  v7 = 0;
  v8 = a1 + 64;
  v25 = v1;
  v26 = v5;
  v27 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = v12[1];
    v28 = *v12;
    v14 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v6);
    swift_bridgeObjectRetain();
    result = objc_msgSend(v14, sel_floatValue);
    v16 = v15;
    v18 = *(_QWORD *)(v29 + 16);
    v17 = *(_QWORD *)(v29 + 24);
    if (v18 >= v17 >> 1)
      result = sub_1A3A4E930((_QWORD *)(v17 > 1), v18 + 1, 1);
    *(_QWORD *)(v29 + 16) = v18 + 1;
    v19 = v29 + 24 * v18;
    *(_QWORD *)(v19 + 32) = v28;
    *(_QWORD *)(v19 + 40) = v13;
    *(_DWORD *)(v19 + 48) = v16;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v20 = *(_QWORD *)(v27 + 8 * v11);
    if ((v20 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v26;
    if (*(_DWORD *)(a1 + 36) != v26)
      goto LABEL_27;
    v21 = v20 & (-2 << (v6 & 0x3F));
    if (v21)
    {
      v9 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v25;
    }
    else
    {
      v22 = v11 + 1;
      v23 = (unint64_t)(v9 + 63) >> 6;
      v10 = v25;
      if (v11 + 1 < v23)
      {
        v24 = *(_QWORD *)(v27 + 8 * v22);
        if (v24)
        {
LABEL_20:
          v9 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v11)
          {
            v24 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v24)
            {
              v22 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return (id)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A3A4E518()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1A3A4E53C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1A3A4E560()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_1A3A4E56C(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v12 = sub_1A39A2734(v8, v7);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v10[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1A3A164D0();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v8;
    v22[1] = v7;
    *(_DWORD *)(v21[7] + 4 * v12) = v9;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (_DWORD *)(a1 + 72);
    while (1)
    {
      v29 = *((_QWORD *)v27 - 2);
      v28 = *((_QWORD *)v27 - 1);
      v30 = *v27;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v32 = sub_1A39A2734(v29, v28);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_1A3A15A9C(v36, 1);
        v32 = sub_1A39A2734(v29, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_DWORD *)(v39[7] + 4 * v32) = v30;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v27 += 6;
      v39[2] = v42;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1A3A15A9C(v15, a2 & 1);
  v17 = sub_1A39A2734(v8, v7);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    sub_1A39A4820(&qword_1EE6D09F0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1A3AB5678();
  __break(1u);
LABEL_26:
  sub_1A3AB52AC();
  sub_1A3AB4A84();
  sub_1A3AB53CC();
  sub_1A3AB4A84();
  sub_1A3AB5444();
  __break(1u);
}

unint64_t sub_1A3A4E8EC()
{
  unint64_t result;

  result = qword_1EE6D4138;
  if (!qword_1EE6D4138)
  {
    result = MEMORY[0x1A8597738](&unk_1A3AC16D8, &type metadata for CoreSynthesizer.SynthesisError);
    atomic_store(result, (unint64_t *)&qword_1EE6D4138);
  }
  return result;
}

_QWORD *sub_1A3A4E930(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1A3A4E94C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1A3A4E94C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1A39A4820(&qword_1EE6D4140);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_1A39A4820(&qword_1EE6D4148);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1A3A4EA80@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v4 = sub_1A3AB5084();
  v5 = sub_1A3A4EB5C(v4);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = COERCE_DOUBLE(sub_1A3A4EBC8(v4));
    v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0 && v7 >= a2)
    {
      sub_1A3AB497C();
      sub_1A3AB43C4();

      v10 = sub_1A3AB4538();
      v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
      v12 = a1;
      v13 = 0;
      return v11(v12, v13, 1, v10);
    }

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v10 = sub_1A3AB4538();
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v12 = a1;
  v13 = 1;
  return v11(v12, v13, 1, v10);
}

uint64_t sub_1A3A4EB5C(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  void *v5;
  id v6;

  result = sub_1A3A544BC(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = (void *)sub_1A3A54848(result, v3, 0, a1);
  v6 = v5;
  return (uint64_t)v5;
}

uint64_t sub_1A3A4EBC8(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = sub_1A39FF4BC(a1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  sub_1A3A54468(result, v3, 0, a1);
  return v5;
}

uint64_t type metadata accessor for TTSSegmentGenerator.Segment()
{
  uint64_t result;

  result = qword_1EE6E15A0;
  if (!qword_1EE6E15A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1A3A4EC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1ED1B52F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A4ECC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1A39A4820(&qword_1ED1B52F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A4ED10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3A4ED40(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 152);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A3A4ED70()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A4EDA4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

BOOL static TTSSegmentGenerator.SwitchMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TTSSegmentGenerator.SwitchMode.hash(into:)()
{
  return sub_1A3AB5708();
}

uint64_t TTSSegmentGenerator.SwitchMode.hashValue.getter()
{
  sub_1A3AB56FC();
  sub_1A3AB5708();
  return sub_1A3AB5738();
}

void TTSSegmentGenerator.mode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

uint64_t sub_1A3A4EE74(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 176))(*a1);
}

uint64_t sub_1A3A4EEA0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_1A3A4EED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t TTSSegmentGenerator.__allocating_init(mode:tokenUnit:locales:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = swift_allocObject();
  v8 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *(_QWORD *)v8 = v3;
  *(_QWORD *)(v8 + 8) = sub_1A39D42E0;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 40) = *a1;
  return swift_task_switch();
}

uint64_t TTSSegmentGenerator.init(mode:tokenUnit:locales:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 40) = *a1;
  return swift_task_switch();
}

uint64_t sub_1A3A4EFC0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v1 = *(_BYTE *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 32) = 20;
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1A3A4F090(v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 64) = v6;
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1A3A4F908(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 72) = v8;
  type metadata accessor for TTSStringTagger();
  *(_QWORD *)(v3 + 40) = TTSStringTagger.__allocating_init(locales:)(v2);
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CCE150]), sel_init);
  *(_BYTE *)(v3 + 24) = v1;
  *(_QWORD *)(v3 + 48) = v9;
  *(_QWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1A3A4F090(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v43[2];
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1A3AB4520();
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  MEMORY[0x1E0C80A78](v5);
  v54 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A3AB4424();
  v8 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  v58 = v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v48 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v47 = (uint64_t)v43 - v12;
  MEMORY[0x1E0C80A78](v11);
  v46 = (char *)v43 - v13;
  v14 = sub_1A3AB4538();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v22 = a1;
    v23 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v50 = *(_QWORD *)(v15 + 72);
    v51 = v4;
    v53 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v43[1] = v22;
    swift_bridgeObjectRetain();
    v24 = MEMORY[0x1E0DEE9E8];
    v44 = v20;
    v45 = v14;
    v49 = v17;
    while (1)
    {
      v53(v20, v23, v14);
      v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v52(v20, 0, 1, v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
      v59 = v24;
      swift_bridgeObjectRetain();
      v26 = v54;
      sub_1A3AB452C();
      v27 = (uint64_t)v51;
      sub_1A3AB44FC();
      v28 = v27;
      v29 = v26;
      v31 = v57;
      v30 = v58;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v29, v56);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v27, 1, v31) == 1)
      {
        sub_1A39B11F4(v27, &qword_1ED1B52F0);
      }
      else
      {
        v33 = v57;
        v32 = v58;
        v34 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v46, v28, v57);
        v35 = v48;
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v48, v34, v33);
        v36 = v15;
        v37 = v47;
        sub_1A39BCA58(v47, v35);
        v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v39 = v37;
        v15 = v36;
        v20 = v44;
        v38(v39, v33);
        v40 = v33;
        v14 = v45;
        v38((uint64_t)v34, v40);
      }
      v17 = v49;
      v25 = v59;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v49, v14);
      swift_bridgeObjectRelease();
      v23 += v50;
      v24 = v25;
      if (!--v21)
      {
        v41 = v52;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    swift_bridgeObjectRetain();
    v25 = MEMORY[0x1E0DEE9E8];
LABEL_10:
    v41(v20, 1, 1, v14);
    v24 = v25;
  }
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_1A3A4F444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v2 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v2);
  v59 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1A3AB4520();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x1E0C80A78](v4);
  v56 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A3AB4424();
  v7 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  v62 = v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v53 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v52 = (uint64_t)&v49 - v11;
  MEMORY[0x1E0C80A78](v10);
  v51 = (char *)&v49 - v12;
  v13 = sub_1A3AB4538();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1A39A4820(&qword_1ED1B5320);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + 56);
  v54 = a1 + 56;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v55 = (unint64_t)(v21 + 63) >> 6;
  v60 = a1;
  result = swift_bridgeObjectRetain();
  v25 = 0;
  v26 = MEMORY[0x1E0DEE9E8];
  v49 = v19;
  v50 = v13;
  while (1)
  {
    if (v23)
    {
      v28 = __clz(__rbit64(v23));
      v29 = (v23 - 1) & v23;
      v30 = v28 | (v25 << 6);
      goto LABEL_26;
    }
    v31 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v31 >= v55)
      goto LABEL_29;
    v32 = *(_QWORD *)(v54 + 8 * v31);
    ++v25;
    if (!v32)
    {
      v25 = v31 + 1;
      if (v31 + 1 >= v55)
        goto LABEL_29;
      v32 = *(_QWORD *)(v54 + 8 * v25);
      if (!v32)
      {
        v25 = v31 + 2;
        if (v31 + 2 >= v55)
          goto LABEL_29;
        v32 = *(_QWORD *)(v54 + 8 * v25);
        if (!v32)
        {
          v25 = v31 + 3;
          if (v31 + 3 >= v55)
            goto LABEL_29;
          v32 = *(_QWORD *)(v54 + 8 * v25);
          if (!v32)
          {
            v25 = v31 + 4;
            if (v31 + 4 >= v55)
              goto LABEL_29;
            v32 = *(_QWORD *)(v54 + 8 * v25);
            if (!v32)
              break;
          }
        }
      }
    }
LABEL_25:
    v29 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v25 << 6);
LABEL_26:
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v19, *(_QWORD *)(v60 + 48) + *(_QWORD *)(v14 + 72) * v30, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1, v13) == 1)
      goto LABEL_30;
    v63 = v29;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    v64 = v26;
    swift_bridgeObjectRetain();
    v34 = v56;
    sub_1A3AB452C();
    v35 = v59;
    sub_1A3AB44FC();
    v36 = (uint64_t)v35;
    v38 = v61;
    v37 = v62;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v58);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v36, 1, v38) == 1)
    {
      sub_1A39B11F4(v36, &qword_1ED1B52F0);
    }
    else
    {
      v39 = v16;
      v41 = v61;
      v40 = v62;
      v42 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v51, v36, v61);
      v43 = v53;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v53, v42, v41);
      v44 = v14;
      v45 = v52;
      sub_1A39BCA58(v52, v43);
      v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v16 = v39;
      v19 = v49;
      v47 = v45;
      v14 = v44;
      v46(v47, v41);
      v48 = v41;
      v13 = v50;
      v46((uint64_t)v42, v48);
    }
    v23 = v63;
    v27 = v64;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    result = swift_bridgeObjectRelease();
    v26 = v27;
  }
  v33 = v31 + 5;
  if (v33 >= v55)
  {
LABEL_29:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v19, 1, 1, v13);
LABEL_30:
    swift_release();
    return v26;
  }
  v32 = *(_QWORD *)(v54 + 8 * v33);
  if (v32)
  {
    v25 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v25 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v25 >= v55)
      goto LABEL_29;
    v32 = *(_QWORD *)(v54 + 8 * v25);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1A3A4F908(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;

  v2 = sub_1A3AB4424();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820(&qword_1ED1B52F0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 56);
  v23 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v24 = (unint64_t)(v10 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  v15 = MEMORY[0x1E0DEE9E8];
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v16 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * i, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
      goto LABEL_28;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    v25 = v15;
    swift_bridgeObjectRetain();
    v21 = sub_1A3A52FAC();
    sub_1A3A53338(v21);
    swift_bridgeObjectRelease();
    v22 = v25;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    result = swift_bridgeObjectRelease();
    v15 = v22;
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v24)
      goto LABEL_27;
    v19 = *(_QWORD *)(v23 + 8 * v14);
    if (!v19)
      break;
LABEL_19:
    v12 = (v19 - 1) & v19;
  }
  v20 = v14 + 1;
  if (v14 + 1 >= v24)
    goto LABEL_27;
  v19 = *(_QWORD *)(v23 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v14 + 2;
  if (v14 + 2 >= v24)
    goto LABEL_27;
  v19 = *(_QWORD *)(v23 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v14 + 3;
  if (v14 + 3 >= v24)
    goto LABEL_27;
  v19 = *(_QWORD *)(v23 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v14 + 4;
  if (v14 + 4 >= v24)
    goto LABEL_27;
  v19 = *(_QWORD *)(v23 + 8 * v20);
  if (v19)
    goto LABEL_18;
  v20 = v14 + 5;
  if (v14 + 5 >= v24)
  {
LABEL_27:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
LABEL_28:
    swift_release();
    return v15;
  }
  v19 = *(_QWORD *)(v23 + 8 * v20);
  if (v19)
  {
LABEL_18:
    v14 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v24)
      goto LABEL_27;
    v19 = *(_QWORD *)(v23 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_19;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A3A4FBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a3;
  v43 = a2;
  v45 = a1;
  v4 = sub_1A39A4820(&qword_1ED1B52F0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v5;
  MEMORY[0x1E0C80A78](v4);
  v38 = (uint64_t)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v7);
  v44 = (uint64_t)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1EE6D4160);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1A39A4820(&qword_1EE6D4168);
  v13 = *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64);
  v14 = *(_QWORD *)(v42 - 8);
  v15 = MEMORY[0x1E0C80A78](v42);
  v37[0] = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v37 - v16;
  type metadata accessor for StreamingTokenizer();
  v18 = *(_QWORD *)(v3 + 56);
  v19 = v43;
  swift_bridgeObjectRetain();
  v20 = sub_1A39D5D50(v45, v19, v18);
  type metadata accessor for TTSSegmentGenerator.Segment();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DF07B8], v9);
  sub_1A3AB4D0C();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_retain();
  v21 = v42;
  sub_1A3AB4D24();
  v22 = sub_1A3AB4D00();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v44, 1, 1, v22);
  v23 = v14;
  v24 = *(void (**)(_QWORD, char *, uint64_t))(v14 + 16);
  v25 = v37[0];
  v24(v37[0], v17, v21);
  v26 = v38;
  sub_1A3A4EC80(v41, v38);
  v27 = (*(unsigned __int8 *)(v23 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v28 = (v13 + *(unsigned __int8 *)(v39 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v29 = (v40 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = 0;
  v30[3] = 0;
  v31 = v37[1];
  v30[4] = v20;
  v30[5] = v31;
  v32 = (char *)v30 + v27;
  v33 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v32, v25, v42);
  sub_1A3A4ECC8(v26, (uint64_t)v30 + v28);
  v34 = (_QWORD *)((char *)v30 + v29);
  v35 = v43;
  *v34 = v45;
  v34[1] = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1A39CDB64(v44, (uint64_t)&unk_1EE6D4178, (uint64_t)v30);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v17, v33);
}

uint64_t sub_1A3A4FF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8[20] = a8;
  v8[21] = v15;
  v8[18] = a6;
  v8[19] = a7;
  v8[16] = a4;
  v8[17] = a5;
  v9 = sub_1A3AB4520();
  v8[22] = v9;
  v8[23] = *(_QWORD *)(v9 - 8);
  v8[24] = swift_task_alloc();
  v8[25] = swift_task_alloc();
  v10 = sub_1A3AB4424();
  v8[26] = v10;
  v8[27] = *(_QWORD *)(v10 - 8);
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B5320);
  v8[31] = swift_task_alloc();
  v8[32] = swift_task_alloc();
  v11 = sub_1A3AB4538();
  v8[33] = v11;
  v8[34] = *(_QWORD *)(v11 - 8);
  v8[35] = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B52F0);
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  v8[38] = swift_task_alloc();
  v8[39] = swift_task_alloc();
  v8[40] = swift_task_alloc();
  v8[41] = swift_task_alloc();
  v8[42] = swift_task_alloc();
  v8[43] = swift_task_alloc();
  v8[44] = swift_task_alloc();
  v8[45] = swift_task_alloc();
  v8[46] = swift_task_alloc();
  v8[47] = swift_task_alloc();
  v8[48] = type metadata accessor for TTSSegmentGenerator.Segment();
  v8[49] = swift_task_alloc();
  v8[50] = swift_task_alloc();
  v12 = sub_1A39A4820(&qword_1EE6D4220);
  v8[51] = v12;
  v8[52] = *(_QWORD *)(v12 - 8);
  v8[53] = swift_task_alloc();
  v8[54] = swift_task_alloc();
  v13 = sub_1A39A4820(&qword_1EE6D2E58);
  v8[55] = v13;
  v8[56] = *(_QWORD *)(v13 - 8);
  v8[57] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A50188()
{
  uint64_t v0;
  _QWORD *v1;

  (*(void (**)(void))(**(_QWORD **)(v0 + 128) + 128))();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 464) = v1;
  *v1 = v0;
  v1[1] = sub_1A3A50200;
  return sub_1A3AB4D78();
}

uint64_t sub_1A3A50200()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A50254()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t result;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  int v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  int v48;
  char v49;
  unsigned int v50;
  double v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, unint64_t, uint64_t);
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  BOOL v94;
  uint64_t v95;
  uint64_t *v96;
  BOOL v97;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _OWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t);
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, unint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  void (*v167)(uint64_t, uint64_t);
  void (*v168)(_QWORD, _QWORD);
  unint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  void *v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(uint64_t, uint64_t, uint64_t);
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _OWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(uint64_t, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned __int8 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t (*v267)(uint64_t *, uint64_t, uint64_t);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;

  v1 = (_QWORD *)v0;
  v2 = (_QWORD *)(v0 + 16);
  v251 = *(_QWORD *)(v0 + 16);
  v259 = *(_QWORD *)(v0 + 56);
  if (!v259)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 448) + 8))(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 440));
    sub_1A39A4820(&qword_1EE6D4168);
    sub_1A3AB4D48();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 24);
  v4 = v2[2];
  v6 = v2[3];
  v5 = v2[4];
  v7 = v1[17];
  v8 = *(unsigned __int8 *)(v7 + 24);
  if (!*(_BYTE *)(v7 + 24))
  {
    v41 = v1[54];
    v42 = v1[52];
    v283 = v1[51];
    v43 = (char *)v1[50];
    v44 = v2[2];
    v45 = v1[48];
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD))(v1[27] + 56))(&v43[*(int *)(v45 + 24)], 1, 1, v1[26]);
    *(_QWORD *)v43 = v44;
    *((_QWORD *)v43 + 1) = v6;
    *((_QWORD *)v43 + 2) = v5;
    *((_QWORD *)v43 + 3) = v259;
    *((_QWORD *)v43 + 4) = v251;
    *((_QWORD *)v43 + 5) = v3;
    v46 = &v43[*(int *)(v45 + 28)];
    *(_OWORD *)v46 = 0u;
    *((_OWORD *)v46 + 1) = 0u;
    sub_1A39A4820(&qword_1EE6D4168);
    sub_1A3AB4D3C();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v283);
    goto LABEL_162;
  }
  v9 = (uint64_t)(v2 + 6);
  v10 = *(_QWORD *)(v7 + 40);
  v1[11] = MEMORY[0x1E0DEBAF0];
  v1[12] = sub_1A3A1240C();
  v11 = (_QWORD *)swift_allocObject();
  v1[8] = v11;
  v11[2] = v4;
  v11[3] = v6;
  v257 = v6;
  v11[4] = v5;
  v11[5] = v259;
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 192);
  swift_bridgeObjectRetain();
  v13 = v12(v9);
  sub_1A39A47C4(v9);
  v14 = v13;
  v249 = v3;
  v258 = v5;
  v256 = v4;
  if (*(_QWORD *)(v13 + 16) == 1)
  {
    v15 = *(uint64_t **)(v13 + 56);
    if (v15[2] == 1)
    {
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_QWORD *)(v14 + 40);
      v18 = *(_BYTE *)(v14 + 48);
      sub_1A3A20648(v16, v17, v18);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      sub_1A3A204C8(v16, v17, v18);
      result = swift_bridgeObjectRelease();
      v20 = v15 + 7;
      v21 = v15[7];
      v22 = *((_BYTE *)v15 + 32);
      v23 = 1 << v22;
      if (v21)
      {
        v24 = 0;
      }
      else
      {
        v50 = v22 & 0x3F;
        if (v50 < 7)
          goto LABEL_159;
        v21 = v15[8];
        if (v21)
        {
          v24 = 64;
        }
        else
        {
          if (v50 < 8)
            goto LABEL_159;
          v21 = v15[9];
          if (!v21)
          {
LABEL_153:
            v229 = (unint64_t)(v23 + 63) >> 6;
            if (v229 <= 3)
              v229 = 3;
            v230 = (unint64_t *)(v15 + 10);
            v231 = v229 - 3;
            v24 = 128;
            while (v231)
            {
              v232 = *v230++;
              v21 = v232;
              v24 += 64;
              --v231;
              if (v232)
                goto LABEL_7;
            }
            goto LABEL_159;
          }
          v24 = 128;
        }
      }
LABEL_7:
      v25 = __clz(__rbit64(v21));
      v26 = v25 + v24;
      if (v25 + v24 != v23)
      {
        if ((v26 & 0x8000000000000000) == 0 && v26 < v23)
        {
          if (((*(_QWORD *)((char *)v20 + (((unint64_t)v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
          {
            v27 = v1[46];
            v28 = v1[26];
            v29 = v1[27];
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v15[6] + *(_QWORD *)(v29 + 72) * v26, v28);
            v30 = v1;
            v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
            v31(v27, 0, 1, v28);
            goto LABEL_160;
          }
          goto LABEL_170;
        }
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
        goto LABEL_174;
      }
LABEL_159:
      v233 = v1[46];
      v234 = v1[26];
      v30 = v1;
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1[27] + 56);
      v31(v233, 1, 1, v234);
LABEL_160:
      v235 = v30[46];
      v236 = v30[26];
      v237 = v30[27];
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v237 + 48))(v235, 1, v236);
      if ((_DWORD)result != 1)
      {
        v239 = v30[52];
        v238 = v30[53];
        v240 = v30[51];
        v242 = v30[48];
        v241 = (_QWORD *)v30[49];
        v243 = v30[47];
        v244 = v30[26];
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v30[27] + 32))(v243, v30[46], v244);
        v31(v243, 0, 1, v244);
        *v241 = v256;
        v241[1] = v257;
        v241[2] = v258;
        v241[3] = v259;
        v241[4] = v251;
        v241[5] = v249;
        sub_1A3A4ECC8(v243, (uint64_t)v241 + *(int *)(v242 + 24));
        v245 = (_OWORD *)((char *)v241 + *(int *)(v242 + 28));
        *v245 = 0u;
        v245[1] = 0u;
        sub_1A39A4820(&qword_1EE6D4168);
        sub_1A3AB4D3C();
        (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v238, v240);
        v1 = v30;
        goto LABEL_162;
      }
      goto LABEL_175;
    }
  }
  v252 = v14;
  sub_1A3A4EC80(v1[19], v1[45]);
  if (v8 != 2)
    goto LABEL_36;
  v32 = *(void **)(v1[17] + 48);
  v33 = swift_bridgeObjectRetain();
  sub_1A3A5456C(v33);
  swift_bridgeObjectRelease();
  type metadata accessor for NLLanguage(0);
  v34 = (void *)sub_1A3AB4BA4();
  swift_release();
  objc_msgSend(v32, sel_setLanguageConstraints_, v34);

  objc_msgSend(v32, sel_reset);
  MEMORY[0x1A85957F4](v4, v6, v5, v259);
  v35 = (void *)sub_1A3AB4958();
  swift_bridgeObjectRelease();
  objc_msgSend(v32, sel_processString_, v35);

  v36 = sub_1A3AB5084();
  result = sub_1A3A544BC(v36);
  if ((v38 & 1) != 0)
  {
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
    goto LABEL_176;
  }
  v39 = *(_DWORD *)(v36 + 36);
  if (v39 != v37)
    goto LABEL_165;
  v40 = 1 << *(_BYTE *)(v36 + 32);
  if (result == v40)
    goto LABEL_17;
  if (result < 0 || result >= v40)
    goto LABEL_166;
  if (((*(_QWORD *)(v36 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
    goto LABEL_169;
  }
  v47 = *(void **)(*(_QWORD *)(v36 + 48) + 8 * result);
  result = sub_1A39FF4BC(v36);
  if ((v49 & 1) != 0)
  {
LABEL_176:
    __break(1u);
    return result;
  }
  if (v39 != v48)
    goto LABEL_168;
  if (result == v40)
  {
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_34:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[34] + 56))(v1[32], 1, 1, v1[33]);
LABEL_35:
    sub_1A39B11F4(v1[32], &qword_1ED1B5320);
    goto LABEL_36;
  }
  if (result < 0 || result >= v40)
    goto LABEL_171;
  if (((*(_QWORD *)(v36 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
    goto LABEL_172;
  v51 = *(double *)(*(_QWORD *)(v36 + 56) + 8 * result);
  v52 = v47;
  swift_bridgeObjectRelease();
  if (v51 < 0.9)
  {

    goto LABEL_34;
  }
  v120 = v1[33];
  v121 = v1[34];
  v122 = v1[32];
  sub_1A3AB497C();
  sub_1A3AB43C4();

  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v122, 0, 1, v120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v122, 1, v120) == 1)
    goto LABEL_35;
  v123 = v1[44];
  v125 = v1[34];
  v124 = v1[35];
  v126 = v1[32];
  v127 = v1[33];
  v128 = v1[27];
  v285 = v1[26];
  v129 = v1[25];
  v130 = v1;
  v133 = v1 + 22;
  v131 = v1[22];
  v132 = v133[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 32))(v124, v126, v127);
  sub_1A3AB452C();
  sub_1A3AB44FC();
  (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v129, v131);
  (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v124, v127);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v123, 1, v285) == 1)
  {
    sub_1A39B11F4(v130[44], &qword_1ED1B52F0);
  }
  else
  {
    v223 = v130[44];
    v224 = v130[45];
    v225 = v130[30];
    v226 = v130[26];
    v227 = v130[27];
    sub_1A39B11F4(v224, &qword_1ED1B52F0);
    v228 = *(void (**)(uint64_t, uint64_t, uint64_t))(v227 + 32);
    v228(v225, v223, v226);
    v228(v224, v225, v226);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v227 + 56))(v224, 0, 1, v226);
  }
  v1 = v130;
LABEL_36:
  v15 = (uint64_t *)v1[43];
  v53 = v1[26];
  v54 = v1[27];
  sub_1A3A4EC80(v1[45], (uint64_t)v15);
  v267 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v54 + 48);
  v55 = v267(v15, 1, v53);
  v56 = v1[43];
  v284 = v1;
  if (v55 == 1)
  {
    sub_1A39B11F4(v56, &qword_1ED1B52F0);
LABEL_100:
    result = v252;
    v250 = *(_QWORD *)(v252 + 16);
    if (!v250)
    {
LABEL_146:
      swift_bridgeObjectRelease();
      v222 = v1[45];
      swift_bridgeObjectRelease();
      sub_1A39B11F4(v222, &qword_1ED1B52F0);
      goto LABEL_162;
    }
    v134 = 0;
    while (1)
    {
      v20 = *(_QWORD **)(result + 16);
      if (v134 >= (unint64_t)v20)
      {
        __break(1u);
        goto LABEL_153;
      }
      v265 = v1[45];
      v144 = v1[42];
      v281 = v1[26];
      v145 = v252 + 32 + 48 * v134;
      v146 = *(_BYTE *)(v145 + 16);
      v147 = *(_QWORD *)(v145 + 24);
      v148 = *(_QWORD *)(v145 + 32);
      v149 = *(_QWORD *)(v145 + 40);
      v262 = *(_QWORD *)v145;
      v263 = *(_QWORD *)(v145 + 8);
      sub_1A3A20648(*(_QWORD *)v145, v263, v146);
      swift_bridgeObjectRetain();
      v253 = v149;
      v254 = v148;
      v150 = sub_1A3AB5114();
      v272 = v151;
      v275 = v150;
      v269 = v152;
      v278 = v153;
      sub_1A3A4EC80(v265, v144);
      result = v267((uint64_t *)v144, 1, v281);
      if ((_DWORD)result == 1)
        goto LABEL_173;
      v266 = v146;
      v282 = v147;
      v260 = v134;
      if (*(_QWORD *)(v147 + 16))
      {
        v154 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8];
        sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
        swift_bridgeObjectRetain();
        v155 = sub_1A3AB48C8();
        v156 = -1 << *(_BYTE *)(v147 + 32);
        v157 = v155 & ~v156;
        v158 = v147 + 56;
        if (((*(_QWORD *)(v147 + 56 + ((v157 >> 3) & 0xFFFFFFFFFFFFF8)) >> v157) & 1) != 0)
        {
          v159 = ~v156;
          v160 = v284[27];
          v161 = *(_QWORD *)(v160 + 72);
          v162 = *(void (**)(uint64_t, unint64_t, uint64_t))(v160 + 16);
          while (1)
          {
            v164 = v284[27];
            v163 = v284[28];
            v165 = v284[26];
            v162(v163, *(_QWORD *)(v282 + 48) + v157 * v161, v165);
            sub_1A39B9F44(&qword_1EE6D17F8, v154, MEMORY[0x1E0CB0B08]);
            v166 = sub_1A3AB494C();
            v167 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
            v167(v163, v165);
            if ((v166 & 1) != 0)
              break;
            v157 = (v157 + 1) & v159;
            if (((*(_QWORD *)(v158 + ((v157 >> 3) & 0xFFFFFFFFFFFFF8)) >> v157) & 1) == 0)
              goto LABEL_114;
          }
          v1 = v284;
          v270 = v284[54];
          v273 = v284[52];
          v180 = (uint64_t *)v284[50];
          v276 = v284[51];
          v181 = v284[48];
          v247 = v284[45];
          v248 = (uint64_t *)v284[18];
          v167(v284[42], v284[26]);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v182 = sub_1A3AB4B38();
          v184 = v183;
          v186 = v185;
          v188 = v187;
          sub_1A3A4EC80(v247, (uint64_t)v180 + *(int *)(v181 + 24));
          *v180 = v182;
          v180[1] = v184;
          v180[2] = v186;
          v180[3] = v188;
          v180[4] = v254;
          v180[5] = v253;
          v189 = (uint64_t *)((char *)v180 + *(int *)(v181 + 28));
          *v189 = v262;
          v189[1] = v263;
          v189[2] = v266;
          v189[3] = v282;
          sub_1A39A4820(&qword_1EE6D4168);
          v15 = v248;
          sub_1A3AB4D3C();
          (*(void (**)(uint64_t, uint64_t))(v273 + 8))(v270, v276);
          goto LABEL_104;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
LABEL_114:
      v168 = *(void (**)(_QWORD, _QWORD))(v284[27] + 8);
      result = ((uint64_t (*)(_QWORD, _QWORD))v168)(v284[42], v284[26]);
      v169 = *(_QWORD *)(v282 + 56);
      v170 = *(_BYTE *)(v282 + 32);
      v171 = 1 << v170;
      if (v169)
      {
        v172 = 0;
      }
      else
      {
        v179 = v170 & 0x3F;
        if (v179 < 7)
          goto LABEL_136;
        v169 = *(_QWORD *)(v282 + 64);
        if (v169)
        {
          v172 = 1;
        }
        else
        {
          if (v179 < 8)
            goto LABEL_136;
          v169 = *(_QWORD *)(v282 + 72);
          if (v169)
          {
            v172 = 2;
          }
          else
          {
            v169 = *(_QWORD *)(v282 + 80);
            if (!v169)
            {
              v190 = 0;
              v191 = (unint64_t)(v171 + 63) >> 6;
              if (v191 <= 4)
                v191 = 4;
              v192 = v191 - 4;
              while (v192 != v190)
              {
                v169 = *(_QWORD *)(v282 + 88 + 8 * v190++);
                if (v169)
                {
                  v172 = v190 + 3;
                  goto LABEL_116;
                }
              }
              goto LABEL_136;
            }
            v172 = 3;
          }
        }
      }
LABEL_116:
      v173 = __clz(__rbit64(v169));
      v174 = v173 + (v172 << 6);
      if (v174 != v171)
      {
        if (v174 < 0 || v174 >= v171)
        {
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
          goto LABEL_167;
        }
        if (((*(_QWORD *)(v282 + 56 + (((unint64_t)v174 >> 3) & 0xFFFFFFFFFFFFF8)) >> v173) & 1) == 0)
          goto LABEL_164;
        v175 = v284[41];
        v176 = v284[26];
        v177 = v284[27];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v177 + 16))(v175, *(_QWORD *)(v282 + 48) + *(_QWORD *)(v177 + 72) * v174, v176);
        v178 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v177 + 56);
        v178(v175, 0, 1, v176);
        goto LABEL_137;
      }
LABEL_136:
      v178 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v284[27] + 56);
      v178(v284[41], 1, 1, v284[26]);
LABEL_137:
      if (*(_QWORD *)(v282 + 16) < 2uLL)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v193 = v284[33];
        v194 = v284[34];
        v195 = v284[31];
        v196 = *(void **)(v284[17] + 48);
        objc_msgSend(v196, sel_reset);
        v197 = sub_1A3A4F908(v282);
        swift_bridgeObjectRelease();
        sub_1A3A5456C(v197);
        swift_bridgeObjectRelease();
        type metadata accessor for NLLanguage(0);
        v198 = (void *)sub_1A3AB4BA4();
        swift_release();
        objc_msgSend(v196, sel_setLanguageConstraints_, v198);

        MEMORY[0x1A85957F4](v275, v272, v269, v278);
        v199 = (void *)sub_1A3AB4958();
        swift_bridgeObjectRelease();
        objc_msgSend(v196, sel_processString_, v199);

        sub_1A3A4EA80(v195, 0.95);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v194 + 48))(v195, 1, v193) == 1)
        {
          sub_1A39B11F4(v284[31], &qword_1ED1B5320);
        }
        else
        {
          v255 = v168;
          v210 = (uint64_t *)v284[40];
          v211 = v284[33];
          v212 = v284[34];
          v213 = v284[31];
          v214 = v284[26];
          v216 = v284[23];
          v215 = v284[24];
          v217 = v284[22];
          sub_1A3AB452C();
          (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v213, v211);
          sub_1A3AB44FC();
          (*(void (**)(uint64_t, uint64_t))(v216 + 8))(v215, v217);
          if (v267(v210, 1, v214) == 1)
          {
            sub_1A39B11F4(v284[40], &qword_1ED1B52F0);
          }
          else
          {
            v219 = v284[40];
            v218 = v284[41];
            v220 = v284[39];
            v221 = v284[26];
            sub_1A3AB43F4();
            v255(v219, v221);
            sub_1A3AB4430();
            sub_1A39B11F4(v218, &qword_1ED1B52F0);
            v178(v220, 0, 1, v221);
            sub_1A3A4ECC8(v220, v218);
          }
        }
      }
      v200 = v284[36];
      v201 = v284[37];
      v202 = v284[26];
      v203 = v284[19];
      sub_1A3A4EC80(v284[41], v201);
      sub_1A3A4EC80(v203, v200);
      v204 = v267((uint64_t *)v201, 1, v202);
      v206 = v284[37];
      v205 = v284[38];
      v207 = v284[36];
      if (v204 == 1)
      {
        sub_1A3A4ECC8(v207, v284[38]);
        sub_1A39B11F4(v206, &qword_1ED1B52F0);
      }
      else
      {
        v208 = v284[26];
        v209 = v284[27];
        sub_1A39B11F4(v207, &qword_1ED1B52F0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v209 + 32))(v205, v206, v208);
        v178(v205, 0, 1, v208);
      }
      v135 = v284[54];
      v136 = v284[52];
      v137 = v284[51];
      v138 = (uint64_t *)v284[50];
      v139 = v284[48];
      v140 = v284[41];
      v141 = v284[38];
      v15 = (uint64_t *)v284[18];
      sub_1A3A4EC80(v141, (uint64_t)v138 + *(int *)(v139 + 24));
      *v138 = v275;
      v138[1] = v272;
      v138[2] = v269;
      v138[3] = v278;
      v138[4] = v251;
      v138[5] = v249;
      v142 = (uint64_t *)((char *)v138 + *(int *)(v139 + 28));
      *v142 = v262;
      v142[1] = v263;
      v142[2] = v266;
      v142[3] = v282;
      sub_1A39A4820(&qword_1EE6D4168);
      sub_1A3AB4D3C();
      v143 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
      v1 = v284;
      v143(v135, v137);
      sub_1A39B11F4(v141, &qword_1ED1B52F0);
      sub_1A39B11F4(v140, &qword_1ED1B52F0);
LABEL_104:
      v134 = v260 + 1;
      result = v252;
      if (v260 + 1 == v250)
        goto LABEL_146;
    }
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v1[27] + 32))(v1[29], v56, v1[26]);
  v261 = *(_QWORD *)(v252 + 16);
  if (!v261)
  {
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
  swift_bridgeObjectRetain();
  v57 = 0;
  while (2)
  {
    v268 = v57;
    v58 = v252 + 32 + 48 * v57;
    v59 = *(_QWORD *)v58;
    v60 = *(_QWORD *)(v58 + 8);
    v61 = *(_BYTE *)(v58 + 16);
    v62 = *(_QWORD *)(v58 + 24);
    v274 = v60;
    v277 = v62;
    v271 = *(_QWORD *)v58;
    if (*(_QWORD *)(v62 + 16))
    {
      v63 = *(_BYTE *)(v58 + 16);
      sub_1A3A20648(v59, v60, v61);
      sub_1A39B9F44(&qword_1EE6D2348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B00]);
      swift_bridgeObjectRetain();
      v1 = v284;
      v64 = sub_1A3AB48C8();
      v65 = -1 << *(_BYTE *)(v62 + 32);
      v66 = v64 & ~v65;
      v67 = v62 + 56;
      if (((*(_QWORD *)(v62 + 56 + ((v66 >> 3) & 0xFFFFFFFFFFFFF8)) >> v66) & 1) != 0)
      {
        v68 = ~v65;
        v69 = v284[27];
        v70 = *(_QWORD *)(v69 + 72);
        v71 = *(void (**)(uint64_t, unint64_t, uint64_t))(v69 + 16);
        do
        {
          v72 = v1;
          v73 = v1[28];
          v75 = v72[26];
          v74 = v72[27];
          v71(v73, *(_QWORD *)(v277 + 48) + v66 * v70, v75);
          sub_1A39B9F44(&qword_1EE6D17F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0AE8], MEMORY[0x1E0CB0B08]);
          v76 = sub_1A3AB494C();
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
          if ((v76 & 1) != 0)
          {
            sub_1A3A204C8(v271, v274, v63);
            swift_bridgeObjectRelease();
            v1 = v284;
            goto LABEL_41;
          }
          v66 = (v66 + 1) & v68;
          v1 = v284;
        }
        while (((*(_QWORD *)(v67 + ((v66 >> 3) & 0xFFFFFFFFFFFFF8)) >> v66) & 1) != 0);
      }
    }
    else
    {
      v63 = *(_BYTE *)(v58 + 16);
      sub_1A3A20648(v59, v60, v61);
      swift_bridgeObjectRetain();
    }
    v15 = (uint64_t *)v1[17];
    v78 = v271;
    v77 = v274;
    v79 = v63;
    sub_1A3A20648(v271, v274, v63);
    sub_1A3AB5114();
    v80 = sub_1A3AB5108();
    v81 = swift_bridgeObjectRelease();
    if ((*(uint64_t (**)(uint64_t))(*v15 + 168))(v81) < v80)
    {
      sub_1A3A204C8(v271, v274, v79);
      sub_1A3A204C8(v271, v274, v79);
      swift_bridgeObjectRelease();
LABEL_99:
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(v1[27] + 8))(v1[29], v1[26]);
      goto LABEL_100;
    }
    v1[13] = v271;
    v1[14] = v274;
    *((_BYTE *)v1 + 120) = v79;
    v15 = sub_1A3A1AC28();
    sub_1A3A204C8(v271, v274, v79);
    v82 = sub_1A3AB4ED4();
    v83 = v82;
    v84 = v15[2];
    if (!v84)
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v83 + 16))
        goto LABEL_72;
LABEL_98:
      swift_bridgeObjectRelease();
      sub_1A3A204C8(v78, v77, v79);
      swift_bridgeObjectRelease();
      goto LABEL_99;
    }
    v264 = v79;
    v85 = 0;
    v279 = v15 + 4;
    for (i = v82 + 56; ; i = v83 + 56)
    {
      while (1)
      {
        v87 = &v279[2 * v85];
        v88 = *v87;
        v89 = v87[1];
        ++v85;
        sub_1A3AB56FC();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1A3AB4A30();
        v90 = sub_1A3AB5738();
        v91 = -1 << *(_BYTE *)(v83 + 32);
        v92 = v90 & ~v91;
        if (((*(_QWORD *)(i + ((v92 >> 3) & 0xFFFFFFFFFFFFF8)) >> v92) & 1) == 0)
          goto LABEL_67;
        v15 = *(uint64_t **)(v83 + 48);
        v93 = &v15[2 * v92];
        v94 = *v93 == v88 && v93[1] == v89;
        if (!v94 && (sub_1A3AB5654() & 1) == 0)
          break;
LABEL_52:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v85 == v84)
          goto LABEL_69;
      }
      v95 = ~v91;
      while (1)
      {
        v92 = (v92 + 1) & v95;
        if (((*(_QWORD *)(i + ((v92 >> 3) & 0xFFFFFFFFFFFFF8)) >> v92) & 1) == 0)
          break;
        v96 = &v15[2 * v92];
        v97 = *v96 == v88 && v96[1] == v89;
        if (v97 || (sub_1A3AB5654() & 1) != 0)
          goto LABEL_52;
      }
LABEL_67:
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v286 = v83;
      swift_bridgeObjectRetain();
      v15 = &v286;
      sub_1A39BD2FC(v88, v89, v92, isUniquelyReferenced_nonNull_native);
      v83 = v286;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v85 == v84)
        break;
    }
LABEL_69:
    swift_bridgeObjectRelease();
    v1 = v284;
    v79 = v264;
    v78 = v271;
    v77 = v274;
    if (!*(_QWORD *)(v83 + 16))
      goto LABEL_98;
LABEL_72:
    sub_1A3AB56FC();
    sub_1A3AB4A30();
    v99 = sub_1A3AB5738();
    v100 = -1 << *(_BYTE *)(v83 + 32);
    v101 = v99 & ~v100;
    v15 = (uint64_t *)(v83 + 56);
    if (((*(_QWORD *)(v83 + 56 + ((v101 >> 3) & 0xFFFFFFFFFFFFF8)) >> v101) & 1) == 0)
      goto LABEL_98;
    v102 = *(_QWORD *)(v83 + 48);
    v103 = (_QWORD *)(v102 + 16 * v101);
    v104 = *v103 == 1853120844 && v103[1] == 0xE400000000000000;
    if (v104 || (sub_1A3AB5654() & 1) != 0)
      goto LABEL_40;
    v105 = ~v100;
    v106 = (v101 + 1) & v105;
    if (((*(unint64_t *)((char *)v15 + ((v106 >> 3) & 0xFFFFFFFFFFFFF8)) >> v106) & 1) == 0)
      goto LABEL_98;
    v107 = (_QWORD *)(v102 + 16 * v106);
    if (*v107 != 1853120844 || v107[1] != 0xE400000000000000)
    {
      do
      {
        if ((sub_1A3AB5654() & 1) != 0)
          break;
        v106 = (v106 + 1) & v105;
        if (((*(unint64_t *)((char *)v15 + ((v106 >> 3) & 0xFFFFFFFFFFFFF8)) >> v106) & 1) == 0)
          goto LABEL_98;
        v108 = (_QWORD *)(v102 + 16 * v106);
      }
      while (*v108 != 1853120844 || v108[1] != 0xE400000000000000);
    }
LABEL_40:
    swift_bridgeObjectRelease();
    sub_1A3A204C8(v78, v77, v79);
    swift_bridgeObjectRelease();
LABEL_41:
    v57 = v268 + 1;
    if (v268 + 1 != v261)
      continue;
    break;
  }
  swift_bridgeObjectRelease_n();
LABEL_93:
  v110 = v1[54];
  v111 = v1[52];
  v280 = v1[51];
  v112 = (_QWORD *)v284[50];
  v113 = v284[48];
  v114 = v284[45];
  v115 = v284[29];
  v116 = v284[27];
  v117 = v284[26];
  v118 = (char *)v112 + *(int *)(v113 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v118, v115, v117);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v118, 0, 1, v117);
  *v112 = v256;
  v112[1] = v257;
  v112[2] = v258;
  v112[3] = v259;
  v112[4] = v251;
  v112[5] = v249;
  v119 = (_OWORD *)((char *)v112 + *(int *)(v113 + 28));
  *v119 = 0u;
  v119[1] = 0u;
  sub_1A39A4820(&qword_1EE6D4168);
  v1 = v284;
  sub_1A3AB4D3C();
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v110, v280);
  sub_1A39B11F4(v114, &qword_1ED1B52F0);
  (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v117);
LABEL_162:
  v246 = (_QWORD *)swift_task_alloc();
  v1[58] = v246;
  *v246 = v1;
  v246[1] = sub_1A3A50200;
  return sub_1A3AB4D78();
}

uint64_t TTSSegmentGenerator.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TTSSegmentGenerator.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t TTSSegmentGenerator.utteranceStream(string:voice:resolver:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];

  v36 = a4;
  v33 = a1;
  v34 = a2;
  v32[1] = a5;
  v6 = sub_1A39A4820((uint64_t *)&unk_1ED1B53A0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1A39A4820(&qword_1EE6D4180);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1A39A4820(&qword_1EE6D4188);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v32 - v18;
  v20 = a3[5];
  v41 = a3[4];
  v42[0] = v20;
  *(_QWORD *)((char *)v42 + 13) = *(_QWORD *)((char *)a3 + 93);
  v21 = a3[1];
  v37 = *a3;
  v38 = v21;
  v22 = a3[3];
  v39 = a3[2];
  v40 = v22;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DF07B8], v9);
  sub_1A3AB4D0C();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v23 = sub_1A3AB4D00();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 1, 1, v23);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
  v24 = (*(unsigned __int8 *)(v14 + 80) + 168) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v25 = swift_allocObject();
  v26 = v39;
  *(_OWORD *)(v25 + 104) = v40;
  v27 = v42[0];
  *(_OWORD *)(v25 + 120) = v41;
  *(_OWORD *)(v25 + 136) = v27;
  v28 = v38;
  *(_OWORD *)(v25 + 56) = v37;
  *(_OWORD *)(v25 + 72) = v28;
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  v29 = v34;
  v30 = v33;
  *(_QWORD *)(v25 + 32) = v35;
  *(_QWORD *)(v25 + 40) = v30;
  *(_QWORD *)(v25 + 48) = v29;
  *(_QWORD *)(v25 + 149) = *(_QWORD *)((char *)v42 + 13);
  *(_OWORD *)(v25 + 88) = v26;
  *(_QWORD *)(v25 + 160) = v36;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v25 + v24, v17, v13);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1A39FA5C4((uint64_t)&v37);
  swift_retain();
  sub_1A39DDD84((uint64_t)v8, (uint64_t)&unk_1EE6D4198, v25);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
}

uint64_t sub_1A3A51DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v8[65] = v17;
  v8[63] = a7;
  v8[64] = a8;
  v8[61] = a5;
  v8[62] = a6;
  v8[60] = a4;
  v9 = sub_1A39A4820(&qword_1EE6D4200);
  v8[66] = v9;
  v8[67] = *(_QWORD *)(v9 - 8);
  v8[68] = swift_task_alloc();
  v10 = sub_1A3AB4424();
  v8[69] = v10;
  v8[70] = *(_QWORD *)(v10 - 8);
  v8[71] = swift_task_alloc();
  v8[72] = swift_task_alloc();
  v11 = type metadata accessor for TTSSegmentGenerator.Segment();
  v8[73] = v11;
  v8[74] = *(_QWORD *)(v11 - 8);
  v8[75] = swift_task_alloc();
  sub_1A39A4820(&qword_1EE6D4208);
  v8[76] = swift_task_alloc();
  sub_1A39A4820(&qword_1ED1B52F0);
  v8[77] = swift_task_alloc();
  v8[78] = swift_task_alloc();
  v8[79] = swift_task_alloc();
  v12 = sub_1A3AB4520();
  v8[80] = v12;
  v8[81] = *(_QWORD *)(v12 - 8);
  v8[82] = swift_task_alloc();
  v13 = sub_1A3AB4538();
  v8[83] = v13;
  v8[84] = *(_QWORD *)(v13 - 8);
  v8[85] = swift_task_alloc();
  v14 = sub_1A39A4820(&qword_1EE6D4210);
  v8[86] = v14;
  v8[87] = *(_QWORD *)(v14 - 8);
  v8[88] = swift_task_alloc();
  v15 = sub_1A39A4820(&qword_1EE6D4218);
  v8[89] = v15;
  v8[90] = *(_QWORD *)(v15 - 8);
  v8[91] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1A3A51FA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[88];
  v16 = v0[87];
  v2 = v0[85];
  v3 = v0[84];
  v4 = v0[83];
  v5 = v0[82];
  v6 = v0[81];
  v7 = v0[79];
  v14 = v0[62];
  v15 = v0[86];
  v8 = v0[60];
  v12 = v0[80];
  v13 = v0[61];
  CoreSynthesizer.Voice.primaryLocale.getter(v2);
  sub_1A3AB452C();
  v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[92] = v9;
  v9(v2, v4);
  sub_1A3AB44FC();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 248))(v13, v14, v7);
  sub_1A39B11F4(v7, &qword_1ED1B52F0);
  sub_1A3AB4D6C();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v1, v15);
  v10 = (_QWORD *)swift_task_alloc();
  v0[93] = v10;
  *v10 = v0;
  v10[1] = sub_1A3A52120;
  return sub_1A3AB4D78();
}

uint64_t sub_1A3A52120()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1A3A52174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, _QWORD, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, _QWORD);
  char v82;
  char v83;
  char v84;
  _OWORD v85[5];
  _OWORD v86[2];

  v1 = *(_QWORD *)(v0 + 608);
  v2 = *(_QWORD *)(v0 + 584);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 592) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 720) + 8))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 712));
    sub_1A39A4820(&qword_1EE6D4188);
    sub_1A3AB4D48();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 560);
  v7 = *(_QWORD *)(v0 + 552);
  sub_1A3A5575C(v1, v5);
  sub_1A3A4EC80(v5 + *(int *)(v2 + 24), v4);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v8(v4, 1, v7) == 1)
  {
    v9 = *(_QWORD *)(v0 + 504);
    sub_1A39B11F4(*(_QWORD *)(v0 + 624), &qword_1ED1B52F0);
LABEL_31:
    v72 = *(_DWORD *)(v9 + 96);
    v68 = *(unsigned __int8 *)(v9 + 100);
    v66 = *(unsigned int *)(v9 + 88);
    v62 = *(unsigned __int8 *)(v9 + 92);
    v80 = *(_QWORD *)(v9 + 72);
    v70 = *(_QWORD *)(v9 + 64);
    v71 = *(void **)(v9 + 80);
    v69 = *(unsigned __int8 *)(v9 + 56);
    v67 = *(_QWORD *)(v9 + 48);
    v43 = *(_QWORD *)(v9 + 16);
    v64 = *(_QWORD *)(v9 + 24);
    v65 = *(_QWORD *)(v9 + 32);
    v44 = *(_QWORD *)v9;
    v45 = *(_QWORD *)(v9 + 8);
    v63 = *(unsigned __int16 *)(v9 + 40);
    sub_1A39FA5C4(v9);
    v46 = *(uint64_t **)(v0 + 600);
    v76 = *(_QWORD *)(v0 + 536);
    v78 = *(_QWORD *)(v0 + 528);
    v73 = *(_QWORD *)(v0 + 544);
    v47 = *v46;
    v48 = v46[1];
    v50 = v46[2];
    v49 = v46[3];
    swift_bridgeObjectRetain();
    v51 = MEMORY[0x1A85957F4](v47, v48, v50, v49);
    v53 = v52;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 432) = v51;
    *(_QWORD *)(v0 + 440) = v53;
    *(_DWORD *)(v0 + 448) = 0;
    *(_BYTE *)(v0 + 452) = 1;
    *(_DWORD *)(v0 + 456) = 0;
    *(_BYTE *)(v0 + 460) = 1;
    *(_DWORD *)(v0 + 464) = 0;
    *(_BYTE *)(v0 + 468) = 1;
    *(_BYTE *)(v0 + 472) = 1;
    v54 = 1;
    if (v62)
      v55 = 0x100000000;
    else
      v55 = 0;
    v56 = v55 | v66;
    if (!v68)
      v54 = 0;
    *(_QWORD *)(v0 + 224) = v44;
    *(_QWORD *)(v0 + 232) = v45;
    *(_QWORD *)(v0 + 240) = v43;
    *(_QWORD *)(v0 + 248) = v64;
    *(_QWORD *)(v0 + 256) = v65;
    *(_QWORD *)(v0 + 264) = v63;
    *(_QWORD *)(v0 + 272) = v67;
    *(_QWORD *)(v0 + 280) = v69;
    *(_QWORD *)(v0 + 288) = v70;
    *(_QWORD *)(v0 + 296) = v80;
    *(_QWORD *)(v0 + 304) = v71;
    *(_QWORD *)(v0 + 312) = v56;
    *(_BYTE *)(v0 + 324) = v54;
    *(_DWORD *)(v0 + 320) = v72;
    v82 = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v57 = v71;
    v58 = sub_1A39A08A8();
    sub_1A39A08B0(&v83);
    v84 = v83;
    sub_1A39A08B8(v85);
    CoreSynthesizer.Utterance.init(id:speech:voice:priority:behavior:isoPrioritizedBehavior:replacementOptions:)(0, 0, (__int128 *)(v0 + 432), v0 + 224, v58, &v84, &v82, (uint64_t *)v85, v0 + 16);
    sub_1A39A4820(&qword_1EE6D4188);
    sub_1A3AB4D3C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v73, v78);
    sub_1A3A557A0((uint64_t)v46);
    v59 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 744) = v59;
    *v59 = v0;
    v59[1] = sub_1A3A52120;
    return sub_1A3AB4D78();
  }
  v10 = *(_QWORD *)(v0 + 576);
  v11 = *(_QWORD *)(v0 + 560);
  v12 = *(_QWORD *)(v0 + 552);
  v77 = *(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 32);
  v77(v10, *(_QWORD *)(v0 + 624), v12);
  sub_1A39A4820(&qword_1EE6D2BD8);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v79 = *(_QWORD *)(v11 + 72);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1A3ABF990;
  v15 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16);
  v15(v14 + v13, v10, v12);
  v16 = sub_1A39BED30(v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if ((Locale.LanguageCode.isMacroLanguage.getter() & 1) == 0)
  {
LABEL_29:
    v35 = *(_QWORD *)(v0 + 504);
    v36 = *(_OWORD *)(v35 + 80);
    v85[4] = *(_OWORD *)(v35 + 64);
    v86[0] = v36;
    *(_QWORD *)((char *)v86 + 13) = *(_QWORD *)(v35 + 93);
    v37 = *(_OWORD *)(v35 + 16);
    v85[0] = *(_OWORD *)v35;
    v85[1] = v37;
    v38 = *(_OWORD *)(v35 + 48);
    v85[2] = *(_OWORD *)(v35 + 32);
    v85[3] = v38;
    v39 = CoreSynthesizer.Voice.locales.getter();
    v40 = sub_1A3A4F444(v39);
    swift_bridgeObjectRelease();
    v41 = sub_1A39FE0DC(v16, v40);
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(v41 + 16);
    swift_release();
    if (!v42)
    {
      v60 = *(_QWORD *)(v0 + 512);
      sub_1A3AB43F4();
      sub_1A3AB4448();
      v81 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(*(_QWORD *)v60 + 304)
                                                    + *(_QWORD *)(*(_QWORD *)v60 + 304));
      v61 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 752) = v61;
      *v61 = v0;
      v61[1] = sub_1A3A52938;
      return v81(v0 + 328, *(_QWORD *)(v0 + 680));
    }
    v9 = *(_QWORD *)(v0 + 504);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 560) + 8))(*(_QWORD *)(v0 + 576), *(_QWORD *)(v0 + 552));
    goto LABEL_31;
  }
  result = Locale.LanguageCode.childLanguages.getter();
  v17 = result;
  v18 = 0;
  v19 = *(_QWORD *)(result + 56);
  v74 = result + 56;
  v20 = -1;
  v21 = -1 << *(_BYTE *)(result + 32);
  if (-v21 < 64)
    v20 = ~(-1 << -(char)v21);
  v22 = v20 & v19;
  v75 = (unint64_t)(63 - v21) >> 6;
  if ((v20 & v19) == 0)
    goto LABEL_10;
LABEL_9:
  v23 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  for (i = v23 | (v18 << 6); ; i = __clz(__rbit64(v26)) + (v18 << 6))
  {
    v28 = *(_QWORD *)(v0 + 616);
    v29 = *(_QWORD *)(v0 + 560);
    v30 = *(_QWORD *)(v0 + 552);
    v15(v28, *(_QWORD *)(v17 + 48) + i * v79, v30);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v28, 0, 1, v30);
    if (v8(v28, 1, v30) == 1)
      goto LABEL_28;
    v31 = *(_QWORD *)(v0 + 568);
    v32 = *(_QWORD *)(v0 + 560);
    v33 = *(_QWORD *)(v0 + 552);
    v77(v31, *(_QWORD *)(v0 + 616), v33);
    v34 = Locale.LanguageCode.childLanguages.getter();
    v16 = sub_1A3A52D10(v34, v16);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    if (v22)
      goto LABEL_9;
LABEL_10:
    v25 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 >= v75)
      goto LABEL_27;
    v26 = *(_QWORD *)(v74 + 8 * v25);
    ++v18;
    if (!v26)
    {
      v18 = v25 + 1;
      if (v25 + 1 >= v75)
        goto LABEL_27;
      v26 = *(_QWORD *)(v74 + 8 * v18);
      if (!v26)
      {
        v18 = v25 + 2;
        if (v25 + 2 >= v75)
          goto LABEL_27;
        v26 = *(_QWORD *)(v74 + 8 * v18);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v22 = (v26 - 1) & v26;
  }
  v27 = v25 + 3;
  if (v27 >= v75)
  {
LABEL_27:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 560) + 56))(*(_QWORD *)(v0 + 616), 1, 1, *(_QWORD *)(v0 + 552));
LABEL_28:
    swift_release();
    goto LABEL_29;
  }
  v26 = *(_QWORD *)(v74 + 8 * v27);
  if (v26)
  {
    v18 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v18 >= v75)
      goto LABEL_27;
    v26 = *(_QWORD *)(v74 + 8 * v18);
    ++v27;
    if (v26)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1A3A52938()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 736);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 680);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 664);
  swift_task_dealloc();
  v1(v2, v3);
  return swift_task_switch();
}

uint64_t sub_1A3A529AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 560) + 8))(*(_QWORD *)(v0 + 576), *(_QWORD *)(v0 + 552));
  v1 = *(_QWORD *)(v0 + 336);
  if (v1)
  {
    v29 = *(_DWORD *)(v0 + 424);
    v30 = *(void **)(v0 + 408);
    v33 = *(_QWORD *)(v0 + 392);
    v34 = *(_QWORD *)(v0 + 400);
    v2 = *(_QWORD *)(v0 + 368);
    v25 = *(_QWORD *)(v0 + 376);
    v32 = *(_QWORD *)(v0 + 360);
    v3 = *(_QWORD *)(v0 + 344);
    v24 = *(_QWORD *)(v0 + 352);
    v19 = v2 >> 8;
    v26 = *(_QWORD *)(v0 + 416);
    v21 = *(_QWORD *)(v0 + 328);
    v22 = HIDWORD(v26) & 1;
    v23 = *(_BYTE *)(v0 + 428) & 1;
    v18 = *(_BYTE *)(v0 + 384);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 504);
    v29 = *(_DWORD *)(v4 + 96);
    v23 = *(unsigned __int8 *)(v4 + 100);
    LODWORD(v26) = *(_DWORD *)(v4 + 88);
    LODWORD(v22) = *(unsigned __int8 *)(v4 + 92);
    v30 = *(void **)(v4 + 80);
    v33 = *(_QWORD *)(v4 + 64);
    v34 = *(_QWORD *)(v4 + 72);
    v18 = *(_BYTE *)(v4 + 56);
    v25 = *(_QWORD *)(v4 + 48);
    LOBYTE(v19) = *(_BYTE *)(v4 + 41);
    LOBYTE(v2) = *(_BYTE *)(v4 + 40);
    v32 = *(_QWORD *)(v4 + 32);
    v3 = *(_QWORD *)(v4 + 16);
    v24 = *(_QWORD *)(v4 + 24);
    v1 = *(_QWORD *)(v4 + 8);
    v21 = *(_QWORD *)v4;
    sub_1A39FA5C4(v4);
  }
  v5 = *(uint64_t **)(v0 + 600);
  v27 = *(_QWORD *)(v0 + 536);
  v28 = *(_QWORD *)(v0 + 528);
  v20 = *(_QWORD *)(v0 + 544);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x1A85957F4](v6, v7, v8, v9);
  v12 = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 432) = v10;
  *(_QWORD *)(v0 + 440) = v12;
  *(_DWORD *)(v0 + 448) = 0;
  *(_BYTE *)(v0 + 452) = 1;
  *(_DWORD *)(v0 + 456) = 0;
  *(_BYTE *)(v0 + 460) = 1;
  *(_DWORD *)(v0 + 464) = 0;
  *(_BYTE *)(v0 + 468) = 1;
  *(_BYTE *)(v0 + 472) = 1;
  v13 = 1;
  if ((_DWORD)v22)
    v14 = 0x100000000;
  else
    v14 = 0;
  if (!v23)
    v13 = 0;
  *(_QWORD *)(v0 + 224) = v21;
  *(_QWORD *)(v0 + 232) = v1;
  *(_QWORD *)(v0 + 240) = v3;
  *(_QWORD *)(v0 + 248) = v24;
  *(_QWORD *)(v0 + 256) = v32;
  *(_QWORD *)(v0 + 264) = v2 | ((unint64_t)v19 << 8);
  *(_QWORD *)(v0 + 272) = v25;
  *(_QWORD *)(v0 + 280) = v18;
  *(_QWORD *)(v0 + 288) = v33;
  *(_QWORD *)(v0 + 296) = v34;
  *(_QWORD *)(v0 + 304) = v30;
  *(_QWORD *)(v0 + 312) = v14 | v26;
  *(_BYTE *)(v0 + 324) = v13;
  *(_DWORD *)(v0 + 320) = v29;
  v35 = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = v30;
  v15 = sub_1A39A08A8();
  sub_1A39A08B0(&v36);
  v37 = v36;
  sub_1A39A08B8(&v38);
  CoreSynthesizer.Utterance.init(id:speech:voice:priority:behavior:isoPrioritizedBehavior:replacementOptions:)(0, 0, (__int128 *)(v0 + 432), v0 + 224, v15, &v37, &v35, &v38, v0 + 16);
  sub_1A39A4820(&qword_1EE6D4188);
  sub_1A3AB4D3C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v20, v28);
  sub_1A3A557A0((uint64_t)v5);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 744) = v16;
  *v16 = v0;
  v16[1] = sub_1A3A52120;
  return sub_1A3AB4D78();
}

uint64_t sub_1A3A52D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;

  v4 = sub_1A3AB4424();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v25 - v9;
  v11 = sub_1A39A4820(&qword_1ED1B52F0);
  result = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0;
  v16 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v17 + 63) >> 6;
  v26 = a2;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v20 | (v15 << 6); ; i = __clz(__rbit64(v23)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v14, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v14, v4);
    sub_1A39BCA58((uint64_t)v10, v8);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (v19)
      goto LABEL_4;
LABEL_5:
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v22);
    ++v15;
    if (!v23)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v25)
        goto LABEL_24;
      v23 = *(_QWORD *)(v16 + 8 * v15);
      if (!v23)
      {
        v15 = v22 + 2;
        if (v22 + 2 >= v25)
          goto LABEL_24;
        v23 = *(_QWORD *)(v16 + 8 * v15);
        if (!v23)
        {
          v15 = v22 + 3;
          if (v22 + 3 >= v25)
            goto LABEL_24;
          v23 = *(_QWORD *)(v16 + 8 * v15);
          if (!v23)
            break;
        }
      }
    }
LABEL_20:
    v19 = (v23 - 1) & v23;
  }
  v24 = v22 + 4;
  if (v24 >= v25)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v14, 1, 1, v4);
LABEL_25:
    swift_release();
    return v26;
  }
  v23 = *(_QWORD *)(v16 + 8 * v24);
  if (v23)
  {
    v15 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v15 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v15);
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1A3A52FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  uint64_t v15;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v34;

  v1 = v0;
  v2 = sub_1A3AB4424();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v34 - v8;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - v10;
  if (sub_1A3AB43F4() == 26746 && v12 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v13(v11, v0, v2);
  }
  else
  {
    v14 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v13(v11, v0, v2);
    if ((v14 & 1) == 0)
    {
      if (sub_1A3AB43F4() != 6649209 || v15 != 0xE300000000000000)
      {
        v17 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
    }
  }
  v17 = 1;
LABEL_12:
  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v11, v2);
  v13(v9, v1, v2);
  if ((v17 & 1) != 0)
  {
LABEL_25:
    v18(v9, v2);
    v13(v6, v1, v2);
    goto LABEL_26;
  }
  if (sub_1A3AB43F4() == 7697783 && v19 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v21 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  v18(v9, v2);
  v13(v6, v1, v2);
  if ((v21 & 1) != 0)
  {
LABEL_26:
    v18(v6, v2);
    goto LABEL_27;
  }
  if (sub_1A3AB43F4() == 7236963 && v22 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v24 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  v18(v6, v2);
  if ((v24 & 1) != 0)
  {
LABEL_27:
    sub_1A39A4820(&qword_1EE6D41A0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1A3ABFBB0;
    v29 = (void *)*MEMORY[0x1E0CCDF78];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CCDF78];
    v30 = (void *)*MEMORY[0x1E0CCDFA0];
    *(_QWORD *)(inited + 40) = *MEMORY[0x1E0CCDFA0];
    v31 = v29;
    v32 = v30;
    v27 = sub_1A3A5489C(inited);
    swift_setDeallocating();
    type metadata accessor for NLLanguage(0);
    goto LABEL_28;
  }
  sub_1A39A4820(&qword_1EE6D41A0);
  v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_1A3ABF990;
  sub_1A3AB43F4();
  v26 = sub_1A3AB4958();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v25 + 32) = v26;
  v27 = sub_1A3A5489C(v25);
  swift_setDeallocating();
  type metadata accessor for NLLanguage(0);
LABEL_28:
  swift_arrayDestroy();
  return v27;
}

void sub_1A3A53338(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v7;
    if (!v13)
    {
      v7 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_23;
      v13 = *(_QWORD *)(v2 + 8 * v7);
      if (!v13)
      {
        v7 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_23;
        v13 = *(_QWORD *)(v2 + 8 * v7);
        if (!v13)
        {
          v7 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_23;
          v13 = *(_QWORD *)(v2 + 8 * v7);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
    v9 = __clz(__rbit64(v13)) + (v7 << 6);
LABEL_5:
    v10 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v9);
    sub_1A3A53880(&v15, v10);
    v11 = v15;

  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release();
    return;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v7 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v7);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1A3A534B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t sub_1A3A534C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1A39A4820(&qword_1EE6D4168);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_1A39A4820(&qword_1ED1B52F0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v7 = sub_1A3AB4424();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v6, 1, v7))
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v6, v7);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1A3A535D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(sub_1A39A4820(&qword_1EE6D4168) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_1A39A4820(&qword_1ED1B52F0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = v0 + v3;
  v10 = v0 + v6;
  v11 = *(_QWORD *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v12;
  *v12 = v1;
  v12[1] = sub_1A39B1604;
  return sub_1A3A4FF24((uint64_t)v12, v13, v14, v7, v8, v9, v10, v11);
}

uint64_t sub_1A3A536A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1A39A4820(&qword_1EE6D4188);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 168) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1A3A53760()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  sub_1A39A4820(&qword_1EE6D4188);
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[20];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1A39B1604;
  return sub_1A3A51DC8((uint64_t)v6, v7, v8, v2, v3, v4, (uint64_t)(v0 + 7), v5);
}

uint64_t sub_1A3A537FC()
{
  sub_1A39B9F44(&qword_1EE6D41E8, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1A3AC6E88);
  sub_1A39B9F44(&qword_1EE6D41F0, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1A3AC6E28);
  return sub_1A3AB54D4();
}

uint64_t sub_1A3A53880(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  id v24;
  void *v26;
  id v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  sub_1A3AB497C();
  sub_1A3AB56FC();
  swift_bridgeObjectRetain();
  sub_1A3AB4A30();
  v7 = sub_1A3AB5738();
  swift_bridgeObjectRelease();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v3;
    *v3 = 0x8000000000000000;
    v24 = a2;
    sub_1A3A53DB8((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  v10 = sub_1A3AB497C();
  v12 = v11;
  if (v10 == sub_1A3AB497C() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v15 = sub_1A3AB5654();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v16 = ~v8;
      do
      {
        v9 = (v9 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_15;
        v17 = sub_1A3AB497C();
        v19 = v18;
        if (v17 == sub_1A3AB497C() && v19 == v20)
          goto LABEL_16;
        v22 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  v26 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  v27 = v26;
  return 0;
}

uint64_t sub_1A3A53AA8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int64_t v28;
  _QWORD *v29;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D41F8);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v27 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v29 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v28 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28)
          goto LABEL_33;
        v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          v10 = v14 + 1;
          if (v14 + 1 >= v28)
            goto LABEL_33;
          v15 = v29[v10];
          if (!v15)
          {
            v10 = v14 + 2;
            if (v14 + 2 >= v28)
              goto LABEL_33;
            v15 = v29[v10];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                v1 = v27;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  v10 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_39;
                  if (v10 >= v28)
                    goto LABEL_33;
                  v15 = v29[v10];
                  ++v16;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v10 = v16;
            }
          }
        }
LABEL_23:
        v7 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
      sub_1A3AB497C();
      sub_1A3AB56FC();
      sub_1A3AB4A30();
      v18 = sub_1A3AB5738();
      result = swift_bridgeObjectRelease();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = v18 & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v17;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1A3A53DB8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  if ((a3 & 1) != 0)
  {
    sub_1A3A53AA8();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_1A3A53FE4();
LABEL_22:
      v25 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * a2) = v6;
      v26 = *(_QWORD *)(v25 + 16);
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (!v27)
      {
        *(_QWORD *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1A3A5418C();
  }
  v9 = *v3;
  sub_1A3AB497C();
  sub_1A3AB56FC();
  sub_1A3AB4A30();
  v10 = sub_1A3AB5738();
  result = swift_bridgeObjectRelease();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v12 = sub_1A3AB497C();
  v14 = v13;
  if (v12 == sub_1A3AB497C() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  v17 = sub_1A3AB5654();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v19 = sub_1A3AB497C();
      v21 = v20;
      if (v19 == sub_1A3AB497C() && v21 == v22)
        goto LABEL_25;
      v24 = sub_1A3AB5654();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for NLLanguage(0);
  result = sub_1A3AB566C();
  __break(1u);
  return result;
}

id sub_1A3A53FE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_1A39A4820(&qword_1EE6D41F8);
  v2 = *v0;
  v3 = sub_1A3AB5270();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1A3A5418C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_1A39A4820(&qword_1EE6D41F8);
  v3 = sub_1A3AB527C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v27 = v0;
  v28 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_33;
      v15 = *(_QWORD *)(v28 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_33;
        v15 = *(_QWORD *)(v28 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v13);
    sub_1A3AB497C();
    sub_1A3AB56FC();
    v18 = v17;
    sub_1A3AB4A30();
    v19 = sub_1A3AB5738();
    result = swift_bridgeObjectRelease();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = v19 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v28 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v29)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1A3A54468(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
LABEL_8:
    __break(1u);
  return result;
}

uint64_t sub_1A3A544BC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *sub_1A3A5456C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1A39A4820(&qword_1EE6D41A0);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = sub_1A3A54650(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1A39AE7C4();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1A3A54650(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1A3A54848(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1A3A5489C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1A39A4820(&qword_1EE6D41F8);
    v3 = sub_1A3AB5288();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      sub_1A3AB497C();
      sub_1A3AB56FC();
      v7 = v6;
      sub_1A3AB4A30();
      v8 = sub_1A3AB5738();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = sub_1A3AB497C();
        v17 = v16;
        if (v15 == sub_1A3AB497C() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = sub_1A3AB5654();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = sub_1A3AB497C();
          v24 = v23;
          if (v22 == sub_1A3AB497C() && v24 == v25)
            goto LABEL_3;
          v27 = sub_1A3AB5654();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
  sub_1A39EB6C8(a1, &qword_1EE6D41C8);
}

unint64_t sub_1A3A54AE0()
{
  unint64_t result;

  result = qword_1EE6D41A8;
  if (!qword_1EE6D41A8)
  {
    result = MEMORY[0x1A8597738](&protocol conformance descriptor for TTSSegmentGenerator.SwitchMode, &type metadata for TTSSegmentGenerator.SwitchMode);
    atomic_store(result, (unint64_t *)&qword_1EE6D41A8);
  }
  return result;
}

uint64_t type metadata accessor for TTSSegmentGenerator()
{
  return objc_opt_self();
}

uint64_t method lookup function for TTSSegmentGenerator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TTSSegmentGenerator.preferredLocales.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of TTSSegmentGenerator.preferredLocales.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of TTSSegmentGenerator.preferredLocales.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of TTSSegmentGenerator.backupSwitchThreshold.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of TTSSegmentGenerator.backupSwitchThreshold.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of TTSSegmentGenerator.backupSwitchThreshold.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of TTSSegmentGenerator.__allocating_init(mode:tokenUnit:locales:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v3 + 192) + *(_QWORD *)(v3 + 192));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_1A39D5170;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of TTSSegmentGenerator.segmentStream(string:baseLanguage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

_QWORD *initializeBufferWithCopyOfBuffer for TTSSegmentGenerator.Segment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  __int128 v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v8 = *(int *)(a3 + 24);
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = sub_1A3AB4424();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_1A39A4820(&qword_1ED1B52F0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = *(int *)(a3 + 28);
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    if (*(uint64_t *)((char *)a2 + v16 + 24))
    {
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = *(_BYTE *)(v18 + 16);
      sub_1A3A20648(*(_QWORD *)v18, v20, v21);
      *(_QWORD *)v17 = v19;
      *((_QWORD *)v17 + 1) = v20;
      v17[16] = v21;
      *((_QWORD *)v17 + 3) = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v22 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
    }
  }
  return v4;
}

uint64_t destroy for TTSSegmentGenerator.Segment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1A3AB4424();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 28);
  if (*(_QWORD *)(v8 + 24))
  {
    sub_1A3A204C8(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TTSSegmentGenerator.Segment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1A3AB4424();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = sub_1A39A4820(&qword_1ED1B52F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  if (*(_QWORD *)(a2 + v14 + 24))
  {
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 16);
    sub_1A3A20648(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *(_QWORD *)(v15 + 8) = v18;
    *(_BYTE *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v20;
  }
  return a1;
}

_QWORD *assignWithCopy for TTSSegmentGenerator.Segment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1A3AB4424();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_1A39A4820(&qword_1ED1B52F0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 28);
  v16 = (uint64_t)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)((char *)a1 + v15 + 24);
  v19 = *(_QWORD *)((char *)a2 + v15 + 24);
  if (v18)
  {
    if (v19)
    {
      v20 = *(_QWORD *)v17;
      v21 = *((_QWORD *)v17 + 1);
      v22 = v17[16];
      sub_1A3A20648(*(_QWORD *)v17, v21, v22);
      v23 = *(_QWORD *)v16;
      v24 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v16 = v20;
      *(_QWORD *)(v16 + 8) = v21;
      v25 = *(_BYTE *)(v16 + 16);
      *(_BYTE *)(v16 + 16) = v22;
      sub_1A3A204C8(v23, v24, v25);
      *(_QWORD *)(v16 + 24) = *((_QWORD *)v17 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1A3A55168(v16);
      v29 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_OWORD *)(v16 + 16) = v29;
    }
  }
  else if (v19)
  {
    v26 = *(_QWORD *)v17;
    v27 = *((_QWORD *)v17 + 1);
    v28 = v17[16];
    sub_1A3A20648(*(_QWORD *)v17, v27, v28);
    *(_QWORD *)v16 = v26;
    *(_QWORD *)(v16 + 8) = v27;
    *(_BYTE *)(v16 + 16) = v28;
    *(_QWORD *)(v16 + 24) = *((_QWORD *)v17 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v30 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v30;
  }
  return a1;
}

uint64_t sub_1A3A55168(uint64_t a1)
{
  destroy for TTSStringTagger.CombinedScriptLanguageTag(a1);
  return a1;
}

_OWORD *initializeWithTake for TTSSegmentGenerator.Segment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1A3AB4424();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1A39A4820(&qword_1ED1B52F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 28);
  v14 = (_OWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  return a1;
}

uint64_t assignWithTake for TTSSegmentGenerator.Segment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  __int128 v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_1A3AB4424();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_1A39A4820(&qword_1ED1B52F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  if (!*(_QWORD *)(a1 + v16 + 24))
  {
LABEL_11:
    v23 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v23;
    return a1;
  }
  if (!*(_QWORD *)(v18 + 24))
  {
    sub_1A3A55168(v17);
    goto LABEL_11;
  }
  v19 = *(_BYTE *)(v18 + 16);
  v20 = *(_QWORD *)v17;
  v21 = *(_QWORD *)(v17 + 8);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v22 = *(_BYTE *)(v17 + 16);
  *(_BYTE *)(v17 + 16) = v19;
  sub_1A3A204C8(v20, v21, v22);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TTSSegmentGenerator.Segment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A5541C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1A39A4820(&qword_1ED1B52F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TTSSegmentGenerator.Segment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1A3A554A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_1A39A4820(&qword_1ED1B52F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1A3A55520()
{
  unint64_t v0;

  sub_1A3A555A4();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1A3A555A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE6D41B8)
  {
    sub_1A3AB4424();
    v0 = sub_1A3AB50FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE6D41B8);
  }
}

uint64_t storeEnumTagSinglePayload for TTSSegmentGenerator.SwitchMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1A3A55644 + 4 * byte_1A3AC6C55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1A3A55678 + 4 * byte_1A3AC6C50[v4]))();
}

uint64_t sub_1A3A55678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A55680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A3A55688);
  return result;
}

uint64_t sub_1A3A55694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A3A5569CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1A3A556A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A3A556A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTSSegmentGenerator.SwitchMode()
{
  return &type metadata for TTSSegmentGenerator.SwitchMode;
}

void type metadata accessor for NLTokenUnit(uint64_t a1)
{
  sub_1A39EB6C8(a1, &qword_1EE6D41C0);
}

uint64_t sub_1A3A556D8()
{
  return sub_1A39B9F44(&qword_1EE6D41D0, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1A3AC6DEC);
}

uint64_t sub_1A3A55704()
{
  return sub_1A39B9F44(&qword_1EE6D41D8, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1A3AC6DC0);
}

uint64_t sub_1A3A55730()
{
  return sub_1A39B9F44(&qword_1EE6D41E0, (uint64_t (*)(uint64_t))type metadata accessor for NLLanguage, (uint64_t)&unk_1A3AC6E5C);
}

uint64_t sub_1A3A5575C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TTSSegmentGenerator.Segment();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3A557A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TTSSegmentGenerator.Segment();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A3A557DC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t TTSMarkup.Sub.init(_:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  _QWORD v27[2];
  _QWORD v28[6];

  v28[5] = MEMORY[0x1E0DEE9D8];
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))();
  if (!*(_QWORD *)(v5 + 16) || (v6 = sub_1A39A2734(0x7361696C61, 0xE500000000000000), (v7 & 1) == 0))
  {

    result = swift_bridgeObjectRelease();
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    return result;
  }
  v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v6);
  v10 = *v8;
  v9 = v8[1];
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRelease();
  v27[0] = v10;
  v27[1] = v9;
  v12 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x100))(v11);
  v13 = v12;
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_5;
LABEL_20:
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_21:
    swift_bridgeObjectRelease_n();
    v25 = sub_1A39A4820(&qword_1EE6D2BE0);
    v26 = &protocol witness table for <A> [A];

    *(_QWORD *)&v24 = v17;
    sub_1A39A1AB8(&v24, (uint64_t)v28);
    sub_1A3A55D20((uint64_t)v27, (uint64_t)a2);
    return sub_1A3A55D30((uint64_t)v27);
  }
  swift_bridgeObjectRetain();
  result = sub_1A3AB5480();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_5:
  if (v14 >= 1)
  {
    v16 = 0;
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        v18 = (id)MEMORY[0x1A85960B8](v16, v13);
      else
        v18 = *(id *)(v13 + 8 * v16 + 32);
      v19 = v18;
      sub_1A39D518C((uint64_t)&v22);

      if (v23)
      {
        sub_1A39A1AB8(&v22, (uint64_t)&v24);
        sub_1A39A1AB8(&v24, (uint64_t)&v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = sub_1A39BFBD8(0, v17[2] + 1, 1, v17);
        v21 = v17[2];
        v20 = v17[3];
        if (v21 >= v20 >> 1)
          v17 = sub_1A39BFBD8((_QWORD *)(v20 > 1), v21 + 1, 1, v17);
        v17[2] = v21 + 1;
        sub_1A39A1AB8(&v22, (uint64_t)&v17[5 * v21 + 4]);
      }
      else
      {
        sub_1A39BFB74((uint64_t)&v22);
      }
      ++v16;
    }
    while (v14 != v16);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void static TTSMarkup.Sub.tag.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t TTSMarkup.Sub._content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 16, a1);
}

uint64_t TTSMarkup.Sub._content.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 16;
  sub_1A39A47C4(v3);
  return sub_1A39A1AB8(a1, v3);
}

uint64_t (*TTSMarkup.Sub._content.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Sub.eventTaps.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TTSMarkup.Sub.eventTaps.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*TTSMarkup.Sub.eventTaps.modify())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t TTSMarkup.Sub.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 16, a1);
}

uint64_t sub_1A3A55B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  *a4 = a1;
  a4[7] = MEMORY[0x1E0DEE9D8];
  a4[1] = a2;
  return a3();
}

unint64_t TTSMarkup.Sub.attributes.getter()
{
  _QWORD *v0;
  uint64_t inited;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 0x7361696C61;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v2 = v0[1];
  *(_QWORD *)(inited + 48) = *v0;
  *(_QWORD *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t TTSMarkup.Sub.accept<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v7[5];

  v7[3] = &type metadata for TTSMarkup.Sub;
  v7[4] = &protocol witness table for TTSMarkup.Sub;
  v7[0] = swift_allocObject();
  sub_1A3A55D20(v3, v7[0] + 16);
  TTSMarkupVisitor.visit(_:)(v7, a2, a3);
  return sub_1A39A47C4((uint64_t)v7);
}

void sub_1A3A55C54(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

unint64_t sub_1A3A55C60()
{
  _QWORD *v0;
  uint64_t inited;
  uint64_t v2;

  sub_1A39A4820(&qword_1EE6D2368);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1A3ABF990;
  *(_QWORD *)(inited + 32) = 0x7361696C61;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v2 = v0[1];
  *(_QWORD *)(inited + 48) = *v0;
  *(_QWORD *)(inited + 56) = v2;
  swift_bridgeObjectRetain();
  return sub_1A39A5780(inited);
}

uint64_t sub_1A3A55CCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 16, a1);
}

uint64_t sub_1A3A55CD8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1A3A55CE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*sub_1A3A55D08())(_QWORD, _QWORD)
{
  return nullsub_19;
}

uint64_t sub_1A3A55D20(uint64_t a1, uint64_t a2)
{
  return _s3SubVwcp(a2, a1);
}

uint64_t sub_1A3A55D30(uint64_t a1)
{
  _s3SubVwxx(a1);
  return a1;
}

uint64_t sub_1A3A55D54()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1A39A47C4(v0 + 32);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t _s3SubVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 16);
  return swift_bridgeObjectRelease();
}

uint64_t _s3SubVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 16;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 16, v5, v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s3SubVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1A39B8070(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s3SubVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  sub_1A39A47C4(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TTSMarkup.Sub()
{
  return &type metadata for TTSMarkup.Sub;
}

uint64_t CoreSynthesizer.UtteranceRunner.executor.getter()
{
  return swift_retain();
}

uint64_t sub_1A3A55F0C()
{
  return CoreSynthesizer.Utterance.description.getter();
}

uint64_t sub_1A3A55F2C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 24)) + 0x1E0))();
}

uint64_t CoreSynthesizer.UtteranceRunner.rootUtterance.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39EA7A8(v1 + 32, a1);
}

uint64_t CoreSynthesizer.UtteranceRunner.speechTree.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A39A1AD0(v1 + 240, a1);
}

uint64_t sub_1A3A55F7C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 224);
}

uint64_t sub_1A3A55F84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1A3A55FB0(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

void sub_1A3A55FBC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 49);
}

uint64_t _s15UtteranceRunnerC14SynthesisStateVMa(uint64_t a1)
{
  return sub_1A39B9724(a1, qword_1EE6E1BE0);
}

uint64_t sub_1A3A55FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];

  v3 = sub_1A39A4820(&qword_1EE6D3240);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1A39A4820((uint64_t *)&unk_1EE6D4228);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  sub_1A39B9F00(v1 + OBJC_IVAR____TtCC12TextToSpeech15CoreSynthesizer15UtteranceRunner_eventContinuation, (uint64_t)v5, &qword_1EE6D3240);
  v13 = sub_1A39A4820(&qword_1EE6D3250);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v5, 1, v13) == 1)
  {
    sub_1A39B11F4((uint64_t)v5, &qword_1EE6D3240);
    v15 = sub_1A39A4820(&qword_1EE6D3278);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v8, 1, 1, v15);
  }
  else
  {
    v18[0] = v9;
    v18[1] = v10;
    v18[2] = v11;
    v18[3] = v12;
    sub_1A39EB370(v9, v10, v11);
    sub_1A3AB4E50();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v13);
    v16 = sub_1A39A4820(&qword_1EE6D3278);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  }
  return sub_1A39B11F4((uint64_t)v8, (uint64_t *)&unk_1EE6D4228);
}

uint64_t sub_1A3A56190()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  sub_1A3AB4C70();
  return swift_task_switch();
}

void sub_1A3A56204()
{
  __asm { BR              X11 }
}

uint64_t sub_1A3A56238@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  *(_BYTE *)(a1 + 281) = 1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1A3A56320;
  return sub_1A3A56814();
}

uint64_t sub_1A3A56274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  *(_BYTE *)(a1 + 281) = 1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  *v2 = v1;
  v2[1] = sub_1A3A5636C;
  return sub_1A3A5BC74();
}

uint64_t sub_1A3A562B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A562C8()
{
  return sub_1A3AB5444();
}

uint64_t sub_1A3A56320()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1A3A5636C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t type metadata accessor for CoreSynthesizer.UtteranceRunner(uint64_t a1)
{
  return sub_1A39B9724(a1, (uint64_t *)&unk_1EE6E1BD0);
}

uint64_t sub_1A3A563CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  v3[5] = sub_1A3AB4C70();
  v3[6] = v4;
  return swift_task_switch();
}

void sub_1A3A56444()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD *);
  _QWORD v4[9];

  if (v0[2])
  {
    v1 = v0[3];
    v2 = v0[4];
    v4[0] = v0[2];
    v4[1] = v1;
    v4[2] = 0;
    v4[3] = 0;
    v3 = *(void (**)(_QWORD *))(*(_QWORD *)v2 + 256);
    swift_unknownObjectRetain();
    v3(v4);
    swift_unknownObjectRelease();
  }
  __asm { BR              X10 }
}

uint64_t sub_1A3A564B0()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v0 + 281) = 3;
  TTSSpeechEvent.emit(forJob:)(*(Swift::String *)(v0 + 32));
  sub_1A3A5C11C(0);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1A3A5650C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD **)(v0 + 24);
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1B0))();
  objc_msgSend(v4, sel_stop);

  v5 = (*(uint64_t (**)(void))((*v3 & *v2) + 0x210))();
  *(_QWORD *)(v1 + 56) = v5;
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(*(_QWORD *)v5 + 360);
  type metadata accessor for TTSAURenderer();
  sub_1A39B9F44(&qword_1EE6D2D08, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A565C8()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 64))();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A56608()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  *(_BYTE *)(v1 + 281) = 3;
  TTSSpeechEvent.emit(forJob:)(*(Swift::String *)(v1 + 32));
  sub_1A3A5C11C(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A5667C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A566F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_BYTE *);
  _QWORD **v6;
  void *v7;
  _BYTE v9[40];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 32);
  if (*(_BYTE *)(v1 + 281) == 1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)v9 = 1;
    memset(&v9[8], 0, 32);
    v10 = 0u;
    v11 = 0;
    LOBYTE(v12) = 9;
    TTSSpeechEvent.emit(forJob:)(*(Swift::String *)(v1 + 32));
    if (v2)
    {
      v4 = *(_QWORD *)(v0 + 32);
      *(_OWORD *)v9 = *(_OWORD *)(v0 + 16);
      *(_OWORD *)&v9[16] = 0uLL;
      v5 = *(void (**)(_BYTE *))(*(_QWORD *)v4 + 256);
      swift_unknownObjectRetain();
      v5(v9);
      v3 = swift_unknownObjectRelease();
    }
    v6 = *(_QWORD ***)(v0 + 32);
    *(_BYTE *)(v1 + 281) = 2;
    v7 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6[3]) + 0x1B0))(v3);
    objc_msgSend(v7, sel_stop, *(_OWORD *)v9, *(_OWORD *)&v9[16], *(_QWORD *)&v9[32], v10, v11, v12);

    *(_OWORD *)v9 = xmmword_1A3AC1BC0;
    *(_OWORD *)&v9[16] = xmmword_1A3AC1B90;
    ((void (*)(_BYTE *))(*v6)[32])(v9);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1A3A56814()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v1[4] = _s15UtteranceRunnerC14SynthesisStateVMa(0);
  v1[5] = swift_task_alloc();
  v2 = sub_1A3AB4724();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  type metadata accessor for CoreSynthesizer.UtteranceRunner(0);
  sub_1A39B9F44(&qword_1EE6D4238, type metadata accessor for CoreSynthesizer.UtteranceRunner, (uint64_t)&protocol conformance descriptor for CoreSynthesizer.UtteranceRunner);
  v1[9] = sub_1A3AB4C70();
  v1[10] = v3;
  return swift_task_switch();
}

uint64_t sub_1A3A568D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(v0[3] + 24);
  v0[11] = v1;
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x210))();
  v0[12] = v2;
  v0[13] = *(_QWORD *)(*(_QWORD *)v2 + 360);
  type metadata accessor for TTSAURenderer();
  sub_1A39B9F44(&qword_1EE6D2D08, (uint64_t (*)(uint64_t))type metadata accessor for TTSAURenderer, (uint64_t)&protocol conformance descriptor for TTSAURenderer);
  sub_1A3AB4C70();
  return swift_task_switch();
}

uint64_t sub_1A3A56980()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 104))();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A569C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(v1 + 232) & 1) == 0)
  {
    CoreSynthesizer.Utterance.ssml.getter();
    TTSSpeechEvent.emit(forJob:)(*(Swift::String *)(v1 + 32));
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v0 + 24);
  }
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 88)) + 0x150))();
  *(_QWORD *)(v0 + 112) = v2;
  v5 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 408) + *(_QWORD *)(*(_QWORD *)v1 + 408));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v3;
  *v3 = v0;
  v3[1] = sub_1A3A56A98;
  return v5(v2);
}

uint64_t sub_1A3A56A98(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1A3A56AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  __int128 v31;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = sub_1A39AACDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  v5 = sub_1A3AB470C();
  v6 = sub_1A3AB4FC4();
  if (os_log_type_enabled(v5, v6))
  {
    v27 = *(_QWORD *)(v0 + 56);
    v28 = *(_QWORD *)(v0 + 48);
    v29 = *(_QWORD *)(v0 + 64);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v30[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = type metadata accessor for SpeechSlicer.Slice(0);
    v10 = swift_bridgeObjectRetain();
    v11 = MEMORY[0x1A85959A4](v10, v9);
    v13 = v12;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = sub_1A39A2878(v11, v13, v30);
    sub_1A3AB5138();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A3940000, v5, v6, "Speaking effective slices: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A859781C](v8, -1, -1);
    MEMORY[0x1A859781C](v7, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 48);

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  v17 = *(unsigned __int8 **)(v0 + 24);
  v18 = v17[281];
  if (v18 == 2)
  {
    swift_bridgeObjectRelease();
    v17[281] = 0;
  }
  else
  {
    if (v18 == 1)
    {
      v19 = *(_QWORD *)(v0 + 128);
      v21 = *(_QWORD *)(v0 + 32);
      v20 = *(_QWORD **)(v0 + 40);
      v30[0] = 0;
      v30[1] = 0;
      v31 = xmmword_1A3AC1B90;
      (*(void (**)(uint64_t *))(*(_QWORD *)v17 + 256))(v30);
      v22 = (char *)v20 + *(int *)(v21 + 24);
      v23 = type metadata accessor for SpeechSlicer.Slice(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
      v24 = MEMORY[0x1E0DEE9D8];
      *v20 = 0;
      v20[1] = v24;
      *(_QWORD *)((char *)v20 + *(int *)(v21 + 28)) = v19;
      v25 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v25;
      *v25 = v0;
      v25[1] = sub_1A3A56DE8;
      return sub_1A3A56E80(*(_QWORD *)(v0 + 40));
    }
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

